// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPL-EAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpl I1_32:Imm, %eax:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 ))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(%eax, RSMap), 32, 64))), mi(33, 1)), 0, 1)), mi(16, 65535)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 ))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(%eax, RSMap), 32, 64))), mi(33, 1)), 0, 1)), mi(16, 65535)), 8, 16))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), mi(32, 1)), 0, 1) )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), mi(32, 1))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), mi(32, 1)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), mi(32, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), mi(32, 1)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
