// Autogenerated using stratification.
requires "x86-configuration.k"

module ADCB-RH-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (adcb R1:R8, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ADCB-RH-R8-SEMANTICS
  imports ADCB-RH-R8
endmodule
/*
TargetInstr:
adcb %bl, %ah
RWSet:
maybe read:{ %ah %bl %cf }
must read:{ %ah %bl %cf }
maybe write:{ %ah %cf %pf %af %zf %sf %of }
must write:{ %ah %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %ah, %edi       #  1     0    3      OPC=movzbl_r32_rh
circuit:adcb %dil, %bl         #  2     0x3  3      OPC=adcb_r8_r8
circuit:callq .set_szp_for_bl  #  3     0x6  5      OPC=callq_label
circuit:movb %bl, %ah          #  4     0xb  2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

adcb %bl, %ah

  maybe read:      { %ah %bl %cf }
  must read:       { %ah %bl %cf }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edi

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdi/%rdi: %rdi_adcb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdi
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_adcb_rh_r8[15:8]

Final state
%rdi/%rdi: 0x0₅₆ ∘ %rax_adcb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: %rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0]

%cf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_rh_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_adcb_rh_r8
%rdx/%rdx: %rdx_adcb_rh_r8

%xmm0: %ymm0_adcb_rh_r8[127:0]
%xmm1: %ymm1_adcb_rh_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for adcb %bl, %ah

.target:
movzbl %ah, %edi
adcb %dil, %bl
callq .set_szp_for_bl
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: adcb %bl, %ah:
%rax/%ah: %rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0]

%cf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_rh_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0])[15:8]
  after renaming it is => ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0]

Final state
%rax/%ah: %rax[63:16] ∘ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0] ∘ %rax[7:0]

%cf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf: !(((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of: (%rax[15:15] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

=====================================
Circuits:

%rax   : %rax[63:16] ∘ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0] ∘ %rax[7:0]

%cf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf    : !(((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/