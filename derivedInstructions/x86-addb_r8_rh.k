// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(getParentValue(R1, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ADDB-R8-RH-SEMANTICS
  imports ADDB-R8-RH
endmodule
/*
TargetInstr:
addb %ah, %bl
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %bl %cf %pf %af %zf %sf %of }
must write:{ %bl %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %ah, %eax  #  1     0    3      OPC=movzbl_r32_rh
circuit:addb %al, %bl     #  2     0x3  2      OPC=addb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

addb %ah, %bl

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %eax

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rax/%rax: %rax_addb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rax
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_addb_r8_rh[15:8]

Final state
%rax/%rax: 0x0₅₆ ∘ %rax_addb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %cl, %bl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rcx/%cl: %rcx_addb_r8_r8
%rbx/%bl: %rbx_addb_r8_r8

%cf: %cf_addb_r8_r8
%pf: %pf_addb_r8_r8
%af: %af_addb_r8_r8
%zf: %zf_addb_r8_r8
%sf: %sf_addb_r8_r8
%of: %of_addb_r8_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rcx/%cl: %rcx_addb_r8_r8[63:8] ∘ %rbx_addb_r8_r8[7:0]
%rbx/%bl: %rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0]

%cf: (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_addb_r8_r8[3:0] + 0x0₁ ∘ %rcx_addb_r8_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:7] = 0x1₁
%of: (%rbx_addb_r8_r8[7:7] = 0x1₁ ↔ %rcx_addb_r8_r8[7:7] = 0x1₁) ∧ !(%rbx_addb_r8_r8[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_addb_r8_r8
%rdx/%rdx: %rdx_addb_r8_r8

%xmm0: %ymm0_addb_r8_r8[127:0]
%xmm1: %ymm1_addb_r8_r8[127:0]

-------------------------------------
=====================================
Computing circuit for addb %al, %bl

.target:
xaddb %cl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_addb_r8_rh

%cf: %cf_addb_r8_rh
%pf: %pf_addb_r8_rh
%af: %af_addb_r8_rh
%zf: %zf_addb_r8_rh
%sf: %sf_addb_r8_rh
%of: %of_addb_r8_rh

State for specgen instruction: addb %cl, %bl:
%rbx/%bl: %rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0]

%cf: (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[8:8] = 0x1₁
%pf: !((%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_addb_r8_r8[3:0] + 0x0₁ ∘ %rcx_addb_r8_r8[3:0])[4:4] = 0x1₁
%zf: (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_addb_r8_r8[7:7] = 0x1₁ ↔ %rcx_addb_r8_r8[7:7] = 0x1₁) ∧ !(%rbx_addb_r8_r8[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_addb_r8_r8[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_r8[7:0] + 0x0₁ ∘ %rcx_addb_r8_r8[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:0]

Final state
%rbx/%bl: %rbx_addb_r8_rh[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:0]

%cf: (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_addb_r8_rh[3:0] + 0x0₁ ∘ %rax_addb_r8_rh[11:8])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:7] = 0x1₁
%of: (%rbx_addb_r8_rh[7:7] = 0x1₁ ↔ %rax_addb_r8_rh[15:15] = 0x1₁) ∧ !(%rbx_addb_r8_rh[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for addb %ah, %bl

.target:
movzbl %ah, %eax
addb %al, %bl
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: addb %ah, %bl:
%rbx/%bl: %rbx_addb_r8_rh[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:0]

%cf: (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_addb_r8_rh[3:0] + 0x0₁ ∘ %rax_addb_r8_rh[11:8])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:7] = 0x1₁
%of: (%rbx_addb_r8_rh[7:7] = 0x1₁ ↔ %rax_addb_r8_rh[15:15] = 0x1₁) ∧ !(%rbx_addb_r8_rh[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_addb_r8_rh[63:8] ∘ (0x0₁ ∘ %rbx_addb_r8_rh[7:0] + 0x0₁ ∘ %rax_addb_r8_rh[15:8])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:0]

Final state
%rbx/%bl: %rbx[63:8] ∘ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:0]

%cf: (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx[3:0] + 0x0₁ ∘ %rax[11:8])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁
%of: (%rbx[7:7] = 0x1₁ ↔ %rax[15:15] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:0]

%cf    : (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rbx[3:0] + 0x0₁ ∘ %rax[11:8])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁
%of    : (%rbx[7:7] = 0x1₁ ↔ %rax[15:15] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/