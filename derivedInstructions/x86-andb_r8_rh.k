// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 56, 57)), extractMInt(getParentValue(R1, RSMap), 48, 49)), xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 56, 57))) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ANDB-R8-RH-SEMANTICS
  imports ANDB-R8-RH
endmodule
/*
TargetInstr:
andb %ah, %bl
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %bl %cf %pf %zf %sf %of }
must write:{ %bl %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:notb %bl       #  1     0    2      OPC=notb_r8
circuit:orb %bl, %ah   #  2     0x2  2      OPC=orb_rh_r8
circuit:xorb %ah, %bl  #  3     0x4  2      OPC=xorb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andb %ah, %bl

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for xorq %rdx, %rdx

Final state:
%rdx/%rdx: %rdx_notb_r8 ⊕ %rdx_notb_r8

%cf: false
%pf: !((%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rdx_notb_r8 ⊕ %rdx_notb_r8) = 0x0₆₄
%sf: (%rdx_notb_r8 ⊕ %rdx_notb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %dl

Final state:
%rdx/%dl: (%rdx_notb_r8 ⊕ %rdx_notb_r8)[63:8] ∘ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_notb_r8[7:0][3:0] + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_notb_r8[7:0][7:7] = 0x1₁ ↔ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][7:7] = 0x1₁) ∧ !(%rbx_notb_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rax

Final state:
%rax/%rax: sign-extend-64(%rbx_notl_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rbx

Final state:
%rbx/%rbx: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %eax, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: 0xffffffffffffffff₆₄

%cf: %cf_notl_r32
%pf: %pf_notl_r32
%zf: %zf_notl_r32
%sf: %sf_notl_r32
%of: %of_notl_r32

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

%cf: false
%pf: !((%rbx_notl_r32[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (%rbx_notl_r32[31:0] ⊕ 0xffffffff₃₂) = 0x0₃₂
%sf: (%rbx_notl_r32[31:31] ⊕ 0x1₁) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for notl %edx

.target:
movslq %ebx, %rax
movq $0xffffffffffffffff, %rbx
xorl %eax, %ebx
retq 

Initial state:
%rdx/%rdx: (%rdx_notb_r8 ⊕ %rdx_notb_r8)[63:8] ∘ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0]

State for specgen instruction: notl %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄
  after renaming it is => 0x0₃₂ ∘ (0x0₂₄ ∘ %rbx_notb_r8[7:0]) ⊕ 0xffffffff₆₄

Final state
%rdx/%rdx: 0x0₃₂ ∘ (0x0₂₄ ∘ %rbx_notb_r8[7:0]) ⊕ 0xffffffff₆₄

=====================================
-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %cx, %ebx

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rbx/%rbx: %rbx_movswl_r32_r16

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₄₈ ∘ %rcx_movswl_r32_r16[15:0]

Final state
%rbx/%rbx: 0x0₄₈ ∘ %rcx_movswl_r32_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_movswl_r32_r16
%rdx/%rdx: %rdx_movswl_r32_r16

%xmm0: %ymm0_movswl_r32_r16[127:0]
%xmm1: %ymm1_movswl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffc0, %rbx

Final state:
%rbx/%rbx: 0xffffffffffffffc0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rcx_movw_r16_r16[15:0])

-------------------------------------
=====================================
Computing circuit for movw %r8w, %bx

.target:
movswq %cx, %rbx
retq 

Initial state:
%rbx/%bx: 0xffffffffffffffc0₆₄

State for specgen instruction: movw %cx, %bx:
%rbx/%bx: sign-extend-64(%rcx_movw_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64(%rcx_movw_r16_r16[15:0])[15:0]
  after renaming it is => %rcx_movswl_r32_r16[15:0]

Final state
%rbx/%bx: 0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r9

Final state:
%r9/%r9: sign-extend-64((0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r9d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: 0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0]
%r9/%r9: sign-extend-64((0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0])[15:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]

Register        -> %rbx
  translates to => %r9
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ (0xffff₁₆ ∘ %rcx_movswl_r32_r16[15:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]
%r9/%r9: 0x0₃₂ ∘ (0xffff₁₆ ∘ %rcx_movswl_r32_r16[15:0])

=====================================
=====================================
Computing circuit for movswl %dx, %ebx

.target:
movzwl %cx, %ebx
callq .move_064_032_rbx_r8d_r9d
movq $0xffffffffffffffc0, %rbx
movw %r8w, %bx
movswq %bx, %r9
xchgl %ebx, %r9d
retq 

Initial state:
%rbx/%rbx: %rbx_notb_r8

State for specgen instruction: movswl %cx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0]

=====================================
=====================================
Computing circuit for notb %bl

.target:
xorq %rdx, %rdx
adcb %bl, %dl
notl %edx
movswl %dx, %ebx
retq 

Initial state:
%rbx/%bl: %rbx_andb_r8_rh

State for specgen instruction: notb %bl:
%rbx/%bl: 0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0]

Register        -> %bl
  translates to => %bl
Value is               -> (0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0])[7:0]
  after renaming it is => %rbx_andb_r8_rh[7:0] ⊕ 0xff₈

Final state
%rbx/%bl: %rbx_andb_r8_rh[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %bh

Final state:
%rbx/%bh: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %bh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

%cf: %cf_xorb_r8_r8
%pf: %pf_xorb_r8_r8
%zf: %zf_xorb_r8_r8
%sf: %sf_xorb_r8_r8
%of: %of_xorb_r8_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]

Final state
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !((%rbx_xorb_r8_r8[0:0] ⊕ %rcx_xorb_r8_r8[0:0]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[1:1] ⊕ %rcx_xorb_r8_r8[1:1]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[2:2] ⊕ %rcx_xorb_r8_r8[2:2]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[3:3] ⊕ %rcx_xorb_r8_r8[3:3]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[4:4] ⊕ %rcx_xorb_r8_r8[4:4]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[5:5] ⊕ %rcx_xorb_r8_r8[5:5]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[6:6] ⊕ %rcx_xorb_r8_r8[6:6]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁)
%zf: (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]) = 0x0₈
%sf: (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_r8
%rdx/%rdx: %rdx_xorb_r8_r8

%xmm0: %ymm0_xorb_r8_r8[127:0]
%xmm1: %ymm1_xorb_r8_r8[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %al, %al

.target:
movb %cl, %bh
xorb %bh, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rax/%al: %rax_orb_rh_r8

%cf: %cf_orb_rh_r8
%pf: %pf_orb_rh_r8
%zf: %zf_orb_rh_r8
%sf: %sf_orb_rh_r8
%of: %of_orb_rh_r8

State for specgen instruction: xorb %cl, %bl:
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !(((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][0:0] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][1:1] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][2:2] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][3:3] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][4:4] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][5:5] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][6:6] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][7:7] = 0x1₁)
%zf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0] = 0x0₈
%sf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %al
Value is               -> ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0]
  after renaming it is => 0x0₈

Final state
%rax/%al: %rax_orb_rh_r8[63:8] ∘ 0x0₈

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movb %bl, %ch

Final state:
%rcx/%ch: %rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ch, %cl

Final state:
%rcx/%cl: (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xchgb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]
%rbx/%bl: %rbx_xchgb_r8_rh

%cf: %cf_xchgb_r8_rh
%pf: %pf_xchgb_r8_rh
%af: %af_xchgb_r8_rh
%zf: %zf_xchgb_r8_rh
%sf: %sf_xchgb_r8_rh
%of: %of_xchgb_r8_rh

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:0]
%rbx/%bl: %rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8]

%cf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xchgb_r8_rh[11:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁
%of: (%rax_xchgb_r8_rh[15:15] = 0x1₁ ↔ %rbx_xchgb_r8_rh[7:7] = 0x1₁) ∧ !(%rax_xchgb_r8_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0]

-------------------------------------
=====================================
Computing circuit for xchgb %ah, %bl

.target:
movb %bl, %ch
movb %ch, %cl
movzbl %ah, %edx
xaddb %bl, %dl
movb %cl, %ah
retq 

Initial state:
%rax/%ah: %rax_orb_rh_r8[63:8] ∘ 0x0₈
%rbx/%bl: %rbx_orb_rh_r8

State for specgen instruction: xchgb %ah, %bl:
%rax/%ah: %rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0]
%rbx/%bl: %rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0])[15:8]
  after renaming it is => %rbx_orb_rh_r8[7:0]

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8])[7:0]
  after renaming it is => %rax_orb_rh_r8[15:8]

Final state
%rax/%ah: (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0]
%rbx/%bl: %rbx_orb_rh_r8[63:8] ∘ %rax_orb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for movb %ah, %cl

Final state:
%rcx/%cl: %rcx_movsbw_r16_rh[63:8] ∘ %rax_movsbw_r16_rh[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_movsbw_r16_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

=====================================
=====================================
Computing circuit for movsbw %ah, %cx

.target:
movb %ah, %cl
movsbl %cl, %ebx
retq 

Initial state:
%rcx/%cx: %rcx_adcb_r8_rh

State for specgen instruction: movsbw %ah, %bx:
%rbx/%bx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Register        -> %bx
  translates to => %cx
Value is               -> (0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0])[15:0]
  after renaming it is => sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0]

Final state
%rcx/%cx: %rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0]

=====================================
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: %rbx_adcb_r8_rh[63:8] ∘ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0]

%cf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:7] = 0x1₁
%of: ((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_r8_rh[7:0][7:7] = 0x1₁) ∧ !((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for adcb %ah, %al

.target:
movsbw %ah, %cx
adcb %cl, %bl
retq 

Initial state:
%rax/%al: (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0]

%cf: false
%pf: true
%af: %af_orb_rh_r8
%zf: true
%sf: false
%of: false

State for specgen instruction: adcb %ah, %bl:
%rbx/%bl: %rbx_adcb_r8_rh[63:8] ∘ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0]

%cf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:7] = 0x1₁
%of: ((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_r8_rh[7:0][7:7] = 0x1₁) ∧ !((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %al
Value is               -> (%rbx_adcb_r8_rh[63:8] ∘ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0])[7:0]
  after renaming it is => %rbx_orb_rh_r8[7:0]

Final state
%rax/%al: ((%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0])[63:8] ∘ %rbx_orb_rh_r8[7:0]

%cf: false
%pf: !(%rbx_orb_rh_r8[0:0] = 0x1₁ ⊕ %rbx_orb_rh_r8[1:1] = 0x1₁ ⊕ %rbx_orb_rh_r8[2:2] = 0x1₁ ⊕ %rbx_orb_rh_r8[3:3] = 0x1₁ ⊕ %rbx_orb_rh_r8[4:4] = 0x1₁ ⊕ %rbx_orb_rh_r8[5:5] = 0x1₁ ⊕ %rbx_orb_rh_r8[6:6] = 0x1₁ ⊕ %rbx_orb_rh_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_orb_rh_r8[7:0] = 0x0₈
%sf: %rbx_orb_rh_r8[7:7] = 0x1₁
%of: (%rbx_orb_rh_r8[7:7] = 0x1₁ ↔ false) ∧ !(%rbx_orb_rh_r8[7:7] = 0x1₁ ↔ %rbx_orb_rh_r8[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %bl, %bh

Final state:
%rbx/%bh: (%rbx_orb_rh_r8[63:8] ∘ %rax_orb_rh_r8[15:8])[63:16] ∘ (%rbx_orb_rh_r8[63:8] ∘ %rax_orb_rh_r8[15:8])[7:0] ∘ (%rbx_orb_rh_r8[63:8] ∘ %rax_orb_rh_r8[15:8])[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %cx, %rdx

Final state:
%rdx/%rdx: sign-extend-64(%rcx_orw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: %rcx_orw_r16_r16
%rbx/%bx: %rbx_orw_r16_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_orw_r16_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_orw_r16_r16[15:0]

Final state
%rcx/%cx: %rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0]
%rbx/%bx: %rbx_orw_r16_r16[63:16] ∘ %rcx_orw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rax

Final state:
%rax/%rax: sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for orq %rax, %rdx

Final state:
%rdx/%rdx: sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0])

%cf: false
%pf: !((sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0])) = 0x0₆₄
%sf: (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[31:0])

-------------------------------------
=====================================
Computing circuit for orw %bx, %ax

.target:
movswq %cx, %rdx
xchgw %cx, %bx
movswq %cx, %rax
orq %rax, %rdx
movslq %edx, %rbx
retq 

Initial state:
%rax/%ax: ((%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0])[63:8] ∘ %rbx_orb_rh_r8[7:0]

%cf: false
%pf: !(%rbx_orb_rh_r8[0:0] = 0x1₁ ⊕ %rbx_orb_rh_r8[1:1] = 0x1₁ ⊕ %rbx_orb_rh_r8[2:2] = 0x1₁ ⊕ %rbx_orb_rh_r8[3:3] = 0x1₁ ⊕ %rbx_orb_rh_r8[4:4] = 0x1₁ ⊕ %rbx_orb_rh_r8[5:5] = 0x1₁ ⊕ %rbx_orb_rh_r8[6:6] = 0x1₁ ⊕ %rbx_orb_rh_r8[7:7] = 0x1₁)
%zf: %rbx_orb_rh_r8[7:0] = 0x0₈
%sf: %rbx_orb_rh_r8[7:7] = 0x1₁
%of: (%rbx_orb_rh_r8[7:7] = 0x1₁ ↔ false) ∧ !(%rbx_orb_rh_r8[7:7] = 0x1₁ ↔ %rbx_orb_rh_r8[7:7] = 0x1₁)

State for specgen instruction: orw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[31:0])

%cf: false
%pf: !((sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0])) = 0x0₆₄
%sf: (sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[63:63] = 0x1₁
%of: false

Register        -> %bx
  translates to => %ax
Value is               -> sign-extend-64((sign-extend-64(%rcx_orw_r16_r16[15:0]) | sign-extend-64((%rcx_orw_r16_r16[63:16] ∘ %rbx_orw_r16_r16[15:0])[15:0]))[31:0])[15:0]
  after renaming it is => %rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8] | %rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0]

Final state
%rax/%ax: (((%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0])[63:8] ∘ %rbx_orb_rh_r8[7:0])[63:16] ∘ (%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8] | %rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0])

%cf: false
%pf: !((%rax_orb_rh_r8[8:8] | %rbx_orb_rh_r8[0:0]) = 0x1₁ ⊕ (%rax_orb_rh_r8[9:9] | %rbx_orb_rh_r8[1:1]) = 0x1₁ ⊕ (%rax_orb_rh_r8[10:10] | %rbx_orb_rh_r8[2:2]) = 0x1₁ ⊕ (%rax_orb_rh_r8[11:11] | %rbx_orb_rh_r8[3:3]) = 0x1₁ ⊕ (%rax_orb_rh_r8[12:12] | %rbx_orb_rh_r8[4:4]) = 0x1₁ ⊕ (%rax_orb_rh_r8[13:13] | %rbx_orb_rh_r8[5:5]) = 0x1₁ ⊕ (%rax_orb_rh_r8[14:14] | %rbx_orb_rh_r8[6:6]) = 0x1₁ ⊕ (%rax_orb_rh_r8[15:15] | %rbx_orb_rh_r8[7:7]) = 0x1₁)
%zf: (sign-extend-64(%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8]) | sign-extend-64(%rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8])[63:63] | sign-extend-64(%rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0])[63:63]) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for orb %bl, %ah

.target:
xorb %al, %al
xchgb %ah, %bl
adcb %ah, %al
movb %bl, %bh
orw %bx, %ax
retq 

Initial state:
%rax/%ah: %rax_andb_r8_rh

%cf: %cf_andb_r8_rh
%pf: %pf_andb_r8_rh
%zf: %zf_andb_r8_rh
%sf: %sf_andb_r8_rh
%of: %of_andb_r8_rh

State for specgen instruction: orb %bl, %ah:
%rax/%ah: (((%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0])[63:8] ∘ %rbx_orb_rh_r8[7:0])[63:16] ∘ (%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8] | %rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0])

%cf: false
%pf: !((%rax_orb_rh_r8[8:8] | %rbx_orb_rh_r8[0:0]) = 0x1₁ ⊕ (%rax_orb_rh_r8[9:9] | %rbx_orb_rh_r8[1:1]) = 0x1₁ ⊕ (%rax_orb_rh_r8[10:10] | %rbx_orb_rh_r8[2:2]) = 0x1₁ ⊕ (%rax_orb_rh_r8[11:11] | %rbx_orb_rh_r8[3:3]) = 0x1₁ ⊕ (%rax_orb_rh_r8[12:12] | %rbx_orb_rh_r8[4:4]) = 0x1₁ ⊕ (%rax_orb_rh_r8[13:13] | %rbx_orb_rh_r8[5:5]) = 0x1₁ ⊕ (%rax_orb_rh_r8[14:14] | %rbx_orb_rh_r8[6:6]) = 0x1₁ ⊕ (%rax_orb_rh_r8[15:15] | %rbx_orb_rh_r8[7:7]) = 0x1₁)
%zf: (sign-extend-64(%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8]) | sign-extend-64(%rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8])[63:63] | sign-extend-64(%rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0])[63:63]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %ah
Value is               -> ((((%rax_orb_rh_r8[63:8] ∘ 0x0₈)[63:16] ∘ %rbx_orb_rh_r8[7:0] ∘ (%rax_orb_rh_r8[63:8] ∘ 0x0₈)[7:0])[63:8] ∘ %rbx_orb_rh_r8[7:0])[63:16] ∘ (%rax_orb_rh_r8[15:8] ∘ %rax_orb_rh_r8[15:8] | %rbx_orb_rh_r8[7:0] ∘ %rbx_orb_rh_r8[7:0]))[15:8]
  after renaming it is => %rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈

Final state
%rax/%ah: %rax_andb_r8_rh[63:16] ∘ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈) ∘ %rax_andb_r8_rh[7:0]

%cf: false
%pf: !((%rax_andb_r8_rh[8:8] | %rbx_andb_r8_rh[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[9:9] | %rbx_andb_r8_rh[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[10:10] | %rbx_andb_r8_rh[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[11:11] | %rbx_andb_r8_rh[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[12:12] | %rbx_andb_r8_rh[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[13:13] | %rbx_andb_r8_rh[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[14:14] | %rbx_andb_r8_rh[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[15:15] | %rbx_andb_r8_rh[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (sign-extend-64(%rax_andb_r8_rh[15:8] ∘ %rax_andb_r8_rh[15:8]) | sign-extend-64((%rbx_andb_r8_rh[7:0] ⊕ 0xff₈) ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))) = 0x0₆₄
%sf: (sign-extend-64(%rax_andb_r8_rh[15:8] ∘ %rax_andb_r8_rh[15:8])[63:63] | sign-extend-64((%rbx_andb_r8_rh[7:0] ⊕ 0xff₈) ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))[63:63]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %ah, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_andb_r8_rh[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈)

%cf: false
%pf: !((%rax_andb_r8_rh[8:8] | %rbx_andb_r8_rh[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[9:9] | %rbx_andb_r8_rh[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[10:10] | %rbx_andb_r8_rh[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[11:11] | %rbx_andb_r8_rh[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[12:12] | %rbx_andb_r8_rh[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[13:13] | %rbx_andb_r8_rh[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[14:14] | %rbx_andb_r8_rh[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rax_andb_r8_rh[15:15] | %rbx_andb_r8_rh[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (sign-extend-64(%rax_andb_r8_rh[15:8] ∘ %rax_andb_r8_rh[15:8]) | sign-extend-64((%rbx_andb_r8_rh[7:0] ⊕ 0xff₈) ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))) = 0x0₆₄
%sf: (sign-extend-64(%rax_andb_r8_rh[15:8] ∘ %rax_andb_r8_rh[15:8])[63:63] | sign-extend-64((%rbx_andb_r8_rh[7:0] ⊕ 0xff₈) ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))[63:63]) = 0x1₁
%of: false

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_andb_r8_rh[7:0] ⊕ 0xff₈ ⊕ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈)

Final state
%rbx/%bl: (%rbx_andb_r8_rh[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈ ⊕ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈))

%cf: false
%pf: !((%rbx_andb_r8_rh[0:0] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[8:8] | %rbx_andb_r8_rh[0:0] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[1:1] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[9:9] | %rbx_andb_r8_rh[1:1] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[2:2] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[10:10] | %rbx_andb_r8_rh[2:2] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[3:3] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[11:11] | %rbx_andb_r8_rh[3:3] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[4:4] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[12:12] | %rbx_andb_r8_rh[4:4] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[5:5] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[13:13] | %rbx_andb_r8_rh[5:5] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[6:6] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[14:14] | %rbx_andb_r8_rh[6:6] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[7:7] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[15:15] | %rbx_andb_r8_rh[7:7] ⊕ 0x1₁)) = 0x1₁)
%zf: (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈ ⊕ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈)) = 0x0₈
%sf: (%rbx_andb_r8_rh[7:7] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[15:15] | %rbx_andb_r8_rh[7:7] ⊕ 0x1₁)) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for andb %ah, %bl

.target:
notb %bl
orb %bl, %ah
xorb %ah, %bl
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: andb %ah, %bl:
%rbx/%bl: (%rbx_andb_r8_rh[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈ ⊕ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈))

%cf: false
%pf: !((%rbx_andb_r8_rh[0:0] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[8:8] | %rbx_andb_r8_rh[0:0] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[1:1] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[9:9] | %rbx_andb_r8_rh[1:1] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[2:2] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[10:10] | %rbx_andb_r8_rh[2:2] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[3:3] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[11:11] | %rbx_andb_r8_rh[3:3] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[4:4] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[12:12] | %rbx_andb_r8_rh[4:4] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[5:5] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[13:13] | %rbx_andb_r8_rh[5:5] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[6:6] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[14:14] | %rbx_andb_r8_rh[6:6] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx_andb_r8_rh[7:7] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[15:15] | %rbx_andb_r8_rh[7:7] ⊕ 0x1₁)) = 0x1₁)
%zf: (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈ ⊕ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈)) = 0x0₈
%sf: (%rbx_andb_r8_rh[7:7] ⊕ 0x1₁ ⊕ (%rax_andb_r8_rh[15:15] | %rbx_andb_r8_rh[7:7] ⊕ 0x1₁)) = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> ((%rbx_andb_r8_rh[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈))[63:8] ∘ (%rbx_andb_r8_rh[7:0] ⊕ 0xff₈ ⊕ (%rax_andb_r8_rh[15:8] | %rbx_andb_r8_rh[7:0] ⊕ 0xff₈)))[7:0]
  after renaming it is => %rbx[7:0] ⊕ 0xff₈ ⊕ (%rax[15:8] | %rbx[7:0] ⊕ 0xff₈)

Final state
%rbx/%bl: %rbx[63:8] ∘ (%rbx[7:0] ⊕ 0xff₈ ⊕ (%rax[15:8] | %rbx[7:0] ⊕ 0xff₈))

%cf: false
%pf: !((%rbx[0:0] ⊕ 0x1₁ ⊕ (%rax[8:8] | %rbx[0:0] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[1:1] ⊕ 0x1₁ ⊕ (%rax[9:9] | %rbx[1:1] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[2:2] ⊕ 0x1₁ ⊕ (%rax[10:10] | %rbx[2:2] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[3:3] ⊕ 0x1₁ ⊕ (%rax[11:11] | %rbx[3:3] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[4:4] ⊕ 0x1₁ ⊕ (%rax[12:12] | %rbx[4:4] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[5:5] ⊕ 0x1₁ ⊕ (%rax[13:13] | %rbx[5:5] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[6:6] ⊕ 0x1₁ ⊕ (%rax[14:14] | %rbx[6:6] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[7:7] ⊕ 0x1₁ ⊕ (%rax[15:15] | %rbx[7:7] ⊕ 0x1₁)) = 0x1₁)
%zf: (%rbx[7:0] ⊕ 0xff₈ ⊕ (%rax[15:8] | %rbx[7:0] ⊕ 0xff₈)) = 0x0₈
%sf: (%rbx[7:7] ⊕ 0x1₁ ⊕ (%rax[15:15] | %rbx[7:7] ⊕ 0x1₁)) = 0x1₁
%of: false

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (%rbx[7:0] ⊕ 0xff₈ ⊕ (%rax[15:8] | %rbx[7:0] ⊕ 0xff₈))

%cf    : false
%pf    : !((%rbx[0:0] ⊕ 0x1₁ ⊕ (%rax[8:8] | %rbx[0:0] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[1:1] ⊕ 0x1₁ ⊕ (%rax[9:9] | %rbx[1:1] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[2:2] ⊕ 0x1₁ ⊕ (%rax[10:10] | %rbx[2:2] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[3:3] ⊕ 0x1₁ ⊕ (%rax[11:11] | %rbx[3:3] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[4:4] ⊕ 0x1₁ ⊕ (%rax[12:12] | %rbx[4:4] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[5:5] ⊕ 0x1₁ ⊕ (%rax[13:13] | %rbx[5:5] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[6:6] ⊕ 0x1₁ ⊕ (%rax[14:14] | %rbx[6:6] ⊕ 0x1₁)) = 0x1₁ ⊕ (%rbx[7:7] ⊕ 0x1₁ ⊕ (%rax[15:15] | %rbx[7:7] ⊕ 0x1₁)) = 0x1₁)
%zf    : (%rbx[7:0] ⊕ 0xff₈ ⊕ (%rax[15:8] | %rbx[7:0] ⊕ 0xff₈)) = 0x0₈
%sf    : (%rbx[7:7] ⊕ 0x1₁ ⊕ (%rax[15:15] | %rbx[7:7] ⊕ 0x1₁)) = 0x1₁
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/