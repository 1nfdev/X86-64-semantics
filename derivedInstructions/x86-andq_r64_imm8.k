// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDQ-R64-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andq I1_8:Imm, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "AF" |-> (undef)

convToRegKeys(R2) |-> (xorMInt(orMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0))), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0))), xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0)))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0))), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0))), xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(64, 1), lshrMInt(xorMInt(orMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0))), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0))), xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), mi(64, 0)))), 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 0)), xorMInt(extractMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), 56, 64), mi(8, 0))), xorMInt(extractMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), 56, 64), mi(8, 0))), xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 0)), xorMInt(extractMInt(handleImmediateWithSignExtend(I1_8, 8, 64 ), 56, 64), mi(8, 0)))), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )


)

    </regstate>
endmodule
