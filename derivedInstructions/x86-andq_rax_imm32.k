// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDQ-RAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andq I1_32:Imm, %rax:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "AF" |-> (undef)

convToRegKeys(%rax) |-> (xorMInt(orMInt(xorMInt(getParentValue(%rax, RSMap), handleImmediateWithSignExtend(I1_32, 32, 64 )), handleImmediateWithSignExtend(I1_32, 32, 64 )), xorMInt(getParentValue(%rax, RSMap), handleImmediateWithSignExtend(I1_32, 32, 64 ))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(getParentValue(%rax, RSMap), handleImmediateWithSignExtend(I1_32, 32, 64 )), handleImmediateWithSignExtend(I1_32, 32, 64 )), xorMInt(getParentValue(%rax, RSMap), handleImmediateWithSignExtend(I1_32, 32, 64 ))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> (xorMInt(orMInt(xorMInt(extractMInt(getParentValue(%rax, RSMap), 0, 1), extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 0, 1)), extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 0, 1)), xorMInt(extractMInt(getParentValue(%rax, RSMap), 0, 1), extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 0, 1))) )

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(extractMInt(getParentValue(%rax, RSMap), 56, 64), extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 56, 64)), extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 56, 64)), xorMInt(extractMInt(getParentValue(%rax, RSMap), 56, 64), extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )


)

    </regstate>
endmodule
