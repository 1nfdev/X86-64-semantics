// Autogenerated using stratification.
requires "x86-configuration.k"

module BSWAP-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (bswap R1:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 40, 48), extractMInt(getParentValue(R1, RSMap), 32, 40)))) )


)

    </regstate>
endmodule

module BSWAP-R32-SEMANTICS
  imports BSWAP-R32
endmodule
/*
TargetInstr:
bswap %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .move_032_016_ebx_r8w_r9w   #  1     0     5      OPC=callq_label
circuit:callq .move_016_032_r8w_r9w_ecx   #  2     0x5   5      OPC=callq_label
circuit:callq .move_byte_3_of_rbx_to_r8b  #  3     0xa   5      OPC=callq_label
circuit:notl %ebx                         #  4     0xf   2      OPC=notl_r32
circuit:callq .move_008_016_r8b_r9b_bx    #  5     0x11  5      OPC=callq_label
circuit:callq .move_016_008_cx_r8b_r9b    #  6     0x16  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_3_of_rbx  #  7     0x1b  5      OPC=callq_label
circuit:callq .move_r9b_to_byte_2_of_rbx  #  8     0x20  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

bswap %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r8w_r9w

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ecx

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_3_of_rbx_to_r8b

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rax

Final state:
%rax/%rax: sign-extend-64(%rbx_notl_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rbx

Final state:
%rbx/%rbx: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %eax, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: 0xffffffffffffffff₆₄

%cf: %cf_notl_r32
%pf: %pf_notl_r32
%zf: %zf_notl_r32
%sf: %sf_notl_r32
%of: %of_notl_r32

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

%cf: false
%pf: !((%rbx_notl_r32[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (%rbx_notl_r32[31:0] ⊕ 0xffffffff₃₂) = 0x0₃₂
%sf: (%rbx_notl_r32[31:31] ⊕ 0x1₁) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for notl %ebx

.target:
movslq %ebx, %rax
movq $0xffffffffffffffff, %rbx
xorl %eax, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_bswap_r32

State for specgen instruction: notl %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄
  after renaming it is => 0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄

=====================================
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_3_of_rbx

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_2_of_rbx

Final state:
%rax/%rax: %rax_bswap_r32
%rdx/%rdx: %rdx_bswap_r32

%xmm0: %ymm0_bswap_r32[127:0]
%xmm1: %ymm1_bswap_r32[127:0]

-------------------------------------
=====================================
Computing circuit for bswap %ebx

.target:
callq .move_032_016_ebx_r8w_r9w
callq .move_016_032_r8w_r9w_ecx
callq .move_byte_3_of_rbx_to_r8b
notl %ebx
callq .move_008_016_r8b_r9b_bx
callq .move_016_008_cx_r8b_r9b
callq .move_r8b_to_byte_3_of_rbx
callq .move_r9b_to_byte_2_of_rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: bswap %ebx:
%rbx/%rbx: (((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[63:32] ∘ (((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[63:8] ∘ (0x0₃₂ ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[15:0][15:0]))[15:0][7:0])[7:0] ∘ ((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[23:0])[63:24] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[63:8] ∘ (0x0₃₂ ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[15:0][15:0]))[15:0][15:8])[7:0] ∘ (((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[63:32] ∘ (((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[63:8] ∘ (0x0₃₂ ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[15:0][15:0]))[15:0][7:0])[7:0] ∘ ((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[23:0])[15:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[63:32] ∘ (((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[63:8] ∘ (0x0₃₂ ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[15:0][15:0]))[15:0][7:0])[7:0] ∘ ((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[23:0])[63:24] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[63:8] ∘ (0x0₃₂ ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[15:0][15:0]))[15:0][15:8])[7:0] ∘ (((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[63:32] ∘ (((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[63:8] ∘ (0x0₃₂ ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[15:0][15:0]))[15:0][7:0])[7:0] ∘ ((0x0₃₂ ∘ %rbx_bswap_r32[31:0] ⊕ 0xffffffff₆₄)[63:16] ∘ ((%r9_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][31:16])[7:0][7:0] ∘ ((%r8_bswap_r32[63:16] ∘ %rbx_bswap_r32[31:0][15:0])[63:8] ∘ %rbx_bswap_r32[31:24])[7:0][7:0]))[23:0])[15:0]
  after renaming it is => 0x0₃₂ ∘ %rbx[7:0] ∘ %rbx[15:8] ∘ (%rbx[23:16] ∘ %rbx[31:24])

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx[7:0] ∘ %rbx[15:8] ∘ (%rbx[23:16] ∘ %rbx[31:24])

=====================================
Circuits:

%rbx   : 0x0₃₂ ∘ %rbx[7:0] ∘ %rbx[15:8] ∘ (%rbx[23:16] ∘ %rbx[31:24])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/