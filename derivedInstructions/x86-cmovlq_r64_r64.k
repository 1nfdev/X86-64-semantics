// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVLQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovlq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt((#ifMInt (eqMInt(addMInt(addMInt((#ifMInt (eqMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(8, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #else ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #fi) , xorMInt(mi(16, 65535), (#ifMInt (eqMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(8, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #else ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #fi) )), concatenateMInt(mi(15, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( getParentValue(R2, RSMap) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(8, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #else ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #fi) ) ) #fi)  )


)

    </regstate>
endmodule

module CMOVLQ-R64-R64-SEMANTICS
  imports CMOVLQ-R64-R64
endmodule
/*
TargetInstr:
cmovlq %rcx, %rbx
RWSet:
maybe read:{ %rcx %sf %of }
must read:{ %rcx %sf %of }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setnl %al           #  1     0    3      OPC=setnl_r8
circuit:sarb $0x1, %al      #  2     0x3  2      OPC=sarb_r8_one
circuit:cmovnbq %rcx, %rbx  #  3     0x5  4      OPC=cmovnbq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovlq %rcx, %rbx

  maybe read:      { %rcx %sf %of }
  must read:       { %rcx %sf %of }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_setge_r8
%rdx/%rdx: %rdx_setge_r8

%xmm0: %ymm0_setge_r8[127:0]
%xmm1: %ymm1_setge_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rcx

Final state:
%rax/%rax: %rax_setnge_rh
%rdx/%rdx: %rdx_setnge_rh

%xmm0: %ymm0_setnge_rh[127:0]
%xmm1: %ymm1_setnge_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_setnge_rh
%rdx/%rdx: %rdx_setnge_rh

%xmm0: %ymm0_setnge_rh[127:0]
%xmm1: %ymm1_setnge_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])

%cf: false
%pf: !((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %r12w, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xorw %bx, %cx

.target:
callq .move_016_008_cx_r8b_r9b
movswq %bx, %r12
callq .move_008_016_r8b_r9b_bx
callq .set_szp_for_bx
callq .read_sf_into_rbx
callq .move_008_016_r8b_r9b_bx
xorq %rbx, %r12
movswq %r12w, %rbx
callq .set_szp_for_bx
retq 

Initial state:
%rcx/%cx: 0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁)

%cf: %cf_setnge_rh
%pf: %pf_setnge_rh
%zf: %zf_setnge_rh
%sf: %sf_setnge_rh
%of: %of_setnge_rh

State for specgen instruction: xorw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0] = 0x0₁₆
%sf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][15:15] = 0x1₁
%of: false

Register        -> %bx
  translates to => %cx
Value is               -> sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0]
  after renaming it is => (%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)

Final state
%rcx/%cx: (0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆))

%cf: false
%pf: !(((%of_setnge_rh ? 0x1₁ : 0x0₁) ⊕ (%sf_setnge_rh ? 0x1₁ : 0x0₁)) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%zf: ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)) = 0x0₁₆
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movslq %ecx, %rdx

Final state:
%rdx/%rdx: sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnge %dh

.target:
callq .read_of_into_rcx
callq .read_sf_into_rbx
xorw %bx, %cx
movslq %ecx, %rdx
movb %dl, %ah
retq 

Initial state:
%rdx/%dh: %rdx_setge_r8

State for specgen instruction: setnge %ah:
%rax/%ah: %rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0]

Register        -> %ah
  translates to => %dh
Value is               -> (%rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0])[15:8]
  after renaming it is => (%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)

Final state
%rdx/%dh: %rdx_setge_r8[63:16] ∘ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)) ∘ %rdx_setge_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setb_r8
%rdx/%rdx: %rdx_setb_r8

%xmm0: %ymm0_setb_r8[127:0]
%xmm1: %ymm1_setb_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for orq %rcx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)

%cf: false
%pf: !((sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)) = 0x0₆₄
%sf: (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[63:63] = 0x1₁
%of: false

-------------------------------------
=====================================
Computing circuit for setb %bl

.target:
callq .read_cf_into_rcx
movsbq %cl, %rbx
orq %rcx, %rbx
retq 

Initial state:
%rbx/%bl: %rbx_setge_r8

State for specgen instruction: setb %bl:
%rbx/%bl: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %bl
Value is               -> (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => 0x1₈

Final state
%rbx/%bl: %rbx_setge_r8[63:8] ∘ 0x1₈

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %dh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_setge_r8[63:8] ∘ 0x1₈

%cf: true
%pf: %pf_setge_r8
%zf: %zf_setge_r8
%sf: %sf_setge_r8
%of: %of_setge_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => 0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈))

Final state
%rbx/%bl: (%rbx_setge_r8[63:8] ∘ 0x1₈)[63:8] ∘ (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)))

%cf: false
%pf: !((0x1₁ ⊕ ((%of_setge_r8 ? 0x1₁ : 0x0₁) ⊕ (%sf_setge_r8 ? 0x1₁ : 0x0₁))) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%zf: (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈))) = 0x0₈
%sf: false
%of: false

=====================================
=====================================
Computing circuit for setge %bl

.target:
callq .set_cf
setnge %dh
setb %bl
xorb %dh, %bl
retq 

Initial state:
%rbx/%bl: %rbx_setnl_r8

State for specgen instruction: setge %bl:
%rbx/%bl: (%rbx_setge_r8[63:8] ∘ 0x1₈)[63:8] ∘ (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)))

Register        -> %bl
  translates to => %bl
Value is               -> ((%rbx_setge_r8[63:8] ∘ 0x1₈)[63:8] ∘ (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈))))[7:0]
  after renaming it is => 0x1₈ ⊕ ((%of_setnl_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setnl_r8 ? 0x1₈ : 0x0₈))

Final state
%rbx/%bl: %rbx_setnl_r8[63:8] ∘ (0x1₈ ⊕ ((%of_setnl_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setnl_r8 ? 0x1₈ : 0x0₈)))

=====================================
=====================================
Computing circuit for setnl %al

.target:
setge %bl
retq 

Initial state:
%rax/%al: %rax_cmovlq_r64_r64

State for specgen instruction: setnl %bl:
%rbx/%bl: %rbx_setnl_r8[63:8] ∘ (0x1₈ ⊕ ((%of_setnl_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setnl_r8 ? 0x1₈ : 0x0₈)))

Register        -> %bl
  translates to => %al
Value is               -> (%rbx_setnl_r8[63:8] ∘ (0x1₈ ⊕ ((%of_setnl_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setnl_r8 ? 0x1₈ : 0x0₈))))[7:0]
  after renaming it is => 0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))

Final state
%rax/%al: %rax_cmovlq_r64_r64[63:8] ∘ (0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈)))

=====================================
-------------------------------------
Getting base circuit for movsbq %bl, %r8

Final state:
%r8/%r8: sign-extend-64(%rbx_sarb_r8_one[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %r8d

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%r8/%r8: %r8_orl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %r11

Final state:
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r11d, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_orl_r32_r32
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

%cf: %cf_orl_r32_r32
%pf: %pf_orl_r32_r32
%af: %af_orl_r32_r32
%zf: %zf_orl_r32_r32
%sf: %sf_orl_r32_r32
%of: %of_orl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0]
%r11/%r11: 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_orl_r32_r32[3:0] + 0x0₁ ∘ %rcx_orl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁
%of: (%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:31] = 0x1₁) ∧ !(%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for orq %r11, %r8

Final state:
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r8d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_orl_r32_r32
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_orl_r32_r32
%rdx/%rdx: %rdx_orl_r32_r32

%xmm0: %ymm0_orl_r32_r32[127:0]
%xmm1: %ymm1_orl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for orl %ecx, %edx

.target:
movl %ebx, %r8d
movswq %cx, %r11
xaddl %r11d, %ecx
orq %r11, %r8
xchgl %ebx, %r8d
callq .set_szp_for_ebx
retq 

Initial state:
%rdx/%rdx: %rdx_andnl_r32_r32_r32

%cf: %cf_andnl_r32_r32_r32
%pf: %pf_andnl_r32_r32_r32
%zf: %zf_andnl_r32_r32_r32
%sf: %sf_andnl_r32_r32_r32
%of: %of_andnl_r32_r32_r32

State for specgen instruction: orl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

%cf: false
%pf: !((0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

Final state
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_ecx

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %edx, %ecx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ ((%r13_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r12_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][15:0])[15:0][15:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

%cf: false
%pf: !(((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) ⊕ %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) ⊕ %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) ⊕ %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) ⊕ %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) ⊕ %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) ⊕ %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) ⊕ %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) ⊕ %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

=====================================
=====================================
Computing circuit for andnl %ebx, %ebx, %esi

.target:
movslq %edx, %rbx
orl %ecx, %edx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_ecx
xorl %edx, %ecx
xchgl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: %rsi_sarq_r64_one

%cf: %cf_sarq_r64_one
%zf: %zf_sarq_r64_one
%sf: %sf_sarq_r64_one
%of: %of_sarq_r64_one

State for specgen instruction: andnl %edx, %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

%cf: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %esi, %esi

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: 0x0₆₄

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for callq .read_sf_into_rcx

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: %rdx_setns_r8

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: %rdx_setns_r8

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_edx

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: 0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0])

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_edx_r10w_r11w

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: 0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0])

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16

%cf: false
%pf: !((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16) = 0x0₆₄
%sf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %ax

Final state:
%rax/%ax: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_popcntw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][15:15] = 0x1₁) ∧ !(%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
=====================================
Computing circuit for popcntw %r10w, %r10w

.target:
xorq %rax, %rax
clc 
adcw %cx, %ax
popcntq %rax, %rbx
clc 
retq 

Initial state:
%r10/%r10w: %r10_setns_r8[63:16] ∘ (0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0]))[31:0][15:0]

%cf: %cf_setns_r8
%pf: %pf_setns_r8
%af: %af_setns_r8
%zf: %zf_setns_r8
%sf: %sf_setns_r8
%of: %of_setns_r8

State for specgen instruction: popcntw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

Register        -> %bx
  translates to => %r10w
Value is               -> (0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0]))))))[15:0]
  after renaming it is => %sf_setns_r8 ? 0x1₁₆ : 0x0₁₆

Final state
%r10/%r10w: (%r10_setns_r8[63:16] ∘ (0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0]))[31:0][15:0])[63:16] ∘ (%sf_setns_r8 ? 0x1₁₆ : 0x0₁₆)

%cf: false
%pf: false
%af: false
%zf: (%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_sete_r8
%rdx/%rdx: %rdx_sete_r8

%xmm0: %ymm0_sete_r8[127:0]
%xmm1: %ymm1_sete_r8[127:0]

-------------------------------------
=====================================
Computing circuit for sete %bl

.target:
callq .read_zf_into_rbx
retq 

Initial state:
%rbx/%bl: %rbx_setns_r8

State for specgen instruction: sete %bl:
%rbx/%bl: 0x0₆₃ ∘ (%zf_sete_r8 ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %bl
Value is               -> (0x0₆₃ ∘ (%zf_sete_r8 ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => (%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈

Final state
%rbx/%bl: %rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈)

=====================================
=====================================
Computing circuit for setns %cl

.target:
callq .read_sf_into_rcx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_edx
callq .move_032_016_edx_r10w_r11w
popcntw %r10w, %r10w
sete %bl
retq 

Initial state:
%rcx/%cl: %rcx_sarq_r64_one

State for specgen instruction: setns %bl:
%rbx/%bl: %rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈)

Register        -> %bl
  translates to => %cl
Value is               -> (%rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈))[7:0]
  after renaming it is => 0x1₈

Final state
%rcx/%cl: %rcx_sarq_r64_one[63:8] ∘ 0x1₈

=====================================
-------------------------------------
Getting base circuit for sarq %cl, %rbx

Final state:
%rbx/%rbx: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%pf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarq_r64_one
%zf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ true
%sf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%of: (0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %si, %r12d

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%r12/%r12: %r12_sarq_r64_one

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %r12
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₆₄

Final state
%r12/%r12: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rcx

Final state:
%rcx/%rcx: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ebx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_decl_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_decl_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_decl_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ecx, %ebx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: 0xffffffffffffffff₆₄
%rbx/%rbx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]

%cf: %cf_decl_r32
%pf: %pf_decl_r32
%af: %af_decl_r32
%zf: %zf_decl_r32
%sf: %sf_decl_r32
%of: %of_decl_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]

%cf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decl_r32[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of: (%rbx_decl_r32[31:31] = 0x1₁ ↔ true) ∧ !(%rbx_decl_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for decl %r12d

.target:
movq $0xffffffffffffffff, %rcx
xchgl %ebx, %ebx
xaddl %ecx, %ebx
retq 

Initial state:
%r12/%r12: 0x0₆₄

%pf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarq_r64_one
%af: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ TMP_BOOL_9 ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %af_sarq_r64_one
%zf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ true
%sf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%of: (0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ false

State for specgen instruction: decl %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]

%pf: !((0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decl_r32[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of: (%rbx_decl_r32[31:31] = 0x1₁ ↔ true) ∧ !(%rbx_decl_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]
  after renaming it is => 0xffffffff₆₄

Final state
%r12/%r12: 0xffffffff₆₄

%pf: true
%af: false
%zf: false
%sf: true
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_rbx

Final state:
%rax/%rax: %rax_sarq_r64_one
%rdx/%rdx: %rdx_sarq_r64_one

%xmm0: %ymm0_sarq_r64_one[127:0]
%xmm1: %ymm1_sarq_r64_one[127:0]

-------------------------------------
=====================================
Computing circuit for sarq $0x1, %r8

.target:
andnl %ebx, %ebx, %esi
movl %esi, %esi
setns %cl
sarq %cl, %rbx
movzwl %si, %r12d
decl %r12d
callq .set_szp_for_rbx
retq 

Initial state:
%r8/%r8: sign-extend-64(%rbx_sarb_r8_one[7:0])

%cf: %cf_sarb_r8_one
%pf: %pf_sarb_r8_one
%zf: %zf_sarb_r8_one
%sf: %sf_sarb_r8_one
%of: %of_sarb_r8_one

State for specgen instruction: sarq $0x1, %rbx:
%rbx/%rbx: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%pf: !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁)
%zf: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄
%sf: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %r8
Value is               -> (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]
  after renaming it is => (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

Final state
%r8/%r8: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

%cf: true ∧ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq %r8, %rbx

Final state:
%rbx/%rbx: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

-------------------------------------
=====================================
Computing circuit for sarb $0x1, %al

.target:
movsbq %bl, %r8
sarq $0x1, %r8
movq %r8, %rbx
retq 

Initial state:
%rax/%al: %rax_cmovlq_r64_r64[63:8] ∘ (0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈)))

%cf: %cf_cmovlq_r64_r64
%pf: %pf_cmovlq_r64_r64
%zf: %zf_cmovlq_r64_r64
%sf: %sf_cmovlq_r64_r64
%of: %of_cmovlq_r64_r64

State for specgen instruction: sarb $0x1, %bl:
%rbx/%bl: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

%cf: true ∧ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

Register        -> %bl
  translates to => %al
Value is               -> (sign-extend-64(%rbx_sarb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1][7:0]
  after renaming it is => (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

Final state
%rax/%al: (%rax_cmovlq_r64_r64[63:8] ∘ (0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))))[63:8] ∘ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

%cf: true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rsp

Final state:
%rsp/%rsp: sign-extend-64(%rcx_cmovbw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %bh, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_movb_rh_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rdx_r8d_r9d

Final state:
%rax/%rax: %rax_movb_rh_rh
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

%xmm0: %ymm0_movb_rh_rh[127:0]
%xmm1: %ymm1_movb_rh_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rcx

Final state:
%rax/%rax: %rax_movb_rh_rh
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

%xmm0: %ymm0_movb_rh_rh[127:0]
%xmm1: %ymm1_movb_rh_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0]

-------------------------------------
=====================================
Computing circuit for movb %ch, %ch

.target:
movzbl %bh, %edx
callq .move_064_032_rdx_r8d_r9d
callq .move_032_064_r8d_r9d_rcx
movb %cl, %ah
retq 

Initial state:
%rcx/%ch: %rcx_cmovbl_r32_r32

State for specgen instruction: movb %bh, %ah:
%rax/%ah: %rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0]

Register        -> %ah
  translates to => %ch
Value is               -> (%rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0])[15:8]
  after renaming it is => %rcx_cmovbl_r32_r32[15:8]

Final state
%rcx/%ch: %rcx_cmovbl_r32_r32[63:16] ∘ %rcx_cmovbl_r32_r32[15:8] ∘ %rcx_cmovbl_r32_r32[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r12_r13

Final state:
%rax/%rax: %rax_vxorps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vxorps_xmm_xmm_xmm

%xmm0: %ymm0_vxorps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vxorps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vxorps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vxorps_xmm_xmm_xmm

%xmm0: %ymm0_vxorps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vxorps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r13, %r9

Final state:
%r9/%r9: %ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r12, %r8

Final state:
%r8/%r8: %ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vxorps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vxorps_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vxorps %xmm2, %xmm2, %xmm1

.target:
callq .move_128_064_xmm3_r12_r13
callq .move_128_064_xmm2_r8_r9
vzeroall 
xorq %r13, %r9
xorq %r12, %r8
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_cmovnael_r32_r32

State for specgen instruction: vxorps %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄)

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_eax_edx_r8d_r9d

Final state:
%rax/%rax: 0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][63:32]

%xmm0: %ymm0_cmovnael_r32_r32[127:0]
%xmm1: (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %ah

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: 0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0]

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => %cf_cmovnael_r32_r32 ? 0x1₈ : 0x0₈

Final state
%rax/%ah: (0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0])[63:16] ∘ (%cf_cmovnael_r32_r32 ? 0x1₈ : 0x0₈) ∘ (0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0])[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xaddw_r16_r16
%rbx/%bx: %rbx_xaddw_r16_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xaddw_r16_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_xaddw_r16_r16[15:0]

Final state
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %cx, %bx

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

%cf: %cf_xaddw_r16_r16
%pf: %pf_xaddw_r16_r16
%af: %af_xaddw_r16_r16
%zf: %zf_xaddw_r16_r16
%sf: %sf_xaddw_r16_r16
%of: %of_xaddw_r16_r16

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

Final state
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for xaddw %ax, %r8w

.target:
xchgw %cx, %bx
addw %cx, %bx
retq 

Initial state:
%rax/%ax: (0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0])[63:16] ∘ (%cf_cmovnael_r32_r32 ? 0x1₈ : 0x0₈) ∘ (0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0])[7:0]
%r8/%r8w: 0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][95:64]

%cf: %cf_cmovnael_r32_r32
%pf: %pf_cmovnael_r32_r32
%af: %af_cmovnael_r32_r32
%zf: %zf_cmovnael_r32_r32
%sf: %sf_cmovnael_r32_r32
%of: %of_cmovnael_r32_r32

State for specgen instruction: xaddw %cx, %bx:
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

Final state
%rax/%ax: ((0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0])[63:16] ∘ (%cf_cmovnael_r32_r32 ? 0x1₈ : 0x0₈) ∘ (0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][31:0])[7:0])[63:16] ∘ 0x0₁₆
%r8/%r8w: (0x0₃₂ ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄))[127:0][95:64])[63:16] ∘ (%cf_cmovnael_r32_r32 ? 0x100₁₆ : 0x0₁₆)

%cf: false
%pf: true
%af: false
%zf: (%cf_cmovnael_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for cmoveq %rbx, %rcx

Final state:
%rcx/%rcx: %zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32 : %rcx_cmovnzl_r32_r32

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnzl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnzl %ecx, %ebx

.target:
cmoveq %rbx, %rcx
movl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnael_r32_r32

State for specgen instruction: cmovnzl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovnael_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovnael_r32_r32[31:0] : %rcx_cmovnael_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovnael_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovnael_r32_r32[31:0] : %rcx_cmovnael_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnael %ecx, %ebx

.target:
vxorps %xmm2, %xmm2, %xmm1
callq .move_128_032_xmm1_eax_edx_r8d_r9d
setnae %ah
xaddw %ax, %r8w
cmovnzl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovbl_r32_r32

State for specgen instruction: cmovnael %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovnael_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovnael_r32_r32[31:0] : %rcx_cmovnael_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_cmovnael_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovnael_r32_r32[31:0] : %rcx_cmovnael_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovbl_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbl_r32_r32[31:0] : %rcx_cmovbl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovbl_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbl_r32_r32[31:0] : %rcx_cmovbl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovbl %esp, %ebx

.target:
movb %ch, %ch
cmovnael %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovbw_r16_r16

State for specgen instruction: cmovbl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovbl_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbl_r32_r32[31:0] : %rcx_cmovbl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_cmovbl_r32_r32 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbl_r32_r32[31:0] : %rcx_cmovbl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovbw_r16_r16 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbw_r16_r16[31:0] : sign-extend-64(%rcx_cmovbw_r16_r16[15:0])[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovbw_r16_r16 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbw_r16_r16[31:0] : sign-extend-64(%rcx_cmovbw_r16_r16[15:0])[31:0])

=====================================
=====================================
Computing circuit for cmovbw %cx, %cx

.target:
movswq %cx, %rsp
cmovbl %esp, %ebx
retq 

Initial state:
%rcx/%cx: %rcx_cmovncq_r64_r64

State for specgen instruction: cmovbw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ ((%cf_cmovbw_r16_r16 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbw_r16_r16[31:0] : sign-extend-64(%rcx_cmovbw_r16_r16[15:0])[31:0])

Register        -> %bx
  translates to => %cx
Value is               -> (0x0₃₂ ∘ ((%cf_cmovbw_r16_r16 ? 0x100₁₆ : 0x0₁₆) = 0x0₁₆ ? %rbx_cmovbw_r16_r16[31:0] : sign-extend-64(%rcx_cmovbw_r16_r16[15:0])[31:0]))[15:0]
  after renaming it is => %rcx_cmovncq_r64_r64[15:0]

Final state
%rcx/%cx: %rcx_cmovncq_r64_r64[63:16] ∘ %rcx_cmovncq_r64_r64[15:0]

=====================================
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r8b_r9b

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_0_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_1_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r8

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r8/%r8: %r8_xchgb_r8_r8

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0]

Final state
%r8/%r8: 0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0x5, %rbx

Final state:
%rbx/%rbx: 0x5₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_movzbw_r16_r8
%rdx/%rdx: %rdx_movzbw_r16_r8

%xmm0: %ymm0_movzbw_r16_r8[127:0]
%xmm1: %ymm1_movzbw_r16_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r12

Final state:
%r12/%r12: sign-extend-64(%rcx_movzbw_r16_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzbw_r16_r8
%rdx/%rdx: %rdx_movzbw_r16_r8

%xmm0: %ymm0_movzbw_r16_r8[127:0]
%xmm1: %ymm1_movzbw_r16_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movzbw %cl, %cx

.target:
movq $0x5, %rbx
callq .move_064_032_rbx_r12d_r13d
movsbq %cl, %r12
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xchgb_r8_r8

State for specgen instruction: movzbw %cl, %bx:
%rbx/%bx: 0x5₆₄[63:16] ∘ ((0x0₃₂ ∘ 0x5₆₄[63:32])[7:0][7:0] ∘ sign-extend-64(%rcx_movzbw_r16_r8[7:0])[7:0][7:0])

Register        -> %bx
  translates to => %cx
Value is               -> (0x5₆₄[63:16] ∘ ((0x0₃₂ ∘ 0x5₆₄[63:32])[7:0][7:0] ∘ sign-extend-64(%rcx_movzbw_r16_r8[7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]

Final state
%rcx/%cx: %rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0])

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %bh, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_movb_rh_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rdx_r8d_r9d

Final state:
%rax/%rax: %rax_movb_rh_rh
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

%xmm0: %ymm0_movb_rh_rh[127:0]
%xmm1: %ymm1_movb_rh_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rcx

Final state:
%rax/%rax: %rax_movb_rh_rh
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

%xmm0: %ymm0_movb_rh_rh[127:0]
%xmm1: %ymm1_movb_rh_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0]

-------------------------------------
=====================================
Computing circuit for movb %ch, %bh

.target:
movzbl %bh, %edx
callq .move_064_032_rdx_r8d_r9d
callq .move_032_064_r8d_r9d_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xchgb_r8_r8

State for specgen instruction: movb %bh, %ah:
%rax/%ah: %rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xaddb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]
%rbx/%bl: %rbx_xaddb_rh_r8

%cf: %cf_xaddb_rh_r8
%pf: %pf_xaddb_rh_r8
%af: %af_xaddb_rh_r8
%zf: %zf_xaddb_rh_r8
%sf: %sf_xaddb_rh_r8
%of: %of_xaddb_rh_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %ch

.target:
movzbl %ah, %edx
xaddb %bl, %dl
movb %dl, %ah
retq 

Initial state:
%rcx/%ch: %rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0])
%rbx/%bl: %rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]

%cf: %cf_xchgb_r8_r8
%pf: %pf_xchgb_r8_r8
%af: %af_xchgb_r8_r8
%zf: %zf_xchgb_r8_r8
%sf: %sf_xchgb_r8_r8
%of: %of_xchgb_r8_r8

State for specgen instruction: xaddb %bl, %ah:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

Final state
%rcx/%ch: (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0]
%rbx/%bl: (%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈

%cf: false
%pf: !(%rbx_xchgb_r8_r8[0:0] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[1:1] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[2:2] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[3:3] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[4:4] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[5:5] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[6:6] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_xchgb_r8_r8[7:0] = 0x0₈
%sf: %rbx_xchgb_r8_r8[7:7] = 0x1₁
%of: (false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁) ∧ !(false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xaddw_r16_r16
%rbx/%bx: %rbx_xaddw_r16_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xaddw_r16_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_xaddw_r16_r16[15:0]

Final state
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %cx, %bx

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

%cf: %cf_xaddw_r16_r16
%pf: %pf_xaddw_r16_r16
%af: %af_xaddw_r16_r16
%zf: %zf_xaddw_r16_r16
%sf: %sf_xaddw_r16_r16
%of: %of_xaddw_r16_r16

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

Final state
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for xaddw %bx, %cx

.target:
xchgw %cx, %bx
addw %cx, %bx
retq 

Initial state:
%rcx/%cx: (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0]
%rbx/%bx: (%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈

%cf: false
%pf: !(%rbx_xchgb_r8_r8[0:0] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[1:1] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[2:2] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[3:3] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[4:4] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[5:5] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[6:6] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_xchgb_r8_r8[7:0] = 0x0₈
%sf: %rbx_xchgb_r8_r8[7:7] = 0x1₁
%of: (false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁) ∧ !(false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁)

State for specgen instruction: xaddw %cx, %bx:
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

Final state
%rcx/%cx: ((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])
%rbx/%bx: ((%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈)[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])

%cf: false
%pf: !(%rcx_xchgb_r8_r8[0:0] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[1:1] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[2:2] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[3:3] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[4:4] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[5:5] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[6:6] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0] = 0x0₁₆
%sf: %rbx_xchgb_r8_r8[7:7] = 0x1₁
%of: (%rbx_xchgb_r8_r8[7:7] = 0x1₁ ↔ false) ∧ !(%rbx_xchgb_r8_r8[7:7] = 0x1₁ ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %r8w

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: ((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])
%r8/%r8w: 0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0]

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]

Register        -> %bx
  translates to => %r8w
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]

Final state
%rcx/%cx: (((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ (0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])
%r8/%r8w: (0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])

=====================================
=====================================
Computing circuit for xchgb %r8b, %bl

.target:
movzbq %bl, %r8
movzbw %cl, %cx
movb %ch, %bh
xaddb %bl, %ch
xaddw %bx, %cx
xchgw %cx, %r8w
retq 

Initial state:
%rbx/%bl: %rbx_vmovd_xmm_r32
%r8/%r8b: %r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0]

State for specgen instruction: xchgb %cl, %bl:
%rcx/%cl: (((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ (0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])
%rbx/%bl: ((%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈)[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])

Register        -> %cl
  translates to => %r8b
Value is               -> ((((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ (0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]))[7:0]
  after renaming it is => %rbx_vmovd_xmm_r32[7:0]

Register        -> %bl
  translates to => %bl
Value is               -> (((%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈)[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[7:0]
  after renaming it is => %rbx_vmovd_xmm_r32[7:0]

Final state
%rbx/%bl: %rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0]
%r8/%r8b: (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[63:8] ∘ %rbx_vmovd_xmm_r32[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_3_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r8w_r9w

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_3_of_rbx_to_r8b

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_2_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_3_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[255:32] ∘ ((((%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][15:0])[63:8] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:24])[7:0] ∘ ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[23:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovd %ecx, %xmm1

.target:
vzeroall 
callq .move_016_008_bx_r8b_r9b
callq .move_r8b_to_byte_0_of_ymm1
callq .move_r9b_to_byte_1_of_ymm1
xchgb %r8b, %bl
callq .move_r9b_to_byte_3_of_ymm1
callq .move_032_016_ebx_r8w_r9w
callq .move_byte_3_of_rbx_to_r8b
callq .move_r9b_to_byte_2_of_ymm1
callq .move_r8b_to_byte_3_of_ymm1
retq 

Initial state:
%ymm1: %ymm1_cmovaeq_r64_r64

State for specgen instruction: vmovd %ebx, %xmm1:
%ymm1: ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[255:32] ∘ ((((%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][15:0])[63:8] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:24])[7:0] ∘ ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[23:0]

Final state
%ymm1: 0x0₂₂₄ ∘ %rcx_cmovaeq_r64_r64[31:24] ∘ %rcx_cmovaeq_r64_r64[23:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_eax_edx_r8d_r9d

Final state:
%rax/%rax: 0x0₃₂ ∘ (0x0₂₂₄ ∘ %rcx_cmovaeq_r64_r64[31:24] ∘ %rcx_cmovaeq_r64_r64[23:0])[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ (0x0₂₂₄ ∘ %rcx_cmovaeq_r64_r64[31:24] ∘ %rcx_cmovaeq_r64_r64[23:0])[127:0][63:32]

%xmm0: %ymm0_cmovaeq_r64_r64[127:0]
%xmm1: (0x0₂₂₄ ∘ %rcx_cmovaeq_r64_r64[31:24] ∘ %rcx_cmovaeq_r64_r64[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_5_of_rbx

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_decw_r16 ⊕ %rax_decw_r16

%cf: false
%pf: !((%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_decw_r16 ⊕ %rax_decw_r16) = 0x0₆₄
%sf: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rsi

Final state:
%rsi/%rsi: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %ax, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rax/%ax: %rax_decw_r16 ⊕ %rax_decw_r16
%rbx/%bx: %rbx_decw_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %ax
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_decw_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rbx/%bx: %rbx_decw_r16[63:16] ∘ 0x0₁₆

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rdx/%rdx: %rdx_decw_r16

%xmm0: %ymm0_decw_r16[127:0]
%xmm1: %ymm1_decw_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcw %bx, %ax

Final state:
%rax/%ax: ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[63:16] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %ax, %si

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rsi/%si: 0xffffffffffffffff₆₄

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %si
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

Final state
%rsi/%si: 0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

%cf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movswq %si, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

-------------------------------------
=====================================
Computing circuit for decw %bx

.target:
xorq %rax, %rax
movq $0xffffffffffffffff, %rsi
xchgw %ax, %bx
callq .read_cf_into_rbx
adcw %bx, %ax
addw %ax, %si
movswq %si, %rbx
retq 

Initial state:
%rbx/%bx: (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0]

%pf: %pf_cmc
%af: %af_cmc
%zf: %zf_cmc
%sf: %sf_cmc
%of: %of_cmc

State for specgen instruction: decw %bx:
%rbx/%bx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])[15:0]
  after renaming it is => %cf_cmc ? 0x0₁₆ : 0xffff₁₆

Final state
%rbx/%bx: ((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆)

%pf: !((%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_cmc ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_cmc ? 0x0₁₆ : 0xffff₁₆) = 0x0₁₆
%sf: (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(false ↔ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %bh

Final state:
%rbx/%bh: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %bh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

%cf: %cf_xorb_r8_r8
%pf: %pf_xorb_r8_r8
%zf: %zf_xorb_r8_r8
%sf: %sf_xorb_r8_r8
%of: %of_xorb_r8_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]

Final state
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !((%rbx_xorb_r8_r8[0:0] ⊕ %rcx_xorb_r8_r8[0:0]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[1:1] ⊕ %rcx_xorb_r8_r8[1:1]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[2:2] ⊕ %rcx_xorb_r8_r8[2:2]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[3:3] ⊕ %rcx_xorb_r8_r8[3:3]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[4:4] ⊕ %rcx_xorb_r8_r8[4:4]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[5:5] ⊕ %rcx_xorb_r8_r8[5:5]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[6:6] ⊕ %rcx_xorb_r8_r8[6:6]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁)
%zf: (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]) = 0x0₈
%sf: (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_r8
%rdx/%rdx: %rdx_xorb_r8_r8

%xmm0: %ymm0_xorb_r8_r8[127:0]
%xmm1: %ymm1_xorb_r8_r8[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %al, %al

.target:
movb %cl, %bh
xorb %bh, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rax/%al: %rax_xorb_rh_rh

%cf: %cf_xorb_rh_rh
%pf: %pf_xorb_rh_rh
%zf: %zf_xorb_rh_rh
%sf: %sf_xorb_rh_rh
%of: %of_xorb_rh_rh

State for specgen instruction: xorb %cl, %bl:
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !(((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][0:0] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][1:1] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][2:2] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][3:3] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][4:4] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][5:5] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][6:6] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][7:7] = 0x1₁)
%zf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0] = 0x0₈
%sf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %al
Value is               -> ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0]
  after renaming it is => 0x0₈

Final state
%rax/%al: %rax_xorb_rh_rh[63:8] ∘ 0x0₈

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xaddb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]
%rbx/%bl: %rbx_xaddb_rh_r8

%cf: %cf_xaddb_rh_r8
%pf: %pf_xaddb_rh_r8
%af: %af_xaddb_rh_r8
%zf: %zf_xaddb_rh_r8
%sf: %sf_xaddb_rh_r8
%of: %of_xaddb_rh_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for xaddb %al, %bh

.target:
movzbl %ah, %edx
xaddb %bl, %dl
movb %dl, %ah
retq 

Initial state:
%rax/%al: %rax_xorb_rh_rh[63:8] ∘ 0x0₈
%rbx/%bh: %rbx_xorb_rh_rh

%cf: false
%pf: true
%af: %af_xorb_rh_rh
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %bl, %ah:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

Final state
%rax/%al: (%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8]
%rbx/%bh: %rbx_xorb_rh_rh[63:16] ∘ %rbx_xorb_rh_rh[15:8] ∘ %rbx_xorb_rh_rh[7:0]

%cf: false
%pf: !(%rbx_xorb_rh_rh[8:8] = 0x1₁ ⊕ %rbx_xorb_rh_rh[9:9] = 0x1₁ ⊕ %rbx_xorb_rh_rh[10:10] = 0x1₁ ⊕ %rbx_xorb_rh_rh[11:11] = 0x1₁ ⊕ %rbx_xorb_rh_rh[12:12] = 0x1₁ ⊕ %rbx_xorb_rh_rh[13:13] = 0x1₁ ⊕ %rbx_xorb_rh_rh[14:14] = 0x1₁ ⊕ %rbx_xorb_rh_rh[15:15] = 0x1₁)
%af: false
%zf: %rbx_xorb_rh_rh[15:8] = 0x0₈
%sf: %rbx_xorb_rh_rh[15:15] = 0x1₁
%of: (%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ %rbx_xorb_rh_rh[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x4, %rdi

Final state:
%rdi/%rdi: 0x4₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %dil

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rdi/%dil: 0x4₆₄

%cf: %cf_xorb_rh_r8
%pf: %pf_xorb_rh_r8
%zf: %zf_xorb_rh_r8
%sf: %sf_xorb_rh_r8
%of: %of_xorb_rh_r8

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %dil
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => 0x8₈

Final state
%rdi/%dil: 0x4₆₄[63:8] ∘ 0x8₈

%cf: false
%pf: false
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %r8, %r8

Final state:
%r8/%r8: %r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8

%cf: false
%pf: !((%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][0:0] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][1:1] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][2:2] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][3:3] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][4:4] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][5:5] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][6:6] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][7:7] = 0x1₁)
%zf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8) = 0x0₆₄
%sf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %ah, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_rh_r8

%cf: false
%pf: !((%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][0:0] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][1:1] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][2:2] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][3:3] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][4:4] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][5:5] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][6:6] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][7:7] = 0x1₁)
%zf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8) = 0x0₆₄
%sf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[63:63] = 0x1₁
%of: false

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]

Final state
%rbx/%bl: %rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16

%cf: false
%pf: !((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16) = 0x0₆₄
%sf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %ax

Final state:
%rax/%ax: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_popcntw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][15:15] = 0x1₁) ∧ !(%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
=====================================
Computing circuit for popcntw %r8w, %ax

.target:
xorq %rax, %rax
clc 
adcw %cx, %ax
popcntq %rax, %rbx
clc 
retq 

Initial state:
%rax/%ax: %rax_xorb_rh_r8

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%af: TMP_BOOL_21
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

State for specgen instruction: popcntw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

Register        -> %bx
  translates to => %ax
Value is               -> (0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0]))))))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: %rax_xorb_rh_r8[63:16] ∘ 0x0₁₆

%cf: false
%pf: false
%af: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh

%cf: false
%pf: !((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][0:0] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][1:1] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][2:2] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][3:3] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][4:4] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][5:5] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][6:6] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][7:7] = 0x1₁)
%zf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh) = 0x0₆₄
%sf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_movzbw_r16_rh
%rdx/%rdx: %rdx_movzbw_r16_rh

%xmm0: %ymm0_movzbw_r16_rh[127:0]
%xmm1: %ymm1_movzbw_r16_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbw %ah, %si

.target:
xorq %rcx, %rcx
callq .read_sf_into_rbx
movb %ah, %bl
retq 

Initial state:
%rsi/%si: %rsi_xaddb_r8_rh

State for specgen instruction: movzbw %ah, %bx:
%rbx/%bx: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

Register        -> %bx
  translates to => %si
Value is               -> ((0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8])[15:0]
  after renaming it is => 0x0₈ ∘ %rax_xaddb_r8_rh[15:8]

Final state
%rsi/%si: %rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8])

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r12

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r12/%r12: %r12_xaddb_r8_rh

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

Final state
%r12/%r12: 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rdx

Final state:
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_xaddb_r8_rh
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %r12b, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_xaddb_r8_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rdx, %r9

Final state:
%r9/%r9: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0]) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %sil, %bl

Final state:
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddb %ah, %bl

.target:
movzbw %ah, %si
movzbq %bl, %r12
movslq %r12d, %rdx
callq .move_016_008_dx_r8b_r9b
movsbl %r12b, %ebx
movb %dl, %ah
callq .move_r9b_to_byte_6_of_rbx
popcntq %rdx, %r9
adcb %sil, %bl
retq 

Initial state:
%rax/%ah: %rax_xorb_rh_r8[63:16] ∘ 0x0₁₆
%rbx/%bl: %rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: false
%af: false
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %ah, %bl:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0]
%rbx/%bl: (%rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]))[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%af: false
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: (false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁) ∧ !(false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %edi

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rdi/%rdi: 0x4₆₄[63:8] ∘ 0x8₈

%cf: false
%of: (false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁) ∧ !(false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rdi
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x10₆₄

Final state
%rdi/%rdi: 0x10₆₄

%cf: false
%of: false

=====================================
=====================================
Computing circuit for xorb %al, %ah

.target:
movq $0x4, %rdi
shlb $0x1, %dil
xorq %r8, %r8
xorb %ah, %bl
popcntw %r8w, %ax
xaddb %ah, %bl
rcll $0x1, %edi
retq 

Initial state:
%rax/%ah: (%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8]

%cf: false
%pf: !(%rbx_xorb_rh_rh[8:8] = 0x1₁ ⊕ %rbx_xorb_rh_rh[9:9] = 0x1₁ ⊕ %rbx_xorb_rh_rh[10:10] = 0x1₁ ⊕ %rbx_xorb_rh_rh[11:11] = 0x1₁ ⊕ %rbx_xorb_rh_rh[12:12] = 0x1₁ ⊕ %rbx_xorb_rh_rh[13:13] = 0x1₁ ⊕ %rbx_xorb_rh_rh[14:14] = 0x1₁ ⊕ %rbx_xorb_rh_rh[15:15] = 0x1₁)
%zf: %rbx_xorb_rh_rh[15:8] = 0x0₈
%sf: %rbx_xorb_rh_rh[15:15] = 0x1₁
%of: (%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ %rbx_xorb_rh_rh[15:15] = 0x1₁)

State for specgen instruction: xorb %bl, %ah:
%rax/%ah: (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0])[15:8]
  after renaming it is => %rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]

Final state
%rax/%ah: ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_rh[8:8] ⊕ %rax_xorb_rh_rh[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[9:9] ⊕ %rax_xorb_rh_rh[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[10:10] ⊕ %rax_xorb_rh_rh[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[11:11] ⊕ %rax_xorb_rh_rh[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[12:12] ⊕ %rax_xorb_rh_rh[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[13:13] ⊕ %rax_xorb_rh_rh[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[14:14] ⊕ %rax_xorb_rh_rh[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for xorb %bh, %bh

.target:
xorb %al, %al
xaddb %al, %bh
xorb %al, %ah
retq 

Initial state:
%rbx/%bh: ((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆)

%cf: %cf_cmc
%pf: !((%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)
%zf: (%cf_cmc ? 0x0₁₆ : 0xffff₁₆) = 0x0₁₆
%sf: (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(false ↔ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)

State for specgen instruction: xorb %bh, %ah:
%rax/%ah: ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_rh[8:8] ⊕ %rax_xorb_rh_rh[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[9:9] ⊕ %rax_xorb_rh_rh[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[10:10] ⊕ %rax_xorb_rh_rh[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[11:11] ⊕ %rax_xorb_rh_rh[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[12:12] ⊕ %rax_xorb_rh_rh[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[13:13] ⊕ %rax_xorb_rh_rh[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[14:14] ⊕ %rax_xorb_rh_rh[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %bh
Value is               -> (((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0]

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[63:8] ∘ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][3:0] + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁ ↔ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁) ∧ !(((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for cmc 

.target:
callq .read_cf_into_rbx
callq .move_064_032_rbx_r8d_r9d
callq .move_r8b_to_byte_5_of_rbx
decw %bx
xorb %bh, %bh
adcb %bl, %bl
retq 

Initial state:
%cf: %cf_sbbw_r16_r16

State for specgen instruction: cmc :
%cf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[8:8] = 0x1₁

Final state
%cf: ((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r14

Final state:
%r14/%r14: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_notw_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])

%cf: false
%pf: !((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %r12w, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xorw %r14w, %r12w

.target:
callq .move_016_008_cx_r8b_r9b
movswq %bx, %r12
callq .move_008_016_r8b_r9b_bx
callq .set_szp_for_bx
callq .read_sf_into_rbx
callq .move_008_016_r8b_r9b_bx
xorq %rbx, %r12
movswq %r12w, %rbx
callq .set_szp_for_bx
retq 

Initial state:
%r12/%r12w: sign-extend-64(%rbx_notw_r16[15:0])

%cf: %cf_notw_r16
%pf: %pf_notw_r16
%zf: %zf_notw_r16
%sf: %sf_notw_r16
%of: %of_notw_r16

State for specgen instruction: xorw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0] = 0x0₁₆
%sf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][15:15] = 0x1₁
%of: false

Register        -> %bx
  translates to => %r12w
Value is               -> sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0]
  after renaming it is => %rbx_notw_r16[15:0] ⊕ 0xffff₁₆

Final state
%r12/%r12w: sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆)

%cf: false
%pf: !((%rbx_notw_r16[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆) = 0x0₁₆
%sf: (%rbx_notw_r16[15:15] ⊕ 0x1₁) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆))[31:0])

-------------------------------------
=====================================
Computing circuit for notw %cx

.target:
movq $0xffffffffffffffff, %r14
movswq %bx, %r12
xorw %r14w, %r12w
movslq %r12d, %rbx
retq 

Initial state:
%rcx/%cx: %rcx_sbbw_r16_r16

State for specgen instruction: notw %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆))[31:0])

Register        -> %bx
  translates to => %cx
Value is               -> sign-extend-64((sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆))[31:0])[15:0]
  after renaming it is => %rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆

Final state
%rcx/%cx: %rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆)

=====================================
-------------------------------------
Getting base circuit for adcw %bx, %cx

Final state:
%rcx/%cx: (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0]

%cf: ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[16:16] = 0x1₁
%pf: !(((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_sbbw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0][3:0])[4:4] = 0x1₁
%zf: ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0] = 0x0₁₆
%sf: ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][15:15] = 0x1₁
%of: (%rbx_sbbw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0][15:15] = 0x1₁) ∧ !(%rbx_sbbw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_5_of_rbx

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_decw_r16 ⊕ %rax_decw_r16

%cf: false
%pf: !((%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_decw_r16 ⊕ %rax_decw_r16) = 0x0₆₄
%sf: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rsi

Final state:
%rsi/%rsi: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %ax, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rax/%ax: %rax_decw_r16 ⊕ %rax_decw_r16
%rbx/%bx: %rbx_decw_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %ax
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_decw_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rbx/%bx: %rbx_decw_r16[63:16] ∘ 0x0₁₆

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rdx/%rdx: %rdx_decw_r16

%xmm0: %ymm0_decw_r16[127:0]
%xmm1: %ymm1_decw_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcw %bx, %ax

Final state:
%rax/%ax: ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[63:16] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %ax, %si

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rsi/%si: 0xffffffffffffffff₆₄

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %si
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

Final state
%rsi/%si: 0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

%cf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movswq %si, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

-------------------------------------
=====================================
Computing circuit for decw %bx

.target:
xorq %rax, %rax
movq $0xffffffffffffffff, %rsi
xchgw %ax, %bx
callq .read_cf_into_rbx
adcw %bx, %ax
addw %ax, %si
movswq %si, %rbx
retq 

Initial state:
%rbx/%bx: (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0]

%pf: %pf_cmc
%af: %af_cmc
%zf: %zf_cmc
%sf: %sf_cmc
%of: %of_cmc

State for specgen instruction: decw %bx:
%rbx/%bx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])[15:0]
  after renaming it is => %cf_cmc ? 0x0₁₆ : 0xffff₁₆

Final state
%rbx/%bx: ((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆)

%pf: !((%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_cmc ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_cmc ? 0x0₁₆ : 0xffff₁₆) = 0x0₁₆
%sf: (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(false ↔ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %bh

Final state:
%rbx/%bh: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %bh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

%cf: %cf_xorb_r8_r8
%pf: %pf_xorb_r8_r8
%zf: %zf_xorb_r8_r8
%sf: %sf_xorb_r8_r8
%of: %of_xorb_r8_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]

Final state
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !((%rbx_xorb_r8_r8[0:0] ⊕ %rcx_xorb_r8_r8[0:0]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[1:1] ⊕ %rcx_xorb_r8_r8[1:1]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[2:2] ⊕ %rcx_xorb_r8_r8[2:2]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[3:3] ⊕ %rcx_xorb_r8_r8[3:3]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[4:4] ⊕ %rcx_xorb_r8_r8[4:4]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[5:5] ⊕ %rcx_xorb_r8_r8[5:5]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[6:6] ⊕ %rcx_xorb_r8_r8[6:6]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁)
%zf: (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]) = 0x0₈
%sf: (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_r8
%rdx/%rdx: %rdx_xorb_r8_r8

%xmm0: %ymm0_xorb_r8_r8[127:0]
%xmm1: %ymm1_xorb_r8_r8[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %al, %al

.target:
movb %cl, %bh
xorb %bh, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rax/%al: %rax_xorb_rh_rh

%cf: %cf_xorb_rh_rh
%pf: %pf_xorb_rh_rh
%zf: %zf_xorb_rh_rh
%sf: %sf_xorb_rh_rh
%of: %of_xorb_rh_rh

State for specgen instruction: xorb %cl, %bl:
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !(((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][0:0] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][1:1] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][2:2] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][3:3] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][4:4] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][5:5] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][6:6] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][7:7] = 0x1₁)
%zf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0] = 0x0₈
%sf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %al
Value is               -> ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0]
  after renaming it is => 0x0₈

Final state
%rax/%al: %rax_xorb_rh_rh[63:8] ∘ 0x0₈

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xaddb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]
%rbx/%bl: %rbx_xaddb_rh_r8

%cf: %cf_xaddb_rh_r8
%pf: %pf_xaddb_rh_r8
%af: %af_xaddb_rh_r8
%zf: %zf_xaddb_rh_r8
%sf: %sf_xaddb_rh_r8
%of: %of_xaddb_rh_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for xaddb %al, %bh

.target:
movzbl %ah, %edx
xaddb %bl, %dl
movb %dl, %ah
retq 

Initial state:
%rax/%al: %rax_xorb_rh_rh[63:8] ∘ 0x0₈
%rbx/%bh: %rbx_xorb_rh_rh

%cf: false
%pf: true
%af: %af_xorb_rh_rh
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %bl, %ah:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

Final state
%rax/%al: (%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8]
%rbx/%bh: %rbx_xorb_rh_rh[63:16] ∘ %rbx_xorb_rh_rh[15:8] ∘ %rbx_xorb_rh_rh[7:0]

%cf: false
%pf: !(%rbx_xorb_rh_rh[8:8] = 0x1₁ ⊕ %rbx_xorb_rh_rh[9:9] = 0x1₁ ⊕ %rbx_xorb_rh_rh[10:10] = 0x1₁ ⊕ %rbx_xorb_rh_rh[11:11] = 0x1₁ ⊕ %rbx_xorb_rh_rh[12:12] = 0x1₁ ⊕ %rbx_xorb_rh_rh[13:13] = 0x1₁ ⊕ %rbx_xorb_rh_rh[14:14] = 0x1₁ ⊕ %rbx_xorb_rh_rh[15:15] = 0x1₁)
%af: false
%zf: %rbx_xorb_rh_rh[15:8] = 0x0₈
%sf: %rbx_xorb_rh_rh[15:15] = 0x1₁
%of: (%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ %rbx_xorb_rh_rh[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x4, %rdi

Final state:
%rdi/%rdi: 0x4₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %dil

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rdi/%dil: 0x4₆₄

%cf: %cf_xorb_rh_r8
%pf: %pf_xorb_rh_r8
%zf: %zf_xorb_rh_r8
%sf: %sf_xorb_rh_r8
%of: %of_xorb_rh_r8

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %dil
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => 0x8₈

Final state
%rdi/%dil: 0x4₆₄[63:8] ∘ 0x8₈

%cf: false
%pf: false
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %r8, %r8

Final state:
%r8/%r8: %r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8

%cf: false
%pf: !((%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][0:0] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][1:1] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][2:2] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][3:3] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][4:4] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][5:5] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][6:6] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][7:7] = 0x1₁)
%zf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8) = 0x0₆₄
%sf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %ah, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_rh_r8

%cf: false
%pf: !((%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][0:0] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][1:1] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][2:2] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][3:3] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][4:4] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][5:5] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][6:6] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][7:7] = 0x1₁)
%zf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8) = 0x0₆₄
%sf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[63:63] = 0x1₁
%of: false

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]

Final state
%rbx/%bl: %rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16

%cf: false
%pf: !((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16) = 0x0₆₄
%sf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %ax

Final state:
%rax/%ax: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_popcntw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][15:15] = 0x1₁) ∧ !(%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
=====================================
Computing circuit for popcntw %r8w, %ax

.target:
xorq %rax, %rax
clc 
adcw %cx, %ax
popcntq %rax, %rbx
clc 
retq 

Initial state:
%rax/%ax: %rax_xorb_rh_r8

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%af: TMP_BOOL_36
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

State for specgen instruction: popcntw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

Register        -> %bx
  translates to => %ax
Value is               -> (0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0]))))))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: %rax_xorb_rh_r8[63:16] ∘ 0x0₁₆

%cf: false
%pf: false
%af: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh

%cf: false
%pf: !((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][0:0] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][1:1] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][2:2] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][3:3] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][4:4] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][5:5] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][6:6] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][7:7] = 0x1₁)
%zf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh) = 0x0₆₄
%sf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_movzbw_r16_rh
%rdx/%rdx: %rdx_movzbw_r16_rh

%xmm0: %ymm0_movzbw_r16_rh[127:0]
%xmm1: %ymm1_movzbw_r16_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbw %ah, %si

.target:
xorq %rcx, %rcx
callq .read_sf_into_rbx
movb %ah, %bl
retq 

Initial state:
%rsi/%si: %rsi_xaddb_r8_rh

State for specgen instruction: movzbw %ah, %bx:
%rbx/%bx: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

Register        -> %bx
  translates to => %si
Value is               -> ((0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8])[15:0]
  after renaming it is => 0x0₈ ∘ %rax_xaddb_r8_rh[15:8]

Final state
%rsi/%si: %rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8])

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r12

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r12/%r12: %r12_xaddb_r8_rh

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

Final state
%r12/%r12: 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rdx

Final state:
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_xaddb_r8_rh
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %r12b, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_xaddb_r8_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rdx, %r9

Final state:
%r9/%r9: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0]) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %sil, %bl

Final state:
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddb %ah, %bl

.target:
movzbw %ah, %si
movzbq %bl, %r12
movslq %r12d, %rdx
callq .move_016_008_dx_r8b_r9b
movsbl %r12b, %ebx
movb %dl, %ah
callq .move_r9b_to_byte_6_of_rbx
popcntq %rdx, %r9
adcb %sil, %bl
retq 

Initial state:
%rax/%ah: %rax_xorb_rh_r8[63:16] ∘ 0x0₁₆
%rbx/%bl: %rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: false
%af: false
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %ah, %bl:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0]
%rbx/%bl: (%rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]))[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%af: false
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: (false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁) ∧ !(false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %edi

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rdi/%rdi: 0x4₆₄[63:8] ∘ 0x8₈

%cf: false
%of: (false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁) ∧ !(false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rdi
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x10₆₄

Final state
%rdi/%rdi: 0x10₆₄

%cf: false
%of: false

=====================================
=====================================
Computing circuit for xorb %al, %ah

.target:
movq $0x4, %rdi
shlb $0x1, %dil
xorq %r8, %r8
xorb %ah, %bl
popcntw %r8w, %ax
xaddb %ah, %bl
rcll $0x1, %edi
retq 

Initial state:
%rax/%ah: (%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8]

%cf: false
%pf: !(%rbx_xorb_rh_rh[8:8] = 0x1₁ ⊕ %rbx_xorb_rh_rh[9:9] = 0x1₁ ⊕ %rbx_xorb_rh_rh[10:10] = 0x1₁ ⊕ %rbx_xorb_rh_rh[11:11] = 0x1₁ ⊕ %rbx_xorb_rh_rh[12:12] = 0x1₁ ⊕ %rbx_xorb_rh_rh[13:13] = 0x1₁ ⊕ %rbx_xorb_rh_rh[14:14] = 0x1₁ ⊕ %rbx_xorb_rh_rh[15:15] = 0x1₁)
%zf: %rbx_xorb_rh_rh[15:8] = 0x0₈
%sf: %rbx_xorb_rh_rh[15:15] = 0x1₁
%of: (%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ %rbx_xorb_rh_rh[15:15] = 0x1₁)

State for specgen instruction: xorb %bl, %ah:
%rax/%ah: (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0])[15:8]
  after renaming it is => %rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]

Final state
%rax/%ah: ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_rh[8:8] ⊕ %rax_xorb_rh_rh[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[9:9] ⊕ %rax_xorb_rh_rh[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[10:10] ⊕ %rax_xorb_rh_rh[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[11:11] ⊕ %rax_xorb_rh_rh[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[12:12] ⊕ %rax_xorb_rh_rh[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[13:13] ⊕ %rax_xorb_rh_rh[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[14:14] ⊕ %rax_xorb_rh_rh[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for xorb %bh, %bh

.target:
xorb %al, %al
xaddb %al, %bh
xorb %al, %ah
retq 

Initial state:
%rbx/%bh: ((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆)

%cf: %cf_cmc
%pf: !((%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)
%zf: (%cf_cmc ? 0x0₁₆ : 0xffff₁₆) = 0x0₁₆
%sf: (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(false ↔ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)

State for specgen instruction: xorb %bh, %ah:
%rax/%ah: ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_rh[8:8] ⊕ %rax_xorb_rh_rh[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[9:9] ⊕ %rax_xorb_rh_rh[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[10:10] ⊕ %rax_xorb_rh_rh[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[11:11] ⊕ %rax_xorb_rh_rh[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[12:12] ⊕ %rax_xorb_rh_rh[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[13:13] ⊕ %rax_xorb_rh_rh[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[14:14] ⊕ %rax_xorb_rh_rh[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %bh
Value is               -> (((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0]

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[63:8] ∘ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][3:0] + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁ ↔ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁) ∧ !(((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for cmc 

.target:
callq .read_cf_into_rbx
callq .move_064_032_rbx_r8d_r9d
callq .move_r8b_to_byte_5_of_rbx
decw %bx
xorb %bh, %bh
adcb %bl, %bl
retq 

Initial state:
%cf: ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[16:16] = 0x1₁

State for specgen instruction: cmc :
%cf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[8:8] = 0x1₁

Final state
%cf: ((((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉) + (((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0])[15:0])

-------------------------------------
=====================================
Computing circuit for sbbw %cx, %ax

.target:
cmc 
notw %cx
adcw %bx, %cx
cmc 
movswq %cx, %rbx
retq 

Initial state:
%rax/%ax: 0x0₃₂ ∘ (0x0₂₂₄ ∘ %rcx_cmovaeq_r64_r64[31:24] ∘ %rcx_cmovaeq_r64_r64[23:0])[127:0][31:0]

%cf: %cf_cmovaeq_r64_r64
%pf: %pf_cmovaeq_r64_r64
%af: %af_cmovaeq_r64_r64
%zf: %zf_cmovaeq_r64_r64
%sf: %sf_cmovaeq_r64_r64
%of: %of_cmovaeq_r64_r64

State for specgen instruction: sbbw %cx, %bx:
%rbx/%bx: sign-extend-64(((%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0])[15:0])

%cf: ((((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉) + (((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf: !(((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_sbbw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0][3:0])[4:4] = 0x1₁
%zf: ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0] = 0x0₁₆
%sf: ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0][15:15] = 0x1₁
%of: (%rbx_sbbw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0][15:15] = 0x1₁) ∧ !(%rbx_sbbw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %ax
Value is               -> sign-extend-64(((%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ ((((%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉) + (%cf_sbbw_r16_r16 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_sbbw_r16_r16[15:0]) + 0x0₁ ∘ (%rcx_sbbw_r16_r16[63:16] ∘ (%rcx_sbbw_r16_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0])[15:0])[15:0]
  after renaming it is => ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0]

Final state
%rax/%ax: (0x0₃₂ ∘ (0x0₂₂₄ ∘ %rcx_cmovaeq_r64_r64[31:24] ∘ %rcx_cmovaeq_r64_r64[23:0])[127:0][31:0])[63:16] ∘ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0]

%cf: ((((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉) + (((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf: !(((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_cmovaeq_r64_r64[3:0] + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[3:0] ⊕ 0xf₄))[4:4] = 0x1₁
%zf: ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆
%sf: ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁
%of: (%rcx_cmovaeq_r64_r64[15:15] = 0x1₁ ↔ (%rcx_cmovaeq_r64_r64[15:15] ⊕ 0x1₁) = 0x1₁) ∧ !(%rcx_cmovaeq_r64_r64[15:15] = 0x1₁ ↔ ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovaeq_r64_r64 : %rbx_cmovaeq_r64_r64

-------------------------------------
=====================================
Computing circuit for cmovaeq %rcx, %rbx

.target:
vmovd %ecx, %xmm1
callq .move_128_032_xmm1_eax_edx_r8d_r9d
sbbw %cx, %ax
cmoveq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovncq_r64_r64

State for specgen instruction: cmovaeq %rcx, %rbx:
%rbx/%rbx: ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovaeq_r64_r64 : %rbx_cmovaeq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> ((((%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovaeq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovaeq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovaeq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovaeq_r64_r64 : %rbx_cmovaeq_r64_r64
  after renaming it is => ((((%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovncq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovncq_r64_r64 : %rbx_cmovncq_r64_r64

Final state
%rbx/%rbx: ((((%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovncq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovncq_r64_r64 : %rbx_cmovncq_r64_r64

=====================================
=====================================
Computing circuit for cmovncq %rcx, %rbx

.target:
cmovbw %cx, %cx
cmovaeq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnbq_r64_r64

State for specgen instruction: cmovncq %rcx, %rbx:
%rbx/%rbx: ((((%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovncq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovncq_r64_r64 : %rbx_cmovncq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> ((((%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovncq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovncq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovncq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovncq_r64_r64 : %rbx_cmovncq_r64_r64
  after renaming it is => ((((%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovnbq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovnbq_r64_r64 : %rbx_cmovnbq_r64_r64

Final state
%rbx/%rbx: ((((%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovnbq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovnbq_r64_r64 : %rbx_cmovnbq_r64_r64

=====================================
=====================================
Computing circuit for cmovnbq %rcx, %rbx

.target:
cmovncq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovlq_r64_r64

State for specgen instruction: cmovnbq %rcx, %rbx:
%rbx/%rbx: ((((%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovnbq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovnbq_r64_r64 : %rbx_cmovnbq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> ((((%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉) + (%cf_cmovnbq_r64_r64 ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovnbq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovnbq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovnbq_r64_r64 : %rbx_cmovnbq_r64_r64
  after renaming it is => ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovlq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovlq_r64_r64 : %rbx_cmovlq_r64_r64

Final state
%rbx/%rbx: ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovlq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovlq_r64_r64 : %rbx_cmovlq_r64_r64

=====================================
=====================================
Computing circuit for cmovlq %rcx, %rbx

.target:
setnl %al
sarb $0x1, %al
cmovnbq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: cmovlq %rcx, %rbx:
%rbx/%rbx: ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovlq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovlq_r64_r64 : %rbx_cmovlq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of_cmovlq_r64_r64 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovlq_r64_r64 ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_cmovlq_r64_r64[15:0]) + 0x0₁ ∘ (%rcx_cmovlq_r64_r64[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx_cmovlq_r64_r64 : %rbx_cmovlq_r64_r64
  after renaming it is => ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx[15:0]) + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx : %rbx

Final state
%rbx/%rbx: ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx[15:0]) + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx : %rbx

=====================================
Circuits:

%rbx   : ((((true ∧ (sign-extend-64(0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉) + (true ∧ (sign-extend-64(0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx[15:0]) + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx : %rbx

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/