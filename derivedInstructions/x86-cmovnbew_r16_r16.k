// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNBEW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovnbew R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( extractMInt(getParentValue(R2, RSMap), 48, 64) ) #else ( (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #else ( extractMInt(getParentValue(R2, RSMap), 48, 64) ) #fi)  ) #fi) ) )


)

    </regstate>
endmodule

module CMOVNBEW-R16-R16-SEMANTICS
  imports CMOVNBEW-R16-R16
endmodule
/*
TargetInstr:
cmovnbew %cx, %bx
RWSet:
maybe read:{ %cx %cf %zf }
must read:{ %cx %cf %zf }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovaw %cx, %bx  #  1     0    4      OPC=cmovaw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovnbew %cx, %bx

  maybe read:      { %cx %cf %zf }
  must read:       { %cx %cf %zf }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %bx, %eax

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rax/%rax: %rax_cmovaw_r16_r16

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %rax
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₄₈ ∘ %rbx_cmovaw_r16_r16[15:0]

Final state
%rax/%rax: 0x0₄₈ ∘ %rbx_cmovaw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_cmovnal_r32_r32
%rbx/%rbx: %rbx_cmovnal_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_cmovnal_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_cmovnal_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_cmovnal_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_cmovnal_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rsi

Final state:
%rsi/%rsi: sign-extend-64(%rbx_cmovnbel_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r8b_r9b

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_0_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_1_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r8

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r8/%r8: %r8_xchgb_r8_r8

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0]

Final state
%r8/%r8: 0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0x5, %rbx

Final state:
%rbx/%rbx: 0x5₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_movzbw_r16_r8
%rdx/%rdx: %rdx_movzbw_r16_r8

%xmm0: %ymm0_movzbw_r16_r8[127:0]
%xmm1: %ymm1_movzbw_r16_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r12

Final state:
%r12/%r12: sign-extend-64(%rcx_movzbw_r16_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzbw_r16_r8
%rdx/%rdx: %rdx_movzbw_r16_r8

%xmm0: %ymm0_movzbw_r16_r8[127:0]
%xmm1: %ymm1_movzbw_r16_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movzbw %cl, %cx

.target:
movq $0x5, %rbx
callq .move_064_032_rbx_r12d_r13d
movsbq %cl, %r12
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xchgb_r8_r8

State for specgen instruction: movzbw %cl, %bx:
%rbx/%bx: 0x5₆₄[63:16] ∘ ((0x0₃₂ ∘ 0x5₆₄[63:32])[7:0][7:0] ∘ sign-extend-64(%rcx_movzbw_r16_r8[7:0])[7:0][7:0])

Register        -> %bx
  translates to => %cx
Value is               -> (0x5₆₄[63:16] ∘ ((0x0₃₂ ∘ 0x5₆₄[63:32])[7:0][7:0] ∘ sign-extend-64(%rcx_movzbw_r16_r8[7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]

Final state
%rcx/%cx: %rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0])

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %bh, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_movb_rh_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rdx_r8d_r9d

Final state:
%rax/%rax: %rax_movb_rh_rh
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

%xmm0: %ymm0_movb_rh_rh[127:0]
%xmm1: %ymm1_movb_rh_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rcx

Final state:
%rax/%rax: %rax_movb_rh_rh
%rdx/%rdx: 0x0₅₆ ∘ %rbx_movb_rh_rh[15:8]

%xmm0: %ymm0_movb_rh_rh[127:0]
%xmm1: %ymm1_movb_rh_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0]

-------------------------------------
=====================================
Computing circuit for movb %ch, %bh

.target:
movzbl %bh, %edx
callq .move_064_032_rdx_r8d_r9d
callq .move_032_064_r8d_r9d_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xchgb_r8_r8

State for specgen instruction: movb %bh, %ah:
%rax/%ah: %rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_movb_rh_rh[63:16] ∘ ((0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ (0x0₅₆ ∘ %rbx_movb_rh_rh[15:8])[31:0])[31:0][31:0])[7:0] ∘ %rax_movb_rh_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xaddb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]
%rbx/%bl: %rbx_xaddb_rh_r8

%cf: %cf_xaddb_rh_r8
%pf: %pf_xaddb_rh_r8
%af: %af_xaddb_rh_r8
%zf: %zf_xaddb_rh_r8
%sf: %sf_xaddb_rh_r8
%of: %of_xaddb_rh_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %ch

.target:
movzbl %ah, %edx
xaddb %bl, %dl
movb %dl, %ah
retq 

Initial state:
%rcx/%ch: %rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0])
%rbx/%bl: %rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]

%cf: %cf_xchgb_r8_r8
%pf: %pf_xchgb_r8_r8
%af: %af_xchgb_r8_r8
%zf: %zf_xchgb_r8_r8
%sf: %sf_xchgb_r8_r8
%of: %of_xchgb_r8_r8

State for specgen instruction: xaddb %bl, %ah:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

Final state
%rcx/%ch: (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0]
%rbx/%bl: (%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈

%cf: false
%pf: !(%rbx_xchgb_r8_r8[0:0] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[1:1] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[2:2] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[3:3] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[4:4] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[5:5] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[6:6] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_xchgb_r8_r8[7:0] = 0x0₈
%sf: %rbx_xchgb_r8_r8[7:7] = 0x1₁
%of: (false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁) ∧ !(false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xaddw_r16_r16
%rbx/%bx: %rbx_xaddw_r16_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xaddw_r16_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_xaddw_r16_r16[15:0]

Final state
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %cx, %bx

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

%cf: %cf_xaddw_r16_r16
%pf: %pf_xaddw_r16_r16
%af: %af_xaddw_r16_r16
%zf: %zf_xaddw_r16_r16
%sf: %sf_xaddw_r16_r16
%of: %of_xaddw_r16_r16

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

Final state
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for xaddw %bx, %cx

.target:
xchgw %cx, %bx
addw %cx, %bx
retq 

Initial state:
%rcx/%cx: (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0]
%rbx/%bx: (%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈

%cf: false
%pf: !(%rbx_xchgb_r8_r8[0:0] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[1:1] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[2:2] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[3:3] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[4:4] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[5:5] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[6:6] = 0x1₁ ⊕ %rbx_xchgb_r8_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_xchgb_r8_r8[7:0] = 0x0₈
%sf: %rbx_xchgb_r8_r8[7:7] = 0x1₁
%of: (false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁) ∧ !(false ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁)

State for specgen instruction: xaddw %cx, %bx:
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

Final state
%rcx/%cx: ((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])
%rbx/%bx: ((%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈)[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])

%cf: false
%pf: !(%rcx_xchgb_r8_r8[0:0] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[1:1] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[2:2] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[3:3] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[4:4] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[5:5] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[6:6] = 0x1₁ ⊕ %rcx_xchgb_r8_r8[7:7] = 0x1₁)
%af: false
%zf: %rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0] = 0x0₁₆
%sf: %rbx_xchgb_r8_r8[7:7] = 0x1₁
%of: (%rbx_xchgb_r8_r8[7:7] = 0x1₁ ↔ false) ∧ !(%rbx_xchgb_r8_r8[7:7] = 0x1₁ ↔ %rbx_xchgb_r8_r8[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %r8w

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: ((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])
%r8/%r8w: 0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0]

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]

Register        -> %bx
  translates to => %r8w
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]

Final state
%rcx/%cx: (((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ (0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])
%r8/%r8w: (0x0₅₆ ∘ %rbx_xchgb_r8_r8[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])

=====================================
=====================================
Computing circuit for xchgb %r8b, %bl

.target:
movzbq %bl, %r8
movzbw %cl, %cx
movb %ch, %bh
xaddb %bl, %ch
xaddw %bx, %cx
xchgw %cx, %r8w
retq 

Initial state:
%rbx/%bl: %rbx_vmovd_xmm_r32
%r8/%r8b: %r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0]

State for specgen instruction: xchgb %cl, %bl:
%rcx/%cl: (((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ (0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])
%rbx/%bl: ((%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈)[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0])

Register        -> %cl
  translates to => %r8b
Value is               -> ((((%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ %rbx_xchgb_r8_r8[7:0] ∘ (%rcx_xchgb_r8_r8[63:16] ∘ (0x0₈ ∘ %rcx_xchgb_r8_r8[7:0]))[7:0])[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[63:16] ∘ (0x0₈ ∘ %rbx_xchgb_r8_r8[7:0]))[7:0]
  after renaming it is => %rbx_vmovd_xmm_r32[7:0]

Register        -> %bl
  translates to => %bl
Value is               -> (((%rbx_xchgb_r8_r8[63:16] ∘ 0x0₈ ∘ %rbx_xchgb_r8_r8[7:0])[63:8] ∘ 0x0₈)[63:16] ∘ (%rbx_xchgb_r8_r8[7:0] ∘ %rcx_xchgb_r8_r8[7:0]))[7:0]
  after renaming it is => %rbx_vmovd_xmm_r32[7:0]

Final state
%rbx/%bl: %rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0]
%r8/%r8b: (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[63:8] ∘ %rbx_vmovd_xmm_r32[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_3_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r8w_r9w

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_3_of_rbx_to_r8b

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_2_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_3_of_ymm1

Final state:
%rax/%rax: %rax_vmovd_xmm_r32
%rdx/%rdx: %rdx_vmovd_xmm_r32

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[255:32] ∘ ((((%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][15:0])[63:8] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:24])[7:0] ∘ ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[23:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovd %ecx, %xmm1

.target:
vzeroall 
callq .move_016_008_bx_r8b_r9b
callq .move_r8b_to_byte_0_of_ymm1
callq .move_r9b_to_byte_1_of_ymm1
xchgb %r8b, %bl
callq .move_r9b_to_byte_3_of_ymm1
callq .move_032_016_ebx_r8w_r9w
callq .move_byte_3_of_rbx_to_r8b
callq .move_r9b_to_byte_2_of_ymm1
callq .move_r8b_to_byte_3_of_ymm1
retq 

Initial state:
%ymm1: %ymm1_cmovnbel_r32_r32

State for specgen instruction: vmovd %ebx, %xmm1:
%ymm1: ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[255:32] ∘ ((((%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][15:0])[63:8] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:24])[7:0] ∘ ((((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[255:24] ∘ ((%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[63:16] ∘ (%rbx_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[7:0])[31:0][31:16])[7:0] ∘ (((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[255:32] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ ((0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[255:16] ∘ (%r9_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ (%r8_vmovd_xmm_r32[63:8] ∘ %rbx_vmovd_xmm_r32[15:0][7:0])[7:0])[7:0])[23:0])[15:0])[23:0]

Final state
%ymm1: 0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm1_r8_r9

Final state:
%rax/%rax: %rax_cmovnbel_r32_r32
%rdx/%rdx: %rdx_cmovnbel_r32_r32

%xmm0: %ymm0_cmovnbel_r32_r32[127:0]
%xmm1: (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rbx, %rcx

Final state:
%rcx/%rcx: %zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32 : %rcx_cmovnzl_r32_r32

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnzl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnzl %ecx, %ebx

.target:
cmoveq %rbx, %rcx
movl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnel_r32_r32

State for specgen instruction: cmovnzl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnel %r8d, %ebx

.target:
cmovnzl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnbel_r32_r32

State for specgen instruction: cmovnel %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0])

=====================================
-------------------------------------
Getting base circuit for adcb %r9b, %r9b

Final state:
%r9/%r9b: (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][63:8] ∘ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0]

%cf: ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[8:8] = 0x1₁
%pf: !(((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0][3:0] + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0] = 0x0₈
%sf: ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0][7:7] = 0x1₁ ↔ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0][7:7] = 0x1₁) ∧ !((0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0][7:7] = 0x1₁ ↔ ((%cf_cmovnbel_r32_r32 ? 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0] + 0x1₉ : 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0]) + 0x0₁ ∘ (0x0₂₂₄ ∘ %rcx_cmovnbel_r32_r32[31:24] ∘ %rcx_cmovnbel_r32_r32[23:0])[127:0][127:64][7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rbx, %rcx

Final state:
%rcx/%rcx: %zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32 : %rcx_cmovnzl_r32_r32

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnzl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnzl %esi, %ebx

.target:
cmoveq %rbx, %rcx
movl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0])

State for specgen instruction: cmovnzl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovnbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0] : %rbx_cmovnbel_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovnbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0] : %rbx_cmovnbel_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnbel %ecx, %ebx

.target:
movslq %ebx, %rsi
vmovd %ecx, %xmm1
callq .move_128_064_xmm1_r8_r9
cmovnel %r8d, %ebx
adcb %r9b, %r9b
cmovnzl %esi, %ebx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_cmovnal_r32_r32[31:0]

State for specgen instruction: cmovnbel %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovnbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0] : %rbx_cmovnbel_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_cmovnbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbel_r32_r32 ? %rbx_cmovnbel_r32_r32[31:0] : %rcx_cmovnbel_r32_r32[31:0] : %rbx_cmovnbel_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovnal_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnal_r32_r32 ? %rcx_cmovnal_r32_r32[31:0] : %rbx_cmovnal_r32_r32[31:0] : %rcx_cmovnal_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovnal_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnal_r32_r32 ? %rcx_cmovnal_r32_r32[31:0] : %rbx_cmovnal_r32_r32[31:0] : %rcx_cmovnal_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnal %ecx, %ebx

.target:
xchgl %ebx, %ecx
cmovnbel %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovbel_r32_r32

State for specgen instruction: cmovnal %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovnal_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnal_r32_r32 ? %rcx_cmovnal_r32_r32[31:0] : %rbx_cmovnal_r32_r32[31:0] : %rcx_cmovnal_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_cmovnal_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnal_r32_r32 ? %rcx_cmovnal_r32_r32[31:0] : %rbx_cmovnal_r32_r32[31:0] : %rcx_cmovnal_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovbel_r32_r32 ? %rcx_cmovbel_r32_r32[31:0] : %rbx_cmovbel_r32_r32[31:0] : %rcx_cmovbel_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovbel_r32_r32 ? %rcx_cmovbel_r32_r32[31:0] : %rbx_cmovbel_r32_r32[31:0] : %rcx_cmovbel_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovbel %eax, %ecx

.target:
cmovnal %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_cmovaw_r16_r16

State for specgen instruction: cmovbel %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_cmovbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovbel_r32_r32 ? %rcx_cmovbel_r32_r32[31:0] : %rbx_cmovbel_r32_r32[31:0] : %rcx_cmovbel_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%cf_cmovbel_r32_r32 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovbel_r32_r32 ? %rcx_cmovbel_r32_r32[31:0] : %rbx_cmovbel_r32_r32[31:0] : %rcx_cmovbel_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%cf_cmovaw_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovaw_r16_r16 ? 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0] : %rcx_cmovaw_r16_r16[31:0] : 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0])

Final state
%rcx/%rcx: 0x0₃₂ ∘ ((%cf_cmovaw_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovaw_r16_r16 ? 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0] : %rcx_cmovaw_r16_r16[31:0] : 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0])

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₃₂ ∘ ((%cf_cmovaw_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovaw_r16_r16 ? 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0] : %rcx_cmovaw_r16_r16[31:0] : 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0]))[15:0])

-------------------------------------
=====================================
Computing circuit for cmovaw %cx, %bx

.target:
movzwl %bx, %eax
cmovbel %eax, %ecx
movswq %cx, %rbx
retq 

Initial state:
%rbx/%bx: %rbx_cmovnbew_r16_r16

State for specgen instruction: cmovaw %cx, %bx:
%rbx/%bx: sign-extend-64((0x0₃₂ ∘ ((%cf_cmovaw_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovaw_r16_r16 ? 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0] : %rcx_cmovaw_r16_r16[31:0] : 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0]))[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64((0x0₃₂ ∘ ((%cf_cmovaw_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovaw_r16_r16 ? 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0] : %rcx_cmovaw_r16_r16[31:0] : 0x0₁₆ ∘ %rbx_cmovaw_r16_r16[15:0]))[15:0])[15:0]
  after renaming it is => (%cf_cmovnbew_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbew_r16_r16 ? %rbx_cmovnbew_r16_r16[15:0] : %rcx_cmovnbew_r16_r16[15:0] : %rbx_cmovnbew_r16_r16[15:0]

Final state
%rbx/%bx: %rbx_cmovnbew_r16_r16[63:16] ∘ ((%cf_cmovnbew_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbew_r16_r16 ? %rbx_cmovnbew_r16_r16[15:0] : %rcx_cmovnbew_r16_r16[15:0] : %rbx_cmovnbew_r16_r16[15:0])

=====================================
=====================================
Computing circuit for cmovnbew %cx, %bx

.target:
cmovaw %cx, %bx
retq 

Initial state:
%rbx/%bx: %rbx

State for specgen instruction: cmovnbew %cx, %bx:
%rbx/%bx: %rbx_cmovnbew_r16_r16[63:16] ∘ ((%cf_cmovnbew_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbew_r16_r16 ? %rbx_cmovnbew_r16_r16[15:0] : %rcx_cmovnbew_r16_r16[15:0] : %rbx_cmovnbew_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_cmovnbew_r16_r16[63:16] ∘ ((%cf_cmovnbew_r16_r16 ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf_cmovnbew_r16_r16 ? %rbx_cmovnbew_r16_r16[15:0] : %rcx_cmovnbew_r16_r16[15:0] : %rbx_cmovnbew_r16_r16[15:0]))[15:0]
  after renaming it is => (%cf ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf ? %rbx[15:0] : %rcx[15:0] : %rbx[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ ((%cf ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf ? %rbx[15:0] : %rcx[15:0] : %rbx[15:0])

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ ((%cf ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf ? %rbx[15:0] : %rcx[15:0] : %rbx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/