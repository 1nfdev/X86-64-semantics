// Autogenerated using stratification.
requires "x86-configuration.k"

module CQTO
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cqto  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RDX" |-> (ashrMInt(mi(64, svalueMInt(getParentValue(%rax, RSMap))), 63)   )


)

    </regstate>
endmodule

module CQTO-SEMANTICS
  imports CQTO
endmodule
/*
TargetInstr:
cqto
RWSet:
maybe read:{ %rax }
must read:{ %rax }
maybe write:{ %rdx }
must write:{ %rdx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xffffffffffffffff, %r8  #  1     0    10     OPC=movq_r64_imm64
circuit:sarxq %r8, %rax, %rdx          #  2     0xa  5      OPC=sarxq_r64_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cqto 

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %rdx }
  must write:      { %rdx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r8

Final state:
%r8/%r8: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rdx_r10d_r11d

Final state:
%rax/%rax: %rax_sarxq_r64_r64_r64
%rdx/%rdx: %rdx_sarxq_r64_r64_r64

%xmm0: %ymm0_sarxq_r64_r64_r64[127:0]
%xmm1: %ymm1_sarxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rcx_r8d_r9d

Final state:
%rax/%rax: %rax_sarxq_r64_r64_r64
%rdx/%rdx: %rdx_sarxq_r64_r64_r64

%xmm0: %ymm0_sarxq_r64_r64_r64[127:0]
%xmm1: %ymm1_sarxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_sarxq_r64_r64_r64
%rdx/%rdx: %rdx_sarxq_r64_r64_r64

%xmm0: %ymm0_sarxq_r64_r64_r64[127:0]
%xmm1: %ymm1_sarxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rbx

Final state:
%rax/%rax: %rax_sarxq_r64_r64_r64
%rdx/%rdx: %rdx_sarxq_r64_r64_r64

%xmm0: %ymm0_sarxq_r64_r64_r64[127:0]
%xmm1: %ymm1_sarxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for sarq %cl, %rbx

Final state:
%rbx/%rbx: ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %cf_sarxq_r64_r64_r64
%pf: !((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !(((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarxq_r64_r64_r64
%zf: !((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %zf_sarxq_r64_r64_r64
%sf: !((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %sf_sarxq_r64_r64_r64
%of: (0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ %of_sarxq_r64_r64_r64

-------------------------------------
=====================================
Computing circuit for sarxq %r8, %rax, %rdx

.target:
callq .move_064_032_rdx_r10d_r11d
callq .move_064_032_rcx_r8d_r9d
callq .move_008_016_r10b_r11b_cx
callq .move_032_064_r8d_r9d_rbx
sarq %cl, %rbx
retq 

Initial state:
%rdx/%rdx: %rdx_cqto

State for specgen instruction: sarxq %rdx, %rcx, %rbx:
%rbx/%rbx: ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1]

Register        -> %rbx
  translates to => %rdx
Value is               -> ((0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_sarxq_r64_r64_r64[31:0])[31:0][31:0] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarxq_r64_r64_r64[63:16] ∘ ((0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[63:32])[7:0][7:0] ∘ (0x0₃₂ ∘ %rdx_sarxq_r64_r64_r64[31:0])[7:0][7:0]))[7:0][7:0] & 0x3f₈))[64:1]
  after renaming it is => (%rax_cqto ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

Final state
%rdx/%rdx: (%rax_cqto ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

=====================================
=====================================
Computing circuit for cqto 

.target:
movq $0xffffffffffffffff, %r8
sarxq %r8, %rax, %rdx
retq 

Initial state:
%rdx/%rdx: %rdx

State for specgen instruction: cqto :
%rdx/%rdx: (%rax_cqto ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

Register        -> %rdx
  translates to => %rdx
Value is               -> (%rax_cqto ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]
  after renaming it is => (%rax ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

Final state
%rdx/%rdx: (%rax ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

=====================================
Circuits:

%rdx   : (%rax ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/
