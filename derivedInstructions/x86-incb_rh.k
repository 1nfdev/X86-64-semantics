// Autogenerated using stratification.
requires "x86-configuration.k"

module INCB-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (incb R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> (extractMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0, 1) )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 0)), addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 1)), extractMInt(getParentValue(R1, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module INCB-RH-SEMANTICS
  imports INCB-RH
endmodule
/*
TargetInstr:
incb %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %pf %af %zf %sf %of }
must write:{ %ah %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorb %al, %al  #  1     0    2      OPC=xorb_r8_r8
circuit:callq .set_cf  #  2     0x2  5      OPC=callq_label
circuit:adcb %al, %ah  #  3     0x7  2      OPC=adcb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

incb %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %pf %af %zf %sf %of }
  must write:      { %ah %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movb %cl, %bh

Final state:
%rbx/%bh: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %bh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

%cf: %cf_xorb_r8_r8
%pf: %pf_xorb_r8_r8
%zf: %zf_xorb_r8_r8
%sf: %sf_xorb_r8_r8
%of: %of_xorb_r8_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]

Final state
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !((%rbx_xorb_r8_r8[0:0] ⊕ %rcx_xorb_r8_r8[0:0]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[1:1] ⊕ %rcx_xorb_r8_r8[1:1]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[2:2] ⊕ %rcx_xorb_r8_r8[2:2]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[3:3] ⊕ %rcx_xorb_r8_r8[3:3]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[4:4] ⊕ %rcx_xorb_r8_r8[4:4]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[5:5] ⊕ %rcx_xorb_r8_r8[5:5]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[6:6] ⊕ %rcx_xorb_r8_r8[6:6]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁)
%zf: (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]) = 0x0₈
%sf: (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_r8
%rdx/%rdx: %rdx_xorb_r8_r8

%xmm0: %ymm0_xorb_r8_r8[127:0]
%xmm1: %ymm1_xorb_r8_r8[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %al, %al

.target:
movb %cl, %bh
xorb %bh, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rax/%al: %rax_incb_rh

%cf: %cf_incb_rh
%pf: %pf_incb_rh
%zf: %zf_incb_rh
%sf: %sf_incb_rh
%of: %of_incb_rh

State for specgen instruction: xorb %cl, %bl:
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !(((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][0:0] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][1:1] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][2:2] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][3:3] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][4:4] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][5:5] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][6:6] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][7:7] = 0x1₁)
%zf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0] = 0x0₈
%sf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %al
Value is               -> ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0]
  after renaming it is => 0x0₈

Final state
%rax/%al: %rax_incb_rh[63:8] ∘ 0x0₈

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_incb_rh[63:8] ∘ 0x0₈
%rdx/%rdx: %rdx_incb_rh

%xmm0: %ymm0_incb_rh[127:0]
%xmm1: %ymm1_incb_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edi

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdi/%rdi: %rdi_adcb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdi
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_adcb_rh_r8[15:8]

Final state
%rdi/%rdi: 0x0₅₆ ∘ %rax_adcb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: %rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0]

%cf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_rh_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_adcb_rh_r8
%rdx/%rdx: %rdx_adcb_rh_r8

%xmm0: %ymm0_adcb_rh_r8[127:0]
%xmm1: %ymm1_adcb_rh_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for adcb %al, %ah

.target:
movzbl %ah, %edi
adcb %dil, %bl
callq .set_szp_for_bl
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_incb_rh[63:8] ∘ 0x0₈

%cf: true
%pf: true
%af: %af_incb_rh
%zf: true
%sf: false
%of: false

State for specgen instruction: adcb %bl, %ah:
%rax/%ah: %rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0]

%cf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_rh_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0])[15:8]
  after renaming it is => (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:0]

Final state
%rax/%ah: (%rax_incb_rh[63:8] ∘ 0x0₈)[63:16] ∘ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:0] ∘ (%rax_incb_rh[63:8] ∘ 0x0₈)[7:0]

%cf: (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:7] = 0x1₁)
%af: false
%zf: (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:7] = 0x1₁
%of: (%rax_incb_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rax_incb_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for incb %ah

.target:
xorb %al, %al
callq .set_cf
adcb %al, %ah
retq 

Initial state:
%rax/%ah: %rax

%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: incb %ah:
%rax/%ah: (%rax_incb_rh[63:8] ∘ 0x0₈)[63:16] ∘ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:0] ∘ (%rax_incb_rh[63:8] ∘ 0x0₈)[7:0]

%pf: !((0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:7] = 0x1₁)
%af: false
%zf: (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:7] = 0x1₁
%of: (%rax_incb_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rax_incb_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_incb_rh[63:8] ∘ 0x0₈)[63:16] ∘ (0x0₁ ∘ %rax_incb_rh[15:8] + 0x1₉)[7:0] ∘ (%rax_incb_rh[63:8] ∘ 0x0₈)[7:0])[15:8]
  after renaming it is => (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0]

Final state
%rax/%ah: %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0] ∘ %rax[7:0]

%pf: !((0x0₁ ∘ %rax[15:8] + 0x1₉)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁)
%af: false
%zf: (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁
%of: (%rax[15:15] = 0x1₁ ↔ false) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁)

=====================================
Circuits:

%rax   : %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0] ∘ %rax[7:0]

%pf    : !((0x0₁ ∘ %rax[15:8] + 0x1₉)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁)
%af    : false
%zf    : (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ false) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/