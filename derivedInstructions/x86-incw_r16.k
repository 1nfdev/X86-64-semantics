// Autogenerated using stratification.
requires "x86-configuration.k"

module INCW-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (incw R1:R16,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "SF" |-> ( _ => (#ifMInt (eqMInt(mi(16, 1), lshrMInt(extractMInt(orMInt(andMInt(MI445, mi(64, -65536)), mi(64, uvalueMInt(addMInt(extractMInt(MI445, 48, 64), mi(16, 1))))), 48, 64), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> ( _ => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), extractMInt(MI445, 48, 64)), addMInt(extractMInt(MI445, 48, 64), mi(16, 1))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ( _ => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(extractMInt(orMInt(andMInt(MI445, mi(64, -65536)), mi(64, uvalueMInt(addMInt(extractMInt(MI445, 48, 64), mi(16, 1))))), 48, 64), 8, 16), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ( _ => (#ifMInt (eqMInt(mi(16, 2), addMInt(xorMInt(mi(16, 0), lshrMInt(addMInt(extractMInt(MI445, 48, 64), mi(16, 1)), 15)), xorMInt(lshrMInt(extractMInt(MI445, 48, 64), 15), lshrMInt(addMInt(extractMInt(MI445, 48, 64), mi(16, 1)), 15)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> ( MI445 => orMInt(andMInt(MI445, mi(64, -65536)), mi(64, uvalueMInt(addMInt(extractMInt(MI445, 48, 64), mi(16, 1))))) )

 "ZF" |-> ( _ => (#ifMInt (eqMInt(extractMInt(orMInt(andMInt(MI445, mi(64, -65536)), mi(64, uvalueMInt(addMInt(extractMInt(MI445, 48, 64), mi(16, 1))))), 48, 64), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


    ...</regstate>
endmodule

module INCW-R16-SEMANTICS
  imports INCW-R16
endmodule
