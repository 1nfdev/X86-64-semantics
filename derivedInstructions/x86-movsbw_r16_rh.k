// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSBW-R16-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsbw R1:Rh, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 48, 56))), 48, 64)) )


)

    </regstate>
endmodule

module MOVSBW-R16-RH-SEMANTICS
  imports MOVSBW-R16-RH
endmodule
/*
TargetInstr:
movsbw %ah, %bx
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %bx }
must write:{ %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %ah, %cl     #  1     0    2      OPC=movb_r8_rh
circuit:movsbl %cl, %ebx  #  2     0x2  3      OPC=movsbl_r32_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movsbw %ah, %bx

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %bx }
  must write:      { %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movb %ah, %cl

Final state:
%rcx/%cl: %rcx_movsbw_r16_rh[63:8] ∘ %rax_movsbw_r16_rh[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_movsbw_r16_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

=====================================
=====================================
Computing circuit for movsbw %ah, %bx

.target:
movb %ah, %cl
movsbl %cl, %ebx
retq 

Initial state:
%rbx/%bx: %rbx

State for specgen instruction: movsbw %ah, %bx:
%rbx/%bx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Register        -> %bx
  translates to => %bx
Value is               -> (0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0])[15:0]
  after renaming it is => sign-extend-64(%rax[15:8])[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ sign-extend-64(%rax[15:8])[15:0]

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ sign-extend-64(%rax[15:8])[15:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/