// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSWL-R32-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movswl R1:R16, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 48, 64))), 32, 64)) )


)

    </regstate>
endmodule

module MOVSWL-R32-R16-SEMANTICS
  imports MOVSWL-R32-R16
endmodule
/*
TargetInstr:
movswl %cx, %ebx
RWSet:
maybe read:{ %cx }
must read:{ %cx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzwl %cx, %ebx                 #  1     0     3      OPC=movzwl_r32_r16
circuit:callq .move_064_032_rbx_r8d_r9d  #  2     0x3   5      OPC=callq_label
circuit:movq $0xffffffffffffffc0, %rbx   #  3     0x8   10     OPC=movq_r64_imm64
circuit:movw %r8w, %bx                   #  4     0x12  4      OPC=movw_r16_r16
circuit:movswq %bx, %r9                  #  5     0x16  4      OPC=movswq_r64_r16
circuit:xchgl %ebx, %r9d                 #  6     0x1a  3      OPC=xchgl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movswl %cx, %ebx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %cx, %ebx

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rbx/%rbx: %rbx_movswl_r32_r16

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₄₈ ∘ %rcx_movswl_r32_r16[15:0]

Final state
%rbx/%rbx: 0x0₄₈ ∘ %rcx_movswl_r32_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_movswl_r32_r16
%rdx/%rdx: %rdx_movswl_r32_r16

%xmm0: %ymm0_movswl_r32_r16[127:0]
%xmm1: %ymm1_movswl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffc0, %rbx

Final state:
%rbx/%rbx: 0xffffffffffffffc0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rcx_movw_r16_r16[15:0])

-------------------------------------
=====================================
Computing circuit for movw %r8w, %bx

.target:
movswq %cx, %rbx
retq 

Initial state:
%rbx/%bx: 0xffffffffffffffc0₆₄

State for specgen instruction: movw %cx, %bx:
%rbx/%bx: sign-extend-64(%rcx_movw_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64(%rcx_movw_r16_r16[15:0])[15:0]
  after renaming it is => %rcx_movswl_r32_r16[15:0]

Final state
%rbx/%bx: 0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r9

Final state:
%r9/%r9: sign-extend-64((0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r9d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: 0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0]
%r9/%r9: sign-extend-64((0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0])[15:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]

Register        -> %rbx
  translates to => %r9
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ (0xffff₁₆ ∘ %rcx_movswl_r32_r16[15:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]
%r9/%r9: 0x0₃₂ ∘ (0xffff₁₆ ∘ %rcx_movswl_r32_r16[15:0])

=====================================
=====================================
Computing circuit for movswl %cx, %ebx

.target:
movzwl %cx, %ebx
callq .move_064_032_rbx_r8d_r9d
movq $0xffffffffffffffc0, %rbx
movw %r8w, %bx
movswq %bx, %r9
xchgl %ebx, %r9d
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: movswl %cx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx[15:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx[15:0])[31:0]

=====================================
Circuits:

%rbx   : 0x0₃₂ ∘ sign-extend-64(%rcx[15:0])[31:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/