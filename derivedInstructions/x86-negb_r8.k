// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negb R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 9) )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16), extractMInt(getParentValue(R1, RSMap), 56, 64)), addMInt(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16), extractMInt(getParentValue(R1, RSMap), 56, 64))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 9), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 9), extractMInt(addMInt(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16), extractMInt(getParentValue(R1, RSMap), 56, 64)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), mi(16, 1)), 8, 16), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module NEGB-R8-SEMANTICS
  imports NEGB-R8
endmodule
/*
TargetInstr:
negb %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %pf %af %zf %sf %of }
must write:{ %bl %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %bl, %r14d      #  1     0     4      OPC=movzbl_r32_r8
circuit:negw %r14w             #  2     0x4   4      OPC=negw_r16
circuit:xaddb %bl, %r14b       #  3     0x8   4      OPC=xaddb_r8_r8
circuit:callq .set_szp_for_bl  #  4     0xc   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

negb %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0x8, %rbx

Final state:
%rbx/%rbx: 0x8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r10w_r11w

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %r10w

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%r10/%r10w: %r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0]

%cf: %cf_movzbl_r32_r8
%pf: %pf_movzbl_r32_r8
%af: %af_movzbl_r32_r8
%zf: %zf_movzbl_r32_r8
%sf: %sf_movzbl_r32_r8
%of: %of_movzbl_r32_r8

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r10w
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x10₁₆

Final state
%r10/%r10w: (%r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0])[63:16] ∘ 0x10₁₆

%cf: false
%pf: false
%af: true
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzbl_r32_r8[7:0][3:0] + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:7] = 0x1₁
%of: (%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ∧ !(%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbl %bl, %r14d

.target:
movq $0x8, %rbx
callq .move_032_016_ebx_r10w_r11w
addw %bx, %r10w
callq .read_pf_into_rbx
adcb %cl, %bl
retq 

Initial state:
%r14/%r14: %r14_negb_r8

State for specgen instruction: movzbl %cl, %ebx:
%rbx/%rbx: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

Register        -> %rbx
  translates to => %r14
Value is               -> (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_negb_r8[7:0]

Final state
%r14/%r14: 0x0₅₆ ∘ %rbx_negb_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rbp

Final state:
%rbp/%rbp: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %bp

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbp/%bp: 0xffffffffffffffff₆₄

%cf: %cf_negw_r16
%pf: %pf_negw_r16
%af: %af_negw_r16
%zf: %zf_negw_r16
%sf: %sf_negw_r16
%of: %of_negw_r16

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bp
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:0]

Final state
%rbp/%bp: 0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:0]

%cf: (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_negw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_negw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_negw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r14

Final state:
%r14/%r14: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_notw_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])

%cf: false
%pf: !((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %r12w, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xorw %r14w, %r12w

.target:
callq .move_016_008_cx_r8b_r9b
movswq %bx, %r12
callq .move_008_016_r8b_r9b_bx
callq .set_szp_for_bx
callq .read_sf_into_rbx
callq .move_008_016_r8b_r9b_bx
xorq %rbx, %r12
movswq %r12w, %rbx
callq .set_szp_for_bx
retq 

Initial state:
%r12/%r12w: sign-extend-64(%rbx_notw_r16[15:0])

%cf: %cf_notw_r16
%pf: %pf_notw_r16
%zf: %zf_notw_r16
%sf: %sf_notw_r16
%of: %of_notw_r16

State for specgen instruction: xorw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0] = 0x0₁₆
%sf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][15:15] = 0x1₁
%of: false

Register        -> %bx
  translates to => %r12w
Value is               -> sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0]
  after renaming it is => %rbx_notw_r16[15:0] ⊕ 0xffff₁₆

Final state
%r12/%r12w: sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆)

%cf: false
%pf: !((%rbx_notw_r16[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notw_r16[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆) = 0x0₁₆
%sf: (%rbx_notw_r16[15:15] ⊕ 0x1₁) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆))[31:0])

-------------------------------------
=====================================
Computing circuit for notw %bx

.target:
movq $0xffffffffffffffff, %r14
movswq %bx, %r12
xorw %r14w, %r12w
movslq %r12d, %rbx
retq 

Initial state:
%rbx/%bx: %rbx_negw_r16

State for specgen instruction: notw %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆))[31:0])

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64((sign-extend-64(%rbx_notw_r16[15:0])[63:16] ∘ (%rbx_notw_r16[15:0] ⊕ 0xffff₁₆))[31:0])[15:0]
  after renaming it is => %rbx_negw_r16[15:0] ⊕ 0xffff₁₆

Final state
%rbx/%bx: %rbx_negw_r16[63:16] ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆)

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_incw_r16 ⊕ %rax_incw_r16

%cf: false
%pf: !((%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_incw_r16 ⊕ %rax_incw_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_incw_r16 ⊕ %rax_incw_r16) = 0x0₆₄
%sf: (%rax_incw_r16 ⊕ %rax_incw_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_incw_r16 ⊕ %rax_incw_r16
%rdx/%rdx: %rdx_incw_r16

%xmm0: %ymm0_incw_r16[127:0]
%xmm1: %ymm1_incw_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcw %ax, %bx

Final state:
%rbx/%bx: %rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0]

%cf: ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[16:16] = 0x1₁
%pf: !(((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0][3:0] + 0x0₁ ∘ %rbx_incw_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0] = 0x0₁₆
%sf: ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0][15:15] = 0x1₁
%of: ((%rax_incw_r16 ⊕ %rax_incw_r16)[15:0][15:15] = 0x1₁ ↔ %rbx_incw_r16[15:0][15:15] = 0x1₁) ∧ !((%rax_incw_r16 ⊕ %rax_incw_r16)[15:0][15:15] = 0x1₁ ↔ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_incw_r16 ⊕ %rax_incw_r16
%rdx/%rdx: %rdx_incw_r16

%xmm0: %ymm0_incw_r16[127:0]
%xmm1: %ymm1_incw_r16[127:0]

-------------------------------------
=====================================
Computing circuit for incw %bx

.target:
xorq %rax, %rax
callq .set_cf
adcw %ax, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_negw_r16[63:16] ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆)

%pf: !((0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_negw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_negw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_negw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

State for specgen instruction: incw %bx:
%rbx/%bx: %rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0]

%pf: !((%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0][3:0] + 0x0₁ ∘ %rbx_incw_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((%rax_incw_r16 ⊕ %rax_incw_r16)[15:0][15:15] = 0x1₁ ↔ %rbx_incw_r16[15:0][15:15] = 0x1₁) ∧ !((%rax_incw_r16 ⊕ %rax_incw_r16)[15:0][15:15] = 0x1₁ ↔ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_incw_r16[63:16] ∘ ((true ? 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0] + 0x1₁₇ : 0x0₁ ∘ (%rax_incw_r16 ⊕ %rax_incw_r16)[15:0]) + 0x0₁ ∘ %rbx_incw_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:0]

Final state
%rbx/%bx: (%rbx_negw_r16[63:16] ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:0]

%pf: !((0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af: false
%zf: (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆
%sf: (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁
%of: (false ↔ (%rbx_negw_r16[15:15] ⊕ 0x1₁) = 0x1₁) ∧ !(false ↔ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for negw %r14w

.target:
movq $0xffffffffffffffff, %rbp
addw %bx, %bp
notw %bx
incw %bx
retq 

Initial state:
%r14/%r14w: 0x0₅₆ ∘ %rbx_negb_r8[7:0]

%cf: %cf_negb_r8
%pf: %pf_negb_r8
%af: %af_negb_r8
%zf: %zf_negb_r8
%sf: %sf_negb_r8
%of: %of_negb_r8

State for specgen instruction: negw %bx:
%rbx/%bx: (%rbx_negw_r16[63:16] ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:0]

%cf: (0x0₁ ∘ %rbx_negw_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af: false
%zf: (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆
%sf: (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁
%of: (false ↔ (%rbx_negw_r16[15:15] ⊕ 0x1₁) = 0x1₁) ∧ !(false ↔ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r14w
Value is               -> ((%rbx_negw_r16[63:16] ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (%rbx_negw_r16[15:0] ⊕ 0xffff₁₆))[15:0])[15:0]
  after renaming it is => (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:0]

Final state
%r14/%r14w: (0x0₅₆ ∘ %rbx_negb_r8[7:0])[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:0]

%cf: (0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0]) + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af: false
%zf: (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆
%sf: (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁
%of: false ∧ !(false ↔ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %r14b

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rbx/%bl: %rbx_negb_r8
%r14/%r14b: (0x0₅₆ ∘ %rbx_negb_r8[7:0])[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:0]

%cf: (0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0]) + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af: false
%zf: (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆
%sf: (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁
%of: false ∧ !(false ↔ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁)

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rbx/%bl: %rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0]
%r14/%r14b: ((0x0₅₆ ∘ %rbx_negb_r8[7:0])[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[15:0])[63:8] ∘ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[7:0]

%cf: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[3:0] + 0x0₁ ∘ %rbx_negb_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[7:7] = 0x1₁
%of: ((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ %rbx_negb_r8[7:7] = 0x1₁) ∧ !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_negb_r8
%rdx/%rdx: %rdx_negb_r8

%xmm0: %ymm0_negb_r8[127:0]
%xmm1: %ymm1_negb_r8[127:0]

-------------------------------------
=====================================
Computing circuit for negb %bl

.target:
movzbl %bl, %r14d
negw %r14w
xaddb %bl, %r14b
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: negb %bl:
%rbx/%bl: %rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0]

%cf: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[8:8] = 0x1₁
%pf: !((%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[3:0] + 0x0₁ ∘ %rbx_negb_r8[3:0])[4:4] = 0x1₁
%zf: (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0] = 0x0₈
%sf: (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁
%of: ((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ %rbx_negb_r8[7:7] = 0x1₁) ∧ !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx_negb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_negb_r8[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx_negb_r8[7:0] ⊕ 0xffff₁₆))[7:0])[7:0]
  after renaming it is => (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0]

Final state
%rbx/%bl: %rbx[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0]

%cf: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf: !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[3:0] + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf: (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0] = 0x0₈
%sf: (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁
%of: ((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0]

%cf    : (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf    : !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[3:0] + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0] = 0x0₈
%sf    : (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁
%of    : ((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rbx[7:0] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/