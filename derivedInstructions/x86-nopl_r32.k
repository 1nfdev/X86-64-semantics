// Autogenerated using stratification.
requires "x86-configuration.k"

module NOPL-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (nopl R1:R32,  .Typedoperands) => .
  ...</k>
endmodule

module NOPL-R32-SEMANTICS
  imports NOPL-R32
endmodule
/*
TargetInstr:
nopl %ebx
RWSet:
maybe read:{ }
must read:{ }
maybe write:{ }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ nopl }

Circuit:

BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

nopl %ebx

  maybe read:      { }
  must read:       { }
  maybe write:     { }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { nopl }

=====================================
Computing circuit for nopl %ebx

.target:
retq 

Initial state:
State for specgen instruction: nopl %ebx:
Final state
=====================================
Circuits:

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/