// Autogenerated using stratification.
requires "x86-configuration.k"

module ORB-R8-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (orb I1_8:Imm, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> ((#ifMInt (eqMInt(mi(8, 1), lshrMInt(orMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(I1_8, 8, 8 )), 7)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(orMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(I1_8, 8, 8 )), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), orMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(I1_8, 8, 8 ))) )

 "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(I1_8, 8, 8 )), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
