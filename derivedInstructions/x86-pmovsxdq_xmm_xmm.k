// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVSXDQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pmovsxdq R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 224, 256))))) )


)

    </regstate>
endmodule

module PMOVSXDQ-XMM-XMM-SEMANTICS
  imports PMOVSXDQ-XMM-XMM
endmodule
/*
TargetInstr:
pmovsxdq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse4_1 }

Circuit:
circuit:vpmovsxdq %xmm2, %xmm13  #  1     0    5      OPC=vpmovsxdq_xmm_xmm
circuit:movdqa %xmm13, %xmm1     #  2     0x5  5      OPC=movdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pmovsxdq %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse4_1 }

-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_eax_edx_r8d_r9d

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][63:32]

%xmm0: %ymm0_vpmovsxdq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovsxdq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %r11

Final state:
%r11/%r11: sign-extend-64((0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][63:32])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movslq %eax, %r10

Final state:
%r10/%r10: sign-extend-64((0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][31:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][63:32]

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][63:32])[31:0])[63:0] ∘ sign-extend-64((0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][31:0])[31:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovsxdq %xmm2, %xmm13

.target:
callq .move_128_032_xmm2_eax_edx_r8d_r9d
movslq %edx, %r11
vzeroall 
movslq %eax, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm13: %ymm13_pmovsxdq_xmm_xmm

State for specgen instruction: vpmovsxdq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][63:32])[31:0])[63:0] ∘ sign-extend-64((0x0₃₂ ∘ %ymm2_vpmovsxdq_xmm_xmm[127:0][31:0])[31:0])[63:0])

Final state
%ymm13: 0x0₁₂₈ ∘ (sign-extend-64(%ymm2_pmovsxdq_xmm_xmm[63:32]) ∘ sign-extend-64(%ymm2_pmovsxdq_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm13, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_pmovsxdq_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_pmovsxdq_xmm_xmm[255:128] ∘ (sign-extend-64(%ymm2_pmovsxdq_xmm_xmm[63:32]) ∘ sign-extend-64(%ymm2_pmovsxdq_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for pmovsxdq %xmm2, %xmm1

.target:
vpmovsxdq %xmm2, %xmm13
movdqa %xmm13, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: pmovsxdq %xmm2, %xmm1:
%xmm1: (%ymm1_pmovsxdq_xmm_xmm[255:128] ∘ (sign-extend-64(%ymm2_pmovsxdq_xmm_xmm[63:32]) ∘ sign-extend-64(%ymm2_pmovsxdq_xmm_xmm[31:0])))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (sign-extend-64(%ymm2[63:32]) ∘ sign-extend-64(%ymm2[31:0])))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (sign-extend-64(%ymm2[63:32]) ∘ sign-extend-64(%ymm2[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/