// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVZXBQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pmovzxbq R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(getParentValue(R1, RSMap), 240, 248)), concatenateMInt(mi(56, 0), extractMInt(getParentValue(R1, RSMap), 248, 256)))) )


)

    </regstate>
endmodule

module PMOVZXBQ-XMM-XMM-SEMANTICS
  imports PMOVZXBQ-XMM-XMM
endmodule
/*
TargetInstr:
pmovzxbq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse4_1 }

Circuit:
circuit:vpmovzxbq %xmm2, %xmm2             #  1     0     5      OPC=vpmovzxbq_xmm_xmm
circuit:callq .move_128_64_xmm2_xmm8_xmm9  #  2     0x5   5      OPC=callq_label
circuit:movddup %xmm8, %xmm1               #  3     0xa   5      OPC=movddup_xmm_xmm
circuit:vorpd %ymm2, %ymm2, %ymm15         #  4     0xf   4      OPC=vorpd_ymm_ymm_ymm
circuit:unpckhpd %xmm15, %xmm1             #  5     0x13  5      OPC=unpckhpd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pmovzxbq %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse4_1 }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpmovzxbq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxbq_xmm_xmm

%xmm0: %ymm0_vpmovzxbq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovzxbq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_0_of_ymm1

Final state:
%rax/%rax: %rax_vpmovzxbq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxbq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rdx, %rdx

Final state:
%rdx/%rdx: %rdx_notb_r8 ⊕ %rdx_notb_r8

%cf: false
%pf: !((%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rdx_notb_r8 ⊕ %rdx_notb_r8) = 0x0₆₄
%sf: (%rdx_notb_r8 ⊕ %rdx_notb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %dl

Final state:
%rdx/%dl: (%rdx_notb_r8 ⊕ %rdx_notb_r8)[63:8] ∘ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_notb_r8[7:0][3:0] + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_notb_r8[7:0][7:7] = 0x1₁ ↔ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0][7:7] = 0x1₁) ∧ !(%rbx_notb_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rax

Final state:
%rax/%rax: sign-extend-64(%rbx_notl_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rbx

Final state:
%rbx/%rbx: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %eax, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: 0xffffffffffffffff₆₄

%cf: %cf_notl_r32
%pf: %pf_notl_r32
%zf: %zf_notl_r32
%sf: %sf_notl_r32
%of: %of_notl_r32

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

%cf: false
%pf: !((%rbx_notl_r32[0:0] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[1:1] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[2:2] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[3:3] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[4:4] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[5:5] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[6:6] ⊕ 0x1₁) = 0x1₁ ⊕ (%rbx_notl_r32[7:7] ⊕ 0x1₁) = 0x1₁)
%zf: (%rbx_notl_r32[31:0] ⊕ 0xffffffff₃₂) = 0x0₃₂
%sf: (%rbx_notl_r32[31:31] ⊕ 0x1₁) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for notl %edx

.target:
movslq %ebx, %rax
movq $0xffffffffffffffff, %rbx
xorl %eax, %ebx
retq 

Initial state:
%rdx/%rdx: (%rdx_notb_r8 ⊕ %rdx_notb_r8)[63:8] ∘ ((false ? 0x0₁ ∘ %rbx_notb_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_notb_r8[7:0]) + 0x0₁ ∘ (%rdx_notb_r8 ⊕ %rdx_notb_r8)[7:0])[7:0]

State for specgen instruction: notl %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ %rbx_notl_r32[31:0] ⊕ 0xffffffff₆₄
  after renaming it is => 0x0₃₂ ∘ (0x0₂₄ ∘ %rbx_notb_r8[7:0]) ⊕ 0xffffffff₆₄

Final state
%rdx/%rdx: 0x0₃₂ ∘ (0x0₂₄ ∘ %rbx_notb_r8[7:0]) ⊕ 0xffffffff₆₄

=====================================
-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %cx, %ebx

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rbx/%rbx: %rbx_movswl_r32_r16

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₄₈ ∘ %rcx_movswl_r32_r16[15:0]

Final state
%rbx/%rbx: 0x0₄₈ ∘ %rcx_movswl_r32_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_movswl_r32_r16
%rdx/%rdx: %rdx_movswl_r32_r16

%xmm0: %ymm0_movswl_r32_r16[127:0]
%xmm1: %ymm1_movswl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffc0, %rbx

Final state:
%rbx/%rbx: 0xffffffffffffffc0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rcx_movw_r16_r16[15:0])

-------------------------------------
=====================================
Computing circuit for movw %r8w, %bx

.target:
movswq %cx, %rbx
retq 

Initial state:
%rbx/%bx: 0xffffffffffffffc0₆₄

State for specgen instruction: movw %cx, %bx:
%rbx/%bx: sign-extend-64(%rcx_movw_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64(%rcx_movw_r16_r16[15:0])[15:0]
  after renaming it is => %rcx_movswl_r32_r16[15:0]

Final state
%rbx/%bx: 0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r9

Final state:
%r9/%r9: sign-extend-64((0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r9d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: 0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0]
%r9/%r9: sign-extend-64((0xffffffffffffffc0₆₄[63:16] ∘ %rcx_movswl_r32_r16[15:0])[15:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]

Register        -> %rbx
  translates to => %r9
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ (0xffff₁₆ ∘ %rcx_movswl_r32_r16[15:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]
%r9/%r9: 0x0₃₂ ∘ (0xffff₁₆ ∘ %rcx_movswl_r32_r16[15:0])

=====================================
=====================================
Computing circuit for movswl %dx, %ebx

.target:
movzwl %cx, %ebx
callq .move_064_032_rbx_r8d_r9d
movq $0xffffffffffffffc0, %rbx
movw %r8w, %bx
movswq %bx, %r9
xchgl %ebx, %r9d
retq 

Initial state:
%rbx/%rbx: %rbx_notb_r8

State for specgen instruction: movswl %cx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rcx_movswl_r32_r16[15:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0]

=====================================
=====================================
Computing circuit for notb %r8b

.target:
xorq %rdx, %rdx
adcb %bl, %dl
notl %edx
movswl %dx, %ebx
retq 

Initial state:
%r8/%r8b: %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0]

State for specgen instruction: notb %bl:
%rbx/%bl: 0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0]

Register        -> %bl
  translates to => %r8b
Value is               -> (0x0₃₂ ∘ sign-extend-64(0x0₈ ∘ %rbx_notb_r8[7:0] ⊕ 0xffff₁₆)[31:0])[7:0]
  after renaming it is => %ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈

Final state
%r8/%r8b: %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][63:8] ∘ (%ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_edx

Final state:
%rax/%rax: %rax_vpmovzxbq_xmm_xmm
%rdx/%rdx: 0x0₃₂ ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][15:0][15:0] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][63:8] ∘ (%ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈))[15:0][15:0])

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_vpmovzxbq_xmm_xmm
%rdx/%rdx: 0x0₃₂ ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][15:0][15:0] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][63:8] ∘ (%ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈))[15:0][15:0])

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_8_of_ymm1

Final state:
%rax/%rax: %rax_vpmovzxbq_xmm_xmm
%rdx/%rdx: 0x0₃₂ ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][15:0][15:0] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][63:8] ∘ (%ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈))[15:0][15:0])

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[255:72] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][63:8] ∘ (0x0₃₂ ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][15:0][15:0] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][63:8] ∘ (%ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈))[15:0][15:0]))[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[63:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovzxbq %xmm2, %xmm2

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_r8b_to_byte_0_of_ymm1
notb %r8b
callq .move_016_032_r8w_r9w_edx
callq .move_016_008_dx_r8b_r9b
callq .move_r9b_to_byte_8_of_ymm1
retq 

Initial state:
%ymm2: %ymm2_pmovzxbq_xmm_xmm

State for specgen instruction: vpmovzxbq %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[255:72] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][63:8] ∘ (0x0₃₂ ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][127:64][15:0][15:0] ∘ (%ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][63:8] ∘ (%ymm2_vpmovzxbq_xmm_xmm[7:0] ⊕ 0xff₈))[15:0][15:0]))[15:0][15:8])[7:0] ∘ (0x0₂₅₆[255:8] ∘ %ymm2_vpmovzxbq_xmm_xmm[127:0][63:0][7:0])[63:0]

Final state
%ymm2: 0x0₁₈₄ ∘ %ymm2_pmovzxbq_xmm_xmm[15:8] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_pmovzxbq_xmm_xmm
%rdx/%rdx: %rdx_pmovzxbq_xmm_xmm

%xmm0: %ymm0_pmovzxbq_xmm_xmm[127:0]
%xmm1: %ymm1_pmovzxbq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_movddup_xmm_xmm
%rdx/%rdx: %rdx_movddup_xmm_xmm

%xmm0: %ymm0_movddup_xmm_xmm[127:0]
%xmm1: %ymm1_movddup_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r12, %r13

Final state:
%r13/%r13: %ymm2_movddup_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_movddup_xmm_xmm
%rdx/%rdx: %rdx_movddup_xmm_xmm

%xmm0: %ymm0_movddup_xmm_xmm[127:0]
%xmm1: (%ymm1_movddup_xmm_xmm[255:128] ∘ (%ymm2_movddup_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_movddup_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movddup %xmm8, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
movq %r12, %r13
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm1: %ymm1_pmovzxbq_xmm_xmm[127:0]

State for specgen instruction: movddup %xmm2, %xmm1:
%xmm1: (%ymm1_movddup_xmm_xmm[255:128] ∘ (%ymm2_movddup_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_movddup_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_pmovzxbq_xmm_xmm[255:128] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm8_xmm9

Final state:
%rax/%rax: %rax_vorpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vorpd_ymm_ymm_ymm

%xmm0: %ymm0_vorpd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vorpd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm2, %xmm2

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm2: %ymm2_por_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm2: 0x0₁₂₈ ∘ %ymm2_por_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for orq %r9, %r11

Final state:
%r11/%r11: %ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for orq %r8, %r10

Final state:
%r10/%r10: %ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %xmm1, %xmm2, %xmm3

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
orq %r9, %r11
orq %r8, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm3: %ymm3_por_xmm_xmm

State for specgen instruction: vorpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_por_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_por_xmm_xmm[255:128] ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for por %xmm2, %xmm8

.target:
vmovapd %xmm2, %xmm2
vorpd %xmm1, %xmm2, %xmm3
movdqa %xmm3, %xmm1
retq 

Initial state:
%xmm8: (%ymm8_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[127:0])[127:0]

State for specgen instruction: por %xmm2, %xmm1:
%xmm1: (%ymm1_por_xmm_xmm[255:128] ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0])))[127:0]

Final state
%xmm8: ((%ymm8_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[127:0])[255:128] ∘ ((%ymm3_vorpd_ymm_ymm_ymm[127:64] | %ymm2_vorpd_ymm_ymm_ymm[127:64]) ∘ (%ymm3_vorpd_ymm_ymm_ymm[63:0] | %ymm2_vorpd_ymm_ymm_ymm[63:0])))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_256_128_ymm2_xmm10_xmm11

Final state:
%rax/%rax: %rax_vorpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vorpd_ymm_ymm_ymm

%xmm0: %ymm0_vorpd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vorpd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for orq %r9, %r11

Final state:
%r11/%r11: %ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for orq %r8, %r10

Final state:
%r10/%r10: %ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %xmm1, %xmm2, %xmm3

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
orq %r9, %r11
orq %r8, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm3: %ymm3_orps_xmm_xmm

State for specgen instruction: vorpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ ((%ymm1_orps_xmm_xmm[127:64] | %ymm2_orps_xmm_xmm[127:64]) ∘ (%ymm1_orps_xmm_xmm[63:0] | %ymm2_orps_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm10_xmm11

Final state:
%rax/%rax: %rax_orps_xmm_xmm
%rdx/%rdx: %rdx_orps_xmm_xmm

%xmm0: %ymm0_orps_xmm_xmm[127:0]
%xmm1: %ymm1_orps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm10, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_orps_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_orps_xmm_xmm[255:128] ∘ ((%ymm1_orps_xmm_xmm[127:64] | %ymm2_orps_xmm_xmm[127:64]) ∘ (%ymm1_orps_xmm_xmm[63:0] | %ymm2_orps_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for orps %xmm2, %xmm1

.target:
vorpd %xmm1, %xmm2, %xmm3
callq .move_256_128_ymm3_xmm10_xmm11
movdqa %xmm10, %xmm1
retq 

Initial state:
%xmm1: %ymm1_orpd_xmm_xmm[127:0]

State for specgen instruction: orps %xmm2, %xmm1:
%xmm1: (%ymm1_orps_xmm_xmm[255:128] ∘ ((%ymm1_orps_xmm_xmm[127:64] | %ymm2_orps_xmm_xmm[127:64]) ∘ (%ymm1_orps_xmm_xmm[63:0] | %ymm2_orps_xmm_xmm[63:0])))[127:0]

Final state
%xmm1: (%ymm1_orpd_xmm_xmm[255:128] ∘ ((%ymm1_orpd_xmm_xmm[127:64] | %ymm2_orpd_xmm_xmm[127:64]) ∘ (%ymm1_orpd_xmm_xmm[63:0] | %ymm2_orpd_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for orpd %xmm11, %xmm9

.target:
orps %xmm2, %xmm1
retq 

Initial state:
%xmm9: (%ymm9_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[255:128])[127:0]

State for specgen instruction: orpd %xmm2, %xmm1:
%xmm1: (%ymm1_orpd_xmm_xmm[255:128] ∘ ((%ymm1_orpd_xmm_xmm[127:64] | %ymm2_orpd_xmm_xmm[127:64]) ∘ (%ymm1_orpd_xmm_xmm[63:0] | %ymm2_orpd_xmm_xmm[63:0])))[127:0]

Final state
%xmm9: ((%ymm9_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[255:128])[255:128] ∘ ((%ymm3_vorpd_ymm_ymm_ymm[255:192] | %ymm2_vorpd_ymm_ymm_ymm[255:192]) ∘ (%ymm3_vorpd_ymm_ymm_ymm[191:128] | %ymm2_vorpd_ymm_ymm_ymm[191:128])))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_vorpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vorpd_ymm_ymm_ymm

%xmm0: %ymm0_vorpd_ymm_ymm_ymm[127:0]
%xmm1: (((%ymm9_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[255:128])[255:128] ∘ ((%ymm3_vorpd_ymm_ymm_ymm[255:192] | %ymm2_vorpd_ymm_ymm_ymm[255:192]) ∘ (%ymm3_vorpd_ymm_ymm_ymm[191:128] | %ymm2_vorpd_ymm_ymm_ymm[191:128])))[127:0][127:0] ∘ ((%ymm8_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[127:0])[255:128] ∘ ((%ymm3_vorpd_ymm_ymm_ymm[127:64] | %ymm2_vorpd_ymm_ymm_ymm[127:64]) ∘ (%ymm3_vorpd_ymm_ymm_ymm[63:0] | %ymm2_vorpd_ymm_ymm_ymm[63:0])))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %ymm2, %ymm2, %ymm15

.target:
callq .move_256_128_ymm3_xmm8_xmm9
por %xmm2, %xmm8
callq .move_256_128_ymm2_xmm10_xmm11
orpd %xmm11, %xmm9
callq .move_128_256_xmm8_xmm9_ymm1
retq 

Initial state:
%ymm15: %ymm15_pmovzxbq_xmm_xmm

State for specgen instruction: vorpd %ymm3, %ymm2, %ymm1:
%ymm1: ((%ymm9_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[255:128])[255:128] ∘ ((%ymm3_vorpd_ymm_ymm_ymm[255:192] | %ymm2_vorpd_ymm_ymm_ymm[255:192]) ∘ (%ymm3_vorpd_ymm_ymm_ymm[191:128] | %ymm2_vorpd_ymm_ymm_ymm[191:128])))[127:0][127:0] ∘ ((%ymm8_vorpd_ymm_ymm_ymm[255:128] ∘ %ymm3_vorpd_ymm_ymm_ymm[127:0])[255:128] ∘ ((%ymm3_vorpd_ymm_ymm_ymm[127:64] | %ymm2_vorpd_ymm_ymm_ymm[127:64]) ∘ (%ymm3_vorpd_ymm_ymm_ymm[63:0] | %ymm2_vorpd_ymm_ymm_ymm[63:0])))[127:0][127:0]

Final state
%ymm15: 0x0₁₂₈ ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[15:8] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm12_xmm13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm13, %r12

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r12/%r12: %ymm2_unpckhpd_xmm_xmm[127:0][63:0]

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r12
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm1_unpckhpd_xmm_xmm[127:64]

Final state
%r12/%r12: %ymm1_unpckhpd_xmm_xmm[127:64]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for unpckhpd %xmm15, %xmm1

.target:
callq .move_128_64_xmm1_xmm12_xmm13
callq .move_128_064_xmm2_r12_r13
movq %xmm13, %r12
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm1: (%ymm1_pmovzxbq_xmm_xmm[255:128] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])))[127:0]

State for specgen instruction: unpckhpd %xmm2, %xmm1:
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

Final state
%xmm1: ((%ymm1_pmovzxbq_xmm_xmm[255:128] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])))[255:128] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[15:8] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])))[127:0]

=====================================
=====================================
Computing circuit for pmovzxbq %xmm2, %xmm1

.target:
vpmovzxbq %xmm2, %xmm2
callq .move_128_64_xmm2_xmm8_xmm9
movddup %xmm8, %xmm1
vorpd %ymm2, %ymm2, %ymm15
unpckhpd %xmm15, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: pmovzxbq %xmm2, %xmm1:
%xmm1: ((%ymm1_pmovzxbq_xmm_xmm[255:128] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])))[255:128] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[15:8] ∘ (0x0₅₆ ∘ %ymm2_pmovzxbq_xmm_xmm[7:0])))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (0x0₅₆ ∘ %ymm2[15:8] ∘ (0x0₅₆ ∘ %ymm2[7:0])))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (0x0₅₆ ∘ %ymm2[15:8] ∘ (0x0₅₆ ∘ %ymm2[7:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/