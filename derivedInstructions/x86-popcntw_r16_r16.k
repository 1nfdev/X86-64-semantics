// Autogenerated using stratification.
requires "x86-configuration.k"

module POPCNTW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (popcntw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (mi(1, 0) )

 "AF" |-> (mi(1, 0) )

 "PF" |-> (mi(1, 0) )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(mi(64, countOnes(extractMInt(getParentValue(R1, RSMap), 48, 64), 0)), 48, 64)) )

 "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module POPCNTW-R16-R16-SEMANTICS
  imports POPCNTW-R16-R16
endmodule
/*
TargetInstr:
popcntw %cx, %bx
RWSet:
maybe read:{ %cx }
must read:{ %cx }
maybe write:{ %bx %cf %pf %af %zf %sf %of }
must write:{ %bx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ popcnt }

Circuit:
circuit:xorq %rax, %rax     #  1     0    3      OPC=xorq_r64_r64
circuit:clc                 #  2     0x3  1      OPC=clc
circuit:adcw %cx, %ax       #  3     0x4  3      OPC=adcw_r16_r16
circuit:popcntq %rax, %rbx  #  4     0x7  5      OPC=popcntq_r64_r64
circuit:clc                 #  5     0xc  1      OPC=clc
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

popcntw %cx, %bx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %bx %cf %pf %af %zf %sf %of }
  must write:      { %bx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { popcnt }

Circuits:

%rbx   : %rbx[63:16] ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[15:15] + 0x0₁ ∘ %rcx[14:14]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[13:13] + 0x0₁ ∘ %rcx[12:12])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[11:11] + 0x0₁ ∘ %rcx[10:10]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[9:9] + 0x0₁ ∘ %rcx[8:8]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[7:7] + 0x0₁ ∘ %rcx[6:6]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[5:5] + 0x0₁ ∘ %rcx[4:4])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[3:3] + 0x0₁ ∘ %rcx[2:2]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[1:1] + 0x0₁ ∘ %rcx[0:0]))))

%cf    : false
%pf    : false
%af    : false
%zf    : 0x0₄₈ ∘ %rcx[15:0] = 0x0₆₄
%sf    : false
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/