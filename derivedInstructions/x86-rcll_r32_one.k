// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLL-R32-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rcll $0x1, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "OF" |-> ( _ => (#ifMInt (eqMInt(mi(32, 2), addMInt(xorMInt(lshrMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), 31), lshrMInt(addMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), mi(32, uvalueMInt(MI624))), 31)), xorMInt(lshrMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), 31), lshrMInt(addMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), mi(32, uvalueMInt(MI624))), 31)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "CF" |-> ( MI624 => (#ifMInt ( (  ( ultMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64))  orBool  ultMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)) )  orBool  ( ultMInt(addMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), mi(32, uvalueMInt(MI624))), addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)))  orBool  ultMInt(addMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), mi(32, uvalueMInt(MI624))), mi(32, uvalueMInt(MI624))) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> ( MI647 => orMInt(andMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(addMInt(addMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI647, 32, 64))), 32, 64)), mi(32, uvalueMInt(MI624))))), 0)) )


    ...</regstate>
endmodule

module RCLL-R32-ONE-SEMANTICS
  imports RCLL-R32-ONE
endmodule
