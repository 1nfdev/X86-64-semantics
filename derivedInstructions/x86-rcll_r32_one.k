// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLL-R32-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rcll $0x1, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "OF" |-> ( _ => #ifMInt (eqMInt(mi(bitwidthMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), 2), addMInt(xorMInt(lshrMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0),  ( bitwidthMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0))  -Int  1 ) ), lshrMInt(addMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), zeroExtend(MI544, 32)),  ( bitwidthMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0))  -Int  1 ) )), xorMInt(lshrMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0),  ( bitwidthMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0))  -Int  1 ) ), lshrMInt(addMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), zeroExtend(MI544, 32)),  ( bitwidthMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0))  -Int  1 ) )))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "CF" |-> ( MI544 => #ifMInt ( (  ( ultMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0))  orBool  ultMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)) )  orBool  ( ultMInt(addMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), zeroExtend(MI544, 32)), addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)))  orBool  ultMInt(addMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), zeroExtend(MI544, 32)), zeroExtend(MI544, 32)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

convToRegKeys(R2) |-> ( MI555 => plugInMask(signExtend(extractMask(MI555, 32, 0), 64), addMInt(addMInt(extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0), extractMask(signExtend(extractMask(MI555, 32, 0), 64), 32, 0)), zeroExtend(MI544, 32)), 0) )


    ...</regstate>
endmodule

module RCLL-SEMANTICS
  imports RCLL-R32-ONE
endmodule
  