// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLQ-R64-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rclq $0x1, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "OF" |-> ( _ => (#ifMInt (eqMInt(mi(64, 2), addMInt(xorMInt(lshrMInt(MI647, 63), lshrMInt(addMInt(addMInt(MI647, MI647), mi(64, uvalueMInt(MI624))), 63)), xorMInt(lshrMInt(MI647, 63), lshrMInt(addMInt(addMInt(MI647, MI647), mi(64, uvalueMInt(MI624))), 63)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "CF" |-> ( MI624 => (#ifMInt ( (  ( ultMInt(addMInt(MI647, MI647), MI647)  orBool  ultMInt(addMInt(MI647, MI647), MI647) )  orBool  ( ultMInt(addMInt(addMInt(MI647, MI647), mi(64, uvalueMInt(MI624))), addMInt(MI647, MI647))  orBool  ultMInt(addMInt(addMInt(MI647, MI647), mi(64, uvalueMInt(MI624))), mi(64, uvalueMInt(MI624))) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> ( MI647 => addMInt(addMInt(MI647, MI647), mi(64, uvalueMInt(MI624))) )


    ...</regstate>
endmodule

module RCLQ-R64-ONE-SEMANTICS
  imports RCLQ-R64-ONE
endmodule
