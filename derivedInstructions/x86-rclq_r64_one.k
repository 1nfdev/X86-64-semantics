// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLQ-R64-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rclq $0x1, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), getFlag("CF", RSMap))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R2, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), getFlag("CF", RSMap))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), getFlag("CF", RSMap))), 1, 65) )


)

    </regstate>
endmodule

module RCLQ-R64-ONE-SEMANTICS
  imports RCLQ-R64-ONE
endmodule
/*
TargetInstr:
rclq $0x1, %rbx
RWSet:
maybe read:{ %rbx %cf }
must read:{ %rbx %cf }
maybe write:{ %rbx %cf %of }
must write:{ %rbx %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:adcq %rbx, %rbx  #  1     0    3      OPC=adcq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rclq $0x1, %rbx

  maybe read:      { %rbx %cf }
  must read:       { %rbx %cf }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : ((%cf ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:0]

%cf    : ((%cf ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[64:64] = 0x1₁
%of    : (%rbx[63:63] = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/