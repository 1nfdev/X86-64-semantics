// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rclw $0x1, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "OF" |-> ( _ => (#ifMInt (eqMInt(mi(16, 2), addMInt(xorMInt(lshrMInt(extractMInt(MI647, 48, 64), 15), lshrMInt(addMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), mi(16, uvalueMInt(MI624))), 15)), xorMInt(lshrMInt(extractMInt(MI647, 48, 64), 15), lshrMInt(addMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), mi(16, uvalueMInt(MI624))), 15)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "CF" |-> ( MI624 => (#ifMInt ( (  ( ultMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), extractMInt(MI647, 48, 64))  orBool  ultMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), extractMInt(MI647, 48, 64)) )  orBool  ( ultMInt(addMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), mi(16, uvalueMInt(MI624))), addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)))  orBool  ultMInt(addMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), mi(16, uvalueMInt(MI624))), mi(16, uvalueMInt(MI624))) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> ( MI647 => orMInt(andMInt(MI647, mi(64, -65536)), shlMInt(mi(64, uvalueMInt(addMInt(addMInt(extractMInt(MI647, 48, 64), extractMInt(MI647, 48, 64)), mi(16, uvalueMInt(MI624))))), 0)) )


    ...</regstate>
endmodule

module RCLW-R16-ONE-SEMANTICS
  imports RCLW-R16-ONE
endmodule
