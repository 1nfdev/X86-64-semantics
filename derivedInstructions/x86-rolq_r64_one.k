// Autogenerated using stratification.
requires "x86-configuration.k"

module ROLQ-R64-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rolq $0x1, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), 0, 1))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R2, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), 0, 1))), 1, 65) )


)

    </regstate>
endmodule

module ROLQ-R64-ONE-SEMANTICS
  imports ROLQ-R64-ONE
endmodule
/*
TargetInstr:
rolq $0x1, %rbx
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %rbx %cf %of }
must write:{ %rbx %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .move_064_032_rbx_r12d_r13d  #  1     0     5      OPC=callq_label
circuit:callq .move_032_064_r12d_r13d_rcx  #  2     0x5   5      OPC=callq_label
circuit:movq %rcx, %r9                     #  3     0xa   3      OPC=movq_r64_r64
circuit:addq %rcx, %r9                     #  4     0xd   3      OPC=addq_r64_r64
circuit:xchgw %bx, %bx                     #  5     0x10  3      OPC=xchgw_r16_r16
circuit:adcq %rbx, %rbx                    #  6     0x13  3      OPC=adcq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rolq $0x1, %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %cf %of }
  must write:      { %rbx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_rolq_r64_one
%rdx/%rdx: %rdx_rolq_r64_one

%xmm0: %ymm0_rolq_r64_one[127:0]
%xmm1: %ymm1_rolq_r64_one[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r12d_r13d_rcx

Final state:
%rax/%rax: %rax_rolq_r64_one
%rdx/%rdx: %rdx_rolq_r64_one

%xmm0: %ymm0_rolq_r64_one[127:0]
%xmm1: %ymm1_rolq_r64_one[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %rcx, %r9

Final state:
%r9/%r9: (0x0₃₂ ∘ %rbx_rolq_r64_one[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rbx_rolq_r64_one[31:0])[31:0][31:0]

-------------------------------------
-------------------------------------
Getting base circuit for orq %rbx, %rbx

Final state:
%rbx/%rbx: %rbx_addq_r64_r64 | %rbx_addq_r64_r64

%cf: false
%pf: !((%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64) = 0x0₆₄
%sf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for addq %rcx, %r9

.target:
orq %rbx, %rbx
adcq %rcx, %rbx
retq 

Initial state:
%r9/%r9: (0x0₃₂ ∘ %rbx_rolq_r64_one[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rbx_rolq_r64_one[31:0])[31:0][31:0]

%cf: %cf_rolq_r64_one
%pf: %pf_rolq_r64_one
%af: %af_rolq_r64_one
%zf: %zf_rolq_r64_one
%sf: %sf_rolq_r64_one
%of: %of_rolq_r64_one

State for specgen instruction: addq %rcx, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %r9
Value is               -> ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]
  after renaming it is => (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[63:0]

Final state
%r9/%r9: (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[63:0]

%cf: (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_rolq_r64_one[3:0] + 0x0₁ ∘ %rbx_rolq_r64_one[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[63:63] = 0x1₁
%of: (%rbx_rolq_r64_one[63:63] = 0x1₁ ↔ %rbx_rolq_r64_one[63:63] = 0x1₁) ∧ !(%rbx_rolq_r64_one[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[63:63] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %bx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rbx/%bx: %rbx_rolq_r64_one

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %bx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_rolq_r64_one[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_rolq_r64_one[15:0]

Final state
%rbx/%bx: (%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]

=====================================
-------------------------------------
Getting base circuit for adcq %rbx, %rbx

Final state:
%rbx/%rbx: (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0]

%cf: (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[64:64] = 0x1₁
%pf: !((((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][0:0] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][1:1] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][2:2] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][3:3] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][4:4] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][5:5] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][6:6] = 0x1₁ ⊕ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[3:0] + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[3:0])[4:4] = 0x1₁
%zf: (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0] = 0x0₆₄
%sf: (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0][63:63] = 0x1₁
%of: (((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:63] = 0x1₁ ↔ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:63] = 0x1₁) ∧ !(((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:63] = 0x1₁ ↔ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rolq $0x1, %rbx

.target:
callq .move_064_032_rbx_r12d_r13d
callq .move_032_064_r12d_r13d_rcx
movq %rcx, %r9
addq %rcx, %r9
xchgw %bx, %bx
adcq %rbx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

%cf: %cf
%of: %of

State for specgen instruction: rolq $0x1, %rbx:
%rbx/%rbx: (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0]

%cf: (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[64:64] = 0x1₁
%of: (((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:63] = 0x1₁ ↔ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:63] = 0x1₁) ∧ !(((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:63] = 0x1₁ ↔ (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> (((0x0₁ ∘ %rbx_rolq_r64_one + 0x0₁ ∘ %rbx_rolq_r64_one)[64:64] = 0x1₁ ? 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]) + 0x1₆₅ : 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0])) + 0x0₁ ∘ ((%rbx_rolq_r64_one[63:16] ∘ %rbx_rolq_r64_one[15:0])[63:16] ∘ %rbx_rolq_r64_one[15:0]))[63:0]
  after renaming it is => (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:0]

Final state
%rbx/%rbx: (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:0]

%cf: (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[64:64] = 0x1₁
%of: (%rbx[63:63] = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

=====================================
Circuits:

%rbx   : (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:0]

%cf    : (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[64:64] = 0x1₁
%of    : (%rbx[63:63] = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ (((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₁ ∘ %rbx + 0x1₆₅ : 0x0₁ ∘ %rbx) + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/