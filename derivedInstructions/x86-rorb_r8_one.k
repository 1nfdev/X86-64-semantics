// Autogenerated using stratification.
requires "x86-configuration.k"

module RORB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rorb $0x1, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt (ultMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(8, 2), addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64), 7), lshrMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)), 7)), xorMInt(lshrMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64), 7), lshrMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)), 7)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)) )


)

    </regstate>
endmodule

module RORB-R8-ONE-SEMANTICS
  imports RORB-R8-ONE
endmodule
/*
TargetInstr:
rorb $0x1, %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %of }
must write:{ %bl %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %bl, %bh     #  1     0    2      OPC=movb_rh_r8
circuit:sarw $0x1, %bx    #  2     0x2  3      OPC=sarw_r16_one
circuit:movsbl %bl, %eax  #  3     0x5  3      OPC=movsbl_r32_r8
circuit:salb $0x1, %al    #  4     0x8  2      OPC=salb_r8_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rorb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movb %bl, %bh

Final state:
%rbx/%bh: %rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_sarw_r16_one[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %r8d

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%r8/%r8: %r8_orl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %r11

Final state:
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r11d, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_orl_r32_r32
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

%cf: %cf_orl_r32_r32
%pf: %pf_orl_r32_r32
%af: %af_orl_r32_r32
%zf: %zf_orl_r32_r32
%sf: %sf_orl_r32_r32
%of: %of_orl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0]
%r11/%r11: 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_orl_r32_r32[3:0] + 0x0₁ ∘ %rcx_orl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁
%of: (%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:31] = 0x1₁) ∧ !(%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for orq %r11, %r8

Final state:
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r8d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_orl_r32_r32
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_orl_r32_r32
%rdx/%rdx: %rdx_orl_r32_r32

%xmm0: %ymm0_orl_r32_r32[127:0]
%xmm1: %ymm1_orl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for orl %ecx, %edx

.target:
movl %ebx, %r8d
movswq %cx, %r11
xaddl %r11d, %ecx
orq %r11, %r8
xchgl %ebx, %r8d
callq .set_szp_for_ebx
retq 

Initial state:
%rdx/%rdx: %rdx_andnl_r32_r32_r32

%cf: %cf_andnl_r32_r32_r32
%pf: %pf_andnl_r32_r32_r32
%zf: %zf_andnl_r32_r32_r32
%sf: %sf_andnl_r32_r32_r32
%of: %of_andnl_r32_r32_r32

State for specgen instruction: orl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

%cf: false
%pf: !((0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

Final state
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_ecx

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %edx, %ecx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ ((%r13_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r12_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][15:0])[15:0][15:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

%cf: false
%pf: !(((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) ⊕ %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) ⊕ %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) ⊕ %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) ⊕ %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) ⊕ %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) ⊕ %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) ⊕ %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) ⊕ %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

=====================================
=====================================
Computing circuit for andnl %ebx, %ebx, %esi

.target:
movslq %edx, %rbx
orl %ecx, %edx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_ecx
xorl %edx, %ecx
xchgl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: %rsi_sarq_r64_one

%cf: %cf_sarq_r64_one
%zf: %zf_sarq_r64_one
%sf: %sf_sarq_r64_one
%of: %of_sarq_r64_one

State for specgen instruction: andnl %edx, %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

%cf: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %esi, %esi

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: 0x0₆₄

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for callq .read_sf_into_rcx

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: %rdx_setns_r8

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: %rdx_setns_r8

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_edx

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: 0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0])

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_edx_r10w_r11w

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: 0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0])

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16

%cf: false
%pf: !((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16) = 0x0₆₄
%sf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %ax

Final state:
%rax/%ax: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_popcntw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][15:15] = 0x1₁) ∧ !(%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
=====================================
Computing circuit for popcntw %r10w, %r10w

.target:
xorq %rax, %rax
clc 
adcw %cx, %ax
popcntq %rax, %rbx
clc 
retq 

Initial state:
%r10/%r10w: %r10_setns_r8[63:16] ∘ (0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0]))[31:0][15:0]

%cf: %cf_setns_r8
%pf: %pf_setns_r8
%af: %af_setns_r8
%zf: %zf_setns_r8
%sf: %sf_setns_r8
%of: %of_setns_r8

State for specgen instruction: popcntw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

Register        -> %bx
  translates to => %r10w
Value is               -> (0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0]))))))[15:0]
  after renaming it is => %sf_setns_r8 ? 0x1₁₆ : 0x0₁₆

Final state
%r10/%r10w: (%r10_setns_r8[63:16] ∘ (0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0]))[31:0][15:0])[63:16] ∘ (%sf_setns_r8 ? 0x1₁₆ : 0x0₁₆)

%cf: false
%pf: false
%af: false
%zf: (%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_sete_r8
%rdx/%rdx: %rdx_sete_r8

%xmm0: %ymm0_sete_r8[127:0]
%xmm1: %ymm1_sete_r8[127:0]

-------------------------------------
=====================================
Computing circuit for sete %bl

.target:
callq .read_zf_into_rbx
retq 

Initial state:
%rbx/%bl: %rbx_setns_r8

State for specgen instruction: sete %bl:
%rbx/%bl: 0x0₆₃ ∘ (%zf_sete_r8 ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %bl
Value is               -> (0x0₆₃ ∘ (%zf_sete_r8 ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => (%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈

Final state
%rbx/%bl: %rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈)

=====================================
=====================================
Computing circuit for setns %cl

.target:
callq .read_sf_into_rcx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_edx
callq .move_032_016_edx_r10w_r11w
popcntw %r10w, %r10w
sete %bl
retq 

Initial state:
%rcx/%cl: %rcx_sarq_r64_one

State for specgen instruction: setns %bl:
%rbx/%bl: %rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈)

Register        -> %bl
  translates to => %cl
Value is               -> (%rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈))[7:0]
  after renaming it is => 0x1₈

Final state
%rcx/%cl: %rcx_sarq_r64_one[63:8] ∘ 0x1₈

=====================================
-------------------------------------
Getting base circuit for sarq %cl, %rbx

Final state:
%rbx/%rbx: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%pf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarq_r64_one
%zf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ true
%sf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%of: (0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %si, %r12d

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%r12/%r12: %r12_sarq_r64_one

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %r12
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₆₄

Final state
%r12/%r12: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rcx

Final state:
%rcx/%rcx: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ebx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_decl_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_decl_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_decl_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ecx, %ebx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: 0xffffffffffffffff₆₄
%rbx/%rbx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]

%cf: %cf_decl_r32
%pf: %pf_decl_r32
%af: %af_decl_r32
%zf: %zf_decl_r32
%sf: %sf_decl_r32
%of: %of_decl_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]

%cf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decl_r32[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of: (%rbx_decl_r32[31:31] = 0x1₁ ↔ true) ∧ !(%rbx_decl_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for decl %r12d

.target:
movq $0xffffffffffffffff, %rcx
xchgl %ebx, %ebx
xaddl %ecx, %ebx
retq 

Initial state:
%r12/%r12: 0x0₆₄

%pf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarq_r64_one
%af: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ TMP_BOOL_5 ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %af_sarq_r64_one
%zf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ true
%sf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%of: (0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ false

State for specgen instruction: decl %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]

%pf: !((0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decl_r32[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of: (%rbx_decl_r32[31:31] = 0x1₁ ↔ true) ∧ !(%rbx_decl_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]
  after renaming it is => 0xffffffff₆₄

Final state
%r12/%r12: 0xffffffff₆₄

%pf: true
%af: false
%zf: false
%sf: true
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_rbx

Final state:
%rax/%rax: %rax_sarq_r64_one
%rdx/%rdx: %rdx_sarq_r64_one

%xmm0: %ymm0_sarq_r64_one[127:0]
%xmm1: %ymm1_sarq_r64_one[127:0]

-------------------------------------
=====================================
Computing circuit for sarq $0x1, %r12

.target:
andnl %ebx, %ebx, %esi
movl %esi, %esi
setns %cl
sarq %cl, %rbx
movzwl %si, %r12d
decl %r12d
callq .set_szp_for_rbx
retq 

Initial state:
%r12/%r12: sign-extend-64(%rbx_sarw_r16_one[15:0])

%cf: %cf_sarw_r16_one
%pf: %pf_sarw_r16_one
%zf: %zf_sarw_r16_one
%sf: %sf_sarw_r16_one
%of: %of_sarw_r16_one

State for specgen instruction: sarq $0x1, %rbx:
%rbx/%rbx: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%pf: !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁)
%zf: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄
%sf: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %r12
Value is               -> (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]
  after renaming it is => (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

Final state
%r12/%r12: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

%cf: true ∧ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %r12w, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rbx/%bx: %rbx_sarw_r16_one
%r12/%r12w: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %r12w
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_sarw_r16_one[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

Final state
%rbx/%bx: %rbx_sarw_r16_one[63:16] ∘ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]
%r12/%r12w: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1][63:16] ∘ %rbx_sarw_r16_one[15:0]

=====================================
=====================================
Computing circuit for sarw $0x1, %bx

.target:
movswq %bx, %r12
sarq $0x1, %r12
xchgw %r12w, %bx
retq 

Initial state:
%rbx/%bx: %rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]

%cf: %cf_rorb_r8_one
%pf: %pf_rorb_r8_one
%zf: %zf_rorb_r8_one
%sf: %sf_rorb_r8_one
%of: %of_rorb_r8_one

State for specgen instruction: sarw $0x1, %bx:
%rbx/%bx: %rbx_sarw_r16_one[63:16] ∘ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

%cf: true ∧ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_sarw_r16_one[63:16] ∘ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1])[15:0]
  after renaming it is => (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

Final state
%rbx/%bx: (%rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0])[63:16] ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

%cf: true ∧ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %eax

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rax/%rax: %rax_rorb_r8_one

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rax
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0]

Final state
%rax/%rax: 0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %bl, %rbp

Final state:
%rbp/%rbp: sign-extend-64(%rbx_salb_r8_one[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %bpl, %rbx

Final state:
%rbx/%rbx: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %bl

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])

%cf: %cf_salb_r8_one
%pf: %pf_salb_r8_one
%zf: %zf_salb_r8_one
%sf: %sf_salb_r8_one
%of: %of_salb_r8_one

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0]

Final state
%rbx/%bl: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])[63:8] ∘ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0]

%cf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁
%of: (%rbx_salb_r8_one[7:7] = 0x1₁ ↔ %rbx_salb_r8_one[7:7] = 0x1₁) ∧ !(%rbx_salb_r8_one[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for salb $0x1, %al

.target:
movsbq %bl, %rbp
movsbq %bpl, %rbx
shlb $0x1, %bl
retq 

Initial state:
%rax/%al: 0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0]

%cf: true ∧ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

State for specgen instruction: salb $0x1, %bl:
%rbx/%bl: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])[63:8] ∘ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0]

%cf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁
%of: (%rbx_salb_r8_one[7:7] = 0x1₁ ↔ %rbx_salb_r8_one[7:7] = 0x1₁) ∧ !(%rbx_salb_r8_one[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %al
Value is               -> (sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])[63:8] ∘ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:0]

Final state
%rax/%al: (0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0])[63:8] ∘ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:0]

%cf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:0] = 0x0₈
%sf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁
%of: ((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for rorb $0x1, %bl

.target:
movb %bl, %bh
sarw $0x1, %bx
movsbl %bl, %eax
salb $0x1, %al
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%of: %of

State for specgen instruction: rorb $0x1, %bl:
%rbx/%bl: (%rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0])[63:16] ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

%cf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of: ((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> ((%rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0])[63:16] ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1])[7:0]
  after renaming it is => (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

Final state
%rbx/%bl: %rbx[63:8] ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

%cf: (0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of: ((sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

%cf    : (0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of    : ((sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/