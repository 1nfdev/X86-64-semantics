// Autogenerated using stratification.
requires "x86-configuration.k"

module SALW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (salw $0x1, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 2) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SALW-R16-ONE-SEMANTICS
  imports SALW-R16-ONE
endmodule
/*
TargetInstr:
salw $0x1, %bx
RWSet:
maybe read:{ %bx }
must read:{ %bx }
maybe write:{ %bx %cf %pf %zf %sf %of }
must write:{ %bx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:shlw $0x1, %bx  #  1     0    3      OPC=shlw_r16_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

salw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlw_r16_one ⊕ %rax_shlw_r16_one

%cf: false
%pf: !((%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one) = 0x0₆₄
%sf: (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shll_r32_one ⊕ %rax_shll_r32_one

%cf: false
%pf: !((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shll_r32_one ⊕ %rax_shll_r32_one) = 0x0₆₄
%sf: (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %bl

Final state:
%rbx/%bl: %rbx_shll_r32_one[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][3:0] + 0x0₁ ∘ %rbx_shll_r32_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ %rbx_shll_r32_one[7:0][7:7] = 0x1₁) ∧ !((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %ebx

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_shll_r32_one[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[8:8] = 0x1₁
%of: ((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ %rbx_shll_r32_one[7:0][7:7] = 0x1₁) ∧ !((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:7] = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_shll_r32_one[31:31] = 0x1₁ ↔ %rbx_shll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_shll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_shll_r32_one ⊕ %rax_shll_r32_one
%rdx/%rdx: %rdx_shll_r32_one

%xmm0: %ymm0_shll_r32_one[127:0]
%xmm1: %ymm1_shll_r32_one[127:0]

-------------------------------------
=====================================
Computing circuit for shll $0x1, %ebx

.target:
xorq %rax, %rax
clc 
adcb %al, %bl
rcll $0x1, %ebx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_sall_r32_one

%cf: %cf_sall_r32_one
%pf: %pf_sall_r32_one
%zf: %zf_sall_r32_one
%sf: %sf_sall_r32_one
%of: %of_sall_r32_one

State for specgen instruction: shll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[32:32] = 0x1₁
%pf: !((0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (%rbx_shll_r32_one[31:31] = 0x1₁ ↔ %rbx_shll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_shll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:31] = 0x1₁
%of: (%rbx_sall_r32_one[31:31] = 0x1₁ ↔ %rbx_sall_r32_one[31:31] = 0x1₁) ∧ !(%rbx_sall_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for sall $0x1, %eax

.target:
shll $0x1, %ebx
retq 

Initial state:
%rax/%rax: %rax_shlw_r16_one ⊕ %rax_shlw_r16_one

%cf: false
%pf: !((%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one) = 0x0₆₄
%sf: (%rax_shlw_r16_one ⊕ %rax_shlw_r16_one)[63:63] = 0x1₁
%of: false

State for specgen instruction: sall $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:31] = 0x1₁
%of: (%rbx_sall_r32_one[31:31] = 0x1₁ ↔ %rbx_sall_r32_one[31:31] = 0x1₁) ∧ !(%rbx_sall_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rax
Value is               -> 0x0₃₂ ∘ (0x0₁ ∘ %rbx_sall_r32_one[31:0] + 0x0₁ ∘ %rbx_sall_r32_one[31:0])[31:0]
  after renaming it is => 0x0₆₄

Final state
%rax/%rax: 0x0₆₄

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rsi, %rsi

Final state:
%rsi/%rsi: %rsi_cltq ⊕ %rsi_cltq

%cf: false
%pf: !((%rsi_cltq ⊕ %rsi_cltq)[7:0][0:0] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][1:1] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][2:2] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][3:3] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][4:4] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][5:5] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][6:6] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][7:7] = 0x1₁)
%zf: (%rsi_cltq ⊕ %rsi_cltq) = 0x0₆₄
%sf: (%rsi_cltq ⊕ %rsi_cltq)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %esi, %r9

Final state:
%r9/%r9: sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %r9d, %eax

Final state:
%rax/%rax: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0][3:0] + 0x0₁ ∘ %rax_cltq[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0][31:31] = 0x1₁ ↔ %rax_cltq[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:31] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %eax, %rax

Final state:
%rax/%rax: sign-extend-64((0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0])[31:0])

-------------------------------------
=====================================
Computing circuit for cltq 

.target:
xorq %rsi, %rsi
movslq %esi, %r9
adcl %r9d, %eax
movslq %eax, %rax
retq 

Initial state:
%rax/%rax: 0x0₆₄

State for specgen instruction: cltq :
%rax/%rax: sign-extend-64((0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0])[31:0])

Register        -> %rax
  translates to => %rax
Value is               -> sign-extend-64((0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0])[31:0])
  after renaming it is => 0x0₆₄

Final state
%rax/%rax: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for xorq %rsi, %rsi

Final state:
%rsi/%rsi: %rsi_cltq ⊕ %rsi_cltq

%cf: false
%pf: !((%rsi_cltq ⊕ %rsi_cltq)[7:0][0:0] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][1:1] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][2:2] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][3:3] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][4:4] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][5:5] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][6:6] = 0x1₁ ⊕ (%rsi_cltq ⊕ %rsi_cltq)[7:0][7:7] = 0x1₁)
%zf: (%rsi_cltq ⊕ %rsi_cltq) = 0x0₆₄
%sf: (%rsi_cltq ⊕ %rsi_cltq)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %esi, %r9

Final state:
%r9/%r9: sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %r9d, %eax

Final state:
%rax/%rax: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0][3:0] + 0x0₁ ∘ %rax_cltq[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0][31:31] = 0x1₁ ↔ %rax_cltq[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:31] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %eax, %rax

Final state:
%rax/%rax: sign-extend-64((0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0])[31:0])

-------------------------------------
=====================================
Computing circuit for cltq 

.target:
xorq %rsi, %rsi
movslq %esi, %r9
adcl %r9d, %eax
movslq %eax, %rax
retq 

Initial state:
%rax/%rax: 0x0₆₄

State for specgen instruction: cltq :
%rax/%rax: sign-extend-64((0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0])[31:0])

Register        -> %rax
  translates to => %rax
Value is               -> sign-extend-64((0x0₃₂ ∘ ((false ? 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64((%rsi_cltq ⊕ %rsi_cltq)[31:0])[31:0]) + 0x0₁ ∘ %rax_cltq[31:0])[31:0])[31:0])
  after renaming it is => 0x0₆₄

Final state
%rax/%rax: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for adcw %ax, %bx

Final state:
%rbx/%bx: %rbx_shlw_r16_one[63:16] ∘ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0x0₆₄[15:0][3:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][15:15] = 0x1₁
%of: (0x0₆₄[15:0][15:15] = 0x1₁ ↔ %rbx_shlw_r16_one[15:0][15:15] = 0x1₁) ∧ !(0x0₆₄[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %bx

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_shlw_r16_one[63:16] ∘ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0x0₆₄[15:0][3:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0][15:15] = 0x1₁
%of: (0x0₆₄[15:0][15:15] = 0x1₁ ↔ %rbx_shlw_r16_one[15:0][15:15] = 0x1₁) ∧ !(0x0₆₄[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:15] = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0]

Final state
%rbx/%bx: (%rbx_shlw_r16_one[63:16] ∘ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlw_r16_one[3:0] + 0x0₁ ∘ %rbx_shlw_r16_one[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:15] = 0x1₁
%of: (%rbx_shlw_r16_one[15:15] = 0x1₁ ↔ %rbx_shlw_r16_one[15:15] = 0x1₁) ∧ !(%rbx_shlw_r16_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for shlw $0x1, %bx

.target:
xorq %rax, %rax
sall $0x1, %eax
cltq 
cltq 
adcw %ax, %bx
addw %bx, %bx
retq 

Initial state:
%rbx/%bx: %rbx_salw_r16_one

%cf: %cf_salw_r16_one
%pf: %pf_salw_r16_one
%zf: %zf_salw_r16_one
%sf: %sf_salw_r16_one
%of: %of_salw_r16_one

State for specgen instruction: shlw $0x1, %bx:
%rbx/%bx: (%rbx_shlw_r16_one[63:16] ∘ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:15] = 0x1₁
%of: (%rbx_shlw_r16_one[15:15] = 0x1₁ ↔ %rbx_shlw_r16_one[15:15] = 0x1₁) ∧ !(%rbx_shlw_r16_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> ((%rbx_shlw_r16_one[63:16] ∘ ((false ? 0x0₁ ∘ 0x0₆₄[15:0] + 0x1₁₇ : 0x0₁ ∘ 0x0₆₄[15:0]) + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_shlw_r16_one[15:0] + 0x0₁ ∘ %rbx_shlw_r16_one[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:0]

Final state
%rbx/%bx: %rbx_salw_r16_one[63:16] ∘ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:15] = 0x1₁
%of: (%rbx_salw_r16_one[15:15] = 0x1₁ ↔ %rbx_salw_r16_one[15:15] = 0x1₁) ∧ !(%rbx_salw_r16_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for salw $0x1, %bx

.target:
shlw $0x1, %bx
retq 

Initial state:
%rbx/%bx: %rbx

%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: salw $0x1, %bx:
%rbx/%bx: %rbx_salw_r16_one[63:16] ∘ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:15] = 0x1₁
%of: (%rbx_salw_r16_one[15:15] = 0x1₁ ↔ %rbx_salw_r16_one[15:15] = 0x1₁) ∧ !(%rbx_salw_r16_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_salw_r16_one[63:16] ∘ (0x0₁ ∘ %rbx_salw_r16_one[15:0] + 0x0₁ ∘ %rbx_salw_r16_one[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁
%of: (%rbx[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0]

%cf    : (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0] = 0x0₁₆
%sf    : (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁
%of    : (%rbx[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/