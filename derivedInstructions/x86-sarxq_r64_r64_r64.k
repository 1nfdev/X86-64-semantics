// Autogenerated using stratification.
requires "x86-configuration.k"

module SARXQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarxq R1:R64, R2:R64, R3:R64,  .Typedoperands) => .
  ...</k>
    <regstate> ...
convToRegKeys(R2) |-> (MI447 => MI447)

convToRegKeys(R1) |-> (MI448 => MI448)

convToRegKeys(R3) |-> ( _ => (#ifMInt (ultMInt(andMInt(extractMInt(orMInt(andMInt(MI447, mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(MI448, 0, 32))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(MI448, 32, 64))), 56, 64))))), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(MI447, 0, 32))), 32, 64), extractMInt(mi(64, uvalueMInt(extractMInt(MI447, 32, 64))), 32, 64)))), uvalueMInt(andMInt(extractMInt(orMInt(andMInt(MI447, mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(MI448, 0, 32))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(MI448, 32, 64))), 56, 64))))), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(MI447, 0, 32))), 32, 64), extractMInt(mi(64, uvalueMInt(extractMInt(MI447, 32, 64))), 32, 64)), mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi)  )


    ...</regstate>
endmodule

module SARXQ-R64-R64-R64-SEMANTICS
  imports SARXQ-R64-R64-R64
endmodule
