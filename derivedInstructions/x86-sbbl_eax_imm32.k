// Autogenerated using stratification.
requires "x86-configuration.k"

module SBBL-EAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sbbl I1_32:Imm, %eax:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), (#ifMInt ( (  ( ultMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )))  orBool  ultMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), extractMInt(getParentValue(%eax, RSMap), 32, 64)) )  orBool  ( ultMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)))  orBool  ultMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), (#ifMInt ( (  ( ultMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )))  orBool  ultMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), extractMInt(getParentValue(%eax, RSMap), 32, 64)) )  orBool  ( ultMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)))  orBool  ultMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), (#ifMInt ( (  ( ultMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )))  orBool  ultMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), extractMInt(getParentValue(%eax, RSMap), 32, 64)) )  orBool  ( ultMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)))  orBool  ultMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(32, 1), lshrMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), 31)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), 24, 32), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(32, 2), addMInt(xorMInt(lshrMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), 31), lshrMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), 31)), xorMInt(lshrMInt(extractMInt(getParentValue(%eax, RSMap), 32, 64), 31), lshrMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), 31)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(%eax) |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I1_32, 32, 32 )), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(31, 0), (#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), getFlag("CF", RSMap)), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
