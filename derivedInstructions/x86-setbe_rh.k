// Autogenerated using stratification.
requires "x86-configuration.k"

module SETBE-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setbe R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("ZF", RSMap)), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETBE-RH-SEMANTICS
  imports SETBE-RH
endmodule
/*
TargetInstr:
setbe %ah
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:setbe %dl       #  1     0    3      OPC=setbe_r8
circuit:xorw %ax, %ax   #  2     0x3  3      OPC=xorw_r16_r16
circuit:xaddb %ah, %dl  #  3     0x6  3      OPC=xaddb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setbe %ah

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_zf_into_rcx

Final state:
%rax/%rax: %rax_setbe_r8
%rdx/%rdx: %rdx_setbe_r8

%xmm0: %ymm0_setbe_r8[127:0]
%xmm1: %ymm1_setbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setbe_r8
%rdx/%rdx: %rdx_setbe_r8

%xmm0: %ymm0_setbe_r8[127:0]
%xmm1: %ymm1_setbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: %zf_setbe_r8 ? 0x0₆₃ ∘ (%zf_setbe_r8 ? 0x1₁ : 0x0₁) : 0x0₆₃ ∘ (%cf_setbe_r8 ? 0x1₁ : 0x0₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_setbe_r8
%rdx/%rdx: %rdx_setbe_r8

%xmm0: %ymm0_setbe_r8[127:0]
%xmm1: %ymm1_setbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_7_of_rbx

Final state:
%rax/%rax: %rax_setbe_r8
%rdx/%rdx: %rdx_setbe_r8

%xmm0: %ymm0_setbe_r8[127:0]
%xmm1: %ymm1_setbe_r8[127:0]

-------------------------------------
=====================================
Computing circuit for setbe %dl

.target:
callq .read_zf_into_rcx
callq .read_cf_into_rbx
cmoveq %rcx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_r8b_to_byte_7_of_rbx
retq 

Initial state:
%rdx/%dl: %rdx_setbe_rh

State for specgen instruction: setbe %bl:
%rbx/%bl: (%r8_setbe_r8[63:16] ∘ (0x0₆₃ ∘ (%zf_setbe_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (%zf_setbe_r8 ? 0x0₆₃ ∘ (%zf_setbe_r8 ? 0x1₁ : 0x0₁) : 0x0₆₃ ∘ (%cf_setbe_r8 ? 0x1₁ : 0x0₁))[55:0]

Register        -> %bl
  translates to => %dl
Value is               -> ((%r8_setbe_r8[63:16] ∘ (0x0₆₃ ∘ (%zf_setbe_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (%zf_setbe_r8 ? 0x0₆₃ ∘ (%zf_setbe_r8 ? 0x1₁ : 0x0₁) : 0x0₆₃ ∘ (%cf_setbe_r8 ? 0x1₁ : 0x0₁))[55:0])[7:0]
  after renaming it is => %zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈

Final state
%rdx/%dl: %rdx_setbe_rh[63:8] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])

%cf: false
%pf: !((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %r12w, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xorw %ax, %ax

.target:
callq .move_016_008_cx_r8b_r9b
movswq %bx, %r12
callq .move_008_016_r8b_r9b_bx
callq .set_szp_for_bx
callq .read_sf_into_rbx
callq .move_008_016_r8b_r9b_bx
xorq %rbx, %r12
movswq %r12w, %rbx
callq .set_szp_for_bx
retq 

Initial state:
%rax/%ax: %rax_setbe_rh

%cf: %cf_setbe_rh
%pf: %pf_setbe_rh
%zf: %zf_setbe_rh
%sf: %sf_setbe_rh
%of: %of_setbe_rh

State for specgen instruction: xorw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0] = 0x0₁₆
%sf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][15:15] = 0x1₁
%of: false

Register        -> %bx
  translates to => %ax
Value is               -> sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: %rax_setbe_rh[63:16] ∘ 0x0₁₆

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh

%cf: false
%pf: !((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][0:0] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][1:1] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][2:2] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][3:3] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][4:4] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][5:5] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][6:6] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][7:7] = 0x1₁)
%zf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh) = 0x0₆₄
%sf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_movzbw_r16_rh
%rdx/%rdx: %rdx_movzbw_r16_rh

%xmm0: %ymm0_movzbw_r16_rh[127:0]
%xmm1: %ymm1_movzbw_r16_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbw %ah, %si

.target:
xorq %rcx, %rcx
callq .read_sf_into_rbx
movb %ah, %bl
retq 

Initial state:
%rsi/%si: %rsi_xaddb_r8_rh

State for specgen instruction: movzbw %ah, %bx:
%rbx/%bx: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

Register        -> %bx
  translates to => %si
Value is               -> ((0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8])[15:0]
  after renaming it is => 0x0₈ ∘ %rax_xaddb_r8_rh[15:8]

Final state
%rsi/%si: %rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8])

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r12

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r12/%r12: %r12_xaddb_r8_rh

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

Final state
%r12/%r12: 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rdx

Final state:
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_xaddb_r8_rh
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %r12b, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_xaddb_r8_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rdx, %r9

Final state:
%r9/%r9: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0]) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %sil, %bl

Final state:
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddb %ah, %dl

.target:
movzbw %ah, %si
movzbq %bl, %r12
movslq %r12d, %rdx
callq .move_016_008_dx_r8b_r9b
movsbl %r12b, %ebx
movb %dl, %ah
callq .move_r9b_to_byte_6_of_rbx
popcntq %rdx, %r9
adcb %sil, %bl
retq 

Initial state:
%rax/%ah: %rax_setbe_rh[63:16] ∘ 0x0₁₆
%rdx/%dl: %rdx_setbe_rh[63:8] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈)

%cf: false
%pf: true
%af: %af_setbe_rh
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %ah, %bl:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: (%rax_setbe_rh[63:16] ∘ 0x0₁₆)[63:16] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈) ∘ (%rax_setbe_rh[63:16] ∘ 0x0₁₆)[7:0]
%rdx/%dl: (%rdx_setbe_rh[63:8] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈))[63:8] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈)

%cf: false
%pf: !((%zf_setbe_rh ? %zf_setbe_rh ? 0x1₁ : 0x0₁ : %cf_setbe_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: false
%zf: (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈) = 0x0₈
%sf: false
%of: false

=====================================
=====================================
Computing circuit for setbe %ah

.target:
setbe %dl
xorw %ax, %ax
xaddb %ah, %dl
retq 

Initial state:
%rax/%ah: %rax

State for specgen instruction: setbe %ah:
%rax/%ah: (%rax_setbe_rh[63:16] ∘ 0x0₁₆)[63:16] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈) ∘ (%rax_setbe_rh[63:16] ∘ 0x0₁₆)[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_setbe_rh[63:16] ∘ 0x0₁₆)[63:16] ∘ (%zf_setbe_rh ? %zf_setbe_rh ? 0x1₈ : 0x0₈ : %cf_setbe_rh ? 0x1₈ : 0x0₈) ∘ (%rax_setbe_rh[63:16] ∘ 0x0₁₆)[7:0])[15:8]
  after renaming it is => %zf ? %zf ? 0x1₈ : 0x0₈ : %cf ? 0x1₈ : 0x0₈

Final state
%rax/%ah: %rax[63:16] ∘ (%zf ? %zf ? 0x1₈ : 0x0₈ : %cf ? 0x1₈ : 0x0₈) ∘ %rax[7:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ (%zf ? %zf ? 0x1₈ : 0x0₈ : %cf ? 0x1₈ : 0x0₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/