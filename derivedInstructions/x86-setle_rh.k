// Autogenerated using stratification.
requires "x86-configuration.k"

module SETLE-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setle R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 1), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETLE-RH-SEMANTICS
  imports SETLE-RH
endmodule
/*
TargetInstr:
setle %ah
RWSet:
maybe read:{ %zf %sf %of }
must read:{ %zf %sf %of }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_zf_into_rbx  #  1     0     5      OPC=callq_label
circuit:setnge %bh               #  2     0x5   3      OPC=setnge_rh
circuit:callq .set_szp_for_bx    #  3     0x8   5      OPC=callq_label
circuit:setne %ah                #  4     0xd   3      OPC=setne_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setle %ah

  maybe read:      { %zf %sf %of }
  must read:       { %zf %sf %of }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈)) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/