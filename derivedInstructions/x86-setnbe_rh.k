// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNBE-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnbe R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("ZF", RSMap))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 1, 9)), mi(17, 4)), 1, 9), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETNBE-RH-SEMANTICS
  imports SETNBE-RH
endmodule
/*
TargetInstr:
setnbe %ah
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:seta %dl          #  1     0     3      OPC=seta_r8
circuit:movq $0x20, %rax  #  2     0x3   10     OPC=movq_r64_imm64
circuit:xaddb %dl, %ah    #  3     0xd   3      OPC=xaddb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnbe %ah

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_seta_rh
%rdx/%rdx: %rdx_seta_rh

%xmm0: %ymm0_seta_rh[127:0]
%xmm1: %ymm1_seta_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnc_rh
%rdx/%rdx: %rdx_setnc_rh

%xmm0: %ymm0_setnc_rh[127:0]
%xmm1: %ymm1_setnc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r9

Final state:
%r9/%r9: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_decb_r8 ⊕ %rcx_decb_r8

%cf: false
%pf: !((%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rcx_decb_r8 ⊕ %rcx_decb_r8) = 0x0₆₄
%sf: (%rcx_decb_r8 ⊕ %rcx_decb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %r9b, %bl

Final state:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for decb %bl

.target:
movq $0xffffffffffffffff, %r9
xorq %rcx, %rcx
adcb %r9b, %bl
retq 

Initial state:
%rbx/%bl: 0x0₆₃ ∘ (%cf_setnc_rh ? 0x1₁ : 0x0₁)

%pf: %pf_setnc_rh
%af: %af_setnc_rh
%zf: %zf_setnc_rh
%sf: %sf_setnc_rh
%of: %of_setnc_rh

State for specgen instruction: decb %bl:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0])[7:0]
  after renaming it is => %cf_setnc_rh ? 0x0₈ : 0xff₈

Final state
%rbx/%bl: (0x0₆₃ ∘ (%cf_setnc_rh ? 0x1₁ : 0x0₁))[63:8] ∘ (%cf_setnc_rh ? 0x0₈ : 0xff₈)

%pf: !((%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_setnc_rh ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_setnc_rh ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x4, %rax

Final state:
%rax/%rax: 0x4₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %ax

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rax/%ax: 0x4₆₄

%cf: %cf_setnc_rh
%pf: !((%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_setnc_rh ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_setnc_rh ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %ax
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => %cf_setnc_rh ? 0x4₁₆ : 0x103₁₆

Final state
%rax/%ax: 0x4₆₄[63:16] ∘ (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆)

%cf: false
%pf: !((%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁
%zf: (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆) = 0x0₁₆
%sf: false
%of: false

=====================================
=====================================
Computing circuit for setnc %ah

.target:
callq .read_cf_into_rbx
decb %bl
movq $0x4, %rax
addw %bx, %ax
retq 

Initial state:
%rax/%ah: %rax_seta_rh

State for specgen instruction: setnc %ah:
%rax/%ah: 0x4₆₄[63:16] ∘ (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆)

Register        -> %ah
  translates to => %ah
Value is               -> (0x4₆₄[63:16] ∘ (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆))[15:8]
  after renaming it is => %cf_seta_rh ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r9

Final state:
%r9/%r9: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_decb_r8 ⊕ %rcx_decb_r8

%cf: false
%pf: !((%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rcx_decb_r8 ⊕ %rcx_decb_r8) = 0x0₆₄
%sf: (%rcx_decb_r8 ⊕ %rcx_decb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %r9b, %bl

Final state:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for decb %bl

.target:
movq $0xffffffffffffffff, %r9
xorq %rcx, %rcx
adcb %r9b, %bl
retq 

Initial state:
%rbx/%bl: 0x0₆₃ ∘ (%zf_seta_rh ? 0x1₁ : 0x0₁)

%pf: %pf_seta_rh
%af: %af_seta_rh
%zf: %zf_seta_rh
%sf: %sf_seta_rh
%of: %of_seta_rh

State for specgen instruction: decb %bl:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0])[7:0]
  after renaming it is => %zf_seta_rh ? 0x0₈ : 0xff₈

Final state
%rbx/%bl: (0x0₆₃ ∘ (%zf_seta_rh ? 0x1₁ : 0x0₁))[63:8] ∘ (%zf_seta_rh ? 0x0₈ : 0xff₈)

%pf: !((%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%zf_seta_rh ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: %zf_cmovzq_r64_r64 ? %rcx_cmovzq_r64_r64 : %rbx_cmovzq_r64_r64

-------------------------------------
=====================================
Computing circuit for cmovzq %rbx, %rax

.target:
cmoveq %rcx, %rbx
retq 

Initial state:
%rax/%rax: %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

State for specgen instruction: cmovzq %rcx, %rbx:
%rbx/%rbx: %zf_cmovzq_r64_r64 ? %rcx_cmovzq_r64_r64 : %rbx_cmovzq_r64_r64

Register        -> %rbx
  translates to => %rax
Value is               -> %zf_cmovzq_r64_r64 ? %rcx_cmovzq_r64_r64 : %rbx_cmovzq_r64_r64
  after renaming it is => (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

Final state
%rax/%rax: (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

=====================================
=====================================
Computing circuit for seta %bh

.target:
callq .read_zf_into_rbx
setnc %ah
decb %bl
cmovzq %rbx, %rax
retq 

Initial state:
%rbx/%bh: %rbx_seta_r8

State for specgen instruction: seta %ah:
%rax/%ah: (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> ((%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0])[15:8]
  after renaming it is => (%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈

Final state
%rbx/%bh: %rbx_seta_r8[63:16] ∘ ((%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈) ∘ %rbx_seta_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for movb %ah, %cl

Final state:
%rcx/%cl: %rcx_movsbl_r32_rh[63:8] ∘ %rax_movsbl_r32_rh[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %ebp

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbp/%rbp: %rbp_movsbl_r32_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbp
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

Final state
%rbp/%rbp: 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

=====================================
-------------------------------------
Getting base circuit for movq %rbp, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bh, %ebx

.target:
movb %ah, %cl
movsbl %cl, %ebp
movq %rbp, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_seta_r8[63:16] ∘ ((%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈) ∘ %rbx_seta_r8[7:0]

State for specgen instruction: movsbl %ah, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64((%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈)[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64((%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈)[31:0]

=====================================
=====================================
Computing circuit for seta %dl

.target:
seta %bh
movsbl %bh, %ebx
retq 

Initial state:
%rdx/%dl: %rdx_setnbe_rh

State for specgen instruction: seta %bl:
%rbx/%bl: 0x0₃₂ ∘ sign-extend-64((%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈)[31:0]

Register        -> %bl
  translates to => %dl
Value is               -> (0x0₃₂ ∘ sign-extend-64((%zf_seta_r8 ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_seta_r8 ? 0x0₈ : 0x1₈)[31:0])[7:0]
  after renaming it is => (%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈

Final state
%rdx/%dl: %rdx_setnbe_rh[63:8] ∘ ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈)

=====================================
-------------------------------------
Getting base circuit for movq $0x20, %rax

Final state:
%rax/%rax: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xaddb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]
%rbx/%bl: %rbx_xaddb_rh_r8

%cf: %cf_xaddb_rh_r8
%pf: %pf_xaddb_rh_r8
%af: %af_xaddb_rh_r8
%zf: %zf_xaddb_rh_r8
%sf: %sf_xaddb_rh_r8
%of: %of_xaddb_rh_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for xaddb %dl, %ah

.target:
movzbl %ah, %edx
xaddb %bl, %dl
movb %dl, %ah
retq 

Initial state:
%rax/%ah: 0x20₆₄
%rdx/%dl: %rdx_setnbe_rh[63:8] ∘ ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈)

%cf: %cf_setnbe_rh
%pf: %pf_setnbe_rh
%af: %af_setnbe_rh
%zf: %zf_setnbe_rh
%sf: %sf_setnbe_rh
%of: %of_setnbe_rh

State for specgen instruction: xaddb %bl, %ah:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: 0x20₆₄[63:16] ∘ ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈) ∘ 0x20₆₄[7:0]
%rdx/%dl: (%rdx_setnbe_rh[63:8] ∘ ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈))[63:8] ∘ 0x0₈

%cf: false
%pf: !(((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₁ : %cf_setnbe_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: false
%zf: ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈) = 0x0₈
%sf: false
%of: false

=====================================
=====================================
Computing circuit for setnbe %ah

.target:
seta %dl
movq $0x20, %rax
xaddb %dl, %ah
retq 

Initial state:
%rax/%ah: %rax

State for specgen instruction: setnbe %ah:
%rax/%ah: 0x20₆₄[63:16] ∘ ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈) ∘ 0x20₆₄[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (0x20₆₄[63:16] ∘ ((%zf_setnbe_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf_setnbe_rh ? 0x0₈ : 0x1₈) ∘ 0x20₆₄[7:0])[15:8]
  after renaming it is => (%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax[63:16] ∘ ((%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ ((%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/