// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNO-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setno R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), getFlag("OF", RSMap)), mi(32, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETNO-RH-SEMANTICS
  imports SETNO-RH
endmodule
/*
TargetInstr:
setno %ah
RWSet:
maybe read:{ %of }
must read:{ %of }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_of_into_rbx  #  1     0     5      OPC=callq_label
circuit:callq .set_szp_for_ebx   #  2     0x5   5      OPC=callq_label
circuit:callq .read_zf_into_rcx  #  3     0xa   5      OPC=callq_label
circuit:movb %cl, %ah            #  4     0xf   2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setno %ah

  maybe read:      { %of }
  must read:       { %of }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_setno_rh
%rdx/%rdx: %rdx_setno_rh

%xmm0: %ymm0_setno_rh[127:0]
%xmm1: %ymm1_setno_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_setno_rh
%rdx/%rdx: %rdx_setno_rh

%xmm0: %ymm0_setno_rh[127:0]
%xmm1: %ymm1_setno_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_zf_into_rcx

Final state:
%rax/%rax: %rax_setno_rh
%rdx/%rdx: %rdx_setno_rh

%xmm0: %ymm0_setno_rh[127:0]
%xmm1: %ymm1_setno_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setno_rh[63:16] ∘ (0x0₆₃ ∘ ((0x0₆₃ ∘ (%of_setno_rh ? 0x1₁ : 0x0₁))[31:0] = 0x0₃₂ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setno_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setno %ah

.target:
callq .read_of_into_rbx
callq .set_szp_for_ebx
callq .read_zf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rax/%ah: %rax

State for specgen instruction: setno %ah:
%rax/%ah: %rax_setno_rh[63:16] ∘ (0x0₆₃ ∘ ((0x0₆₃ ∘ (%of_setno_rh ? 0x1₁ : 0x0₁))[31:0] = 0x0₃₂ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setno_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setno_rh[63:16] ∘ (0x0₆₃ ∘ ((0x0₆₃ ∘ (%of_setno_rh ? 0x1₁ : 0x0₁))[31:0] = 0x0₃₂ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setno_rh[7:0])[15:8]
  after renaming it is => (%of ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₈ : 0x0₈

Final state
%rax/%ah: %rax[63:16] ∘ ((%of ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₈ : 0x0₈) ∘ %rax[7:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ ((%of ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₈ : 0x0₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/