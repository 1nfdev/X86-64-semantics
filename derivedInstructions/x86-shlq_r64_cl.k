// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLQ-R64-CL
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlq %cl, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "RCX" |-> (MI692 => MI692)

 "SF" |-> ( MI672 => (#ifMInt (eqMInt(mi(64, 1), lshrMInt((#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI672, mi(1, 1)) ) #then ( mi(64, -9223372036854775808) ) #else ( mi(64, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI691, uvalueMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  ) #fi) , 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ( MI673 => (#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI673 ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( xorMInt((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(MI691, mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(shlMInt(MI691, 1), mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) ) #else ( undef ) #fi)  ) #fi)  )

 "CF" |-> ( MI668 => (#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI668 ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(MI691, mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(shlMInt(MI691,  ( uvalueMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)))  -Int  1 ) ), mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( undef ) #fi)  ) #fi)  ) #fi)  )

 "AF" |-> ( MI670 => (#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI670 ) #else ( undef ) #fi)  )

convToRegKeys(R2) |-> ( MI691 => (#ifMInt (ultMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI691, uvalueMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )

 "ZF" |-> ( MI671 => (#ifMInt (eqMInt((#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI671, mi(1, 1)) ) #then ( mi(64, 0) ) #else ( mi(64, 1) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI691, uvalueMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  ) #fi) , mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ( MI669 => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt((#ifMInt (eqMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI669, mi(1, 1)) ) #then ( mi(64, 0) ) #else ( mi(64, 1) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI691, uvalueMInt(andMInt(extractMInt(MI692, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  ) #fi) , 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )


    ...</regstate>
endmodule

module SHLQ-R64-CL-SEMANTICS
  imports SHLQ-R64-CL
endmodule
