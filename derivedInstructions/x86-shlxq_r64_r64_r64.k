// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLXQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlxq R1:R64, R2:R64, R3:R64,  .Typedoperands) => .
  ...</k>
    <regstate> 
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> ((#ifMInt (ultMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(getParentValue(R2, RSMap), uvalueMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )

  
)   

    </regstate>
endmodule

module SHLXQ-R64-R64-R64-SEMANTICS
  imports SHLXQ-R64-R64-R64
endmodule
/*
shlxq %rdx, %rcx, %rbx
maybe read:{ %rcx %rdx }
must read:{ %rcx %rdx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ bmi2 }

circuit:callq .move_064_032_rcx_r10d_r11d  #  1     0     5      OPC=callq_label
circuit:callq .move_064_032_rdx_r8d_r9d    #  2     0x5   5      OPC=callq_label
circuit:callq .move_032_064_r10d_r11d_rbx  #  3     0xa   5      OPC=callq_label
circuit:callq .move_032_064_r8d_r9d_rcx    #  4     0xf   5      OPC=callq_label
circuit:salq %cl, %rbx                     #  5     0x14  3      OPC=salq_r64_cl

WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shlxq %rdx, %rcx, %rbx

  maybe read:      { %rcx %rdx }
  must read:       { %rcx %rdx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { bmi2 }

-------------------------------------
Getting base circuit for callq .move_064_032_rcx_r10d_r11d

Final state:
%rax/%rax: %rax_shlxq_r64_r64_r64
%rdx/%rdx: %rdx_shlxq_r64_r64_r64

%xmm0: %ymm0_shlxq_r64_r64_r64[127:0]
%xmm1: %ymm1_shlxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rdx_r8d_r9d

Final state:
%rax/%rax: %rax_shlxq_r64_r64_r64
%rdx/%rdx: %rdx_shlxq_r64_r64_r64

%xmm0: %ymm0_shlxq_r64_r64_r64[127:0]
%xmm1: %ymm1_shlxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_shlxq_r64_r64_r64
%rdx/%rdx: %rdx_shlxq_r64_r64_r64

%xmm0: %ymm0_shlxq_r64_r64_r64[127:0]
%xmm1: %ymm1_shlxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rcx

Final state:
%rax/%rax: %rax_shlxq_r64_r64_r64
%rdx/%rdx: %rdx_shlxq_r64_r64_r64

%xmm0: %ymm0_shlxq_r64_r64_r64[127:0]
%xmm1: %ymm1_shlxq_r64_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for salq %cl, %rbx

Final state:
%rbx/%rbx: (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0]

%cf: (0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] ≥ 0x40₈ ∧ TMP_BOOL_0 ∨ !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] ≥ 0x40₈) ∧ (!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[64:64] = 0x1₁ ∨ !(!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %cf_shlxq_r64_r64_r64)
%pf: !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][0:0] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][1:1] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][2:2] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][3:3] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][4:4] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][5:5] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][6:6] = 0x1₁ ⊕ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_shlxq_r64_r64_r64
%zf: !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %zf_shlxq_r64_r64_r64
%sf: !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %sf_shlxq_r64_r64_r64
%of: (0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] ≥ 0x40₈ ∧ TMP_BOOL_0 ∨ !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] ≥ 0x40₈) ∧ (!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[64:64] = 0x1₁ ∨ !(!((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %cf_shlxq_r64_r64_r64) ↔ (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0][63:63] = 0x1₁) ∨ !((0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ %of_shlxq_r64_r64_r64

-------------------------------------
=====================================
Computing circuit for shlxq %rdx, %rcx, %rbx

.target:
callq .move_064_032_rcx_r10d_r11d
callq .move_064_032_rdx_r8d_r9d
callq .move_032_064_r10d_r11d_rbx
callq .move_032_064_r8d_r9d_rcx
salq %cl, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: shlxq %rdx, %rcx, %rbx:
%rbx/%rbx: (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₁ ∘ ((0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rcx_shlxq_r64_r64_r64[31:0])[31:0][31:0]) << 0x0₅₇ ∘ (((0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %rdx_shlxq_r64_r64_r64[31:0])[31:0][31:0])[7:0][7:0] & 0x3f₈))[63:0]
  after renaming it is => (0x0₁ ∘ %rcx << 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ %rcx << 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[63:0]

=====================================
Circuits:

%rbx   : (0x0₁ ∘ %rcx << 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[63:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/