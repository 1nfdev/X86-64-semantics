// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLXQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlxq R1:R64, R2:R64, R3:R64,  .Typedoperands) => .
  ...</k>
    <regstate> ...
convToRegKeys(R2) |-> (MI673 => MI673)

convToRegKeys(R1) |-> (MI674 => MI674)

convToRegKeys(R3) |-> ( _ => (#ifMInt (ultMInt(andMInt(extractMInt(concatenateMInt(extractMInt(orMInt(andMInt(MI642, mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(extractMInt(MI674, 0, 32))), 0)), 32, 64), extractMInt(orMInt(andMInt(MI679, mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(extractMInt(MI674, 32, 64))), 0)), 32, 64)), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(concatenateMInt(extractMInt(orMInt(andMInt(MI644, mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(extractMInt(MI673, 0, 32))), 0)), 32, 64), extractMInt(orMInt(andMInt(MI643, mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(extractMInt(MI673, 32, 64))), 0)), 32, 64)), uvalueMInt(andMInt(extractMInt(concatenateMInt(extractMInt(orMInt(andMInt(MI642, mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(extractMInt(MI674, 0, 32))), 0)), 32, 64), extractMInt(orMInt(andMInt(MI679, mi(64, -4294967296)), shlMInt(mi(64, uvalueMInt(extractMInt(MI674, 32, 64))), 0)), 32, 64)), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )

 "R8" |-> (MI679 => MI679)

 "R9" |-> (MI642 => MI642)

 "R10" |-> (MI643 => MI643)

 "R11" |-> (MI644 => MI644)


    ...</regstate>
endmodule

module SHLXQ-R64-R64-R64-SEMANTICS
  imports SHLXQ-R64-R64-R64
endmodule
