// Autogenerated using stratification.
requires "x86-configuration.k"

module SUBB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (subb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56))), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SUBB-R8-RH-SEMANTICS
  imports SUBB-R8-RH
endmodule
/*
TargetInstr:
subb %ah, %bl
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %bl %cf %pf %af %zf %sf %of }
must write:{ %bl %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorb %al, %al  #  1     0    2      OPC=xorb_r8_r8
circuit:adcb %bl, %al  #  2     0x2  2      OPC=adcb_r8_r8
circuit:sbbb %ah, %bl  #  3     0x4  2      OPC=sbbb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

subb %ah, %bl

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[7:0]

%cf    : (((0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[8:8] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[8:8] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rbx[3:0] + 0x0₁ ∘ (%rax[11:8] ⊕ 0xf₄))[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[7:7] = 0x1₁
%of    : (%rbx[7:7] = 0x1₁ ↔ (%rax[15:15] ⊕ 0x1₁) = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx[7:0] + 0x1₉ + 0x0₁ ∘ (%rax[15:8] ⊕ 0xff₈))[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/