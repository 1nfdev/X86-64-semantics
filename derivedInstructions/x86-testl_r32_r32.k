// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), xorMInt(extractMInt(getParentValue(R1, RSMap), 32, 33), orMInt(extractMInt(getParentValue(R1, RSMap), 32, 33), extractMInt(getParentValue(R2, RSMap), 32, 33)))) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), xorMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), orMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module TESTL-R32-R32-SEMANTICS
  imports TESTL-R32-R32
endmodule
/*
TargetInstr:
testl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %cf %pf %zf %sf %of }
must write:{ %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:andnl %ebx, %ecx, %r8d  #  1     0    5      OPC=andnl_r32_r32_r32
circuit:xorl %r8d, %ebx         #  2     0x5  3      OPC=xorl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

testl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %r8d

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%r8/%r8: %r8_orl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %r11

Final state:
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r11d, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_orl_r32_r32
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

%cf: %cf_orl_r32_r32
%pf: %pf_orl_r32_r32
%af: %af_orl_r32_r32
%zf: %zf_orl_r32_r32
%sf: %sf_orl_r32_r32
%of: %of_orl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0]
%r11/%r11: 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_orl_r32_r32[3:0] + 0x0₁ ∘ %rcx_orl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁
%of: (%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:31] = 0x1₁) ∧ !(%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for orq %r11, %r8

Final state:
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r8d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_orl_r32_r32
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_orl_r32_r32
%rdx/%rdx: %rdx_orl_r32_r32

%xmm0: %ymm0_orl_r32_r32[127:0]
%xmm1: %ymm1_orl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for orl %ecx, %edx

.target:
movl %ebx, %r8d
movswq %cx, %r11
xaddl %r11d, %ecx
orq %r11, %r8
xchgl %ebx, %r8d
callq .set_szp_for_ebx
retq 

Initial state:
%rdx/%rdx: %rdx_andnl_r32_r32_r32

%cf: %cf_andnl_r32_r32_r32
%pf: %pf_andnl_r32_r32_r32
%zf: %zf_andnl_r32_r32_r32
%sf: %sf_andnl_r32_r32_r32
%of: %of_andnl_r32_r32_r32

State for specgen instruction: orl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

%cf: false
%pf: !((0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

Final state
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_ecx

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %edx, %ecx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ ((%r13_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r12_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][15:0])[15:0][15:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

%cf: false
%pf: !(((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) ⊕ %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) ⊕ %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) ⊕ %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) ⊕ %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) ⊕ %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) ⊕ %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) ⊕ %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) ⊕ %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

=====================================
=====================================
Computing circuit for andnl %ebx, %ecx, %r8d

.target:
movslq %edx, %rbx
orl %ecx, %edx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_ecx
xorl %edx, %ecx
xchgl %ebx, %ecx
retq 

Initial state:
%r8/%r8: %r8_testl_r32_r32

%cf: %cf_testl_r32_r32
%zf: %zf_testl_r32_r32
%sf: %sf_testl_r32_r32
%of: %of_testl_r32_r32

State for specgen instruction: andnl %edx, %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0])

Final state
%r8/%r8: 0x0₃₂ ∘ ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0])

%cf: false
%zf: ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rbx_testl_r32_r32[31:31] | %rcx_testl_r32_r32[31:31]) ⊕ %rcx_testl_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %r8d, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_testl_r32_r32

%cf: false
%pf: %pf_testl_r32_r32
%zf: ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rbx_testl_r32_r32[31:31] | %rcx_testl_r32_r32[31:31]) ⊕ %rcx_testl_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rbx_testl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rbx_testl_r32_r32[31:0]

%cf: false
%pf: !(((%rbx_testl_r32_r32[0:0] | %rcx_testl_r32_r32[0:0]) ⊕ %rcx_testl_r32_r32[0:0] ⊕ %rbx_testl_r32_r32[0:0]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[1:1] | %rcx_testl_r32_r32[1:1]) ⊕ %rcx_testl_r32_r32[1:1] ⊕ %rbx_testl_r32_r32[1:1]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[2:2] | %rcx_testl_r32_r32[2:2]) ⊕ %rcx_testl_r32_r32[2:2] ⊕ %rbx_testl_r32_r32[2:2]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[3:3] | %rcx_testl_r32_r32[3:3]) ⊕ %rcx_testl_r32_r32[3:3] ⊕ %rbx_testl_r32_r32[3:3]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[4:4] | %rcx_testl_r32_r32[4:4]) ⊕ %rcx_testl_r32_r32[4:4] ⊕ %rbx_testl_r32_r32[4:4]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[5:5] | %rcx_testl_r32_r32[5:5]) ⊕ %rcx_testl_r32_r32[5:5] ⊕ %rbx_testl_r32_r32[5:5]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[6:6] | %rcx_testl_r32_r32[6:6]) ⊕ %rcx_testl_r32_r32[6:6] ⊕ %rbx_testl_r32_r32[6:6]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[7:7] | %rcx_testl_r32_r32[7:7]) ⊕ %rcx_testl_r32_r32[7:7] ⊕ %rbx_testl_r32_r32[7:7]) = 0x1₁)
%zf: ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0] ⊕ %rbx_testl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rbx_testl_r32_r32[31:31] | %rcx_testl_r32_r32[31:31]) ⊕ %rcx_testl_r32_r32[31:31] ⊕ %rbx_testl_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for testl %ecx, %ebx

.target:
andnl %ebx, %ecx, %r8d
xorl %r8d, %ebx
retq 

Initial state:
%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: testl %ecx, %ebx:
%cf: false
%pf: !(((%rbx_testl_r32_r32[0:0] | %rcx_testl_r32_r32[0:0]) ⊕ %rcx_testl_r32_r32[0:0] ⊕ %rbx_testl_r32_r32[0:0]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[1:1] | %rcx_testl_r32_r32[1:1]) ⊕ %rcx_testl_r32_r32[1:1] ⊕ %rbx_testl_r32_r32[1:1]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[2:2] | %rcx_testl_r32_r32[2:2]) ⊕ %rcx_testl_r32_r32[2:2] ⊕ %rbx_testl_r32_r32[2:2]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[3:3] | %rcx_testl_r32_r32[3:3]) ⊕ %rcx_testl_r32_r32[3:3] ⊕ %rbx_testl_r32_r32[3:3]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[4:4] | %rcx_testl_r32_r32[4:4]) ⊕ %rcx_testl_r32_r32[4:4] ⊕ %rbx_testl_r32_r32[4:4]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[5:5] | %rcx_testl_r32_r32[5:5]) ⊕ %rcx_testl_r32_r32[5:5] ⊕ %rbx_testl_r32_r32[5:5]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[6:6] | %rcx_testl_r32_r32[6:6]) ⊕ %rcx_testl_r32_r32[6:6] ⊕ %rbx_testl_r32_r32[6:6]) = 0x1₁ ⊕ ((%rbx_testl_r32_r32[7:7] | %rcx_testl_r32_r32[7:7]) ⊕ %rcx_testl_r32_r32[7:7] ⊕ %rbx_testl_r32_r32[7:7]) = 0x1₁)
%zf: ((%rbx_testl_r32_r32[31:0] | %rcx_testl_r32_r32[31:0]) ⊕ %rcx_testl_r32_r32[31:0] ⊕ %rbx_testl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rbx_testl_r32_r32[31:31] | %rcx_testl_r32_r32[31:31]) ⊕ %rcx_testl_r32_r32[31:31] ⊕ %rbx_testl_r32_r32[31:31]) = 0x1₁
%of: false

Final state
%cf: false
%pf: !(((%rbx[0:0] | %rcx[0:0]) ⊕ %rcx[0:0] ⊕ %rbx[0:0]) = 0x1₁ ⊕ ((%rbx[1:1] | %rcx[1:1]) ⊕ %rcx[1:1] ⊕ %rbx[1:1]) = 0x1₁ ⊕ ((%rbx[2:2] | %rcx[2:2]) ⊕ %rcx[2:2] ⊕ %rbx[2:2]) = 0x1₁ ⊕ ((%rbx[3:3] | %rcx[3:3]) ⊕ %rcx[3:3] ⊕ %rbx[3:3]) = 0x1₁ ⊕ ((%rbx[4:4] | %rcx[4:4]) ⊕ %rcx[4:4] ⊕ %rbx[4:4]) = 0x1₁ ⊕ ((%rbx[5:5] | %rcx[5:5]) ⊕ %rcx[5:5] ⊕ %rbx[5:5]) = 0x1₁ ⊕ ((%rbx[6:6] | %rcx[6:6]) ⊕ %rcx[6:6] ⊕ %rbx[6:6]) = 0x1₁ ⊕ ((%rbx[7:7] | %rcx[7:7]) ⊕ %rcx[7:7] ⊕ %rbx[7:7]) = 0x1₁)
%zf: ((%rbx[31:0] | %rcx[31:0]) ⊕ %rcx[31:0] ⊕ %rbx[31:0]) = 0x0₃₂
%sf: ((%rbx[31:31] | %rcx[31:31]) ⊕ %rcx[31:31] ⊕ %rbx[31:31]) = 0x1₁
%of: false

=====================================
Circuits:

%cf    : false
%pf    : !(((%rbx[0:0] | %rcx[0:0]) ⊕ %rcx[0:0] ⊕ %rbx[0:0]) = 0x1₁ ⊕ ((%rbx[1:1] | %rcx[1:1]) ⊕ %rcx[1:1] ⊕ %rbx[1:1]) = 0x1₁ ⊕ ((%rbx[2:2] | %rcx[2:2]) ⊕ %rcx[2:2] ⊕ %rbx[2:2]) = 0x1₁ ⊕ ((%rbx[3:3] | %rcx[3:3]) ⊕ %rcx[3:3] ⊕ %rbx[3:3]) = 0x1₁ ⊕ ((%rbx[4:4] | %rcx[4:4]) ⊕ %rcx[4:4] ⊕ %rbx[4:4]) = 0x1₁ ⊕ ((%rbx[5:5] | %rcx[5:5]) ⊕ %rcx[5:5] ⊕ %rbx[5:5]) = 0x1₁ ⊕ ((%rbx[6:6] | %rcx[6:6]) ⊕ %rcx[6:6] ⊕ %rbx[6:6]) = 0x1₁ ⊕ ((%rbx[7:7] | %rcx[7:7]) ⊕ %rcx[7:7] ⊕ %rbx[7:7]) = 0x1₁)
%zf    : ((%rbx[31:0] | %rcx[31:0]) ⊕ %rcx[31:0] ⊕ %rbx[31:0]) = 0x0₃₂
%sf    : ((%rbx[31:31] | %rcx[31:31]) ⊕ %rcx[31:31] ⊕ %rbx[31:31]) = 0x1₁
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/