// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), xorMInt(getParentValue(R1, RSMap), orMInt(getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 0, 1)), mi(16, 65535)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), xorMInt(getParentValue(R1, RSMap), orMInt(getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 0, 1)), mi(16, 65535)), 8, 16))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(getParentValue(R1, RSMap), orMInt(getParentValue(R1, RSMap), getParentValue(R2, RSMap)))), getParentValue(R2, RSMap)), mi(64, 1)), 0, 1) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(getParentValue(R1, RSMap), orMInt(getParentValue(R1, RSMap), getParentValue(R2, RSMap)))), getParentValue(R2, RSMap)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), orMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R2, RSMap), 0, 1)))), extractMInt(getParentValue(R2, RSMap), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), orMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R2, RSMap), 0, 1)))), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(getParentValue(R1, RSMap), orMInt(getParentValue(R1, RSMap), getParentValue(R2, RSMap)))), getParentValue(R2, RSMap)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(getParentValue(R1, RSMap), orMInt(getParentValue(R1, RSMap), getParentValue(R2, RSMap)))), getParentValue(R2, RSMap)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module TESTQ-R64-R64-SEMANTICS
  imports TESTQ-R64-R64
endmodule
/*
TargetInstr:
testq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %cf %pf %zf %sf %of }
must write:{ %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:andnq %rbx, %rcx, %rdi  #  1     0    5      OPC=andnq_r64_r64_r64
circuit:subq %rdi, %rbx         #  2     0x5  3      OPC=subq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

testq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %cf %pf %zf %sf %of }
  must write:      { %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for orq %rcx, %rdx

Final state:
%rdx/%rdx: %rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64

%cf: false
%pf: !((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) = 0x0₆₄
%sf: (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rdx

Final state:
%rdx/%rdx: (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64

%cf: false
%pf: !(((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][0:0] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][1:1] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][2:2] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][3:3] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][4:4] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][5:5] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][6:6] = 0x1₁ ⊕ ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[7:0][7:7] = 0x1₁)
%zf: ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64) = 0x0₆₄
%sf: ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq %rdx, %rbx

Final state:
%rbx/%rbx: (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64

-------------------------------------
=====================================
Computing circuit for andnq %rbx, %rcx, %rdi

.target:
orq %rcx, %rdx
xorq %rcx, %rdx
movq %rdx, %rbx
retq 

Initial state:
%rdi/%rdi: %rdi_testq_r64_r64

%cf: %cf_testq_r64_r64
%zf: %zf_testq_r64_r64
%sf: %sf_testq_r64_r64
%of: %of_testq_r64_r64

State for specgen instruction: andnq %rdx, %rcx, %rbx:
%rbx/%rbx: (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64

%cf: false
%zf: ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64) = 0x0₆₄
%sf: ((%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64)[63:63] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rdi
Value is               -> (%rdx_andnq_r64_r64_r64 | %rcx_andnq_r64_r64_r64) ⊕ %rcx_andnq_r64_r64_r64
  after renaming it is => (%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64

Final state
%rdi/%rdi: (%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64

%cf: false
%zf: ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64) = 0x0₆₄
%sf: ((%rbx_testq_r64_r64[63:63] | %rcx_testq_r64_r64[63:63]) ⊕ %rcx_testq_r64_r64[63:63]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_stc
%rdx/%rdx: %rdx_stc

%xmm0: %ymm0_stc[127:0]
%xmm1: %ymm1_stc[127:0]

-------------------------------------
=====================================
Computing circuit for stc 

.target:
callq .set_cf
retq 

Initial state:
%cf: %cf_subq_r64_r64

State for specgen instruction: stc :
%cf: true

Final state
%cf: true

=====================================
-------------------------------------
Getting base circuit for movq $0xfffffffffffffffe, %rdx

Final state:
%rdx/%rdx: 0xfffffffffffffffe₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_incb_r8 ⊕ %rax_incb_r8

%cf: false
%pf: !((%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rax_incb_r8 ⊕ %rax_incb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄
%sf: (%rax_incb_r8 ⊕ %rax_incb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rcx

Final state:
%rax/%rax: %rax_incb_r8 ⊕ %rax_incb_r8
%rdx/%rdx: %rdx_incb_r8

%xmm0: %ymm0_incb_r8[127:0]
%xmm1: %ymm1_incb_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: %rbx_incb_r8[63:8] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0][3:0] + 0x0₁ ∘ %rbx_incb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁ ↔ %rbx_incb_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for incb %dl

.target:
xorq %rax, %rax
clc 
callq .read_zf_into_rcx
adcb %cl, %bl
retq 

Initial state:
%rdx/%dl: 0xfffffffffffffffe₆₄

%pf: %pf_notq_r64
%af: %af_notq_r64
%zf: %zf_notq_r64
%sf: %sf_notq_r64
%of: %of_notq_r64

State for specgen instruction: incb %bl:
%rbx/%bl: %rbx_incb_r8[63:8] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0][3:0] + 0x0₁ ∘ %rbx_incb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁ ↔ %rbx_incb_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %dl
Value is               -> (%rbx_incb_r8[63:8] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₆₃ ∘ ((%rax_incb_r8 ⊕ %rax_incb_r8) = 0x0₆₄ ? 0x1₁ : 0x0₁))[7:0]) + 0x0₁ ∘ %rbx_incb_r8[7:0])[7:0])[7:0]
  after renaming it is => 0xff₈

Final state
%rdx/%dl: 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈

%pf: true
%af: false
%zf: false
%sf: true
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rdx, %rbx

Final state:
%rbx/%rbx: %rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈

%cf: false
%pf: !((%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][0:0] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][1:1] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][2:2] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][3:3] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][4:4] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][5:5] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][6:6] = 0x1₁ ⊕ (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[7:0][7:7] = 0x1₁)
%zf: (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈) = 0x0₆₄
%sf: (%rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈)[63:63] = 0x1₁
%of: false

-------------------------------------
=====================================
Computing circuit for notq %rcx

.target:
movq $0xfffffffffffffffe, %rdx
incb %dl
xorq %rdx, %rbx
retq 

Initial state:
%rcx/%rcx: %rcx_subq_r64_r64

State for specgen instruction: notq %rbx:
%rbx/%rbx: %rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈

Register        -> %rbx
  translates to => %rcx
Value is               -> %rbx_notq_r64 ⊕ 0xfffffffffffffffe₆₄[63:8] ∘ 0xff₈
  after renaming it is => %rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄

Final state
%rcx/%rcx: %rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄

=====================================
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0]

%cf: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[64:64] = 0x1₁
%pf: !(((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][0:0] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][1:1] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][2:2] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][3:3] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][4:4] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][5:5] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][6:6] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)[3:0] + 0x0₁ ∘ %rbx_subq_r64_r64[3:0])[4:4] = 0x1₁
%zf: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0] = 0x0₆₄
%sf: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][63:63] = 0x1₁
%of: ((%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)[63:63] = 0x1₁ ↔ %rbx_subq_r64_r64[63:63] = 0x1₁) ∧ !((%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)[63:63] = 0x1₁ ↔ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:63] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_5_of_rbx

Final state:
%rax/%rax: %rax_cmc
%rdx/%rdx: %rdx_cmc

%xmm0: %ymm0_cmc[127:0]
%xmm1: %ymm1_cmc[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_decw_r16 ⊕ %rax_decw_r16

%cf: false
%pf: !((%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_decw_r16 ⊕ %rax_decw_r16) = 0x0₆₄
%sf: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rsi

Final state:
%rsi/%rsi: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %ax, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rax/%ax: %rax_decw_r16 ⊕ %rax_decw_r16
%rbx/%bx: %rbx_decw_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %ax
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_decw_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rbx/%bx: %rbx_decw_r16[63:16] ∘ 0x0₁₆

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rdx/%rdx: %rdx_decw_r16

%xmm0: %ymm0_decw_r16[127:0]
%xmm1: %ymm1_decw_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcw %bx, %ax

Final state:
%rax/%ax: ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[63:16] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %ax, %si

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rsi/%si: 0xffffffffffffffff₆₄

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %si
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

Final state
%rsi/%si: 0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

%cf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movswq %si, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

-------------------------------------
=====================================
Computing circuit for decw %bx

.target:
xorq %rax, %rax
movq $0xffffffffffffffff, %rsi
xchgw %ax, %bx
callq .read_cf_into_rbx
adcw %bx, %ax
addw %ax, %si
movswq %si, %rbx
retq 

Initial state:
%rbx/%bx: (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0]

%pf: %pf_cmc
%af: %af_cmc
%zf: %zf_cmc
%sf: %sf_cmc
%of: %of_cmc

State for specgen instruction: decw %bx:
%rbx/%bx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])[15:0]
  after renaming it is => %cf_cmc ? 0x0₁₆ : 0xffff₁₆

Final state
%rbx/%bx: ((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆)

%pf: !((%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_cmc ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_cmc ? 0x0₁₆ : 0xffff₁₆) = 0x0₁₆
%sf: (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(false ↔ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %bh

Final state:
%rbx/%bh: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %bh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0]

%cf: %cf_xorb_r8_r8
%pf: %pf_xorb_r8_r8
%zf: %zf_xorb_r8_r8
%sf: %sf_xorb_r8_r8
%of: %of_xorb_r8_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]

Final state
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !((%rbx_xorb_r8_r8[0:0] ⊕ %rcx_xorb_r8_r8[0:0]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[1:1] ⊕ %rcx_xorb_r8_r8[1:1]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[2:2] ⊕ %rcx_xorb_r8_r8[2:2]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[3:3] ⊕ %rcx_xorb_r8_r8[3:3]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[4:4] ⊕ %rcx_xorb_r8_r8[4:4]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[5:5] ⊕ %rcx_xorb_r8_r8[5:5]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[6:6] ⊕ %rcx_xorb_r8_r8[6:6]) = 0x1₁ ⊕ (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁)
%zf: (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]) = 0x0₈
%sf: (%rbx_xorb_r8_r8[7:7] ⊕ %rcx_xorb_r8_r8[7:7]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_r8
%rdx/%rdx: %rdx_xorb_r8_r8

%xmm0: %ymm0_xorb_r8_r8[127:0]
%xmm1: %ymm1_xorb_r8_r8[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %al, %al

.target:
movb %cl, %bh
xorb %bh, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rax/%al: %rax_xorb_rh_rh

%cf: %cf_xorb_rh_rh
%pf: %pf_xorb_rh_rh
%zf: %zf_xorb_rh_rh
%sf: %sf_xorb_rh_rh
%of: %of_xorb_rh_rh

State for specgen instruction: xorb %cl, %bl:
%rbx/%bl: (%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0])

%cf: false
%pf: !(((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][0:0] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][1:1] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][2:2] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][3:3] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][4:4] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][5:5] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][6:6] = 0x1₁ ⊕ ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:0][7:7] = 0x1₁)
%zf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0] = 0x0₈
%sf: ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %al
Value is               -> ((%rbx_xorb_r8_r8[63:16] ∘ %rcx_xorb_r8_r8[7:0] ∘ %rbx_xorb_r8_r8[7:0])[63:8] ∘ (%rbx_xorb_r8_r8[7:0] ⊕ %rcx_xorb_r8_r8[7:0]))[7:0]
  after renaming it is => 0x0₈

Final state
%rax/%al: %rax_xorb_rh_rh[63:8] ∘ 0x0₈

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xaddb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8]
%rbx/%bl: %rbx_xaddb_rh_r8

%cf: %cf_xaddb_rh_r8
%pf: %pf_xaddb_rh_r8
%af: %af_xaddb_rh_r8
%zf: %zf_xaddb_rh_r8
%sf: %sf_xaddb_rh_r8
%of: %of_xaddb_rh_r8

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for xaddb %al, %bh

.target:
movzbl %ah, %edx
xaddb %bl, %dl
movb %dl, %ah
retq 

Initial state:
%rax/%al: %rax_xorb_rh_rh[63:8] ∘ 0x0₈
%rbx/%bh: %rbx_xorb_rh_rh

%cf: false
%pf: true
%af: %af_xorb_rh_rh
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %bl, %ah:
%rax/%ah: %rax_xaddb_rh_r8[63:16] ∘ ((0x0₅₆ ∘ %rax_xaddb_rh_r8[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_xaddb_rh_r8[7:0]
%rbx/%bl: %rbx_xaddb_rh_r8[63:8] ∘ %rax_xaddb_rh_r8[15:8]

%cf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xaddb_rh_r8[11:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ %rbx_xaddb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_xaddb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xaddb_rh_r8[15:8] + 0x0₁ ∘ %rbx_xaddb_rh_r8[7:0])[7:7] = 0x1₁)

Final state
%rax/%al: (%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8]
%rbx/%bh: %rbx_xorb_rh_rh[63:16] ∘ %rbx_xorb_rh_rh[15:8] ∘ %rbx_xorb_rh_rh[7:0]

%cf: false
%pf: !(%rbx_xorb_rh_rh[8:8] = 0x1₁ ⊕ %rbx_xorb_rh_rh[9:9] = 0x1₁ ⊕ %rbx_xorb_rh_rh[10:10] = 0x1₁ ⊕ %rbx_xorb_rh_rh[11:11] = 0x1₁ ⊕ %rbx_xorb_rh_rh[12:12] = 0x1₁ ⊕ %rbx_xorb_rh_rh[13:13] = 0x1₁ ⊕ %rbx_xorb_rh_rh[14:14] = 0x1₁ ⊕ %rbx_xorb_rh_rh[15:15] = 0x1₁)
%af: false
%zf: %rbx_xorb_rh_rh[15:8] = 0x0₈
%sf: %rbx_xorb_rh_rh[15:15] = 0x1₁
%of: (%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ %rbx_xorb_rh_rh[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x4, %rdi

Final state:
%rdi/%rdi: 0x4₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %dil

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rdi/%dil: 0x4₆₄

%cf: %cf_xorb_rh_r8
%pf: %pf_xorb_rh_r8
%zf: %zf_xorb_rh_r8
%sf: %sf_xorb_rh_r8
%of: %of_xorb_rh_r8

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %dil
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => 0x8₈

Final state
%rdi/%dil: 0x4₆₄[63:8] ∘ 0x8₈

%cf: false
%pf: false
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %r8, %r8

Final state:
%r8/%r8: %r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8

%cf: false
%pf: !((%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][0:0] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][1:1] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][2:2] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][3:3] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][4:4] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][5:5] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][6:6] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][7:7] = 0x1₁)
%zf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8) = 0x0₆₄
%sf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %ah, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_xorb_rh_r8

%cf: false
%pf: !((%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][0:0] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][1:1] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][2:2] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][3:3] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][4:4] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][5:5] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][6:6] = 0x1₁ ⊕ (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[7:0][7:7] = 0x1₁)
%zf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8) = 0x0₆₄
%sf: (%r8_xorb_rh_r8 ⊕ %r8_xorb_rh_r8)[63:63] = 0x1₁
%of: false

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => %rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]

Final state
%rbx/%bl: %rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16

%cf: false
%pf: !((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16) = 0x0₆₄
%sf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %ax

Final state:
%rax/%ax: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_popcntw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][15:15] = 0x1₁) ∧ !(%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
=====================================
Computing circuit for popcntw %r8w, %ax

.target:
xorq %rax, %rax
clc 
adcw %cx, %ax
popcntq %rax, %rbx
clc 
retq 

Initial state:
%rax/%ax: %rax_xorb_rh_r8

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%af: TMP_BOOL_11
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

State for specgen instruction: popcntw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

Register        -> %bx
  translates to => %ax
Value is               -> (0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0]))))))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: %rax_xorb_rh_r8[63:16] ∘ 0x0₁₆

%cf: false
%pf: false
%af: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh

%cf: false
%pf: !((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][0:0] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][1:1] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][2:2] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][3:3] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][4:4] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][5:5] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][6:6] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][7:7] = 0x1₁)
%zf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh) = 0x0₆₄
%sf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_movzbw_r16_rh
%rdx/%rdx: %rdx_movzbw_r16_rh

%xmm0: %ymm0_movzbw_r16_rh[127:0]
%xmm1: %ymm1_movzbw_r16_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbw %ah, %si

.target:
xorq %rcx, %rcx
callq .read_sf_into_rbx
movb %ah, %bl
retq 

Initial state:
%rsi/%si: %rsi_xaddb_r8_rh

State for specgen instruction: movzbw %ah, %bx:
%rbx/%bx: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

Register        -> %bx
  translates to => %si
Value is               -> ((0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8])[15:0]
  after renaming it is => 0x0₈ ∘ %rax_xaddb_r8_rh[15:8]

Final state
%rsi/%si: %rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8])

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r12

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r12/%r12: %r12_xaddb_r8_rh

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

Final state
%r12/%r12: 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rdx

Final state:
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_xaddb_r8_rh
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %r12b, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_xaddb_r8_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rdx, %r9

Final state:
%r9/%r9: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0]) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %sil, %bl

Final state:
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddb %ah, %bl

.target:
movzbw %ah, %si
movzbq %bl, %r12
movslq %r12d, %rdx
callq .move_016_008_dx_r8b_r9b
movsbl %r12b, %ebx
movb %dl, %ah
callq .move_r9b_to_byte_6_of_rbx
popcntq %rdx, %r9
adcb %sil, %bl
retq 

Initial state:
%rax/%ah: %rax_xorb_rh_r8[63:16] ∘ 0x0₁₆
%rbx/%bl: %rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: false
%af: false
%zf: true
%sf: false
%of: false

State for specgen instruction: xaddb %ah, %bl:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0]
%rbx/%bl: (%rbx_xorb_rh_r8[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]))[63:8] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8])

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%af: false
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: (false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁) ∧ !(false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %edi

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rdi/%rdi: 0x4₆₄[63:8] ∘ 0x8₈

%cf: false
%of: (false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁) ∧ !(false ↔ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rdi
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x10₆₄

Final state
%rdi/%rdi: 0x10₆₄

%cf: false
%of: false

=====================================
=====================================
Computing circuit for xorb %al, %ah

.target:
movq $0x4, %rdi
shlb $0x1, %dil
xorq %r8, %r8
xorb %ah, %bl
popcntw %r8w, %ax
xaddb %ah, %bl
rcll $0x1, %edi
retq 

Initial state:
%rax/%ah: (%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8]

%cf: false
%pf: !(%rbx_xorb_rh_rh[8:8] = 0x1₁ ⊕ %rbx_xorb_rh_rh[9:9] = 0x1₁ ⊕ %rbx_xorb_rh_rh[10:10] = 0x1₁ ⊕ %rbx_xorb_rh_rh[11:11] = 0x1₁ ⊕ %rbx_xorb_rh_rh[12:12] = 0x1₁ ⊕ %rbx_xorb_rh_rh[13:13] = 0x1₁ ⊕ %rbx_xorb_rh_rh[14:14] = 0x1₁ ⊕ %rbx_xorb_rh_rh[15:15] = 0x1₁)
%zf: %rbx_xorb_rh_rh[15:8] = 0x0₈
%sf: %rbx_xorb_rh_rh[15:15] = 0x1₁
%of: (%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ false) ∧ !(%rbx_xorb_rh_rh[15:15] = 0x1₁ ↔ %rbx_xorb_rh_rh[15:15] = 0x1₁)

State for specgen instruction: xorb %bl, %ah:
%rax/%ah: (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_r8[0:0] ⊕ %rax_xorb_rh_r8[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[1:1] ⊕ %rax_xorb_rh_r8[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[2:2] ⊕ %rax_xorb_rh_r8[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[3:3] ⊕ %rax_xorb_rh_r8[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[4:4] ⊕ %rax_xorb_rh_r8[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[5:5] ⊕ %rax_xorb_rh_r8[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[6:6] ⊕ %rax_xorb_rh_r8[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_r8[7:7] ⊕ %rax_xorb_rh_r8[15:15]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[63:16] ∘ (%rbx_xorb_rh_r8[7:0] ⊕ %rax_xorb_rh_r8[15:8]) ∘ (%rax_xorb_rh_r8[63:16] ∘ 0x0₁₆)[7:0])[15:8]
  after renaming it is => %rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]

Final state
%rax/%ah: ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_rh[8:8] ⊕ %rax_xorb_rh_rh[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[9:9] ⊕ %rax_xorb_rh_rh[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[10:10] ⊕ %rax_xorb_rh_rh[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[11:11] ⊕ %rax_xorb_rh_rh[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[12:12] ⊕ %rax_xorb_rh_rh[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[13:13] ⊕ %rax_xorb_rh_rh[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[14:14] ⊕ %rax_xorb_rh_rh[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁
%of: false

=====================================
=====================================
Computing circuit for xorb %bh, %bh

.target:
xorb %al, %al
xaddb %al, %bh
xorb %al, %ah
retq 

Initial state:
%rbx/%bh: ((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆)

%cf: %cf_cmc
%pf: !((%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)
%zf: (%cf_cmc ? 0x0₁₆ : 0xffff₁₆) = 0x0₁₆
%sf: (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(false ↔ (%cf_cmc ? 0x0₁ : 0x1₁) = 0x1₁)

State for specgen instruction: xorb %bh, %ah:
%rax/%ah: ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0]

%cf: false
%pf: !((%rbx_xorb_rh_rh[8:8] ⊕ %rax_xorb_rh_rh[8:8]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[9:9] ⊕ %rax_xorb_rh_rh[9:9]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[10:10] ⊕ %rax_xorb_rh_rh[10:10]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[11:11] ⊕ %rax_xorb_rh_rh[11:11]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[12:12] ⊕ %rax_xorb_rh_rh[12:12]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[13:13] ⊕ %rax_xorb_rh_rh[13:13]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[14:14] ⊕ %rax_xorb_rh_rh[14:14]) = 0x1₁ ⊕ (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁)
%zf: (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) = 0x0₈
%sf: (%rbx_xorb_rh_rh[15:15] ⊕ %rax_xorb_rh_rh[15:15]) = 0x1₁
%of: false

Register        -> %ah
  translates to => %bh
Value is               -> (((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[63:16] ∘ (%rbx_xorb_rh_rh[15:8] ⊕ %rax_xorb_rh_rh[15:8]) ∘ ((%rax_xorb_rh_rh[63:8] ∘ 0x0₈)[63:8] ∘ %rbx_xorb_rh_rh[15:8])[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0]

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[63:8] ∘ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][3:0] + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁ ↔ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁) ∧ !(((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for cmc 

.target:
callq .read_cf_into_rbx
callq .move_064_032_rbx_r8d_r9d
callq .move_r8b_to_byte_5_of_rbx
decw %bx
xorb %bh, %bh
adcb %bl, %bl
retq 

Initial state:
%cf: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[64:64] = 0x1₁

State for specgen instruction: cmc :
%cf: ((false ? 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0]) + 0x0₁ ∘ ((((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[63:16] ∘ 0x0₈ ∘ (((0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[63:48] ∘ (0x0₃₂ ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[31:0])[7:0] ∘ (0x0₆₃ ∘ (%cf_cmc ? 0x1₁ : 0x0₁))[39:0])[63:16] ∘ (%cf_cmc ? 0x0₁₆ : 0xffff₁₆))[7:0])[7:0])[8:8] = 0x1₁

Final state
%cf: (((0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_subq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_subq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁

=====================================
=====================================
Computing circuit for subq %rdi, %rbx

.target:
stc 
notq %rcx
adcq %rcx, %rbx
cmc 
retq 

Initial state:
%rbx/%rbx: %rbx_testq_r64_r64

%cf: false
%pf: %pf_testq_r64_r64
%af: %af_testq_r64_r64
%zf: ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64) = 0x0₆₄
%sf: ((%rbx_testq_r64_r64[63:63] | %rcx_testq_r64_r64[63:63]) ⊕ %rcx_testq_r64_r64[63:63]) = 0x1₁
%of: false

State for specgen instruction: subq %rcx, %rbx:
%rbx/%rbx: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0]

%cf: (((0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_subq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_subq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf: !(((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][0:0] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][1:1] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][2:2] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][3:3] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][4:4] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][5:5] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][6:6] = 0x1₁ ⊕ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)[3:0] + 0x0₁ ∘ %rbx_subq_r64_r64[3:0])[4:4] = 0x1₁
%zf: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0] = 0x0₆₄
%sf: ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0][63:63] = 0x1₁
%of: ((%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)[63:63] = 0x1₁ ↔ %rbx_subq_r64_r64[63:63] = 0x1₁) ∧ !((%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)[63:63] = 0x1₁ ↔ ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> ((true ? 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx_subq_r64_r64 ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx_subq_r64_r64)[63:0]
  after renaming it is => (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:0]

%cf: (((0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf: !((0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[7:7] = 0x1₁)
%af: (0x0₁ ∘ ((%rbx_testq_r64_r64[3:0] | %rcx_testq_r64_r64[3:0]) ⊕ %rcx_testq_r64_r64[3:0] ⊕ 0xf₄) + 0x0₁ ∘ %rbx_testq_r64_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:63] = 0x1₁
%of: (((%rbx_testq_r64_r64[63:63] | %rcx_testq_r64_r64[63:63]) ⊕ %rcx_testq_r64_r64[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rbx_testq_r64_r64[63:63] = 0x1₁) ∧ !(((%rbx_testq_r64_r64[63:63] | %rcx_testq_r64_r64[63:63]) ⊕ %rcx_testq_r64_r64[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:63] = 0x1₁)

=====================================
=====================================
Computing circuit for testq %rcx, %rbx

.target:
andnq %rbx, %rcx, %rdi
subq %rdi, %rbx
retq 

Initial state:
%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: testq %rcx, %rbx:
%cf: (((0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf: !((0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[7:7] = 0x1₁)
%zf: (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:63] = 0x1₁
%of: (((%rbx_testq_r64_r64[63:63] | %rcx_testq_r64_r64[63:63]) ⊕ %rcx_testq_r64_r64[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rbx_testq_r64_r64[63:63] = 0x1₁) ∧ !(((%rbx_testq_r64_r64[63:63] | %rcx_testq_r64_r64[63:63]) ⊕ %rcx_testq_r64_r64[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ ((%rbx_testq_r64_r64 | %rcx_testq_r64_r64) ⊕ %rcx_testq_r64_r64 ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx_testq_r64_r64)[63:63] = 0x1₁)

Final state
%cf: (((0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf: !((0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%zf: (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of: (((%rbx[63:63] | %rcx[63:63]) ⊕ %rcx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(((%rbx[63:63] | %rcx[63:63]) ⊕ %rcx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

=====================================
Circuits:

%cf    : (((0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of    : (((%rbx[63:63] | %rcx[63:63]) ⊕ %rcx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(((%rbx[63:63] | %rcx[63:63]) ⊕ %rcx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ ((%rbx | %rcx) ⊕ %rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/