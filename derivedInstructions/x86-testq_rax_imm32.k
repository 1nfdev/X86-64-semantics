// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTQ-RAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testq I1_32:Imm, %rax:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt (ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(mi(15, 0), (#ifMInt ( (  ( ultMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))))  orBool  ultMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), getParentValue(%rax, RSMap)) )  orBool  ( ultMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)))  orBool  ultMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), mi(64, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), mi(16, 65535)), 8, 16), extractMInt(addMInt(concatenateMInt(mi(15, 0), (#ifMInt ( (  ( ultMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))))  orBool  ultMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), getParentValue(%rax, RSMap)) )  orBool  ( ultMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)))  orBool  ultMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), mi(64, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), mi(16, 65535)), 8, 16)), extractMInt(addMInt(concatenateMInt(mi(15, 0), (#ifMInt ( (  ( ultMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))))  orBool  ultMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), getParentValue(%rax, RSMap)) )  orBool  ( ultMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)))  orBool  ultMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), mi(64, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), mi(16, 65535)), 8, 16)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(64, 1), lshrMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(64, 2), addMInt(xorMInt(lshrMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), 63), lshrMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), 63)), xorMInt(lshrMInt(getParentValue(%rax, RSMap), 63), lshrMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), 63)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), orMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(%rax, RSMap)))), getParentValue(%rax, RSMap)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
