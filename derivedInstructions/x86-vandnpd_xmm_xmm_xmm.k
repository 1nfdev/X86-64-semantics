// Autogenerated using stratification.
requires "x86-configuration.k"

module VANDNPD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vandnpd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192)), extractMInt(getParentValue(R2, RSMap), 128, 192)), xorMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256)), extractMInt(getParentValue(R2, RSMap), 192, 256)))) )


)

    </regstate>
endmodule

module VANDNPD-XMM-XMM-XMM-SEMANTICS
  imports VANDNPD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vandnpd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vorpd %xmm2, %xmm3, %xmm12  #  1     0     4      OPC=vorpd_xmm_xmm_xmm
circuit:vmovupd %ymm12, %ymm1       #  2     0x4   5      OPC=vmovupd_ymm_ymm
circuit:pxor %xmm1, %xmm2           #  3     0x9   4      OPC=pxor_xmm_xmm
circuit:vmovdqa %xmm2, %xmm1        #  4     0xd   4      OPC=vmovdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vandnpd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for orq %r9, %r11

Final state:
%r11/%r11: %ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for orq %r8, %r10

Final state:
%r10/%r10: %ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %xmm2, %xmm3, %xmm12

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
orq %r9, %r11
orq %r8, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm12: %ymm12_vandnpd_xmm_xmm_xmm

State for specgen instruction: vorpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm12: 0x0₁₂₈ ∘ ((%ymm2_vandnpd_xmm_xmm_xmm[127:64] | %ymm3_vandnpd_xmm_xmm_xmm[127:64]) ∘ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] | %ymm3_vandnpd_xmm_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovupd_ymm_ymm
%rdx/%rdx: %rdx_vmovupd_ymm_ymm

%xmm0: %ymm0_vmovupd_ymm_ymm[127:0]
%xmm1: %ymm1_vmovupd_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vminps %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_single(%ymm2_vmovupd_ymm_ymm[255:224], %ymm2_vmovupd_ymm_ymm[255:224])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[255:224] : %ymm2_vmovupd_ymm_ymm[255:224]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[223:192], %ymm2_vmovupd_ymm_ymm[223:192])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[223:192] : %ymm2_vmovupd_ymm_ymm[223:192]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[191:160], %ymm2_vmovupd_ymm_ymm[191:160])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[191:160] : %ymm2_vmovupd_ymm_ymm[191:160]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[159:128], %ymm2_vmovupd_ymm_ymm[159:128])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[159:128] : %ymm2_vmovupd_ymm_ymm[159:128]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[127:96], %ymm2_vmovupd_ymm_ymm[127:96])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[127:96] : %ymm2_vmovupd_ymm_ymm[127:96]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[95:64], %ymm2_vmovupd_ymm_ymm[95:64])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[95:64] : %ymm2_vmovupd_ymm_ymm[95:64]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[63:32], %ymm2_vmovupd_ymm_ymm[63:32])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[63:32] : %ymm2_vmovupd_ymm_ymm[63:32]) ∘ (mincmp_single(%ymm2_vmovupd_ymm_ymm[31:0], %ymm2_vmovupd_ymm_ymm[31:0])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[31:0] : %ymm2_vmovupd_ymm_ymm[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovupd_ymm_ymm
%rdx/%rdx: %rdx_vmovupd_ymm_ymm

%xmm0: %ymm0_vmovupd_ymm_ymm[127:0]
%xmm1: (((mincmp_single(%ymm2_vmovupd_ymm_ymm[255:224], %ymm2_vmovupd_ymm_ymm[255:224])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[255:224] : %ymm2_vmovupd_ymm_ymm[255:224]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[223:192], %ymm2_vmovupd_ymm_ymm[223:192])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[223:192] : %ymm2_vmovupd_ymm_ymm[223:192]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[191:160], %ymm2_vmovupd_ymm_ymm[191:160])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[191:160] : %ymm2_vmovupd_ymm_ymm[191:160]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[159:128], %ymm2_vmovupd_ymm_ymm[159:128])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[159:128] : %ymm2_vmovupd_ymm_ymm[159:128]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[127:96], %ymm2_vmovupd_ymm_ymm[127:96])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[127:96] : %ymm2_vmovupd_ymm_ymm[127:96]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[95:64], %ymm2_vmovupd_ymm_ymm[95:64])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[95:64] : %ymm2_vmovupd_ymm_ymm[95:64]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[63:32], %ymm2_vmovupd_ymm_ymm[63:32])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[63:32] : %ymm2_vmovupd_ymm_ymm[63:32]) ∘ (mincmp_single(%ymm2_vmovupd_ymm_ymm[31:0], %ymm2_vmovupd_ymm_ymm[31:0])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[31:0] : %ymm2_vmovupd_ymm_ymm[31:0]))))))))[255:128] ∘ (%ymm2_vmovupd_ymm_ymm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_ymm_ymm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %ymm12, %ymm1

.target:
callq .move_128_064_xmm2_r12_r13
vminps %ymm2, %ymm2, %ymm1
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vandnpd_xmm_xmm_xmm

State for specgen instruction: vmovupd %ymm2, %ymm1:
%ymm1: ((mincmp_single(%ymm2_vmovupd_ymm_ymm[255:224], %ymm2_vmovupd_ymm_ymm[255:224])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[255:224] : %ymm2_vmovupd_ymm_ymm[255:224]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[223:192], %ymm2_vmovupd_ymm_ymm[223:192])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[223:192] : %ymm2_vmovupd_ymm_ymm[223:192]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[191:160], %ymm2_vmovupd_ymm_ymm[191:160])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[191:160] : %ymm2_vmovupd_ymm_ymm[191:160]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[159:128], %ymm2_vmovupd_ymm_ymm[159:128])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[159:128] : %ymm2_vmovupd_ymm_ymm[159:128]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[127:96], %ymm2_vmovupd_ymm_ymm[127:96])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[127:96] : %ymm2_vmovupd_ymm_ymm[127:96]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[95:64], %ymm2_vmovupd_ymm_ymm[95:64])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[95:64] : %ymm2_vmovupd_ymm_ymm[95:64]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[63:32], %ymm2_vmovupd_ymm_ymm[63:32])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[63:32] : %ymm2_vmovupd_ymm_ymm[63:32]) ∘ (mincmp_single(%ymm2_vmovupd_ymm_ymm[31:0], %ymm2_vmovupd_ymm_ymm[31:0])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[31:0] : %ymm2_vmovupd_ymm_ymm[31:0]))))))))[255:128] ∘ (%ymm2_vmovupd_ymm_ymm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_ymm_ymm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ ((%ymm2_vandnpd_xmm_xmm_xmm[127:64] | %ymm3_vandnpd_xmm_xmm_xmm[127:64]) ∘ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] | %ymm3_vandnpd_xmm_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r12_r13

Final state:
%rax/%rax: %rax_vxorps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vxorps_xmm_xmm_xmm

%xmm0: %ymm0_vxorps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vxorps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vxorps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vxorps_xmm_xmm_xmm

%xmm0: %ymm0_vxorps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vxorps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r13, %r9

Final state:
%r9/%r9: %ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r12, %r8

Final state:
%r8/%r8: %ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vxorps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vxorps_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vxorps %xmm2, %xmm1, %xmm6

.target:
callq .move_128_064_xmm3_r12_r13
callq .move_128_064_xmm2_r8_r9
vzeroall 
xorq %r13, %r9
xorq %r12, %r8
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm6: %ymm6_xorps_xmm_xmm

State for specgen instruction: vxorps %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm2_vxorps_xmm_xmm_xmm[127:0][127:64] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm2_vxorps_xmm_xmm_xmm[127:0][63:0] ⊕ %ymm3_vxorps_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm6: 0x0₁₂₈ ∘ ((%ymm1_xorps_xmm_xmm[127:64] ⊕ %ymm2_xorps_xmm_xmm[127:64]) ∘ (%ymm1_xorps_xmm_xmm[63:0] ⊕ %ymm2_xorps_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm6, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_xorps_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_xorps_xmm_xmm[255:128] ∘ ((%ymm1_xorps_xmm_xmm[127:64] ⊕ %ymm2_xorps_xmm_xmm[127:64]) ∘ (%ymm1_xorps_xmm_xmm[63:0] ⊕ %ymm2_xorps_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for xorps %xmm2, %xmm1

.target:
vxorps %xmm2, %xmm1, %xmm6
movdqa %xmm6, %xmm1
retq 

Initial state:
%xmm1: %ymm1_pxor_xmm_xmm[127:0]

State for specgen instruction: xorps %xmm2, %xmm1:
%xmm1: (%ymm1_xorps_xmm_xmm[255:128] ∘ ((%ymm1_xorps_xmm_xmm[127:64] ⊕ %ymm2_xorps_xmm_xmm[127:64]) ∘ (%ymm1_xorps_xmm_xmm[63:0] ⊕ %ymm2_xorps_xmm_xmm[63:0])))[127:0]

Final state
%xmm1: (%ymm1_pxor_xmm_xmm[255:128] ∘ ((%ymm1_pxor_xmm_xmm[127:64] ⊕ %ymm2_pxor_xmm_xmm[127:64]) ∘ (%ymm1_pxor_xmm_xmm[63:0] ⊕ %ymm2_pxor_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for pxor %xmm1, %xmm2

.target:
xorps %xmm2, %xmm1
retq 

Initial state:
%xmm2: %ymm2_vandnpd_xmm_xmm_xmm[127:0]

State for specgen instruction: pxor %xmm2, %xmm1:
%xmm1: (%ymm1_pxor_xmm_xmm[255:128] ∘ ((%ymm1_pxor_xmm_xmm[127:64] ⊕ %ymm2_pxor_xmm_xmm[127:64]) ∘ (%ymm1_pxor_xmm_xmm[63:0] ⊕ %ymm2_pxor_xmm_xmm[63:0])))[127:0]

Final state
%xmm2: (%ymm2_vandnpd_xmm_xmm_xmm[255:128] ∘ ((%ymm2_vandnpd_xmm_xmm_xmm[127:64] ⊕ (%ymm2_vandnpd_xmm_xmm_xmm[127:64] | %ymm3_vandnpd_xmm_xmm_xmm[127:64])) ∘ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] ⊕ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] | %ymm3_vandnpd_xmm_xmm_xmm[63:0]))))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ ((%ymm2_vandnpd_xmm_xmm_xmm[127:64] | %ymm3_vandnpd_xmm_xmm_xmm[127:64]) ∘ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] | %ymm3_vandnpd_xmm_xmm_xmm[63:0]))

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ ((%ymm2_vandnpd_xmm_xmm_xmm[127:64] ⊕ (%ymm2_vandnpd_xmm_xmm_xmm[127:64] | %ymm3_vandnpd_xmm_xmm_xmm[127:64])) ∘ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] ⊕ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] | %ymm3_vandnpd_xmm_xmm_xmm[63:0])))

=====================================
=====================================
Computing circuit for vandnpd %xmm3, %xmm2, %xmm1

.target:
vorpd %xmm2, %xmm3, %xmm12
vmovupd %ymm12, %ymm1
pxor %xmm1, %xmm2
vmovdqa %xmm2, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vandnpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ ((%ymm2_vandnpd_xmm_xmm_xmm[127:64] ⊕ (%ymm2_vandnpd_xmm_xmm_xmm[127:64] | %ymm3_vandnpd_xmm_xmm_xmm[127:64])) ∘ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] ⊕ (%ymm2_vandnpd_xmm_xmm_xmm[63:0] | %ymm3_vandnpd_xmm_xmm_xmm[63:0])))

Final state
%ymm1: 0x0₁₂₈ ∘ ((%ymm2[127:64] ⊕ (%ymm2[127:64] | %ymm3[127:64])) ∘ (%ymm2[63:0] ⊕ (%ymm2[63:0] | %ymm3[63:0])))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ ((%ymm2[127:64] ⊕ (%ymm2[127:64] | %ymm3[127:64])) ∘ (%ymm2[63:0] ⊕ (%ymm2[63:0] | %ymm3[63:0])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/