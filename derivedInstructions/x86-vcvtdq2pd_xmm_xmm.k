// Autogenerated using stratification.
requires "x86-configuration.k"

module VCVTDQ2PD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vcvtdq2pd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(getParentValue(R1, RSMap), 192, 224)), 53, 11), 64), Float2MInt(Int2Float(svalueMInt(extractMInt(getParentValue(R1, RSMap), 224, 256)), 53, 11), 64))) )


)

    </regstate>
endmodule

module VCVTDQ2PD-XMM-XMM-SEMANTICS
  imports VCVTDQ2PD-XMM-XMM
endmodule
/*
TargetInstr:
vcvtdq2pd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r8_r9  #  1     0     5      OPC=callq_label
circuit:vzeroall                        #  2     0x5   3      OPC=vzeroall
circuit:callq .move_064_128_r8_r9_xmm3  #  3     0x8   5      OPC=callq_label
circuit:cvtdq2pd %xmm3, %xmm1           #  4     0xd   4      OPC=cvtdq2pd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vcvtdq2pd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vcvtdq2pd_xmm_xmm
%rdx/%rdx: %rdx_vcvtdq2pd_xmm_xmm

%xmm0: %ymm0_vcvtdq2pd_xmm_xmm[127:0]
%xmm1: %ymm1_vcvtdq2pd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm3

Final state:
%rax/%rax: %rax_vcvtdq2pd_xmm_xmm
%rdx/%rdx: %rdx_vcvtdq2pd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: %ymm0_vpmovzxdq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovzxdq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_5_of_ymm1_to_r9b

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm2

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovzxdq %xmm2, %xmm0

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_byte_5_of_ymm1_to_r9b
callq .move_064_128_r8_r9_xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%ymm0: %ymm0_cvtdq2pd_xmm_xmm

State for specgen instruction: vpmovzxdq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0])

Final state
%ymm0: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for vminpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

-------------------------------------
=====================================
Computing circuit for vmovdqa %ymm2, %ymm1

.target:
vminpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm1: %ymm1_vmovaps_ymm_ymm

State for specgen instruction: vmovdqa %ymm2, %ymm1:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

Final state
%ymm1: %ymm2_vmovaps_ymm_ymm

=====================================
=====================================
Computing circuit for vmovaps %ymm0, %ymm2

.target:
vmovdqa %ymm2, %ymm1
retq 

Initial state:
%ymm2: %ymm2_cvtdq2pd_xmm_xmm

State for specgen instruction: vmovaps %ymm2, %ymm1:
%ymm1: %ymm2_vmovaps_ymm_ymm

Final state
%ymm2: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for vcvtdq2pd %ymm2, %ymm3

Final state:
%ymm3: cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:96]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[95:64]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[63:32]) ∘ cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[31:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_cvtdq2pd_xmm_xmm
%rdx/%rdx: %rdx_cvtdq2pd_xmm_xmm

%xmm0: (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:0]
%xmm1: %ymm1_cvtdq2pd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm12_xmm13_xmm1

Final state:
%rax/%rax: %rax_cvtdq2pd_xmm_xmm
%rdx/%rdx: %rdx_cvtdq2pd_xmm_xmm

%xmm0: (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:0]
%xmm1: (%ymm1_cvtdq2pd_xmm_xmm[255:128] ∘ ((%ymm13_cvtdq2pd_xmm_xmm[255:128] ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:96]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[95:64]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[63:32]) ∘ cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[31:0]))))[255:128])[127:0][63:0] ∘ (%ymm12_cvtdq2pd_xmm_xmm[255:128] ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:96]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[95:64]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[63:32]) ∘ cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[31:0]))))[127:0])[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for cvtdq2pd %xmm3, %xmm1

.target:
vpmovzxdq %xmm2, %xmm0
vmovaps %ymm0, %ymm2
vcvtdq2pd %ymm2, %ymm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_64_128_xmm12_xmm13_xmm1
retq 

Initial state:
%xmm1: 0x0₂₅₆[127:0]

State for specgen instruction: cvtdq2pd %xmm2, %xmm1:
%xmm1: (%ymm1_cvtdq2pd_xmm_xmm[255:128] ∘ ((%ymm13_cvtdq2pd_xmm_xmm[255:128] ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:96]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[95:64]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[63:32]) ∘ cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[31:0]))))[255:128])[127:0][63:0] ∘ (%ymm12_cvtdq2pd_xmm_xmm[255:128] ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[127:96]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[95:64]) ∘ (cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[63:32]) ∘ cvt_int32_to_double((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_cvtdq2pd_xmm_xmm[31:0])))[31:0]))))[127:0])[127:0][63:0]))[127:0]

Final state
%xmm1: (0x0₂₅₆[255:128] ∘ (cvt_int32_to_double(%ymm2_vcvtdq2pd_xmm_xmm[63:32]) ∘ cvt_int32_to_double(%ymm2_vcvtdq2pd_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for vcvtdq2pd %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm3
cvtdq2pd %xmm3, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vcvtdq2pd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (cvt_int32_to_double(%ymm2_vcvtdq2pd_xmm_xmm[63:32]) ∘ cvt_int32_to_double(%ymm2_vcvtdq2pd_xmm_xmm[31:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ (cvt_int32_to_double(%ymm2[63:32]) ∘ cvt_int32_to_double(%ymm2[31:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (cvt_int32_to_double(%ymm2[63:32]) ∘ cvt_int32_to_double(%ymm2[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/