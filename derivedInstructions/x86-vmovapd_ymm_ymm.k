// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVAPD-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovapd R1:Ymm, R2:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (getParentValue(R1, RSMap) )


)

    </regstate>
endmodule

module VMOVAPD-YMM-YMM-SEMANTICS
  imports VMOVAPD-YMM-YMM
endmodule
/*
TargetInstr:
vmovapd %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 }
must read:{ %ymm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_032_xmm2_eax_edx_r8d_r9d  #  1     0    5      OPC=callq_label
circuit:vmovdqa %ymm2, %ymm1                      #  2     0x5  4      OPC=vmovdqa_ymm_ymm
circuit:callq .move_r9b_to_byte_12_of_ymm1        #  3     0x9  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovapd %ymm2, %ymm1

  maybe read:      { %ymm2 }
  must read:       { %ymm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_eax_edx_r8d_r9d

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm2_vmovapd_ymm_ymm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm2_vmovapd_ymm_ymm[127:0][63:32]

%xmm0: %ymm0_vmovapd_ymm_ymm[127:0]
%xmm1: %ymm1_vmovapd_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vminpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

-------------------------------------
=====================================
Computing circuit for vmovdqa %ymm2, %ymm1

.target:
vminpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm1: %ymm1_vmovapd_ymm_ymm

State for specgen instruction: vmovdqa %ymm2, %ymm1:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

Final state
%ymm1: %ymm2_vmovapd_ymm_ymm

=====================================
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_12_of_ymm1

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm2_vmovapd_ymm_ymm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm2_vmovapd_ymm_ymm[127:0][63:32]

%xmm0: %ymm0_vmovapd_ymm_ymm[127:0]
%xmm1: (%ymm2_vmovapd_ymm_ymm[255:104] ∘ (0x0₃₂ ∘ %ymm2_vmovapd_ymm_ymm[127:0][127:96])[7:0] ∘ %ymm2_vmovapd_ymm_ymm[95:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %ymm2, %ymm1

.target:
callq .move_128_032_xmm2_eax_edx_r8d_r9d
vmovdqa %ymm2, %ymm1
callq .move_r9b_to_byte_12_of_ymm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vmovapd %ymm2, %ymm1:
%ymm1: %ymm2_vmovapd_ymm_ymm[255:104] ∘ (0x0₃₂ ∘ %ymm2_vmovapd_ymm_ymm[127:0][127:96])[7:0] ∘ %ymm2_vmovapd_ymm_ymm[95:0]

Final state
%ymm1: %ymm2

=====================================
Circuits:

%ymm1  : %ymm2

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/