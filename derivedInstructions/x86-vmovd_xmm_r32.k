// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVD-XMM-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovd R1:R32, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(224, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) )


)

    </regstate>
endmodule

module VMOVD-XMM-R32-SEMANTICS
  imports VMOVD-XMM-R32
endmodule
/*
TargetInstr:
vmovd %ebx, %xmm1
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vzeroall                           #  1     0     3      OPC=vzeroall
circuit:callq .move_016_008_bx_r8b_r9b     #  2     0x3   5      OPC=callq_label
circuit:callq .move_r8b_to_byte_0_of_ymm1  #  3     0x8   5      OPC=callq_label
circuit:callq .move_r9b_to_byte_1_of_ymm1  #  4     0xd   5      OPC=callq_label
circuit:xchgb %r8b, %bl                    #  5     0x12  3      OPC=xchgb_r8_r8
circuit:callq .move_r9b_to_byte_3_of_ymm1  #  6     0x15  5      OPC=callq_label
circuit:callq .move_032_016_ebx_r8w_r9w    #  7     0x1a  5      OPC=callq_label
circuit:callq .move_byte_3_of_rbx_to_r8b   #  8     0x1f  5      OPC=callq_label
circuit:callq .move_r9b_to_byte_2_of_ymm1  #  9     0x24  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_3_of_ymm1  #  10    0x29  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovd %ebx, %xmm1

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₂₂₄ ∘ %rbx[31:24] ∘ %rbx[23:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/