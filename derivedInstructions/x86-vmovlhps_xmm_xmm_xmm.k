// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVLHPS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovlhps R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256))) )


)

    </regstate>
endmodule

module VMOVLHPS-XMM-XMM-XMM-SEMANTICS
  imports VMOVLHPS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vmovlhps %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vpunpcklqdq %xmm3, %xmm2, %xmm2  #  1     0     4      OPC=vpunpcklqdq_xmm_xmm_xmm
circuit:callq .move_128_064_xmm2_r8_r9   #  2     0x4   5      OPC=callq_label
circuit:vzeroall                         #  3     0x9   3      OPC=vzeroall
circuit:callq .move_064_128_r8_r9_xmm1   #  4     0xc   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovlhps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r8_r9

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r8, %r11

Final state:
%r11/%r11: %ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpunpcklqdq %xmm3, %xmm2, %xmm2

.target:
callq .move_128_064_xmm3_r8_r9
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r8, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm2: %ymm2_vmovlhps_xmm_xmm_xmm

State for specgen instruction: vpunpcklqdq %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm2: 0x0₁₂₈ ∘ (%ymm3_vmovlhps_xmm_xmm_xmm[63:0] ∘ %ymm2_vmovlhps_xmm_xmm_xmm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovlhps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovlhps_xmm_xmm_xmm

%xmm0: %ymm0_vmovlhps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vmovlhps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovlhps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovlhps_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₁₂₈ ∘ (%ymm3_vmovlhps_xmm_xmm_xmm[63:0] ∘ %ymm2_vmovlhps_xmm_xmm_xmm[63:0]))[127:0][127:64][63:0] ∘ (0x0₁₂₈ ∘ (%ymm3_vmovlhps_xmm_xmm_xmm[63:0] ∘ %ymm2_vmovlhps_xmm_xmm_xmm[63:0]))[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovlhps %xmm3, %xmm2, %xmm1

.target:
vpunpcklqdq %xmm3, %xmm2, %xmm2
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vmovlhps %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₁₂₈ ∘ (%ymm3_vmovlhps_xmm_xmm_xmm[63:0] ∘ %ymm2_vmovlhps_xmm_xmm_xmm[63:0]))[127:0][127:64][63:0] ∘ (0x0₁₂₈ ∘ (%ymm3_vmovlhps_xmm_xmm_xmm[63:0] ∘ %ymm2_vmovlhps_xmm_xmm_xmm[63:0]))[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm3[63:0] ∘ %ymm2[63:0])

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm3[63:0] ∘ %ymm2[63:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/