// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVUPS-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovups R1:Ymm, R2:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (getParentValue(R1, RSMap) )


)

    </regstate>
endmodule

module VMOVUPS-YMM-YMM-SEMANTICS
  imports VMOVUPS-YMM-YMM
endmodule
/*
TargetInstr:
vmovups %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 }
must read:{ %ymm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_032_xmm2_eax_edx_r8d_r9d  #  1     0    5      OPC=callq_label
circuit:vmovupd %ymm2, %ymm1                      #  2     0x5  4      OPC=vmovupd_ymm_ymm
circuit:callq .move_r8b_to_byte_8_of_ymm1         #  3     0x9  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovups %ymm2, %ymm1

  maybe read:      { %ymm2 }
  must read:       { %ymm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_eax_edx_r8d_r9d

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm2_vmovups_ymm_ymm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm2_vmovups_ymm_ymm[127:0][63:32]

%xmm0: %ymm0_vmovups_ymm_ymm[127:0]
%xmm1: %ymm1_vmovups_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovupd_ymm_ymm
%rdx/%rdx: %rdx_vmovupd_ymm_ymm

%xmm0: %ymm0_vmovupd_ymm_ymm[127:0]
%xmm1: %ymm1_vmovupd_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vminps %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_single(%ymm2_vmovupd_ymm_ymm[255:224], %ymm2_vmovupd_ymm_ymm[255:224])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[255:224] : %ymm2_vmovupd_ymm_ymm[255:224]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[223:192], %ymm2_vmovupd_ymm_ymm[223:192])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[223:192] : %ymm2_vmovupd_ymm_ymm[223:192]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[191:160], %ymm2_vmovupd_ymm_ymm[191:160])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[191:160] : %ymm2_vmovupd_ymm_ymm[191:160]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[159:128], %ymm2_vmovupd_ymm_ymm[159:128])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[159:128] : %ymm2_vmovupd_ymm_ymm[159:128]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[127:96], %ymm2_vmovupd_ymm_ymm[127:96])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[127:96] : %ymm2_vmovupd_ymm_ymm[127:96]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[95:64], %ymm2_vmovupd_ymm_ymm[95:64])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[95:64] : %ymm2_vmovupd_ymm_ymm[95:64]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[63:32], %ymm2_vmovupd_ymm_ymm[63:32])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[63:32] : %ymm2_vmovupd_ymm_ymm[63:32]) ∘ (mincmp_single(%ymm2_vmovupd_ymm_ymm[31:0], %ymm2_vmovupd_ymm_ymm[31:0])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[31:0] : %ymm2_vmovupd_ymm_ymm[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovupd_ymm_ymm
%rdx/%rdx: %rdx_vmovupd_ymm_ymm

%xmm0: %ymm0_vmovupd_ymm_ymm[127:0]
%xmm1: (((mincmp_single(%ymm2_vmovupd_ymm_ymm[255:224], %ymm2_vmovupd_ymm_ymm[255:224])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[255:224] : %ymm2_vmovupd_ymm_ymm[255:224]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[223:192], %ymm2_vmovupd_ymm_ymm[223:192])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[223:192] : %ymm2_vmovupd_ymm_ymm[223:192]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[191:160], %ymm2_vmovupd_ymm_ymm[191:160])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[191:160] : %ymm2_vmovupd_ymm_ymm[191:160]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[159:128], %ymm2_vmovupd_ymm_ymm[159:128])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[159:128] : %ymm2_vmovupd_ymm_ymm[159:128]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[127:96], %ymm2_vmovupd_ymm_ymm[127:96])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[127:96] : %ymm2_vmovupd_ymm_ymm[127:96]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[95:64], %ymm2_vmovupd_ymm_ymm[95:64])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[95:64] : %ymm2_vmovupd_ymm_ymm[95:64]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[63:32], %ymm2_vmovupd_ymm_ymm[63:32])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[63:32] : %ymm2_vmovupd_ymm_ymm[63:32]) ∘ (mincmp_single(%ymm2_vmovupd_ymm_ymm[31:0], %ymm2_vmovupd_ymm_ymm[31:0])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[31:0] : %ymm2_vmovupd_ymm_ymm[31:0]))))))))[255:128] ∘ (%ymm2_vmovupd_ymm_ymm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_ymm_ymm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %ymm2, %ymm1

.target:
callq .move_128_064_xmm2_r12_r13
vminps %ymm2, %ymm2, %ymm1
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmovups_ymm_ymm

State for specgen instruction: vmovupd %ymm2, %ymm1:
%ymm1: ((mincmp_single(%ymm2_vmovupd_ymm_ymm[255:224], %ymm2_vmovupd_ymm_ymm[255:224])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[255:224] : %ymm2_vmovupd_ymm_ymm[255:224]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[223:192], %ymm2_vmovupd_ymm_ymm[223:192])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[223:192] : %ymm2_vmovupd_ymm_ymm[223:192]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[191:160], %ymm2_vmovupd_ymm_ymm[191:160])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[191:160] : %ymm2_vmovupd_ymm_ymm[191:160]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[159:128], %ymm2_vmovupd_ymm_ymm[159:128])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[159:128] : %ymm2_vmovupd_ymm_ymm[159:128]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[127:96], %ymm2_vmovupd_ymm_ymm[127:96])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[127:96] : %ymm2_vmovupd_ymm_ymm[127:96]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[95:64], %ymm2_vmovupd_ymm_ymm[95:64])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[95:64] : %ymm2_vmovupd_ymm_ymm[95:64]) ∘ ((mincmp_single(%ymm2_vmovupd_ymm_ymm[63:32], %ymm2_vmovupd_ymm_ymm[63:32])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[63:32] : %ymm2_vmovupd_ymm_ymm[63:32]) ∘ (mincmp_single(%ymm2_vmovupd_ymm_ymm[31:0], %ymm2_vmovupd_ymm_ymm[31:0])[0:0] = 0x1₁ ? %ymm2_vmovupd_ymm_ymm[31:0] : %ymm2_vmovupd_ymm_ymm[31:0]))))))))[255:128] ∘ (%ymm2_vmovupd_ymm_ymm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_ymm_ymm[127:0][63:0][63:0])

Final state
%ymm1: %ymm2_vmovups_ymm_ymm

=====================================
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_8_of_ymm1

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm2_vmovups_ymm_ymm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm2_vmovups_ymm_ymm[127:0][63:32]

%xmm0: %ymm0_vmovups_ymm_ymm[127:0]
%xmm1: (%ymm2_vmovups_ymm_ymm[255:72] ∘ (0x0₃₂ ∘ %ymm2_vmovups_ymm_ymm[127:0][95:64])[7:0] ∘ %ymm2_vmovups_ymm_ymm[63:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovups %ymm2, %ymm1

.target:
callq .move_128_032_xmm2_eax_edx_r8d_r9d
vmovupd %ymm2, %ymm1
callq .move_r8b_to_byte_8_of_ymm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vmovups %ymm2, %ymm1:
%ymm1: %ymm2_vmovups_ymm_ymm[255:72] ∘ (0x0₃₂ ∘ %ymm2_vmovups_ymm_ymm[127:0][95:64])[7:0] ∘ %ymm2_vmovups_ymm_ymm[63:0]

Final state
%ymm1: %ymm2

=====================================
Circuits:

%ymm1  : %ymm2

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/