// Autogenerated using stratification.
requires "x86-configuration.k"

module VMULSS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmulss R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 128, 224), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8) ) , 32))) )


)

    </regstate>
endmodule

module VMULSS-XMM-XMM-XMM-SEMANTICS
  imports VMULSS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vmulss %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovups %xmm3, %xmm9  #  1     0    4      OPC=vmovups_xmm_xmm
circuit:mulss %xmm9, %xmm2    #  2     0x4  5      OPC=mulss_xmm_xmm
circuit:vmovaps %xmm2, %xmm1  #  3     0x9  4      OPC=vmovaps_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmulss %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovups_xmm_xmm
%rdx/%rdx: %rdx_vmovups_xmm_xmm

%xmm0: %ymm0_vmovups_xmm_xmm[127:0]
%xmm1: %ymm1_vmovups_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovups_xmm_xmm
%rdx/%rdx: %rdx_vmovups_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovups_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovups_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovups %xmm3, %xmm9

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm9: %ymm9_vmulss_xmm_xmm_xmm

State for specgen instruction: vmovups %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovups_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovups_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm9: 0x0₁₂₈ ∘ %ymm3_vmulss_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm1, %xmm0

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm0: %ymm0_mulss_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm0: (%ymm0_mulss_xmm_xmm[255:128] ∘ %ymm1_mulss_xmm_xmm[127:0])[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_mulss_xmm_xmm
%rdx/%rdx: %rdx_mulss_xmm_xmm

%xmm0: (%ymm0_mulss_xmm_xmm[255:128] ∘ %ymm1_mulss_xmm_xmm[127:0])[127:0]
%xmm1: %ymm1_mulss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vmulps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmulps_xmm_xmm_xmm

%xmm0: %ymm0_vmulps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vmulps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmulps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmulps_xmm_xmm_xmm

%xmm0: %ymm0_vmulps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vmulps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vmulps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmulps_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm2

Final state:
%rax/%rax: %rax_vmulps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmulps_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vmulps %ymm1, %ymm2, %ymm1

Final state:
%ymm1: mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[255:224], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[223:192], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[191:160], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[159:128], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[127:96], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[95:64], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[63:32], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[31:0], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vmulps %xmm2, %xmm0, %xmm8

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r10_r11_xmm1
callq .move_064_128_r8_r9_xmm2
vmulps %ymm1, %ymm2, %ymm1
retq 

Initial state:
%ymm8: %ymm8_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][31:0])

State for specgen instruction: vmulps %xmm3, %xmm2, %xmm1:
%ymm1: mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[255:224], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[223:192], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[191:160], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[159:128], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[127:96], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[95:64], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[63:32], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ mul_single((0x0₂₅₆[255:128] ∘ (%ymm2_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[31:0], (0x0₂₅₆[255:128] ∘ (%ymm3_vmulps_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm3_vmulps_xmm_xmm_xmm[127:0][63:0][63:0]))[31:0])))))))

Final state
%ymm8: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mul_single(%ymm1_mulss_xmm_xmm[127:96], %ymm2_mulss_xmm_xmm[127:96]) ∘ (mul_single(%ymm1_mulss_xmm_xmm[95:64], %ymm2_mulss_xmm_xmm[95:64]) ∘ (mul_single(%ymm1_mulss_xmm_xmm[63:32], %ymm2_mulss_xmm_xmm[63:32]) ∘ mul_single(%ymm1_mulss_xmm_xmm[31:0], %ymm2_mulss_xmm_xmm[31:0])))))))

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_mulss_xmm_xmm
%rdx/%rdx: %rdx_mulss_xmm_xmm

%xmm0: (%ymm0_mulss_xmm_xmm[255:128] ∘ %ymm1_mulss_xmm_xmm[127:0])[127:0]
%xmm1: (%ymm1_mulss_xmm_xmm[255:128] ∘ ((%ymm11_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mul_single(%ymm1_mulss_xmm_xmm[127:96], %ymm2_mulss_xmm_xmm[127:96]) ∘ (mul_single(%ymm1_mulss_xmm_xmm[95:64], %ymm2_mulss_xmm_xmm[95:64]) ∘ (mul_single(%ymm1_mulss_xmm_xmm[63:32], %ymm2_mulss_xmm_xmm[63:32]) ∘ mul_single(%ymm1_mulss_xmm_xmm[31:0], %ymm2_mulss_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for mulss %xmm9, %xmm2

.target:
movdqa %xmm1, %xmm0
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
vmulps %xmm2, %xmm0, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm2: %ymm2_vmulss_xmm_xmm_xmm[127:0]

State for specgen instruction: mulss %xmm2, %xmm1:
%xmm1: (%ymm1_mulss_xmm_xmm[255:128] ∘ ((%ymm11_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_mulss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_mulss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mul_single(%ymm1_mulss_xmm_xmm[127:96], %ymm2_mulss_xmm_xmm[127:96]) ∘ (mul_single(%ymm1_mulss_xmm_xmm[95:64], %ymm2_mulss_xmm_xmm[95:64]) ∘ (mul_single(%ymm1_mulss_xmm_xmm[63:32], %ymm2_mulss_xmm_xmm[63:32]) ∘ mul_single(%ymm1_mulss_xmm_xmm[31:0], %ymm2_mulss_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0]

Final state
%xmm2: (%ymm2_vmulss_xmm_xmm_xmm[255:128] ∘ (%ymm2_vmulss_xmm_xmm_xmm[127:32] ∘ mul_single(%ymm2_vmulss_xmm_xmm_xmm[31:0], %ymm3_vmulss_xmm_xmm_xmm[31:0])))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: %ymm0_vmovaps_xmm_xmm[127:0]
%xmm1: %ymm1_vmovaps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovaps %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmulss_xmm_xmm_xmm

State for specgen instruction: vmovaps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmulss_xmm_xmm_xmm[127:32] ∘ mul_single(%ymm2_vmulss_xmm_xmm_xmm[31:0], %ymm3_vmulss_xmm_xmm_xmm[31:0]))

=====================================
=====================================
Computing circuit for vmulss %xmm3, %xmm2, %xmm1

.target:
vmovups %xmm3, %xmm9
mulss %xmm9, %xmm2
vmovaps %xmm2, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vmulss %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmulss_xmm_xmm_xmm[127:32] ∘ mul_single(%ymm2_vmulss_xmm_xmm_xmm[31:0], %ymm3_vmulss_xmm_xmm_xmm[31:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2[127:32] ∘ mul_single(%ymm2[31:0], %ymm3[31:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm2[127:32] ∘ mul_single(%ymm2[31:0], %ymm3[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/