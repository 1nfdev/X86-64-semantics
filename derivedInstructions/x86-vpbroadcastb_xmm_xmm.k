// Autogenerated using stratification.
requires "x86-configuration.k"

module VPBROADCASTB-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpbroadcastb R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)))))) )


)

    </regstate>
endmodule

module VPBROADCASTB-XMM-XMM-SEMANTICS
  imports VPBROADCASTB-XMM-XMM
endmodule
/*
TargetInstr:
vpbroadcastb %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_128_064_xmm2_r12_r13   #  1     0     5      OPC=callq_label
circuit:movsbw %r12b, %ax                  #  2     0x5   5      OPC=movsbw_r16_r8
circuit:movw %ax, %r12w                    #  3     0xa   4      OPC=movw_r16_r16
circuit:callq .move_064_128_r12_r13_xmm2   #  4     0xe   5      OPC=callq_label
circuit:callq .move_128_064_xmm2_r8_r9     #  5     0x13  5      OPC=callq_label
circuit:vpbroadcastd %xmm2, %ymm1          #  6     0x18  5      OPC=vpbroadcastd_ymm_xmm
circuit:callq .move_r8b_to_byte_3_of_ymm1  #  7     0x1d  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_2_of_ymm1  #  8     0x22  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_1_of_ymm1  #  9     0x27  5      OPC=callq_label
circuit:vpbroadcastd %xmm1, %xmm1          #  10    0x2c  5      OPC=vpbroadcastd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpbroadcastb %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vpbroadcastb_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastb_xmm_xmm

%xmm0: %ymm0_vpbroadcastb_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastb_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xfffffffffffffff8, %rbx

Final state:
%rbx/%rbx: 0xfffffffffffffff8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ch

Final state:
%rcx/%ch: %rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ch, %cl

Final state:
%rcx/%cl: (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xchgb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]
%rbx/%bl: %rbx_xchgb_r8_rh

%cf: %cf_xchgb_r8_rh
%pf: %pf_xchgb_r8_rh
%af: %af_xchgb_r8_rh
%zf: %zf_xchgb_r8_rh
%sf: %sf_xchgb_r8_rh
%of: %of_xchgb_r8_rh

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:0]
%rbx/%bl: %rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8]

%cf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xchgb_r8_rh[11:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁
%of: (%rax_xchgb_r8_rh[15:15] = 0x1₁ ↔ %rbx_xchgb_r8_rh[7:7] = 0x1₁) ∧ !(%rax_xchgb_r8_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0]

-------------------------------------
=====================================
Computing circuit for xchgb %ah, %bl

.target:
movb %bl, %ch
movb %ch, %cl
movzbl %ah, %edx
xaddb %bl, %dl
movb %cl, %ah
retq 

Initial state:
%rax/%ah: %rax_xchgb_rh_r8
%rbx/%bl: %rbx_xchgb_rh_r8

State for specgen instruction: xchgb %ah, %bl:
%rax/%ah: %rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0]
%rbx/%bl: %rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0])[15:8]
  after renaming it is => %rbx_xchgb_rh_r8[7:0]

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8])[7:0]
  after renaming it is => %rax_xchgb_rh_r8[15:8]

Final state
%rax/%ah: %rax_xchgb_rh_r8[63:16] ∘ %rbx_xchgb_rh_r8[7:0] ∘ %rax_xchgb_rh_r8[7:0]
%rbx/%bl: %rbx_xchgb_rh_r8[63:8] ∘ %rax_xchgb_rh_r8[15:8]

=====================================
=====================================
Computing circuit for xchgb %cl, %bh

.target:
xchgb %ah, %bl
retq 

Initial state:
%rcx/%cl: %rcx_movsbw_r16_r8
%rbx/%bh: 0xfffffffffffffff8₆₄

State for specgen instruction: xchgb %bl, %ah:
%rax/%ah: %rax_xchgb_rh_r8[63:16] ∘ %rbx_xchgb_rh_r8[7:0] ∘ %rax_xchgb_rh_r8[7:0]
%rbx/%bl: %rbx_xchgb_rh_r8[63:8] ∘ %rax_xchgb_rh_r8[15:8]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_xchgb_rh_r8[63:16] ∘ %rbx_xchgb_rh_r8[7:0] ∘ %rax_xchgb_rh_r8[7:0])[15:8]
  after renaming it is => %rcx_movsbw_r16_r8[7:0]

Register        -> %bl
  translates to => %cl
Value is               -> (%rbx_xchgb_rh_r8[63:8] ∘ %rax_xchgb_rh_r8[15:8])[7:0]
  after renaming it is => 0xff₈

Final state
%rcx/%cl: %rcx_movsbw_r16_r8[63:8] ∘ 0xff₈
%rbx/%bh: 0xfffffffffffffff8₆₄[63:16] ∘ %rcx_movsbw_r16_r8[7:0] ∘ 0xfffffffffffffff8₆₄[7:0]

=====================================
-------------------------------------
Getting base circuit for movb %ah, %cl

Final state:
%rcx/%cl: %rcx_movsbl_r32_rh[63:8] ∘ %rax_movsbl_r32_rh[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %ebp

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbp/%rbp: %rbp_movsbl_r32_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbp
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

Final state
%rbp/%rbp: 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

=====================================
-------------------------------------
Getting base circuit for movq %rbp, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bh, %eax

.target:
movb %ah, %cl
movsbl %cl, %ebp
movq %rbp, %rbx
retq 

Initial state:
%rax/%rax: %rax_movsbw_r16_r8

State for specgen instruction: movsbl %ah, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]

Register        -> %rbx
  translates to => %rax
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rax_movsbl_r32_rh[15:8])[31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_movsbw_r16_r8[7:0])[31:0]

Final state
%rax/%rax: 0x0₃₂ ∘ sign-extend-64(%rcx_movsbw_r16_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rcx_movw_r16_r16[15:0])

-------------------------------------
=====================================
Computing circuit for movw %ax, %bx

.target:
movswq %cx, %rbx
retq 

Initial state:
%rbx/%bx: 0xfffffffffffffff8₆₄[63:16] ∘ %rcx_movsbw_r16_r8[7:0] ∘ 0xfffffffffffffff8₆₄[7:0]

State for specgen instruction: movw %cx, %bx:
%rbx/%bx: sign-extend-64(%rcx_movw_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64(%rcx_movw_r16_r16[15:0])[15:0]
  after renaming it is => sign-extend-64(%rcx_movsbw_r16_r8[7:0])[15:0]

Final state
%rbx/%bx: (0xfffffffffffffff8₆₄[63:16] ∘ %rcx_movsbw_r16_r8[7:0] ∘ 0xfffffffffffffff8₆₄[7:0])[63:16] ∘ sign-extend-64(%rcx_movsbw_r16_r8[7:0])[15:0]

=====================================
=====================================
Computing circuit for movsbw %r12b, %ax

.target:
movq $0xfffffffffffffff8, %rbx
xchgb %cl, %bh
movsbl %bh, %eax
movw %ax, %bx
retq 

Initial state:
%rax/%ax: %rax_vpbroadcastb_xmm_xmm

State for specgen instruction: movsbw %cl, %bx:
%rbx/%bx: (0xfffffffffffffff8₆₄[63:16] ∘ %rcx_movsbw_r16_r8[7:0] ∘ 0xfffffffffffffff8₆₄[7:0])[63:16] ∘ sign-extend-64(%rcx_movsbw_r16_r8[7:0])[15:0]

Register        -> %bx
  translates to => %ax
Value is               -> ((0xfffffffffffffff8₆₄[63:16] ∘ %rcx_movsbw_r16_r8[7:0] ∘ 0xfffffffffffffff8₆₄[7:0])[63:16] ∘ sign-extend-64(%rcx_movsbw_r16_r8[7:0])[15:0])[15:0]
  after renaming it is => sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]

Final state
%rax/%ax: %rax_vpbroadcastb_xmm_xmm[63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rcx_movw_r16_r16[15:0])

-------------------------------------
=====================================
Computing circuit for movw %ax, %r12w

.target:
movswq %cx, %rbx
retq 

Initial state:
%r12/%r12w: %ymm2_vpbroadcastb_xmm_xmm[127:0][63:0]

State for specgen instruction: movw %cx, %bx:
%rbx/%bx: sign-extend-64(%rcx_movw_r16_r16[15:0])

Register        -> %bx
  translates to => %r12w
Value is               -> sign-extend-64(%rcx_movw_r16_r16[15:0])[15:0]
  after renaming it is => sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]

Final state
%r12/%r12w: %ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm2

Final state:
%rax/%rax: %rax_vpbroadcastb_xmm_xmm[63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]
%rdx/%rdx: %rdx_vpbroadcastb_xmm_xmm

%xmm0: %ymm0_vpbroadcastb_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastb_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpbroadcastb_xmm_xmm[63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]
%rdx/%rdx: %rdx_vpbroadcastb_xmm_xmm

%xmm0: %ymm0_vpbroadcastb_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastb_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vpbroadcastd_ymm_xmm
%rdx/%rdx: %rdx_vpbroadcastd_ymm_xmm

%xmm0: %ymm0_vpbroadcastd_ymm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastd_ymm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm3

Final state:
%rax/%rax: %rax_vpbroadcastd_ymm_xmm
%rdx/%rdx: %rdx_vpbroadcastd_ymm_xmm

%xmm0: %ymm0_vpbroadcastd_ymm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastd_ymm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: %ymm1_movd_r32_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm1_r10_r11

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for movd %xmm2, %r8d

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
callq .move_128_256_xmm8_xmm9_ymm1
callq .move_128_064_xmm1_r10_r11
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r8/%r8: %r8_vbroadcastss_xmm_xmm

State for specgen instruction: movd %xmm1, %ebx:
%rbx/%rbx: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][127:64][31:0][31:0] ∘ ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][63:0][31:0][31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][127:64][31:0][31:0] ∘ ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][63:0][31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0]

=====================================
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r8d, %r9

Final state:
%r9/%r9: sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm10_xmm11

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm8_xmm9

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vbroadcastss %xmm3, %xmm13

.target:
movd %xmm2, %r8d
vzeroall 
movslq %r8d, %r9
callq .move_064_128_r8_r9_xmm1
callq .move_128_64_xmm1_xmm10_xmm11
callq .move_128_64_xmm1_xmm8_xmm9
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%ymm13: %ymm13_vpbroadcastd_ymm_xmm

State for specgen instruction: vbroadcastss %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0])

Final state
%ymm13: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm13, %xmm12

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm12: %ymm12_vpbroadcastd_ymm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm12: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vpbroadcastd_ymm_xmm
%rdx/%rdx: %rdx_vpbroadcastd_ymm_xmm

%xmm0: %ymm0_vpbroadcastd_ymm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0]))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastd %xmm2, %ymm1

.target:
callq .move_128_064_xmm2_r12_r13
callq .move_064_128_r12_r13_xmm3
vbroadcastss %xmm3, %xmm13
vmovdqa %xmm13, %xmm12
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm1: %ymm1_vpbroadcastb_xmm_xmm

State for specgen instruction: vpbroadcastd %xmm2, %ymm1:
%ymm1: (0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0]))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0] ∘ %ymm2_vpbroadcastd_ymm_xmm[31:0]))[127:0][127:0]

Final state
%ymm1: %ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_3_of_ymm1

Final state:
%rax/%rax: %rax_vpbroadcastb_xmm_xmm[63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]
%rdx/%rdx: %rdx_vpbroadcastb_xmm_xmm

%xmm0: %ymm0_vpbroadcastb_xmm_xmm[127:0]
%xmm1: ((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_2_of_ymm1

Final state:
%rax/%rax: %rax_vpbroadcastb_xmm_xmm[63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]
%rdx/%rdx: %rdx_vpbroadcastb_xmm_xmm

%xmm0: %ymm0_vpbroadcastb_xmm_xmm[127:0]
%xmm1: (((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[255:24] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ ((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[15:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_1_of_ymm1

Final state:
%rax/%rax: %rax_vpbroadcastb_xmm_xmm[63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]
%rdx/%rdx: %rdx_vpbroadcastb_xmm_xmm

%xmm0: %ymm0_vpbroadcastb_xmm_xmm[127:0]
%xmm1: ((((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[255:24] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ ((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[15:0])[255:16] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[255:24] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ ((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[15:0])[7:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vpbroadcastd_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastd_xmm_xmm

%xmm0: %ymm0_vpbroadcastd_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm3

Final state:
%rax/%rax: %rax_vpbroadcastd_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastd_xmm_xmm

%xmm0: %ymm0_vpbroadcastd_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: %ymm1_movd_r32_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm1_r10_r11

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movd_r32_xmm
%rdx/%rdx: %rdx_movd_r32_xmm

%xmm0: %ymm0_movd_r32_xmm[127:0]
%xmm1: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for movd %xmm2, %r8d

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
callq .move_128_256_xmm8_xmm9_ymm1
callq .move_128_064_xmm1_r10_r11
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r8/%r8: %r8_vbroadcastss_xmm_xmm

State for specgen instruction: movd %xmm1, %ebx:
%rbx/%rbx: ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][127:64][31:0][31:0] ∘ ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][63:0][31:0][31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][127:64][31:0][31:0] ∘ ((%ymm9_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][63:32]))[127:0][127:0] ∘ (%ymm8_movd_r32_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movd_r32_xmm[127:0][31:0]))[127:0][127:0])[127:0][63:0][31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0]

=====================================
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r8d, %r9

Final state:
%r9/%r9: sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm10_xmm11

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm8_xmm9

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_vbroadcastss_xmm_xmm
%rdx/%rdx: %rdx_vbroadcastss_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vbroadcastss %xmm3, %xmm1

.target:
movd %xmm2, %r8d
vzeroall 
movslq %r8d, %r9
callq .move_064_128_r8_r9_xmm1
callq .move_128_64_xmm1_xmm10_xmm11
callq .move_128_64_xmm1_xmm8_xmm9
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vpbroadcastd_xmm_xmm

State for specgen instruction: vbroadcastss %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][127:64]))[127:0][31:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₆₄ ∘ (0x0₂₅₆[255:128] ∘ (sign-extend-64((0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[31:0])[63:0] ∘ (0x0₃₂ ∘ %ymm2_vbroadcastss_xmm_xmm[31:0])[63:0]))[127:0][63:0]))[127:0][31:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_xmm_xmm[31:0] ∘ %ymm2_vpbroadcastd_xmm_xmm[31:0] ∘ %ymm2_vpbroadcastd_xmm_xmm[31:0] ∘ %ymm2_vpbroadcastd_xmm_xmm[31:0])

=====================================
=====================================
Computing circuit for vpbroadcastd %xmm1, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
callq .move_064_128_r12_r13_xmm3
vbroadcastss %xmm3, %xmm1
retq 

Initial state:
%ymm1: (((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[255:24] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ ((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[15:0])[255:16] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[255:24] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ ((%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[255:32] ∘ (%ymm2_vpbroadcastb_xmm_xmm[255:128] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][127:64][63:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[127:0][63:0][63:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])[63:0]))[127:0][63:0][7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[31:16] ∘ sign-extend-64(%ymm2_vpbroadcastb_xmm_xmm[7:0])[15:0])))[23:0])[15:0])[7:0]

State for specgen instruction: vpbroadcastd %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastd_xmm_xmm[31:0] ∘ %ymm2_vpbroadcastd_xmm_xmm[31:0] ∘ %ymm2_vpbroadcastd_xmm_xmm[31:0] ∘ %ymm2_vpbroadcastd_xmm_xmm[31:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0]))

=====================================
=====================================
Computing circuit for vpbroadcastb %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
movsbw %r12b, %ax
movw %ax, %r12w
callq .move_064_128_r12_r13_xmm2
callq .move_128_064_xmm2_r8_r9
vpbroadcastd %xmm2, %ymm1
callq .move_r8b_to_byte_3_of_ymm1
callq .move_r8b_to_byte_2_of_ymm1
callq .move_r8b_to_byte_1_of_ymm1
vpbroadcastd %xmm1, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vpbroadcastb %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0]) ∘ (%ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0] ∘ %ymm2_vpbroadcastb_xmm_xmm[7:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0]) ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0]) ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0]) ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0]) ∘ (%ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0] ∘ %ymm2[7:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/