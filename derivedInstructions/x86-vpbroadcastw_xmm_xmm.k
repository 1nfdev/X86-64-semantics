// Autogenerated using stratification.
requires "x86-configuration.k"

module VPBROADCASTW-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpbroadcastw R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 240, 256), extractMInt(getParentValue(R1, RSMap), 240, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 240, 256), extractMInt(getParentValue(R1, RSMap), 240, 256))), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 240, 256), extractMInt(getParentValue(R1, RSMap), 240, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 240, 256), extractMInt(getParentValue(R1, RSMap), 240, 256))))) )


)

    </regstate>
endmodule

module VPBROADCASTW-XMM-XMM-SEMANTICS
  imports VPBROADCASTW-XMM-XMM
endmodule
/*
TargetInstr:
vpbroadcastw %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_128_032_xmm2_r10d_r11d_r12d_r13d  #  1     0     5      OPC=callq_label
circuit:callq .move_016_032_r10w_r11w_ebx             #  2     0x5   5      OPC=callq_label
circuit:callq .move_016_008_bx_r8b_r9b                #  3     0xa   5      OPC=callq_label
circuit:callq .move_r9b_to_byte_3_of_rbx              #  4     0xf   5      OPC=callq_label
circuit:vmovd %ebx, %xmm1                             #  5     0x14  4      OPC=vmovd_xmm_r32
circuit:callq .move_r9b_to_byte_19_of_ymm1            #  6     0x18  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_2_of_ymm1             #  7     0x1d  5      OPC=callq_label
circuit:vbroadcastss %xmm1, %xmm1                     #  8     0x22  5      OPC=vbroadcastss_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpbroadcastw %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm2[15:0] ∘ %ymm2[15:0] ∘ (%ymm2[15:0] ∘ %ymm2[15:0]) ∘ (%ymm2[15:0] ∘ %ymm2[15:0]) ∘ (%ymm2[15:0] ∘ %ymm2[15:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/