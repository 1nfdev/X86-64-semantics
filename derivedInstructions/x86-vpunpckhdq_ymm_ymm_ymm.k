// Autogenerated using stratification.
requires "x86-configuration.k"

module VPUNPCKHDQ-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpunpckhdq R1:Ymm, R2:Ymm, R3:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 32), extractMInt(getParentValue(R2, RSMap), 0, 32)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 128, 160)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), extractMInt(getParentValue(R2, RSMap), 160, 192)))) )


)

    </regstate>
endmodule

module VPUNPCKHDQ-YMM-YMM-YMM-SEMANTICS
  imports VPUNPCKHDQ-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vpunpckhdq %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:vunpckhps %ymm3, %ymm2, %ymm15  #  1     0    4      OPC=vunpckhps_ymm_ymm_ymm
circuit:vmaxps %ymm15, %ymm15, %ymm1    #  2     0x4  5      OPC=vmaxps_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpunpckhdq %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : %ymm3[255:224] ∘ (%ymm2[255:224] ∘ (%ymm3[223:192] ∘ (%ymm2[223:192] ∘ (%ymm3[127:96] ∘ (%ymm2[127:96] ∘ (%ymm3[95:64] ∘ %ymm2[95:64]))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/