// Autogenerated using stratification.
requires "x86-configuration.k"

module VSUBSD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vsubsd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 128, 192), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) ) , 64))) )


)

    </regstate>
endmodule

module VSUBSD-XMM-XMM-XMM-SEMANTICS
  imports VSUBSD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vsubsd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_64_xmm2_xmm8_xmm9  #  1     0    5      OPC=callq_label
circuit:vsubpd %xmm3, %xmm8, %xmm0         #  2     0x5  4      OPC=vsubpd_xmm_xmm_xmm
circuit:vunpcklpd %xmm9, %xmm0, %xmm1      #  3     0x9  5      OPC=vunpcklpd_xmm_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vsubsd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vsubsd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vsubsd_xmm_xmm_xmm

%xmm0: %ymm0_vsubsd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vsubsd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_vsubpd_xmm_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: %ymm0_vmovaps_xmm_xmm[127:0]
%xmm1: %ymm1_vmovaps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovaps %xmm3, %xmm7

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm7: %ymm7_vsubpd_xmm_xmm_xmm

State for specgen instruction: vmovaps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm7: 0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vsubpd %ymm7, %ymm1, %ymm1

Final state:
%ymm1: sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[255:192], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[255:192]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[191:128], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[191:128]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[127:64], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[127:64]) ∘ sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[63:0], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[63:0])))

-------------------------------------
=====================================
Computing circuit for vsubpd %xmm3, %xmm8, %xmm0

.target:
vmovupd %xmm2, %xmm1
vmovaps %xmm3, %xmm7
vsubpd %ymm7, %ymm1, %ymm1
retq 

Initial state:
%ymm0: %ymm0_vsubsd_xmm_xmm_xmm

State for specgen instruction: vsubpd %xmm3, %xmm2, %xmm1:
%ymm1: sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[255:192], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[255:192]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[191:128], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[191:128]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[127:64], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[127:64]) ∘ sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[63:0], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[63:0])))

Final state
%ymm0: 0x0₆₄ ∘ (0x0₆₄ ∘ (sub_double(0x0₆₄, %ymm3_vsubsd_xmm_xmm_xmm[127:64]) ∘ sub_double(%ymm2_vsubsd_xmm_xmm_xmm[63:0], %ymm3_vsubsd_xmm_xmm_xmm[63:0])))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm3, %r8

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r8/%r8: %r8_vunpcklpd_xmm_xmm_xmm

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r8
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm3_vunpcklpd_xmm_xmm_xmm[63:0]

Final state
%r8/%r8: %ymm3_vunpcklpd_xmm_xmm_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vunpcklpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vunpcklpd_xmm_xmm_xmm

%xmm0: %ymm0_vunpcklpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vunpcklpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r8, %r11

Final state:
%r11/%r11: %ymm3_vunpcklpd_xmm_xmm_xmm[63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vunpcklpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vunpcklpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vunpcklpd_xmm_xmm_xmm[63:0][63:0] ∘ %ymm2_vunpcklpd_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vunpcklpd %xmm9, %xmm0, %xmm1

.target:
movq %xmm3, %r8
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r8, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vsubsd_xmm_xmm_xmm

State for specgen instruction: vunpcklpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm3_vunpcklpd_xmm_xmm_xmm[63:0][63:0] ∘ %ymm2_vunpcklpd_xmm_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vsubsd_xmm_xmm_xmm[127:64] ∘ sub_double(%ymm2_vsubsd_xmm_xmm_xmm[63:0], %ymm3_vsubsd_xmm_xmm_xmm[63:0]))

=====================================
=====================================
Computing circuit for vsubsd %xmm3, %xmm2, %xmm1

.target:
callq .move_128_64_xmm2_xmm8_xmm9
vsubpd %xmm3, %xmm8, %xmm0
vunpcklpd %xmm9, %xmm0, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vsubsd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vsubsd_xmm_xmm_xmm[127:64] ∘ sub_double(%ymm2_vsubsd_xmm_xmm_xmm[63:0], %ymm3_vsubsd_xmm_xmm_xmm[63:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2[127:64] ∘ sub_double(%ymm2[63:0], %ymm3[63:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm2[127:64] ∘ sub_double(%ymm2[63:0], %ymm3[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/