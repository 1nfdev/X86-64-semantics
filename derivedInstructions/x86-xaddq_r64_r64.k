// Autogenerated using stratification.
requires "x86-configuration.k"

module XADDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (getParentValue(R2, RSMap) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires sameRegisters(R1, R2)
endmodule

module XADDQ-R64-R64-SEMANTICS
  imports XADDQ-R64-R64
endmodule
/*
TargetInstr:
xaddq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %rcx %rbx %cf %pf %af %zf %sf %of }
must write:{ %rcx %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq %rbx, %rsi   #  1     0    3      OPC=movq_r64_r64
circuit:addq %rsi, %rcx   #  2     0x3  3      OPC=addq_r64_r64
circuit:xchgq %rcx, %rbx  #  3     0x6  3      OPC=xchgq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xaddq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rcx %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rcx %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq %rbx, %rsi

Final state:
%rsi/%rsi: %rbx_xaddq_r64_r64

-------------------------------------
-------------------------------------
Getting base circuit for orq %rbx, %rbx

Final state:
%rbx/%rbx: %rbx_addq_r64_r64 | %rbx_addq_r64_r64

%cf: false
%pf: !((%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64) = 0x0₆₄
%sf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for addq %rsi, %rcx

.target:
orq %rbx, %rbx
adcq %rcx, %rbx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddq_r64_r64

%cf: %cf_xaddq_r64_r64
%pf: %pf_xaddq_r64_r64
%af: %af_xaddq_r64_r64
%zf: %zf_xaddq_r64_r64
%sf: %sf_xaddq_r64_r64
%of: %of_xaddq_r64_r64

State for specgen instruction: addq %rcx, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rcx
Value is               -> ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]
  after renaming it is => (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0]

Final state
%rcx/%rcx: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0]

%cf: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddq_r64_r64[3:0] + 0x0₁ ∘ %rcx_xaddq_r64_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:63] = 0x1₁
%of: (%rbx_xaddq_r64_r64[63:63] = 0x1₁ ↔ %rcx_xaddq_r64_r64[63:63] = 0x1₁) ∧ !(%rbx_xaddq_r64_r64[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:63] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: %rdx_xchgq_r64_r64

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %rcx, %rbx

Final state:
%rbx/%rbx: %rcx_xchgq_r64_r64

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_edx

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: 0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0])

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_edx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: 0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0])

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rcx

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: 0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0])

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
=====================================
Computing circuit for xchgq %rcx, %rbx

.target:
callq .move_064_032_rbx_r8d_r9d
movq %rcx, %rbx
callq .move_016_032_r8w_r9w_edx
callq .move_032_016_edx_r8w_r9w
callq .move_032_064_r8d_r9d_rcx
retq 

Initial state:
%rcx/%rcx: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0]
%rbx/%rbx: %rbx_xaddq_r64_r64

State for specgen instruction: xchgq %rcx, %rbx:
%rcx/%rcx: ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][31:16])[31:0][31:0] ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][15:0])[31:0][31:0]
%rbx/%rbx: %rcx_xchgq_r64_r64

Register        -> %rcx
  translates to => %rcx
Value is               -> ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][31:16])[31:0][31:0] ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][15:0])[31:0][31:0]
  after renaming it is => %rbx_xaddq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> %rcx_xchgq_r64_r64
  after renaming it is => (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0]

Final state
%rcx/%rcx: %rbx_xaddq_r64_r64
%rbx/%rbx: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0]

=====================================
=====================================
Computing circuit for xaddq %rcx, %rbx

.target:
movq %rbx, %rsi
addq %rsi, %rcx
xchgq %rcx, %rbx
retq 

Initial state:
%rcx/%rcx: %rcx
%rbx/%rbx: %rbx

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: xaddq %rcx, %rbx:
%rcx/%rcx: %rbx_xaddq_r64_r64
%rbx/%rbx: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0]

%cf: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddq_r64_r64[3:0] + 0x0₁ ∘ %rcx_xaddq_r64_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:63] = 0x1₁
%of: (%rbx_xaddq_r64_r64[63:63] = 0x1₁ ↔ %rcx_xaddq_r64_r64[63:63] = 0x1₁) ∧ !(%rbx_xaddq_r64_r64[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddq_r64_r64 + 0x0₁ ∘ %rcx_xaddq_r64_r64)[63:63] = 0x1₁)

Final state
%rcx/%rcx: %rbx
%rbx/%rbx: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:0]

%cf: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx[3:0] + 0x0₁ ∘ %rcx[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:63] = 0x1₁
%of: (%rbx[63:63] = 0x1₁ ↔ %rcx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:63] = 0x1₁)

=====================================
Circuits:

%rcx   : %rbx
%rbx   : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:0]

%cf    : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[64:64] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rbx[3:0] + 0x0₁ ∘ %rcx[3:0])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:63] = 0x1₁
%of    : (%rbx[63:63] = 0x1₁ ↔ %rcx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rcx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/
