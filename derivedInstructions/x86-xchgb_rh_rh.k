// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgb R1:Rh, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module XCHGB-RH-RH-SEMANTICS
  imports XCHGB-RH-RH
endmodule
/*
TargetInstr:
xchgb %bh, %ah
RWSet:
maybe read:{ %ah %bh }
must read:{ %ah %bh }
maybe write:{ %ah %bh }
must write:{ %ah %bh }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorl %esi, %esi  #  1     0    2      OPC=xorl_r32_r32
circuit:decb %sil        #  2     0x2  2      OPC=decb_r8
circuit:setae %al        #  3     0x4  3      OPC=setae_r8
circuit:setpo %bl        #  4     0x7  3      OPC=setpo_r8
circuit:xchgw %ax, %bx   #  5     0xa  3      OPC=xchgw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgb %bh, %ah

  maybe read:      { %ah %bh }
  must read:       { %ah %bh }
  maybe write:     { %ah %bh }
  must write:      { %ah %bh }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %esi, %esi

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rsi/%rsi: %rsi_xchgb_rh_rh

%cf: %cf_xchgb_rh_rh
%pf: %pf_xchgb_rh_rh
%zf: %zf_xchgb_rh_rh
%sf: %sf_xchgb_rh_rh
%of: %of_xchgb_rh_rh

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r9

Final state:
%r9/%r9: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_decb_r8 ⊕ %rcx_decb_r8

%cf: false
%pf: !((%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rcx_decb_r8 ⊕ %rcx_decb_r8) = 0x0₆₄
%sf: (%rcx_decb_r8 ⊕ %rcx_decb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %r9b, %bl

Final state:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for decb %sil

.target:
movq $0xffffffffffffffff, %r9
xorq %rcx, %rcx
adcb %r9b, %bl
retq 

Initial state:
%rsi/%sil: 0x0₆₄

%pf: true
%af: %af_xchgb_rh_rh
%zf: true
%sf: false
%of: false

State for specgen instruction: decb %bl:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %sil
Value is               -> (%rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0])[7:0]
  after renaming it is => 0xff₈

Final state
%rsi/%sil: 0x0₆₄[63:8] ∘ 0xff₈

%pf: true
%af: false
%zf: false
%sf: true
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setae_r8
%rdx/%rdx: %rdx_setae_r8

%xmm0: %ymm0_setae_r8[127:0]
%xmm1: %ymm1_setae_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_setae_r8
%rdx/%rdx: %rdx_setae_r8

%xmm0: %ymm0_setae_r8[127:0]
%xmm1: %ymm1_setae_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setae_r8
%rdx/%rdx: %rdx_setae_r8

%xmm0: %ymm0_setae_r8[127:0]
%xmm1: %ymm1_setae_r8[127:0]

-------------------------------------
=====================================
Computing circuit for setae %al

.target:
callq .read_cf_into_rbx
callq .set_szp_for_bl
callq .read_zf_into_rbx
retq 

Initial state:
%rax/%al: %rax_xchgb_rh_rh

State for specgen instruction: setae %bl:
%rbx/%bl: 0x0₆₃ ∘ ((0x0₆₃ ∘ (%cf_setae_r8 ? 0x1₁ : 0x0₁))[7:0] = 0x0₈ ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %al
Value is               -> (0x0₆₃ ∘ ((0x0₆₃ ∘ (%cf_setae_r8 ? 0x1₁ : 0x0₁))[7:0] = 0x0₈ ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => 0x1₈

Final state
%rax/%al: %rax_xchgb_rh_rh[63:8] ∘ 0x1₈

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_3_of_rbx_to_r9b

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %r8d, %r9d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%r8/%r8: 0x0₃₂ ∘ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[31:0]
%r9/%r9: (0x0₃₂ ∘ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[63:32])[63:8] ∘ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[31:24]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₆₄

Register        -> %rbx
  translates to => %r9
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => %pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄

Final state
%r8/%r8: 0x0₆₄
%r9/%r9: %pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for xorq %rbx, %rbx

Final state:
%rbx/%rbx: 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁)

%cf: false
%pf: !((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁)
%zf: (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁)) = 0x0₆₄
%sf: (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r9, %rbx

Final state:
%rbx/%rbx: 0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄)

%cf: false
%pf: !((0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][7:7] = 0x1₁)
%zf: (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄)) = 0x0₆₄
%sf: (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[63:63] = 0x1₁
%of: false

-------------------------------------
=====================================
Computing circuit for setpo %bl

.target:
callq .read_pf_into_rbx
callq .move_064_032_rbx_r8d_r9d
callq .move_byte_3_of_rbx_to_r9b
xchgl %r8d, %r9d
xorq %rbx, %rbx
callq .read_pf_into_rbx
xorq %r9, %rbx
retq 

Initial state:
%rbx/%bl: %rbx_xchgb_rh_rh

State for specgen instruction: setpo %bl:
%rbx/%bl: 0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄)

Register        -> %bl
  translates to => %bl
Value is               -> (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0]
  after renaming it is => 0x0₈

Final state
%rbx/%bl: %rbx_xchgb_rh_rh[63:8] ∘ 0x0₈

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %ax, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rax/%ax: %rax_xchgb_rh_rh[63:8] ∘ 0x1₈
%rbx/%bx: %rbx_xchgb_rh_rh[63:8] ∘ 0x0₈

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %ax
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xchgb_rh_rh[15:8] ∘ 0x0₈

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rax_xchgb_rh_rh[15:8] ∘ 0x1₈

Final state
%rax/%ax: (%rax_xchgb_rh_rh[63:8] ∘ 0x1₈)[63:16] ∘ (%rbx_xchgb_rh_rh[15:8] ∘ 0x0₈)
%rbx/%bx: (%rbx_xchgb_rh_rh[63:8] ∘ 0x0₈)[63:16] ∘ (%rax_xchgb_rh_rh[15:8] ∘ 0x1₈)

=====================================
=====================================
Computing circuit for xchgb %bh, %ah

.target:
xorl %esi, %esi
decb %sil
setae %al
setpo %bl
xchgw %ax, %bx
retq 

Initial state:
%rax/%ah: %rax
%rbx/%bh: %rbx

State for specgen instruction: xchgb %bh, %ah:
%rax/%ah: (%rax_xchgb_rh_rh[63:8] ∘ 0x1₈)[63:16] ∘ (%rbx_xchgb_rh_rh[15:8] ∘ 0x0₈)
%rbx/%bh: (%rbx_xchgb_rh_rh[63:8] ∘ 0x0₈)[63:16] ∘ (%rax_xchgb_rh_rh[15:8] ∘ 0x1₈)

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_xchgb_rh_rh[63:8] ∘ 0x1₈)[63:16] ∘ (%rbx_xchgb_rh_rh[15:8] ∘ 0x0₈))[15:8]
  after renaming it is => %rbx[15:8]

Register        -> %bh
  translates to => %bh
Value is               -> ((%rbx_xchgb_rh_rh[63:8] ∘ 0x0₈)[63:16] ∘ (%rax_xchgb_rh_rh[15:8] ∘ 0x1₈))[15:8]
  after renaming it is => %rax[15:8]

Final state
%rax/%ah: %rax[63:16] ∘ %rbx[15:8] ∘ %rax[7:0]
%rbx/%bh: %rbx[63:16] ∘ %rax[15:8] ∘ %rbx[7:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ %rbx[15:8] ∘ %rax[7:0]
%rbx   : %rbx[63:16] ∘ %rax[15:8] ∘ %rbx[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/