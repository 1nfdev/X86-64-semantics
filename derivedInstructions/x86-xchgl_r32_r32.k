// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate> 
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 32), extractMInt(getParentValue(R2, RSMap), 32, 64)) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 32, 64))), 0, 32), extractMInt(getParentValue(R1, RSMap), 32, 64))   )

  
)   

    </regstate>
endmodule

module XCHGL-R32-R32-SEMANTICS
  imports XCHGL-R32-R32
endmodule
/*
xchgl %ecx, %ebx
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %rcx %rbx }
must write:{ %rcx %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

circuit:movswq %bx, %r10                   #  1     0     4      OPC=movswq_r64_r16
circuit:movslq %ebx, %rbx                  #  2     0x4   3      OPC=movslq_r64_r32
circuit:callq .move_032_016_ecx_r8w_r9w    #  3     0x7   5      OPC=callq_label
circuit:callq .move_064_032_rbx_r10d_r11d  #  4     0xc   5      OPC=callq_label
circuit:movq %r10, %rcx                    #  5     0x11  3      OPC=movq_r64_r64
circuit:callq .move_016_032_r8w_r9w_ebx    #  6     0x14  5      OPC=callq_label

WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rcx %rbx }
  must write:      { %rcx %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ecx, %ebx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx
%rbx/%rbx: %rbx

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rcx[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx[31:0]

=====================================
Circuits:

%rcx   : 0x0₃₂ ∘ %rbx[31:0]
%rbx   : 0x0₃₂ ∘ %rcx[31:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/