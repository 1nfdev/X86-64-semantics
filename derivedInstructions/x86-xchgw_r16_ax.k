// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGW-R16-AX
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgw %ax, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RAX" |-> (concatenateMInt(extractMInt(getParentValue(%rax, RSMap), 0, 48), extractMInt(getParentValue(R2, RSMap), 48, 64)) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(%rax, RSMap), 48, 64))   )


)

    </regstate>
endmodule

module XCHGW-R16-AX-SEMANTICS
  imports XCHGW-R16-AX
endmodule
/*
TargetInstr:
xchgw %ax, %bx
RWSet:
maybe read:{ %ax %bx }
must read:{ %ax %bx }
maybe write:{ %ax %bx }
must write:{ %ax %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .move_016_008_bx_r12b_r13b  #  1     0     5      OPC=callq_label
circuit:movswq %ax, %rbx                  #  2     0x5   4      OPC=movswq_r64_r16
circuit:callq .move_008_016_r12b_r13b_cx  #  3     0x9   5      OPC=callq_label
circuit:movzwl %cx, %eax                  #  4     0xe   3      OPC=movzwl_r32_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgw %ax, %bx

  maybe read:      { %ax %bx }
  must read:       { %ax %bx }
  maybe write:     { %ax %bx }
  must write:      { %ax %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .move_016_008_bx_r12b_r13b

Final state:
%rax/%rax: %rax_xchgw_r16_ax
%rdx/%rdx: %rdx_xchgw_r16_ax

%xmm0: %ymm0_xchgw_r16_ax[127:0]
%xmm1: %ymm1_xchgw_r16_ax[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %ax, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rax_xchgw_r16_ax[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_ax
%rdx/%rdx: %rdx_xchgw_r16_ax

%xmm0: %ymm0_xchgw_r16_ax[127:0]
%xmm1: %ymm1_xchgw_r16_ax[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %cx, %eax

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rax/%rax: %rax_xchgw_r16_ax

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %rax
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₄₈ ∘ %rbx_xchgw_r16_ax[15:0]

Final state
%rax/%rax: 0x0₄₈ ∘ %rbx_xchgw_r16_ax[15:0]

=====================================
=====================================
Computing circuit for xchgw %ax, %bx

.target:
callq .move_016_008_bx_r12b_r13b
movswq %ax, %rbx
callq .move_008_016_r12b_r13b_cx
movzwl %cx, %eax
retq 

Initial state:
%rax/%ax: %rax
%rbx/%bx: %rbx

State for specgen instruction: xchgw %ax, %bx:
%rax/%ax: 0x0₄₈ ∘ %rbx_xchgw_r16_ax[15:0]
%rbx/%bx: sign-extend-64(%rax_xchgw_r16_ax[15:0])

Register        -> %ax
  translates to => %ax
Value is               -> (0x0₄₈ ∘ %rbx_xchgw_r16_ax[15:0])[15:0]
  after renaming it is => %rbx[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64(%rax_xchgw_r16_ax[15:0])[15:0]
  after renaming it is => %rax[15:0]

Final state
%rax/%ax: %rax[63:16] ∘ %rbx[15:0]
%rbx/%bx: %rbx[63:16] ∘ %rax[15:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ %rbx[15:0]
%rbx   : %rbx[63:16] ∘ %rax[15:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/