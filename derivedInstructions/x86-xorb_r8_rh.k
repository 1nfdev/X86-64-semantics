// Autogenerated using stratification.
requires "x86-configuration.k"

module XORB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 56, 57)) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module XORB-R8-RH-SEMANTICS
  imports XORB-R8-RH
endmodule
/*
TargetInstr:
xorb %ah, %bl
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %bl %cf %pf %zf %sf %of }
must write:{ %bl %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movzbl %ah, %ebp       #  1     0     3      OPC=movzbl_r32_rh
circuit:xorq %rax, %rax        #  2     0x3   3      OPC=xorq_r64_r64
circuit:setc %bh               #  3     0x6   3      OPC=setc_rh
circuit:movswq %bx, %rdx       #  4     0x9   4      OPC=movswq_r64_r16
circuit:xorq %rbp, %rdx        #  5     0xd   3      OPC=xorq_r64_r64
circuit:movslq %edx, %rbx      #  6     0x10  3      OPC=movslq_r64_r32
circuit:callq .set_szp_for_bl  #  7     0x13  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xorb %ah, %bl

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (%rbx[7:0] ⊕ %rax[15:8])

%cf    : false
%pf    : !((%rbx[0:0] ⊕ %rax[8:8]) = 0x1₁ ⊕ (%rbx[1:1] ⊕ %rax[9:9]) = 0x1₁ ⊕ (%rbx[2:2] ⊕ %rax[10:10]) = 0x1₁ ⊕ (%rbx[3:3] ⊕ %rax[11:11]) = 0x1₁ ⊕ (%rbx[4:4] ⊕ %rax[12:12]) = 0x1₁ ⊕ (%rbx[5:5] ⊕ %rax[13:13]) = 0x1₁ ⊕ (%rbx[6:6] ⊕ %rax[14:14]) = 0x1₁ ⊕ (%rbx[7:7] ⊕ %rax[15:15]) = 0x1₁)
%zf    : (%rbx[7:0] ⊕ %rax[15:8]) = 0x0₈
%sf    : (%rbx[7:7] ⊕ %rax[15:15]) = 0x1₁
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/