// Autogenerated using stratification.
requires "x86-configuration.k"

module XORW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "CF" |-> ( _ => mi(1, 0) )

 "AF" |-> (_ => undef)

convToRegKeys(R1) |-> (MI456 => MI456)

convToRegKeys(R2) |-> ( MI452 => mi(64, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(64, uvalueMInt((#ifMInt (eqMInt(mi(16, 1), lshrMInt(extractMInt(orMInt(andMInt(MI452, mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), 48, 64), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), mi(64, svalueMInt(extractMInt(MI452, 48, 64)))), 48, 64))) )

 "ZF" |-> ( _ => (#ifMInt (eqMInt(extractMInt(mi(64, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(64, uvalueMInt((#ifMInt (eqMInt(mi(16, 1), lshrMInt(extractMInt(orMInt(andMInt(MI452, mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), 48, 64), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), mi(64, svalueMInt(extractMInt(MI452, 48, 64)))), 48, 64))), 48, 64), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ( _ => (#ifMInt (eqMInt(mi(16, 1), lshrMInt(extractMInt(mi(64, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(64, uvalueMInt((#ifMInt (eqMInt(mi(16, 1), lshrMInt(extractMInt(orMInt(andMInt(MI452, mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), 48, 64), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), mi(64, svalueMInt(extractMInt(MI452, 48, 64)))), 48, 64))), 48, 64), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ( _ => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(extractMInt(mi(64, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(64, uvalueMInt((#ifMInt (eqMInt(mi(16, 1), lshrMInt(extractMInt(orMInt(andMInt(MI452, mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), 48, 64), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(64, -65536)), mi(64, uvalueMInt(concatenateMInt(extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 0, 8))), 56, 64), extractMInt(mi(64, uvalueMInt(extractMInt(extractMInt(MI456, 48, 64), 8, 16))), 56, 64))))), mi(64, svalueMInt(extractMInt(MI452, 48, 64)))), 48, 64))), 48, 64), 8, 16), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ( _ => mi(1, 0) )


    ...</regstate>
endmodule

module XORW-R16-R16-SEMANTICS
  imports XORW-R16-R16
endmodule
