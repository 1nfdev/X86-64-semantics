<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Write to a Debug Enclave" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="EDBGWR"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>EAX = 05H ENCLS[EDBGWR]</td>
<td>IR</td>
<td>V/V</td>
<td>SGX1</td>
<td>This leaf function writes a dword/quadword to a debug enclave.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>EAX</td>
<td>RBX</td>
<td>RCX</td></tr>
<tr>
<td>IR</td>
<td>EDBGWR (In)</td>
<td>Data to be written to a debug enclave (In)</td>
<td>Address of Target memory in the EPC (In)</td></tr></table>
<h3>Description</h3>
<p>This leaf function copies the content in EBX/RBX to an EPC page belonging to a debug enclave. Eight bytes are written in 64-bit mode, four bytes are written in non-64-bit modes. The size of data cannot be overridden.</p>
<p>The effective address of the source location inside the EPC is provided in the register RCX.</p>
<h2>EDBGWR Memory Parameter Semantics</h2>
<table>
<tr>
<td>EPCQW</td></tr>
<tr>
<td>Write access permitted by Enclave</td></tr></table>
<p>The instruction faults if any of the following:</p>
<h2>EDBGWR Faulting Conditions</h2>
<table>
<tr>
<td>RCX points into a page that is an SECS.</td>
<td>RCX does not resolve to a naturally aligned linear address.</td></tr>
<tr>
<td>RCX points to a page that does not belong to an enclave that is in debug mode.</td>
<td>RCX points to a location inside a TCS that is not the FLAGS word.</td></tr>
<tr>
<td>An operand causing any segment violation.</td>
<td>May page fault.</td></tr>
<tr>
<td>CPL &gt; 0.</td>
<td/></tr></table>
<p>The error codes are:</p>
<figure id="tbl-40-20">
<table>
<tr>
<th>Error Code (see <x86:tblref>Table 40-4</x86:tblref>)</th>
<th>Description</th></tr>
<tr>
<td>No Error</td>
<td>EDBGWR successful.</td></tr>
<tr>
<td>SGX_PAGE_NOT_DEBUGGABLE</td>
<td>The EPC page cannot be accessed because it is in the PENDING or MODIFIED state.</td></tr></table>
<figcaption><x86:tblref>Table 40-20</x86:tblref>. EDBGWR Return Value in RAX</figcaption></figure>
<p>This instruction ignores the EPCM RWX attributes on the enclave page. Consequently, violation of EPCM RWX attributes via EDBGRD does not result in a #GP.</p>
<h3>Concurrency Restrictions</h3>
<figure id="tbl-40-21">
<table>
<tr>
<th rowspan="2">Leaf</th>
<th rowspan="2">Parameter</th>
<th colspan="3">Base Concurrency Restrictions</th></tr>
<tr>
<th>Access</th>
<th>On Conflict</th>
<th>SGX_CONFLICT VM Exit Qualification</th></tr>
<tr>
<td>EDBGWR</td>
<td>Target [DS:RCX]</td>
<td>Shared</td>
<td>#GP</td>
<td/></tr></table>
<figcaption><x86:tblref>Table 40-21</x86:tblref>. Base Concurrency Restrictions of EDBGWR</figcaption></figure>
<figure id="tbl-40-22">
<table>
<tr>
<th rowspan="3">Leaf</th>
<th rowspan="3">Parameter</th>
<th colspan="6">Additional Concurrency Restrictions</th></tr>
<tr>
<th colspan="2">vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT</th>
<th colspan="2">vs. EADD, EEXTEND, EINIT</th>
<th colspan="2">vs. ETRACK, ETRACKC</th></tr>
<tr>
<th>Access</th>
<th>On Conflict</th>
<th>Access</th>
<th>On Conflict</th>
<th>Access</th>
<th>On Conflict</th></tr>
<tr>
<td>EDBGWR</td>
<td>Target [DS:RCX]</td>
<td>Concurrent</td>
<td/>
<td>Concurrent</td>
<td/>
<td>Concurrent</td>
<td/></tr></table>
<figcaption><x86:tblref>Table 40-22</x86:tblref>. Additional Concurrency Restrictions of EDBGWR</figcaption></figure>
<h3>Operation</h3>
<h2>Temp Variables in EDBGWR Operational Flow</h2>
<table>
<tr>
<th>Name</th>
<th>Type</th>
<th>Size (Bits)</th>
<th>Description</th></tr>
<tr>
<td>TMP_MODE64</td>
<td>Binary</td>
<td>1</td>
<td>((IA32_EFER.LMA = 1) &amp;&amp; (CS.L = 1)).</td></tr>
<tr>
<td>TMP_SECS</td>
<td/>
<td>64</td>
<td>Physical address of SECS of the enclave to which source operand belongs.</td></tr></table>
<p>TMP_MODE64←((IA32_EFER.LMA = 1) &amp;&amp; (CS.L = 1));</p>
<p>IF ( (TMP_MODE64 = 1) and (DS:RCX is not 8Byte Aligned) )</p>
<p>THEN #GP(0); FI;</p>
<p>IF ( (TMP_MODE64 = 0) and (DS:RCX is not 4Byte Aligned) )</p>
<p>THEN #GP(0); FI;</p>
<p>IF (DS:RCX does not resolve within an EPC)</p>
<p>THEN #PF(DS:RCX); FI;</p>
<p>(* make sure no other Intel SGX instruction is accessing EPCM *)</p>
<p>IF (Other EPCM modifying instructions executing)</p>
<p>THEN #GP(0); FI;</p>
<p>IF (EPCM(DS:RCX). VALID = 0)</p>
<p>THEN #PF(DS:RCX); FI;</p>
<p>(* make sure that DS:RCX (DST) is pointing to a PT_REG or PT_TCS *)</p>
<p>IF ( (EPCM(DS:RCX).PT ≠ PT_REG) and (EPCM(DS:RCX).PT ≠ PT_TCS) )</p>
<p>THEN #PF(DS:RCX); FI;</p>
<p>(* make sure that DS:RCX points to an accessible EPC page *)</p>
<p>IF ( (EPCM(DS:RCX).PENDING is not 0) or (EPCM(DS:RCS).MODIFIED is not 0) )</p>
<p>THEN</p>
<p>RFLAGS.ZF ← 1;</p>
<p>RAX ← SGX_PAGE_NOT_DEBUGGABLE;</p>
<p>GOTO DONE;</p>
<p>FI;</p>
<p>(* If destination is a TCS, then make sure that the offset into the page can only point to the FLAGS field*)</p>
<p>IF ( ( EPCM(DS:RCX). PT = PT_TCS) and ((DS:RCX) &amp; FF8H ≠ offset_of_FLAGS &amp; 0FF8H) )</p>
<p>THEN #GP(0); FI;</p>
<p>(* Locate the SECS for the enclave to which the DS:RCX page belongs *)</p>
<p>TMP_SECS ← GET_SECS_PHYS_ADDRESS(EPCM(DS:RCX).ENCLAVESECS);</p>
<p>(* make sure the enclave owning the PT_REG or PT_TCS page allow debug *)</p>
<p>IF (TMP_SECS.ATTRIBUTES.DEBUG = 0)</p>
<p>THEN #GP(0); FI;</p>
<p>IF ( (TMP_MODE64 = 1) )</p>
<p>THEN (DS:RCX)[63:0]←RBX[63:0];</p>
<p>ELSE (DS:RCX)[31:0]←EBX[31:0];</p>
<p>FI;</p>
<p>(* clear EAX and ZF to indicate successful completion *)</p>
<p>RAX←0;</p>
<p>RFLAGS.ZF ← 0;</p>
<p>DONE:</p>
<p>(* clear flags *)</p>
<p>RFLAGS.CF,PF,AF,OF,SF ← 0</p>
<h3>Flags Affected</h3>
<p>None</p>
<h3>Protected Mode Exceptions</h3>
<table>
<tr>
<td rowspan="6">#GP(0)</td>
<td>If the address in RCS violates DS limit or access rights.</td></tr>
<tr>
<td>If DS segment is unusable.</td></tr>
<tr>
<td>If RCX points to a memory location not 4Byte-aligned.</td></tr>
<tr>
<td>If the address in RCX points to a page belonging to a non-debug enclave.</td></tr>
<tr>
<td>If the address in RCX points to a page which is not PT_TCS or PT_REG.</td></tr>
<tr>
<td>If the address in RCX points to a location inside TCS that is not the FLAGS word.</td></tr>
<tr>
<td rowspan="3">#PF(error</td>
<td>code) If a page fault occurs in accessing memory operands.</td></tr>
<tr>
<td>If the address in RCX points to a non-EPC page.</td></tr>
<tr>
<td>If the address in RCX points to an invalid EPC page.</td></tr></table>
<h3>64-Bit Mode Exceptions</h3>
<table>
<tr>
<td rowspan="5">#GP(0)</td>
<td>If RCX is non-canonical form.</td></tr>
<tr>
<td>If RCX points to a memory location not 8Byte-aligned.</td></tr>
<tr>
<td>If the address in RCX points to a page belonging to a non-debug enclave.</td></tr>
<tr>
<td>If the address in RCX points to a page which is not PT_TCS or PT_REG.</td></tr>
<tr>
<td>If the address in RCX points to a location inside TCS that is not the FLAGS word.</td></tr>
<tr>
<td rowspan="3">#PF(error</td>
<td>code) If a page fault occurs in accessing memory operands.</td></tr>
<tr>
<td>If the address in RCX points to a non-EPC page.</td></tr>
<tr>
<td>If the address in RCX points to an invalid EPC page.</td></tr></table></x86:instruction>