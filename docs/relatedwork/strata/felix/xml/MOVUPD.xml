<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Move Unaligned Packed Double-Precision Floating-Point Values" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="MOVUPD"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op / En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>66 0F 10 /r MOVUPD xmm1, xmm2/m128</td>
<td>A</td>
<td>V/V</td>
<td>SSE2</td>
<td>Move unaligned packed double-precision floating-point from xmm2/mem to xmm1.</td></tr>
<tr>
<td>66 0F 11 /r MOVUPD xmm2/m128, xmm1</td>
<td>B</td>
<td>V/V</td>
<td>SSE2</td>
<td>Move unaligned packed double-precision floating-point from xmm1 to xmm2/mem.</td></tr>
<tr>
<td>VEX.128.66.0F.WIG 10 /r VMOVUPD xmm1, xmm2/m128</td>
<td>A</td>
<td>V/V</td>
<td>AVX</td>
<td>Move unaligned packed double-precision floating-point from xmm2/mem to xmm1.</td></tr>
<tr>
<td>VEX.128.66.0F.WIG 11 /r VMOVUPD xmm2/m128, xmm1</td>
<td>B</td>
<td>V/V</td>
<td>AVX</td>
<td>Move unaligned packed double-precision floating-point from xmm1 to xmm2/mem.</td></tr>
<tr>
<td>VEX.256.66.0F.WIG 10 /r VMOVUPD ymm1, ymm2/m256</td>
<td>A</td>
<td>V/V</td>
<td>AVX</td>
<td>Move unaligned packed double-precision floating-point from ymm2/mem to ymm1.</td></tr>
<tr>
<td>VEX.256.66.0F.WIG 11 /r VMOVUPD ymm2/m256, ymm1</td>
<td>B</td>
<td>V/V</td>
<td>AVX</td>
<td>Move unaligned packed double-precision floating-point from ymm1 to ymm2/mem.</td></tr>
<tr>
<td>EVEX.128.66.0F.W1 10 /r VMOVUPD xmm1 {k1}{z}, xmm2/m128</td>
<td>C</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Move unaligned packed double-precision floating-point from xmm2/m128 to xmm1 using writemask k1.</td></tr>
<tr>
<td>EVEX.128.66.0F.W1 11 /r VMOVUPD xmm2/m128 {k1}{z}, xmm1</td>
<td>D</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Move unaligned packed double-precision floating-point from xmm1 to xmm2/m128 using writemask k1.</td></tr>
<tr>
<td>EVEX.256.66.0F.W1 10 /r VMOVUPD ymm1 {k1}{z}, ymm2/m256</td>
<td>C</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Move unaligned packed double-precision floating-point from ymm2/m256 to ymm1 using writemask k1.</td></tr>
<tr>
<td>EVEX.256.66.0F.W1 11 /r VMOVUPD ymm2/m256 {k1}{z}, ymm1</td>
<td>D</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Move unaligned packed double-precision floating-point from ymm1 to ymm2/m256 using writemask k1.</td></tr>
<tr>
<td>EVEX.512.66.0F.W1 10 /r VMOVUPD zmm1 {k1}{z}, zmm2/m512</td>
<td>C</td>
<td>V/V</td>
<td>AVX512F</td>
<td>Move unaligned packed double-precision floating-point values from zmm2/m512 to zmm1 using writemask k1.</td></tr>
<tr>
<td>EVEX.512.66.0F.W1 11 /r VMOVUPD zmm2/m512 {k1}{z}, zmm1</td>
<td>D</td>
<td>V/V</td>
<td>AVX512F</td>
<td>Move unaligned packed double-precision floating-point values from zmm1 to zmm2/m512 using writemask k1.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Tuple Type</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>A</td>
<td>NA</td>
<td>ModRM:reg (w)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td>
<td>NA</td></tr>
<tr>
<td>B</td>
<td>NA</td>
<td>ModRM:r/m (w)</td>
<td>ModRM:reg (r)</td>
<td>NA</td>
<td>NA</td></tr>
<tr>
<td>C</td>
<td>Full Mem</td>
<td>ModRM:reg (w)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td>
<td>NA</td></tr>
<tr>
<td>D</td>
<td>Full Mem</td>
<td>ModRM:r/m (w)</td>
<td>ModRM:reg (r)</td>
<td>NA</td>
<td>NA</td></tr></table>
<h3>Description</h3>
<p>Note: VEX.vvvv and EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.</p>
<p><strong>EVEX.512 encoded version:</strong></p>
<p>Moves 512 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a ZMM register from a float64 memory location, to store the contents of a ZMM register into a memory. The destination operand is updated according to the writemask.</p>
<p><strong>VEX.256 encoded version:</strong></p>
<p>Moves 256 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers. Bits (MAXVL-1:256) of the destination register are zeroed.</p>
<h3>128-bit versions:</h3>
<p>Moves 128 bits of packed double-precision floating-point values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM register from a 128-bit memory location, to store the contents of an XMM register into a 128-bit memory location, or to move data between two XMM registers.</p>
<p><strong>128-bit Legacy SSE version</strong>: Bits (MAXVL-1:128) of the corresponding destination register remain unchanged.</p>
<p>When the source or destination operand is a memory operand, the operand may be unaligned on a 16-byte boundary without causing a general-protection exception (#GP) to be generated</p>
<p><strong>VEX.128 and EVEX.128 encoded versions</strong>: Bits (MAXVL-1:128) of the destination register are zeroed.</p>
<h3>Operation</h3>
<h4>VMOVUPD (EVEX encoded versions, register-copy form)</h4>
<pre>(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←SRC[i+63:i]
        ELSE
            IF *merging-masking*
                    ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i]←0
                    ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] ← 0
</pre>
<h4>VMOVUPD (EVEX encoded versions, store-form)</h4>
<pre>(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←SRC[i+63:i]
        ELSE *DEST[i+63:i] remains unchanged*
            ; merging-masking
    FI;
ENDFOR;
</pre>
<h4>VMOVUPD (EVEX encoded versions, load-form)</h4>
<pre>(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL-1
    i←j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i]←SRC[i+63:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i]←0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] ← 0
VMOVUPD (VEX.256 encoded version, load - and register copy)
DEST[255:0] ← SRC[255:0]
DEST[MAXVL-1:256] ← 0
</pre>
<h4>VMOVUPD (VEX.256 encoded version, store-form)</h4>
<pre>DEST[255:0] ← SRC[255:0]
</pre>
<h4>VMOVUPD (VEX.128 encoded version)</h4>
<pre>DEST[127:0] ← SRC[127:0]
DEST[MAXVL-1:128] ← 0
</pre>
<h4>MOVUPD (128-bit load- and register-copy- form Legacy SSE version)</h4>
<pre>DEST[127:0] ← SRC[127:0]
DEST[MAXVL-1:128] (Unmodified)
</pre>
<h4>(V)MOVUPD (128-bit store-form version)</h4>
<pre>DEST[127:0] ← SRC[127:0]
</pre>
<h3>Intel C/C++ Compiler Intrinsic Equivalent</h3>
<pre>VMOVUPD __m512d _mm512_loadu_pd( void * s);
</pre>
<pre>VMOVUPD __m512d _mm512_mask_loadu_pd(__m512d a, __mmask8 k, void * s);
</pre>
<pre>VMOVUPD __m512d _mm512_maskz_loadu_pd( __mmask8 k, void * s);
</pre>
<pre>VMOVUPD void _mm512_storeu_pd( void * d, __m512d a);
</pre>
<pre>VMOVUPD void _mm512_mask_storeu_pd( void * d, __mmask8 k, __m512d a);
</pre>
<pre>VMOVUPD __m256d _mm256_mask_loadu_pd(__m256d s, __mmask8 k, void * m);
</pre>
<pre>VMOVUPD __m256d _mm256_maskz_loadu_pd( __mmask8 k, void * m);
</pre>
<pre>VMOVUPD void _mm256_mask_storeu_pd( void * d, __mmask8 k, __m256d a);
</pre>
<pre>VMOVUPD __m128d _mm_mask_loadu_pd(__m128d s, __mmask8 k, void * m);
</pre>
<pre>VMOVUPD __m128d _mm_maskz_loadu_pd( __mmask8 k, void * m);
</pre>
<pre>VMOVUPD void _mm_mask_storeu_pd( void * d, __mmask8 k, __m128d a);
</pre>
<pre>MOVUPD __m256d _mm256_loadu_pd (double * p);
</pre>
<pre>MOVUPD void _mm256_storeu_pd( double *p, __m256d a);
</pre>
<pre>MOVUPD __m128d _mm_loadu_pd (double * p);
</pre>
<pre>MOVUPD void _mm_storeu_pd( double *p, __m128d a);
</pre>
<h3>SIMD Floating-Point Exceptions</h3>
<p>None</p>
<h3>Other Exceptions</h3>
<p>Non-EVEX-encoded instruction, see Exceptions Type 4.</p>
<p>Note treatment of #AC varies; additionally</p>
<table>
<tr>
<td>#UD</td>
<td>If VEX.vvvv != 1111B.</td></tr></table>
<p>EVEX-encoded instruction, see Exceptions Type E4.nb.</p></x86:instruction>