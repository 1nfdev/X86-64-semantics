<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Packed Horizontal Word Minimum" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="PHMINPOSUW"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>66 0F 38 41 /r PHMINPOSUW <em>xmm1, xmm2/m128</em></td>
<td>RM</td>
<td>V/V</td>
<td>SSE4_1</td>
<td>Find the minimum unsigned word in <em>xmm2/m128</em> and place its value in the low word of <em>xmm1</em> and its index in the second-lowest word of <em>xmm1</em>.</td></tr>
<tr>
<td>VEX.128.66.0F38.WIG 41 /r VPHMINPOSUW <em>xmm1, xmm2/m128</em></td>
<td>RM</td>
<td>V/V</td>
<td>AVX</td>
<td>Find the minimum unsigned word in <em>xmm2/m128</em> and place its value in the low word of xmm1 and its index in the second-lowest word of <em>xmm1</em>.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>RM</td>
<td>ModRM:reg (w)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td>
<td>NA</td></tr></table>
<h2>Description</h2>
<p>Determine the minimum unsigned word value in the source operand (second operand) and place the unsigned word in the low word (bits 0-15) of the destination operand (first operand). The word index of the minimum value is stored in bits 16-18 of the destination operand. The remaining upper bits of the destination are set to zero.</p>
<p>128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding XMM destination register remain unchanged.</p>
<p>VEX.128 encoded version: Bits (MAXVL-1:128) of the destination XMM register are zeroed. VEX.vvvv is reserved and must be 1111b, VEX.L must be 0, otherwise the instruction will #UD.</p>
<h2>Operation</h2>
<h3>PHMINPOSUW (128-bit Legacy SSE version)</h3>
<pre>INDEX ← 0;
MIN ← SRC[15:0]
IF (SRC[31:16] &lt; MIN)
    THEN INDEX←1; MIN←SRC[31:16]; FI;
IF (SRC[47:32] &lt; MIN)
    THEN INDEX←2; MIN←SRC[47:32]; FI;
* Repeat operation for words 3 through 6
IF (SRC[127:112] &lt; MIN)
    THEN INDEX←7; MIN←SRC[127:112]; FI;
DEST[15:0] ← MIN;
DEST[18:16] ← INDEX;
DEST[127:19] ← 0000000000000000000000000000H;
</pre>
<h3>VPHMINPOSUW (VEX.128 encoded version)</h3>
<pre>INDEX ← 0
MIN ← SRC[15:0]
IF (SRC[31:16] &lt; MIN) THEN INDEX←1; MIN←SRC[31:16]
IF (SRC[47:32] &lt; MIN) THEN INDEX←2; MIN←SRC[47:32]
* Repeat operation for words 3 through 6
IF (SRC[127:112] &lt; MIN) THEN INDEX←7; MIN←SRC[127:112]
DEST[15:0] ← MIN
DEST[18:16] ← INDEX
DEST[127:19] ← 0000000000000000000000000000H
DEST[MAXVL-1:128] ← 0
</pre>
<h2>Intel C/C++ Compiler Intrinsic Equivalent</h2>
<pre>PHMINPOSUW: __m128i _mm_minpos_epu16( __m128i packed_words);
</pre>
<h2>Flags Affected</h2>
<p>None.</p>
<h2>SIMD Floating-Point Exceptions</h2>
<p>None.</p>
<h2>Other Exceptions</h2>
<p>See Exceptions Type 4; additionally</p>
<table>
<tr>
<td rowspan="2">#UD</td>
<td>If VEX.L = 1.</td></tr>
<tr>
<td>If VEX.vvvv ≠ 1111B.</td></tr></table></x86:instruction>