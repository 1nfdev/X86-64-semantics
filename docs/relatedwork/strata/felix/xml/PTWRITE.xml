<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Write Data to a Processor Trace Packet" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="PTWRITE"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>F3 REX.W 0F AE /4 PTWRITE <em>r64/m64</em></td>
<td>RM</td>
<td>V/N.E</td>
<td/>
<td>Reads the data from r64/m64 to encode into a PTW packet if dependencies are met (see details below).</td></tr>
<tr>
<td>F3 0F AE /4 PTWRITE <em>r32/m32</em></td>
<td>RM</td>
<td>V/V</td>
<td/>
<td>Reads the data from r32/m32 to encode into a PTW packet if dependencies are met (see details below).</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>RM</td>
<td>ModRM:rm (r)</td>
<td>NA</td>
<td>NA</td>
<td>NA</td></tr></table>
<h2>Description</h2>
<p>This instruction reads data in the source operand and sends it to the Intel Processor Trace hardware to be encoded in a PTW packet if TriggerEn, ContextEn, FilterEn, and PTWEn are all set to 1. For more details on these values, see <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3C</em>, Section 35.2.2, “Software Trace Instrumentation with PTWRITE”. The size of data is 64-bit if using REX.W in 64-bit mode, otherwise 32-bits of data are copied from the source operand.</p>
<p>Note: The instruction will #UD if prefix 66H is used.</p>
<h2>Operation</h2>
<pre>IF (IA32_RTIT_STATUS.TriggerEn &amp; IA32_RTIT_STATUS.ContextEn &amp; IA32_RTIT_STATUS.FilterEn &amp; IA32_RTIT_CTL.PTWEn) = 1
    PTW.PayloadBytes ← Encoded payload size;
    PTW.IP ← IA32_RTIT_CTL.FUPonPTW
    IF IA32_RTIT_CTL.FUPonPTW = 1
        Insert FUP packet with IP of PTWRITE;
    FI;
FI;
</pre>
<h2>Flags Affected</h2>
<p>None.</p>
<h2>Other Exceptions</h2>
<table>
<tr>
<td>#GP(0)</td>
<td>If a memory operand effective address is outside the CS, DS, ES, FS or GS segments.</td></tr>
<tr>
<td>#SS(0)</td>
<td>If a memory operand effective address is outside the SS segment limit.</td></tr>
<tr>
<td>#PF</td>
<td>(fault-code) For a page fault.</td></tr>
<tr>
<td>#AC(0)</td>
<td>If an unaligned memory reference is made while the current privilege level is 3 and alignment checking is enabled.</td></tr>
<tr>
<td rowspan="3">#UD</td>
<td>If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE [Bit 4] = 0.</td></tr>
<tr>
<td>If LOCK prefix is used.</td></tr>
<tr>
<td>If 66H prefix is used.</td></tr></table>
<h2>Real-Address Mode Exceptions</h2>
<table>
<tr>
<td>#GP(0)</td>
<td>If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.</td></tr>
<tr>
<td>#SS(0)</td>
<td>If a memory operand effective address is outside the SS segment limit.</td></tr>
<tr>
<td rowspan="3">#UD</td>
<td>If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE [Bit 4] = 0.</td></tr>
<tr>
<td>If LOCK prefix is used.</td></tr>
<tr>
<td>If 66H prefix is used.</td></tr></table>
<h2>Virtual 8086 Mode Exceptions</h2>
<table>
<tr>
<td>#GP(0)</td>
<td>If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.</td></tr>
<tr>
<td>#SS(0)</td>
<td>If a memory operand effective address is outside the SS segment limit.</td></tr>
<tr>
<td>#PF</td>
<td>(fault-code) For a page fault.</td></tr>
<tr>
<td>#AC(0)</td>
<td>If an unaligned memory reference is made while alignment checking is enabled.</td></tr>
<tr>
<td rowspan="3">#UD</td>
<td>If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE [Bit 4] = 0.</td></tr>
<tr>
<td>If LOCK prefix is used.</td></tr>
<tr>
<td>If 66H prefix is used.</td></tr></table>
<h2>Compatibility Mode Exceptions</h2>
<p>Same exceptions as in Protected Mode.</p>
<h2>64-Bit Mode Exceptions</h2>
<table>
<tr>
<td>#GP(0)</td>
<td>If the memory address is in a non-canonical form.</td></tr>
<tr>
<td>#SS(0)</td>
<td>If a memory address referencing the SS segment is in a non-canonical form.</td></tr>
<tr>
<td>#PF</td>
<td>(fault-code) For a page fault.</td></tr>
<tr>
<td>#AC(0)</td>
<td>If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.</td></tr>
<tr>
<td rowspan="3">#UD</td>
<td>If CPUID.(EAX=14H, ECX=0):EBX.PTWRITE [Bit 4] = 0.</td></tr>
<tr>
<td>If LOCK prefix is used.</td></tr>
<tr>
<td>If 66H prefix is used.</td></tr></table></x86:instruction>