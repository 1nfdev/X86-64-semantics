<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Read FS/GS Segment Base" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="RDFSBASE"/>
<x86:mnemonic name="RDGSBASE"/>
<table>
<tr>
<th colspan="2">Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32-bit Mode</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td colspan="2">F3 0F AE /0 RDFSBASE r32</td>
<td>M</td>
<td>V/I</td>
<td>FSGSBASE</td>
<td>Load the 32-bit destination register with the FS base address.</td></tr>
<tr>
<td colspan="2">F3 REX.W 0F AE /0 RDFSBASE r64</td>
<td>M</td>
<td>V/I</td>
<td>FSGSBASE</td>
<td>Load the 64-bit destination register with the FS base address.</td></tr>
<tr>
<td colspan="2">F3 0F AE /1 RDGSBASE <em>r32</em></td>
<td>M</td>
<td>V/I</td>
<td>FSGSBASE</td>
<td>Load the 32-bit destination register with the GS base address.</td></tr>
<tr>
<td>F3 REX.W 0F AE /1 RDGSBASE <em>r64</em></td>
<td/>
<td>M</td>
<td>V/I</td>
<td>FSGSBASE</td>
<td>Load the 64-bit destination register with the GS base address.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>M</td>
<td>ModRM:r/m (w)</td>
<td>NA</td>
<td>NA</td>
<td>NA</td></tr></table>
<h2>Description</h2>
<p>Loads the general-purpose register indicated by the modR/M:r/m field with the FS or GS segment base address.</p>
<p>The destination operand may be either a 32-bit or a 64-bit general-purpose register. The REX.W prefix indicates the operand size is 64 bits. If no REX.W prefix is used, the operand size is 32 bits; the upper 32 bits of the source base address (for FS or GS) are ignored and upper 32 bits of the destination register are cleared.</p>
<p>This instruction is supported only in 64-bit mode.</p>
<h2>Operation</h2>
<pre>DEST ‚Üê FS/GS segment base address;
</pre>
<h2>Flags Affected</h2>
<p>None</p>
<h2>C/C++ Compiler Intrinsic Equivalent</h2>
<pre>RDFSBASE: unsigned int _readfsbase_u32(void );
</pre>
<pre>RDFSBASE: unsigned __int64 _readfsbase_u64(void );
</pre>
<pre>RDGSBASE: unsigned int _readgsbase_u32(void );
</pre>
<pre>RDGSBASE: unsigned __int64 _readgsbase_u64(void );
</pre>
<h2>Protected Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The RDFSBASE and RDGSBASE instructions are not recognized in protected mode.</td></tr></table>
<h2>Real-Address Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The RDFSBASE and RDGSBASE instructions are not recognized in real-address mode.</td></tr></table>
<h2>Virtual-8086 Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The RDFSBASE and RDGSBASE instructions are not recognized in virtual-8086 mode.</td></tr></table>
<h2>Compatibility Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The RDFSBASE and RDGSBASE instructions are not recognized in compatibility mode.</td></tr></table>
<h2>64-Bit Mode Exceptions</h2>
<table>
<tr>
<td rowspan="3">#UD</td>
<td>If the LOCK prefix is used.</td></tr>
<tr>
<td>If CR4.FSGSBASE[bit 16] = 0.</td></tr>
<tr>
<td>If CPUID.07H.0H:EBX.FSGSBASE[bit 0] = 0.</td></tr></table></x86:instruction>