<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Read Field from Virtual-Machine Control Structure" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="VMREAD"/>
<table>
<tr>
<td><strong>Opcode Instruction Description</strong> NP 0F 78 VMREAD r/m64, r64 Reads a specified VMCS field (in 64-bit mode)<em>.</em> NP 0F 78 VMREAD r/m32, r32 Reads a specified VMCS field (outside 64-bit mode)<em>.</em></td></tr></table>
<h2>Description</h2>
<p>Reads a specified field from a VMCS and stores it into a specified destination operand (register or memory). In VMX root operation, the instruction reads from the current VMCS. If executed in VMX non-root operation, the instruction reads from the VMCS referenced by the VMCS link pointer field in the current VMCS.</p>
<p>The VMCS field is specified by the VMCS-field encoding contained in the register source operand. Outside IA-32e mode, the source operand has 32 bits, regardless of the value of CS.D. In 64-bit mode, the source operand has 64 bits.</p>
<p>The effective size of the destination operand, which may be a register or in memory, is always 32 bits outside IA-32e mode (the setting of CS.D is ignored with respect to operand size) and 64 bits in 64-bit mode. If the VMCS field specified by the source operand is shorter than this effective operand size, the high bits of the destination operand are cleared to 0. If the VMCS field is longer, then the high bits of the field are not read.</p>
<p>Note that any faults resulting from accessing a memory destination operand can occur only after determining, in the operation section below, that the relevant VMCS pointer is valid and that the specified VMCS field is supported.</p>
<h2>Operation</h2>
<pre>IF (not in VMX operation) or (CR0.PE = 0) or (RFLAGS.VM = 1) or (IA32_EFER.LMA = 1 and CS.L = 0)
    THEN #UD;
ELSIF in VMX non-root operation AND (“VMCS shadowing” is 0 OR source operand sets bits in range 63:15 OR
VMREAD bit corresponding to bits 14:0 of source operand is 1)<sup>4</sup>
    THEN VMexit;
ELSIF CPL &gt; 0
    THEN #GP(0);
ELSIF (in VMX root operation AND current-VMCS pointer is not valid) OR
(in VMX non-root operation AND VMCS link pointer is not valid)
    THEN VMfailInvalid;
ELSIF source operand does not correspond to any VMCS field
    THEN VMfailValid(VMREAD/VMWRITE from/to unsupported VMCS component);
    ELSE
        IF in VMX root operation
            THEN destination operand ← contents of field indexed by source operand in current VMCS;
            ELSE destination operand ← contents of field indexed by source operand in VMCS referenced by VMCS link pointer;
        FI;
        VMsucceed;
FI;
</pre>
<blockquote>
<p>4. The VMREAD bit for a source operand is defined as follows. Let <em>x</em> be the value of bits 14:0 of the source operand and let <em>addr</em> be the VMREAD-bitmap address. The corresponding VMREAD bit is in bit position <em>x</em> &amp; 7 of the byte at physical address <em>addr</em> | (x » 3).</p></blockquote>
<h2>Flags Affected</h2>
<p>See the operation section and Section 30.2.</p>
<h2>Protected Mode Exceptions</h2>
<table>
<tr>
<td>#GP(0)</td>
<td>If the current privilege level is not 0.</td></tr></table>
<p>If a memory destination operand effective address is outside the CS, DS, ES, FS, or GS segment limit.</p>
<p>If the DS, ES, FS, or GS register contains an unusable segment.</p>
<p>If the destination operand is located in a read-only data segment or any code segment.</p>
<table>
<tr>
<td>#PF(fault-code)</td>
<td>If a page fault occurs in accessing a memory destination operand.</td></tr>
<tr>
<td rowspan="2">#SS(0)</td>
<td>If a memory destination operand effective address is outside the SS segment limit.</td></tr>
<tr>
<td>If the SS register contains an unusable segment.</td></tr>
<tr>
<td>#UD</td>
<td>If not in VMX operation.</td></tr></table>
<h2>Real-Address Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The VMREAD instruction is not recognized in real-address mode.</td></tr></table>
<h2>Virtual-8086 Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The VMREAD instruction is not recognized in virtual-8086 mode.</td></tr></table>
<h2>Compatibility Mode Exceptions</h2>
<table>
<tr>
<td>#UD</td>
<td>The VMREAD instruction is not recognized in compatibility mode.</td></tr></table>
<h2>64-Bit Mode Exceptions</h2>
<table>
<tr>
<td rowspan="2">#GP(0)</td>
<td>If the current privilege level is not 0.</td></tr>
<tr>
<td>If the memory destination operand is in the CS, DS, ES, FS, or GS segments and the memory address is in a non-canonical form.</td></tr>
<tr>
<td>#PF(fault-code)</td>
<td>If a page fault occurs in accessing a memory destination operand.</td></tr>
<tr>
<td>#SS(0)</td>
<td>If the memory destination operand is in the SS segment and the memory address is in a non-canonical form.</td></tr>
<tr>
<td>#UD</td>
<td>If not in VMX operation.</td></tr></table></x86:instruction>