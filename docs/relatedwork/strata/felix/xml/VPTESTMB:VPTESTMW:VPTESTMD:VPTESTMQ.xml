<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Logical AND and Set Mask" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="VPTESTMB"/>
<x86:mnemonic name="VPTESTMW"/>
<x86:mnemonic name="VPTESTMD"/>
<x86:mnemonic name="VPTESTMQ"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>EVEX.NDS.128.66.0F38.W0 26 /r VPTESTMB k2 {k1}, xmm2, xmm3/m128</td>
<td>A</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Bitwise AND of packed byte integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.256.66.0F38.W0 26 /r VPTESTMB k2 {k1}, ymm2, ymm3/m256</td>
<td>A</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Bitwise AND of packed byte integers in ymm2 and ymm3/m256 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.512.66.0F38.W0 26 /r VPTESTMB k2 {k1}, zmm2, zmm3/m512</td>
<td>A</td>
<td>V/V</td>
<td>AVX512BW</td>
<td>Bitwise AND of packed byte integers in zmm2 and zmm3/m512 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.128.66.0F38.W1 26 /r VPTESTMW k2 {k1}, xmm2, xmm3/m128</td>
<td>A</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Bitwise AND of packed word integers in xmm2 and xmm3/m128 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.256.66.0F38.W1 26 /r VPTESTMW k2 {k1}, ymm2, ymm3/m256</td>
<td>A</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Bitwise AND of packed word integers in ymm2 and ymm3/m256 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.512.66.0F38.W1 26 /r VPTESTMW k2 {k1}, zmm2, zmm3/m512</td>
<td>A</td>
<td>V/V</td>
<td>AVX512BW</td>
<td>Bitwise AND of packed word integers in zmm2 and zmm3/m512 and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.128.66.0F38.W0 27 /r VPTESTMD k2 {k1}, xmm2, xmm3/m128/m32bcst</td>
<td>B</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Bitwise AND of packed doubleword integers in xmm2 and xmm3/m128/m32bcst and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.256.66.0F38.W0 27 /r VPTESTMD k2 {k1}, ymm2, ymm3/m256/m32bcst</td>
<td>B</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Bitwise AND of packed doubleword integers in ymm2 and ymm3/m256/m32bcst and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.512.66.0F38.W0 27 /r VPTESTMD k2 {k1}, zmm2, zmm3/m512/m32bcst</td>
<td>B</td>
<td>V/V</td>
<td>AVX512F</td>
<td>Bitwise AND of packed doubleword integers in zmm2 and zmm3/m512/m32bcst and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.128.66.0F38.W1 27 /r VPTESTMQ k2 {k1}, xmm2, xmm3/m128/m64bcst</td>
<td>B</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Bitwise AND of packed quadword integers in xmm2 and xmm3/m128/m64bcst and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.256.66.0F38.W1 27 /r VPTESTMQ k2 {k1}, ymm2, ymm3/m256/m64bcst</td>
<td>B</td>
<td>V/V</td>
<td>AVX512VL AVX512F</td>
<td>Bitwise AND of packed quadword integers in ymm2 and ymm3/m256/m64bcst and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr>
<tr>
<td>EVEX.NDS.512.66.0F38.W1 27 /r VPTESTMQ k2 {k1}, zmm2, zmm3/m512/m64bcst</td>
<td>B</td>
<td>V/V</td>
<td>AVX512F</td>
<td>Bitwise AND of packed quadword integers in zmm2 and zmm3/m512/m64bcst and set mask k2 to reflect the zero/non-zero status of each element of the result, under writemask k1.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Tuple Type</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>A</td>
<td>Full Mem</td>
<td>ModRM:reg (w)</td>
<td>EVEX.vvvv (r)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td></tr>
<tr>
<td>B</td>
<td>Full</td>
<td>ModRM:reg (w)</td>
<td>EVEX.vvvv (r)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td></tr></table>
<h3>Description</h3>
<p>Performs a bitwise logical AND operation on the first source operand (the second operand) and second source operand (the third operand) and stores the result in the destination operand (the first operand) under the writemask. Each bit of the result is set to 1 if the bitwise AND of the corresponding elements of the first and second src operands is non-zero; otherwise it is set to 0.</p>
<p>VPTESTMD/VPTESTMQ: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a mask register updated under the writemask.</p>
<p>VPTESTMB/VPTESTMW: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register or a 512/256/128-bit memory location. The destination operand is a mask register updated under the writemask.</p>
<h3>Operation</h3>
<h4>VPTESTMB (EVEX encoded versions)</h4>
<pre>(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j←0 TO KL-1
    i←j * 8
    IF k1[j] OR *no writemask*
                THEN DEST[j]←(SRC1[i+7:i] BITWISE AND SRC2[i+7:i] != 0)? 1 : 0;
                ELSE DEST[j] = 0
                    ; zeroing-masking only
        I
            ;
ENDFOR
DEST[MAX_KL-1:KL] ← 0
</pre>
<h4>VPTESTMW (EVEX encoded versions)</h4>
<pre>(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO KL-1
            i←j * 16
            IF k1[j] OR *no writemask*
                THEN DEST[j]←(SRC1[i+15:i] BITWISE AND SRC2[i+15:i] != 0)? 1 : 0;
                ELSE DEST[j] = 0
                    ; zeroing-masking only
EFI;
    NFI;
        DFI;
            FFI;
            OFI;
            RFI;
            FI;
DEST[MAX_KL-1:KL] ← 0
</pre>
<h4>VPTESTMD (EVEX encoded versions)</h4>
<pre>(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL-1
            i←j * 32
            IF k1[j] OR *no writemask*
                THEN
                    IF (EVEX.b = 1) AND (SRC2 *is memory*)
                        THEN DEST[j]←(SRC1[i+31:i] BITWISE AND SRC2[31:0] != 0)? 1 : 0;
                        ELSE DEST[j]←(SRC1[i+31:i] BITWISE AND SRC2[i+31:i] != 0)? 1 : 0;
                    FI;
                ELSE DEST[j]←0
                            ; zeroing-masking only
EFI;
    NFI;
        DFI;
            FFI;
            OFI;
            RFI;
            FI;
DEST[MAX_KL-1:KL] ← 0
</pre>
<h4>VPTESTMQ (EVEX encoded versions)</h4>
<pre>(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL-1
            i←j * 64
            IF k1[j] OR *no writemask*
                THEN
                    IF (EVEX.b = 1) AND (SRC2 *is memory*)
                        THEN DEST[j]←(SRC1[i+63:i] BITWISE AND SRC2[63:0] != 0)? 1 : 0;
                        ELSE DEST[j]←(SRC1[i+63:i] BITWISE AND SRC2[i+63:i] != 0)? 1 : 0;
                    FI;
                ELSE DEST[j]←0
                            ; zeroing-masking only
EFI;
    NFI;
        DFI;
            FFI;
            OFI;
            RFI;
            FI;
DEST[MAX_KL-1:KL] ← 0
</pre>
<h3>Intel C/C++ Compiler Intrinsic Equivalents</h3>
<pre>VPTESTMB __mmask64 _mm512_test_epi8_mask( __m512i a, __m512i b);
</pre>
<pre>VPTESTMB __mmask64 _mm512_mask_test_epi8_mask(__mmask64, __m512i a, __m512i b);
</pre>
<pre>VPTESTMW __mmask32 _mm512_test_epi16_mask( __m512i a, __m512i b);
</pre>
<pre>VPTESTMW __mmask32 _mm512_mask_test_epi16_mask(__mmask32, __m512i a, __m512i b);
</pre>
<pre>VPTESTMD __mmask16 _mm512_test_epi32_mask( __m512i a, __m512i b);
</pre>
<pre>VPTESTMD __mmask16 _mm512_mask_test_epi32_mask(__mmask16, __m512i a, __m512i b);
</pre>
<pre>VPTESTMQ __mmask8 _mm512_test_epi64_mask(__m512i a, __m512i b);
</pre>
<pre>VPTESTMQ __mmask8 _mm512_mask_test_epi64_mask(__mmask8, __m512i a, __m512i b);
</pre>
<h3>SIMD Floating-Point Exceptions</h3>
<p>None</p>
<h3>Other Exceptions</h3>
<p>VPTESTMD/Q: See Exceptions Type E4.</p>
<p>VPTESTMB/W: See Exceptions Type E4.nb.</p></x86:instruction>