[4m[1m[34mCheck if supported: adcb_r8_rh[0m
[4m[1m[34mcreatespec adcb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34madcb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movsbw %ah, %cx
%ah -> 1
%cx -> 1

Circuit: adcb %cl, %bl
%pf -> 1
%sf -> 1
%cf -> 1
%cl -> 1
%zf -> 1
%af -> 1
%bl -> 1
%of -> 1

Total Circuit
SF -> 1
OF -> 1
CF -> 1
ZF -> 1
AF -> 1
RCX -> 1
PF -> 1
RAX -> 1
RBX -> 1

Target
CF -> 1
OF -> 1
SF -> 1
AF -> 1
ZF -> 1
PF -> 1
RBX -> 1
RAX -> 1

[4m[1m[34mkprove adcb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput adcb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput adcb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34madcb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _630), 56, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 48, 56), extractMInt(MI630, 56, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _629), 48, 56))), 48, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI629, 48, 56))), 48, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _630)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI630) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(mi(64, _630), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(MI630, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, _629) )
echo Debug:  Result: "RAX" |-> (MI629 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI630, 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn adcb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-adcb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: adcb_rh_rh[0m
[4m[1m[34mcreatespec adcb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34madcb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movsbw %bh, %dx
%bh -> 1
%dx -> 1

Circuit: adcb %dl, %ah
%of -> 1
%ah -> 1
%zf -> 1
%af -> 1
%cf -> 1
%dl -> 1
%pf -> 1
%sf -> 1

Total Circuit
RBX -> 1
RAX -> 1
PF -> 1
ZF -> 1
AF -> 1
OF -> 1
CF -> 1
SF -> 1
RDX -> 1

Target
ZF -> 1
AF -> 1
SF -> 1
OF -> 1
CF -> 1
RBX -> 1
RAX -> 1
PF -> 1

[4m[1m[34mkprove adcb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput adcb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput adcb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34madcb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _630), 48, 56)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 48, 56), extractMInt(MI630, 48, 56)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(mi(64, _630), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(MI630, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _630), 48, 56))), 48, 64)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI630, 48, 56))), 48, 64)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), extractMInt(mi(64, _629), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 1, 9), extractMInt(MI629, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _630) )
echo Debug:  Result: "RBX" |-> (MI630 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), concatenateMInt(mi(8, 0), MI626)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn adcb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-adcb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addb_r8_r8[0m
[4m[1m[34mcreatespec addb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_r8_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xaddb %cl, %bl
%sf -> 1
%pf -> 1
%cf -> 1
%cl -> 1
%af -> 1
%zf -> 1
%of -> 1
%bl -> 1

Circuit: callq .set_szp_for_bl
%bl -> 1
%zf -> 1
%pf -> 1
%sf -> 1

Total Circuit
CF -> 1
OF -> 1
SF -> 1
AF -> 1
ZF -> 1
PF -> 1
RCX -> 1
RBX -> 1

Target
SF -> 1
CF -> 1
OF -> 1
AF -> 1
ZF -> 1
PF -> 1
RCX -> 1
RBX -> 1

[4m[1m[34mkprove addb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput addb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _628), 56, 64), extractMInt(mi(64, _629), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI628, 56, 64), extractMInt(MI629, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), extractMInt(mi(64, _628), 56, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), extractMInt(MI628, 56, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _628), 56, 57), extractMInt(mi(64, _629), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _628), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI628, 56, 57), extractMInt(MI629, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI628, 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI628, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addb_r8_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addl_r32_r32[0m
[4m[1m[34mcreatespec addl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xaddl %ecx, %ebx
%of -> 1
%zf -> 1
%af -> 1
%rcx -> 1
%cf -> 1
%rbx -> 1
%pf -> 1
%sf -> 1
%ebx -> 1
%ecx -> 1

Circuit: callq .set_szp_for_ebx
%ebx -> 1
%sf -> 1
%pf -> 1
%zf -> 1

Total Circuit
RCX -> 1
PF -> 1
RBX -> 1
CF -> 1
OF -> 1
SF -> 1
AF -> 1
ZF -> 1

Target
OF -> 1
CF -> 1
SF -> 1
ZF -> 1
AF -> 1
PF -> 1
RCX -> 1
RBX -> 1

[4m[1m[34mkprove addl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput addl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _627), 32, 64), extractMInt(mi(64, _628), 32, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI627, 32, 64), extractMInt(MI628, 32, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _627), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI627, 32, 64)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _627), 32, 33), extractMInt(mi(64, _628), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _627), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI627, 32, 33), extractMInt(MI628, 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MI627, 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 33)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 33)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addps_xmm_xmm[0m
[4m[1m[34mcreatespec addps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vaddps %xmm2, %xmm1, %xmm2
%xmm2 -> 1
avx -> 1
%xmm1 -> 1
%ymm2 -> 1

Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm2 -> 1
%xmm5 -> 1
%xmm7 -> 1
%xmm4 -> 1
%xmm6 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm5 -> 1
%xmm7 -> 1
%xmm4 -> 1
%xmm1 -> 1
%xmm6 -> 1

Total Circuit
YMM6 -> 1
 -> 1
YMM7 -> 1
YMM2 -> 1
YMM1 -> 1
YMM5 -> 1
YMM4 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove addps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput addps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
[4m[1m[34mwriteKDefn addps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addsd_xmm_xmm[0m
[4m[1m[34mcreatespec addsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vaddpd %xmm2, %xmm1, %xmm0
%ymm0 -> 1
%xmm2 -> 1
avx -> 1
%xmm0 -> 1
%xmm1 -> 1

Circuit: movsd %xmm0, %xmm1
%xmm0 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM0 -> 1
YMM1 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove addsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput addsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 192), Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI613, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI613, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI613, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn addsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addss_xmm_xmm[0m
[4m[1m[34mcreatespec addss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vaddps %xmm2, %xmm1, %xmm7
%xmm2 -> 1
%ymm7 -> 1
%xmm7 -> 1
avx -> 1
%xmm1 -> 1

Circuit: movss %xmm7, %xmm1
sse -> 1
%xmm7 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM7 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove addss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput addss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 224), Float2MInt( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613) )
echo Debug:  Result: "SPAD1" |-> (MI613 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _613), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _613), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _613), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) ) , 32)))))   )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI613, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI613, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI613, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) ) , 32)))))   )
[4m[1m[34mwriteKDefn addss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtdq2pd_xmm_xmm[0m
[4m[1m[34mcreatespec cvtdq2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtdq2pd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtdq2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpmovzxdq %xmm2, %xmm0
%ymm0 -> 1
%xmm2 -> 1
avx -> 1
%xmm0 -> 1

Circuit: vmovaps %ymm0, %ymm2
%ymm2 -> 1
avx -> 1
%ymm0 -> 1

Circuit: vcvtdq2pd %ymm2, %ymm3
avx -> 1
%ymm3 -> 1
%ymm2 -> 1

Circuit: callq .move_256_128_ymm3_xmm12_xmm13
%xmm13 -> 1
%ymm3 -> 1
%xmm12 -> 1

Circuit: callq .move_64_128_xmm12_xmm13_xmm1
%xmm13 -> 1
%xmm12 -> 1
%xmm1 -> 1

Total Circuit
YMM3 -> 1
YMM0 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM12 -> 1
YMM13 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove cvtdq2pd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtdq2pd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtdq2pd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cvtdq2pd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput cvtdq2pd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtdq2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _617), 224, 256)), 53, 11), 64)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(MI617, 224, 256)), 53, 11), 64)) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 128), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _617), 192, 224)), 53, 11), 64), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _617), 224, 256)), 53, 11), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 128), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI617, 192, 224)), 53, 11), 64), Float2MInt(Int2Float(svalueMInt(extractMInt(MI617, 224, 256)), 53, 11), 64))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _617), 192, 224)), 53, 11), 64)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(MI617, 192, 224)), 53, 11), 64)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(64, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _617), 192, 224)), 53, 11), 64), concatenateMInt(mi(64, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _617), 224, 256)), 53, 11), 64)))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(64, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI617, 192, 224)), 53, 11), 64), concatenateMInt(mi(64, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(MI617, 224, 256)), 53, 11), 64)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 224, 256))))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI617, 224, 256))))   )
[4m[1m[34mwriteKDefn cvtdq2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtdq2pd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtdq2ps_xmm_xmm[0m
[4m[1m[34mcreatespec cvtdq2ps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtdq2ps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtdq2ps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vcvtdq2ps %xmm2, %xmm14
%xmm2 -> 1
%ymm14 -> 1
avx -> 1
%xmm14 -> 1

Circuit: movupd %xmm14, %xmm1
%xmm1 -> 1
%xmm14 -> 1
sse2 -> 1

Total Circuit
YMM14 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove cvtdq2ps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtdq2ps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtdq2ps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cvtdq2ps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput cvtdq2ps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtdq2ps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 224, 256)), 24, 8), 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 224, 256)), 24, 8), 32))))) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _614), 224, 256)), 24, 8), 32))))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 224, 256)), 24, 8), 32))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn cvtdq2ps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtdq2ps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtpd2ps_xmm_xmm[0m
cvtpd2ps_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2ps_xmm_xmm.k
Warn: [4m[1m[35mcvtpd2ps_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cvtsd2sil_r32_xmm[0m
cvtsd2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtsd2sil_r32_xmm.k
Warn: [4m[1m[35mcvtsd2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cvtsd2ss_xmm_xmm[0m
cvtsd2ss_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2ps_xmm_xmm.k
Warn: [4m[1m[35mcvtsd2ss_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cvttpd2dq_xmm_xmm[0m
cvttpd2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttpd2dq_xmm_xmm.k
Warn: [4m[1m[35mcvttpd2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cwtl[0m
[4m[1m[34mcreatespec cwtl: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cwtl_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcwtl: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movswl %ax, %edi
%edi -> 1
%rdi -> 1
%ax -> 1

Circuit: movswl %di, %eax
%eax -> 1
%di -> 1
%rax -> 1

Total Circuit
RAX -> 1
RDI -> 1

Target
RAX -> 1

[4m[1m[34mkprove cwtl[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cwtl_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cwtl_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cwtl[0m
[4m[1m[34msanitizeSpecOutput cwtl[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcwtl: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _610), 48, 64))), 32, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI610, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _610), 48, 64))), 32, 64))   )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI610, 48, 64))), 32, 64))   )
[4m[1m[34mwriteKDefn cwtl: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cwtl.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: decl_r32[0m
[4m[1m[34mcreatespec decl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decl_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xffffffffffffffff, %rcx
%rcx -> 1
\$0xffffffffffffffff -> 1

Circuit: xchgl %ebx, %ebx
%ebx -> 1
%rbx -> 1

Circuit: xaddl %ecx, %ebx
%zf -> 1
%af -> 1
%of -> 1
%pf -> 1
%ecx -> 1
%ebx -> 1
%sf -> 1
%rcx -> 1
%rbx -> 1
%cf -> 1

Total Circuit
 -> 1
ZF -> 1
AF -> 1
SF -> 1
OF -> 1
CF -> 1
RBX -> 1
RCX -> 1
PF -> 1

Target
SF -> 1
OF -> 1
ZF -> 1
AF -> 1
PF -> 1
RBX -> 1

[4m[1m[34mkprove decl_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decl_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decl_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput decl_r32[0m
[4m[1m[34msanitizeSpecOutput decl_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _624), 32, 64), mi(32, -1)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI624, 32, 64), mi(32, -1)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _624), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI624, 32, 64)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _624), 32, 33), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _624), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI624, 32, 33), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(MI624, 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 1, 33)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 1, 33)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 32, 64)), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 32, 64)), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn decl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-decl_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: decw_r16[0m
[4m[1m[34mcreatespec decw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decw_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorq %rax, %rax
%rax -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%of -> 1
%zf -> 1
%af -> 1

Circuit: movq $0xffffffffffffffff, %rsi
\$0xffffffffffffffff -> 1
%rsi -> 1

Circuit: xchgw %ax, %bx
%bx -> 1
%ax -> 1

Circuit: callq .read_cf_into_rbx
%rbx -> 1
%cf -> 1

Circuit: adcw %bx, %ax
%cf -> 1
%ax -> 1
%sf -> 1
%pf -> 1
%of -> 1
%af -> 1
%bx -> 1
%zf -> 1

Circuit: addw %ax, %si
%pf -> 1
%si -> 1
%sf -> 1
%ax -> 1
%cf -> 1
%zf -> 1
%af -> 1
%of -> 1

Circuit: movswq %si, %rbx
%si -> 1
%rbx -> 1

Total Circuit
PF -> 1
RAX -> 1
RBX -> 1
RSI -> 1
SF -> 1
OF -> 1
CF -> 1
 -> 1
ZF -> 1
AF -> 1

Target
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
OF -> 1
SF -> 1

[4m[1m[34mkprove decw_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decw_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decw_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput decw_r16[0m
[4m[1m[34msanitizeSpecOutput decw_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _626), 48, 64), mi(16, 65535)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI626, 48, 64), mi(16, 65535)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _626)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI626) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _626), 48, 49), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _626), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI626, 48, 49), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(MI626, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _626), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI626, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _626), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI626, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(48, 281474976710655), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(48, 281474976710655), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), mi(17, 65535)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), mi(17, 65535)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn decw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-decw_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: divsd_xmm_xmm[0m
[4m[1m[34mcreatespec divsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: divpd %xmm2, %xmm10
%xmm2 -> 1
sse2 -> 1
%xmm10 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm11 -> 1
%xmm1 -> 1
%xmm10 -> 1

Total Circuit
YMM11 -> 1
YMM10 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove divsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput divsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput divsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 192), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  /Float  0e+00 ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  /Float  0e+00 ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _614), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI614, 128, 192)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn divsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-divsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: maxps_xmm_xmm[0m
[4m[1m[34mcreatespec maxps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxps %xmm2, %xmm1, %xmm2
%ymm2 -> 1
%xmm1 -> 1
avx -> 1
%xmm2 -> 1

Circuit: callq .move_128_64_xmm2_xmm8_xmm9
%xmm9 -> 1
%xmm8 -> 1
%xmm2 -> 1

Circuit: callq .move_64_128_xmm8_xmm9_xmm1
%xmm1 -> 1
%xmm9 -> 1
%xmm8 -> 1

Total Circuit
YMM9 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM8 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove maxps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput maxps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput maxps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)), 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 128, 160), 24, 8), MInt2Float(extractMInt(MI614, 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 160, 192), 24, 8), MInt2Float(extractMInt(MI614, 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 192, 224), 24, 8), MInt2Float(extractMInt(MI614, 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), MInt2Float(extractMInt(MI614, 224, 256), 24, 8)), 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)), 32)), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)), 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 128, 160), 24, 8), MInt2Float(extractMInt(MI614, 128, 160), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 160, 192), 24, 8), MInt2Float(extractMInt(MI614, 160, 192), 24, 8)), 32)), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 192, 224), 24, 8), MInt2Float(extractMInt(MI614, 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), MInt2Float(extractMInt(MI614, 224, 256), 24, 8)), 32)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)), 32))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 128, 160), 24, 8), MInt2Float(extractMInt(MI614, 128, 160), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 160, 192), 24, 8), MInt2Float(extractMInt(MI614, 160, 192), 24, 8)), 32))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)), 32))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 192, 224), 24, 8), MInt2Float(extractMInt(MI614, 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), MInt2Float(extractMInt(MI614, 224, 256), 24, 8)), 32))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn maxps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-maxps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: minps_xmm_xmm[0m
[4m[1m[34mcreatespec minps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vminps %xmm2, %xmm1, %xmm2
%ymm2 -> 1
%xmm1 -> 1
avx -> 1
%xmm2 -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm2 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm11 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm1 -> 1
%xmm10 -> 1
%xmm9 -> 1
%xmm8 -> 1
%xmm11 -> 1

Total Circuit
YMM11 -> 1
YMM10 -> 1
YMM9 -> 1
 -> 1
YMM8 -> 1
YMM1 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove minps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput minps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput minps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)), 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 128, 160), 24, 8), MInt2Float(extractMInt(MI616, 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 160, 192), 24, 8), MInt2Float(extractMInt(MI616, 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 192, 224), 24, 8), MInt2Float(extractMInt(MI616, 192, 224), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 224, 256), 24, 8), MInt2Float(extractMInt(MI616, 224, 256), 24, 8)), 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 128), concatenateMInt(concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)), 32)), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)), 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 128), concatenateMInt(concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 128, 160), 24, 8), MInt2Float(extractMInt(MI616, 128, 160), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 160, 192), 24, 8), MInt2Float(extractMInt(MI616, 160, 192), 24, 8)), 32)), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 192, 224), 24, 8), MInt2Float(extractMInt(MI616, 192, 224), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 224, 256), 24, 8), MInt2Float(extractMInt(MI616, 224, 256), 24, 8)), 32)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)), 32)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 160, 192), 24, 8), MInt2Float(extractMInt(MI616, 160, 192), 24, 8)), 32)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)), 32)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 128, 160), 24, 8), MInt2Float(extractMInt(MI616, 128, 160), 24, 8)), 32)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 224, 256), 24, 8), MInt2Float(extractMInt(MI616, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)), 32))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 192, 224), 24, 8), MInt2Float(extractMInt(MI616, 192, 224), 24, 8)), 32))   )
[4m[1m[34mwriteKDefn minps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-minps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movb_r8_r8[0m
[4m[1m[34mcreatespec movb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movb_r8_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x1, %rbx
\$0x1 -> 1
%rbx -> 1

Circuit: callq .set_szp_for_rbx
%rbx -> 1
%sf -> 1
%pf -> 1
%zf -> 1

Circuit: movzbq %cl, %r15
%cl -> 1
%r15 -> 1

Circuit: callq .read_sf_into_rbx
%rbx -> 1
%sf -> 1

Circuit: xaddb %r15b, %bl
%cf -> 1
%sf -> 1
%pf -> 1
%bl -> 1
%of -> 1
%af -> 1
%r15b -> 1
%zf -> 1

Total Circuit
RBX -> 1
R15 -> 1
RCX -> 1
PF -> 1
ZF -> 1
 -> 1
AF -> 1
SF -> 1
OF -> 1
CF -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove movb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput movb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _620), 56, 57) )
echo Debug:  Result: "SF" |-> (extractMInt(MI620, 56, 57) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), extractMInt(mi(64, _620), 56, 64)), extractMInt(mi(64, _620), 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), extractMInt(MI620, 56, 64)), extractMInt(MI620, 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _620), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI620, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _620) )
echo Debug:  Result: "RCX" |-> (MI620 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 57))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MI620, 56, 57))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(MI620, 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R15" |-> (mi(64, 0) )
echo Debug:  Result: "R15" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 56), extractMInt(mi(64, _620), 56, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI619, 0, 56), extractMInt(MI620, 56, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(mi(64, _620), 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(MI620, 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn movb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movb_r8_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movl_r32_r32[0m
[4m[1m[34mcreatespec movl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x0, %rbx
\$0x0 -> 1
%rbx -> 1

Circuit: xaddl %ebx, %ecx
%ebx -> 1
%sf -> 1
%ecx -> 1
%pf -> 1
%cf -> 1
%rbx -> 1
%rcx -> 1
%af -> 1
%zf -> 1
%of -> 1

Total Circuit
AF -> 1
ZF -> 1
 -> 1
SF -> 1
CF -> 1
OF -> 1
RBX -> 1
PF -> 1
RCX -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput movl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _618), 32, 33) )
echo Debug:  Result: "SF" |-> (extractMInt(MI618, 32, 33) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _618), 32, 64), mi(32, 0)), extractMInt(mi(64, _618), 32, 64)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI618, 32, 64), mi(32, 0)), extractMInt(MI618, 32, 64)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _618), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI618, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _618), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI618, 32, 64)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _618), 32, 33), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _618), 32, 33), extractMInt(mi(64, _618), 32, 33)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI618, 32, 33), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(MI618, 32, 33), extractMInt(MI618, 32, 33)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _618), 32, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI618, 32, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(mi(64, _618), 32, 64), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(MI618, 32, 64), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn movl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzbl_r32_r8[0m
[4m[1m[34mcreatespec movzbl_r32_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbl_r32_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbl_r32_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x8, %rbx
\$0x8 -> 1
%rbx -> 1

Circuit: callq .move_032_016_ebx_r10w_r11w
%r11w -> 1
%ebx -> 1
%r10w -> 1

Circuit: addw %bx, %r10w
%zf -> 1
%r10w -> 1
%bx -> 1
%af -> 1
%of -> 1
%pf -> 1
%sf -> 1
%cf -> 1

Circuit: callq .read_pf_into_rbx
%rbx -> 1
%pf -> 1

Circuit: adcb %cl, %bl
%zf -> 1
%af -> 1
%of -> 1
%bl -> 1
%pf -> 1
%sf -> 1
%cf -> 1
%cl -> 1

Total Circuit
PF -> 1
RCX -> 1
R10 -> 1
RBX -> 1
SF -> 1
OF -> 1
CF -> 1
 -> 1
R11 -> 1
ZF -> 1
AF -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove movzbl_r32_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbl_r32_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbl_r32_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzbl_r32_r8[0m
[4m[1m[34msanitizeSpecOutput movzbl_r32_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbl_r32_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (mi(64, 16) )
echo Debug:  Result: "R10" |-> (mi(64, 16) )
echo Debug:  PreResult: "R11" |-> (mi(64, 0) )
echo Debug:  Result: "R11" |-> (mi(64, 0) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _620), 56, 57) )
echo Debug:  Result: "SF" |-> (extractMInt(MI620, 56, 57) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _620), 56, 64), mi(8, 0)), extractMInt(mi(64, _620), 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI620, 56, 64), mi(8, 0)), extractMInt(MI620, 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _620), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI620, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _620) )
echo Debug:  Result: "RCX" |-> (MI620 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _620), 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _620), 56, 57), extractMInt(mi(64, _620), 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI620, 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(MI620, 56, 57), extractMInt(MI620, 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _620), 56, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI620, 56, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(mi(64, _620), 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(MI620, 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn movzbl_r32_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzbl_r32_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: negw_r16[0m
[4m[1m[34mcreatespec negw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negw_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xffffffffffffffff, %rbp
\$0xffffffffffffffff -> 1
%rbp -> 1

Circuit: addw %bx, %bp
%of -> 1
%af -> 1
%bx -> 1
%zf -> 1
%cf -> 1
%bp -> 1
%sf -> 1
%pf -> 1

Circuit: notw %bx
%bx -> 1

Circuit: incw %bx
%pf -> 1
%sf -> 1
%zf -> 1
%bx -> 1
%af -> 1
%of -> 1

Total Circuit
AF -> 1
ZF -> 1
 -> 1
CF -> 1
OF -> 1
SF -> 1
RBX -> 1
RBP -> 1
PF -> 1

Target
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
OF -> 1
CF -> 1
SF -> 1

[4m[1m[34mkprove negw_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negw_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negw_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput negw_r16[0m
[4m[1m[34msanitizeSpecOutput negw_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBP" |-> (concatenateMInt(mi(48, 281474976710655), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  Result: "RBP" |-> (concatenateMInt(mi(48, 281474976710655), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), mi(17, 65535)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), mi(17, 65535)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), mi(17, 1)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), mi(17, 1)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), mi(17, 1)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), mi(17, 1)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _627)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI627) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), xorMInt(mi(1, 1), extractMInt(mi(64, _627), 48, 49)))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), mi(17, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), xorMInt(mi(1, 1), extractMInt(MI627, 48, 49)))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), mi(17, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _627), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), mi(17, 1)), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI627, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), mi(17, 1)), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _627), 48, 64))), mi(17, 1)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI627, 48, 64))), mi(17, 1)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn negw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-negw_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: notl_r32[0m
[4m[1m[34mcreatespec notl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notl_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movslq %ebx, %rax
%rax -> 1
%ebx -> 1

Circuit: movq $0xffffffffffffffff, %rbx
%rbx -> 1
\$0xffffffffffffffff -> 1

Circuit: xorl %eax, %ebx
%eax -> 1
%ebx -> 1
%sf -> 1
%pf -> 1
%rbx -> 1
%cf -> 1
%af -> 1
%zf -> 1
%of -> 1

Total Circuit
AF -> 1
ZF -> 1
 -> 1
SF -> 1
CF -> 1
OF -> 1
RAX -> 1
RBX -> 1
PF -> 1

Target
RBX -> 1

[4m[1m[34mkprove notl_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notl_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notl_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput notl_r32[0m
[4m[1m[34msanitizeSpecOutput notl_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(mi(1, 1), extractMInt(mi(64, _616), 32, 33)) )
echo Debug:  Result: "SF" |-> (xorMInt(mi(1, 1), extractMInt(MI616, 32, 33)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 255), extractMInt(mi(64, _616), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 255), extractMInt(MI616, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, svalueMInt(extractMInt(mi(64, _616), 32, 64))) )
echo Debug:  Result: "RAX" |-> (mi(64, svalueMInt(extractMInt(MI616, 32, 64))) )
echo Debug:  PreResult: "RBX" |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64))) )
echo Debug:  Result: "RBX" |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn notl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-notl_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: notq_r64[0m
[4m[1m[34mcreatespec notq_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notq_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotq_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xfffffffffffffffe, %rdx
\$0xfffffffffffffffe -> 1
%rdx -> 1

Circuit: incb %dl
%sf -> 1
%pf -> 1
%dl -> 1
%af -> 1
%zf -> 1
%of -> 1

Circuit: xorq %rdx, %rbx
%pf -> 1
%sf -> 1
%rbx -> 1
%cf -> 1
%zf -> 1
%rdx -> 1
%af -> 1
%of -> 1

Total Circuit
ZF -> 1
 -> 1
AF -> 1
SF -> 1
RDX -> 1
OF -> 1
CF -> 1
RBX -> 1
PF -> 1

Target
RBX -> 1

[4m[1m[34mkprove notq_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notq_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notq_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput notq_r64[0m
[4m[1m[34msanitizeSpecOutput notq_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotq_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(mi(1, 1), extractMInt(mi(64, _616), 0, 1)) )
echo Debug:  Result: "SF" |-> (xorMInt(mi(1, 1), extractMInt(MI616, 0, 1)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 255), extractMInt(mi(64, _616), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 255), extractMInt(MI616, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (mi(64, 18446744073709551615) )
echo Debug:  Result: "RDX" |-> (mi(64, 18446744073709551615) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (xorMInt(mi(64, 18446744073709551615), mi(64, _616)) )
echo Debug:  Result: "RBX" |-> (xorMInt(mi(64, 18446744073709551615), MI616) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _616)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(64, 18446744073709551615), MI616), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn notq_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-notq_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orpd_xmm_xmm[0m
[4m[1m[34mcreatespec orpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: orps %xmm2, %xmm1
%xmm2 -> 1
sse -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove orpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput orpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(orMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _612), 128, 192)), orMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _612), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(orMInt(extractMInt(MI613, 128, 192), extractMInt(MI612, 128, 192)), orMInt(extractMInt(MI613, 192, 256), extractMInt(MI612, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn orpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pmovzxdq_xmm_xmm[0m
[4m[1m[34mcreatespec pmovzxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxdq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovzxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm11 -> 1
%xmm9 -> 1
%xmm8 -> 1
%xmm2 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm3
%xmm9 -> 1
%xmm8 -> 1
%ymm3 -> 1

Circuit: vmovlhps %xmm3, %xmm3, %xmm6
%xmm6 -> 1
%xmm3 -> 1
%ymm6 -> 1
avx -> 1

Circuit: movddup %xmm9, %xmm1
%xmm9 -> 1
%xmm1 -> 1
pni -> 1

Circuit: movss %xmm6, %xmm1
%xmm6 -> 1
%xmm1 -> 1
sse -> 1

Total Circuit
 -> 1
YMM6 -> 1
YMM8 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
YMM11 -> 1
YMM9 -> 1
YMM10 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove pmovzxdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pmovzxdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pmovzxdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovzxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _619) )
echo Debug:  Result: "YMM2" |-> (MI619 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _618), 0, 128), concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 192, 224)), mi(32, 0)), extractMInt(mi(256, _619), 224, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI618, 0, 128), concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI619, 192, 224)), mi(32, 0)), extractMInt(MI619, 224, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(concatenateMInt(mi(96, 0), extractMInt(mi(256, _619), 192, 224)), concatenateMInt(mi(96, 0), extractMInt(mi(256, _619), 224, 256))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(concatenateMInt(mi(96, 0), extractMInt(MI619, 192, 224)), concatenateMInt(mi(96, 0), extractMInt(MI619, 224, 256))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 224, 256)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 224, 256)))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI619, 224, 256)), concatenateMInt(mi(32, 0), extractMInt(MI619, 224, 256)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _618) )
echo Debug:  Result: "SPAD1" |-> (MI618 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 192, 224))   )
[4m[1m[34mwriteKDefn pmovzxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pmovzxdq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: punpcklqdq_xmm_xmm[0m
[4m[1m[34mcreatespec punpcklqdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpcklqdq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpcklqdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movlhps %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
sse -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove punpcklqdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpcklqdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpcklqdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput punpcklqdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput punpcklqdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpcklqdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _612), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(extractMInt(MI613, 192, 256), extractMInt(MI612, 192, 256))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn punpcklqdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-punpcklqdq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pxor_xmm_xmm[0m
[4m[1m[34mcreatespec pxor_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pxor_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpxor_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorps %xmm2, %xmm1
%xmm1 -> 1
sse -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM1 -> 1
YMM2 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove pxor_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pxor_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pxor_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pxor_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pxor_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpxor_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _612), 128, 192)), xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _612), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI612, 128, 192)), xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI612, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn pxor_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pxor_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rolb_r8_one[0m
[4m[1m[34mcreatespec rolb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolb_r8_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorq %rax, %rax
%of -> 1
%zf -> 1
%af -> 1
%rax -> 1
%cf -> 1
%pf -> 1
%sf -> 1

Circuit: setnp %ah
%ah -> 1
%pf -> 1

Circuit: setnz %bh
%zf -> 1
%bh -> 1

Circuit: addw %bx, %ax
%ax -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%of -> 1
%af -> 1
%bx -> 1
%zf -> 1

Circuit: adcb %al, %al
%sf -> 1
%pf -> 1
%cf -> 1
%al -> 1
%af -> 1
%zf -> 1
%of -> 1

Circuit: adcb %bl, %bl
%of -> 1
%bl -> 1
%zf -> 1
%af -> 1
%cf -> 1
%pf -> 1
%sf -> 1

Total Circuit
RAX -> 1
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
OF -> 1
CF -> 1
SF -> 1

Target
RBX -> 1
 -> 1
CF -> 1
OF -> 1

[4m[1m[34mkprove rolb_r8_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolb_r8_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolb_r8_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rolb_r8_one[0m
[4m[1m[34msanitizeSpecOutput rolb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _621), 56, 57), extractMInt(mi(64, _621), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _621), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI621, 56, 57), extractMInt(MI621, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI621, 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 1, 9)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI621, 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), 0, 1))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), 0, 1))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rolb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rolb_r8_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: salb_r8_one[0m
[4m[1m[34mcreatespec salb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salb_r8_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: salb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movsbq %bl, %rbp
%rbp -> 1
%bl -> 1

Circuit: movsbq %bpl, %rbx
%bpl -> 1
%rbx -> 1

Circuit: shlb $0x1, %bl
%af -> 1
%zf -> 1
\$0x1 -> 1
%bl -> 1
%of -> 1
%sf -> 1
%pf -> 1
%cf -> 1

Total Circuit
 -> 1
ZF -> 1
AF -> 1
OF -> 1
CF -> 1
SF -> 1
RBP -> 1
RBX -> 1
PF -> 1

Target
RBX -> 1
PF -> 1
AF -> 1
ZF -> 1
 -> 1
CF -> 1
OF -> 1
SF -> 1

[4m[1m[34mkprove salb_r8_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salb_r8_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salb_r8_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput salb_r8_one[0m
[4m[1m[34msanitizeSpecOutput salb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBP" |-> (mi(64, svalueMInt(extractMInt(mi(64, _627), 56, 64))) )
echo Debug:  Result: "RBP" |-> (mi(64, svalueMInt(extractMInt(MI627, 56, 64))) )
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _627)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI627) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _627), 56, 57), extractMInt(mi(64, _627), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _627), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI627, 56, 57), extractMInt(MI627, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI627, 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _627), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI627, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn salb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-salb_r8_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sall_r32_one[0m
[4m[1m[34mcreatespec sall_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sall_r32_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msall_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: sall_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: shll $0x1, %ebx
%pf -> 1
%sf -> 1
%ebx -> 1
%rbx -> 1
%cf -> 1
\$0x1 -> 1
%zf -> 1
%af -> 1
%of -> 1

Total Circuit
PF -> 1
RBX -> 1
SF -> 1
CF -> 1
OF -> 1
AF -> 1
 -> 1
ZF -> 1

Target
AF -> 1
 -> 1
ZF -> 1
CF -> 1
OF -> 1
SF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove sall_r32_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sall_r32_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sall_r32_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sall_r32_one[0m
[4m[1m[34msanitizeSpecOutput sall_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msall_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _625), 32, 33), extractMInt(mi(64, _625), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _625), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI625, 32, 33), extractMInt(MI625, 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MI625, 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64))), 1, 33)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64))), 1, 33)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _625), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI625, 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sall_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sall_r32_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: salq_r64_one[0m
[4m[1m[34mcreatespec salq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salq_r64_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: salq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorl %eax, %eax
%of -> 1
%af -> 1
%zf -> 1
%cf -> 1
%rax -> 1
%eax -> 1
%sf -> 1
%pf -> 1

Circuit: addw %bx, %ax
%af -> 1
%bx -> 1
%zf -> 1
%of -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%ax -> 1

Circuit: adcq %rbx, %rbx
%zf -> 1
%af -> 1
%of -> 1
%pf -> 1
%sf -> 1
%cf -> 1
%rbx -> 1

Total Circuit
PF -> 1
RBX -> 1
RAX -> 1
SF -> 1
OF -> 1
CF -> 1
ZF -> 1
AF -> 1

Target
AF -> 1
 -> 1
ZF -> 1
SF -> 1
CF -> 1
OF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove salq_r64_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salq_r64_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salq_r64_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput salq_r64_one[0m
[4m[1m[34msanitizeSpecOutput salq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _626), 0, 1), extractMInt(mi(64, _626), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _626), 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI626, 0, 1), extractMInt(MI626, 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI626, 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _626), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI626, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 1, 65) )
echo Debug:  Result: "RBX" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 1, 65) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _626)), concatenateMInt(mi(1, 0), mi(64, _626))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), MI626), concatenateMInt(mi(1, 0), MI626)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn salq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-salq_r64_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setge_r8[0m
[4m[1m[34mcreatespec setge_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setge_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetge_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .set_cf
%cf -> 1

Circuit: setnge %dh
%sf -> 1
%dh -> 1
%of -> 1

Circuit: setb %bl
%bl -> 1
%cf -> 1

Circuit: xorb %dh, %bl
%zf -> 1
%af -> 1
%of -> 1
%bl -> 1
%dh -> 1
%pf -> 1
%sf -> 1
%cf -> 1

Total Circuit
AF -> 1
ZF -> 1
CF -> 1
OF -> 1
RDX -> 1
SF -> 1
RBX -> 1
PF -> 1

Target
SF -> 1
OF -> 1
RBX -> 1

[4m[1m[34mkprove setge_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setge_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setge_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setge_r8[0m
[4m[1m[34msanitizeSpecOutput setge_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetge_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _621)), concatenateMInt(mi(7, 0), mi(1, _619))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI621), concatenateMInt(mi(7, 0), MI619)), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _621)), concatenateMInt(mi(7, 0), mi(1, _619))), mi(8, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI621), concatenateMInt(mi(7, 0), MI619)), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _621)), concatenateMInt(mi(7, 0), mi(1, _619))), mi(8, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI620, 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI621), concatenateMInt(mi(7, 0), MI619)), mi(8, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _621)), concatenateMInt(mi(7, 0), mi(1, _619))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI621), concatenateMInt(mi(7, 0), MI619)), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setge_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setge_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setl_rh[0m
[4m[1m[34mcreatespec setl_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setl_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetl_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnge %ah
%ah -> 1
%of -> 1
%sf -> 1

Total Circuit
RAX -> 1
OF -> 1
SF -> 1

Target
RAX -> 1
OF -> 1
SF -> 1

[4m[1m[34mkprove setl_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setl_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setl_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setl_rh[0m
[4m[1m[34msanitizeSpecOutput setl_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetl_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _616)), concatenateMInt(mi(7, 0), mi(1, _614))), extractMInt(mi(64, _615), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI616), concatenateMInt(mi(7, 0), MI614)), extractMInt(MI615, 56, 64))) )
echo Debug:  PreResult: "SF" |-> (mi(1, _616) )
echo Debug:  Result: "SF" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> (mi(1, _614)   )
echo Debug:  Result: "OF" |-> (MI614   )
[4m[1m[34mwriteKDefn setl_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setl_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnae_r8[0m
[4m[1m[34mcreatespec setnae_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnae_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnae_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setc %r15b
%cf -> 1
%r15b -> 1

Circuit: movzbw %r15b, %bx
%r15b -> 1
%bx -> 1

Total Circuit
RBX -> 1
R15 -> 1
CF -> 1

Target
CF -> 1
RBX -> 1

[4m[1m[34mkprove setnae_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnae_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnae_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnae_r8[0m
[4m[1m[34msanitizeSpecOutput setnae_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnae_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 56), concatenateMInt(mi(7, 0), mi(1, _613))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI614, 0, 56), concatenateMInt(mi(7, 0), MI613)) )
echo Debug:  PreResult: "CF" |-> (mi(1, _613) )
echo Debug:  Result: "CF" |-> (MI613 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614) )
echo Debug:  PreResult: "R15" |-> (concatenateMInt(mi(63, 0), mi(1, _613))   )
echo Debug:  Result: "R15" |-> (concatenateMInt(mi(63, 0), MI613)   )
[4m[1m[34mwriteKDefn setnae_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnae_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnb_rh[0m
[4m[1m[34mcreatespec setnb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnb_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_cf_into_rcx
%cf -> 1
%rcx -> 1

Circuit: callq .write_cl_to_zf
%cl -> 1
%zf -> 1

Circuit: setnz %ah
%zf -> 1
%ah -> 1

Total Circuit
ZF -> 1
CF -> 1
RAX -> 1
RCX -> 1

Target
RAX -> 1
CF -> 1

[4m[1m[34mkprove setnb_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnb_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnb_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnb_rh[0m
[4m[1m[34msanitizeSpecOutput setnb_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(mi(1, _614), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(mi(8, 1), extractMInt(mi(64, _615), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(MI614, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(mi(8, 1), extractMInt(MI615, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI615, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _614) )
echo Debug:  Result: "CF" |-> (MI614 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _614) )
echo Debug:  Result: "ZF" |-> (MI614 )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _614)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI614) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615)   )
[4m[1m[34mwriteKDefn setnb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnb_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnbe_r8[0m
[4m[1m[34mcreatespec setnbe_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnbe_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnbe_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Circuit: setnae %bh
%bh -> 1
%cf -> 1

Circuit: callq .move_064_032_rbx_r12d_r13d
%rbx -> 1
%r12d -> 1
%r13d -> 1

Circuit: callq .move_032_064_r12d_r13d_rbx
%rbx -> 1
%r12d -> 1
%r13d -> 1

Circuit: xaddl %r13d, %ebx
%of -> 1
%r13d -> 1
%af -> 1
%zf -> 1
%r13 -> 1
%cf -> 1
%rbx -> 1
%sf -> 1
%ebx -> 1
%pf -> 1

Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Total Circuit
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
R13 -> 1
OF -> 1
CF -> 1
SF -> 1
R12 -> 1

Target
ZF -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove setnbe_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnbe_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnbe_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnbe_r8[0m
[4m[1m[34msanitizeSpecOutput setnbe_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnbe_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _622)))) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI622))) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _622)))) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI622))) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _622)))), mi(32, 0)), concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _622))))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI622))), mi(32, 0)), concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI622)))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _622))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI622)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _622)))), mi(32, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _621), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(mi(64, _621), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI622))), mi(32, 0)) ) #then ( concatenateMInt(extractMInt(MI621, 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(MI621, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _622)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI622))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnbe_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnbe_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnc_rh[0m
[4m[1m[34mcreatespec setnc_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnc_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnc_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_cf_into_rbx
%cf -> 1
%rbx -> 1

Circuit: decb %bl
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%of -> 1
%bl -> 1

Circuit: movq $0x4, %rax
%rax -> 1
\$0x4 -> 1

Circuit: addw %bx, %ax
%af -> 1
%bx -> 1
%zf -> 1
%of -> 1
%sf -> 1
%pf -> 1
%ax -> 1
%cf -> 1

Total Circuit
SF -> 1
OF -> 1
CF -> 1
 -> 1
ZF -> 1
AF -> 1
PF -> 1
RAX -> 1
RBX -> 1

Target
RAX -> 1
CF -> 1

[4m[1m[34mkprove setnc_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnc_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnc_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnc_rh[0m
[4m[1m[34msanitizeSpecOutput setnc_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnc_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(16, 4)), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(16, 4)), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 1, 9), extractMInt(mi(64, _619), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI619, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 1, 9), extractMInt(MI619, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), mi(17, 4)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI618)), 1, 9)), mi(17, 4)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnc_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnc_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setne_rh[0m
[4m[1m[34mcreatespec setne_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setne_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetne_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnz %ah
%zf -> 1
%ah -> 1

Total Circuit
RAX -> 1
ZF -> 1

Target
ZF -> 1
RAX -> 1

[4m[1m[34mkprove setne_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setne_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setne_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setne_rh[0m
[4m[1m[34msanitizeSpecOutput setne_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetne_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(mi(1, _613), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _612), 0, 48), concatenateMInt(mi(8, 1), extractMInt(mi(64, _612), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _612), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _612), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(MI613, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI612, 0, 48), concatenateMInt(mi(8, 1), extractMInt(MI612, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI612, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI612, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _613) )
echo Debug:  Result: "ZF" |-> (MI613 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _612))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI612)   )
[4m[1m[34mwriteKDefn setne_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setne_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setns_r8[0m
[4m[1m[34mcreatespec setns_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setns_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetns_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_sf_into_rcx
%sf -> 1
%rcx -> 1

Circuit: callq .move_032_016_ecx_r12w_r13w
%r12w -> 1
%r13w -> 1
%ecx -> 1

Circuit: callq .move_016_032_r12w_r13w_edx
%r12w -> 1
%r13w -> 1
%edx -> 1

Circuit: callq .move_032_016_edx_r10w_r11w
%r10w -> 1
%r11w -> 1
%edx -> 1

Circuit: popcntw %r10w, %r10w
%r10w -> 1
%zf -> 1
%af -> 1
popcnt -> 1
%of -> 1
%pf -> 1
%sf -> 1
%cf -> 1

Circuit: sete %bl
%bl -> 1
%zf -> 1

Total Circuit
PF -> 1
RCX -> 1
RBX -> 1
R10 -> 1
SF -> 1
RDX -> 1
R12 -> 1
OF -> 1
CF -> 1
R13 -> 1
 -> 1
ZF -> 1
R11 -> 1
AF -> 1

Target
SF -> 1
RBX -> 1

[4m[1m[34mkprove setns_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setns_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setns_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setns_r8[0m
[4m[1m[34msanitizeSpecOutput setns_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetns_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _624)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI624) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(63, 0), mi(1, _624)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(63, 0), MI624) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _623)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI623) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _624)), mi(64, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _623), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(mi(64, _623), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI624), mi(64, 0)) ) #then ( concatenateMInt(extractMInt(MI623, 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(MI623, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _624)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI624), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(63, 0), mi(1, _624)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(63, 0), MI624) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(63, 0), mi(1, _624)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(63, 0), MI624) )
echo Debug:  PreResult: "R11" |-> (mi(64, 0) )
echo Debug:  Result: "R11" |-> (mi(64, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R13" |-> (mi(64, 0) )
echo Debug:  Result: "R13" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn setns_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setns_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setpe_r8[0m
[4m[1m[34mcreatespec setpe_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpe_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpe_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_pf_into_rcx
%rcx -> 1
%pf -> 1

Circuit: popcntw %cx, %bx
%cf -> 1
%pf -> 1
%cx -> 1
%sf -> 1
popcnt -> 1
%of -> 1
%zf -> 1
%af -> 1
%bx -> 1

Total Circuit
PF -> 1
RCX -> 1
RBX -> 1
SF -> 1
OF -> 1
CF -> 1
 -> 1
ZF -> 1
AF -> 1

Target
RBX -> 1
PF -> 1

[4m[1m[34mkprove setpe_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpe_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpe_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setpe_r8[0m
[4m[1m[34msanitizeSpecOutput setpe_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpe_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _618)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI618) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 56), concatenateMInt(mi(7, 0), mi(1, _618))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI619, 0, 56), concatenateMInt(mi(7, 0), MI618)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _618)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI618), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setpe_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setpe_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shlb_rh_one[0m
[4m[1m[34mcreatespec shlb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlb_rh_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: shlb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movb %ah, %bl
%ah -> 1
%bl -> 1

Circuit: shlb $0x1, %bl
%pf -> 1
%sf -> 1
%cf -> 1
%zf -> 1
\$0x1 -> 1
%af -> 1
%of -> 1
%bl -> 1

Circuit: movzbq %bl, %rcx
%bl -> 1
%rcx -> 1

Circuit: movb %cl, %ah
%cl -> 1
%ah -> 1

Total Circuit
SF -> 1
CF -> 1
OF -> 1
AF -> 1
 -> 1
ZF -> 1
PF -> 1
RCX -> 1
RAX -> 1
RBX -> 1

Target
OF -> 1
CF -> 1
SF -> 1
 -> 1
ZF -> 1
AF -> 1
PF -> 1
RAX -> 1

[4m[1m[34mkprove shlb_rh_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlb_rh_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlb_rh_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shlb_rh_one[0m
[4m[1m[34msanitizeSpecOutput shlb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _628), 48, 49), extractMInt(mi(64, _628), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _628), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI628, 48, 49), extractMInt(MI628, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI628, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn shlb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shlb_rh_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shrxq_r64_r64_r64[0m
[4m[1m[34mcreatespec shrxq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shrxq_r64_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshrxq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq %rcx, %rbx
%rbx -> 1
%rcx -> 1

Circuit: xaddb %cl, %dl
%of -> 1
%af -> 1
%zf -> 1
%cl -> 1
%cf -> 1
%dl -> 1
%sf -> 1
%pf -> 1

Circuit: xchgw %bx, %bx
%bx -> 1

Circuit: shrq %cl, %rbx
%cf -> 1
%rbx -> 1
%cl -> 1
%sf -> 1
%pf -> 1
%of -> 1
%af -> 1
%zf -> 1

Total Circuit
PF -> 1
RCX -> 1
RBX -> 1
RDX -> 1
SF -> 1
CF -> 1
OF -> 1
AF -> 1
ZF -> 1

Target
RCX -> 1
RBX -> 1
RDX -> 1
 -> 1

[4m[1m[34mkprove shrxq_r64_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shrxq_r64_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shrxq_r64_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shrxq_r64_r64_r64[0m
[4m[1m[34msanitizeSpecOutput shrxq_r64_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshrxq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 0, 1) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(mi(64, _620), 63, 64) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(lshrMInt(mi(64, _620),  ( uvalueMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)))  -Int  1 ) ), 63, 64) ) #else ( extractMInt(mi(64, _620), 0, 1) ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 0, 1) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(MI620, 63, 64) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(lshrMInt(MI620,  ( uvalueMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)))  -Int  1 ) ), 63, 64) ) #else ( extractMInt(MI620, 0, 1) ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 1, 2) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(lshrMInt(mi(64, _620), uvalueMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)))), 0, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 1, 2) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(lshrMInt(MI620, uvalueMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)))), 0, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _621), 56, 64), extractMInt(mi(64, _620), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( undef ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI621, 56, 64), extractMInt(MI620, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( undef ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(lshrMInt(mi(64, _620), uvalueMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(lshrMInt(MI620, uvalueMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 56), extractMInt(mi(64, _621), 56, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI620, 0, 56), extractMInt(MI621, 56, 64)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt ( ( eqMInt(extractMInt(mi(64, _621), 56, 57), extractMInt(mi(64, _620), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _621), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(mi(64, _620), 0, 1) ) #else ( undef ) #fi)  ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt ( ( eqMInt(extractMInt(MI621, 56, 57), extractMInt(MI620, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI621, 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(MI620, 0, 1) ) #else ( undef ) #fi)  ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 1, 9)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(extractMInt(MI621, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( lshrMInt(mi(64, _620), uvalueMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( lshrMInt(MI620, uvalueMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(lshrMInt(mi(64, _620), uvalueMInt(andMInt(extractMInt(mi(64, _621), 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI620, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(lshrMInt(MI620, uvalueMInt(andMInt(extractMInt(MI621, 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)    )
[4m[1m[34mwriteKDefn shrxq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shrxq_r64_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sqrtpd_xmm_xmm[0m
[4m[1m[34mcreatespec sqrtpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r8 -> 1
%r9 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Circuit: vsqrtpd %xmm1, %xmm10
avx -> 1
%ymm10 -> 1
%xmm1 -> 1
%xmm10 -> 1

Circuit: movapd %xmm10, %xmm1
%xmm10 -> 1
%xmm1 -> 1
sse2 -> 1

Total Circuit
R8 -> 1
YMM10 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1
R9 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove sqrtpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sqrtpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput sqrtpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), 2), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 128, 192), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), 2), 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), 2), 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 128, 192), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), 2), 64))) )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _616), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI616, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _616), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI616, 128, 192) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn sqrtpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sqrtpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sqrtsd_xmm_xmm[0m
[4m[1m[34mcreatespec sqrtsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpbroadcastq %xmm2, %ymm5
%xmm2 -> 1
%ymm5 -> 1
avx2 -> 1

Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm10 -> 1
%xmm1 -> 1
%xmm11 -> 1

Circuit: vminpd %ymm5, %ymm5, %ymm5
avx -> 1
%ymm5 -> 1

Circuit: vsqrtpd %xmm5, %xmm10
%xmm10 -> 1
%ymm10 -> 1
%xmm5 -> 1
avx -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm11 -> 1
%xmm10 -> 1
%xmm1 -> 1

Total Circuit
YMM11 -> 1
YMM5 -> 1
YMM10 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove sqrtsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sqrtsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput sqrtsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 192), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), 2), 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 192), Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), 2), 64)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), 2), 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), 2), 64))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _615), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI615, 128, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _616), 192, 256)), concatenateMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _616), 192, 256))) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(concatenateMInt(extractMInt(MI616, 192, 256), extractMInt(MI616, 192, 256)), concatenateMInt(extractMInt(MI616, 192, 256), extractMInt(MI616, 192, 256))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn sqrtsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sqrtsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sqrtss_xmm_xmm[0m
[4m[1m[34mcreatespec sqrtss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm2 -> 1

Circuit: sqrtps %xmm8, %xmm4
sse -> 1
%xmm4 -> 1
%xmm8 -> 1

Circuit: vmovss %xmm4, %xmm1, %xmm7
%ymm7 -> 1
%xmm4 -> 1
avx -> 1
%xmm7 -> 1
%xmm1 -> 1

Circuit: movups %xmm7, %xmm1
sse -> 1
%xmm7 -> 1
%xmm1 -> 1

Total Circuit
YMM4 -> 1
YMM10 -> 1
YMM9 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1
YMM8 -> 1
YMM7 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove sqrtss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sqrtss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput sqrtss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _619) )
echo Debug:  Result: "YMM2" |-> (MI619 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _618), 0, 224), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI618, 0, 224), Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2), 32)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2), 32)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2), 32)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _618) )
echo Debug:  Result: "SPAD1" |-> (MI618 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _618), 128, 224), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2), 32))) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI618, 128, 224), Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2), 32))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 192, 224))   )
[4m[1m[34mwriteKDefn sqrtss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sqrtss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subps_xmm_xmm[0m
[4m[1m[34mcreatespec subps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovaps %xmm2, %xmm10
%ymm10 -> 1
%xmm10 -> 1
avx -> 1
%xmm2 -> 1

Circuit: vminps %xmm1, %xmm1, %xmm4
%xmm1 -> 1
%ymm4 -> 1
avx -> 1
%xmm4 -> 1

Circuit: vsubps %ymm10, %ymm4, %ymm2
%ymm10 -> 1
%ymm4 -> 1
%ymm2 -> 1
avx -> 1

Circuit: movdqu %xmm2, %xmm1
%xmm2 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM4 -> 1
YMM10 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove subps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput subps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _614), 128, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(MI614, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn subps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subsd_xmm_xmm[0m
[4m[1m[34mcreatespec subsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq %xmm2, %xmm0
%xmm0 -> 1
sse2 -> 1
%xmm2 -> 1

Circuit: vmovss %xmm0, %xmm0, %xmm7
%ymm7 -> 1
%xmm0 -> 1
avx -> 1
%xmm7 -> 1

Circuit: vsubpd %xmm7, %xmm1, %xmm4
%xmm1 -> 1
%ymm4 -> 1
%xmm4 -> 1
avx -> 1
%xmm7 -> 1

Circuit: movsd %xmm4, %xmm1
%xmm1 -> 1
%xmm4 -> 1
sse2 -> 1

Total Circuit
YMM7 -> 1
 -> 1
YMM0 -> 1
YMM2 -> 1
YMM1 -> 1
YMM4 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove subsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput subsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 192), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  -Float  0e+00 ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  -Float  0e+00 ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(mi(256, _616), 192, 224)), extractMInt(mi(256, _616), 224, 256))) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(MI616, 192, 224)), extractMInt(MI616, 224, 256))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 192, 256))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 192, 256))   )
[4m[1m[34mwriteKDefn subsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: unpckhpd_xmm_xmm[0m
[4m[1m[34mcreatespec unpckhpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpckhpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpckhpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm1_xmm12_xmm13
%xmm1 -> 1
%xmm12 -> 1
%xmm13 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%xmm2 -> 1
%r13 -> 1
%r12 -> 1

Circuit: movq %xmm13, %r12
%xmm13 -> 1
sse2 -> 1
%r12 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%xmm1 -> 1
%r12 -> 1

Total Circuit
YMM12 -> 1
YMM13 -> 1
YMM2 -> 1
R13 -> 1
YMM1 -> 1
 -> 1
R12 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove unpckhpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpckhpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpckhpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput unpckhpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput unpckhpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpckhpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 192, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 192, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 128), concatenateMInt(extractMInt(mi(256, _617), 128, 192), extractMInt(mi(256, _616), 128, 192))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 128), concatenateMInt(extractMInt(MI617, 128, 192), extractMInt(MI616, 128, 192))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 128, 192)) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _616), 128, 192) )
echo Debug:  Result: "R12" |-> (extractMInt(MI616, 128, 192) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _617), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI617, 128, 192) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
[4m[1m[34mwriteKDefn unpckhpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-unpckhpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vaddss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vaddss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vaddps %xmm3, %xmm2, %xmm3
avx -> 1
%ymm3 -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: vmovss %xmm3, %xmm2, %xmm1
%xmm3 -> 1
%xmm1 -> 1
%xmm2 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vaddss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vaddss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vaddss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32)))))   )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI614, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI614, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI614, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32)))))   )
[4m[1m[34mwriteKDefn vaddss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vaddss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandnps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vandnps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorpd %xmm2, %xmm3, %xmm10
avx -> 1
%xmm2 -> 1
%ymm10 -> 1
%xmm10 -> 1
%xmm3 -> 1

Circuit: vpxor %xmm10, %xmm2, %xmm1
%xmm10 -> 1
%xmm1 -> 1
%xmm2 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
YMM10 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vandnps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandnps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vandnps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vandnps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandnps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vbroadcastss_ymm_xmm[0m
[4m[1m[34mcreatespec vbroadcastss_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastss_ymm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvbroadcastss_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r8 -> 1
%r9 -> 1

Circuit: callq .move_064_128_r8_r9_xmm3
%xmm3 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vbroadcastss %xmm3, %xmm1
%ymm1 -> 1
avx2 -> 1
%xmm3 -> 1
%xmm1 -> 1

Circuit: callq .move_r8b_to_byte_23_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: vbroadcastsd %xmm1, %ymm1
avx2 -> 1
%xmm1 -> 1
%ymm1 -> 1

Total Circuit
R8 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
R9 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vbroadcastss_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastss_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastss_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vbroadcastss_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vbroadcastss_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvbroadcastss_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 224, 256), extractMInt(mi(256, _615), 224, 256)), concatenateMInt(extractMInt(mi(256, _615), 224, 256), extractMInt(mi(256, _615), 224, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 224, 256), extractMInt(mi(256, _615), 224, 256)), concatenateMInt(extractMInt(mi(256, _615), 224, 256), extractMInt(mi(256, _615), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI615, 224, 256), extractMInt(MI615, 224, 256)), concatenateMInt(extractMInt(MI615, 224, 256), extractMInt(MI615, 224, 256))), concatenateMInt(concatenateMInt(extractMInt(MI615, 224, 256), extractMInt(MI615, 224, 256)), concatenateMInt(extractMInt(MI615, 224, 256), extractMInt(MI615, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _615), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI615, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _615), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI615, 128, 192) )
[4m[1m[34mwriteKDefn vbroadcastss_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vbroadcastss_ymm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtpd2dqx_xmm_xmm[0m
vcvtpd2dqx_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2dq_xmm_ymm.k
Warn: [4m[1m[35mvcvtpd2dqx_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vdivpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vdivpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: divpd %xmm3, %xmm2
%xmm3 -> 1
%xmm2 -> 1
sse2 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm5 -> 1
%ymm15 -> 1
%ymm12 -> 1
%ymm10 -> 1
%ymm4 -> 1
%ymm2 -> 1
%ymm0 -> 1
avx -> 1
%ymm13 -> 1
%ymm8 -> 1
%ymm9 -> 1
%ymm7 -> 1
%ymm6 -> 1
%ymm11 -> 1
%ymm14 -> 1
%ymm3 -> 1
%ymm1 -> 1

Circuit: vorps %xmm11, %xmm3, %xmm1
avx -> 1
%xmm11 -> 1
%ymm1 -> 1
%xmm1 -> 1
%xmm3 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r9 -> 1
%xmm1 -> 1
%r8 -> 1

Total Circuit
YMM14 -> 1
R9 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
YMM8 -> 1
YMM6 -> 1
 -> 1
YMM4 -> 1
YMM9 -> 1
YMM10 -> 1
YMM11 -> 1
R8 -> 1
YMM12 -> 1
YMM13 -> 1
YMM15 -> 1
YMM0 -> 1
YMM7 -> 1
YMM5 -> 1

Target
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vdivpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vdivpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vdivpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R8" |-> (Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI629, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "R9" |-> (Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _629), 128, 192), 53, 11) ) , 64) )
echo Debug:  Result: "R9" |-> (Float2MInt( ( MInt2Float(extractMInt(MI630, 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(MI629, 128, 192), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _629), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI630, 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(MI629, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI629, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vdivpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vdivpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vdivps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vdivps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: divps %xmm3, %xmm2
sse -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: vmovdqa %xmm2, %xmm8
%ymm8 -> 1
avx -> 1
%xmm8 -> 1
%xmm2 -> 1

Circuit: vmovdqa %ymm8, %ymm4
avx -> 1
%ymm4 -> 1
%ymm8 -> 1

Circuit: vmovdqa %xmm4, %xmm1
%xmm4 -> 1
avx -> 1
%ymm1 -> 1
%xmm1 -> 1

Total Circuit
YMM4 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
YMM8 -> 1
 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vdivps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vdivps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vdivps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI616, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
[4m[1m[34mwriteKDefn vdivps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vdivps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd213ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmadd213ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmadd231ps %xmm1, %xmm2, %xmm3
%xmm3 -> 1
%xmm1 -> 1
%ymm3 -> 1
fma -> 1
%xmm2 -> 1

Circuit: vmovss %xmm3, %xmm1, %xmm1
avx -> 1
%xmm1 -> 1
%xmm3 -> 1
%ymm1 -> 1

Total Circuit
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmadd213ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd213ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd213ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _613), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) )  ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI613, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) )  ) , 32))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _613), 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _613), 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _613), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) )  ) , 32)))))   )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI613, 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI613, 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI613, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) )  ) , 32)))))   )
[4m[1m[34mwriteKDefn vfmadd213ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd213ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub231ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmsub132ps %xmm3, %xmm1, %xmm2
fma -> 1
%xmm1 -> 1
%xmm3 -> 1
%xmm2 -> 1
%ymm2 -> 1

Circuit: vmovdqa %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmsub231ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub231ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub231ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vfmsub231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub231ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub231ss_xmm_xmm_xmm[0m
vfmsub231ss_xmm_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2ps_xmm_ymm.k
Warn: [4m[1m[35mvfmsub231ss_xmm_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vfnmadd213ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm2, %xmm13
%ymm13 -> 1
%xmm13 -> 1
avx -> 1
%xmm2 -> 1

Circuit: callq .move_128_64_xmm1_xmm8_xmm9
%xmm1 -> 1
%xmm9 -> 1
%xmm8 -> 1

Circuit: vorps %xmm8, %xmm1, %xmm14
%xmm1 -> 1
%ymm14 -> 1
%xmm14 -> 1
avx -> 1
%xmm8 -> 1

Circuit: vmovdqu %xmm3, %xmm1
avx -> 1
%ymm1 -> 1
%xmm3 -> 1
%xmm1 -> 1

Circuit: vfnmadd231ps %ymm14, %ymm13, %ymm1
%ymm13 -> 1
%ymm1 -> 1
fma -> 1
%ymm14 -> 1

Total Circuit
YMM14 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM8 -> 1
YMM9 -> 1
YMM13 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmadd213ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd213ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd213ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) ) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI619, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI618, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI619, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI618, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI619, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI618, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI619, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) ) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 256)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 192, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 192, 256)) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 128, 192))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 128, 192))   )
[4m[1m[34mwriteKDefn vfnmadd213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd213ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub132ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmsub132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vmovups %xmm1, %xmm11
avx -> 1
%xmm1 -> 1
%xmm11 -> 1
%ymm11 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Circuit: vfnmsub231ps %xmm3, %xmm11, %xmm1
fma -> 1
%xmm11 -> 1
%ymm1 -> 1
%xmm1 -> 1
%xmm3 -> 1

Total Circuit
YMM11 -> 1
R8 -> 1
R9 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmsub132ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub132ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub132ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI618, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI618, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI618, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _618) )
echo Debug:  Result: "YMM3" |-> (MI618 )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _617), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI617, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _617), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI617, 128, 192) )
[4m[1m[34mwriteKDefn vfnmsub132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub132ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub132ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmsub132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm3_xmm4_xmm5_xmm6_xmm7
%xmm5 -> 1
%xmm4 -> 1
%xmm7 -> 1
%xmm3 -> 1
%xmm6 -> 1

Circuit: vfnmsub231ps %xmm4, %xmm1, %xmm2
%ymm2 -> 1
%xmm4 -> 1
%xmm2 -> 1
%xmm1 -> 1
fma -> 1

Circuit: vmovss %xmm2, %xmm1, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1
%xmm2 -> 1

Total Circuit
YMM7 -> 1
YMM5 -> 1
 -> 1
YMM6 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
YMM4 -> 1

Target
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vfnmsub132ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub132ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub132ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI618, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI618, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI618, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI619, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI619, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
[4m[1m[34mwriteKDefn vfnmsub132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub132ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub213ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmsub213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_byte_7_of_ymm1_to_r8b
%r8b -> 1
%ymm1 -> 1

Circuit: callq .move_r8b_to_byte_7_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: vfnmsub231ps %xmm1, %xmm2, %xmm3
%xmm3 -> 1
%xmm1 -> 1
%ymm3 -> 1
fma -> 1
%xmm2 -> 1

Circuit: vmovapd %xmm3, %xmm1
avx -> 1
%ymm1 -> 1
%xmm3 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1
R8 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmsub213ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub213ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub213ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _614), 192, 200))   )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI614, 192, 200))   )
[4m[1m[34mwriteKDefn vfnmsub213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub213ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhaddpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vhaddpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovlhps %xmm3, %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm3 -> 1
avx -> 1
%xmm2 -> 1

Circuit: vpunpckhqdq %xmm3, %xmm2, %xmm9
%xmm2 -> 1
avx -> 1
%xmm9 -> 1
%ymm9 -> 1
%xmm3 -> 1

Circuit: addpd %xmm9, %xmm1
%xmm9 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1
YMM9 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vhaddpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhaddpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vhaddpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vhaddpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhaddpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmaxpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmaxpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm3, %xmm5
%xmm3 -> 1
avx -> 1
%xmm5 -> 1
%ymm5 -> 1

Circuit: vmaxps %xmm2, %xmm2, %xmm11
%xmm2 -> 1
avx -> 1
%ymm11 -> 1
%xmm11 -> 1

Circuit: vmaxpd %ymm5, %ymm11, %ymm1
avx -> 1
%ymm5 -> 1
%ymm11 -> 1
%ymm1 -> 1

Total Circuit
YMM11 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM5 -> 1

Target
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmaxpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmaxpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmaxpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI617, 128, 192), 53, 11), MInt2Float(extractMInt(MI616, 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256))   )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256))   )
[4m[1m[34mwriteKDefn vmaxpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmaxpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmaxsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmaxsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpunpcklqdq %xmm3, %xmm3, %xmm13
%xmm13 -> 1
%xmm3 -> 1
%ymm13 -> 1
avx -> 1

Circuit: vmovdqa %xmm2, %xmm6
%xmm2 -> 1
avx -> 1
%ymm6 -> 1
%xmm6 -> 1

Circuit: vmaxpd %ymm13, %ymm6, %ymm3
avx -> 1
%ymm13 -> 1
%ymm3 -> 1
%ymm6 -> 1

Circuit: vmovsd %xmm3, %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm3 -> 1
%xmm2 -> 1
avx -> 1

Total Circuit
YMM6 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
YMM13 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmaxsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmaxsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmaxsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 128, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 128, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 192, 256), extractMInt(mi(256, _617), 192, 256))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 192, 256), extractMInt(MI617, 192, 256))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
[4m[1m[34mwriteKDefn vmaxsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmaxsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmaxss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmaxss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm2, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1
%xmm2 -> 1

Circuit: callq .move_128_032_xmm1_xmm4_xmm5_xmm6_xmm7
%xmm7 -> 1
%xmm6 -> 1
%xmm1 -> 1
%xmm5 -> 1
%xmm4 -> 1

Circuit: vmaxps %xmm3, %xmm4, %xmm13
%xmm4 -> 1
avx -> 1
%xmm3 -> 1
%ymm13 -> 1
%xmm13 -> 1

Circuit: movss %xmm13, %xmm1
%xmm1 -> 1
%xmm13 -> 1
sse -> 1

Total Circuit
YMM7 -> 1
YMM5 -> 1
 -> 1
YMM6 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
YMM13 -> 1
YMM4 -> 1

Target
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmaxss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmaxss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmaxss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _619) )
echo Debug:  Result: "YMM2" |-> (MI619 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 224)), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _620), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 224)), Float2MInt(maxFloat(MInt2Float(extractMInt(MI620, 224, 256), 24, 8), MInt2Float(extractMInt(MI619, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _620), 128, 160), 24, 8), 0e+00f), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _620), 160, 192), 24, 8), 0e+00f), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _620), 192, 224), 24, 8), 0e+00f), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _620), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8)), 32))))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI620, 128, 160), 24, 8), 0e+00f), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI620, 160, 192), 24, 8), 0e+00f), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI620, 192, 224), 24, 8), 0e+00f), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI620, 224, 256), 24, 8), MInt2Float(extractMInt(MI619, 224, 256), 24, 8)), 32))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _620) )
echo Debug:  Result: "YMM3" |-> (MI620 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
[4m[1m[34mwriteKDefn vmaxss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmaxss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vminpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vminpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxps %xmm3, %xmm3, %xmm8
%xmm8 -> 1
avx -> 1
%xmm3 -> 1
%ymm8 -> 1

Circuit: vmovups %xmm2, %xmm1
avx -> 1
%xmm2 -> 1
%ymm1 -> 1
%xmm1 -> 1

Circuit: vminpd %ymm8, %ymm1, %ymm1
%ymm8 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
YMM8 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vminpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vminpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vminpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 128, 192), 53, 11), MInt2Float(extractMInt(MI615, 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), MInt2Float(extractMInt(MI615, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256))   )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256))   )
[4m[1m[34mwriteKDefn vminpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vminpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovd_r32_xmm[0m
[4m[1m[34mcreatespec vmovd_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovd_r32_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovd_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq %xmm1, %rbx
%xmm1 -> 1
%rbx -> 1
sse2 -> 1

Circuit: callq .move_032_016_ebx_r8w_r9w
%r9w -> 1
%r8w -> 1
%ebx -> 1

Circuit: callq .move_016_032_r8w_r9w_ebx
%r8w -> 1
%ebx -> 1
%r9w -> 1

Total Circuit
YMM1 -> 1
 -> 1
R9 -> 1
RBX -> 1
R8 -> 1

Target
RBX -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vmovd_r32_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovd_r32_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovd_r32_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovd_r32_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovd_r32_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovd_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _614), 224, 256)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI614, 224, 256)) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _614) )
echo Debug:  Result: "YMM1" |-> (MI614 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(256, _614), 240, 256)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(48, 0), extractMInt(MI614, 240, 256)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(256, _614), 224, 240))   )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(MI614, 224, 240))   )
[4m[1m[34mwriteKDefn vmovd_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovd_r32_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovddup_ymm_ymm[0m
[4m[1m[34mcreatespec vmovddup_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovddup_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovddup_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm2_xmm8_xmm9
%xmm9 -> 1
%xmm8 -> 1
%ymm2 -> 1

Circuit: vmovddup %xmm9, %xmm9
avx -> 1
%xmm9 -> 1
%ymm9 -> 1

Circuit: vpbroadcastq %xmm2, %xmm8
%xmm2 -> 1
%xmm8 -> 1
avx2 -> 1
%ymm8 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm8 -> 1
%ymm1 -> 1
%xmm9 -> 1

Total Circuit
YMM9 -> 1
YMM2 -> 1
YMM1 -> 1
YMM8 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovddup_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovddup_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovddup_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovddup_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovddup_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovddup_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 64, 128), extractMInt(mi(256, _614), 64, 128)), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI614, 64, 128), extractMInt(MI614, 64, 128)), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 64, 128), extractMInt(mi(256, _614), 64, 128))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 64, 128), extractMInt(MI614, 64, 128))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)))   )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)))   )
[4m[1m[34mwriteKDefn vmovddup_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovddup_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovq_xmm_xmm[0m
[4m[1m[34mcreatespec vmovq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r12_r13
%xmm2 -> 1
%r12 -> 1
%r13 -> 1

Circuit: vzeroall
%ymm13 -> 1
%ymm8 -> 1
%ymm14 -> 1
%ymm11 -> 1
%ymm6 -> 1
%ymm9 -> 1
%ymm7 -> 1
%ymm3 -> 1
%ymm1 -> 1
%ymm12 -> 1
%ymm15 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm10 -> 1
%ymm4 -> 1
%ymm0 -> 1
avx -> 1

Circuit: xorl %r13d, %r13d
%r13 -> 1
%of -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%af -> 1
%zf -> 1
%r13d -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%r12 -> 1
%xmm1 -> 1

Total Circuit
OF -> 1
CF -> 1
YMM14 -> 1
 -> 1
ZF -> 1
YMM8 -> 1
YMM6 -> 1
R13 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
YMM10 -> 1
YMM9 -> 1
PF -> 1
YMM4 -> 1
YMM13 -> 1
YMM11 -> 1
YMM12 -> 1
SF -> 1
YMM15 -> 1
R12 -> 1
YMM7 -> 1
AF -> 1
YMM0 -> 1
YMM5 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1) )
echo Debug:  Result: "ZF" |-> (mi(1, 1) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _634), 192, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(192, 0), extractMInt(MI634, 192, 256)) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _634), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI634, 192, 256) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (mi(64, 0) )
echo Debug:  Result: "R13" |-> (mi(64, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovsldup_xmm_xmm[0m
[4m[1m[34mcreatespec vmovsldup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsldup_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovsldup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm12_xmm13
%xmm2 -> 1
%xmm12 -> 1
%xmm13 -> 1

Circuit: vbroadcastss %xmm2, %xmm9
%xmm2 -> 1
avx2 -> 1
%xmm9 -> 1
%ymm9 -> 1

Circuit: vbroadcastss %xmm13, %xmm5
%ymm5 -> 1
avx2 -> 1
%xmm5 -> 1
%xmm13 -> 1

Circuit: vpunpcklqdq %xmm5, %xmm9, %xmm1
avx -> 1
%xmm5 -> 1
%ymm1 -> 1
%xmm9 -> 1
%xmm1 -> 1

Total Circuit
YMM5 -> 1
YMM12 -> 1
YMM13 -> 1
YMM9 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovsldup_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsldup_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsldup_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovsldup_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovsldup_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovsldup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 192, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 192, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 128, 192)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 160, 192), extractMInt(mi(256, _616), 160, 192)), concatenateMInt(extractMInt(mi(256, _616), 224, 256), extractMInt(mi(256, _616), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI616, 160, 192), extractMInt(MI616, 160, 192)), concatenateMInt(extractMInt(MI616, 224, 256), extractMInt(MI616, 224, 256)))) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 160, 192), extractMInt(mi(256, _616), 160, 192)), concatenateMInt(extractMInt(mi(256, _616), 160, 192), extractMInt(mi(256, _616), 160, 192)))) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI616, 160, 192), extractMInt(MI616, 160, 192)), concatenateMInt(extractMInt(MI616, 160, 192), extractMInt(MI616, 160, 192)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 224, 256), extractMInt(mi(256, _616), 224, 256)), concatenateMInt(extractMInt(mi(256, _616), 224, 256), extractMInt(mi(256, _616), 224, 256))))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI616, 224, 256), extractMInt(MI616, 224, 256)), concatenateMInt(extractMInt(MI616, 224, 256), extractMInt(MI616, 224, 256))))   )
[4m[1m[34mwriteKDefn vmovsldup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovsldup_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmulpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmulpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: mulpd %xmm3, %xmm2
%xmm2 -> 1
sse2 -> 1
%xmm3 -> 1

Circuit: vmovdqu %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vmulpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmulpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmulpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vmulpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmulpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmulsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmulsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: mulsd %xmm3, %xmm2
%xmm2 -> 1
sse2 -> 1
%xmm3 -> 1

Circuit: vmovdqa %xmm2, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1
%xmm2 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmulsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmulsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmulsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI614, 0, 192), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 128, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 128, 192), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vmulsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmulsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmulss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmulss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovups %xmm3, %xmm9
avx -> 1
%ymm9 -> 1
%xmm9 -> 1
%xmm3 -> 1

Circuit: mulss %xmm9, %xmm2
sse -> 1
%xmm2 -> 1
%xmm9 -> 1

Circuit: vmovaps %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm2 -> 1
avx -> 1

Total Circuit
YMM9 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vmulss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmulss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmulss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI615, 0, 224), Float2MInt( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _615), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI615, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vmulss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmulss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpaddq_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vpaddq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddq_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpaddq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: paddq %xmm2, %xmm3
%xmm2 -> 1
%xmm3 -> 1
sse2 -> 1

Circuit: vmovups %xmm3, %xmm1
%xmm1 -> 1
%xmm3 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpaddq_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddq_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddq_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpaddq_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpaddq_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpaddq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _614), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _615), 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _614), 192, 256)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _615), 192, 256))), 1, 65))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI615, 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 192, 256)), concatenateMInt(mi(1, 0), extractMInt(MI615, 192, 256))), 1, 65))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _614), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _615), 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _614), 192, 256)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _615), 192, 256))), 1, 65)))   )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI615, 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 192, 256)), concatenateMInt(mi(1, 0), extractMInt(MI615, 192, 256))), 1, 65)))   )
[4m[1m[34mwriteKDefn vpaddq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpaddq_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastd_xmm_xmm[0m
[4m[1m[34mcreatespec vpbroadcastd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%r13 -> 1
%xmm2 -> 1

Circuit: callq .move_064_128_r12_r13_xmm3
%xmm3 -> 1
%r13 -> 1
%r12 -> 1

Circuit: vbroadcastss %xmm3, %xmm1
avx2 -> 1
%ymm1 -> 1
%xmm3 -> 1
%xmm1 -> 1

Total Circuit
R13 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1
R12 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpbroadcastd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 224, 256), extractMInt(mi(256, _615), 224, 256)), concatenateMInt(extractMInt(mi(256, _615), 224, 256), extractMInt(mi(256, _615), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI615, 224, 256), extractMInt(MI615, 224, 256)), concatenateMInt(extractMInt(MI615, 224, 256), extractMInt(MI615, 224, 256)))) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _615), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI615, 192, 256) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _615), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI615, 128, 192) )
[4m[1m[34mwriteKDefn vpbroadcastd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastd_ymm_xmm[0m
[4m[1m[34mcreatespec vpbroadcastd_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastd_ymm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastd_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r12_r13
%xmm2 -> 1
%r12 -> 1
%r13 -> 1

Circuit: callq .move_064_128_r12_r13_xmm3
%r12 -> 1
%r13 -> 1
%xmm3 -> 1

Circuit: vbroadcastss %xmm3, %xmm13
%xmm13 -> 1
%ymm13 -> 1
%xmm3 -> 1
avx2 -> 1

Circuit: vmovdqa %xmm13, %xmm12
avx -> 1
%xmm12 -> 1
%ymm12 -> 1
%xmm13 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm12 -> 1
%xmm13 -> 1
%ymm1 -> 1

Total Circuit
 -> 1
YMM2 -> 1
R13 -> 1
YMM1 -> 1
YMM3 -> 1
YMM13 -> 1
YMM12 -> 1
R12 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vpbroadcastd_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastd_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastd_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastd_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastd_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastd_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256))), concatenateMInt(concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _617), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI617, 192, 256) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _617), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI617, 128, 192) )
[4m[1m[34mwriteKDefn vpbroadcastd_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastd_ymm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpor_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vpor_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpor_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpor_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorps %xmm3, %xmm2, %xmm14
%xmm2 -> 1
avx -> 1
%xmm14 -> 1
%xmm3 -> 1
%ymm14 -> 1

Circuit: vmovapd %xmm14, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm14 -> 1
avx -> 1

Total Circuit
YMM14 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpor_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpor_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpor_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpor_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpor_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpor_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _615), 128, 192), extractMInt(mi(256, _616), 128, 192)), orMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _616), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI615, 128, 192), extractMInt(MI616, 128, 192)), orMInt(extractMInt(MI615, 192, 256), extractMInt(MI616, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _615), 128, 192), extractMInt(mi(256, _616), 128, 192)), orMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _616), 192, 256))))   )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI615, 128, 192), extractMInt(MI616, 128, 192)), orMInt(extractMInt(MI615, 192, 256), extractMInt(MI616, 192, 256))))   )
[4m[1m[34mwriteKDefn vpor_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpor_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vrcpss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vrcpss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrcpss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrcpss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovss %xmm3, %xmm2, %xmm1
avx -> 1
%xmm2 -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm1 -> 1

Circuit: vmovapd %xmm1, %xmm11
avx -> 1
%xmm11 -> 1
%ymm11 -> 1
%xmm1 -> 1

Circuit: rcpss %xmm11, %xmm1
sse -> 1
%xmm11 -> 1
%xmm1 -> 1

Total Circuit
YMM11 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vrcpss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrcpss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrcpss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vrcpss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vrcpss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrcpss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 224)), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 224)), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _615), 128, 224), extractMInt(mi(256, _616), 224, 256))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI615, 128, 224), extractMInt(MI616, 224, 256))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vrcpss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vrcpss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsubss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vsubss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovaps %xmm2, %xmm13
avx -> 1
%xmm2 -> 1
%ymm13 -> 1
%xmm13 -> 1

Circuit: vpmovzxdq %xmm3, %xmm11
%xmm11 -> 1
%ymm11 -> 1
%xmm3 -> 1
avx -> 1

Circuit: vsubps %ymm11, %ymm13, %ymm6
avx -> 1
%ymm13 -> 1
%ymm11 -> 1
%ymm6 -> 1

Circuit: vmovss %xmm6, %xmm13, %xmm1
%xmm1 -> 1
%xmm6 -> 1
%xmm13 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM11 -> 1
YMM13 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1
YMM6 -> 1

Target
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vsubss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsubss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsubss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _618), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _618), 224, 256)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI618, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI618, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _618) )
echo Debug:  Result: "YMM3" |-> (MI618 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 160), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8) ) , 32), concatenateMInt(extractMInt(mi(256, _617), 192, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 160), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI618, 192, 224), 24, 8) ) , 32), concatenateMInt(extractMInt(MI617, 192, 224), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32))))) )
[4m[1m[34mwriteKDefn vsubss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsubss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpcklpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vunpcklpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq %xmm3, %r8
%xmm3 -> 1
%r8 -> 1
sse2 -> 1

Circuit: callq .move_128_064_xmm2_r10_r11
%xmm2 -> 1
%r10 -> 1
%r11 -> 1

Circuit: vzeroall
avx -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm10 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm15 -> 1
%ymm1 -> 1
%ymm3 -> 1
%ymm14 -> 1
%ymm7 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm6 -> 1
%ymm8 -> 1
%ymm13 -> 1

Circuit: movq %r8, %r11
%r8 -> 1
%r11 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r11 -> 1
%xmm1 -> 1
%r10 -> 1

Total Circuit
YMM15 -> 1
YMM7 -> 1
R11 -> 1
YMM0 -> 1
YMM5 -> 1
YMM14 -> 1
YMM6 -> 1
YMM8 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
YMM10 -> 1
YMM9 -> 1
YMM4 -> 1
YMM13 -> 1
R10 -> 1
R8 -> 1
YMM11 -> 1
YMM12 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vunpcklpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpcklpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vunpcklpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _631), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI631, 192, 256) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _630), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI630, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _631), 192, 256), extractMInt(mi(256, _630), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI631, 192, 256), extractMInt(MI630, 192, 256))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _631), 192, 256) )
echo Debug:  Result: "R11" |-> (extractMInt(MI631, 192, 256) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vunpcklpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpcklpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vxorpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vxorpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpxor %xmm2, %xmm3, %xmm2
%ymm2 -> 1
avx -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm0 -> 1
avx -> 1
%ymm12 -> 1
%ymm15 -> 1
%ymm5 -> 1
%ymm4 -> 1
%ymm10 -> 1
%ymm2 -> 1
%ymm11 -> 1
%ymm6 -> 1
%ymm9 -> 1
%ymm7 -> 1
%ymm14 -> 1
%ymm1 -> 1
%ymm3 -> 1
%ymm13 -> 1
%ymm8 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r9 -> 1
%r8 -> 1
%xmm1 -> 1

Total Circuit
YMM4 -> 1
YMM9 -> 1
YMM10 -> 1
YMM11 -> 1
YMM12 -> 1
R8 -> 1
YMM13 -> 1
YMM14 -> 1
R9 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM8 -> 1
YMM6 -> 1
YMM5 -> 1
YMM15 -> 1
YMM0 -> 1
YMM7 -> 1

Target
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vxorpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vxorpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vxorpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _630), 192, 256)) )
echo Debug:  Result: "R8" |-> (xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI630, 192, 256)) )
echo Debug:  PreResult: "R9" |-> (xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _630), 128, 192)) )
echo Debug:  Result: "R9" |-> (xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI630, 128, 192)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _630), 128, 192)), xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _630), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI630, 128, 192)), xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI630, 192, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vxorpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vxorpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddb_r8_rh[0m
[4m[1m[34mcreatespec xaddb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbw %ah, %si
%ah -> 1
%si -> 1

Circuit: movzbq %bl, %r12
%bl -> 1
%r12 -> 1

Circuit: movslq %r12d, %rdx
%rdx -> 1
%r12d -> 1

Circuit: callq .move_016_008_dx_r8b_r9b
%dx -> 1
%r9b -> 1
%r8b -> 1

Circuit: movsbl %r12b, %ebx
%r12b -> 1
%ebx -> 1
%rbx -> 1

Circuit: movb %dl, %ah
%ah -> 1
%dl -> 1

Circuit: callq .move_r9b_to_byte_6_of_rbx
%rbx -> 1
%r9b -> 1

Circuit: popcntq %rdx, %r9
popcnt -> 1
%of -> 1
%rdx -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%r9 -> 1

Circuit: adcb %sil, %bl
%of -> 1
%bl -> 1
%sil -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1

Total Circuit
AF -> 1
RDX -> 1
R12 -> 1
SF -> 1
RBX -> 1
RAX -> 1
R8 -> 1
RSI -> 1
PF -> 1
ZF -> 1
 -> 1
CF -> 1
R9 -> 1
OF -> 1

Target
AF -> 1
SF -> 1
ZF -> 1
CF -> 1
OF -> 1
RBX -> 1
RAX -> 1
PF -> 1

[4m[1m[34mkprove xaddb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput xaddb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddb_r8_rh: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _634)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI634) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _634), 48, 56), extractMInt(mi(64, _635), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI634, 48, 56), extractMInt(MI635, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _635), 56, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI635, 56, 64)) )
echo Debug:  PreResult: "R9" |-> (mi(64, countOnes(extractMInt(mi(64, _635), 56, 64), 0)) )
echo Debug:  Result: "R9" |-> (mi(64, countOnes(extractMInt(MI635, 56, 64), 0)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _635), 56, 64)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI635, 56, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _635)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI635) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _634), 0, 48), concatenateMInt(extractMInt(mi(64, _635), 56, 64), extractMInt(mi(64, _634), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI634, 0, 48), concatenateMInt(extractMInt(MI635, 56, 64), extractMInt(MI634, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _635), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI635, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _634), 48, 56)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(56, 0), extractMInt(MI634, 48, 56)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _635), 56, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(56, 0), extractMInt(MI635, 56, 64)) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 1, 2) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _634), 48, 49), extractMInt(mi(64, _635), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _634), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _634), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _635), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI634, 48, 49), extractMInt(MI635, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI634, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI634, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI635, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn xaddb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddb_rh_r8[0m
[4m[1m[34mcreatespec xaddb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %ah, %edx
%edx -> 1
%rdx -> 1
%ah -> 1

Circuit: xaddb %bl, %dl
%sf -> 1
%pf -> 1
%cf -> 1
%af -> 1
%zf -> 1
%dl -> 1
%of -> 1
%bl -> 1

Circuit: movb %dl, %ah
%dl -> 1
%ah -> 1

Total Circuit
RDX -> 1
SF -> 1
AF -> 1
PF -> 1
RBX -> 1
RAX -> 1
CF -> 1
OF -> 1
ZF -> 1

Target
SF -> 1
AF -> 1
CF -> 1
OF -> 1
ZF -> 1
PF -> 1
RBX -> 1
RAX -> 1

[4m[1m[34mkprove xaddb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput xaddb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddb_rh_r8: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 2) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _630)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI630) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _631)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI631) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 9)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _630), 48, 49), extractMInt(mi(64, _631), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _630), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI630, 48, 49), extractMInt(MI631, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI630, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 9), extractMInt(mi(64, _630), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI630, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 9), extractMInt(MI630, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _631), 0, 56), extractMInt(mi(64, _630), 48, 56)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI631, 0, 56), extractMInt(MI630, 48, 56)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xaddb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddw_r16_r16[0m
[4m[1m[34mcreatespec xaddw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xchgw %cx, %bx
%cx -> 1
%bx -> 1

Circuit: addw %cx, %bx
%of -> 1
%af -> 1
%bx -> 1
%zf -> 1
%cx -> 1
%sf -> 1
%pf -> 1
%cf -> 1

Total Circuit
PF -> 1
RBX -> 1
OF -> 1
CF -> 1
ZF -> 1
RCX -> 1
SF -> 1
AF -> 1

Target
AF -> 1
SF -> 1
RCX -> 1
ZF -> 1
OF -> 1
CF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove xaddw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput xaddw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddw_r16_r16: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 1, 2) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _630)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI630) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 48, 64), extractMInt(mi(64, _630), 48, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 48, 64), extractMInt(MI630, 48, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 48), extractMInt(mi(64, _629), 48, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI630, 0, 48), extractMInt(MI629, 48, 64)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(mi(64, _630), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(MI630, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xaddw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgb_r8_rh[0m
[4m[1m[34mcreatespec xchgb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movb %bl, %ch
%ch -> 1
%bl -> 1

Circuit: movb %ch, %cl
%cl -> 1
%ch -> 1

Circuit: movzbl %ah, %edx
%rdx -> 1
%ah -> 1
%edx -> 1

Circuit: xaddb %bl, %dl
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%dl -> 1
%bl -> 1
%of -> 1

Circuit: movb %cl, %ah
%cl -> 1
%ah -> 1

Total Circuit
RCX -> 1
AF -> 1
RDX -> 1
SF -> 1
RBX -> 1
RAX -> 1
PF -> 1
ZF -> 1
CF -> 1
OF -> 1

Target
RAX -> 1
RBX -> 1

[4m[1m[34mkprove xchgb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput xchgb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgb_r8_rh: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _621), 48, 56), extractMInt(mi(64, _622), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI621, 48, 56), extractMInt(MI622, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, _622), 56, 64)), extractMInt(mi(64, _622), 56, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI622, 56, 64)), extractMInt(MI622, 56, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _622)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI622) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 1, 9)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 48), concatenateMInt(extractMInt(mi(64, _622), 56, 64), extractMInt(mi(64, _621), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI621, 0, 48), concatenateMInt(extractMInt(MI622, 56, 64), extractMInt(MI621, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _622), 0, 56), extractMInt(mi(64, _621), 48, 56)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI622, 0, 56), extractMInt(MI621, 48, 56)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 1, 2) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _621), 48, 49), extractMInt(mi(64, _622), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _621), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _622), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI621, 48, 49), extractMInt(MI622, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI621, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI622, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn xchgb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgb_rh_rh[0m
[4m[1m[34mcreatespec xchgb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorl %esi, %esi
%esi -> 1
%rsi -> 1
%of -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1

Circuit: decb %sil
%of -> 1
%sil -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1

Circuit: setae %al
%cf -> 1
%al -> 1

Circuit: setpo %bl
%bl -> 1
%pf -> 1

Circuit: xchgw %ax, %bx
%bx -> 1
%ax -> 1

Total Circuit
AF -> 1
SF -> 1
ZF -> 1
CF -> 1
OF -> 1
RSI -> 1
RBX -> 1
RAX -> 1
PF -> 1

Target
RBX -> 1
RAX -> 1

[4m[1m[34mkprove xchgb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput xchgb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgb_rh_rh: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 1) )
echo Debug:  Result: "SF" |-> (mi(1, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(extractMInt(mi(64, _621), 48, 56), extractMInt(mi(64, _620), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(extractMInt(MI621, 48, 56), extractMInt(MI620, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 48), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _621), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI621, 0, 48), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI621, 56, 64))) )
echo Debug:  PreResult: "RSI" |-> (mi(64, 255) )
echo Debug:  Result: "RSI" |-> (mi(64, 255) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 0)   )
echo Debug:  Result: "ZF" |-> (mi(1, 0)   )
[4m[1m[34mwriteKDefn xchgb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgw_ax_r16[0m
Warn: [4m[1m[35mxchgw_ax_r16: Redundant Instructions[0m
[4m[1m[34mCheck if supported: xorb_r8_r8[0m
[4m[1m[34mcreatespec xorb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_r8_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: xorb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movb %cl, %bh
%cl -> 1
%bh -> 1

Circuit: xorb %bh, %bl
%of -> 1
%bl -> 1
%zf -> 1
%bx -> 1
%af -> 1
%bh -> 1
%pf -> 1
%sf -> 1
%cf -> 1

Circuit: callq .set_szp_for_bl
%bl -> 1
%pf -> 1
%sf -> 1
%zf -> 1

Total Circuit
RCX -> 1
AF -> 1
SF -> 1
RBX -> 1
PF -> 1
ZF -> 1
OF -> 1
CF -> 1

Target
PF -> 1
RBX -> 1
CF -> 1
OF -> 1
ZF -> 1
RCX -> 1
SF -> 1
AF -> 1

[4m[1m[34mkprove xorb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput xorb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _629), 56, 57), extractMInt(mi(64, _628), 56, 57)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI629, 56, 57), extractMInt(MI628, 56, 57)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _629) )
echo Debug:  Result: "RCX" |-> (MI629 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 56), xorMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI628, 0, 56), xorMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xorb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorb_r8_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

