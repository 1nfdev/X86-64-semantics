[4m[1m[34mCheck if supported: andb_rh_r8[0m
[4m[1m[34mcreatespec andb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: andb %ah, %bl
%of -> 1
%bl -> 1
%sf -> 1
%af -> 1
%cf -> 1
%zf -> 1
%pf -> 1
%ah -> 1

Circuit: xchgb %ah, %bl
%bl -> 1
%ah -> 1

Total Circuit
SF -> 1
CF -> 1
ZF -> 1
RAX -> 1
RBX -> 1
AF -> 1
PF -> 1
OF -> 1

Target
SF -> 1
CF -> 1
ZF -> 1
RAX -> 1
RBX -> 1
AF -> 1
PF -> 1
OF -> 1

[4m[1m[34mkprove andb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput andb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _629), 56, 57)), extractMInt(mi(64, _628), 48, 49)), xorMInt(mi(1, 1), extractMInt(mi(64, _629), 56, 57))) )
echo Debug:  Result: "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), extractMInt(MI629, 56, 57)), extractMInt(MI628, 48, 49)), xorMInt(mi(1, 1), extractMInt(MI629, 56, 57))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), xorMInt(mi(8, 255), extractMInt(MI629, 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64))), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), xorMInt(mi(8, 255), extractMInt(MI629, 56, 64))), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), extractMInt(mi(64, _628), 48, 56)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), extractMInt(MI628, 48, 56)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), xorMInt(mi(8, 255), extractMInt(MI629, 56, 64))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andl_r32_r32[0m
[4m[1m[34mcreatespec andl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: andnl %ecx, %ebx, %r13d
%pf -> 1
%ebx -> 1
%zf -> 1
%cf -> 1
%r13 -> 1
%sf -> 1
%r13d -> 1
%ecx -> 1
%of -> 1
%af -> 1
bmi1 -> 1

Circuit: movzbl %bh, %ebx
%ebx -> 1
%rbx -> 1
%bh -> 1

Circuit: xorl %r13d, %ecx
%af -> 1
%of -> 1
%sf -> 1
%ecx -> 1
%r13d -> 1
%zf -> 1
%cf -> 1
%rcx -> 1
%pf -> 1

Circuit: xchgl %ebx, %ecx
%rcx -> 1
%ebx -> 1
%rbx -> 1
%ecx -> 1

Total Circuit
AF -> 1
RBX -> 1
 -> 1
OF -> 1
PF -> 1
RCX -> 1
SF -> 1
CF -> 1
R13 -> 1
ZF -> 1

Target
CF -> 1
ZF -> 1
RCX -> 1
SF -> 1
PF -> 1
OF -> 1
AF -> 1
RBX -> 1

[4m[1m[34mkprove andl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput andl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _629), 32, 33), xorMInt(extractMInt(mi(64, _628), 32, 33), orMInt(extractMInt(mi(64, _628), 32, 33), extractMInt(mi(64, _629), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI629, 32, 33), xorMInt(extractMInt(MI628, 32, 33), orMInt(extractMInt(MI628, 32, 33), extractMInt(MI629, 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _628), 32, 64), orMInt(extractMInt(mi(64, _628), 32, 64), extractMInt(mi(64, _629), 32, 64)))) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI628, 32, 64), orMInt(extractMInt(MI628, 32, 64), extractMInt(MI629, 32, 64)))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _629), 56, 64), xorMInt(extractMInt(mi(64, _628), 56, 64), orMInt(extractMInt(mi(64, _628), 56, 64), extractMInt(mi(64, _629), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI629, 56, 64), xorMInt(extractMInt(MI628, 56, 64), orMInt(extractMInt(MI628, 56, 64), extractMInt(MI629, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _628), 48, 56)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI628, 48, 56)) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _629), 32, 64), xorMInt(extractMInt(mi(64, _628), 32, 64), orMInt(extractMInt(mi(64, _628), 32, 64), extractMInt(mi(64, _629), 32, 64))))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI629, 32, 64), xorMInt(extractMInt(MI628, 32, 64), orMInt(extractMInt(MI628, 32, 64), extractMInt(MI629, 32, 64))))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _629), 32, 64), xorMInt(extractMInt(mi(64, _628), 32, 64), orMInt(extractMInt(mi(64, _628), 32, 64), extractMInt(mi(64, _629), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI629, 32, 64), xorMInt(extractMInt(MI628, 32, 64), orMInt(extractMInt(MI628, 32, 64), extractMInt(MI629, 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andnpd_xmm_xmm[0m
[4m[1m[34mcreatespec andnpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: andnps %xmm2, %xmm1
%xmm2 -> 1
sse -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM1 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove andnpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andnpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput andnpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _612), 128, 192), extractMInt(mi(256, _613), 128, 192)), extractMInt(mi(256, _612), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _612), 192, 256), extractMInt(mi(256, _613), 192, 256)), extractMInt(mi(256, _612), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(MI612, 128, 192), extractMInt(MI613, 128, 192)), extractMInt(MI612, 128, 192)), xorMInt(orMInt(extractMInt(MI612, 192, 256), extractMInt(MI613, 192, 256)), extractMInt(MI612, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn andnpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andnpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andpd_xmm_xmm[0m
[4m[1m[34mcreatespec andpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxss %xmm2, %xmm2, %xmm15
avx -> 1
%xmm2 -> 1
%ymm15 -> 1
%xmm15 -> 1

Circuit: pand %xmm15, %xmm1
%xmm15 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM15 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove andpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput andpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192)), extractMInt(mi(256, _614), 128, 192)), xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256)), extractMInt(mi(256, _614), 192, 256)), xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192)), extractMInt(MI614, 128, 192)), xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256)), extractMInt(MI614, 192, 256)), xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613) )
echo Debug:  Result: "SPAD1" |-> (MI613 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _614), 128, 224)), extractMInt(mi(256, _614), 224, 256))   )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI614, 128, 224)), extractMInt(MI614, 224, 256))   )
[4m[1m[34mwriteKDefn andpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andps_xmm_xmm[0m
[4m[1m[34mcreatespec andps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqu %xmm2, %xmm10
%xmm2 -> 1
avx -> 1
%ymm10 -> 1
%xmm10 -> 1

Circuit: vorpd %xmm2, %xmm10, %xmm4
%xmm10 -> 1
%xmm4 -> 1
avx -> 1
%ymm4 -> 1
%xmm2 -> 1

Circuit: pand %xmm4, %xmm1
%xmm1 -> 1
%xmm4 -> 1
sse2 -> 1

Total Circuit
YMM4 -> 1
YMM10 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove andps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput andps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn andps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: bswap_r64[0m
[4m[1m[34mcreatespec bswap_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_bswap_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mbswap_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_064_032_rbx_r8d_r9d
%rbx -> 1
%r9d -> 1
%r8d -> 1

Circuit: xchgl %r8d, %r9d
%r9d -> 1
%r8d -> 1
%r8 -> 1
%r9 -> 1

Circuit: bswap %r9d
%r9d -> 1
%r9 -> 1

Circuit: xorb %bh, %bh
%af -> 1
%sf -> 1
%of -> 1
%bh -> 1
%pf -> 1
%cf -> 1
%zf -> 1

Circuit: cmovew %r8w, %r8w
%r8w -> 1
cmov -> 1
%zf -> 1

Circuit: bswap %r8d
%r8d -> 1
%r8 -> 1

Circuit: callq .move_032_064_r8d_r9d_rbx
%r8d -> 1
%r9d -> 1
%rbx -> 1

Total Circuit
R9 -> 1
RBX -> 1
AF -> 1
OF -> 1
PF -> 1
 -> 1
SF -> 1
R8 -> 1
ZF -> 1
CF -> 1

Target
RBX -> 1

[4m[1m[34mkprove bswap_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_bswap_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_bswap_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput bswap_r64[0m
[4m[1m[34msanitizeSpecOutput bswap_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mbswap_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _617), 24, 32)), concatenateMInt(extractMInt(mi(64, _617), 16, 24), concatenateMInt(extractMInt(mi(64, _617), 8, 16), extractMInt(mi(64, _617), 0, 8)))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 24, 32)), concatenateMInt(extractMInt(MI617, 16, 24), concatenateMInt(extractMInt(MI617, 8, 16), extractMInt(MI617, 0, 8)))) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _617), 56, 64)), concatenateMInt(extractMInt(mi(64, _617), 48, 56), concatenateMInt(extractMInt(mi(64, _617), 40, 48), extractMInt(mi(64, _617), 32, 40)))) )
echo Debug:  Result: "R9" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 56, 64)), concatenateMInt(extractMInt(MI617, 48, 56), concatenateMInt(extractMInt(MI617, 40, 48), extractMInt(MI617, 32, 40)))) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(64, _617), 56, 64), concatenateMInt(extractMInt(mi(64, _617), 48, 56), concatenateMInt(extractMInt(mi(64, _617), 40, 48), extractMInt(mi(64, _617), 32, 40)))), concatenateMInt(extractMInt(mi(64, _617), 24, 32), concatenateMInt(extractMInt(mi(64, _617), 16, 24), concatenateMInt(extractMInt(mi(64, _617), 8, 16), extractMInt(mi(64, _617), 0, 8))))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(concatenateMInt(extractMInt(MI617, 56, 64), concatenateMInt(extractMInt(MI617, 48, 56), concatenateMInt(extractMInt(MI617, 40, 48), extractMInt(MI617, 32, 40)))), concatenateMInt(extractMInt(MI617, 24, 32), concatenateMInt(extractMInt(MI617, 16, 24), concatenateMInt(extractMInt(MI617, 8, 16), extractMInt(MI617, 0, 8))))) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1)   )
echo Debug:  Result: "ZF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn bswap_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-bswap_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cltd[0m
[4m[1m[34mcreatespec cltd: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cltd_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcltd: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cltq
%rax -> 1
%eax -> 1

Circuit: vmovq %rax, %xmm2
%ymm2 -> 1
%xmm2 -> 1
%rax -> 1
avx -> 1

Circuit: callq .move_128_032_xmm2_eax_edx_r8d_r9d
%edx -> 1
%eax -> 1
%r8d -> 1
%xmm2 -> 1
%r9d -> 1

Circuit: andnl %r9d, %r9d, %ecx
%cf -> 1
%zf -> 1
%rcx -> 1
%pf -> 1
%of -> 1
%r9d -> 1
%sf -> 1
%ecx -> 1
bmi1 -> 1
%af -> 1

Circuit: adcl %ecx, %edx
%edx -> 1
%rdx -> 1
%pf -> 1
%cf -> 1
%zf -> 1
%af -> 1
%sf -> 1
%ecx -> 1
%of -> 1

Total Circuit
 -> 1
PF -> 1
OF -> 1
AF -> 1
R9 -> 1
RDX -> 1
RAX -> 1
ZF -> 1
CF -> 1
SF -> 1
RCX -> 1
YMM2 -> 1
R8 -> 1

Target
RDX -> 1
RAX -> 1

[4m[1m[34mkprove cltd[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cltd_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cltd_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cltd[0m
[4m[1m[34msanitizeSpecOutput cltd[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcltd: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 32), mi(32, 0))), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 32), mi(32, 0))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 32), mi(32, 0))), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 32), mi(32, 0))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (mi(64, 0) )
echo Debug:  Result: "R8" |-> (mi(64, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, 0) )
echo Debug:  Result: "RCX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 32), mi(32, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 32), mi(32, 0))) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _621), 32, 64), mi(32, 0))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI621, 32, 64), mi(32, 0))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 32), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 32), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), mi(64, 0))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), mi(64, 0))) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 1), mi(1, 0)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 1), mi(1, 0)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 24, 32), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 24, 32), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 1), mi(1, 0)))  andBool   notBool  ( eqMInt(mi(1, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 32, 64))), 0, 1), mi(1, 0))) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 1), mi(1, 0)))  andBool   notBool  ( eqMInt(mi(1, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 32, 64))), 0, 1), mi(1, 0))) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn cltd: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cltd.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmc[0m
[4m[1m[34mcreatespec cmc: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmc_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmc: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_cf_into_rbx
%rbx -> 1
%cf -> 1

Circuit: callq .move_064_032_rbx_r8d_r9d
%rbx -> 1
%r9d -> 1
%r8d -> 1

Circuit: callq .move_r8b_to_byte_5_of_rbx
%r8b -> 1
%rbx -> 1

Circuit: decw %bx
%of -> 1
%sf -> 1
%af -> 1
%zf -> 1
%pf -> 1
%bx -> 1

Circuit: xorb %bh, %bh
%af -> 1
%sf -> 1
%of -> 1
%bh -> 1
%pf -> 1
%zf -> 1
%cf -> 1

Circuit: adcb %bl, %bl
%pf -> 1
%cf -> 1
%zf -> 1
%af -> 1
%bl -> 1
%sf -> 1
%of -> 1

Total Circuit
RBX -> 1
AF -> 1
R9 -> 1
PF -> 1
OF -> 1
R8 -> 1
SF -> 1
CF -> 1
ZF -> 1

Target
CF -> 1

[4m[1m[34mkprove cmc[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmc_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmc_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmc[0m
[4m[1m[34msanitizeSpecOutput cmc[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmc: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(63, 0), mi(1, _617)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(63, 0), MI617) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 10))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 10))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _617)), mi(24, 0))), mi(8, 0)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI617), mi(24, 0))), mi(8, 0)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), mi(1, _617)), mi(17, 65535)), 9, 17))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), MI617), mi(17, 65535)), 9, 17))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmc: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmc.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmoval_r32_r32[0m
[4m[1m[34mcreatespec cmoval_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmoval_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmoval_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmoval_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmovnael %ebx, %ecx
%rcx -> 1
%ebx -> 1
%cf -> 1
cmov -> 1
%ecx -> 1

Circuit: cmovnzl %ecx, %ebx
%rbx -> 1
cmov -> 1
%ebx -> 1
%zf -> 1
%ecx -> 1

Total Circuit
RCX -> 1
ZF -> 1
CF -> 1
RBX -> 1
 -> 1

Target
CF -> 1
ZF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmoval_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmoval_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmoval_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmoval_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmoval_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmoval_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmoval_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _615)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _617), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI615), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI617, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _615) )
echo Debug:  Result: "CF" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _618) )
echo Debug:  Result: "ZF" |-> (MI618 )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _615)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _617), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) ) #fi)    )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI615), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI617, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) ) #fi)    )
[4m[1m[34mwriteKDefn cmoval_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmoval_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovbl_r32_r32[0m
[4m[1m[34mcreatespec cmovbl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovbl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movb %ch, %ch
%ch -> 1

Circuit: cmovnael %ecx, %ebx
%ecx -> 1
%ebx -> 1
%cf -> 1
%rbx -> 1
cmov -> 1

Total Circuit
 -> 1
RBX -> 1
CF -> 1
RCX -> 1

Target
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovbl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovbl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovbl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovbl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _613)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _614), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI613), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI614, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _613) )
echo Debug:  Result: "CF" |-> (MI613 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _615)   )
echo Debug:  Result: "RCX" |-> (MI615   )
[4m[1m[34mwriteKDefn cmovbl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovbl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovbq_r64_r64[0m
[4m[1m[34mcreatespec cmovbq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovbq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .clear_zf
%zf -> 1

Circuit: cmovnaq %rcx, %rbx
%rbx -> 1
cmov -> 1
%rcx -> 1
%cf -> 1
%zf -> 1

Total Circuit
RBX -> 1
 -> 1
RCX -> 1
ZF -> 1
CF -> 1

Target
 -> 1
RBX -> 1
CF -> 1
RCX -> 1

[4m[1m[34mkprove cmovbq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovbq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovbq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovbq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _614)), mi(8, 0))), mi(32, 0)) ) #then ( mi(64, _615) ) #else ( mi(64, _616) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI614), mi(8, 0))), mi(32, 0)) ) #then ( MI615 ) #else ( MI616 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _614) )
echo Debug:  Result: "CF" |-> (MI614 )
echo Debug:  PreResult: "ZF" |-> (mi(1, 0) )
echo Debug:  Result: "ZF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616)   )
echo Debug:  Result: "RCX" |-> (MI616   )
[4m[1m[34mwriteKDefn cmovbq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovbq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovcw_r16_r16[0m
[4m[1m[34mcreatespec cmovcw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovcw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovcw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzwq %cx, %rax
%rax -> 1
%cx -> 1

Circuit: cmovnael %eax, %ebx
%eax -> 1
%rbx -> 1
cmov -> 1
%cf -> 1
%ebx -> 1

Total Circuit
RAX -> 1
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
RBX -> 1
 -> 1
RCX -> 1
CF -> 1

[4m[1m[34mkprove cmovcw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovcw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovcw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovcw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovcw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _617), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI617, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _615)), mi(8, 0)), mi(16, 0)) ) #then ( mi(64, _616) ) #else ( concatenateMInt(extractMInt(mi(64, _616), 0, 48), extractMInt(mi(64, _617), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI615), mi(8, 0)), mi(16, 0)) ) #then ( MI616 ) #else ( concatenateMInt(extractMInt(MI616, 0, 48), extractMInt(MI617, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _615) )
echo Debug:  Result: "CF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _617) )
echo Debug:  Result: "RCX" |-> (MI617 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616)   )
[4m[1m[34mwriteKDefn cmovcw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovcw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovel_r32_r32[0m
[4m[1m[34mcreatespec cmovel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovel_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_064_032_rbx_r12d_r13d
%r12d -> 1
%r13d -> 1
%rbx -> 1

Circuit: xchgl %ebx, %ecx
%rcx -> 1
%ebx -> 1
%rbx -> 1
%ecx -> 1

Circuit: cmovnel %r12d, %ebx
%rbx -> 1
cmov -> 1
%ebx -> 1
%zf -> 1
%r12d -> 1

Total Circuit
 -> 1
RBX -> 1
R12 -> 1
R13 -> 1
ZF -> 1
RCX -> 1

Target
ZF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 0, 32)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 0, 32)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _617), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI617, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _617)   )
echo Debug:  Result: "ZF" |-> (MI617   )
[4m[1m[34mwriteKDefn cmovel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovel_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovgew_r16_r16[0m
[4m[1m[34mcreatespec cmovgew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgew_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovgew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setge %bpl
%bpl -> 1
%sf -> 1
%of -> 1

Circuit: movzbl %bpl, %r8d
%r8d -> 1
%r8 -> 1
%bpl -> 1

Circuit: popcntq %r8, %rax
%af -> 1
%sf -> 1
%of -> 1
%rax -> 1
%pf -> 1
popcnt -> 1
%r8 -> 1
%cf -> 1
%zf -> 1

Circuit: cmovnew %cx, %bx
%zf -> 1
%cx -> 1
%bx -> 1
cmov -> 1

Total Circuit
RCX -> 1
SF -> 1
R8 -> 1
ZF -> 1
CF -> 1
RAX -> 1
AF -> 1
RBX -> 1
RBP -> 1
OF -> 1
PF -> 1
 -> 1

Target
OF -> 1
 -> 1
RBX -> 1
SF -> 1
RCX -> 1

[4m[1m[34mkprove cmovgew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovgew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovgew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovgew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBP" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _626)), concatenateMInt(mi(7, 0), mi(1, _623))), mi(8, 1))) )
echo Debug:  Result: "RBP" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI626), concatenateMInt(mi(7, 0), MI623)), mi(8, 1))) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _626)), concatenateMInt(mi(7, 0), mi(1, _623))), mi(8, 1))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI626), concatenateMInt(mi(7, 0), MI623)), mi(8, 1))) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _625) )
echo Debug:  Result: "RCX" |-> (MI625 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _624)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI624) )
echo Debug:  PreResult: "RAX" |-> (mi(64, countOnes(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _626)), concatenateMInt(mi(7, 0), mi(1, _623))), mi(8, 1)), 0)) )
echo Debug:  Result: "RAX" |-> (mi(64, countOnes(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI626), concatenateMInt(mi(7, 0), MI623)), mi(8, 1)), 0)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _626)), concatenateMInt(mi(7, 0), mi(1, _623))), mi(8, 1))), mi(64, 0)) ) #then ( mi(64, _624) ) #else ( concatenateMInt(extractMInt(mi(64, _624), 0, 48), extractMInt(mi(64, _625), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI626), concatenateMInt(mi(7, 0), MI623)), mi(8, 1))), mi(64, 0)) ) #then ( MI624 ) #else ( concatenateMInt(extractMInt(MI624, 0, 48), extractMInt(MI625, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _626)), concatenateMInt(mi(7, 0), mi(1, _623))), mi(8, 1))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI626), concatenateMInt(mi(7, 0), MI623)), mi(8, 1))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn cmovgew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovgew_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnbel_r32_r32[0m
[4m[1m[34mcreatespec cmovnbel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbel_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnbel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movslq %ebx, %rsi
%rsi -> 1
%ebx -> 1

Circuit: vmovd %ecx, %xmm1
%xmm1 -> 1
avx -> 1
%ymm1 -> 1
%ecx -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%r8 -> 1
%xmm1 -> 1
%r9 -> 1

Circuit: cmovnel %r8d, %ebx
%r8d -> 1
%ebx -> 1
%zf -> 1
cmov -> 1
%rbx -> 1

Circuit: adcb %r9b, %r9b
%r9b -> 1
%cf -> 1
%zf -> 1
%pf -> 1
%af -> 1
%of -> 1
%sf -> 1

Circuit: cmovnzl %esi, %ebx
%rbx -> 1
cmov -> 1
%zf -> 1
%esi -> 1
%ebx -> 1

Total Circuit
RCX -> 1
SF -> 1
R8 -> 1
RSI -> 1
CF -> 1
ZF -> 1
RBX -> 1
AF -> 1
R9 -> 1
YMM1 -> 1
 -> 1
OF -> 1
PF -> 1

Target
ZF -> 1
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovnbel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnbel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnbel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnbel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _623))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI623)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _625), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI625, 32, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _625) )
echo Debug:  Result: "RCX" |-> (MI625 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(63, 0), mi(1, _623)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(63, 0), MI623) )
echo Debug:  PreResult: "RSI" |-> (mi(64, svalueMInt(extractMInt(mi(64, _624), 32, 64))) )
echo Debug:  Result: "RSI" |-> (mi(64, svalueMInt(extractMInt(MI624, 32, 64))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _623)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _626), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _625), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _624), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _624), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI623), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI626, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI625, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI624, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI624, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _623)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI623), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _625), 32, 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(MI625, 32, 64)) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _623))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI623)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn cmovnbel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnbel_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnbeq_r64_r64[0m
[4m[1m[34mcreatespec cmovnbeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbeq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnbeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setna %ah
%zf -> 1
%cf -> 1
%ah -> 1

Circuit: salb $0x1, %ah
\$0x1 -> 1
%ah -> 1
%pf -> 1
%zf -> 1
%cf -> 1
%af -> 1
%sf -> 1
%of -> 1

Circuit: cmovzq %rcx, %rbx
%rbx -> 1
cmov -> 1
%rcx -> 1
%zf -> 1

Total Circuit
ZF -> 1
CF -> 1
RAX -> 1
RCX -> 1
SF -> 1
OF -> 1
PF -> 1
 -> 1
RBX -> 1
AF -> 1

Target
RCX -> 1
CF -> 1
ZF -> 1
RBX -> 1
 -> 1

[4m[1m[34mkprove cmovnbeq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbeq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbeq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnbeq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovnbeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnbeq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 0, 1) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 0, 1) ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (eqMInt(MI623, mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 0, 1) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 0, 1) ) #fi)  )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 1, 2) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 1, 2) ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(MI623, mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 1, 2) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 1, 2) ) #fi)  )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 1, 9) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 1, 9) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(MI623, mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 1, 9) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 1, 9) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _622) )
echo Debug:  Result: "RCX" |-> (MI622 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), (#ifMInt (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 1, 2) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 1, 2) ) #fi) ) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), (#ifMInt (eqMInt(MI623, mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 1, 2) ) #else ( extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 1, 2) ) #fi) ) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 1, 9), mi(8, 0))) ) #else ( concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 1, 9), mi(8, 0))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(MI623, mi(1, 0)) ) #then ( concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 1, 9), mi(8, 0))) ) #else ( concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 1, 9), mi(8, 0))) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt ((#ifBool (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 1, 9), mi(8, 0)) ) #else ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 1, 9), mi(8, 0)) ) #fi) ) #then ( mi(64, _622) ) #else ( mi(64, _621) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt ((#ifBool (eqMInt(MI623, mi(1, 0)) ) #then ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 1, 9), mi(8, 0)) ) #else ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 1, 9), mi(8, 0)) ) #fi) ) #then ( MI622 ) #else ( MI621 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(mi(1, _623), mi(1, 0)) ) #then ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _620)), concatenateMInt(mi(8, 0), mi(1, _620))), 1, 9), mi(8, 0)) ) #else ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _623)), concatenateMInt(mi(8, 0), mi(1, _623))), 1, 9), mi(8, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(MI623, mi(1, 0)) ) #then ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI620), concatenateMInt(mi(8, 0), MI620)), 1, 9), mi(8, 0)) ) #else ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI623), concatenateMInt(mi(8, 0), MI623)), 1, 9), mi(8, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovnbeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnbeq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovncl_r32_r32[0m
[4m[1m[34mcreatespec cmovncl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovncl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovncl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmovnael %ebx, %ecx
cmov -> 1
%cf -> 1
%rcx -> 1
%ebx -> 1
%ecx -> 1

Circuit: xaddl %ebx, %ecx
%af -> 1
%of -> 1
%sf -> 1
%ecx -> 1
%rbx -> 1
%zf -> 1
%cf -> 1
%ebx -> 1
%pf -> 1
%rcx -> 1

Total Circuit
 -> 1
OF -> 1
PF -> 1
AF -> 1
RBX -> 1
ZF -> 1
CF -> 1
RCX -> 1
SF -> 1

Target
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovncl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovncl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovncl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovncl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovncl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( extractMInt(mi(64, _620), 32, 64) ) #else ( extractMInt(mi(64, _619), 32, 64) ) #fi) , extractMInt(mi(64, _619), 32, 64)), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( extractMInt(MI620, 32, 64) ) #else ( extractMInt(MI619, 32, 64) ) #fi) , extractMInt(MI619, 32, 64)), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 1, 33)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 1, 33)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( (#ifBool (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( eqMInt(extractMInt(mi(64, _620), 32, 33), extractMInt(mi(64, _619), 32, 33)) ) #else ( eqMInt(extractMInt(mi(64, _619), 32, 33), extractMInt(mi(64, _619), 32, 33)) ) #fi)  andBool   notBool  ( (#ifBool (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( eqMInt(extractMInt(mi(64, _620), 32, 33), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 1, 2)) ) #else ( eqMInt(extractMInt(mi(64, _619), 32, 33), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 1, 2)) ) #fi)  )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( (#ifBool (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( eqMInt(extractMInt(MI620, 32, 33), extractMInt(MI619, 32, 33)) ) #else ( eqMInt(extractMInt(MI619, 32, 33), extractMInt(MI619, 32, 33)) ) #fi)  andBool   notBool  ( (#ifBool (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( eqMInt(extractMInt(MI620, 32, 33), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 1, 2)) ) #else ( eqMInt(extractMInt(MI619, 32, 33), extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 1, 2)) ) #fi)  )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI619, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(mi(64, _619), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(1, 0), extractMInt(MI620, 32, 64)) ) #else ( concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64)) ) #fi) , concatenateMInt(mi(1, 0), extractMInt(MI619, 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovncl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovncl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnpl_r32_r32[0m
[4m[1m[34mcreatespec cmovnpl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnpl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnpl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnpl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmovpol %ecx, %ebx
cmov -> 1
%rbx -> 1
%pf -> 1
%ebx -> 1
%ecx -> 1

Total Circuit
PF -> 1
 -> 1
RBX -> 1
RCX -> 1

Target
 -> 1
PF -> 1
RBX -> 1
RCX -> 1

[4m[1m[34mkprove cmovnpl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnpl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnpl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnpl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnpl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnpl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnpl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _613)), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _614), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI613), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI614, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "PF" |-> (mi(1, _613) )
echo Debug:  Result: "PF" |-> (MI613 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _615)   )
echo Debug:  Result: "RCX" |-> (MI615   )
[4m[1m[34mwriteKDefn cmovnpl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnpl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnpw_r16_r16[0m
[4m[1m[34mcreatespec cmovnpw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnpw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnpw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnpw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzwl %cx, %esp
%rsp -> 1
%esp -> 1
%cx -> 1

Circuit: cmovpol %esp, %ebx
%pf -> 1
%ebx -> 1
cmov -> 1
%rbx -> 1
%esp -> 1

Total Circuit
RBX -> 1
 -> 1
PF -> 1
RCX -> 1
RSP -> 1

Target
 -> 1
PF -> 1
RBX -> 1
RCX -> 1

[4m[1m[34mkprove cmovnpw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnpw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnpw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnpw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnpw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnpw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnpw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _615)), mi(64, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _616), 0, 48), extractMInt(mi(64, _617), 48, 64)) ) #else ( mi(64, _616) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI615), mi(64, 0)) ) #then ( concatenateMInt(extractMInt(MI616, 0, 48), extractMInt(MI617, 48, 64)) ) #else ( MI616 ) #fi)  )
echo Debug:  PreResult: "PF" |-> (mi(1, _615) )
echo Debug:  Result: "PF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _617) )
echo Debug:  Result: "RCX" |-> (MI617 )
echo Debug:  PreResult: "RSP" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _617), 48, 64)) )
echo Debug:  Result: "RSP" |-> (concatenateMInt(mi(48, 0), extractMInt(MI617, 48, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616)   )
[4m[1m[34mwriteKDefn cmovnpw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnpw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnzq_r64_r64[0m
[4m[1m[34mcreatespec cmovnzq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnzq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnzq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmovneq %rcx, %rbx
%rbx -> 1
cmov -> 1
%rcx -> 1
%zf -> 1

Total Circuit
RBX -> 1
 -> 1
RCX -> 1
ZF -> 1

Target
ZF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovnzq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnzq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovnzq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnzq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnzq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _615)), concatenateMInt(mi(8, 0), mi(1, _615))), 1, 9), mi(8, 0)) ) #then ( mi(64, _614) ) #else ( mi(64, _613) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI615), concatenateMInt(mi(8, 0), MI615)), 1, 9), mi(8, 0)) ) #then ( MI614 ) #else ( MI613 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _615) )
echo Debug:  Result: "ZF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _614)   )
echo Debug:  Result: "RCX" |-> (MI614   )
[4m[1m[34mwriteKDefn cmovnzq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnzq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpel_r32_r32[0m
[4m[1m[34mcreatespec cmovpel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpel_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovpel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_064_032_rbx_r10d_r11d
%r10d -> 1
%r11d -> 1
%rbx -> 1

Circuit: cmovpol %r10d, %ecx
cmov -> 1
%rcx -> 1
%pf -> 1
%r10d -> 1
%ecx -> 1

Circuit: xchgl %ebx, %ecx
%rcx -> 1
%ebx -> 1
%rbx -> 1
%ecx -> 1

Total Circuit
 -> 1
PF -> 1
RBX -> 1
R10 -> 1
R11 -> 1
RCX -> 1

Target
RCX -> 1
PF -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovpel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovpel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 0, 32)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 0, 32)) )
echo Debug:  PreResult: "PF" |-> (mi(1, _615) )
echo Debug:  Result: "PF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _615)), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _617), 32, 64)) ) #fi)    )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI615), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI617, 32, 64)) ) #fi)    )
[4m[1m[34mwriteKDefn cmovpel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpel_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpeq_r64_r64[0m
[4m[1m[34mcreatespec cmovpeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpeq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovpeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setpo %dh
%dh -> 1
%pf -> 1

Circuit: salb $0x1, %dh
\$0x1 -> 1
%cf -> 1
%zf -> 1
%pf -> 1
%dh -> 1
%af -> 1
%of -> 1
%sf -> 1

Circuit: cmovnaq %rcx, %rbx
%rbx -> 1
cmov -> 1
%cf -> 1
%zf -> 1
%rcx -> 1

Total Circuit
SF -> 1
RCX -> 1
ZF -> 1
CF -> 1
AF -> 1
RBX -> 1
RDX -> 1
 -> 1
OF -> 1
PF -> 1

Target
PF -> 1
 -> 1
RBX -> 1
RCX -> 1

[4m[1m[34mkprove cmovpeq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpeq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpeq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpeq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovpeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpeq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _621) )
echo Debug:  Result: "RCX" |-> (MI621 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9), mi(8, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt ((#ifBool (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 0, 1)), mi(8, 1))), mi(32, 0)) ) #else ( eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 0, 1)), mi(8, 0))), mi(32, 0)) ) #fi) ) #then ( mi(64, _620) ) #else ( mi(64, _621) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt ((#ifBool (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 0, 1)), mi(8, 1))), mi(32, 0)) ) #else ( eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 0, 1)), mi(8, 0))), mi(32, 0)) ) #fi) ) #then ( MI620 ) #else ( MI621 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovpeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpeq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtsi2ssl_xmm_r32[0m
[4m[1m[34mcreatespec cvtsi2ssl_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtsi2ssl_xmm_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtsi2ssl_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovd %ebx, %xmm13
%ymm13 -> 1
%xmm13 -> 1
avx -> 1
%ebx -> 1

Circuit: vcvtdq2ps %xmm13, %xmm0
%ymm0 -> 1
%xmm0 -> 1
%xmm13 -> 1
avx -> 1

Circuit: movss %xmm0, %xmm1
sse -> 1
%xmm1 -> 1
%xmm0 -> 1

Total Circuit
YMM1 -> 1
 -> 1
RBX -> 1
YMM0 -> 1
YMM13 -> 1

Target
YMM1 -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cvtsi2ssl_xmm_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtsi2ssl_xmm_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtsi2ssl_xmm_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cvtsi2ssl_xmm_r32[0m
[4m[1m[34msanitizeSpecOutput cvtsi2ssl_xmm_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtsi2ssl_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 224), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _614), 32, 64)), 24, 8), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 224), Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 32, 64)), 24, 8), 32)) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _614), 32, 64)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(224, 0), extractMInt(MI614, 32, 64)) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _614) )
echo Debug:  Result: "RBX" |-> (MI614 )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(224, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _614), 32, 64)), 24, 8), 32)) )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(224, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(MI614, 32, 64)), 24, 8), 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615)   )
echo Debug:  Result: "SPAD1" |-> (MI615   )
[4m[1m[34mwriteKDefn cvtsi2ssl_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtsi2ssl_xmm_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: decb_rh[0m
[4m[1m[34mcreatespec decb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decb_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorb %al, %al
%sf -> 1
%of -> 1
%al -> 1
%af -> 1
%pf -> 1
%cf -> 1
%zf -> 1

Circuit: callq .read_of_into_rcx
%rcx -> 1
%of -> 1

Circuit: cwtl
%rax -> 1
%ax -> 1

Circuit: movzbl %cl, %ebx
%cl -> 1
%ebx -> 1
%rbx -> 1

Circuit: decw %bx
%af -> 1
%sf -> 1
%of -> 1
%bx -> 1
%pf -> 1
%zf -> 1

Circuit: addb %bh, %ah
%ah -> 1
%pf -> 1
%zf -> 1
%cf -> 1
%bh -> 1
%sf -> 1
%of -> 1
%af -> 1

Total Circuit
SF -> 1
RCX -> 1
RAX -> 1
CF -> 1
ZF -> 1
RBX -> 1
AF -> 1
PF -> 1
OF -> 1

Target
OF -> 1
PF -> 1
AF -> 1
RAX -> 1
ZF -> 1
SF -> 1

[4m[1m[34mkprove decb_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decb_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decb_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput decb_rh[0m
[4m[1m[34msanitizeSpecOutput decb_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _626), 48, 56), mi(8, 255)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI626, 48, 56), mi(8, 255)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, 0) )
echo Debug:  Result: "RCX" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _626)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI626) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _626), 48, 49), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _626), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI626, 48, 49), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(MI626, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _626), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 1, 9), extractMInt(mi(64, _626), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI626, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 1, 9), extractMInt(MI626, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, 65535) )
echo Debug:  Result: "RBX" |-> (mi(64, 65535) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), mi(9, 255)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), mi(9, 255)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn decb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-decb_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: hsubpd_xmm_xmm[0m
[4m[1m[34mcreatespec hsubpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_hsubpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhsubpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vhsubpd %xmm2, %xmm1, %xmm7
%xmm1 -> 1
avx -> 1
%ymm7 -> 1
%xmm7 -> 1
%xmm2 -> 1

Circuit: movdqu %xmm7, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm7 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM7 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove hsubpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_hsubpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_hsubpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput hsubpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput hsubpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhsubpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI613, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI613, 128, 192), 53, 11) ) , 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613) )
echo Debug:  Result: "SPAD1" |-> (MI613 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11) ) , 64)))   )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI613, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI613, 128, 192), 53, 11) ) , 64)))   )
[4m[1m[34mwriteKDefn hsubpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-hsubpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movd_xmm_r32[0m
[4m[1m[34mcreatespec movd_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movd_xmm_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovd_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovd %ebx, %xmm2
avx -> 1
%ebx -> 1
%xmm2 -> 1
%ymm2 -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm9 -> 1
%xmm2 -> 1
%xmm8 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm1 -> 1
%xmm10 -> 1
%xmm9 -> 1
%xmm8 -> 1
%xmm11 -> 1

Total Circuit
YMM8 -> 1
YMM2 -> 1
YMM10 -> 1
 -> 1
YMM1 -> 1
YMM11 -> 1
YMM9 -> 1
RBX -> 1

Target
RBX -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove movd_xmm_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movd_xmm_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movd_xmm_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movd_xmm_r32[0m
[4m[1m[34msanitizeSpecOutput movd_xmm_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovd_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _617), 32, 64)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 32, 64)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _618), 0, 128), concatenateMInt(mi(96, 0), extractMInt(mi(64, _617), 32, 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI618, 0, 128), concatenateMInt(mi(96, 0), extractMInt(MI617, 32, 64))) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _617), 32, 64)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 32, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _618) )
echo Debug:  Result: "SPAD1" |-> (MI618 )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _617)   )
echo Debug:  Result: "RBX" |-> (MI617   )
[4m[1m[34mwriteKDefn movd_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movd_xmm_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movmskpd_r64_xmm[0m
[4m[1m[34mcreatespec movmskpd_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskpd_r64_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovmskpd_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovmskpd %xmm1, %ebx
%ebx -> 1
avx -> 1
%rbx -> 1
%xmm1 -> 1

Total Circuit
RBX -> 1
YMM1 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
RBX -> 1

[4m[1m[34mkprove movmskpd_r64_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskpd_r64_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskpd_r64_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movmskpd_r64_xmm[0m
[4m[1m[34msanitizeSpecOutput movmskpd_r64_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovmskpd_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM1" |-> (mi(256, _612) )
echo Debug:  Result: "YMM1" |-> (MI612 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _611), 0, 32), concatenateMInt(mi(30, 0), concatenateMInt(extractMInt(mi(256, _612), 128, 129), extractMInt(mi(256, _612), 192, 193))))   )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI611, 0, 32), concatenateMInt(mi(30, 0), concatenateMInt(extractMInt(MI612, 128, 129), extractMInt(MI612, 192, 193))))   )
[4m[1m[34mwriteKDefn movmskpd_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movmskpd_r64_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orb_r8_r8[0m
[4m[1m[34mcreatespec orb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_r8_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: orb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorl %eax, %eax
%pf -> 1
%zf -> 1
%cf -> 1
%rax -> 1
%sf -> 1
%of -> 1
%eax -> 1
%af -> 1

Circuit: setnae %ah
%ah -> 1
%cf -> 1

Circuit: adcb %cl, %ah
%af -> 1
%cl -> 1
%sf -> 1
%of -> 1
%ah -> 1
%pf -> 1
%zf -> 1
%cf -> 1

Circuit: orb %ah, %bl
%af -> 1
%of -> 1
%sf -> 1
%bl -> 1
%cf -> 1
%zf -> 1
%pf -> 1
%ah -> 1

Circuit: callq .set_szp_for_bl
%bl -> 1
%sf -> 1
%pf -> 1
%zf -> 1

Total Circuit
RCX -> 1
SF -> 1
CF -> 1
ZF -> 1
RAX -> 1
RBX -> 1
AF -> 1
PF -> 1
OF -> 1

Target
ZF -> 1
CF -> 1
SF -> 1
RCX -> 1
OF -> 1
PF -> 1
AF -> 1
RBX -> 1

[4m[1m[34mkprove orb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput orb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(64, _629), 56, 57), extractMInt(mi(64, _630), 56, 57)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(MI629, 56, 57), extractMInt(MI630, 56, 57)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _630), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI629, 56, 64), extractMInt(MI630, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _630) )
echo Debug:  Result: "RCX" |-> (MI630 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(mi(64, _630), 56, 64), mi(8, 0))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(MI630, 56, 64), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _630), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), orMInt(extractMInt(MI629, 56, 64), extractMInt(MI630, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _630), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(MI629, 56, 64), extractMInt(MI630, 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn orb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orb_r8_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: phaddd_xmm_xmm[0m
[4m[1m[34mcreatespec phaddd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_phaddd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mphaddd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movshdup %xmm1, %xmm0
%xmm1 -> 1
%xmm0 -> 1
pni -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm2 -> 1
%xmm9 -> 1

Circuit: paddq %xmm0, %xmm1
%xmm1 -> 1
%xmm0 -> 1
sse2 -> 1

Circuit: vpaddq %xmm9, %xmm2, %xmm6
avx -> 1
%ymm6 -> 1
%xmm6 -> 1
%xmm2 -> 1
%xmm9 -> 1

Circuit: vunpcklpd %xmm9, %xmm1, %xmm4
%xmm1 -> 1
%xmm4 -> 1
avx -> 1
%ymm4 -> 1
%xmm9 -> 1

Circuit: vmovhlps %xmm1, %xmm8, %xmm5
%xmm1 -> 1
%ymm5 -> 1
avx -> 1
%xmm8 -> 1
%xmm5 -> 1

Circuit: vpaddq %xmm10, %xmm11, %xmm7
avx -> 1
%ymm7 -> 1
%xmm7 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm5 -> 1
%xmm6 -> 1
%xmm7 -> 1
%xmm4 -> 1
%xmm1 -> 1

Total Circuit
YMM10 -> 1
YMM2 -> 1
YMM4 -> 1
YMM8 -> 1
YMM0 -> 1
 -> 1
YMM1 -> 1
YMM11 -> 1
YMM5 -> 1
YMM7 -> 1
YMM9 -> 1
YMM6 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove phaddd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_phaddd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_phaddd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput phaddd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput phaddd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mphaddd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _621) )
echo Debug:  Result: "SPAD1" |-> (MI621 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _622), 192, 224)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI622, 192, 224)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _622) )
echo Debug:  Result: "YMM2" |-> (MI622 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _621), 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(mi(256, _622), 128, 160)), concatenateMInt(mi(33, 0), extractMInt(mi(256, _622), 160, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 192, 256)), concatenateMInt(mi(33, 0), extractMInt(mi(256, _622), 192, 224))), 33, 65)), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 160), extractMInt(mi(256, _621), 128, 160))), concatenateMInt(mi(1, 0), extractMInt(mi(256, _621), 128, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(256, _621), 192, 224), extractMInt(mi(256, _621), 192, 224))), concatenateMInt(mi(1, 0), extractMInt(mi(256, _621), 192, 256))), 33, 65)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI621, 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(MI622, 128, 160)), concatenateMInt(mi(33, 0), extractMInt(MI622, 160, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI622, 192, 256)), concatenateMInt(mi(33, 0), extractMInt(MI622, 192, 224))), 33, 65)), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI621, 128, 160), extractMInt(MI621, 128, 160))), concatenateMInt(mi(1, 0), extractMInt(MI621, 128, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI621, 192, 224), extractMInt(MI621, 192, 224))), concatenateMInt(mi(1, 0), extractMInt(MI621, 192, 256))), 33, 65)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _622), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI622, 160, 192)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _622), 192, 224)), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(256, _621), 192, 224), extractMInt(mi(256, _621), 192, 224))), concatenateMInt(mi(1, 0), extractMInt(mi(256, _621), 192, 256))), 1, 65))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI622, 192, 224)), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI621, 192, 224), extractMInt(MI621, 192, 224))), concatenateMInt(mi(1, 0), extractMInt(MI621, 192, 256))), 1, 65))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _622), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI622, 128, 160)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _622), 128, 192), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 192, 256)), concatenateMInt(mi(33, 0), extractMInt(mi(256, _622), 192, 224))), 1, 65))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI622, 128, 192), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI622, 192, 256)), concatenateMInt(mi(33, 0), extractMInt(MI622, 192, 224))), 1, 65))) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(192, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 160), extractMInt(mi(256, _621), 128, 160))), concatenateMInt(mi(1, 0), extractMInt(mi(256, _621), 128, 192))), 1, 65)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(192, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI621, 128, 160), extractMInt(MI621, 128, 160))), concatenateMInt(mi(1, 0), extractMInt(MI621, 128, 192))), 1, 65)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _622), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI622, 224, 256)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(192, 0), extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(mi(256, _622), 128, 160)), concatenateMInt(mi(33, 0), extractMInt(mi(256, _622), 160, 192))), 1, 65)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(192, 0), extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(MI622, 128, 160)), concatenateMInt(mi(33, 0), extractMInt(MI622, 160, 192))), 1, 65)) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _621), 128, 160), extractMInt(mi(256, _621), 128, 160)), concatenateMInt(extractMInt(mi(256, _621), 192, 224), extractMInt(mi(256, _621), 192, 224))))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI621, 128, 160), extractMInt(MI621, 128, 160)), concatenateMInt(extractMInt(MI621, 192, 224), extractMInt(MI621, 192, 224))))   )
[4m[1m[34mwriteKDefn phaddd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-phaddd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pmovzxbq_xmm_xmm[0m
[4m[1m[34mcreatespec pmovzxbq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxbq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovzxbq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpmovzxbq %xmm2, %xmm2
avx -> 1
%xmm2 -> 1
%ymm2 -> 1

Circuit: callq .move_128_64_xmm2_xmm8_xmm9
%xmm9 -> 1
%xmm2 -> 1
%xmm8 -> 1

Circuit: movddup %xmm8, %xmm1
pni -> 1
%xmm1 -> 1
%xmm8 -> 1

Circuit: vorpd %ymm2, %ymm2, %ymm15
%ymm15 -> 1
%ymm2 -> 1
avx -> 1

Circuit: unpckhpd %xmm15, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm15 -> 1

Total Circuit
YMM2 -> 1
YMM8 -> 1
YMM9 -> 1
YMM1 -> 1
YMM15 -> 1
 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove pmovzxbq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxbq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxbq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pmovzxbq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pmovzxbq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovzxbq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(184, 0), concatenateMInt(extractMInt(mi(256, _616), 240, 248), concatenateMInt(mi(56, 0), extractMInt(mi(256, _616), 248, 256)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(184, 0), concatenateMInt(extractMInt(MI616, 240, 248), concatenateMInt(mi(56, 0), extractMInt(MI616, 248, 256)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(mi(256, _616), 240, 248)), concatenateMInt(mi(56, 0), extractMInt(mi(256, _616), 248, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(MI616, 240, 248)), concatenateMInt(mi(56, 0), extractMInt(MI616, 248, 256)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(248, 0), extractMInt(mi(256, _616), 248, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(248, 0), extractMInt(MI616, 248, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(mi(256, _616), 240, 248)), concatenateMInt(mi(56, 0), extractMInt(mi(256, _616), 248, 256)))) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(MI616, 240, 248)), concatenateMInt(mi(56, 0), extractMInt(MI616, 248, 256)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(248, 0), extractMInt(mi(256, _616), 240, 248))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(248, 0), extractMInt(MI616, 240, 248))   )
[4m[1m[34mwriteKDefn pmovzxbq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pmovzxbq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rclb_rh_one[0m
[4m[1m[34mcreatespec rclb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclb_rh_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnc %al
%cf -> 1
%al -> 1

Circuit: cwtl
%rax -> 1
%ax -> 1

Circuit: cltq
%eax -> 1
%rax -> 1

Circuit: adcb %ah, %ah
%af -> 1
%sf -> 1
%of -> 1
%pf -> 1
%ah -> 1
%zf -> 1
%cf -> 1

Total Circuit
ZF -> 1
CF -> 1
RAX -> 1
SF -> 1
PF -> 1
OF -> 1
AF -> 1

Target
RAX -> 1
CF -> 1
 -> 1
OF -> 1

[4m[1m[34mkprove rclb_rh_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclb_rh_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclb_rh_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rclb_rh_one[0m
[4m[1m[34msanitizeSpecOutput rclb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _620), 48, 49), extractMInt(mi(64, _620), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _620), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI620, 48, 49), extractMInt(MI620, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI620, 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9), extractMInt(mi(64, _620), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 1, 9), extractMInt(MI620, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(8, 0), mi(1, _618))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56))), concatenateMInt(mi(8, 0), MI618)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rclb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rclb_rh_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sarq_r64_one[0m
[4m[1m[34mcreatespec sarq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarq_r64_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: sarq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: andnl %ebx, %ebx, %esi
%rsi -> 1
%zf -> 1
%esi -> 1
%cf -> 1
%pf -> 1
%ebx -> 1
%af -> 1
bmi1 -> 1
%of -> 1
%sf -> 1

Circuit: movl %esi, %esi
%esi -> 1
%rsi -> 1

Circuit: setns %cl
%cl -> 1
%sf -> 1

Circuit: sarq %cl, %rbx
%af -> 1
%of -> 1
%sf -> 1
%cl -> 1
%rbx -> 1
%cf -> 1
%zf -> 1
%pf -> 1

Circuit: movzwl %si, %r12d
%si -> 1
%r12 -> 1
%r12d -> 1

Circuit: decl %r12d
%r12 -> 1
%af -> 1
%sf -> 1
%of -> 1
%r12d -> 1
%pf -> 1
%zf -> 1

Circuit: callq .set_szp_for_rbx
%sf -> 1
%rbx -> 1
%pf -> 1
%zf -> 1

Total Circuit
OF -> 1
PF -> 1
 -> 1
AF -> 1
RBX -> 1
ZF -> 1
CF -> 1
RSI -> 1
R12 -> 1
SF -> 1
RCX -> 1

Target
 -> 1
PF -> 1
OF -> 1
RBX -> 1
AF -> 1
CF -> 1
ZF -> 1
SF -> 1

[4m[1m[34mkprove sarq_r64_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarq_r64_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarq_r64_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sarq_r64_one[0m
[4m[1m[34msanitizeSpecOutput sarq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (mi(64, 4294967295) )
echo Debug:  Result: "R12" |-> (mi(64, 4294967295) )
echo Debug:  PreResult: "CF" |-> (extractMInt(mi(64, _628), 63, 64) )
echo Debug:  Result: "CF" |-> (extractMInt(MI628, 63, 64) )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, _628))), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(MI628)), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, _628))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(MI628)), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, 1) )
echo Debug:  Result: "RCX" |-> (mi(64, 1) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (ashrMInt(mi(64, svalueMInt(mi(64, _628))), 1) )
echo Debug:  Result: "RBX" |-> (ashrMInt(mi(64, svalueMInt(MI628)), 1) )
echo Debug:  PreResult: "RSI" |-> (mi(64, 0) )
echo Debug:  Result: "RSI" |-> (mi(64, 0) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, _628))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(MI628)), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sarq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sarq_r64_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setle_r8[0m
[4m[1m[34mcreatespec setle_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setle_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetle_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setng %bl
%of -> 1
%bl -> 1
%sf -> 1
%zf -> 1

Total Circuit
RBX -> 1
OF -> 1
SF -> 1
ZF -> 1

Target
OF -> 1
RBX -> 1
ZF -> 1
SF -> 1

[4m[1m[34mkprove setle_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setle_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setle_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setle_r8[0m
[4m[1m[34msanitizeSpecOutput setle_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetle_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _618)), concatenateMInt(mi(7, 0), mi(1, _616))), concatenateMInt(mi(7, 0), mi(1, _619))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 1)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI618), concatenateMInt(mi(7, 0), MI616)), concatenateMInt(mi(7, 0), MI619)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 1)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _618) )
echo Debug:  Result: "SF" |-> (MI618 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _619) )
echo Debug:  Result: "ZF" |-> (MI619 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> (mi(1, _616)   )
echo Debug:  Result: "OF" |-> (MI616   )
[4m[1m[34mwriteKDefn setle_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setle_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setna_r8[0m
[4m[1m[34mcreatespec setna_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setna_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetna_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x5, %rbx
%rbx -> 1
\$0x5 -> 1

Circuit: setna %dh
%dh -> 1
%cf -> 1
%zf -> 1

Circuit: xchgb %bl, %dh
%bl -> 1
%dh -> 1

Total Circuit
RBX -> 1
RDX -> 1
 -> 1
ZF -> 1
CF -> 1

Target
RBX -> 1
ZF -> 1
CF -> 1

[4m[1m[34mkprove setna_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setna_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setna_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setna_r8[0m
[4m[1m[34msanitizeSpecOutput setna_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetna_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _617), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _616), 0, 56), concatenateMInt(mi(7, 0), mi(1, _615))) ) #else ( concatenateMInt(extractMInt(mi(64, _616), 0, 56), concatenateMInt(mi(7, 0), mi(1, _617))) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI617, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI616, 0, 56), concatenateMInt(mi(7, 0), MI615)) ) #else ( concatenateMInt(extractMInt(MI616, 0, 56), concatenateMInt(mi(7, 0), MI617)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _615) )
echo Debug:  Result: "CF" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _617) )
echo Debug:  Result: "ZF" |-> (MI617 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "RDX" |-> (mi(64, 1280)   )
echo Debug:  Result: "RDX" |-> (mi(64, 1280)   )
[4m[1m[34mwriteKDefn setna_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setna_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnb_r8[0m
[4m[1m[34mcreatespec setnb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnb_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnc %bl
%cf -> 1
%bl -> 1

Circuit: xorq %rcx, %rcx
%af -> 1
%sf -> 1
%of -> 1
%pf -> 1
%rcx -> 1
%zf -> 1
%cf -> 1

Circuit: xaddb %ch, %bl
%zf -> 1
%cf -> 1
%pf -> 1
%ch -> 1
%af -> 1
%of -> 1
%bl -> 1
%sf -> 1

Total Circuit
CF -> 1
ZF -> 1
RCX -> 1
SF -> 1
PF -> 1
OF -> 1
AF -> 1
RBX -> 1

Target
CF -> 1
RBX -> 1

[4m[1m[34mkprove setnb_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnb_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnb_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnb_r8[0m
[4m[1m[34msanitizeSpecOutput setnb_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618)))), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618))), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618))), mi(8, 0))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618)), mi(8, 0))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI619, 0, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnb_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnbe_rh[0m
[4m[1m[34mcreatespec setnbe_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnbe_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnbe_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: seta %dl
%cf -> 1
%zf -> 1
%dl -> 1

Circuit: movq $0x20, %rax
%rax -> 1
\$0x20 -> 1

Circuit: xaddb %dl, %ah
%zf -> 1
%cf -> 1
%ah -> 1
%pf -> 1
%of -> 1
%sf -> 1
%af -> 1
%dl -> 1

Total Circuit
ZF -> 1
CF -> 1
RAX -> 1
SF -> 1
PF -> 1
OF -> 1
 -> 1
RDX -> 1
AF -> 1

Target
RAX -> 1
ZF -> 1
CF -> 1

[4m[1m[34mkprove setnbe_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnbe_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnbe_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnbe_rh[0m
[4m[1m[34msanitizeSpecOutput setnbe_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnbe_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 2) ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 2) ) #fi)  )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(8, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 9) ) #fi) ), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(8, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 9) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(8, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 9) ) #fi) ), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(8, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 9) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(8, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 9) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(8, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 9) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 2) ) #fi) )  andBool   notBool  ( eqMInt(mi(1, 0), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 2) ) #fi) ) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 2) ) #fi) )  andBool   notBool  ( eqMInt(mi(1, 0), (#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 2) ) #fi) ) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (mi(64, 0) )
echo Debug:  Result: "RDX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _620), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 9), extractMInt(mi(64, _620), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI620, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 9), extractMInt(MI620, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( true ) #else ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 9), mi(8, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( true ) #else ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 9), mi(8, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnbe_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnbe_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnle_r8[0m
[4m[1m[34mcreatespec setnle_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnle_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnle_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_of_into_rbx
%of -> 1
%rbx -> 1

Circuit: setnl %r9b
%r9b -> 1
%sf -> 1
%of -> 1

Circuit: xchgb %bh, %bl
%bx -> 1
%bh -> 1
%bl -> 1

Circuit: movzbl %r9b, %edi
%r9b -> 1
%edi -> 1
%rdi -> 1

Circuit: cmovnel %edi, %ebx
%zf -> 1
%edi -> 1
%ebx -> 1
cmov -> 1
%rbx -> 1

Total Circuit
RDI -> 1
ZF -> 1
SF -> 1
OF -> 1
 -> 1
R9 -> 1
RBX -> 1

Target
SF -> 1
ZF -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove setnle_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnle_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnle_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnle_r8[0m
[4m[1m[34msanitizeSpecOutput setnle_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnle_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _620) )
echo Debug:  Result: "SF" |-> (MI620 )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _618))), mi(8, 1))) )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI618)), mi(8, 1))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, _618) )
echo Debug:  Result: "OF" |-> (MI618 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _618))), mi(8, 1))) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI618)), mi(8, 1))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _619), 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _618))), mi(8, 1))) ) #else ( concatenateMInt(extractMInt(mi(64, _619), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI621, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI619, 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI618)), mi(8, 1))) ) #else ( concatenateMInt(extractMInt(MI619, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _621)   )
echo Debug:  Result: "ZF" |-> (MI621   )
[4m[1m[34mwriteKDefn setnle_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnle_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setns_rh[0m
[4m[1m[34mcreatespec setns_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setns_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetns_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x2, %rax
\$0x2 -> 1
%rax -> 1

Circuit: roll $0x1, %eax
%of -> 1
%eax -> 1
%cf -> 1
\$0x1 -> 1
%rax -> 1

Circuit: setnl %ah
%sf -> 1
%of -> 1
%ah -> 1

Total Circuit
OF -> 1
 -> 1
CF -> 1
RAX -> 1
SF -> 1

Target
SF -> 1
RAX -> 1

[4m[1m[34mkprove setns_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setns_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setns_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setns_rh[0m
[4m[1m[34msanitizeSpecOutput setns_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetns_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _615)), mi(8, 0)), mi(8, 1)), extractMInt(mi(64, _614), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI615), mi(8, 0)), mi(8, 1)), extractMInt(MI614, 56, 64))) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, _615) )
echo Debug:  Result: "SF" |-> (MI615 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0)   )
echo Debug:  Result: "OF" |-> (mi(1, 0)   )
[4m[1m[34mwriteKDefn setns_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setns_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testl_r32_r32[0m
[4m[1m[34mcreatespec testl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: andnl %ebx, %ecx, %r8d
%cf -> 1
%zf -> 1
%r8 -> 1
%ebx -> 1
%pf -> 1
%of -> 1
%ecx -> 1
%sf -> 1
%af -> 1
bmi1 -> 1
%r8d -> 1

Circuit: xorl %r8d, %ebx
%sf -> 1
%of -> 1
%r8d -> 1
%af -> 1
%pf -> 1
%ebx -> 1
%cf -> 1
%zf -> 1
%rbx -> 1

Total Circuit
RBX -> 1
AF -> 1
OF -> 1
PF -> 1
 -> 1
RCX -> 1
SF -> 1
R8 -> 1
ZF -> 1
CF -> 1

Target
CF -> 1
ZF -> 1
SF -> 1
RCX -> 1
OF -> 1
PF -> 1
RBX -> 1
AF -> 1

[4m[1m[34mkprove testl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput testl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _628), 32, 33), xorMInt(extractMInt(mi(64, _629), 32, 33), orMInt(extractMInt(mi(64, _629), 32, 33), extractMInt(mi(64, _628), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI628, 32, 33), xorMInt(extractMInt(MI629, 32, 33), orMInt(extractMInt(MI629, 32, 33), extractMInt(MI628, 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _628), 56, 64), xorMInt(extractMInt(mi(64, _629), 56, 64), orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI628, 56, 64), xorMInt(extractMInt(MI629, 56, 64), orMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _629), 32, 64), orMInt(extractMInt(mi(64, _629), 32, 64), extractMInt(mi(64, _628), 32, 64)))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI629, 32, 64), orMInt(extractMInt(MI629, 32, 64), extractMInt(MI628, 32, 64)))) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _629) )
echo Debug:  Result: "RCX" |-> (MI629 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _628), 32, 64)), concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _629), 32, 64), orMInt(extractMInt(mi(64, _629), 32, 64), extractMInt(mi(64, _628), 32, 64))))) )
echo Debug:  Result: "RBX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(MI628, 32, 64)), concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI629, 32, 64), orMInt(extractMInt(MI629, 32, 64), extractMInt(MI628, 32, 64))))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _628), 32, 64), xorMInt(extractMInt(mi(64, _629), 32, 64), orMInt(extractMInt(mi(64, _629), 32, 64), extractMInt(mi(64, _628), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI628, 32, 64), xorMInt(extractMInt(MI629, 32, 64), orMInt(extractMInt(MI629, 32, 64), extractMInt(MI628, 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: unpcklps_xmm_xmm[0m
[4m[1m[34mcreatespec unpcklps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpcklps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpcklps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vbroadcastsd %xmm1, %ymm9
avx2 -> 1
%ymm9 -> 1
%xmm1 -> 1

Circuit: vmovdqa %xmm9, %xmm10
avx -> 1
%ymm10 -> 1
%xmm10 -> 1
%xmm9 -> 1

Circuit: vmovddup %xmm2, %xmm15
avx -> 1
%xmm15 -> 1
%ymm15 -> 1
%xmm2 -> 1

Circuit: unpckhps %xmm15, %xmm10
sse -> 1
%xmm15 -> 1
%xmm10 -> 1

Circuit: movapd %xmm10, %xmm1
sse2 -> 1
%xmm10 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
 -> 1
YMM15 -> 1
YMM9 -> 1
YMM10 -> 1
YMM2 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove unpcklps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpcklps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpcklps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput unpcklps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput unpcklps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpcklps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 192, 224), extractMInt(mi(256, _615), 192, 224)), concatenateMInt(extractMInt(mi(256, _616), 224, 256), extractMInt(mi(256, _615), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI616, 192, 224), extractMInt(MI615, 192, 224)), concatenateMInt(extractMInt(MI616, 224, 256), extractMInt(MI615, 224, 256)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 192, 224), extractMInt(mi(256, _615), 192, 224)), concatenateMInt(extractMInt(mi(256, _616), 224, 256), extractMInt(mi(256, _615), 224, 256)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI616, 192, 224), extractMInt(MI615, 192, 224)), concatenateMInt(extractMInt(MI616, 224, 256), extractMInt(MI615, 224, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _616), 192, 256))) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 192, 256), extractMInt(MI616, 192, 256))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _615), 192, 256)), concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _615), 192, 256)))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI615, 192, 256)), concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI615, 192, 256)))   )
[4m[1m[34mwriteKDefn unpcklps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-unpcklps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vaddsubpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vaddsubpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsubpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddsubpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm2, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: addsubpd %xmm3, %xmm1
pni -> 1
%xmm3 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vaddsubpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsubpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsubpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vaddsubpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vaddsubpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddsubpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vaddsubpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vaddsubpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vaddsubps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vaddsubps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsubps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddsubps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: addsubps %xmm3, %xmm2
%xmm3 -> 1
pni -> 1
%xmm2 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%r13 -> 1
%xmm2 -> 1
%r12 -> 1

Circuit: vzeroall
%ymm2 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm0 -> 1
%ymm4 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm5 -> 1
%ymm8 -> 1
%ymm15 -> 1
%ymm14 -> 1
%ymm6 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm12 -> 1
%ymm9 -> 1
avx -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%r12 -> 1
%xmm1 -> 1

Total Circuit
YMM12 -> 1
YMM10 -> 1
YMM14 -> 1
YMM2 -> 1
YMM8 -> 1
YMM13 -> 1
YMM6 -> 1
YMM5 -> 1
YMM4 -> 1
R13 -> 1
R12 -> 1
YMM0 -> 1
YMM3 -> 1
 -> 1
YMM11 -> 1
YMM15 -> 1
YMM1 -> 1
YMM7 -> 1
YMM9 -> 1

Target
YMM3 -> 1
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vaddsubps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsubps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsubps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vaddsubps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vaddsubps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddsubps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI630, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI629, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI629, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI629, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) , 32)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI630, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI629, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vaddsubps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vaddsubps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandnps_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vandnps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnps_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %ymm3, %ymm11
%ymm3 -> 1
%ymm11 -> 1
avx -> 1

Circuit: vandnpd %ymm11, %ymm2, %ymm1
%ymm2 -> 1
%ymm11 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM11 -> 1
YMM1 -> 1
 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vandnps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandnps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vandnps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _616), 0, 64), extractMInt(mi(256, _615), 0, 64)), extractMInt(mi(256, _615), 0, 64)), xorMInt(orMInt(extractMInt(mi(256, _616), 64, 128), extractMInt(mi(256, _615), 64, 128)), extractMInt(mi(256, _615), 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _615), 128, 192), extractMInt(mi(256, _616), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _616), 192, 256)), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(MI616, 0, 64), extractMInt(MI615, 0, 64)), extractMInt(MI615, 0, 64)), xorMInt(orMInt(extractMInt(MI616, 64, 128), extractMInt(MI615, 64, 128)), extractMInt(MI615, 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(MI615, 128, 192), extractMInt(MI616, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(orMInt(extractMInt(MI615, 192, 256), extractMInt(MI616, 192, 256)), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, _616) )
echo Debug:  Result: "YMM11" |-> (MI616 )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vandnps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandnps_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vandpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: pand %xmm3, %xmm2
%xmm3 -> 1
sse2 -> 1
%xmm2 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%xmm2 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm8 -> 1
%ymm14 -> 1
%ymm15 -> 1
%ymm6 -> 1
%ymm13 -> 1
%ymm1 -> 1
avx -> 1
%ymm12 -> 1
%ymm9 -> 1
%ymm2 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm0 -> 1
%ymm10 -> 1
%ymm7 -> 1
%ymm4 -> 1
%ymm5 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r8 -> 1
%xmm1 -> 1
%r9 -> 1

Total Circuit
YMM8 -> 1
YMM13 -> 1
YMM12 -> 1
R8 -> 1
YMM10 -> 1
YMM2 -> 1
YMM14 -> 1
YMM6 -> 1
YMM5 -> 1
R9 -> 1
YMM4 -> 1
YMM9 -> 1
 -> 1
YMM3 -> 1
YMM11 -> 1
YMM1 -> 1
YMM15 -> 1
YMM7 -> 1
YMM0 -> 1

Target
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vandpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vandpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (xorMInt(orMInt(xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _630), 192, 256)), extractMInt(mi(256, _630), 192, 256)), xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _630), 192, 256))) )
echo Debug:  Result: "R8" |-> (xorMInt(orMInt(xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI630, 192, 256)), extractMInt(MI630, 192, 256)), xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI630, 192, 256))) )
echo Debug:  PreResult: "R9" |-> (xorMInt(orMInt(xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _630), 128, 192)), extractMInt(mi(256, _630), 128, 192)), xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _630), 128, 192))) )
echo Debug:  Result: "R9" |-> (xorMInt(orMInt(xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI630, 128, 192)), extractMInt(MI630, 128, 192)), xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI630, 128, 192))) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _630), 128, 192)), extractMInt(mi(256, _630), 128, 192)), xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _630), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _630), 192, 256)), extractMInt(mi(256, _630), 192, 256)), xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _630), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI630, 128, 192)), extractMInt(MI630, 128, 192)), xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI630, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI630, 192, 256)), extractMInt(MI630, 192, 256)), xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI630, 192, 256))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vandpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vandps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm3, %xmm1
%xmm3 -> 1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1

Circuit: pand %xmm1, %xmm2
%xmm2 -> 1
sse2 -> 1
%xmm1 -> 1

Circuit: vmovups %xmm2, %xmm1
avx -> 1
%ymm1 -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vandps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vandps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vandps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtsi2sdl_xmm_xmm_r32[0m
[4m[1m[34mcreatespec vcvtsi2sdl_xmm_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtsi2sdl_xmm_xmm_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtsi2sdl_xmm_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovd %ebx, %xmm1
%xmm1 -> 1
%ebx -> 1
avx -> 1
%ymm1 -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%r8 -> 1
%r9 -> 1
%xmm1 -> 1

Circuit: callq .move_r9b_to_byte_25_of_ymm1
%ymm1 -> 1
%r9b -> 1

Circuit: vcvtdq2pd %ymm1, %ymm3
%ymm3 -> 1
avx -> 1
%ymm1 -> 1

Circuit: vmovsd %xmm3, %xmm2, %xmm1
%xmm2 -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM3 -> 1
 -> 1
YMM1 -> 1
R8 -> 1
YMM2 -> 1
R9 -> 1
RBX -> 1

Target
RBX -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vcvtsi2sdl_xmm_xmm_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtsi2sdl_xmm_xmm_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtsi2sdl_xmm_xmm_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vcvtsi2sdl_xmm_xmm_r32[0m
[4m[1m[34msanitizeSpecOutput vcvtsi2sdl_xmm_xmm_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtsi2sdl_xmm_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _618), 128, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _616), 32, 64)), 53, 11), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI618, 128, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(MI616, 32, 64)), 53, 11), 64))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(192, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _616), 32, 64)), 53, 11), 64)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(192, 0), Float2MInt(Int2Float(svalueMInt(extractMInt(MI616, 32, 64)), 53, 11), 64)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _616)   )
echo Debug:  Result: "RBX" |-> (MI616   )
[4m[1m[34mwriteKDefn vcvtsi2sdl_xmm_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtsi2sdl_xmm_xmm_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd231pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmadd231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovups %xmm1, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1

Circuit: vandnps %xmm1, %xmm1, %xmm9
%xmm9 -> 1
%xmm1 -> 1
%ymm9 -> 1
avx -> 1

Circuit: vfnmsub231pd %ymm9, %ymm9, %ymm1
fma -> 1
%ymm1 -> 1
%ymm9 -> 1

Circuit: vfmsub231pd %xmm3, %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
%xmm3 -> 1
fma -> 1
%ymm1 -> 1

Total Circuit
YMM9 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmadd231pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd231pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd231pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vfmadd231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd231pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub132sd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132sd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmsub231sd %xmm3, %xmm1, %xmm2
%xmm3 -> 1
%xmm1 -> 1
%ymm2 -> 1
%xmm2 -> 1
fma -> 1

Circuit: callq .move_128_064_xmm1_r10_r11
%r10 -> 1
%r11 -> 1
%xmm1 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%r13 -> 1
%r12 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm15 -> 1
%ymm14 -> 1
%ymm8 -> 1
%ymm13 -> 1
%ymm6 -> 1
avx -> 1
%ymm12 -> 1
%ymm9 -> 1
%ymm1 -> 1
%ymm2 -> 1
%ymm11 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm5 -> 1
%ymm10 -> 1
%ymm7 -> 1
%ymm4 -> 1

Circuit: xchgq %r12, %r10
%r10 -> 1
%r12 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r11 -> 1
%r10 -> 1
%xmm1 -> 1

Total Circuit
YMM6 -> 1
YMM5 -> 1
YMM12 -> 1
YMM14 -> 1
YMM2 -> 1
YMM10 -> 1
YMM8 -> 1
R11 -> 1
R10 -> 1
YMM13 -> 1
YMM0 -> 1
YMM9 -> 1
YMM11 -> 1
YMM1 -> 1
 -> 1
YMM15 -> 1
YMM7 -> 1
YMM3 -> 1
R13 -> 1
YMM4 -> 1
R12 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmsub132sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub132sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub132sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _632), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _631), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI632, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI631, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _630), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _632), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _631), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI630, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI632, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI631, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _630), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI630, 192, 256) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _630), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI630, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _631), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI631, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmsub132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub132sd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub213sd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213sd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: vfmsub213pd %xmm3, %xmm2, %xmm10
fma -> 1
%xmm10 -> 1
%xmm2 -> 1
%xmm3 -> 1
%ymm10 -> 1

Circuit: vmaxsd %xmm2, %xmm11, %xmm1
%ymm1 -> 1
avx -> 1
%xmm11 -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm1 -> 1
%xmm11 -> 1
%xmm10 -> 1

Total Circuit
YMM10 -> 1
YMM2 -> 1
YMM11 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmsub213sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub213sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub213sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _615), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI615, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 0e+00  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 0e+00  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _615), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI615, 128, 192)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617)   )
echo Debug:  Result: "YMM3" |-> (MI617   )
[4m[1m[34mwriteKDefn vfmsub213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub213sd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd231ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd231ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm2 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: vfnmadd132ss %xmm3, %xmm1, %xmm2
fma -> 1
%xmm1 -> 1
%xmm3 -> 1
%xmm2 -> 1
%ymm2 -> 1

Circuit: vfnmsub213ss %xmm10, %xmm2, %xmm1
%ymm1 -> 1
%xmm10 -> 1
fma -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: movss %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
sse -> 1

Total Circuit
YMM10 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
YMM11 -> 1
 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmadd231ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd231ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd231ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 224)), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 224)), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 128, 192)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
[4m[1m[34mwriteKDefn vfnmadd231ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd231ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub132pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmsub132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm3, %xmm14
avx -> 1
%ymm14 -> 1
%xmm3 -> 1
%xmm14 -> 1

Circuit: vmovdqu %xmm2, %xmm8
%xmm2 -> 1
avx -> 1
%xmm8 -> 1
%ymm8 -> 1

Circuit: vminss %xmm1, %xmm1, %xmm1
avx -> 1
%ymm1 -> 1
%xmm1 -> 1

Circuit: vfnmsub213pd %ymm8, %ymm1, %ymm14
%ymm1 -> 1
%ymm14 -> 1
fma -> 1
%ymm8 -> 1

Circuit: vmaxps %xmm14, %xmm14, %xmm1
%xmm1 -> 1
%xmm14 -> 1
%ymm1 -> 1
avx -> 1

Circuit: por %xmm14, %xmm1
%xmm1 -> 1
%xmm14 -> 1
sse2 -> 1

Total Circuit
YMM8 -> 1
YMM2 -> 1
YMM14 -> 1
YMM3 -> 1
 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vfnmsub132pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub132pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub132pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(64, 9223372036854775808), concatenateMInt(mi(64, 9223372036854775808), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(64, 9223372036854775808), concatenateMInt(mi(64, 9223372036854775808), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
[4m[1m[34mwriteKDefn vfnmsub132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub132pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhsubpd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vhsubpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubpd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpunpcklqdq %ymm3, %ymm2, %ymm9
avx2 -> 1
%ymm9 -> 1
%ymm3 -> 1
%ymm2 -> 1

Circuit: vpunpckhqdq %ymm3, %ymm2, %ymm6
%ymm3 -> 1
%ymm2 -> 1
avx2 -> 1
%ymm6 -> 1

Circuit: vmovdqa %ymm9, %ymm2
%ymm2 -> 1
%ymm9 -> 1
avx -> 1

Circuit: vsubpd %ymm6, %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm2 -> 1

Total Circuit
YMM2 -> 1
YMM6 -> 1
YMM9 -> 1
YMM3 -> 1
 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vhsubpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhsubpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vhsubpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 64, 128), extractMInt(mi(256, _616), 64, 128)), concatenateMInt(extractMInt(mi(256, _617), 192, 256), extractMInt(mi(256, _616), 192, 256))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(concatenateMInt(extractMInt(MI617, 64, 128), extractMInt(MI616, 64, 128)), concatenateMInt(extractMInt(MI617, 192, 256), extractMInt(MI616, 192, 256))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 64, 128), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _617), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 64, 128), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 64, 128), 53, 11)  -Float  MInt2Float(extractMInt(MI617, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 64, 128), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 64, 128), extractMInt(mi(256, _616), 64, 128)), concatenateMInt(extractMInt(mi(256, _617), 192, 256), extractMInt(mi(256, _616), 192, 256))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(concatenateMInt(extractMInt(MI617, 64, 128), extractMInt(MI616, 64, 128)), concatenateMInt(extractMInt(MI617, 192, 256), extractMInt(MI616, 192, 256))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 0, 64), extractMInt(mi(256, _616), 0, 64)), concatenateMInt(extractMInt(mi(256, _617), 128, 192), extractMInt(mi(256, _616), 128, 192)))   )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(concatenateMInt(extractMInt(MI617, 0, 64), extractMInt(MI616, 0, 64)), concatenateMInt(extractMInt(MI617, 128, 192), extractMInt(MI616, 128, 192)))   )
[4m[1m[34mwriteKDefn vhsubpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhsubpd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovmskpd_r64_xmm[0m
[4m[1m[34mcreatespec vmovmskpd_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r64_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskpd_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovmskpd %xmm1, %r12d
avx -> 1
%r12d -> 1
%r12 -> 1
%xmm1 -> 1

Circuit: movq %r12, %rbx
%r12 -> 1
%rbx -> 1

Total Circuit
YMM1 -> 1
 -> 1
R12 -> 1
RBX -> 1

Target
RBX -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vmovmskpd_r64_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r64_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r64_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovmskpd_r64_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovmskpd_r64_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskpd_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(mi(256, _613), 128, 129), extractMInt(mi(256, _613), 192, 193))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(MI613, 128, 129), extractMInt(MI613, 192, 193))) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _613) )
echo Debug:  Result: "YMM1" |-> (MI613 )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(mi(256, _613), 128, 129), extractMInt(mi(256, _613), 192, 193)))   )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(MI613, 128, 129), extractMInt(MI613, 192, 193)))   )
[4m[1m[34mwriteKDefn vmovmskpd_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovmskpd_r64_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovmskpd_r64_ymm[0m
[4m[1m[34mcreatespec vmovmskpd_r64_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r64_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskpd_r64_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm1_xmm10_xmm11
%ymm1 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: vmovmskpd %xmm11, %r9d
%r9d -> 1
%r9 -> 1
%xmm11 -> 1
avx -> 1

Circuit: vmovmskpd %xmm10, %ebx
%ebx -> 1
%rbx -> 1
avx -> 1
%xmm10 -> 1

Circuit: xaddb %r9b, %r9b
%zf -> 1
%cf -> 1
%pf -> 1
%af -> 1
%of -> 1
%sf -> 1
%r9b -> 1

Circuit: xaddb %bl, %r9b
%af -> 1
%sf -> 1
%of -> 1
%r9b -> 1
%bl -> 1
%pf -> 1
%zf -> 1
%cf -> 1

Circuit: addw %r9w, %bx
%pf -> 1
%zf -> 1
%cf -> 1
%bx -> 1
%r9w -> 1
%af -> 1
%sf -> 1
%of -> 1

Total Circuit
CF -> 1
ZF -> 1
SF -> 1
 -> 1
YMM1 -> 1
YMM11 -> 1
YMM10 -> 1
OF -> 1
PF -> 1
R9 -> 1
RBX -> 1
AF -> 1

Target
YMM1 -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove vmovmskpd_r64_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r64_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r64_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovmskpd_r64_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovmskpd_r64_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskpd_r64_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(64, _620), 0, 32), mi(16, 0)), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(concatenateMInt(extractMInt(MI620, 0, 32), mi(16, 0)), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _621) )
echo Debug:  Result: "YMM1" |-> (MI621 )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _621), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI621, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _621), 0, 128)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI621, 0, 128)) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 1, 2) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 128, 129), extractMInt(mi(256, _621), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(mi(256, _621), 0, 1), extractMInt(mi(256, _621), 64, 65)))), 1, 9))), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 128, 129), extractMInt(MI621, 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(MI621, 0, 1), extractMInt(MI621, 64, 65)))), 1, 9))), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn vmovmskpd_r64_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovmskpd_r64_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpand_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vpand_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpand_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpand_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: pand %xmm3, %xmm2
%xmm2 -> 1
sse2 -> 1
%xmm3 -> 1

Circuit: vorps %xmm2, %xmm2, %xmm1
avx -> 1
%ymm1 -> 1
%xmm2 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

Target
YMM3 -> 1
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpand_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpand_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpand_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpand_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpand_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpand_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vpand_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpand_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpandn_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vpandn_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpandn_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpandn_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vandnpd %ymm3, %ymm2, %ymm1
%ymm3 -> 1
%ymm2 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpandn_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpandn_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpandn_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpandn_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpandn_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpandn_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _615), 0, 64), extractMInt(mi(256, _614), 0, 64)), extractMInt(mi(256, _614), 0, 64)), xorMInt(orMInt(extractMInt(mi(256, _615), 64, 128), extractMInt(mi(256, _614), 64, 128)), extractMInt(mi(256, _614), 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _614), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _614), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(MI615, 0, 64), extractMInt(MI614, 0, 64)), extractMInt(MI614, 0, 64)), xorMInt(orMInt(extractMInt(MI615, 64, 128), extractMInt(MI614, 64, 128)), extractMInt(MI614, 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI614, 128, 192)), xorMInt(orMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI614, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vpandn_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpandn_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastb_xmm_xmm[0m
[4m[1m[34mcreatespec vpbroadcastb_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastb_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastb_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r12_r13
%r13 -> 1
%r12 -> 1
%xmm2 -> 1

Circuit: movsbw %r12b, %ax
%r12b -> 1
%ax -> 1

Circuit: movw %ax, %r12w
%r12w -> 1
%ax -> 1

Circuit: callq .move_064_128_r12_r13_xmm2
%xmm2 -> 1
%r12 -> 1
%r13 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vpbroadcastd %xmm2, %ymm1
%xmm2 -> 1
avx2 -> 1
%ymm1 -> 1

Circuit: callq .move_r8b_to_byte_3_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: callq .move_r8b_to_byte_2_of_ymm1
%r8b -> 1
%ymm1 -> 1

Circuit: callq .move_r8b_to_byte_1_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: vpbroadcastd %xmm1, %xmm1
avx2 -> 1
%ymm1 -> 1
%xmm1 -> 1

Total Circuit
 -> 1
YMM1 -> 1
R12 -> 1
R13 -> 1
R9 -> 1
RAX -> 1
YMM2 -> 1
R8 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpbroadcastb_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastb_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastb_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastb_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastb_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastb_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _617), 0, 240), extractMInt(mi(64, svalueMInt(extractMInt(mi(256, _617), 248, 256))), 48, 64)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI617, 0, 240), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 248, 256))), 48, 64)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256)), concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256)), concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256)), concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256)), concatenateMInt(extractMInt(mi(256, _617), 248, 256), extractMInt(mi(256, _617), 248, 256)))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256)), concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256)), concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256)), concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256)), concatenateMInt(extractMInt(MI617, 248, 256), extractMInt(MI617, 248, 256)))))) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(extractMInt(mi(256, _617), 192, 240), extractMInt(mi(64, svalueMInt(extractMInt(mi(256, _617), 248, 256))), 48, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(extractMInt(MI617, 192, 240), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 248, 256))), 48, 64)) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _617), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI617, 128, 192) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(extractMInt(mi(256, _617), 192, 240), extractMInt(mi(64, svalueMInt(extractMInt(mi(256, _617), 248, 256))), 48, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(extractMInt(MI617, 192, 240), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 248, 256))), 48, 64)) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _617), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI617, 128, 192) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(256, _617), 248, 256))), 48, 64))   )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 248, 256))), 48, 64))   )
[4m[1m[34mwriteKDefn vpbroadcastb_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastb_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastw_xmm_xmm[0m
[4m[1m[34mcreatespec vpbroadcastw_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastw_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastw_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_r10d_r11d_r12d_r13d
%r13d -> 1
%xmm2 -> 1
%r12d -> 1
%r11d -> 1
%r10d -> 1

Circuit: callq .move_016_032_r10w_r11w_ebx
%r10w -> 1
%ebx -> 1
%r11w -> 1

Circuit: callq .move_016_008_bx_r8b_r9b
%bx -> 1
%r9b -> 1
%r8b -> 1

Circuit: callq .move_r9b_to_byte_3_of_rbx
%rbx -> 1
%r9b -> 1

Circuit: vmovd %ebx, %xmm1
%ymm1 -> 1
avx -> 1
%ebx -> 1
%xmm1 -> 1

Circuit: callq .move_r9b_to_byte_19_of_ymm1
%ymm1 -> 1
%r9b -> 1

Circuit: callq .move_r8b_to_byte_2_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: vbroadcastss %xmm1, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx2 -> 1

Total Circuit
 -> 1
YMM1 -> 1
R12 -> 1
R13 -> 1
RBX -> 1
R9 -> 1
R8 -> 1
YMM2 -> 1
R10 -> 1
R11 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vpbroadcastw_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastw_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastw_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastw_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastw_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastw_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _619) )
echo Debug:  Result: "YMM2" |-> (MI619 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 240, 256), extractMInt(mi(256, _619), 240, 256)), concatenateMInt(extractMInt(mi(256, _619), 240, 256), extractMInt(mi(256, _619), 240, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 240, 256), extractMInt(mi(256, _619), 240, 256)), concatenateMInt(extractMInt(mi(256, _619), 240, 256), extractMInt(mi(256, _619), 240, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI619, 240, 256), extractMInt(MI619, 240, 256)), concatenateMInt(extractMInt(MI619, 240, 256), extractMInt(MI619, 240, 256))), concatenateMInt(concatenateMInt(extractMInt(MI619, 240, 256), extractMInt(MI619, 240, 256)), concatenateMInt(extractMInt(MI619, 240, 256), extractMInt(MI619, 240, 256))))) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 192, 224)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI619, 192, 224)) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _619), 248, 256)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI619, 248, 256)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _619), 240, 248)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(MI619, 240, 248)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), concatenateMInt(extractMInt(mi(256, _619), 240, 248), concatenateMInt(extractMInt(mi(256, _619), 216, 224), extractMInt(mi(256, _619), 240, 256))))   )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), concatenateMInt(extractMInt(MI619, 240, 248), concatenateMInt(extractMInt(MI619, 216, 224), extractMInt(MI619, 240, 256))))   )
[4m[1m[34mwriteKDefn vpbroadcastw_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastw_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpckhdq_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vpunpckhdq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhdq_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhdq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: punpckhdq %xmm3, %xmm2
%xmm3 -> 1
sse2 -> 1
%xmm2 -> 1

Circuit: vmovdqa %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpunpckhdq_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhdq_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhdq_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpckhdq_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpunpckhdq_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhdq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 128, 160), extractMInt(mi(256, _614), 128, 160)), concatenateMInt(extractMInt(mi(256, _615), 160, 192), extractMInt(mi(256, _614), 160, 192)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI615, 128, 160), extractMInt(MI614, 128, 160)), concatenateMInt(extractMInt(MI615, 160, 192), extractMInt(MI614, 160, 192)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 128, 160), extractMInt(mi(256, _614), 128, 160)), concatenateMInt(extractMInt(mi(256, _615), 160, 192), extractMInt(mi(256, _614), 160, 192)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI615, 128, 160), extractMInt(MI614, 128, 160)), concatenateMInt(extractMInt(MI615, 160, 192), extractMInt(MI614, 160, 192)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vpunpckhdq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpckhdq_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpckhpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vunpckhpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm2, %xmm0
%xmm2 -> 1
%ymm0 -> 1
avx -> 1
%xmm0 -> 1

Circuit: vmovdqu %xmm3, %xmm1
%xmm3 -> 1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1

Circuit: movhlps %xmm0, %xmm1
%xmm1 -> 1
sse -> 1
%xmm0 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM0 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vunpckhpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpckhpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vunpckhpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 192)), extractMInt(mi(256, _615), 128, 192)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 192)), extractMInt(MI615, 128, 192)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256))   )
[4m[1m[34mwriteKDefn vunpckhpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpckhpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpckhps_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vunpckhps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhps_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: unpckhps %xmm3, %xmm2
%xmm2 -> 1
%xmm3 -> 1
sse -> 1

Circuit: callq .move_256_128_ymm3_xmm10_xmm11
%ymm3 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: callq .move_256_128_ymm2_xmm12_xmm13
%xmm13 -> 1
%ymm2 -> 1
%xmm12 -> 1

Circuit: punpckhdq %xmm11, %xmm13
%xmm11 -> 1
sse2 -> 1
%xmm13 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm12 -> 1
%ymm1 -> 1
%xmm13 -> 1

Total Circuit
YMM13 -> 1
YMM10 -> 1
YMM2 -> 1
YMM12 -> 1
 -> 1
YMM11 -> 1
YMM3 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vunpckhps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpckhps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vunpckhps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 128, 160), extractMInt(mi(256, _618), 128, 160)), concatenateMInt(extractMInt(mi(256, _619), 160, 192), extractMInt(mi(256, _618), 160, 192)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI619, 128, 160), extractMInt(MI618, 128, 160)), concatenateMInt(extractMInt(MI619, 160, 192), extractMInt(MI618, 160, 192)))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _618), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 128, 160), extractMInt(mi(256, _618), 128, 160)), concatenateMInt(extractMInt(mi(256, _619), 160, 192), extractMInt(mi(256, _618), 160, 192)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI618, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI619, 128, 160), extractMInt(MI618, 128, 160)), concatenateMInt(extractMInt(MI619, 160, 192), extractMInt(MI618, 160, 192)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 0, 32), extractMInt(mi(256, _618), 0, 32)), concatenateMInt(extractMInt(mi(256, _619), 32, 64), extractMInt(mi(256, _618), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 128, 160), extractMInt(mi(256, _618), 128, 160)), concatenateMInt(extractMInt(mi(256, _619), 160, 192), extractMInt(mi(256, _618), 160, 192)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI619, 0, 32), extractMInt(MI618, 0, 32)), concatenateMInt(extractMInt(MI619, 32, 64), extractMInt(MI618, 32, 64))), concatenateMInt(concatenateMInt(extractMInt(MI619, 128, 160), extractMInt(MI618, 128, 160)), concatenateMInt(extractMInt(MI619, 160, 192), extractMInt(MI618, 160, 192)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 0, 32), extractMInt(mi(256, _618), 0, 32)), concatenateMInt(extractMInt(mi(256, _619), 32, 64), extractMInt(mi(256, _618), 32, 64)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI619, 0, 32), extractMInt(MI618, 0, 32)), concatenateMInt(extractMInt(MI619, 32, 64), extractMInt(MI618, 32, 64)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 0, 128)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 0, 128)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
[4m[1m[34mwriteKDefn vunpckhps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpckhps_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpcklpd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vunpcklpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklpd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpunpcklqdq %ymm3, %ymm2, %ymm1
%ymm1 -> 1
avx2 -> 1
%ymm3 -> 1
%ymm2 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vunpcklpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpcklpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vunpcklpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 64, 128), extractMInt(mi(256, _614), 64, 128)), concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI615, 64, 128), extractMInt(MI614, 64, 128)), concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vunpcklpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpcklpd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddb_rh_rh[0m
[4m[1m[34mcreatespec xaddb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %ah, %eax
%eax -> 1
%rax -> 1
%ah -> 1

Circuit: addb %bh, %ah
%af -> 1
%of -> 1
%sf -> 1
%ah -> 1
%bh -> 1
%cf -> 1
%zf -> 1
%pf -> 1

Circuit: xaddb %bh, %al
%of -> 1
%sf -> 1
%af -> 1
%zf -> 1
%cf -> 1
%pf -> 1
%bh -> 1
%al -> 1

Circuit: xchgb %ah, %al
%ah -> 1
%ax -> 1
%al -> 1

Total Circuit
SF -> 1
CF -> 1
ZF -> 1
RAX -> 1
RBX -> 1
AF -> 1
PF -> 1
OF -> 1

Target
ZF -> 1
CF -> 1
SF -> 1
OF -> 1
PF -> 1
AF -> 1
RBX -> 1
RAX -> 1

[4m[1m[34mkprove xaddb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput xaddb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddb_rh_rh: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 1, 2) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _629), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI629, 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _630)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI630) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _630), 48, 49), extractMInt(mi(64, _629), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _630), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI630, 48, 49), extractMInt(MI629, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI630, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 1, 9), extractMInt(mi(64, _629), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 1, 9), extractMInt(MI629, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 48), concatenateMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _630), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI630, 0, 48), concatenateMInt(extractMInt(MI629, 48, 56), extractMInt(MI630, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xaddb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

