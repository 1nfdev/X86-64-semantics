[4m[1m[34mCheck if supported: andb_r8_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_r8_r8.s[0m
[4m[1m[34mcreatespec andb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_r8_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andb_r8_r8[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_r8_r8.s[0m
Circuit: movsbq %bl, %r12
%bl -> 1
%r12 -> 1

Circuit: movsbl %cl, %ebx
%rbx -> 1
%ebx -> 1
%cl -> 1

Circuit: andl %r12d, %ebx
%of -> 1
%cf -> 1
%zf -> 1
%af -> 1
%sf -> 1
%ebx -> 1
%rbx -> 1
%pf -> 1
%r12d -> 1

Total Circuit
R12 -> 1
ZF -> 1
SF -> 1
RBX -> 1
OF -> 1
AF -> 1
RCX -> 1
PF -> 1
CF -> 1

Target
ZF -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1
CF -> 1
PF -> 1
RCX -> 1

[4m[1m[34mkprove andb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput andb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "R12" |-> (mi(64, svalueMInt(extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 56, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 56, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 56, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 56, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(extractMInt(mi(64, _617), 56, 64), orMInt(extractMInt(mi(64, _617), 56, 64), extractMInt(mi(64, _616), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI616, 56, 64), xorMInt(extractMInt(MI617, 56, 64), orMInt(extractMInt(MI617, 56, 64), extractMInt(MI616, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _617) )
echo Debug:  Result: "RCX" |-> (MI617 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 56), xorMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(extractMInt(mi(64, _617), 56, 64), orMInt(extractMInt(mi(64, _617), 56, 64), extractMInt(mi(64, _616), 56, 64))))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 56), xorMInt(extractMInt(MI616, 56, 64), xorMInt(extractMInt(MI617, 56, 64), orMInt(extractMInt(MI617, 56, 64), extractMInt(MI616, 56, 64))))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 56, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 56, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 56, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 56, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andb_r8_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: blsrl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/blsrl_r32_r32.s[0m
[4m[1m[34mcreatespec blsrl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_blsrl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/blsrl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mblsrl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: blsrl_r32_r32[0m
Undef Set
af -> 1
pf -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/blsrl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/blsrl_r32_r32.s[0m
Circuit: movl %ecx, %ebx
%ecx -> 1
%rbx -> 1
%ebx -> 1

Circuit: decq %rbx
%of -> 1
%rbx -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1

Circuit: andl %ecx, %ebx
%zf -> 1
%af -> 1
%sf -> 1
%ebx -> 1
%rbx -> 1
%pf -> 1
%of -> 1
%cf -> 1
%ecx -> 1

Circuit: blsmskl %ecx, %ecx
%ecx -> 1
%cf -> 1
%of -> 1
%rcx -> 1
%pf -> 1
%sf -> 1
%af -> 1
%zf -> 1
bmi1 -> 1

Circuit: callq .set_szp_for_ebx
%ebx -> 1
%zf -> 1
%sf -> 1
%pf -> 1

Total Circuit
 -> 1
PF -> 1
RCX -> 1
CF -> 1
RBX -> 1
SF -> 1
AF -> 1
OF -> 1
ZF -> 1

Target
CF -> 1
RCX -> 1
 -> 1
PF -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1

[4m[1m[34mkprove blsrl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_blsrl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_blsrl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput blsrl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput blsrl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mblsrl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _615), 32, 33), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 33), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 33), extractMInt(mi(64, _615), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI615, 32, 33), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 33), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 33), extractMInt(MI615, 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 56, 64), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 56, 64), extractMInt(mi(64, _615), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI615, 56, 64), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 56, 64), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 56, 64), extractMInt(MI615, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))) )
echo Debug:  Result: "RCX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _615), 32, 64), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64), extractMInt(mi(64, _615), 32, 64))))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI615, 32, 64), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64), extractMInt(MI615, 32, 64))))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _615), 32, 64), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64), extractMInt(mi(64, _615), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI615, 32, 64), xorMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64), orMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64), extractMInt(MI615, 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn blsrl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-blsrl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/blsrl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: btq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/btq_r64_r64.s[0m
[4m[1m[34mcreatespec btq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_btq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/btq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mbtq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: btq_r64_r64[0m
Undef Set
pf -> 1
sf -> 1
of -> 1
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/btq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/btq_r64_r64.s[0m
Circuit: sarq %cl, %rbx
%cf -> 1
%of -> 1
%pf -> 1
%af -> 1
%sf -> 1
%zf -> 1
%rbx -> 1
%cl -> 1

Circuit: sarq $0x1, %rbx
\$0x1 -> 1
%cf -> 1
%of -> 1
%pf -> 1
%zf -> 1
%sf -> 1
%af -> 1
%rbx -> 1

Total Circuit
CF -> 1
 -> 1
PF -> 1
RCX -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1

Target
CF -> 1
PF -> 1
RCX -> 1
AF -> 1
OF -> 1
SF -> 1
RBX -> 1

[4m[1m[34mkprove btq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_btq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_btq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput btq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput btq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mbtq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, _613))), uvalueMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)))), 63, 64) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _613), 0, 1), mi(1, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(MI613)), uvalueMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)))), 63, 64) ) #else ( (#ifMInt (eqMInt(extractMInt(MI613, 0, 1), mi(1, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(mi(64, _613))), uvalueMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _613), 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(MI613)), uvalueMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(MI613, 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(mi(64, _613))), uvalueMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _613), 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(MI613)), uvalueMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(MI613, 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _614) )
echo Debug:  Result: "RCX" |-> (MI614 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(mi(64, _613))), uvalueMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _613), 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1) )
echo Debug:  Result: "RBX" |-> (ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(MI613)), uvalueMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(MI613, 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(mi(64, _613))), uvalueMInt(andMInt(extractMInt(mi(64, _614), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _613), 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt((#ifMInt (ultMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(MI613)), uvalueMInt(andMInt(extractMInt(MI614, 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(MI613, 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi) )), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn btq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-btq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/btq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovael_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovael_r32_r32.s[0m
[4m[1m[34mcreatespec cmovael_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovael_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovael_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovael_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovael_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovael_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovael_r32_r32.s[0m
Circuit: cmovbl %ebx, %ecx
cmov -> 1
%ebx -> 1
%rcx -> 1
%cf -> 1
%ecx -> 1

Circuit: xchgl %ebx, %ecx
%ecx -> 1
%ebx -> 1
%rbx -> 1
%rcx -> 1

Circuit: orq %rbx, %rbx
%rbx -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%of -> 1
%cf -> 1

Total Circuit
CF -> 1
RCX -> 1
PF -> 1
 -> 1
AF -> 1
OF -> 1
SF -> 1
RBX -> 1
ZF -> 1

Target
RCX -> 1
 -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove cmovael_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovael_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovael_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovael_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovael_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovael_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovael_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _605)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( extractMInt(mi(64, _607), 56, 64) ) #else ( extractMInt(mi(64, _606), 56, 64) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI605), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( extractMInt(MI607, 56, 64) ) #else ( extractMInt(MI606, 56, 64) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _605)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _607), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI605), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI607, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _605)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( eqMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _607), 32, 64)), mi(64, 0)) ) #else ( eqMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)), mi(64, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI605), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( eqMInt(concatenateMInt(mi(32, 0), extractMInt(MI607, 32, 64)), mi(64, 0)) ) #else ( eqMInt(concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)), mi(64, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovael_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovael_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovael_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovaq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovaq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovaq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaq_r64_r64.s[0m
Circuit: cmovnbeq %rcx, %rbx
cmov -> 1
%rbx -> 1
%zf -> 1
%rcx -> 1
%cf -> 1

Total Circuit
ZF -> 1
RBX -> 1
 -> 1
RCX -> 1
CF -> 1

Target
RCX -> 1
 -> 1
CF -> 1
RBX -> 1
ZF -> 1

[4m[1m[34mkprove cmovaq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovaq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovaq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovaq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt ((#ifBool (eqMInt(mi(1, _605), mi(1, 0)) ) #then ( (#ifBool (eqMInt(mi(1, _605), mi(1, 0)) ) #then ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _602)))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _602)))))), mi(8, 0)) ) #else ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _602)))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _605)))))), mi(8, 0)) ) #fi) ) #else ( (#ifBool (eqMInt(mi(1, _605), mi(1, 0)) ) #then ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _605)))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _602)))))), mi(8, 0)) ) #else ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _605)))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _605)))))), mi(8, 0)) ) #fi)  ) #fi) ) #then ( mi(64, _604) ) #else ( mi(64, _603) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt ((#ifBool (eqMInt(MI605, mi(1, 0)) ) #then ( (#ifBool (eqMInt(MI605, mi(1, 0)) ) #then ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI602))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI602))))), mi(8, 0)) ) #else ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI602))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI605))))), mi(8, 0)) ) #fi) ) #else ( (#ifBool (eqMInt(MI605, mi(1, 0)) ) #then ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI605))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI602))))), mi(8, 0)) ) #else ( eqMInt(addMInt(mi(8, 0), addMInt(addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI605))), addMInt(mi(8, 0), addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI605))))), mi(8, 0)) ) #fi)  ) #fi) ) #then ( MI604 ) #else ( MI603 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _602) )
echo Debug:  Result: "CF" |-> (MI602 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _605) )
echo Debug:  Result: "ZF" |-> (MI605 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604)   )
echo Debug:  Result: "RCX" |-> (MI604   )
[4m[1m[34mwriteKDefn cmovaq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovaq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovbw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovbw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovbw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbw_r16_r16.s[0m
Circuit: movswq %cx, %rsp
%rsp -> 1
%cx -> 1

Circuit: cmovbl %esp, %ebx
%esp -> 1
cmov -> 1
%cf -> 1
%ebx -> 1
%rbx -> 1

Total Circuit
RSP -> 1
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
RBX -> 1
CF -> 1
 -> 1
RCX -> 1

[4m[1m[34mkprove cmovbw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovbw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovbw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovbw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _602)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( mi(64, _603) ) #else ( concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI602), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( MI603 ) #else ( concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _602) )
echo Debug:  Result: "CF" |-> (MI602 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "RSP" |-> (mi(64, svalueMInt(extractMInt(mi(64, _604), 48, 64))) )
echo Debug:  Result: "RSP" |-> (mi(64, svalueMInt(extractMInt(MI604, 48, 64))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603)   )
[4m[1m[34mwriteKDefn cmovbw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovbw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovcl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovcl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovcl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovcl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcl_r32_r32.s[0m
Circuit: cmovbl %ecx, %ebx
cmov -> 1
%rbx -> 1
%ebx -> 1
%cf -> 1
%ecx -> 1

Total Circuit
CF -> 1
 -> 1
RCX -> 1
RBX -> 1

Target
RBX -> 1
RCX -> 1
 -> 1
CF -> 1

[4m[1m[34mkprove cmovcl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovcl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovcl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovcl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovcl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _600)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _601), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI600), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI601, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _600) )
echo Debug:  Result: "CF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovcl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovcl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovll_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovll_r32_r32.s[0m
[4m[1m[34mcreatespec cmovll_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovll_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovll_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovll_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovll_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovll_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovll_r32_r32.s[0m
Circuit: vpxor %xmm2, %xmm2, %xmm1
%ymm1 -> 1
%xmm2 -> 1
avx -> 1
%xmm1 -> 1

Circuit: callq .move_byte_25_of_ymm1_to_r8b
%r8b -> 1
%ymm1 -> 1

Circuit: setnl %r14b
%r14b -> 1
%of -> 1
%sf -> 1

Circuit: xaddb %r14b, %r8b
%af -> 1
%sf -> 1
%zf -> 1
%pf -> 1
%r14b -> 1
%r8b -> 1
%cf -> 1
%of -> 1

Circuit: cmovel %ecx, %ebx
%zf -> 1
%rbx -> 1
%ebx -> 1
%ecx -> 1
cmov -> 1

Total Circuit
ZF -> 1
YMM1 -> 1
R8 -> 1
R14 -> 1
CF -> 1
 -> 1
PF -> 1
RCX -> 1
AF -> 1
OF -> 1
SF -> 1
RBX -> 1
YMM2 -> 1

Target
 -> 1
RCX -> 1
OF -> 1
RBX -> 1
SF -> 1

[4m[1m[34mkprove cmovll_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovll_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovll_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovll_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovll_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovll_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovll_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1)))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1)))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0))) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _612) )
echo Debug:  Result: "RCX" |-> (MI612 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _612), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _611), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI612, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI611, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, 0) )
echo Debug:  Result: "YMM1" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0)), 0, 1) )
echo Debug:  PreResult: "R14" |-> (mi(64, 0) )
echo Debug:  Result: "R14" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _613)), concatenateMInt(mi(7, 0), mi(1, _610))), mi(8, 1))), mi(8, 0)), 0, 1)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(addMInt(mi(8, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI613), concatenateMInt(mi(7, 0), MI610)), mi(8, 1))), mi(8, 0)), 0, 1)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn cmovll_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovll_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovll_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnaeq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaeq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovnaeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaeq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnaeq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaeq_r64_r64.s[0m
Circuit: cmovbq %rcx, %rbx
%cf -> 1
%rcx -> 1
%rbx -> 1
cmov -> 1

Total Circuit
 -> 1
RCX -> 1
CF -> 1
RBX -> 1

Target
RBX -> 1
CF -> 1
 -> 1
RCX -> 1

[4m[1m[34mkprove cmovnaeq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaeq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaeq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnaeq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovnaeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnaeq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, _601) )
echo Debug:  Result: "RBX" |-> (MI601 )
echo Debug:  PreResult: "CF" |-> (mi(1, _600) )
echo Debug:  Result: "CF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovnaeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnaeq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnaew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnaew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnaew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaew_r16_r16.s[0m
Circuit: movzwq %cx, %rcx
%cx -> 1
%rcx -> 1

Circuit: cmovbl %ecx, %ebx
cmov -> 1
%ecx -> 1
%cf -> 1
%rbx -> 1
%ebx -> 1

Total Circuit
RBX -> 1
CF -> 1
RCX -> 1
 -> 1

Target
RBX -> 1
RCX -> 1
 -> 1
CF -> 1

[4m[1m[34mkprove cmovnaew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnaew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnaew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnaew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _601)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( mi(64, _602) ) #else ( concatenateMInt(extractMInt(mi(64, _602), 0, 48), extractMInt(mi(64, _603), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI601), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( MI602 ) #else ( concatenateMInt(extractMInt(MI602, 0, 48), extractMInt(MI603, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _601) )
echo Debug:  Result: "CF" |-> (MI601 )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _603), 48, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI603, 48, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _602))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI602)   )
[4m[1m[34mwriteKDefn cmovnaew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnaew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnal_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnal_r32_r32.s[0m
[4m[1m[34mcreatespec cmovnal_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnal_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnal_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnal_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnal_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnal_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnal_r32_r32.s[0m
Circuit: xchgl %ebx, %ecx
%ecx -> 1
%rcx -> 1
%rbx -> 1
%ebx -> 1

Circuit: cmovnbel %ecx, %ebx
cmov -> 1
%ecx -> 1
%cf -> 1
%rbx -> 1
%ebx -> 1
%zf -> 1

Total Circuit
ZF -> 1
RCX -> 1
 -> 1
CF -> 1
RBX -> 1

Target
CF -> 1
 -> 1
RCX -> 1
RBX -> 1
ZF -> 1

[4m[1m[34mkprove cmovnal_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnal_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnal_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnal_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnal_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnal_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnal_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _602))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _605), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _603), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI602)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI605, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI603, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _602) )
echo Debug:  Result: "CF" |-> (MI602 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _605) )
echo Debug:  Result: "ZF" |-> (MI605 )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _603), 32, 64))   )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI603, 32, 64))   )
[4m[1m[34mwriteKDefn cmovnal_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnal_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnal_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovngel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngel_r32_r32.s[0m
[4m[1m[34mcreatespec cmovngel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngel_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovngel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngel_r32_r32.s[0m
Circuit: movslq %ecx, %r8
%r8 -> 1
%ecx -> 1

Circuit: setl %cl
%sf -> 1
%of -> 1
%cl -> 1

Circuit: callq .write_cl_to_zf
%cl -> 1
%zf -> 1

Circuit: cmovel %r8d, %ebx
cmov -> 1
%r8d -> 1
%rbx -> 1
%ebx -> 1
%zf -> 1

Total Circuit
ZF -> 1
 -> 1
RCX -> 1
R8 -> 1
OF -> 1
RBX -> 1
SF -> 1

Target
 -> 1
RCX -> 1
OF -> 1
SF -> 1
RBX -> 1

[4m[1m[34mkprove cmovngel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovngel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovngel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovngel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "R8" |-> (mi(64, svalueMInt(extractMInt(mi(64, _606), 32, 64))) )
echo Debug:  Result: "R8" |-> (mi(64, svalueMInt(extractMInt(MI606, 32, 64))) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _606), 0, 56), xorMInt(concatenateMInt(mi(7, 0), mi(1, _607)), concatenateMInt(mi(7, 0), mi(1, _604)))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI606, 0, 56), xorMInt(concatenateMInt(mi(7, 0), MI607), concatenateMInt(mi(7, 0), MI604))) )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _607), mi(1, _604)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI607, MI604), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (xorMInt(mi(1, _607), mi(1, _604))   )
echo Debug:  Result: "ZF" |-> (xorMInt(MI607, MI604)   )
[4m[1m[34mwriteKDefn cmovngel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovngel_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnsw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnsw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnsw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnsw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnsw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnsw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnsw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnsw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnsw_r16_r16.s[0m
Circuit: movzwq %cx, %rsi
%cx -> 1
%rsi -> 1

Circuit: cmovnsl %esi, %ebx
%sf -> 1
%ebx -> 1
%rbx -> 1
cmov -> 1
%esi -> 1

Circuit: xorq %r11, %r11
%r11 -> 1
%of -> 1
%cf -> 1
%af -> 1
%sf -> 1
%zf -> 1
%pf -> 1

Circuit: cmovnbel %esi, %ebx
%zf -> 1
%ebx -> 1
%rbx -> 1
%cf -> 1
%esi -> 1
cmov -> 1

Total Circuit
ZF -> 1
RSI -> 1
R11 -> 1
CF -> 1
PF -> 1
RCX -> 1
 -> 1
OF -> 1
AF -> 1
RBX -> 1
SF -> 1

Target
 -> 1
RCX -> 1
RBX -> 1
SF -> 1

[4m[1m[34mkprove cmovnsw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnsw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnsw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnsw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnsw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnsw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnsw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R11" |-> (mi(64, 0) )
echo Debug:  Result: "R11" |-> (mi(64, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (mi(64, _609) )
echo Debug:  Result: "RCX" |-> (MI609 )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _608)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI608) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _610), mi(1, 1)) ) #then ( mi(64, _608) ) #else ( concatenateMInt(extractMInt(mi(64, _608), 0, 48), extractMInt(mi(64, _609), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI610, mi(1, 1)) ) #then ( MI608 ) #else ( concatenateMInt(extractMInt(MI608, 0, 48), extractMInt(MI609, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _609), 48, 64)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(48, 0), extractMInt(MI609, 48, 64)) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1)   )
echo Debug:  Result: "ZF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn cmovnsw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnsw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnsw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovpew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovpew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpew_r16_r16.s[0m
Circuit: setp %ah
%ah -> 1
%pf -> 1

Circuit: decb %ah
%of -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%ah -> 1

Circuit: cmovzw %cx, %bx
%cx -> 1
%zf -> 1
%bx -> 1
cmov -> 1

Total Circuit
RCX -> 1
 -> 1
PF -> 1
RAX -> 1
SF -> 1
RBX -> 1
AF -> 1
OF -> 1
ZF -> 1

Target
RBX -> 1
 -> 1
RCX -> 1
PF -> 1

[4m[1m[34mkprove cmovpew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovpew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _608) )
echo Debug:  Result: "RCX" |-> (MI608 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _607)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI607) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), 0, 1), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), 0, 1), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), mi(8, 0))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _607), 0, 48), extractMInt(mi(64, _608), 48, 64)) ) #else ( mi(64, _607) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(MI607, 0, 48), extractMInt(MI608, 48, 64)) ) #else ( MI607 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), addMInt(addMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)), mi(8, 0))), mi(8, 0)), mi(8, 255)), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovpew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovpl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovpl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpl_r32_r32.s[0m
Circuit: cmovpel %ecx, %ebx
cmov -> 1
%pf -> 1
%rbx -> 1
%ebx -> 1
%ecx -> 1

Total Circuit
RBX -> 1
RCX -> 1
 -> 1
PF -> 1

Target
RBX -> 1
RCX -> 1
PF -> 1
 -> 1

[4m[1m[34mkprove cmovpl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovpl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(15, 0), mi(1, _600)), mi(16, 0)), mi(16, 0))), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _601), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(15, 0), MI600), mi(16, 0)), mi(16, 0))), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI601, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "PF" |-> (mi(1, _600) )
echo Debug:  Result: "PF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovpl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpow_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpow_r16_r16.s[0m
[4m[1m[34mcreatespec cmovpow_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpow_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpow_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovpow_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpow_r16_r16.s[0m
Circuit: cmovnpw %cx, %bx
cmov -> 1
%pf -> 1
%bx -> 1
%cx -> 1

Total Circuit
PF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
RBX -> 1
PF -> 1
RCX -> 1
 -> 1

[4m[1m[34mkprove cmovpow_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpow_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpow_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpow_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovpow_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpow_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpow_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(15, 0), mi(1, _601)), mi(16, 0)), mi(16, 0))), mi(64, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _602), 0, 48), extractMInt(mi(64, _603), 48, 64)) ) #else ( mi(64, _602) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(15, 0), MI601), mi(16, 0)), mi(16, 0))), mi(64, 0)) ) #then ( concatenateMInt(extractMInt(MI602, 0, 48), extractMInt(MI603, 48, 64)) ) #else ( MI602 ) #fi)  )
echo Debug:  PreResult: "PF" |-> (mi(1, _601) )
echo Debug:  Result: "PF" |-> (MI601 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _603) )
echo Debug:  Result: "RCX" |-> (MI603 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _602))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI602)   )
[4m[1m[34mwriteKDefn cmovpow_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpow_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovpq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovpq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpq_r64_r64.s[0m
Circuit: cmovpeq %rcx, %rbx
cmov -> 1
%rcx -> 1
%pf -> 1
%rbx -> 1

Total Circuit
PF -> 1
 -> 1
RCX -> 1
RBX -> 1

Target
RBX -> 1
PF -> 1
 -> 1
RCX -> 1

[4m[1m[34mkprove cmovpq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovpq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, _601) )
echo Debug:  Result: "RBX" |-> (MI601 )
echo Debug:  PreResult: "PF" |-> (mi(1, _600) )
echo Debug:  Result: "PF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovpq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovzl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovzl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovzl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovzl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzl_r32_r32.s[0m
Circuit: movl %ecx, %esi
%rsi -> 1
%esi -> 1
%ecx -> 1

Circuit: cmovel %esi, %ebx
%rbx -> 1
%ebx -> 1
%zf -> 1
cmov -> 1
%esi -> 1

Total Circuit
ZF -> 1
RSI -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
ZF -> 1
RBX -> 1
RCX -> 1
 -> 1

[4m[1m[34mkprove cmovzl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovzl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovzl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovzl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovzl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _603), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _601), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI603, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI601, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) )
echo Debug:  PreResult: "ZF" |-> (mi(1, _603) )
echo Debug:  Result: "ZF" |-> (MI603 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovzl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovzl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtsi2sdl_xmm_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtsi2sdl_xmm_r32.s[0m
[4m[1m[34mcreatespec cvtsi2sdl_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtsi2sdl_xmm_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtsi2sdl_xmm_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtsi2sdl_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtsi2sdl_xmm_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtsi2sdl_xmm_r32.s[0m
Circuit: vcvtsi2sdl %ebx, %xmm1, %xmm12
%xmm1 -> 1
%ymm12 -> 1
avx -> 1
%xmm12 -> 1
%mxcsr::rc[0] -> 1
%ebx -> 1

Circuit: movsd %xmm12, %xmm1
%xmm12 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM12 -> 1
RBX -> 1
 -> 1
YMM1 -> 1

Target
RBX -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove cvtsi2sdl_xmm_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtsi2sdl_xmm_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtsi2sdl_xmm_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cvtsi2sdl_xmm_r32[0m
[4m[1m[34msanitizeSpecOutput cvtsi2sdl_xmm_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtsi2sdl_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _601), 128, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _600), 32, 64)), 53, 11), 64))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI601, 128, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(MI600, 32, 64)), 53, 11), 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _601), 0, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _600), 32, 64)), 53, 11), 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI601, 0, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(MI600, 32, 64)), 53, 11), 64)) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _600) )
echo Debug:  Result: "RBX" |-> (MI600 )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _601)   )
echo Debug:  Result: "SPAD1" |-> (MI601   )
[4m[1m[34mwriteKDefn cvtsi2sdl_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtsi2sdl_xmm_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtsi2sdl_xmm_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movmskpd_r32_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskpd_r32_xmm.s[0m
[4m[1m[34mcreatespec movmskpd_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskpd_r32_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskpd_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovmskpd_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskpd_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskpd_r32_xmm.s[0m
Circuit: movmskpd %xmm1, %r8
%xmm1 -> 1
%r8 -> 1
sse2 -> 1

Circuit: movslq %r8d, %rbx
%r8d -> 1
%rbx -> 1

Total Circuit
RBX -> 1
R8 -> 1
YMM1 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
RBX -> 1

[4m[1m[34mkprove movmskpd_r32_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskpd_r32_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskpd_r32_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movmskpd_r32_xmm[0m
[4m[1m[34msanitizeSpecOutput movmskpd_r32_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovmskpd_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(mi(256, _600), 128, 129), extractMInt(mi(256, _600), 192, 193))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(MI600, 128, 129), extractMInt(MI600, 192, 193))) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _600) )
echo Debug:  Result: "YMM1" |-> (MI600 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(mi(256, _600), 128, 129), extractMInt(mi(256, _600), 192, 193)))   )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(MI600, 128, 129), extractMInt(MI600, 192, 193)))   )
[4m[1m[34mwriteKDefn movmskpd_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movmskpd_r32_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskpd_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: negl_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/negl_r32.s[0m
[4m[1m[34mcreatespec negl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negl_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/negl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/negl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/negl_r32.s[0m
Circuit: notl %ebx
%rbx -> 1
%ebx -> 1

Circuit: xorl %eax, %eax
%eax -> 1
%pf -> 1
%rax -> 1
%zf -> 1
%af -> 1
%sf -> 1
%of -> 1
%cf -> 1

Circuit: setnb %al
%al -> 1
%cf -> 1

Circuit: addl %eax, %ebx
%zf -> 1
%af -> 1
%sf -> 1
%rbx -> 1
%ebx -> 1
%pf -> 1
%cf -> 1
%of -> 1
%eax -> 1

Circuit: cmc
%cf -> 1

Total Circuit
ZF -> 1
RAX -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1
CF -> 1
PF -> 1

Target
PF -> 1
CF -> 1
SF -> 1
RBX -> 1
OF -> 1
AF -> 1
ZF -> 1

[4m[1m[34mkprove negl_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negl_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negl_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput negl_r32[0m
[4m[1m[34msanitizeSpecOutput negl_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64))), mi(33, 1)), mi(33, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64))), mi(33, 1)), mi(33, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI613, 32, 64))), mi(33, 1)), mi(33, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI613, 32, 64))), mi(33, 1)), mi(33, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), mi(32, 0)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), mi(32, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), mi(32, 0))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), mi(32, 0))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), mi(32, 0)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), mi(32, 0)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _613), 32, 33)), mi(1, 0))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _613), 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), mi(32, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI613, 32, 33)), mi(1, 0))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI613, 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), mi(32, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 1) )
echo Debug:  Result: "RAX" |-> (mi(64, 1) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), mi(32, 0))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), mi(32, 0))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _613), 32, 64)), mi(32, 1)), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI613, 32, 64)), mi(32, 1)), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn negl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-negl_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/negl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: paddd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/paddd_xmm_xmm.s[0m
[4m[1m[34mcreatespec paddd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_paddd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/paddd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpaddd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/paddd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/paddd_xmm_xmm.s[0m
Circuit: vunpckhps %xmm1, %xmm2, %xmm10
%xmm1 -> 1
avx -> 1
%ymm10 -> 1
%xmm2 -> 1
%xmm10 -> 1

Circuit: unpcklps %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
sse -> 1

Circuit: phaddd %xmm10, %xmm1
%xmm1 -> 1
ssse3 -> 1
%xmm10 -> 1

Total Circuit
YMM10 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove paddd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_paddd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_paddd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput paddd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput paddd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpaddd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _601) )
echo Debug:  Result: "YMM2" |-> (MI601 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _600), 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _600), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _601), 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _600), 160, 192), extractMInt(mi(256, _601), 160, 192)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _600), 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _601), 192, 224), extractMInt(mi(256, _601), 192, 224)), concatenateMInt(extractMInt(mi(256, _601), 192, 224), extractMInt(mi(256, _600), 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _601), 224, 256), extractMInt(mi(256, _601), 224, 256)), concatenateMInt(extractMInt(mi(256, _601), 224, 256), extractMInt(mi(256, _600), 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI600, 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI600, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI601, 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI600, 160, 192), extractMInt(MI601, 160, 192)), concatenateMInt(mi(32, 0), extractMInt(MI600, 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI601, 192, 224), extractMInt(MI601, 192, 224)), concatenateMInt(extractMInt(MI601, 192, 224), extractMInt(MI600, 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI601, 224, 256), extractMInt(MI601, 224, 256)), concatenateMInt(extractMInt(MI601, 224, 256), extractMInt(MI600, 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _600), 128, 160), extractMInt(mi(256, _601), 128, 160)), concatenateMInt(extractMInt(mi(256, _600), 160, 192), extractMInt(mi(256, _601), 160, 192)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI600, 128, 160), extractMInt(MI601, 128, 160)), concatenateMInt(extractMInt(MI600, 160, 192), extractMInt(MI601, 160, 192)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _600)   )
echo Debug:  Result: "SPAD1" |-> (MI600   )
[4m[1m[34mwriteKDefn paddd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-paddd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/paddd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: punpckldq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/punpckldq_xmm_xmm.s[0m
[4m[1m[34mcreatespec punpckldq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckldq_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/punpckldq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpckldq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/punpckldq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/punpckldq_xmm_xmm.s[0m
Circuit: unpcklps %xmm2, %xmm1
sse -> 1
%xmm2 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove punpckldq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckldq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckldq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput punpckldq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput punpckldq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpckldq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _600) )
echo Debug:  Result: "YMM2" |-> (MI600 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _599), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _600), 192, 224), extractMInt(mi(256, _599), 192, 224)), concatenateMInt(extractMInt(mi(256, _600), 224, 256), extractMInt(mi(256, _599), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI599, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI600, 192, 224), extractMInt(MI599, 192, 224)), concatenateMInt(extractMInt(MI600, 224, 256), extractMInt(MI599, 224, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _599)   )
echo Debug:  Result: "SPAD1" |-> (MI599   )
[4m[1m[34mwriteKDefn punpckldq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-punpckldq_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/punpckldq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sarb_r8_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_r8_one.s[0m
[4m[1m[34mcreatespec sarb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarb_r8_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_r8_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: sarb_r8_one[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_r8_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_r8_one.s[0m
Circuit: movsbq %bl, %r8
%r8 -> 1
%bl -> 1

Circuit: sarq $0x1, %r8
%r8 -> 1
\$0x1 -> 1
%of -> 1
%cf -> 1
%pf -> 1
%zf -> 1
%af -> 1
%sf -> 1

Circuit: movq %r8, %rbx
%rbx -> 1
%r8 -> 1

Total Circuit
ZF -> 1
R8 -> 1
 -> 1
PF -> 1
CF -> 1
SF -> 1
RBX -> 1
AF -> 1
OF -> 1

Target
CF -> 1
 -> 1
PF -> 1
OF -> 1
AF -> 1
SF -> 1
RBX -> 1
ZF -> 1

[4m[1m[34mkprove sarb_r8_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarb_r8_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarb_r8_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sarb_r8_one[0m
[4m[1m[34msanitizeSpecOutput sarb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(mi(64, _614), 63, 64) )
echo Debug:  Result: "CF" |-> (extractMInt(MI614, 63, 64) )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))))), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))))), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))))), 1) )
echo Debug:  Result: "R8" |-> (ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))))), 1) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))))), 1), 56, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI614, 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))))), 1), 56, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sarb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sarb_r8_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_r8_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sarl_r32_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarl_r32_one.s[0m
[4m[1m[34mcreatespec sarl_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarl_r32_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarl_r32_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarl_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: sarl_r32_one[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarl_r32_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarl_r32_one.s[0m
Circuit: movslq %ebx, %rbx
%rbx -> 1
%ebx -> 1

Circuit: sarq $0x1, %rbx
%of -> 1
%cf -> 1
%pf -> 1
%rbx -> 1
%zf -> 1
%af -> 1
%sf -> 1
\$0x1 -> 1

Circuit: movl %ebx, %ebx
%ebx -> 1
%rbx -> 1

Total Circuit
CF -> 1
 -> 1
PF -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1

Target
PF -> 1
 -> 1
CF -> 1
SF -> 1
RBX -> 1
AF -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove sarl_r32_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarl_r32_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarl_r32_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sarl_r32_one[0m
[4m[1m[34msanitizeSpecOutput sarl_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarl_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(mi(64, _612), 63, 64) )
echo Debug:  Result: "CF" |-> (extractMInt(MI612, 63, 64) )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _612), 32, 64))))), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI612, 32, 64))))), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _612), 32, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI612, 32, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _612), 32, 64))))), 1), 32, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI612, 32, 64))))), 1), 32, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _612), 32, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI612, 32, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sarl_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sarl_r32_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarl_r32_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sarw_r16_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarw_r16_one.s[0m
[4m[1m[34mcreatespec sarw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarw_r16_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: sarw_r16_one[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarw_r16_one.s[0m
Circuit: movswq %bx, %r12
%r12 -> 1
%bx -> 1

Circuit: sarq $0x1, %r12
\$0x1 -> 1
%cf -> 1
%of -> 1
%r12 -> 1
%af -> 1
%sf -> 1
%zf -> 1
%pf -> 1

Circuit: xchgw %r12w, %bx
%r12w -> 1
%bx -> 1

Total Circuit
OF -> 1
AF -> 1
SF -> 1
RBX -> 1
CF -> 1
 -> 1
PF -> 1
R12 -> 1
ZF -> 1

Target
OF -> 1
AF -> 1
SF -> 1
RBX -> 1
CF -> 1
 -> 1
PF -> 1
ZF -> 1

[4m[1m[34mkprove sarw_r16_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarw_r16_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarw_r16_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sarw_r16_one[0m
[4m[1m[34msanitizeSpecOutput sarw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 64))))), 1), 0, 48), extractMInt(mi(64, _614), 48, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 64))))), 1), 0, 48), extractMInt(MI614, 48, 64)) )
echo Debug:  PreResult: "CF" |-> (extractMInt(mi(64, _614), 63, 64) )
echo Debug:  Result: "CF" |-> (extractMInt(MI614, 63, 64) )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 64))))), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 64))))), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 64))))), 1), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 64))))), 1), 48, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sarw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sarw_r16_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbb_rh_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_r8.s[0m
[4m[1m[34mcreatespec sbbb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_rh_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_r8.s[0m
Circuit: cmc
%cf -> 1

Circuit: notb %bl
%bl -> 1

Circuit: adcb %bl, %ah
%af -> 1
%sf -> 1
%zf -> 1
%pf -> 1
%of -> 1
%cf -> 1
%bl -> 1
%ah -> 1

Circuit: cmc
%cf -> 1

Total Circuit
ZF -> 1
PF -> 1
CF -> 1
RAX -> 1
RBX -> 1
SF -> 1
AF -> 1
OF -> 1

Target
RAX -> 1
RBX -> 1
SF -> 1
OF -> 1
AF -> 1
PF -> 1
CF -> 1
ZF -> 1

[4m[1m[34mkprove sbbb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput sbbb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _615), 48, 49), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _615), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI615, 48, 49), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI615, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), extractMInt(mi(64, _615), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), extractMInt(MI615, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbb_rh_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_rh.s[0m
[4m[1m[34mcreatespec sbbb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_rh_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_rh.s[0m
Circuit: cmc
%cf -> 1

Circuit: notb %bh
%bh -> 1

Circuit: adcb %bh, %ah
%ah -> 1
%of -> 1
%cf -> 1
%pf -> 1
%zf -> 1
%sf -> 1
%af -> 1
%bh -> 1

Circuit: cmc
%cf -> 1

Total Circuit
CF -> 1
PF -> 1
OF -> 1
AF -> 1
SF -> 1
RBX -> 1
RAX -> 1
ZF -> 1

Target
PF -> 1
CF -> 1
RBX -> 1
SF -> 1
OF -> 1
AF -> 1
RAX -> 1
ZF -> 1

[4m[1m[34mkprove sbbb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput sbbb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _615), 48, 49), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _615), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI615, 48, 49), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI615, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), extractMInt(mi(64, _615), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), extractMInt(MI615, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), concatenateMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), concatenateMInt(addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbb_rh_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbl_r32_r32.s[0m
[4m[1m[34mcreatespec sbbl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbl_r32_r32.s[0m
Circuit: notl %ecx
%rcx -> 1
%ecx -> 1

Circuit: cmc
%cf -> 1

Circuit: adcl %ecx, %ebx
%cf -> 1
%of -> 1
%ecx -> 1
%af -> 1
%zf -> 1
%sf -> 1
%rbx -> 1
%ebx -> 1
%pf -> 1

Circuit: callq .set_szp_for_ebx
%zf -> 1
%sf -> 1
%ebx -> 1
%pf -> 1

Circuit: cmc
%cf -> 1

Total Circuit
OF -> 1
AF -> 1
RBX -> 1
SF -> 1
CF -> 1
RCX -> 1
PF -> 1
ZF -> 1

Target
ZF -> 1
CF -> 1
RCX -> 1
PF -> 1
OF -> 1
AF -> 1
SF -> 1
RBX -> 1

[4m[1m[34mkprove sbbl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput sbbl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI615, 32, 64))), concatenateMInt(mi(1, 0), extractMInt(MI614, 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI615, 32, 64))), concatenateMInt(mi(1, 0), extractMInt(MI614, 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))) )
echo Debug:  Result: "RCX" |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 32, 33)), extractMInt(mi(64, _614), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 32, 33)), extractMInt(MI614, 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), concatenateMInt(mi(31, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbq_r64_r64.s[0m
[4m[1m[34mcreatespec sbbq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbq_r64_r64.s[0m
Circuit: notq %rcx
%rcx -> 1

Circuit: cmc
%cf -> 1

Circuit: adcq %rcx, %rbx
%cf -> 1
%of -> 1
%rcx -> 1
%pf -> 1
%rbx -> 1
%sf -> 1
%af -> 1
%zf -> 1

Circuit: cmc
%cf -> 1

Total Circuit
ZF -> 1
CF -> 1
PF -> 1
RCX -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1

Target
ZF -> 1
AF -> 1
OF -> 1
SF -> 1
RBX -> 1
CF -> 1
PF -> 1
RCX -> 1

[4m[1m[34mkprove sbbq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput sbbq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _615))), concatenateMInt(mi(1, 0), mi(64, _614))), concatenateMInt(mi(64, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _615))), concatenateMInt(mi(1, 0), mi(64, _614))), concatenateMInt(mi(64, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI615)), concatenateMInt(mi(1, 0), MI614)), concatenateMInt(mi(64, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI615)), concatenateMInt(mi(1, 0), MI614)), concatenateMInt(mi(64, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (xorMInt(mi(64, 18446744073709551615), mi(64, _615)) )
echo Debug:  Result: "RCX" |-> (xorMInt(mi(64, 18446744073709551615), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 0, 1)), extractMInt(mi(64, _614), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 0, 1)), extractMInt(MI614, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))) )
echo Debug:  Result: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _611))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI611)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbw_r16_r16.s[0m
[4m[1m[34mcreatespec sbbw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbw_r16_r16.s[0m
Circuit: cmc
%cf -> 1

Circuit: notw %cx
%cx -> 1

Circuit: adcw %bx, %cx
%cx -> 1
%af -> 1
%bx -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%of -> 1
%cf -> 1

Circuit: cmc
%cf -> 1

Circuit: movswq %cx, %rbx
%rbx -> 1
%cx -> 1

Total Circuit
ZF -> 1
CF -> 1
PF -> 1
RCX -> 1
AF -> 1
OF -> 1
RBX -> 1
SF -> 1

Target
ZF -> 1
SF -> 1
RBX -> 1
OF -> 1
AF -> 1
RCX -> 1
PF -> 1
CF -> 1

[4m[1m[34mkprove sbbw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput sbbw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _615), 48, 49), xorMInt(mi(1, 1), extractMInt(mi(64, _616), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _615), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI615, 48, 49), xorMInt(mi(1, 1), extractMInt(MI616, 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(MI615, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _616), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI615, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI616, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setg_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_r8.s[0m
[4m[1m[34mcreatespec setg_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setg_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetg_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_r8.s[0m
Circuit: setnle %bl
%of -> 1
%sf -> 1
%zf -> 1
%bl -> 1

Total Circuit
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1

Target
ZF -> 1
SF -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove setg_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setg_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setg_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setg_r8[0m
[4m[1m[34msanitizeSpecOutput setg_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetg_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, _604) )
echo Debug:  Result: "RBX" |-> (MI604 )
echo Debug:  PreResult: "SF" |-> (mi(1, _605) )
echo Debug:  Result: "SF" |-> (MI605 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _606) )
echo Debug:  Result: "ZF" |-> (MI606 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _604)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI604) )
echo Debug:  PreResult: "OF" |-> (mi(1, _603)   )
echo Debug:  Result: "OF" |-> (MI603   )
[4m[1m[34mwriteKDefn setg_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setg_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnle_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnle_rh.s[0m
[4m[1m[34mcreatespec setnle_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnle_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnle_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnle_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnle_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnle_rh.s[0m
Circuit: setnle %cl
%sf -> 1
%zf -> 1
%of -> 1
%cl -> 1

Circuit: setne %ah
%zf -> 1
%ah -> 1

Circuit: xchgb %cl, %ah
%cl -> 1
%ah -> 1

Total Circuit
ZF -> 1
RCX -> 1
RAX -> 1
SF -> 1
OF -> 1

Target
ZF -> 1
RAX -> 1
SF -> 1
OF -> 1

[4m[1m[34mkprove setnle_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnle_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnle_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnle_rh[0m
[4m[1m[34msanitizeSpecOutput setnle_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnle_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _606) )
echo Debug:  Result: "SF" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(mi(1, _607), mi(1, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(MI607, mi(1, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _605), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI605, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI605, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> (mi(1, _607)   )
echo Debug:  Result: "ZF" |-> (MI607   )
[4m[1m[34mwriteKDefn setnle_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnle_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnle_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subq_r64_r64.s[0m
[4m[1m[34mcreatespec subq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subq_r64_r64.s[0m
Circuit: stc
%cf -> 1

Circuit: notq %rcx
%rcx -> 1

Circuit: adcq %rcx, %rbx
%of -> 1
%cf -> 1
%zf -> 1
%af -> 1
%sf -> 1
%rbx -> 1
%pf -> 1
%rcx -> 1

Circuit: cmc
%cf -> 1

Total Circuit
SF -> 1
RBX -> 1
OF -> 1
AF -> 1
RCX -> 1
PF -> 1
CF -> 1
ZF -> 1

Target
ZF -> 1
CF -> 1
PF -> 1
RCX -> 1
OF -> 1
AF -> 1
RBX -> 1
SF -> 1

[4m[1m[34mkprove subq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput subq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _615))), concatenateMInt(mi(1, 0), mi(64, _614))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _615))), concatenateMInt(mi(1, 0), mi(64, _614))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI615)), concatenateMInt(mi(1, 0), MI614)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI615)), concatenateMInt(mi(1, 0), MI614)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (xorMInt(mi(64, 18446744073709551615), mi(64, _615)) )
echo Debug:  Result: "RCX" |-> (xorMInt(mi(64, 18446744073709551615), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 0, 1)), extractMInt(mi(64, _614), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 0, 1)), extractMInt(MI614, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)) )
echo Debug:  Result: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn subq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testb_r8_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_r8.s[0m
[4m[1m[34mcreatespec testb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_r8_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testb_r8_r8[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_r8.s[0m
Circuit: movsbl %bl, %ebx
%rbx -> 1
%ebx -> 1
%bl -> 1

Circuit: movsbl %cl, %r11d
%cl -> 1
%r11 -> 1
%r11d -> 1

Circuit: testl %r11d, %ebx
%pf -> 1
%ebx -> 1
%zf -> 1
%sf -> 1
%af -> 1
%of -> 1
%r11d -> 1
%cf -> 1

Total Circuit
AF -> 1
OF -> 1
RBX -> 1
SF -> 1
CF -> 1
R11 -> 1
RCX -> 1
PF -> 1
ZF -> 1

Target
ZF -> 1
OF -> 1
AF -> 1
RBX -> 1
SF -> 1
CF -> 1
PF -> 1
RCX -> 1

[4m[1m[34mkprove testb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput testb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 64)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 64)) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(extractMInt(mi(64, _616), 56, 64), orMInt(extractMInt(mi(64, _616), 56, 64), extractMInt(mi(64, _615), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI615, 56, 64), xorMInt(extractMInt(MI616, 56, 64), orMInt(extractMInt(MI616, 56, 64), extractMInt(MI615, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 56, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 56, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testb_r8_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testw_r16_r16.s[0m
[4m[1m[34mcreatespec testw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testw_r16_r16[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testw_r16_r16.s[0m
Circuit: movswq %bx, %r10
%bx -> 1
%r10 -> 1

Circuit: movswl %cx, %edi
%cx -> 1
%edi -> 1
%rdi -> 1

Circuit: xchgl %edi, %r10d
%r10 -> 1
%edi -> 1
%rdi -> 1
%r10d -> 1

Circuit: andl %r10d, %edi
%rdi -> 1
%r10d -> 1
%zf -> 1
%af -> 1
%sf -> 1
%edi -> 1
%pf -> 1
%cf -> 1
%of -> 1

Total Circuit
OF -> 1
AF -> 1
SF -> 1
RBX -> 1
R10 -> 1
CF -> 1
RCX -> 1
PF -> 1
RDI -> 1
ZF -> 1

Target
ZF -> 1
RBX -> 1
SF -> 1
AF -> 1
OF -> 1
RCX -> 1
PF -> 1
CF -> 1

[4m[1m[34mkprove testw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput testw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _617), 56, 64), xorMInt(extractMInt(mi(64, _616), 56, 64), orMInt(extractMInt(mi(64, _616), 56, 64), extractMInt(mi(64, _617), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI617, 56, 64), xorMInt(extractMInt(MI616, 56, 64), orMInt(extractMInt(MI616, 56, 64), extractMInt(MI617, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _617) )
echo Debug:  Result: "RCX" |-> (MI617 )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 64))))) )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 64))))) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _616) )
echo Debug:  Result: "RBX" |-> (MI616 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 64))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 64))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vandps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandps_ymm_ymm_ymm.s[0m
Circuit: andps %xmm2, %xmm3
sse -> 1
%xmm3 -> 1
%xmm2 -> 1

Circuit: callq .move_256_128_ymm2_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%ymm2 -> 1

Circuit: callq .move_256_128_ymm3_xmm8_xmm9
%xmm9 -> 1
%xmm8 -> 1
%ymm3 -> 1

Circuit: pand %xmm11, %xmm9
%xmm9 -> 1
%xmm11 -> 1
sse2 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%ymm1 -> 1
%xmm9 -> 1
%xmm8 -> 1

Total Circuit
YMM10 -> 1
YMM9 -> 1
YMM3 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1
YMM8 -> 1
 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vandps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vandps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 0, 64), extractMInt(mi(256, _605), 0, 64)), extractMInt(mi(256, _605), 0, 64)), xorMInt(extractMInt(mi(256, _606), 0, 64), extractMInt(mi(256, _605), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 64, 128), extractMInt(mi(256, _605), 64, 128)), extractMInt(mi(256, _605), 64, 128)), xorMInt(extractMInt(mi(256, _606), 64, 128), extractMInt(mi(256, _605), 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 128, 192), extractMInt(mi(256, _605), 128, 192)), extractMInt(mi(256, _605), 128, 192)), xorMInt(extractMInt(mi(256, _606), 128, 192), extractMInt(mi(256, _605), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _605), 192, 256)), extractMInt(mi(256, _605), 192, 256)), xorMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _605), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI606, 0, 64), extractMInt(MI605, 0, 64)), extractMInt(MI605, 0, 64)), xorMInt(extractMInt(MI606, 0, 64), extractMInt(MI605, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI606, 64, 128), extractMInt(MI605, 64, 128)), extractMInt(MI605, 64, 128)), xorMInt(extractMInt(MI606, 64, 128), extractMInt(MI605, 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI606, 128, 192), extractMInt(MI605, 128, 192)), extractMInt(MI605, 128, 192)), xorMInt(extractMInt(MI606, 128, 192), extractMInt(MI605, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI606, 192, 256), extractMInt(MI605, 192, 256)), extractMInt(MI605, 192, 256)), xorMInt(extractMInt(MI606, 192, 256), extractMInt(MI605, 192, 256))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _605), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI605, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _605), 0, 128)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI605, 0, 128)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(extractMInt(mi(256, _606), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 128, 192), extractMInt(mi(256, _605), 128, 192)), extractMInt(mi(256, _605), 128, 192)), xorMInt(extractMInt(mi(256, _606), 128, 192), extractMInt(mi(256, _605), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _605), 192, 256)), extractMInt(mi(256, _605), 192, 256)), xorMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _605), 192, 256))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(extractMInt(MI606, 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI606, 128, 192), extractMInt(MI605, 128, 192)), extractMInt(MI605, 128, 192)), xorMInt(extractMInt(MI606, 128, 192), extractMInt(MI605, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI606, 192, 256), extractMInt(MI605, 192, 256)), extractMInt(MI605, 192, 256)), xorMInt(extractMInt(MI606, 192, 256), extractMInt(MI605, 192, 256))))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 128, 192), extractMInt(mi(256, _605), 128, 192)), extractMInt(mi(256, _605), 128, 192)), xorMInt(extractMInt(mi(256, _606), 128, 192), extractMInt(mi(256, _605), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _605), 192, 256)), extractMInt(mi(256, _605), 192, 256)), xorMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _605), 192, 256))))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI606, 128, 192), extractMInt(MI605, 128, 192)), extractMInt(MI605, 128, 192)), xorMInt(extractMInt(MI606, 128, 192), extractMInt(MI605, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI606, 192, 256), extractMInt(MI605, 192, 256)), extractMInt(MI605, 192, 256)), xorMInt(extractMInt(MI606, 192, 256), extractMInt(MI605, 192, 256))))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 0, 64), extractMInt(mi(256, _605), 0, 64)), extractMInt(mi(256, _605), 0, 64)), xorMInt(extractMInt(mi(256, _606), 0, 64), extractMInt(mi(256, _605), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _606), 64, 128), extractMInt(mi(256, _605), 64, 128)), extractMInt(mi(256, _605), 64, 128)), xorMInt(extractMInt(mi(256, _606), 64, 128), extractMInt(mi(256, _605), 64, 128)))))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI606, 0, 64), extractMInt(MI605, 0, 64)), extractMInt(MI605, 0, 64)), xorMInt(extractMInt(MI606, 0, 64), extractMInt(MI605, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI606, 64, 128), extractMInt(MI605, 64, 128)), extractMInt(MI605, 64, 128)), xorMInt(extractMInt(MI606, 64, 128), extractMInt(MI605, 64, 128)))))   )
[4m[1m[34mwriteKDefn vandps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtsi2ssl_xmm_xmm_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtsi2ssl_xmm_xmm_r32.s[0m
[4m[1m[34mcreatespec vcvtsi2ssl_xmm_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtsi2ssl_xmm_xmm_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtsi2ssl_xmm_xmm_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtsi2ssl_xmm_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtsi2ssl_xmm_xmm_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtsi2ssl_xmm_xmm_r32.s[0m
Circuit: callq .move_128_064_xmm2_r10_r11
%r11 -> 1
%xmm2 -> 1
%r10 -> 1

Circuit: vzeroall
%ymm3 -> 1
%ymm8 -> 1
%ymm4 -> 1
%ymm9 -> 1
%ymm1 -> 1
%ymm0 -> 1
%ymm5 -> 1
%ymm6 -> 1
%ymm12 -> 1
avx -> 1
%ymm11 -> 1
%ymm2 -> 1
%ymm15 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm14 -> 1
%ymm13 -> 1

Circuit: callq .move_064_128_r10_r11_xmm3
%r11 -> 1
%xmm3 -> 1
%r10 -> 1

Circuit: cvtsi2ssl %ebx, %xmm3
%xmm3 -> 1
sse -> 1
%mxcsr::rc[0] -> 1
%ebx -> 1

Circuit: movdqa %xmm3, %xmm1
%xmm3 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
RBX -> 1
YMM15 -> 1
R10 -> 1
YMM4 -> 1
YMM11 -> 1
YMM1 -> 1
YMM5 -> 1
YMM9 -> 1
YMM6 -> 1
YMM2 -> 1
YMM14 -> 1
YMM8 -> 1
 -> 1
YMM13 -> 1
R11 -> 1
YMM7 -> 1
YMM10 -> 1
YMM12 -> 1
YMM0 -> 1
YMM3 -> 1

Target
YMM2 -> 1
 -> 1
RBX -> 1
YMM1 -> 1

[4m[1m[34mkprove vcvtsi2ssl_xmm_xmm_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtsi2ssl_xmm_xmm_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtsi2ssl_xmm_xmm_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vcvtsi2ssl_xmm_xmm_r32[0m
[4m[1m[34msanitizeSpecOutput vcvtsi2ssl_xmm_xmm_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtsi2ssl_xmm_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, _616) )
echo Debug:  Result: "RBX" |-> (MI616 )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _618), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI618, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _618), 128, 224), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _616), 32, 64)), 24, 8), 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI618, 128, 224), Float2MInt(Int2Float(svalueMInt(extractMInt(MI616, 32, 64)), 24, 8), 32))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 224)), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(64, _616), 32, 64)), 24, 8), 32)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 224)), Float2MInt(Int2Float(svalueMInt(extractMInt(MI616, 32, 64)), 24, 8), 32)) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _618), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI618, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vcvtsi2ssl_xmm_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtsi2ssl_xmm_xmm_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtsi2ssl_xmm_xmm_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvttps2dq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvttps2dq_xmm_xmm.s[0m
vcvttps2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttps2dq_ymm_ymm.k
Warn: [4m[1m[35mvcvttps2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vfmadd132pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132pd_xmm_xmm_xmm.s[0m
Circuit: vfmadd231pd %xmm3, %xmm1, %xmm2
%xmm3 -> 1
fma -> 1
%xmm2 -> 1
%xmm1 -> 1
%ymm2 -> 1

Circuit: callq .move_128_064_xmm2_r10_r11
%r11 -> 1
%r10 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm10 -> 1
%ymm14 -> 1
%ymm13 -> 1
%ymm15 -> 1
%ymm7 -> 1
%ymm11 -> 1
%ymm2 -> 1
avx -> 1
%ymm6 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm1 -> 1
%ymm0 -> 1
%ymm9 -> 1
%ymm4 -> 1
%ymm8 -> 1
%ymm3 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%xmm1 -> 1
%r11 -> 1

Total Circuit
YMM3 -> 1
YMM0 -> 1
YMM10 -> 1
YMM12 -> 1
YMM7 -> 1
 -> 1
YMM13 -> 1
R11 -> 1
YMM8 -> 1
YMM2 -> 1
YMM14 -> 1
YMM9 -> 1
YMM6 -> 1
YMM5 -> 1
YMM1 -> 1
R10 -> 1
YMM4 -> 1
YMM11 -> 1
YMM15 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmadd132pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd132pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd132pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) )  ) , 64) )
echo Debug:  Result: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) )  ) , 64) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) )  ) , 64) )
echo Debug:  Result: "R11" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) )  ) , 64) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmadd132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd132pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd132sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132sd_xmm_xmm_xmm.s[0m
Circuit: vfmadd231pd %xmm3, %xmm1, %xmm2
%xmm1 -> 1
%ymm2 -> 1
fma -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: vmovsd %xmm2, %xmm1, %xmm9
%ymm9 -> 1
%xmm9 -> 1
%xmm2 -> 1
avx -> 1
%xmm1 -> 1

Circuit: vmovaps %ymm9, %ymm1
avx -> 1
%ymm1 -> 1
%ymm9 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
YMM9 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmadd132sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd132sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd132sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI601, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _601), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI601, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _601), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI601, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603)   )
echo Debug:  Result: "YMM3" |-> (MI603   )
[4m[1m[34mwriteKDefn vfmadd132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd132sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd213ps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_xmm_xmm_xmm.s[0m
Circuit: pxor %xmm9, %xmm9
%xmm9 -> 1
sse2 -> 1

Circuit: vandps %xmm9, %xmm3, %xmm10
avx -> 1
%ymm10 -> 1
%xmm9 -> 1
%xmm3 -> 1
%xmm10 -> 1

Circuit: vfnmsub231ps %xmm3, %xmm10, %xmm3
%ymm3 -> 1
%xmm10 -> 1
%xmm3 -> 1
fma -> 1

Circuit: vfmsub132ps %xmm1, %xmm3, %xmm2
%xmm2 -> 1
fma -> 1
%ymm2 -> 1
%xmm1 -> 1
%xmm3 -> 1

Circuit: vorpd %ymm2, %ymm10, %ymm1
%ymm1 -> 1
%ymm10 -> 1
%ymm2 -> 1
avx -> 1

Total Circuit
YMM3 -> 1
YMM10 -> 1
 -> 1
YMM2 -> 1
YMM9 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmadd213ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd213ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd213ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM9" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmadd213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd213ps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd213sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213sd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm10 -> 1
%xmm11 -> 1
%xmm2 -> 1

Circuit: vfmadd231pd %xmm1, %xmm10, %xmm3
%xmm10 -> 1
%xmm3 -> 1
%ymm3 -> 1
fma -> 1
%xmm1 -> 1

Circuit: vpunpcklqdq %ymm3, %ymm3, %ymm11
%ymm11 -> 1
%ymm3 -> 1
avx2 -> 1

Circuit: vmovsd %xmm11, %xmm1, %xmm1
%xmm11 -> 1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1

Total Circuit
YMM10 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM11 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmadd213sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd213sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd213sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _603) )
echo Debug:  Result: "YMM2" |-> (MI603 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _602), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI602, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _603), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI603, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 0e+00  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 0e+00  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64))) )
[4m[1m[34mwriteKDefn vfmadd213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd213sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmaddsub132pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmaddsub132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub132pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132pd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm1 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: vfmsub231sd %xmm3, %xmm10, %xmm2
%xmm10 -> 1
%xmm3 -> 1
%xmm2 -> 1
fma -> 1
%ymm2 -> 1

Circuit: vpunpcklqdq %xmm2, %xmm10, %xmm12
%xmm2 -> 1
%ymm12 -> 1
avx -> 1
%xmm12 -> 1
%xmm10 -> 1

Circuit: vfmadd231pd %xmm3, %xmm1, %xmm2
%xmm3 -> 1
fma -> 1
%xmm2 -> 1
%xmm1 -> 1
%ymm2 -> 1

Circuit: vmovhlps %xmm12, %xmm2, %xmm1
%xmm2 -> 1
avx -> 1
%xmm1 -> 1
%ymm1 -> 1
%xmm12 -> 1

Total Circuit
YMM1 -> 1
YMM11 -> 1
YMM3 -> 1
YMM10 -> 1
YMM12 -> 1
 -> 1
YMM2 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmaddsub132pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub132pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub132pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmaddsub132pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmaddsub132pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) , 64), extractMInt(mi(256, _603), 192, 256))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) , 64), extractMInt(MI603, 192, 256))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  )  ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI605, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  )  ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI605, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _603), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI603, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _603), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI603, 128, 192)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _605) )
echo Debug:  Result: "YMM3" |-> (MI605 )
[4m[1m[34mwriteKDefn vfmaddsub132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmaddsub132pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd132sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmadd132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132sd_xmm_xmm_xmm.s[0m
Circuit: vandpd %xmm1, %xmm1, %xmm9
%ymm9 -> 1
%xmm9 -> 1
%xmm1 -> 1
avx -> 1

Circuit: vfnmadd231pd %xmm3, %xmm9, %xmm2
%xmm3 -> 1
%ymm2 -> 1
fma -> 1
%xmm9 -> 1
%xmm2 -> 1

Circuit: vmovsd %xmm2, %xmm9, %xmm1
%xmm9 -> 1
%xmm2 -> 1
avx -> 1
%xmm1 -> 1
%ymm1 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM9 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmadd132sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd132sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd132sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _602), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(xorMInt(extractMInt(mi(256, _601), 128, 192), mi(64, 0)), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(xorMInt(extractMInt(mi(256, _601), 192, 256), mi(64, 0)), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI602, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(xorMInt(extractMInt(MI601, 128, 192), mi(64, 0)), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI602, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(xorMInt(extractMInt(MI601, 192, 256), mi(64, 0)), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(mi(256, _601), 128, 192), mi(64, 0)), Float2MInt( ( MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(xorMInt(extractMInt(mi(256, _601), 192, 256), mi(64, 0)), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(MI601, 128, 192), mi(64, 0)), Float2MInt( ( MInt2Float(extractMInt(MI602, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(xorMInt(extractMInt(MI601, 192, 256), mi(64, 0)), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(mi(256, _601), 128, 192), mi(64, 0)), xorMInt(extractMInt(mi(256, _601), 192, 256), mi(64, 0)))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(MI601, 128, 192), mi(64, 0)), xorMInt(extractMInt(MI601, 192, 256), mi(64, 0)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603)   )
echo Debug:  Result: "YMM3" |-> (MI603   )
[4m[1m[34mwriteKDefn vfnmadd132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd132sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd213ss_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ss_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmadd213ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ss_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ss_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ss_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ss_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm8 -> 1
%xmm2 -> 1
%xmm9 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: pmovsxdq %xmm8, %xmm15
%xmm8 -> 1
%xmm15 -> 1
sse4_1 -> 1

Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm8 -> 1
%xmm1 -> 1
%xmm9 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: vmovss %xmm3, %xmm1, %xmm1
%ymm1 -> 1
%xmm3 -> 1
avx -> 1
%xmm1 -> 1

Circuit: vfnmadd231ss %xmm8, %xmm15, %xmm1
fma -> 1
%xmm1 -> 1
%xmm8 -> 1
%ymm1 -> 1
%xmm15 -> 1

Total Circuit
YMM9 -> 1
YMM15 -> 1
YMM11 -> 1
YMM1 -> 1
YMM10 -> 1
YMM3 -> 1
YMM2 -> 1
YMM8 -> 1
 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmadd213ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd213ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd213ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _605), 128, 224)), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI605, 128, 224)), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI605, 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(MI607, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _607) )
echo Debug:  Result: "YMM3" |-> (MI607 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 224, 256)) )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(192, 0), mi(64, svalueMInt(extractMInt(mi(256, _606), 224, 256)))) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(192, 0), mi(64, svalueMInt(extractMInt(MI606, 224, 256)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 192, 224))   )
[4m[1m[34mwriteKDefn vfnmadd213ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd213ss_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ss_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub213pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmsub213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_xmm_xmm_xmm.s[0m
Circuit: vfnmsub132pd %xmm1, %xmm3, %xmm2
fma -> 1
%xmm2 -> 1
%xmm1 -> 1
%ymm2 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%xmm2 -> 1
%r12 -> 1
%r13 -> 1

Circuit: vzeroall
%ymm7 -> 1
%ymm15 -> 1
%ymm14 -> 1
%ymm13 -> 1
%ymm10 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm6 -> 1
%ymm11 -> 1
%ymm2 -> 1
avx -> 1
%ymm9 -> 1
%ymm0 -> 1
%ymm1 -> 1
%ymm3 -> 1
%ymm8 -> 1
%ymm4 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r13 -> 1
%r12 -> 1

Total Circuit
YMM8 -> 1
 -> 1
YMM13 -> 1
YMM2 -> 1
YMM14 -> 1
YMM0 -> 1
YMM3 -> 1
YMM7 -> 1
YMM10 -> 1
YMM12 -> 1
YMM1 -> 1
R13 -> 1
YMM5 -> 1
YMM15 -> 1
YMM11 -> 1
YMM4 -> 1
YMM9 -> 1
YMM6 -> 1
R12 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmsub213pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub213pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub213pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R12" |-> (Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) , 64) )
echo Debug:  Result: "R13" |-> (Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfnmsub213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub213pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovmskpd_r32_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskpd_r32_ymm.s[0m
[4m[1m[34mcreatespec vmovmskpd_r32_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r32_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskpd_r32_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskpd_r32_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskpd_r32_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskpd_r32_ymm.s[0m
Circuit: movq $0x20, %rbx
%rbx -> 1
\$0x20 -> 1

Circuit: vmovmskpd %ymm1, %r12
%ymm1 -> 1
avx -> 1
%r12 -> 1

Circuit: xaddw %bx, %r12w
%bx -> 1
%of -> 1
%cf -> 1
%r12w -> 1
%pf -> 1
%zf -> 1
%sf -> 1
%af -> 1

Total Circuit
YMM1 -> 1
RBX -> 1
AF -> 1
OF -> 1
ZF -> 1
R12 -> 1
PF -> 1
 -> 1
CF -> 1
SF -> 1

Target
YMM1 -> 1
RBX -> 1
 -> 1

[4m[1m[34mkprove vmovmskpd_r32_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r32_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskpd_r32_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovmskpd_r32_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovmskpd_r32_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskpd_r32_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM1" |-> (mi(256, _606) )
echo Debug:  Result: "YMM1" |-> (MI606 )
echo Debug:  PreResult: "R12" |-> (mi(64, 32) )
echo Debug:  Result: "R12" |-> (mi(64, 32) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, 0) )
echo Debug:  Result: "RBX" |-> (mi(64, 0) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 0)   )
echo Debug:  Result: "ZF" |-> (mi(1, 0)   )
[4m[1m[34mwriteKDefn vmovmskpd_r32_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovmskpd_r32_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskpd_r32_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastb_ymm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastb_ymm_xmm.s[0m
[4m[1m[34mcreatespec vpbroadcastb_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastb_ymm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastb_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastb_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastb_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastb_ymm_xmm.s[0m
Circuit: vpbroadcastb %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
avx2 -> 1
%ymm1 -> 1

Circuit: callq .move_256_128_ymm1_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%ymm1 -> 1

Circuit: vaddpd %xmm10, %xmm11, %xmm0
avx -> 1
%xmm11 -> 1
%xmm10 -> 1
%ymm0 -> 1
%xmm0 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm3
%xmm11 -> 1
%xmm3 -> 1
%xmm10 -> 1

Circuit: vmovlhps %xmm3, %xmm0, %xmm1
%ymm1 -> 1
%xmm0 -> 1
%xmm3 -> 1
%xmm1 -> 1
avx -> 1

Circuit: vpbroadcastw %xmm1, %ymm1
avx2 -> 1
%ymm1 -> 1
%xmm1 -> 1

Total Circuit
YMM10 -> 1
YMM0 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM11 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpbroadcastb_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastb_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastb_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastb_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastb_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastb_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _603) )
echo Debug:  Result: "YMM2" |-> (MI603 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))))), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))))), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)))))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)))))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(192, 0), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(192, 0), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))))) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256)), concatenateMInt(extractMInt(mi(256, _603), 248, 256), extractMInt(mi(256, _603), 248, 256))))))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))), concatenateMInt(concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256)), concatenateMInt(extractMInt(MI603, 248, 256), extractMInt(MI603, 248, 256))))))   )
[4m[1m[34mwriteKDefn vpbroadcastb_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastb_ymm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastb_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vphaddd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vphaddd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vphaddd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvphaddd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_xmm_xmm_xmm.s[0m
Circuit: phaddd %xmm3, %xmm2
%xmm3 -> 1
ssse3 -> 1
%xmm2 -> 1

Circuit: vpor %xmm2, %xmm2, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vphaddd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vphaddd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vphaddd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vphaddd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vphaddd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvphaddd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _601), 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _602), 192, 256), concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _601), 128, 160), extractMInt(mi(256, _601), 128, 160)), extractMInt(mi(256, _601), 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _601), 192, 224), extractMInt(mi(256, _601), 192, 224)), extractMInt(mi(256, _601), 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI601, 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI602, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI602, 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI602, 192, 256), concatenateMInt(mi(32, 0), extractMInt(MI602, 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI601, 128, 160), extractMInt(MI601, 128, 160)), extractMInt(MI601, 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI601, 192, 224), extractMInt(MI601, 192, 224)), extractMInt(MI601, 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _602), 192, 256), concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _601), 128, 160), extractMInt(mi(256, _601), 128, 160)), extractMInt(mi(256, _601), 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _601), 192, 224), extractMInt(mi(256, _601), 192, 224)), extractMInt(mi(256, _601), 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI602, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI602, 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI602, 192, 256), concatenateMInt(mi(32, 0), extractMInt(MI602, 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI601, 128, 160), extractMInt(MI601, 128, 160)), extractMInt(MI601, 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI601, 192, 224), extractMInt(MI601, 192, 224)), extractMInt(MI601, 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _602)   )
echo Debug:  Result: "YMM3" |-> (MI602   )
[4m[1m[34mwriteKDefn vphaddd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vphaddd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vphaddd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vphaddd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vphaddd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvphaddd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_ymm_ymm_ymm.s[0m
Circuit: callq .move_256_128_ymm3_xmm12_xmm13
%xmm13 -> 1
%xmm12 -> 1
%ymm3 -> 1

Circuit: phaddd %xmm12, %xmm2
%xmm2 -> 1
ssse3 -> 1
%xmm12 -> 1

Circuit: callq .move_256_128_ymm2_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%ymm2 -> 1

Circuit: phaddd %xmm13, %xmm11
ssse3 -> 1
%xmm11 -> 1
%xmm13 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%xmm11 -> 1
%xmm10 -> 1
%ymm1 -> 1

Total Circuit
YMM1 -> 1
YMM11 -> 1
 -> 1
YMM13 -> 1
YMM2 -> 1
YMM3 -> 1
YMM10 -> 1
YMM12 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vphaddd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vphaddd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vphaddd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vphaddd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vphaddd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvphaddd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _606), 128, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(MI606, 128, 256)) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _606), 192, 256), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 128, 160), extractMInt(mi(256, _605), 128, 160)), extractMInt(mi(256, _605), 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 192, 224), extractMInt(mi(256, _605), 192, 224)), extractMInt(mi(256, _605), 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI605, 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI606, 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI606, 192, 256), concatenateMInt(mi(32, 0), extractMInt(MI606, 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 128, 160), extractMInt(MI605, 128, 160)), extractMInt(MI605, 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 192, 224), extractMInt(MI605, 192, 224)), extractMInt(MI605, 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 0, 32)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 32, 64))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _606), 64, 128), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 64, 96))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 0, 32), extractMInt(mi(256, _605), 0, 32)), extractMInt(mi(256, _605), 0, 64)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 64, 96), extractMInt(mi(256, _605), 64, 96)), extractMInt(mi(256, _605), 64, 128)), mi(64, 0)), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _606), 192, 256), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 128, 160), extractMInt(mi(256, _605), 128, 160)), extractMInt(mi(256, _605), 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 192, 224), extractMInt(mi(256, _605), 192, 224)), extractMInt(mi(256, _605), 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI606, 0, 32)), concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI606, 64, 128), concatenateMInt(mi(32, 0), extractMInt(MI606, 64, 96))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 0, 32), extractMInt(MI605, 0, 32)), extractMInt(MI605, 0, 64)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 64, 96), extractMInt(MI605, 64, 96)), extractMInt(MI605, 64, 128)), mi(64, 0)), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI606, 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI606, 192, 256), concatenateMInt(mi(32, 0), extractMInt(MI606, 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 128, 160), extractMInt(MI605, 128, 160)), extractMInt(MI605, 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 192, 224), extractMInt(MI605, 192, 224)), extractMInt(MI605, 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _606), 0, 128)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI606, 0, 128)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _606), 192, 256), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 128, 160), extractMInt(mi(256, _605), 128, 160)), extractMInt(mi(256, _605), 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 192, 224), extractMInt(mi(256, _605), 192, 224)), extractMInt(mi(256, _605), 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI606, 160, 192))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI606, 192, 256), concatenateMInt(mi(32, 0), extractMInt(MI606, 192, 224))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 128, 160), extractMInt(MI605, 128, 160)), extractMInt(MI605, 128, 192)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 192, 224), extractMInt(MI605, 192, 224)), extractMInt(MI605, 192, 256)), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 0, 32)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 32, 64))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(mi(256, _606), 64, 128), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 64, 96))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 0, 32), extractMInt(mi(256, _605), 0, 32)), extractMInt(mi(256, _605), 0, 64)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 64, 96), extractMInt(mi(256, _605), 64, 96)), extractMInt(mi(256, _605), 64, 128)), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI606, 0, 32)), concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(extractMInt(MI606, 64, 128), concatenateMInt(mi(32, 0), extractMInt(MI606, 64, 96))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 0, 32), extractMInt(MI605, 0, 32)), extractMInt(MI605, 0, 64)), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 64, 96), extractMInt(MI605, 64, 96)), extractMInt(MI605, 64, 128)), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606) )
echo Debug:  Result: "YMM3" |-> (MI606 )
[4m[1m[34mwriteKDefn vphaddd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vphaddd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphaddd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovzxbq_ymm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxbq_ymm_xmm.s[0m
[4m[1m[34mcreatespec vpmovzxbq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxbq_ymm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxbq_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxbq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxbq_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxbq_ymm_xmm.s[0m
Circuit: vbroadcastss %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
avx2 -> 1
%ymm1 -> 1

Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%xmm2 -> 1

Circuit: callq .move_byte_11_of_ymm1_to_r9b
%ymm1 -> 1
%r9b -> 1

Circuit: callq .move_r9b_to_byte_24_of_ymm1
%r9b -> 1
%ymm1 -> 1

Circuit: callq .move_byte_6_of_ymm1_to_r9b
%r9b -> 1
%ymm1 -> 1

Circuit: callq .move_r9b_to_byte_16_of_ymm1
%r9b -> 1
%ymm1 -> 1

Circuit: pmovzxbq %xmm10, %xmm1
sse4_1 -> 1
%xmm10 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM10 -> 1
R9 -> 1
YMM11 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpmovzxbq_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxbq_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxbq_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovzxbq_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovzxbq_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxbq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(56, 0), concatenateMInt(extractMInt(mi(256, _602), 224, 232), mi(56, 0))), extractMInt(mi(256, _602), 232, 240)), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(mi(256, _602), 240, 248)), concatenateMInt(mi(56, 0), extractMInt(mi(256, _602), 248, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(56, 0), concatenateMInt(extractMInt(MI602, 224, 232), mi(56, 0))), extractMInt(MI602, 232, 240)), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(MI602, 240, 248)), concatenateMInt(mi(56, 0), extractMInt(MI602, 248, 256)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _602), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI602, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _602), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI602, 128, 192)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _602), 232, 240)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(MI602, 232, 240)) )
[4m[1m[34mwriteKDefn vpmovzxbq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovzxbq_ymm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxbq_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpckhdq_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhdq_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vpunpckhdq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhdq_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhdq_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhdq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhdq_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhdq_ymm_ymm_ymm.s[0m
Circuit: vunpckhps %ymm3, %ymm2, %ymm15
%ymm3 -> 1
%ymm15 -> 1
%ymm2 -> 1
avx -> 1

Circuit: vmaxps %ymm15, %ymm15, %ymm1
avx -> 1
%ymm15 -> 1
%ymm1 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM15 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpunpckhdq_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhdq_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhdq_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpckhdq_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpunpckhdq_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhdq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 0, 32), extractMInt(mi(256, _602), 0, 32)), concatenateMInt(extractMInt(mi(256, _603), 32, 64), extractMInt(mi(256, _602), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 128, 160), extractMInt(mi(256, _602), 128, 160)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _602), 160, 192)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 0, 32), extractMInt(MI602, 0, 32)), concatenateMInt(extractMInt(MI603, 32, 64), extractMInt(MI602, 32, 64))), concatenateMInt(concatenateMInt(extractMInt(MI603, 128, 160), extractMInt(MI602, 128, 160)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI602, 160, 192)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603) )
echo Debug:  Result: "YMM3" |-> (MI603 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 0, 32), extractMInt(mi(256, _602), 0, 32)), concatenateMInt(extractMInt(mi(256, _603), 32, 64), extractMInt(mi(256, _602), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 128, 160), extractMInt(mi(256, _602), 128, 160)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _602), 160, 192))))   )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 0, 32), extractMInt(MI602, 0, 32)), concatenateMInt(extractMInt(MI603, 32, 64), extractMInt(MI602, 32, 64))), concatenateMInt(concatenateMInt(extractMInt(MI603, 128, 160), extractMInt(MI602, 128, 160)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI602, 160, 192))))   )
[4m[1m[34mwriteKDefn vpunpckhdq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpckhdq_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhdq_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpckldq_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpunpckldq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckldq_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckldq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_xmm_xmm_xmm.s[0m
Circuit: vpbroadcastq %xmm3, %ymm6
avx2 -> 1
%xmm3 -> 1
%ymm6 -> 1

Circuit: vunpcklpd %xmm3, %xmm6, %xmm9
%ymm9 -> 1
%xmm3 -> 1
%xmm6 -> 1
%xmm9 -> 1
avx -> 1

Circuit: vpor %xmm9, %xmm9, %xmm7
%ymm7 -> 1
%xmm9 -> 1
%xmm7 -> 1
avx -> 1

Circuit: unpcklps %xmm7, %xmm2
sse -> 1
%xmm2 -> 1
%xmm7 -> 1

Circuit: vmulpd %xmm6, %xmm2, %xmm12
%xmm6 -> 1
%xmm12 -> 1
avx -> 1
%ymm12 -> 1
%xmm2 -> 1

Circuit: vxorps %xmm12, %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
avx -> 1
%xmm12 -> 1
%ymm1 -> 1

Circuit: movdqu %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
sse2 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM12 -> 1
YMM7 -> 1
YMM1 -> 1
YMM6 -> 1
YMM9 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpunpckldq_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckldq_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckldq_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpckldq_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpunpckldq_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckldq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  *Float  MInt2Float(concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _605), 192, 224)), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  *Float  MInt2Float(concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _605), 224, 256)), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  *Float  MInt2Float(concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI605, 192, 224)), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  *Float  MInt2Float(concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI605, 224, 256)), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _605), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _605), 224, 256)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI605, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI605, 192, 224)), concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI605, 224, 256)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _605), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _605), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI605, 192, 224)), concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI605, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606) )
echo Debug:  Result: "YMM3" |-> (MI606 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256)), concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256)), concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256))) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256))) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256)))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256)))   )
[4m[1m[34mwriteKDefn vpunpckldq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpckldq_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpcklps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vunpcklps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_ymm_ymm_ymm.s[0m
Circuit: movlhps %xmm2, %xmm2
sse -> 1
%xmm2 -> 1

Circuit: vmovddup %ymm3, %ymm8
avx -> 1
%ymm8 -> 1
%ymm3 -> 1

Circuit: vmovddup %ymm2, %ymm6
avx -> 1
%ymm2 -> 1
%ymm6 -> 1

Circuit: vunpckhps %ymm8, %ymm6, %ymm1
%ymm6 -> 1
avx -> 1
%ymm1 -> 1
%ymm8 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM8 -> 1
YMM6 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vunpcklps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpcklps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vunpcklps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _603), 0, 128), concatenateMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _603), 192, 256))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI603, 0, 128), concatenateMInt(extractMInt(MI603, 192, 256), extractMInt(MI603, 192, 256))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 64, 96), extractMInt(mi(256, _603), 64, 96)), concatenateMInt(extractMInt(mi(256, _604), 96, 128), extractMInt(mi(256, _603), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 192, 224), extractMInt(mi(256, _603), 192, 224)), concatenateMInt(extractMInt(mi(256, _604), 224, 256), extractMInt(mi(256, _603), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI604, 64, 96), extractMInt(MI603, 64, 96)), concatenateMInt(extractMInt(MI604, 96, 128), extractMInt(MI603, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI604, 192, 224), extractMInt(MI603, 192, 224)), concatenateMInt(extractMInt(MI604, 224, 256), extractMInt(MI603, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _603), 64, 128)), concatenateMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _603), 192, 256))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(concatenateMInt(extractMInt(MI603, 64, 128), extractMInt(MI603, 64, 128)), concatenateMInt(extractMInt(MI603, 192, 256), extractMInt(MI603, 192, 256))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _604), 64, 128)), concatenateMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _604), 192, 256))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(concatenateMInt(extractMInt(MI604, 64, 128), extractMInt(MI604, 64, 128)), concatenateMInt(extractMInt(MI604, 192, 256), extractMInt(MI604, 192, 256))) )
[4m[1m[34mwriteKDefn vunpcklps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpcklps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

