[4m[1m[34mCheck if supported: andw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andw_r16_r16.s[0m
[4m[1m[34mcreatespec andw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andw_r16_r16[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andw_r16_r16.s[0m
Circuit: andb %ch, %bh
%ch -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%of -> 1
%bh -> 1
%cf -> 1

Circuit: andb %cl, %bl
%cl -> 1
%pf -> 1
%cf -> 1
%of -> 1
%af -> 1
%bl -> 1
%sf -> 1
%zf -> 1

Circuit: orw %bx, %bx
%af -> 1
%sf -> 1
%zf -> 1
%pf -> 1
%bx -> 1
%cf -> 1
%of -> 1

Total Circuit
RBX -> 1
OF -> 1
ZF -> 1
CF -> 1
PF -> 1
RCX -> 1
AF -> 1
SF -> 1

Target
PF -> 1
CF -> 1
RCX -> 1
AF -> 1
SF -> 1
RBX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove andw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput andw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, svalueMInt(concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(mi(64, _616), 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(extractMInt(mi(64, _616), 56, 64), orMInt(extractMInt(mi(64, _616), 56, 64), extractMInt(mi(64, _615), 56, 64))))))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(mi(64, svalueMInt(concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(MI616, 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), xorMInt(extractMInt(MI615, 56, 64), xorMInt(extractMInt(MI616, 56, 64), orMInt(extractMInt(MI616, 56, 64), extractMInt(MI615, 56, 64))))))), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(extractMInt(mi(64, _616), 56, 64), orMInt(extractMInt(mi(64, _616), 56, 64), extractMInt(mi(64, _615), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI615, 56, 64), xorMInt(extractMInt(MI616, 56, 64), orMInt(extractMInt(MI616, 56, 64), extractMInt(MI615, 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(mi(64, _616), 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(extractMInt(mi(64, _616), 56, 64), orMInt(extractMInt(mi(64, _616), 56, 64), extractMInt(mi(64, _615), 56, 64)))))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(MI616, 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), xorMInt(extractMInt(MI615, 56, 64), xorMInt(extractMInt(MI616, 56, 64), orMInt(extractMInt(MI616, 56, 64), extractMInt(MI615, 56, 64)))))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(mi(64, svalueMInt(concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(mi(64, _616), 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(extractMInt(mi(64, _616), 56, 64), orMInt(extractMInt(mi(64, _616), 56, 64), extractMInt(mi(64, _615), 56, 64))))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(mi(64, svalueMInt(concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(MI616, 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), xorMInt(extractMInt(MI615, 56, 64), xorMInt(extractMInt(MI616, 56, 64), orMInt(extractMInt(MI616, 56, 64), extractMInt(MI615, 56, 64))))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovaew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovaew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovaew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaew_r16_r16.s[0m
Circuit: movzwq %cx, %r13
%cx -> 1
%r13 -> 1

Circuit: cmovnbw %r13w, %bx
%bx -> 1
cmov -> 1
%cf -> 1
%r13w -> 1

Total Circuit
 -> 1
RCX -> 1
CF -> 1
R13 -> 1
RBX -> 1

Target
 -> 1
RCX -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove cmovaew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovaew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovaew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovaew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _602)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) ) #else ( mi(64, _603) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI602), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) ) #else ( MI603 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _602) )
echo Debug:  Result: "CF" |-> (MI602 )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _604), 48, 64)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(48, 0), extractMInt(MI604, 48, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603)   )
[4m[1m[34mwriteKDefn cmovaew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovaew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovgeq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgeq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovgeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgeq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovgeq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgeq_r64_r64.s[0m
Circuit: setnge %dh
%of -> 1
%sf -> 1
%dh -> 1

Circuit: negb %dh
%pf -> 1
%of -> 1
%cf -> 1
%dh -> 1
%af -> 1
%zf -> 1
%sf -> 1

Circuit: cmovaw %cx, %cx
%zf -> 1
%cf -> 1
%cx -> 1
cmov -> 1

Circuit: cmovaeq %rcx, %rbx
%rcx -> 1
%rbx -> 1
cmov -> 1
%cf -> 1

Total Circuit
ZF -> 1
OF -> 1
RBX -> 1
 -> 1
SF -> 1
AF -> 1
RCX -> 1
PF -> 1
CF -> 1
RDX -> 1

Target
RBX -> 1
OF -> 1
RCX -> 1
 -> 1
SF -> 1

[4m[1m[34mkprove cmovgeq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgeq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgeq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovgeq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovgeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovgeq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, _610) )
echo Debug:  Result: "SF" |-> (MI610 )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _609) )
echo Debug:  Result: "RCX" |-> (MI609 )
echo Debug:  PreResult: "OF" |-> (mi(1, _607) )
echo Debug:  Result: "OF" |-> (MI607 )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _610)), concatenateMInt(mi(7, 0), mi(1, _607))), mi(8, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI610), concatenateMInt(mi(7, 0), MI607)), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _609) )
echo Debug:  Result: "RBX" |-> (MI609 )
echo Debug:  PreResult: "ZF" |-> (mi(1, 0)   )
echo Debug:  Result: "ZF" |-> (mi(1, 0)   )
[4m[1m[34mwriteKDefn cmovgeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovgeq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovgw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovgw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovgw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgw_r16_r16.s[0m
Circuit: cmovlew %bx, %cx
%of -> 1
%cx -> 1
%bx -> 1
cmov -> 1
%zf -> 1
%sf -> 1

Circuit: xaddw %bx, %cx
%af -> 1
%zf -> 1
%sf -> 1
%bx -> 1
%pf -> 1
%of -> 1
%cf -> 1
%cx -> 1

Total Circuit
PF -> 1
CF -> 1
RCX -> 1
AF -> 1
SF -> 1
 -> 1
RBX -> 1
OF -> 1
ZF -> 1

Target
RBX -> 1
OF -> 1
ZF -> 1
RCX -> 1
 -> 1
SF -> 1

[4m[1m[34mkprove cmovgw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovgw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovgw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovgw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(17, 0), addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _609), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _610), 48, 64)))), 0, 1) ) #else ( extractMInt(addMInt(mi(17, 0), addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _609), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _609), 48, 64)))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(17, 0), addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _609), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _609), 48, 64)))), 0, 1) ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(17, 0), addMInt(concatenateMInt(mi(1, 0), extractMInt(MI609, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI610, 48, 64)))), 0, 1) ) #else ( extractMInt(addMInt(mi(17, 0), addMInt(concatenateMInt(mi(1, 0), extractMInt(MI609, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI609, 48, 64)))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(17, 0), addMInt(concatenateMInt(mi(1, 0), extractMInt(MI609, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI609, 48, 64)))), 0, 1) ) #fi)  )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi)  )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(mi(64, _610), 48, 64) ) #else ( extractMInt(mi(64, _609), 48, 64) ) #fi) ) #else ( extractMInt(mi(64, _609), 48, 64) ) #fi) , extractMInt(mi(64, _609), 48, 64)), (#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))) ) #else ( addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))) ) #fi) ) #else ( addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))) ) #fi) ), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(MI610, 48, 64) ) #else ( extractMInt(MI609, 48, 64) ) #fi) ) #else ( extractMInt(MI609, 48, 64) ) #fi) , extractMInt(MI609, 48, 64)), (#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))) ) #else ( addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))) ) #fi) ) #else ( addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))) ) #fi) ), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))), 8, 16) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 8, 16) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 8, 16) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))), 8, 16) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 8, 16) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 8, 16) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _610), 0, 48), addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64)))) ) #else ( concatenateMInt(extractMInt(mi(64, _610), 0, 48), addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64)))) ) #fi) ) #else ( concatenateMInt(extractMInt(mi(64, _610), 0, 48), addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64)))) ) #fi)  )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI610, 0, 48), addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64)))) ) #else ( concatenateMInt(extractMInt(MI610, 0, 48), addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64)))) ) #fi) ) #else ( concatenateMInt(extractMInt(MI610, 0, 48), addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64)))) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _609)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI609) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( (#ifBool (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifBool (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( eqMInt(extractMInt(mi(64, _610), 48, 49), extractMInt(mi(64, _609), 48, 49)) ) #else ( eqMInt(extractMInt(mi(64, _609), 48, 49), extractMInt(mi(64, _609), 48, 49)) ) #fi) ) #else ( eqMInt(extractMInt(mi(64, _609), 48, 49), extractMInt(mi(64, _609), 48, 49)) ) #fi)  andBool   notBool  ( (#ifBool (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifBool (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( eqMInt(extractMInt(mi(64, _610), 48, 49), (#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) ) #else ( eqMInt(extractMInt(mi(64, _609), 48, 49), (#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) ) #fi) ) #else ( eqMInt(extractMInt(mi(64, _609), 48, 49), (#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), 0, 1) ) #fi) ) ) #fi)  )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( (#ifBool (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifBool (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( eqMInt(extractMInt(MI610, 48, 49), extractMInt(MI609, 48, 49)) ) #else ( eqMInt(extractMInt(MI609, 48, 49), extractMInt(MI609, 48, 49)) ) #fi) ) #else ( eqMInt(extractMInt(MI609, 48, 49), extractMInt(MI609, 48, 49)) ) #fi)  andBool   notBool  ( (#ifBool (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifBool (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( eqMInt(extractMInt(MI610, 48, 49), (#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) ) #else ( eqMInt(extractMInt(MI609, 48, 49), (#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) ) #fi) ) #else ( eqMInt(extractMInt(MI609, 48, 49), (#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))), 0, 1) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) #else ( extractMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), 0, 1) ) #fi) ) ) #fi)  )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _609), 0, 48), extractMInt(mi(64, _610), 48, 64)) ) #else ( mi(64, _609) ) #fi) ) #else ( mi(64, _609) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI609, 0, 48), extractMInt(MI610, 48, 64)) ) #else ( MI609 ) #fi) ) #else ( MI609 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(mi(1, _612), mi(1, 0)) ) #then ( (#ifBool (eqMInt(xorMInt(mi(1, _611), mi(1, _608)), mi(1, 0)) ) #then ( eqMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _610), 48, 64))), mi(16, 0)) ) #else ( eqMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), mi(16, 0)) ) #fi) ) #else ( eqMInt(addMInt(mi(16, 0), addMInt(extractMInt(mi(64, _609), 48, 64), extractMInt(mi(64, _609), 48, 64))), mi(16, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(MI612, mi(1, 0)) ) #then ( (#ifBool (eqMInt(xorMInt(MI611, MI608), mi(1, 0)) ) #then ( eqMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI610, 48, 64))), mi(16, 0)) ) #else ( eqMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), mi(16, 0)) ) #fi) ) #else ( eqMInt(addMInt(mi(16, 0), addMInt(extractMInt(MI609, 48, 64), extractMInt(MI609, 48, 64))), mi(16, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovgw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovgw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovlel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlel_r32_r32.s[0m
[4m[1m[34mcreatespec cmovlel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlel_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovlel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovlel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlel_r32_r32.s[0m
Circuit: cmovngl %ecx, %ebx
%zf -> 1
%ebx -> 1
%sf -> 1
%ecx -> 1
%rbx -> 1
cmov -> 1
%of -> 1

Total Circuit
RBX -> 1
ZF -> 1
OF -> 1
RCX -> 1
 -> 1
SF -> 1

Target
ZF -> 1
OF -> 1
RBX -> 1
 -> 1
SF -> 1
RCX -> 1

[4m[1m[34mkprove cmovlel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovlel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovlel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovlel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovlel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _608), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _607), mi(1, _604)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI608, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI607, MI604), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _608)   )
echo Debug:  Result: "ZF" |-> (MI608   )
[4m[1m[34mwriteKDefn cmovlel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovlel_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnaw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnaw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnaw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaw_r16_r16.s[0m
Circuit: cmovbew %cx, %bx
%cf -> 1
%cx -> 1
%bx -> 1
cmov -> 1
%zf -> 1

Total Circuit
CF -> 1
 -> 1
RCX -> 1
ZF -> 1
RBX -> 1

Target
ZF -> 1
RBX -> 1
 -> 1
RCX -> 1
CF -> 1

[4m[1m[34mkprove cmovnaw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnaw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnaw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnaw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _603))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _606), mi(1, 0)) ) #then ( mi(64, _604) ) #else ( concatenateMInt(extractMInt(mi(64, _604), 0, 48), extractMInt(mi(64, _605), 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(mi(64, _604), 0, 48), extractMInt(mi(64, _605), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI603)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI606, mi(1, 0)) ) #then ( MI604 ) #else ( concatenateMInt(extractMInt(MI604, 0, 48), extractMInt(MI605, 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(MI604, 0, 48), extractMInt(MI605, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _603) )
echo Debug:  Result: "CF" |-> (MI603 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _606) )
echo Debug:  Result: "ZF" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _605) )
echo Debug:  Result: "RCX" |-> (MI605 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _604))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI604)   )
[4m[1m[34mwriteKDefn cmovnaw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnaw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnaw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnbew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnbew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnbew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbew_r16_r16.s[0m
Circuit: cmovaw %cx, %bx
%bx -> 1
cmov -> 1
%cx -> 1
%cf -> 1
%zf -> 1

Total Circuit
 -> 1
RCX -> 1
CF -> 1
ZF -> 1
RBX -> 1

Target
 -> 1
RCX -> 1
CF -> 1
ZF -> 1
RBX -> 1

[4m[1m[34mkprove cmovnbew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnbew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnbew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnbew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _603))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _606), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _604), 0, 48), extractMInt(mi(64, _605), 48, 64)) ) #else ( mi(64, _604) ) #fi) ) #else ( mi(64, _604) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI603)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI606, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI604, 0, 48), extractMInt(MI605, 48, 64)) ) #else ( MI604 ) #fi) ) #else ( MI604 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _603) )
echo Debug:  Result: "CF" |-> (MI603 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _606) )
echo Debug:  Result: "ZF" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _605) )
echo Debug:  Result: "RCX" |-> (MI605 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _604))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI604)   )
[4m[1m[34mwriteKDefn cmovnbew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnbew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnbq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovnbq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnbq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbq_r64_r64.s[0m
Circuit: cmovncq %rcx, %rbx
%cf -> 1
%rbx -> 1
cmov -> 1
%rcx -> 1

Total Circuit
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
RBX -> 1
CF -> 1
RCX -> 1
 -> 1

[4m[1m[34mkprove cmovnbq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnbq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovnbq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnbq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _600))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _600))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(64, _602) ) #else ( mi(64, _601) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI600)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI600)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( MI602 ) #else ( MI601 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _600) )
echo Debug:  Result: "CF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovnbq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnbq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovncw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovncw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovncw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovncw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncw_r16_r16.s[0m
Circuit: cmovnbw %cx, %bx
%bx -> 1
cmov -> 1
%cf -> 1
%cx -> 1

Total Circuit
CF -> 1
 -> 1
RCX -> 1
RBX -> 1

Target
RCX -> 1
 -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove cmovncw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovncw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovncw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovncw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovncw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _601)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _602), 0, 48), extractMInt(mi(64, _603), 48, 64)) ) #else ( mi(64, _602) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI601), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI602, 0, 48), extractMInt(MI603, 48, 64)) ) #else ( MI602 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _601) )
echo Debug:  Result: "CF" |-> (MI601 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _603) )
echo Debug:  Result: "RCX" |-> (MI603 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _602))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI602)   )
[4m[1m[34mwriteKDefn cmovncw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovncw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovngw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovngw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovngw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngw_r16_r16.s[0m
Circuit: movzwl %cx, %edi
%rdi -> 1
%edi -> 1
%cx -> 1

Circuit: cmovngl %edi, %ebx
%zf -> 1
%ebx -> 1
%sf -> 1
cmov -> 1
%rbx -> 1
%of -> 1
%edi -> 1

Total Circuit
OF -> 1
ZF -> 1
RBX -> 1
SF -> 1
 -> 1
RCX -> 1
RDI -> 1

Target
RCX -> 1
 -> 1
SF -> 1
RBX -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove cmovngw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovngw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovngw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovngw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _609) )
echo Debug:  Result: "SF" |-> (MI609 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _608) )
echo Debug:  Result: "RCX" |-> (MI608 )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _608), 48, 64)) )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(48, 0), extractMInt(MI608, 48, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _607)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI607) )
echo Debug:  PreResult: "OF" |-> (mi(1, _606) )
echo Debug:  Result: "OF" |-> (MI606 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _610), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _609), mi(1, _606)), mi(1, 0)) ) #then ( mi(64, _607) ) #else ( concatenateMInt(extractMInt(mi(64, _607), 0, 48), extractMInt(mi(64, _608), 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(mi(64, _607), 0, 48), extractMInt(mi(64, _608), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI610, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI609, MI606), mi(1, 0)) ) #then ( MI607 ) #else ( concatenateMInt(extractMInt(MI607, 0, 48), extractMInt(MI608, 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(MI607, 0, 48), extractMInt(MI608, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _610)   )
echo Debug:  Result: "ZF" |-> (MI610   )
[4m[1m[34mwriteKDefn cmovngw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovngw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnlw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnlw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnlw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnlw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnlw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlw_r16_r16.s[0m
Circuit: movswl %cx, %edi
%rdi -> 1
%cx -> 1
%edi -> 1

Circuit: cmovgel %edi, %ebx
%edi -> 1
%of -> 1
%rbx -> 1
cmov -> 1
%sf -> 1
%ebx -> 1

Total Circuit
RCX -> 1
SF -> 1
 -> 1
RDI -> 1
RBX -> 1
OF -> 1

Target
RBX -> 1
OF -> 1
RCX -> 1
 -> 1
SF -> 1

[4m[1m[34mkprove cmovnlw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnlw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnlw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnlw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnlw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnlw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnlw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _606), 48, 64))), 32, 64)) )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI606, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _607), mi(1, _604)), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _605), 0, 48), extractMInt(mi(64, _606), 48, 64)) ) #else ( mi(64, _605) ) #fi)    )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI607, MI604), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI605, 0, 48), extractMInt(MI606, 48, 64)) ) #else ( MI605 ) #fi)    )
[4m[1m[34mwriteKDefn cmovnlw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnlw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpxchgb_rh_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_r8.s[0m
[4m[1m[34mcreatespec cmpxchgb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgb_rh_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgb_rh_r8: Check if May == Must[0m
Warn: [4m[1m[35mMay Write al does not belong to Must Write: cmpxchgb_rh_r8[0m
Warn: [4m[1m[35mMay Write bh does not belong to Must Write: cmpxchgb_rh_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_r8.s[0m
Circuit: movb %cl, %ah
%ah -> 1
%cl -> 1

Circuit: cmpxchgb %ah, %bh
%ax -> 1
%af -> 1
%zf -> 1
%al -> 1
%sf -> 1
%ah -> 1
%pf -> 1
%bh -> 1
%of -> 1
%cf -> 1

Total Circuit
RAX -> 1
AF -> 1
RCX -> 1
SF -> 1
CF -> 1
PF -> 1
RBX -> 1
ZF -> 1
OF -> 1

Target
CF -> 1
PF -> 1
RCX -> 1
RAX -> 1
AF -> 1
SF -> 1
RBX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove cmpxchgb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpxchgb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput cmpxchgb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgb_rh_r8: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmpxchgb_rh_r8[0m
Warn: [4m[1m[35mMay Write RAX does not belong to Must Write: cmpxchgb_rh_r8[0m
Warn: [4m[1m[35mcmpxchgb_rh_r8: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _620) )
echo Debug:  Result: "RCX" |-> (MI620 )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 56), extractMInt(mi(64, _619), 48, 56)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI618, 0, 56), extractMInt(MI619, 48, 56)) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _619) )
echo Debug:  Result: "RBX" |-> (MI619 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpxchgb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpxchgb_rh_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpxchgw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgw_r16_r16.s[0m
[4m[1m[34mcreatespec cmpxchgw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmpxchgw_r16_r16[0m
Warn: [4m[1m[35mMay Write ax does not belong to Must Write: cmpxchgw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgw_r16_r16.s[0m
Circuit: movzwl %bx, %r13d
%bx -> 1
%r13 -> 1
%r13d -> 1

Circuit: movzwq %ax, %r14
%ax -> 1
%r14 -> 1

Circuit: xaddw %ax, %r13w
%r13w -> 1
%zf -> 1
%sf -> 1
%af -> 1
%ax -> 1
%of -> 1
%cf -> 1
%pf -> 1

Circuit: cmpw %ax, %r14w
%pf -> 1
%r14w -> 1
%cf -> 1
%of -> 1
%af -> 1
%ax -> 1
%sf -> 1
%zf -> 1

Circuit: cmovzw %cx, %bx
cmov -> 1
%bx -> 1
%cx -> 1
%zf -> 1

Total Circuit
AF -> 1
RAX -> 1
RCX -> 1
 -> 1
SF -> 1
R13 -> 1
PF -> 1
CF -> 1
RBX -> 1
ZF -> 1
OF -> 1
R14 -> 1

Target
SF -> 1
RCX -> 1
RAX -> 1
AF -> 1
PF -> 1
CF -> 1
OF -> 1
ZF -> 1
RBX -> 1

[4m[1m[34mkprove cmpxchgw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpxchgw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmpxchgw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmpxchgw_r16_r16[0m
Warn: [4m[1m[35mMay Write RAX does not belong to Must Write: cmpxchgw_r16_r16[0m
Warn: [4m[1m[35mcmpxchgw_r16_r16: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _622) )
echo Debug:  Result: "RCX" |-> (MI622 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 48), extractMInt(mi(64, _621), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI620, 0, 48), extractMInt(MI621, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _621), 0, 48), extractMInt(mi(64, _622), 48, 64)) ) #else ( mi(64, _621) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI621, 0, 48), extractMInt(MI622, 48, 64)) ) #else ( MI621 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "R14" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _620), 48, 64)) )
echo Debug:  Result: "R14" |-> (concatenateMInt(mi(48, 0), extractMInt(MI620, 48, 64)) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(48, 0), addMInt(addMInt(extractMInt(mi(64, _621), 48, 64), extractMInt(mi(64, _620), 48, 64)), mi(16, 0))) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(48, 0), addMInt(addMInt(extractMInt(MI621, 48, 64), extractMInt(MI620, 48, 64)), mi(16, 0))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), xorMInt(mi(1, 1), extractMInt(mi(64, _621), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _620), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _620), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _620), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _621), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), xorMInt(mi(1, 1), extractMInt(MI621, 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI620, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI620, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI621, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI620, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI621, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn cmpxchgw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpxchgw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movmskps_r32_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskps_r32_xmm.s[0m
[4m[1m[34mcreatespec movmskps_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskps_r32_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskps_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovmskps_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskps_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskps_r32_xmm.s[0m
Circuit: movq $0x0, %rbx
\$0x0 -> 1
%rbx -> 1

Circuit: vmovmskps %xmm1, %r13d
avx -> 1
%xmm1 -> 1
%r13d -> 1
%r13 -> 1

Circuit: xchgw %bx, %r13w
%r13w -> 1
%bx -> 1

Total Circuit
RBX -> 1
YMM1 -> 1
R13 -> 1
 -> 1

Target
YMM1 -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove movmskps_r32_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskps_r32_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movmskps_r32_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movmskps_r32_xmm[0m
[4m[1m[34msanitizeSpecOutput movmskps_r32_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovmskps_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, 0) )
echo Debug:  Result: "RBX" |-> (mi(64, 0) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _600) )
echo Debug:  Result: "YMM1" |-> (MI600 )
echo Debug:  PreResult: "R13" |-> (mi(64, 0)   )
echo Debug:  Result: "R13" |-> (mi(64, 0)   )
[4m[1m[34mwriteKDefn movmskps_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movmskps_r32_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movmskps_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rorw_r16_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorw_r16_one.s[0m
[4m[1m[34mcreatespec rorw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorw_r16_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrorw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorw_r16_one.s[0m
Circuit: sarw $0x1, %bx
%cf -> 1
%of -> 1
%pf -> 1
\$0x1 -> 1
%bx -> 1
%sf -> 1
%zf -> 1
%af -> 1

Circuit: rclb $0x1, %bh
%of -> 1
%bh -> 1
%cf -> 1
\$0x1 -> 1

Circuit: rorb $0x1, %bh
%bh -> 1
%of -> 1
%cf -> 1
\$0x1 -> 1

Total Circuit
ZF -> 1
OF -> 1
RBX -> 1
PF -> 1
CF -> 1
SF -> 1
 -> 1
AF -> 1

Target
CF -> 1
 -> 1
OF -> 1
RBX -> 1

[4m[1m[34mkprove rorw_r16_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorw_r16_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorw_r16_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rorw_r16_one[0m
[4m[1m[34msanitizeSpecOutput rorw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrorw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _607)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI607) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _607), 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(mi(64, _607), 63, 64)))))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI607, 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64))), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 48, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))), 32, 64)), mi(32, 0)), 16, 24)), concatenateMInt(mi(7, 0), extractMInt(MI607, 63, 64)))))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rorw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rorw_r16_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shrxl_r32_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shrxl_r32_r32_r32.s[0m
[4m[1m[34mcreatespec shrxl_r32_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shrxl_r32_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shrxl_r32_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshrxl_r32_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shrxl_r32_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shrxl_r32_r32_r32.s[0m
Circuit: movd %ecx, %xmm3
sse2 -> 1
%ecx -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm3_r8_r9
%r8 -> 1
%r9 -> 1
%xmm3 -> 1

Circuit: tzcntl %r9d, %r13d
%af -> 1
%r13d -> 1
%r9d -> 1
%r13 -> 1
%zf -> 1
%sf -> 1
bmi1 -> 1
%pf -> 1
%of -> 1
%cf -> 1

Circuit: andnl %edx, %r13d, %edi
%r13d -> 1
%af -> 1
%rdi -> 1
bmi1 -> 1
%sf -> 1
%zf -> 1
%edx -> 1
%pf -> 1
%edi -> 1
%cf -> 1
%of -> 1

Circuit: shrxq %rdi, %r8, %rbx
%rbx -> 1
bmi2 -> 1
%rdi -> 1
%r8 -> 1

Total Circuit
YMM3 -> 1
RBX -> 1
R9 -> 1
ZF -> 1
OF -> 1
RDX -> 1
R13 -> 1
PF -> 1
CF -> 1
RDI -> 1
R8 -> 1
AF -> 1
RCX -> 1
SF -> 1
 -> 1

Target
 -> 1
RCX -> 1
RDX -> 1
RBX -> 1

[4m[1m[34mkprove shrxl_r32_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shrxl_r32_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shrxl_r32_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shrxl_r32_r32_r32[0m
[4m[1m[34msanitizeSpecOutput shrxl_r32_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshrxl_r32_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _612), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI612, 32, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _612) )
echo Debug:  Result: "RCX" |-> (MI612 )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RDX" |-> (mi(64, _613) )
echo Debug:  Result: "RDX" |-> (MI613 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (ultMInt(andMInt(xorMInt(mi(8, 32), orMInt(mi(8, 32), extractMInt(mi(64, _613), 56, 64))), mi(8, 63)), mi(8, 64)) ) #then ( lshrMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _612), 32, 64)), uvalueMInt(andMInt(xorMInt(mi(8, 32), orMInt(mi(8, 32), extractMInt(mi(64, _613), 56, 64))), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (ultMInt(andMInt(xorMInt(mi(8, 32), orMInt(mi(8, 32), extractMInt(MI613, 56, 64))), mi(8, 63)), mi(8, 64)) ) #then ( lshrMInt(concatenateMInt(mi(32, 0), extractMInt(MI612, 32, 64)), uvalueMInt(andMInt(xorMInt(mi(8, 32), orMInt(mi(8, 32), extractMInt(MI613, 56, 64))), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(32, 32), orMInt(mi(32, 32), extractMInt(mi(64, _613), 32, 64))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(32, 32), orMInt(mi(32, 32), extractMInt(MI613, 32, 64))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (xorMInt(mi(1, 0), extractMInt(mi(64, _613), 32, 33)) )
echo Debug:  Result: "SF" |-> (xorMInt(mi(1, 0), extractMInt(MI613, 32, 33)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _612), 32, 64)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(224, 0), extractMInt(MI612, 32, 64)) )
echo Debug:  PreResult: "R13" |-> (mi(64, 32) )
echo Debug:  Result: "R13" |-> (mi(64, 32) )
echo Debug:  PreResult: "PF" |-> (undef )
echo Debug:  Result: "PF" |-> (undef )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(32, 0), xorMInt(mi(32, 32), orMInt(mi(32, 32), extractMInt(mi(64, _613), 32, 64)))) )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(32, 0), xorMInt(mi(32, 32), orMInt(mi(32, 32), extractMInt(MI613, 32, 64)))) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn shrxl_r32_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shrxl_r32_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shrxl_r32_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: tzcntw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntw_r16_r16.s[0m
[4m[1m[34mcreatespec tzcntw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_tzcntw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtzcntw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: tzcntw_r16_r16[0m
Undef Set
af -> 1
sf -> 1
of -> 1
pf -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntw_r16_r16.s[0m
Circuit: movswl %cx, %eax
%rax -> 1
%cx -> 1
%eax -> 1

Circuit: tzcntl %eax, %ebx
%af -> 1
%eax -> 1
%zf -> 1
%ebx -> 1
%sf -> 1
bmi1 -> 1
%pf -> 1
%rbx -> 1
%of -> 1
%cf -> 1

Circuit: movq $0x10, %r12
\$0x10 -> 1
%r12 -> 1

Circuit: cmovnael %r12d, %ebx
%rbx -> 1
cmov -> 1
%cf -> 1
%r12d -> 1
%ebx -> 1

Total Circuit
R12 -> 1
RBX -> 1
ZF -> 1
OF -> 1
CF -> 1
PF -> 1
RAX -> 1
AF -> 1
RCX -> 1
 -> 1
SF -> 1

Target
RBX -> 1
ZF -> 1
OF -> 1
CF -> 1
PF -> 1
AF -> 1
RCX -> 1
SF -> 1
 -> 1

[4m[1m[34mkprove tzcntw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_tzcntw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_tzcntw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput tzcntw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput tzcntw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtzcntw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (mi(64, 16) )
echo Debug:  Result: "R12" |-> (mi(64, 16) )
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (undef )
echo Debug:  Result: "SF" |-> (undef )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (mi(64, _618) )
echo Debug:  Result: "RCX" |-> (MI618 )
echo Debug:  PreResult: "PF" |-> (undef )
echo Debug:  Result: "PF" |-> (undef )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> (undef )
echo Debug:  Result: "OF" |-> (undef )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _617), 0, 48), extractMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), 16, 32)) ) #else ( concatenateMInt(extractMInt(mi(64, _617), 0, 48), mi(16, 16)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI617, 0, 48), extractMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), 16, 32)) ) #else ( concatenateMInt(extractMInt(MI617, 0, 48), mi(16, 16)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn tzcntw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-tzcntw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsubadd231pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd231pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmsubadd231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsubadd231pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd231pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsubadd231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd231pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd231pd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm9 -> 1
%xmm1 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm10 -> 1

Circuit: vminpd %xmm1, %xmm1, %xmm8
%ymm8 -> 1
%xmm1 -> 1
avx -> 1
%xmm8 -> 1

Circuit: vfnmsub132sd %xmm11, %xmm8, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm11 -> 1
%xmm8 -> 1
fma -> 1

Circuit: vfmsub231pd %xmm3, %xmm2, %xmm1
%xmm3 -> 1
%xmm1 -> 1
%ymm1 -> 1
%xmm2 -> 1
fma -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
YMM11 -> 1
YMM8 -> 1
YMM1 -> 1
YMM9 -> 1
 -> 1
YMM10 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vfmsubadd231pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsubadd231pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsubadd231pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsubadd231pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsubadd231pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsubadd231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) )  -Float  ( negateFloat( ( MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11)  *Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 128, 160)), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) )  -Float  ( negateFloat( ( MInt2Float(extractMInt(MI604, 192, 256), 53, 11)  *Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 128, 160)), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _604), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI604, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _604), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI604, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606) )
echo Debug:  Result: "YMM3" |-> (MI606 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _604), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI604, 128, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _604), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI604, 192, 224))   )
[4m[1m[34mwriteKDefn vfmsubadd231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsubadd231pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd231pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhaddps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vhaddps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_ymm_ymm_ymm.s[0m
Circuit: callq .move_256_128_ymm2_xmm10_xmm11
%ymm2 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: haddps %xmm3, %xmm10
%xmm3 -> 1
%xmm10 -> 1
pni -> 1

Circuit: callq .move_256_128_ymm3_xmm8_xmm9
%xmm8 -> 1
%ymm3 -> 1
%xmm9 -> 1

Circuit: haddps %xmm9, %xmm11
%xmm9 -> 1
pni -> 1
%xmm11 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%xmm11 -> 1
%xmm10 -> 1
%ymm1 -> 1

Total Circuit
YMM10 -> 1
 -> 1
YMM1 -> 1
YMM9 -> 1
YMM8 -> 1
YMM3 -> 1
YMM2 -> 1
YMM11 -> 1

Target
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vhaddps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhaddps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vhaddps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8) ) , 32))), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 96, 128), 24, 8) ) , 32))), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 96, 128), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606) )
echo Debug:  Result: "YMM3" |-> (MI606 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _606), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI606, 128, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _606), 0, 128))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), extractMInt(MI606, 0, 128))   )
[4m[1m[34mwriteKDefn vhaddps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhaddps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vphsubd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vphsubd_xmm_xmm_xmm.s[0m
vphsubd_xmm_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttps2dq_xmm_xmm.k
Warn: [4m[1m[35mvphsubd_xmm_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vpmovzxwd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwd_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpmovzxwd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxwd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxwd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwd_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm5 -> 1
%xmm7 -> 1
%xmm6 -> 1
%xmm2 -> 1
%xmm4 -> 1

Circuit: vpmovzxwq %xmm5, %xmm13
%xmm13 -> 1
%ymm13 -> 1
%xmm5 -> 1
avx -> 1

Circuit: movddup %xmm4, %xmm4
pni -> 1
%xmm4 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm3
%xmm5 -> 1
%xmm7 -> 1
%xmm3 -> 1
%xmm6 -> 1
%xmm4 -> 1

Circuit: vpmovzxwq %xmm3, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1
%xmm3 -> 1

Circuit: vhsubps %xmm13, %xmm1, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1
%xmm13 -> 1

Total Circuit
YMM7 -> 1
YMM3 -> 1
YMM2 -> 1
YMM6 -> 1
YMM13 -> 1
YMM1 -> 1
YMM5 -> 1
 -> 1
YMM4 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpmovzxwd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxwd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxwd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovzxwd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovzxwd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxwd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(mi(256, _605), 192, 208)), concatenateMInt(mi(16, 0), extractMInt(mi(256, _605), 208, 224))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(mi(256, _605), 224, 240)), concatenateMInt(mi(16, 0), extractMInt(mi(256, _605), 240, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(MI605, 192, 208)), concatenateMInt(mi(16, 0), extractMInt(MI605, 208, 224))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(MI605, 224, 240)), concatenateMInt(mi(16, 0), extractMInt(MI605, 240, 256))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(256, _605), 192, 208)), concatenateMInt(mi(48, 0), extractMInt(mi(256, _605), 208, 224)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI605, 192, 208)), concatenateMInt(mi(48, 0), extractMInt(MI605, 208, 224)))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 224, 256)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 224, 256)))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 224, 256)), concatenateMInt(mi(32, 0), extractMInt(MI605, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _605), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI605, 128, 256)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 128, 160)) )
[4m[1m[34mwriteKDefn vpmovzxwd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovzxwd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

