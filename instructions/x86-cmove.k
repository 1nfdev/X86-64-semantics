// Autogenerated from templates.
requires "x86-configuration.k"
requires "x86-flag-checks-syntax.k"

/*@ This file defines the semantics of following 51 base instructions.
  -  cmoveq_r64_r64
*/

module CMOVE-R64-R64
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  // Unroll START
  rule <k> 
    execinstr ( cmoveq , (%rax ,  (%rax , .Typedoperands)) ) => .
  ...</k>
  rule <k> 
    execinstr ( cmoveq , (%rbx ,  (%rbx , .Typedoperands)) ) => .
  ...</k>
  rule <k> 
    execinstr ( cmoveq , (%rcx ,  (%rcx , .Typedoperands)) ) => .
  ...</k>
  // Unroll END

  // Unroll START
  rule <k> 
    execinstr ( cmoveq , (%rbx ,  (%rax , .Typedoperands)) ) => .
  ...</k>
  <zf> ZI </zf>
  requires zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rcx ,  (%rax , .Typedoperands)) ) => .
  ...</k>
  <zf> ZI </zf>
  requires zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rax ,  (%rbx , .Typedoperands)) ) => .
  ...</k>
  <zf> ZI </zf>
  requires zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rcx ,  (%rbx , .Typedoperands)) ) => .
  ...</k>
  <zf> ZI </zf>
  requires zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rax ,  (%rcx , .Typedoperands)) ) => .
  ...</k>
  <zf> ZI </zf>
  requires zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rbx ,  (%rcx , .Typedoperands)) ) => .
  ...</k>
  <zf> ZI </zf>
  requires zeroMInt(ZI)
  // Unroll END

  // Unroll START
  rule <k> 
    execinstr ( cmoveq , (%rbx ,  (%rax , .Typedoperands)) ) => 
      updateReg(MI, %rax)
  ...</k>
  <rbx> MI </rbx>
  <zf> ZI </zf>
    requires  notBool zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rcx ,  (%rax , .Typedoperands)) ) => 
      updateReg(MI, %rax)
  ...</k>
  <rcx> MI </rcx>
  <zf> ZI </zf>
    requires  notBool zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rax ,  (%rbx , .Typedoperands)) ) => 
      updateReg(MI, %rbx)
  ...</k>
  <rax> MI </rax>
  <zf> ZI </zf>
    requires  notBool zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rcx ,  (%rbx , .Typedoperands)) ) => 
      updateReg(MI, %rbx)
  ...</k>
  <rcx> MI </rcx>
  <zf> ZI </zf>
    requires  notBool zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rax ,  (%rcx , .Typedoperands)) ) => 
      updateReg(MI, %rcx)
  ...</k>
  <rax> MI </rax>
  <zf> ZI </zf>
    requires  notBool zeroMInt(ZI)
  rule <k> 
    execinstr ( cmoveq , (%rbx ,  (%rcx , .Typedoperands)) ) => 
      updateReg(MI, %rcx)
  ...</k>
  <rbx> MI </rbx>
  <zf> ZI </zf>
    requires  notBool zeroMInt(ZI)
  // Unroll END

endmodule

module CMOVE-SEMANTICS
  imports CMOVE-R64-R64
endmodule
