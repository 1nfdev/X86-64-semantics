// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - orq_r64_r64,
*/

module OR-R64-R64
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k> 
    execinstr (orq, (%rax ,  (%rax , .Typedoperands)) ) => 
      execinstr(orq, (%rax, MI, MI, MI, .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (orq, (%rbx ,  (%rbx , .Typedoperands)) ) => 
      execinstr(orq, (%rbx, MI, MI, MI, .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (orq, (%rcx ,  (%rcx , .Typedoperands)) ) => 
      execinstr(orq, (%rcx, MI, MI, MI, .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>

  rule <k> 
    execinstr ( orq , (%rbx ,  (%rax , .Typedoperands)) ) =>
      execinstr(orq, (%rax, MIsrc1, MIsrc2, orMInt(MIsrc1, MIsrc2), .Typedoperands)) 
  ...</k>
  <rbx> MIsrc1 </rbx>
  <rax> MIsrc2 </rax>
  rule <k> 
    execinstr ( orq , (%rcx ,  (%rax , .Typedoperands)) ) =>
      execinstr(orq, (%rax, MIsrc1, MIsrc2, orMInt(MIsrc1, MIsrc2), .Typedoperands)) 
  ...</k>
  <rcx> MIsrc1 </rcx>
  <rax> MIsrc2 </rax>
  rule <k> 
    execinstr ( orq , (%rax ,  (%rbx , .Typedoperands)) ) =>
      execinstr(orq, (%rbx, MIsrc1, MIsrc2, orMInt(MIsrc1, MIsrc2), .Typedoperands)) 
  ...</k>
  <rax> MIsrc1 </rax>
  <rbx> MIsrc2 </rbx>
  rule <k> 
    execinstr ( orq , (%rcx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(orq, (%rbx, MIsrc1, MIsrc2, orMInt(MIsrc1, MIsrc2), .Typedoperands)) 
  ...</k>
  <rcx> MIsrc1 </rcx>
  <rbx> MIsrc2 </rbx>
  rule <k> 
    execinstr ( orq , (%rax ,  (%rcx , .Typedoperands)) ) =>
      execinstr(orq, (%rcx, MIsrc1, MIsrc2, orMInt(MIsrc1, MIsrc2), .Typedoperands)) 
  ...</k>
  <rax> MIsrc1 </rax>
  <rcx> MIsrc2 </rcx>
  rule <k> 
    execinstr ( orq , (%rbx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(orq, (%rcx, MIsrc1, MIsrc2, orMInt(MIsrc1, MIsrc2), .Typedoperands)) 
  ...</k>
  <rbx> MIsrc1 </rbx>
  <rcx> MIsrc2 </rcx>
  // Unroll END

  rule
      execinstr(orq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      setOverflow(mi(1,0)) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      setAuxCarryFlag(mi(1,1)) ~> 
      setCarryFlag(mi(1,0)) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(MIresult, DestR) 

endmodule

module OR-SEMANTICS
  imports OR-R64-R64
endmodule
