// Autogenerated from templates.
requires "x86-configuration.k"
requires "x86-flag-checks-syntax.k"

/*@ This file defines the semantics of following 316 pseudo instructions.
  - Set Clear status flags (12)
  - Move Status Flag (22)
  - Set sf, zf and pf according to result (4)
  - Move Moving a single byte. (152)
  - 128 bit reg <-> 32 bit reg (18)
  - Split and combine registers.(108)
*/

module SET-CLEAR-STATUS-FLAGS
  // syntax KItem ::= setFlag(MInt, String) 
endmodule

module MOV-STATUS-FLAGS
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  syntax Abstractinstruction ::= writeRegisterToFlag(R8, String)
  syntax Abstractinstruction ::= readFlagToRegister(String, R64)

  rule <k>
    writeRegisterToFlag(R:R8, FL) => setFlag(getRegisterBitsAtPositon(R, 1, 0, RSMap), FL)
  ...</k>
    <regstate> RSMap </regstate>

  rule <k>
    readFlagToRegister(FL, R) => setRegisterValue(zeroExtend(getFlag(FL, RSMap), getRegisterSize(R)), R)
  ...</k>
    <regstate> RSMap </regstate>
endmodule

module UPDATE-STATUS-FLAGS
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  syntax Abstractinstruction ::= setSZPForRegister(Register)

  rule <k>
    setSZPForRegister(R) => 
      updateSignFlag(getRegisterValue(R,   RSMap)) ~>
      updateZeroFlag(getRegisterValue(R,   RSMap)) ~>
      updateParityFlag(getRegisterValue(R, RSMap)) 
  ...</k>
    <regstate> RSMap </regstate>

endmodule

module SPLIT-COMBINE-XMMS
  imports X86-CONFIGURATION
  
  // ----------------------------------------------------------------------------
  // moves the lowest 32 bits of xmm to R1, the next 32 bits to
  //  R2, the next to R3 and the highest 32 bits to R4.
  // ----------------------------------------------------------------------------
  syntax Abstractinstruction ::= splitXmmtoRegsIn32(Xmm, Register, Register, Register, Register)

  rule <k>
    splitXmmtoRegsIn32(X, R1, R2, R3, R4) => 
        setRegisterValue(zeroExtend(extractMask(getRegisterValue(X, RSMap), 32,  0),  getRegisterSize(R1)), R1) ~>
        setRegisterValue(zeroExtend(extractMask(getRegisterValue(X, RSMap), 32, 32),  getRegisterSize(R2)), R2) ~>
        setRegisterValue(zeroExtend(extractMask(getRegisterValue(X, RSMap), 32, 64),  getRegisterSize(R3)), R3) ~>
        setRegisterValue(zeroExtend(extractMask(getRegisterValue(X, RSMap), 32, 96),  getRegisterSize(R4)), R4) 
  ...</k>
    <regstate> RSMap </regstate>
      requires  getRegisterSize(R1) >=Int 32 andBool
                getRegisterSize(R2) >=Int 32 andBool
                getRegisterSize(R3) >=Int 32 andBool
                getRegisterSize(R4) >=Int 32 


  // ----------------------------------------------------------------------------
  // moves the lowest 32 bits of R1 to X[31-0]
  // moves the lowest 32 bits of R2 to X[63-32]
  // moves the lowest 32 bits of R3 to X[95-64]
  // moves the lowest 32 bits of R4 to X[128-96]
  // ----------------------------------------------------------------------------
  syntax Abstractinstruction ::= combineRegsIn32ToXmm(Register, Register, Register, Register, Xmm)

  rule <k>
    combineRegsIn32ToXmm(R1, R2, R3, R4, X) => 
      setRegisterValue(
        concatenateMInt(  
          concatenateMInt(extractMask(getRegisterValue(R4, RSMap), 32, 0), extractMask(getRegisterValue(R3, RSMap), 32, 0)), 
          concatenateMInt(extractMask(getRegisterValue(R2, RSMap), 32, 0), extractMask(getRegisterValue(R1, RSMap), 32, 0)) 
        ), 
      X)
  ...</k>
    <regstate> RSMap </regstate>
      requires  getRegisterSize(R1) >=Int 32 andBool
                getRegisterSize(R2) >=Int 32 andBool
                getRegisterSize(R3) >=Int 32 andBool
                getRegisterSize(R4) >=Int 32 
endmodule

module SPLIT-COMBINE-2N
  imports X86-CONFIGURATION

  // ----------------------------------------------------------------------------
  // split the value of a 2N-bit register R1 to 2 N-bit registers R2(low N-bits) and R3(high N-bits)
  // ----------------------------------------------------------------------------
  syntax Abstractinstruction ::= split2NToN(Register, Register, Register)
  rule <k>
    split2NToN(R1, R2, R3) => 
        setRegisterValue(
          extractMask(getRegisterValue(R1, RSMap), getRegisterSize(R1) /Int 2, 0), 
          R2
        ) ~>
        setRegisterValue(
          extractMask(getRegisterValue(R1, RSMap), getRegisterSize(R1) /Int 2, getRegisterSize(R1) /Int 2), 
          R3
        ) 
  ...</k>
    <regstate> RSMap </regstate>
      requires getRegisterSize(R1) ==Int (getRegisterSize(R2) +Int getRegisterSize(R3))

  // ----------------------------------------------------------------------------
  // moves the lowest n bits of R1 to R3[n-1:0]
  // moves the lowest n bits of R2 to R3[2n-1:n]
  // ----------------------------------------------------------------------------
  syntax Abstractinstruction ::= combineNTo2N(Register, Register, Register)

  rule <k>
    combineNTo2N(R1, R2, R3) => 
      setRegisterValue(
        concatenateMInt(getRegisterValue(R2, RSMap), getRegisterValue(R1, RSMap)), 
        R3
      ) 
  ...</k>
    <regstate> RSMap </regstate>
      requires getRegisterSize(R3) ==Int (getRegisterSize(R1) +Int getRegisterSize(R2))


endmodule

module MOV-SINGLE-BYTE
  imports X86-CONFIGURATION

  // ----------------------------------------------------------------------------
  // Mov the value in 1-byte register to a specific byte number B in an n-byte register.
  // ----------------------------------------------------------------------------
  syntax Abstractinstruction ::= movByteToPosOfReg(R8, Int, Register)
  rule <k>
    movByteToPosOfReg(R1, BNUM, R2) => setRegisterBitsAtPositon(getRegisterValue(R1, RSMap), R2, (BNUM -Int 1) *Int 8)
  ...</k>
    <regstate> RSMap </regstate>
      requires getRegisterSize(R1) ==Int 8

  // ----------------------------------------------------------------------------
  // Mov the byte value in n-byte register at byte position number B to a  1-byte register.
  // ----------------------------------------------------------------------------
  syntax Abstractinstruction ::= movPosOfRegToByte(Int, Register, R8)
  rule <k>
    movPosOfRegToByte(BNUM, R1, R2) => setRegisterValue(getRegisterBitsAtPositon(R1, 8, (BNUM -Int 1) *Int 8, RSMap), R2)
  ...</k>
    <regstate> RSMap </regstate>
      requires getRegisterSize(R2) ==Int 8
endmodule

module PSEUDO-INSTR-SEMANTICS
  imports SET-CLEAR-STATUS-FLAGS
  imports MOV-STATUS-FLAGS
  imports UPDATE-STATUS-FLAGS
  imports SPLIT-COMBINE-XMMS
  imports SPLIT-COMBINE-2N
  imports MOV-SINGLE-BYTE
endmodule
