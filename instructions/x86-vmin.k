// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - vminpd_ymm_ymm_ymm, vminps_ymm_ymm_ymm,
*/

module VMINPD_YMM_YMM_YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k>
    execinstr ( minpd , %ymm1 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( minpd , %ymm2 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( minpd , %ymm3 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( minpd , %ymm1 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( minpd , %ymm1 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( minpd , %ymm2 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( minpd , %ymm2 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( minpd , %ymm3 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( minpd , %ymm3 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( minpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmin, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  rule <k> execinstr(minpd, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule

module VMINPS_YMM_YMM_YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k>
    execinstr ( minps , %ymm1 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( minps , %ymm2 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( minps , %ymm3 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( minps , %ymm1 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( minps , %ymm1 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( minps , %ymm2 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( minps , %ymm2 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( minps , %ymm3 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( minps , %ymm3 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( minps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmin, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  rule <k> execinstr(minps, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule


module VMIN-SEMANTICS
  imports VMINPD_YMM_YMM_YMM
  imports VMINPS_YMM_YMM_YMM
endmodule
