// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 56, 57)), extractMInt(getParentValue(R1, RSMap), 48, 49)), xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 56, 57))) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 56, 64))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ANDB-R8-RH-SEMANTICS
  imports ANDB-R8-RH
endmodule
/*
TargetInstr:
andb %ah, %bl
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %bl %cf %pf %zf %sf %of }
must write:{ %bl %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:notb %bl       #  1     0    2      OPC=notb_r8
circuit:orb %bl, %ah   #  2     0x2  2      OPC=orb_rh_r8
circuit:xorb %ah, %bl  #  3     0x4  2      OPC=xorb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andb %ah, %bl

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (^ (^ <%rbx|64>[7:0] <0xff|8>) (| <%rax|64>[15:8] (^ <%rbx|64>[7:0] <0xff|8>))))

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (^ (^ <%rbx|64>[0:0] <0x1|1>) (| <%rax|64>[8:8] (^ <%rbx|64>[0:0] <0x1|1>))) <0x1|1>) (== (^ (^ <%rbx|64>[1:1] <0x1|1>) (| <%rax|64>[9:9] (^ <%rbx|64>[1:1] <0x1|1>))) <0x1|1>)) (== (^ (^ <%rbx|64>[2:2] <0x1|1>) (| <%rax|64>[10:10] (^ <%rbx|64>[2:2] <0x1|1>))) <0x1|1>)) (== (^ (^ <%rbx|64>[3:3] <0x1|1>) (| <%rax|64>[11:11] (^ <%rbx|64>[3:3] <0x1|1>))) <0x1|1>)) (== (^ (^ <%rbx|64>[4:4] <0x1|1>) (| <%rax|64>[12:12] (^ <%rbx|64>[4:4] <0x1|1>))) <0x1|1>)) (== (^ (^ <%rbx|64>[5:5] <0x1|1>) (| <%rax|64>[13:13] (^ <%rbx|64>[5:5] <0x1|1>))) <0x1|1>)) (== (^ (^ <%rbx|64>[6:6] <0x1|1>) (| <%rax|64>[14:14] (^ <%rbx|64>[6:6] <0x1|1>))) <0x1|1>)) (== (^ (^ <%rbx|64>[7:7] <0x1|1>) (| <%rax|64>[15:15] (^ <%rbx|64>[7:7] <0x1|1>))) <0x1|1>)))
%zf    : (== (^ (^ <%rbx|64>[7:0] <0xff|8>) (| <%rax|64>[15:8] (^ <%rbx|64>[7:0] <0xff|8>))) <0x0|8>)
%sf    : (== (^ (^ <%rbx|64>[7:7] <0x1|1>) (| <%rax|64>[15:15] (^ <%rbx|64>[7:7] <0x1|1>))) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/