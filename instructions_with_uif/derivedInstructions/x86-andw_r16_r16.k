// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (extractMInt(mi(64, svalueMInt(concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 48, 56)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 48, 56))), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64))))))), 0, 1) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 48, 56)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 48, 56))), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))) )

 "ZF" |-> ((#ifMInt (eqMInt(mi(64, svalueMInt(concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 48, 56)), extractMInt(getParentValue(R1, RSMap), 48, 56)), xorMInt(mi(8, 255), extractMInt(getParentValue(R2, RSMap), 48, 56))), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64))))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ANDW-R16-R16-SEMANTICS
  imports ANDW-R16-R16
endmodule
/*
TargetInstr:
andw %cx, %bx
RWSet:
maybe read:{ %cx %bx }
must read:{ %cx %bx }
maybe write:{ %bx %cf %pf %zf %sf %of }
must write:{ %bx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:andb %ch, %bh  #  1     0    2      OPC=andb_rh_rh
circuit:andb %cl, %bl  #  2     0x2  2      OPC=andb_r8_r8
circuit:orw %bx, %bx   #  3     0x4  3      OPC=orw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (concat (^ (^ <%rbx|64>[15:8] <0xff|8>) (| <%rcx|64>[15:8] (^ <%rbx|64>[15:8] <0xff|8>))) (^ (^ (| <%rbx|64>[7:0] <%rcx|64>[7:0]) <%rcx|64>[7:0]) <%rbx|64>[7:0])))

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (^ (^ (| <%rbx|64>[0:0] <%rcx|64>[0:0]) <%rcx|64>[0:0]) <%rbx|64>[0:0]) <0x1|1>) (== (^ (^ (| <%rbx|64>[1:1] <%rcx|64>[1:1]) <%rcx|64>[1:1]) <%rbx|64>[1:1]) <0x1|1>)) (== (^ (^ (| <%rbx|64>[2:2] <%rcx|64>[2:2]) <%rcx|64>[2:2]) <%rbx|64>[2:2]) <0x1|1>)) (== (^ (^ (| <%rbx|64>[3:3] <%rcx|64>[3:3]) <%rcx|64>[3:3]) <%rbx|64>[3:3]) <0x1|1>)) (== (^ (^ (| <%rbx|64>[4:4] <%rcx|64>[4:4]) <%rcx|64>[4:4]) <%rbx|64>[4:4]) <0x1|1>)) (== (^ (^ (| <%rbx|64>[5:5] <%rcx|64>[5:5]) <%rcx|64>[5:5]) <%rbx|64>[5:5]) <0x1|1>)) (== (^ (^ (| <%rbx|64>[6:6] <%rcx|64>[6:6]) <%rcx|64>[6:6]) <%rbx|64>[6:6]) <0x1|1>)) (== (^ (^ (| <%rbx|64>[7:7] <%rcx|64>[7:7]) <%rcx|64>[7:7]) <%rbx|64>[7:7]) <0x1|1>)))
%zf    : (== (sign-extend-64 (concat (^ (^ <%rbx|64>[15:8] <0xff|8>) (| <%rcx|64>[15:8] (^ <%rbx|64>[15:8] <0xff|8>))) (^ (^ (| <%rbx|64>[7:0] <%rcx|64>[7:0]) <%rcx|64>[7:0]) <%rbx|64>[7:0]))) <0x0|64>)
%sf    : (== (sign-extend-64 (concat (^ (^ <%rbx|64>[15:8] <0xff|8>) (| <%rcx|64>[15:8] (^ <%rbx|64>[15:8] <0xff|8>))) (^ (^ (| <%rbx|64>[7:0] <%rcx|64>[7:0]) <%rcx|64>[7:0]) <%rbx|64>[7:0])))[63:63] <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/