// Autogenerated using stratification.
requires "x86-configuration.k"

module CLTD
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cltd  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RDX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) )


)

    </regstate>
endmodule

module CLTD-SEMANTICS
  imports CLTD
endmodule
/*
TargetInstr:
cltd
RWSet:
maybe read:{ %eax }
must read:{ %eax }
maybe write:{ %rdx }
must write:{ %rdx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:cltq                                      #  1     0     2      OPC=cltq
circuit:vmovq %rax, %xmm2                         #  2     0x2   5      OPC=vmovq_xmm_r64
circuit:callq .move_128_032_xmm2_eax_edx_r8d_r9d  #  3     0x7   5      OPC=callq_label
circuit:andnl %r9d, %r9d, %ecx                    #  4     0xc   5      OPC=andnl_r32_r32_r32
circuit:adcl %ecx, %edx                           #  5     0x11  2      OPC=adcl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cltd 

  maybe read:      { %eax }
  must read:       { %eax }
  maybe write:     { %rdx }
  must write:      { %rdx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rdx   : (concat <0x0|32> (^ <0x0|32> (sign-extend-64 <%rax|64>[31:0])[63:32]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/