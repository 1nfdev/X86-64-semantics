// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPXCHGB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpxchgb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(%rax, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255))), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)) ) #else ( getParentValue(R2, RSMap) ) #fi)  )

 "RAX" |-> (getParentValue(%rax, RSMap) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 2) )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(%rax, RSMap), 56, 57), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), mi(1, 1)))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(%rax, RSMap), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )


)

    </regstate>
endmodule

module CMPXCHGB-R8-RH-SEMANTICS
  imports CMPXCHGB-R8-RH
endmodule
/*
TargetInstr:
cmpxchgb %bh, %cl
RWSet:
maybe read:{ %al %cl %bh }
must read:{ %al %cl %bh }
maybe write:{ %al %cl %cf %pf %af %zf %sf %of }
must write:{ %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbw %bh, %si     #  1     0    4      OPC=movzbw_r16_rh
circuit:cmpxchgb %sil, %cl  #  2     0x4  4      OPC=cmpxchgb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpxchgb %bh, %cl

  maybe read:      { %al %cl %bh }
  must read:       { %al %cl %bh }
  maybe write:     { %al %cl %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat <%rax|64>[63:8] <%rcx|64>[7:0])
%rcx   : (concat <%rcx|64>[63:8] (if (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[7:0] <0x0|8>) then <%rbx|64>[15:8] else <%rcx|64>[7:0]))

%cf    : (== (plus (if (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[8:8] <0x1|1>) then <0x0|9> else <0xff|9>) (if (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[8:8] <0x1|1>) then <0x0|9> else <0xff|9>))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[0:0] <0x1|1>) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[1:1] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[2:2] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[3:3] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[4:4] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[5:5] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[6:6] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> <%rax|64>[3:0]) (concat <0x0|1> (^ <0xf|4> <%rcx|64>[3:0])))[4:4] <0x1|1>)
%zf    : (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[7:0] <0x0|8>)
%sf    : (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[7:7] <0x1|1>)
%of    : (and (== (== <%rax|64>[7:7] <0x1|1>) (== (^ <0x1|1> <%rcx|64>[7:7]) <0x1|1>)) (not (== (== <%rax|64>[7:7] <0x1|1>) (== (plus (plus (concat <0x0|1> <%rax|64>[7:0]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rcx|64>[7:0])))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/