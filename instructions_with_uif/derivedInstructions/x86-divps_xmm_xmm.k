// Autogenerated using stratification.
requires "x86-configuration.k"

module DIVPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (divps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt( div_single ( extractMInt(getParentValue(R1, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 128, 160) ) ,  div_single ( extractMInt(getParentValue(R1, RSMap), 160, 192), extractMInt(getParentValue(R2, RSMap), 160, 192) ) ), concatenateMInt( div_single ( extractMInt(getParentValue(R1, RSMap), 192, 224), extractMInt(getParentValue(R2, RSMap), 192, 224) ) ,  div_single ( extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R2, RSMap), 224, 256) ) ))) )


)

    </regstate>
endmodule

module DIVPS-XMM-XMM-SEMANTICS
  imports DIVPS-XMM-XMM
endmodule
/*
TargetInstr:
divps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vmovupd %xmm2, %xmm5               #  1     0     4      OPC=vmovupd_xmm_xmm
circuit:vmovupd %xmm1, %xmm6               #  2     0x4   4      OPC=vmovupd_xmm_xmm
circuit:vdivps %ymm5, %ymm6, %ymm2         #  3     0x8   4      OPC=vdivps_ymm_ymm_ymm
circuit:callq .move_128_64_xmm2_xmm8_xmm9  #  4     0xc   5      OPC=callq_label
circuit:callq .move_64_128_xmm8_xmm9_xmm1  #  5     0x11  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

divps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat div_single(<%ymm1|256>[127:96], <%ymm2|256>[127:96]) (concat div_single(<%ymm1|256>[95:64], <%ymm2|256>[95:64]) (concat div_single(<%ymm1|256>[63:32], <%ymm2|256>[63:32]) div_single(<%ymm1|256>[31:0], <%ymm2|256>[31:0])))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/