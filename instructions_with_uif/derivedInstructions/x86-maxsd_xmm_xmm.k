// Autogenerated using stratification.
requires "x86-configuration.k"

module MAXSD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (maxsd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 192),  maxcmp_double ( extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256) ) ) )


)

    </regstate>
endmodule

module MAXSD-XMM-XMM-SEMANTICS
  imports MAXSD-XMM-XMM
endmodule
/*
TargetInstr:
maxsd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vmaxsd %xmm2, %xmm1, %xmm6  #  1     0    4      OPC=vmaxsd_xmm_xmm_xmm
circuit:movupd %xmm6, %xmm1         #  2     0x4  4      OPC=movupd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

maxsd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat <%ymm1|256>[127:64] (if (== maxcmp_double(<%ymm1|256>[63:0], <%ymm2|256>[63:0]) <0x1|1>) then <%ymm1|256>[63:0] else <%ymm2|256>[63:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/