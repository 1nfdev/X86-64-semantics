// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negb R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 10) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17), extractMInt(getParentValue(R1, RSMap), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 10), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(17, 1)), 9, 17), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module NEGB-R8-SEMANTICS
  imports NEGB-R8
endmodule
/*
TargetInstr:
negb %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %pf %af %zf %sf %of }
must write:{ %bl %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %bl, %r14d      #  1     0     4      OPC=movzbl_r32_r8
circuit:negw %r14w             #  2     0x4   4      OPC=negw_r16
circuit:xaddb %bl, %r14b       #  3     0x8   4      OPC=xaddb_r8_r8
circuit:callq .set_szp_for_bl  #  4     0xc   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

negb %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:0])

%cf    : (== (plus (concat <0x0|1> (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:0]) (concat <0x0|1> <%rbx|64>[7:0]))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[0:0] <0x1|1>) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[1:1] <0x1|1>)) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[2:2] <0x1|1>)) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[3:3] <0x1|1>)) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[4:4] <0x1|1>)) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[5:5] <0x1|1>)) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[6:6] <0x1|1>)) (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[3:0]) (concat <0x0|1> <%rbx|64>[3:0]))[4:4] <0x1|1>)
%zf    : (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:0] <0x0|8>)
%sf    : (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:7] <0x1|1>)
%of    : (and (== (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:7] <0x1|1>) (== <%rbx|64>[7:7] <0x1|1>)) (not (== (== (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:7] <0x1|1>) (== (plus (concat <0x0|1> (plus <0x1|17> (concat <0x0|1> (^ (concat <0x0|8> <%rbx|64>[7:0]) <0xffff|16>)))[7:0]) (concat <0x0|1> <%rbx|64>[7:0]))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/