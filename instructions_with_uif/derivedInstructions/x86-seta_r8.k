// Autogenerated using stratification.
requires "x86-configuration.k"

module SETA-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (seta R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("ZF", RSMap))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 1, 9)), mi(17, 4)), 1, 9)) ) #fi)  )


)

    </regstate>
endmodule

module SETA-R8-SEMANTICS
  imports SETA-R8
endmodule
/*
TargetInstr:
seta %bl
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:seta %bh          #  1     0    3      OPC=seta_rh
circuit:movsbl %bh, %ebx  #  2     0x3  3      OPC=movsbl_r32_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

seta %bl

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if (== (if <%zf> then <0x0|8> else <0xff|8>) <0x0|8>) then <0x0|8> else (if <%cf> then <0x0|8> else <0x1|8>)))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/