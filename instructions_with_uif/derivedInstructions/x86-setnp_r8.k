// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNP-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnp R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), getFlag("PF", RSMap)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #fi)  )


)

    </regstate>
endmodule

module SETNP-R8-SEMANTICS
  imports SETNP-R8
endmodule
/*
TargetInstr:
setnp %bl
RWSet:
maybe read:{ %pf }
must read:{ %pf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_pf_into_rbx  #  1     0    5      OPC=callq_label
circuit:callq .set_szp_for_bx    #  2     0x5  5      OPC=callq_label
circuit:callq .read_zf_into_rbx  #  3     0xa  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnp %bl

  maybe read:      { %pf }
  must read:       { %pf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if (== (if <%pf> then <0x1|16> else <0x0|16>) <0x0|16>) then <0x1|8> else <0x0|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/