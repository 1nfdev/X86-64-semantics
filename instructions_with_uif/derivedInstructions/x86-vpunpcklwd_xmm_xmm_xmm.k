// Autogenerated using stratification.
requires "x86-configuration.k"

module VPUNPCKLWD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpunpcklwd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 224), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 208, 224), extractMInt(getParentValue(R1, RSMap), 208, 224)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 192, 208)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 208, 224)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 240, 256), extractMInt(getParentValue(R1, RSMap), 240, 256)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 224, 240)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 240, 256)))))) )


)

    </regstate>
endmodule

module VPUNPCKLWD-XMM-XMM-XMM-SEMANTICS
  imports VPUNPCKLWD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vpunpcklwd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:punpcklwd %xmm3, %xmm2          #  1     0     4      OPC=punpcklwd_xmm_xmm
circuit:callq .move_128_064_xmm2_r8_r9  #  2     0x4   5      OPC=callq_label
circuit:vzeroall                        #  3     0x9   3      OPC=vzeroall
circuit:callq .move_064_128_r8_r9_xmm1  #  4     0xc   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpunpcklwd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|128> (concat (^ (concat (concat <0x0|16> <%ymm2|256>[63:48]) (concat <0x0|16> <%ymm2|256>[47:32])) (^ (concat (concat <0x0|16> <%ymm3|256>[47:32]) (concat <0x0|16> <%ymm3|256>[47:32])) (| (concat <%ymm3|256>[63:32] (concat <%ymm3|256>[47:32] <%ymm3|256>[47:32])) (concat (concat <0x0|16> <%ymm3|256>[47:32]) (concat <0x0|16> <%ymm3|256>[47:32]))))) (^ (concat (concat <0x0|16> <%ymm2|256>[31:16]) (concat <0x0|16> <%ymm2|256>[15:0])) (^ (concat (concat <0x0|16> <%ymm3|256>[15:0]) (concat <0x0|16> <%ymm3|256>[15:0])) (| (concat <%ymm3|256>[31:0] (concat <%ymm3|256>[15:0] <%ymm3|256>[15:0])) (concat (concat <0x0|16> <%ymm3|256>[15:0]) (concat <0x0|16> <%ymm3|256>[15:0])))))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/