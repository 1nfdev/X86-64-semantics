// Autogenerated using stratification.
requires "x86-configuration.k"

module XORB-RH-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorb R1:R8, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R1, RSMap), 56, 57)) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module XORB-RH-R8-SEMANTICS
  imports XORB-RH-R8
endmodule
/*
TargetInstr:
xorb %bl, %ah
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %ah %cf %pf %zf %sf %of }
must write:{ %ah %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movq $0x4, %rdi    #  1     0     10     OPC=movq_r64_imm64
circuit:shlb $0x1, %dil    #  2     0xa   3      OPC=shlb_r8_one
circuit:xorq %r8, %r8      #  3     0xd   3      OPC=xorq_r64_r64
circuit:xorb %ah, %bl      #  4     0x10  2      OPC=xorb_r8_rh
circuit:popcntw %r8w, %ax  #  5     0x12  6      OPC=popcntw_r16_r16
circuit:xaddb %ah, %bl     #  6     0x18  3      OPC=xaddb_r8_rh
circuit:rcll $0x1, %edi    #  7     0x1b  2      OPC=rcll_r32_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xorb %bl, %ah

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (^ <%rbx|64>[7:0] <%rax|64>[15:8])) <%rax|64>[7:0])

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (^ <%rbx|64>[0:0] <%rax|64>[8:8]) <0x1|1>) (== (^ <%rbx|64>[1:1] <%rax|64>[9:9]) <0x1|1>)) (== (^ <%rbx|64>[2:2] <%rax|64>[10:10]) <0x1|1>)) (== (^ <%rbx|64>[3:3] <%rax|64>[11:11]) <0x1|1>)) (== (^ <%rbx|64>[4:4] <%rax|64>[12:12]) <0x1|1>)) (== (^ <%rbx|64>[5:5] <%rax|64>[13:13]) <0x1|1>)) (== (^ <%rbx|64>[6:6] <%rax|64>[14:14]) <0x1|1>)) (== (^ <%rbx|64>[7:7] <%rax|64>[15:15]) <0x1|1>)))
%zf    : (== (^ <%rbx|64>[7:0] <%rax|64>[15:8]) <0x0|8>)
%sf    : (== (^ <%rbx|64>[7:7] <%rax|64>[15:15]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/