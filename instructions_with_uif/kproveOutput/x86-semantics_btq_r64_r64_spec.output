-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _73_739:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _78_744:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _72_738:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_741:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _77_743:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_740:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_737:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _76_742:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _79_745:K@SORT-K   ),, <regstatequeue>(_80_746:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, typeoperandlist(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))),, String@STRING-SYNTAX(#""OF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, String@STRING-SYNTAX(#""ZF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, String@STRING-SYNTAX(#""SF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, String@STRING-SYNTAX(#""ZF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, String@STRING-SYNTAX(#""SF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, String@STRING-SYNTAX(#""SF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(addMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'-1")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0"),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0"),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0"),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0"),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_735:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for ashrMInt
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
68.36user 0.88system 0:18.75elapsed 369%CPU (0avgtext+0avgdata 1629480maxresident)k
24inputs+3800outputs (0major+390179minor)pagefaults 0swaps
