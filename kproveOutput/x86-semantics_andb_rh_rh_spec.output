-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movsbw(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(andb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_651:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _75_655:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _81_661:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _74_654:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _77_657:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _73_653:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _76_656:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _80_660:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_652:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _78_658:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _79_659:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _82_662:K@SORT-K   ),, <regstatequeue>(_83_663:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movsbw(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(andb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_651:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsbw(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(andb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_651:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(andb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_651:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"49"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"49"))),, xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"49")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"49"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"49"))),, xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"49")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(xorMInt(orMInt(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_648:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_649:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
113.09user 1.58system 0:27.47elapsed 417%CPU (0avgtext+0avgdata 2783304maxresident)k
0inputs+3736outputs (0major+625293minor)pagefaults 0swaps
