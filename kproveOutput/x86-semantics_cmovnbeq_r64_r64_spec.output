-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(setna(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovzq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _74_645:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _80_651:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _73_644:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _76_647:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _79_650:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _75_646:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_643:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _77_648:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _78_649:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _81_652:K@SORT-K   ),, <regstatequeue>(_82_653:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setna(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovzq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovzq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, MInt@MINT(#"8'0"))),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, MInt@MINT(#"8'0")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovzq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(notBool_(eqMInt(MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(notBool_(eqMInt(MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(notBool_(eqMInt(MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(notBool_(eqMInt(MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(notBool_(eqMInt(MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, mi(Int@INT-SYNTAX(#"64"),, ?I3_641:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I2_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_639:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I4_642:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
61.04user 1.04system 0:17.74elapsed 349%CPU (0avgtext+0avgdata 1882104maxresident)k
0inputs+3720outputs (0major+422778minor)pagefaults 0swaps
