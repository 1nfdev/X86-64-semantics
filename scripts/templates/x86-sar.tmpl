// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - sarq_r64_cl
*/
module SAR-R64-CL
  imports X86-SEMANTIC-UTILS

  rule <k> 
    execinstr ( sarq , (%cl,  (%rcx , .Typedoperands)) ) =>
      execinstr ( sarq , (%rcx ,  (MI, shiftCountMask(extractMask(MI, 8, 0), bitwidthMInt(MI)) , .Typedoperands)) )
  ...</k>
  <rcx> MI </rcx>

  // Unroll START
Unroll START PATTERN-14
  rule <k> 
    execinstr ( sarq , (%cl,  (%REG64 , .Typedoperands)) ) =>
      execinstr ( sarq , (%REG64 ,  (MI, shiftCountMask(extractMask(MIrcx, 8, 0), bitwidthMInt(MI)), .Typedoperands)) )
  ...</k>
  <REG64> MI </REG64>
  <rcx> MIrcx </rcx>
Unroll END
  // Unroll END

  // If MIcount == 0, no flags are affected
  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , .Typedoperands)) ) => .
    requires zeroMInt(MIcount)
    
  // If MIcount == 1
  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , .Typedoperands)) ) => 
    execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , ashrMInt(MIsrc, 1), .Typedoperands)) ) 
  requires eqMInt(MIcount, mi(bitwidthMInt(MIcount),1))

  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , MIresult, .Typedoperands)) ) =>
      setOverflow(mi(1,0)) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      setAuxCarryFlag(undef) ~> 
      setCarryFlag(getBit(MIsrc, 0)) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(MIresult, DestR:R64) 
    requires eqMInt(MIcount, mi(bitwidthMInt(MIcount),1))
  
  // If MIcount < bitwidth(MIsrc)
  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , .Typedoperands)) ) =>
    execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , ashrMInt(MIsrc, uvalueMInt(MIcount) -Int 1), 
                ashrMInt(MIsrc, uvalueMInt(MIcount)), .Typedoperands)) ) 
      requires  notBool zeroMInt(MIcount) andBool 
                neMInt(MIcount, mi(bitwidthMInt(MIcount),1)) andBool 
                ultMInt(MIcount, mi(bitwidthMInt(MIcount),bitwidthMInt(MIsrc)))

  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , MIintermed, MIresult, .Typedoperands)) ) =>
      setOverflow(undef) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      setAuxCarryFlag(undef) ~> 
      setCarryFlag(getBit(MIintermed, 0)) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(MIresult, DestR:R64) 
    requires  notBool zeroMInt(MIcount) andBool 
              neMInt(MIcount, mi(bitwidthMInt(MIcount),1)) andBool 
              ultMInt(MIcount, mi(bitwidthMInt(MIcount),bitwidthMInt(MIsrc)))

  // If MIcount >= bitwidth(MIsrc)
  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , .Typedoperands)) ) =>
    execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , sarOverflow(MIsrc),  .Typedoperands)) )
      requires  notBool zeroMInt(MIcount) andBool 
                neMInt(MIcount, mi(bitwidthMInt(MIcount),1)) andBool 
                ugeMInt(MIcount, mi(bitwidthMInt(MIcount),bitwidthMInt(MIsrc)))

  rule
  execinstr ( sarq , (DestR:R64 ,  (MIsrc, MIcount , MIresult, .Typedoperands)) ) =>
      setOverflow(undef) ~> 
      setZeroFlag(MIresult) ~> 
      setSignFlag(MIresult) ~> 
      setAuxCarryFlag(undef) ~> 
      setCarryFlag(getSignBit(MIsrc)) ~> 
      setParityFlag(MIresult) ~> 
      updateReg(MIresult, DestR:R64) 
      requires  notBool zeroMInt(MIcount) andBool 
                neMInt(MIcount, mi(bitwidthMInt(MIcount),1)) andBool 
                ugeMInt(MIcount, mi(bitwidthMInt(MIcount),bitwidthMInt(MIsrc)))
endmodule

module SAR-SEMANTICS
  imports  SAR-R64-CL
endmodule
