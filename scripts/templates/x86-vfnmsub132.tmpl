// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - vfnmsub132pd_ymm_ymm_ymm, vfnmsub132ps_ymm_ymm_ymm,
*/

module VFNMSUB132PD-YMM-YMM-YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
Unroll START PATTERN-15
  rule <k>
    execinstr ( fnmsub132pd , %YMM ,  %YMM , %YMM, .Typedoperands) =>
      execinstr( fnmsub132pd, %YMM, 
      joinVector(
        operateOnVector(
          splitVector(MI, 64), 
          operateOnVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64), vfnegate, 64), 
          vfsub, 64)
      ), 
      .Typedoperands)
  ...</k>
  <YMM> MI </YMM>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-16
  rule <k>
    execinstr ( fnmsub132pd , %YMM2 ,  %YMM2 , %YMM1, .Typedoperands) =>
      execinstr( fnmsub132pd, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI2, 64), 
          operateOnVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfnegate, 64), 
          vfsub, 64)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-16
  rule <k>
    execinstr ( fnmsub132pd , %YMM2 ,  %YMM1 , %YMM1, .Typedoperands) =>
      execinstr( fnmsub132pd, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI1, 64), 
          operateOnVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfnegate, 64), 
          vfsub, 64)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-16
  rule <k>
    execinstr ( fnmsub132pd , %YMM1 ,  %YMM2, %YMM1, .Typedoperands) =>
      execinstr( fnmsub132pd, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI2, 64), 
          operateOnVector(operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfnegate, 64), 
          vfsub, 64)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-17
  rule <k>
    execinstr ( fnmsub132pd , %YMM3 ,  %YMM2 , %YMM1, .Typedoperands) =>
      execinstr( fnmsub132pd, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI2, 64), 
          operateOnVector(operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfnegate, 64), 
          vfsub, 64)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
  <YMM3> MI3 </YMM3>
Unroll END
  // Unroll END

  rule <k> execinstr(fnmsub132pd, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule

module VFNMSUB132PS-YMM-YMM-YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
Unroll START PATTERN-15
  rule <k>
    execinstr ( fnmsub132ps , %YMM ,  %YMM , %YMM, .Typedoperands) =>
      execinstr( fnmsub132ps, %YMM, 
      joinVector(
        operateOnVector(
          splitVector(MI, 32), 
          operateOnVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32), vfnegate, 32), 
          vfsub, 32)
      ), 
      .Typedoperands)
  ...</k>
  <YMM> MI </YMM>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-16
  rule <k>
    execinstr ( fnmsub132ps , %YMM2 ,  %YMM2 , %YMM1, .Typedoperands) =>
      execinstr( fnmsub132ps, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI2, 32), 
          operateOnVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfnegate, 32), 
          vfsub, 32)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-16
  rule <k>
    execinstr ( fnmsub132ps , %YMM2 ,  %YMM1 , %YMM1, .Typedoperands) =>
      execinstr( fnmsub132ps, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI1, 32), 
          operateOnVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfnegate, 32), 
          vfsub, 32)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-16
  rule <k>
    execinstr ( fnmsub132ps , %YMM1 ,  %YMM2, %YMM1, .Typedoperands) =>
      execinstr( fnmsub132ps, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI2, 32), 
          operateOnVector(operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfnegate, 32), 
          vfsub, 32)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-17
  rule <k>
    execinstr ( fnmsub132ps , %YMM3 ,  %YMM2 , %YMM1, .Typedoperands) =>
      execinstr( fnmsub132ps, %YMM1, 
      joinVector(
        operateOnVector(
          splitVector(MI2, 32), 
          operateOnVector(operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfnegate, 32), 
          vfsub, 32)
      ), 
      .Typedoperands)
  ...</k>
  <YMM1> MI1 </YMM1>
  <YMM2> MI2 </YMM2>
  <YMM3> MI3 </YMM3>
Unroll END
  // Unroll END

  rule <k> execinstr(fnmsub132ps, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => upsateReg(MIsrc, DestR) ...</k>
endmodule

module VFNMSUB132-SEMANTICS
  imports VFNMSUB132PD-YMM-YMM-YMM
  imports VFNMSUB132PS-YMM-YMM-YMM
endmodule
