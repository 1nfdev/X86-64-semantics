// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDB-RH-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andb I1_8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), handleImmediateWithSignExtend(I1_8, 8, 8 )), extractMInt(getParentValue(R2, RSMap), 48, 49)), xorMInt(mi(1, 1), handleImmediateWithSignExtend(I1_8, 8, 8 ))) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), handleImmediateWithSignExtend(I1_8, 8, 8 )), extractMInt(getParentValue(R2, RSMap), 48, 56)), xorMInt(mi(8, 255), handleImmediateWithSignExtend(I1_8, 8, 8 ))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), handleImmediateWithSignExtend(I1_8, 8, 8 )), extractMInt(getParentValue(R2, RSMap), 48, 56)), xorMInt(mi(8, 255), handleImmediateWithSignExtend(I1_8, 8, 8 ))), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), handleImmediateWithSignExtend(I1_8, 8, 8 )), extractMInt(getParentValue(R2, RSMap), 48, 56)), xorMInt(mi(8, 255), handleImmediateWithSignExtend(I1_8, 8, 8 ))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
