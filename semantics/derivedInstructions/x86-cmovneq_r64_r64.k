// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNEQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovneq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), getFlag("ZF", RSMap)), concatenateMInt(mi(8, 0), getFlag("ZF", RSMap))), 1, 9), mi(8, 0)) ) #then ( getParentValue(R1, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNEQ-R64-R64-SEMANTICS
  imports CMOVNEQ-R64-R64
endmodule
/*
TargetInstr:
cmovneq %rcx, %rbx
RWSet:
maybe read:{ %rcx %zf }
must read:{ %rcx %zf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setz %dh           #  1     0    3      OPC=setz_rh
circuit:salb $0x1, %dh     #  2     0x3  2      OPC=salb_rh_one
circuit:cmoveq %rcx, %rbx  #  3     0x5  4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovneq %rcx, %rbx

  maybe read:      { %rcx %zf }
  must read:       { %rcx %zf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : ((%zf ? 0x1₉ : 0x0₉) + (%zf ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/