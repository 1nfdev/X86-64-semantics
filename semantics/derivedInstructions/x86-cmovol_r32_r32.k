// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVOL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovol R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("OF", RSMap))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVOL-R32-R32-SEMANTICS
  imports CMOVOL-R32-R32
endmodule
/*
TargetInstr:
cmovol %ecx, %ebx
RWSet:
maybe read:{ %ecx %of }
must read:{ %ecx %of }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:seto %r9b          #  1     0    4      OPC=seto_r8
circuit:decb %r9b          #  2     0x4  3      OPC=decb_r8
circuit:cmovzl %ecx, %ebx  #  3     0x7  3      OPC=cmovzl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovol %ecx, %ebx

  maybe read:      { %ecx %of }
  must read:       { %ecx %of }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : 0x0₃₂ ∘ ((%of ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx[31:0] : %rbx[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/