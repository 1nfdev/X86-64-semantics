// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVSW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovsw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(32, 0), getFlag("SF", RSMap)), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVSW-R16-R16-SEMANTICS
  imports CMOVSW-R16-R16
endmodule
/*
TargetInstr:
cmovsw %cx, %bx
RWSet:
maybe read:{ %cx %sf }
must read:{ %cx %sf }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovnsw %bx, %cx  #  1     0    4      OPC=cmovnsw_r16_r16
circuit:xchgw %bx, %cx    #  2     0x4  3      OPC=xchgw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovsw %cx, %bx

  maybe read:      { %cx %sf }
  must read:       { %cx %sf }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : %rbx[63:16] ∘ ((%sf ? 0x0₃₂ : 0xffffffff₃₂) = 0x0₃₂ ? %rcx[15:0] : %rbx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/