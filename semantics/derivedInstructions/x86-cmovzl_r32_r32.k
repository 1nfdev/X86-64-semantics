// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVZL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovzl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVZL-R32-R32-SEMANTICS
  imports CMOVZL-R32-R32
endmodule
/*
TargetInstr:
cmovzl %ecx, %ebx
RWSet:
maybe read:{ %ecx %zf }
must read:{ %ecx %zf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:movl %ecx, %esi    #  1     0    2      OPC=movl_r32_r32
circuit:cmovel %esi, %ebx  #  2     0x2  3      OPC=cmovel_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovzl %ecx, %ebx

  maybe read:      { %ecx %zf }
  must read:       { %ecx %zf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : 0x0₃₂ ∘ (%zf ? %rcx[31:0] : %rbx[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/