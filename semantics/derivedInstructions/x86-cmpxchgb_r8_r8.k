// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPXCHGB-R8-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpxchgb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(%rax, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255))), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(%rax, RSMap), 56, 57), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), mi(1, 1)))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(%rax, RSMap), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "RAX" |-> (concatenateMInt(extractMInt(getParentValue(%rax, RSMap), 0, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)) )

convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires notBool sameRegisters(R2, "RAX")

  rule <k>
    execinstr (cmpxchgb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(%rax, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255))), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(%rax, RSMap), 56, 57), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), mi(1, 1)))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(%rax, RSMap), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "RAX" |-> (concatenateMInt(extractMInt(getParentValue(%rax, RSMap), 0, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)) )

convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(%rax, RSMap), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires sameRegisters(R2, "RAX")
    
endmodule

module CMPXCHGB-R8-R8-SEMANTICS
  imports CMPXCHGB-R8-R8
endmodule
/*
TargetInstr:
cmpxchgb %cl, %bl
RWSet:
maybe read:{ %al %cl %bl }
must read:{ %al %cl %bl }
maybe write:{ %al %bl %cf %pf %af %zf %sf %of }
must write:{ %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %bl, %ah      #  1     0    2      OPC=movb_rh_r8
circuit:cmpxchgb %cl, %ah  #  2     0x2  3      OPC=cmpxchgb_rh_r8
circuit:movsbl %ah, %ebx   #  3     0x5  3      OPC=movsbl_r32_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpxchgb %cl, %bl

  maybe read:      { %al %cl %bl }
  must read:       { %al %cl %bl }
  maybe write:     { %al %bl %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:8] ∘ %rbx[7:0]
%rbx   : %rbx[63:8] ∘ ((0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[7:0] = 0x0₈ ? %rcx[7:0] : %rbx[7:0])

%cf    : (((0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[8:8] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[8:8] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rax[3:0] + 0x0₁ ∘ (0xf₄ ⊕ %rbx[3:0]))[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[7:7] = 0x1₁
%of    : (%rax[7:7] = 0x1₁ ↔ (0x1₁ ⊕ %rbx[7:7]) = 0x1₁) ∧ !(%rax[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rax[7:0] + 0x1₉ + 0x0₁ ∘ (0xff₈ ⊕ %rbx[7:0]))[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/
