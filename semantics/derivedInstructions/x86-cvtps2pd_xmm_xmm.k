// Autogenerated using stratification.
requires "x86-configuration.k"

module CVTPS2PD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cvtps2pd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)), 64))) )


)

    </regstate>
endmodule

module CVTPS2PD-XMM-XMM-SEMANTICS
  imports CVTPS2PD-XMM-XMM
endmodule
/*
TargetInstr:
cvtps2pd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %mxcsr::rc[0] }
must read:{ %xmm2 %mxcsr::rc[0] }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vcvtps2pd %xmm2, %ymm13  #  1     0    4      OPC=vcvtps2pd_ymm_xmm
circuit:movaps %xmm13, %xmm1     #  2     0x4  4      OPC=movaps_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cvtps2pd %xmm2, %xmm1

  maybe read:      { %xmm2 %mxcsr::rc[0] }
  must read:       { %xmm2 %mxcsr::rc[0] }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (cvt_single_to_double(%ymm2[63:32]) ∘ cvt_single_to_double(%ymm2[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/