// Autogenerated using stratification.
requires "x86-configuration.k"

module DECL-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (decl R1:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(33, 4294967295)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), mi(32, -1)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(33, 4294967295)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(33, 4294967295)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R1, RSMap), 32, 33), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R1, RSMap), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(33, 4294967295)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(33, 4294967295)), 1, 33)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module DECL-R32-SEMANTICS
  imports DECL-R32
endmodule
/*
TargetInstr:
decl %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx %pf %af %zf %sf %of }
must write:{ %rbx %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xffffffffffffffff, %rcx  #  1     0    10     OPC=movq_r64_imm64
circuit:xchgl %ebx, %ebx                #  2     0xa  2      OPC=xchgl_r32_r32
circuit:xaddl %ecx, %ebx                #  3     0xc  3      OPC=xaddl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

decl %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %pf %af %zf %sf %of }
  must write:      { %rbx %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : 0x0₃₂ ∘ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[31:0]

%pf    : !((0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rbx[3:0] + 0xf₅)[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf    : (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of    : (%rbx[31:31] = 0x1₁ ↔ true) ∧ !(%rbx[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/