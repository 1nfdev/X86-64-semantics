// Autogenerated using stratification.
requires "x86-configuration.k"

module HSUBPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (hsubps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8) ) , 32))))) )


)

    </regstate>
endmodule

module HSUBPS-XMM-XMM-SEMANTICS
  imports HSUBPS-XMM-XMM
endmodule
/*
TargetInstr:
hsubps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ pni }

Circuit:
circuit:vpunpckldq %xmm2, %xmm1, %xmm8    #  1     0     4      OPC=vpunpckldq_xmm_xmm_xmm
circuit:vunpckhps %xmm2, %xmm1, %xmm10    #  2     0x4   4      OPC=vunpckhps_xmm_xmm_xmm
circuit:vpunpckldq %xmm10, %xmm8, %xmm15  #  3     0x8   5      OPC=vpunpckldq_xmm_xmm_xmm
circuit:punpckhdq %xmm10, %xmm8           #  4     0xd   5      OPC=punpckhdq_xmm_xmm
circuit:vsubps %xmm8, %xmm15, %xmm4       #  5     0x12  5      OPC=vsubps_xmm_xmm_xmm
circuit:movdqu %xmm4, %xmm1               #  6     0x17  4      OPC=movdqu_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

hsubps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { pni }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (sub_single(%ymm2[95:64], %ymm2[127:96]) ∘ sub_single(%ymm2[31:0], %ymm2[63:32]) ∘ (sub_single(%ymm1[95:64], %ymm1[127:96]) ∘ sub_single(%ymm1[31:0], %ymm1[63:32])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/