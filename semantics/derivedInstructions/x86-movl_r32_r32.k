// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) )


)

    </regstate>
endmodule

module MOVL-R32-R32-SEMANTICS
  imports MOVL-R32-R32
endmodule
/*
TargetInstr:
movl %ecx, %ebx
RWSet:
maybe read:{ %ecx }
must read:{ %ecx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x0, %rbx   #  1     0    10     OPC=movq_r64_imm64
circuit:xaddl %ebx, %ecx  #  2     0xa  3      OPC=xaddl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movl %ecx, %ebx

  maybe read:      { %ecx }
  must read:       { %ecx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : 0x0₃₂ ∘ %rcx[31:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/