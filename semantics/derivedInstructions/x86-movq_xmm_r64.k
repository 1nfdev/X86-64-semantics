// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVQ-XMM-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movq R1:R64, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(mi(64, 0), xorMInt(getParentValue(R1, RSMap), mi(64, 0)))) )


)

    </regstate>
endmodule

module MOVQ-XMM-R64-SEMANTICS
  imports MOVQ-XMM-R64
endmodule
/*
TargetInstr:
movq %rbx, %xmm1
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vmovq %rbx, %xmm6         #  1     0    5      OPC=vmovq_xmm_r64
circuit:vpor %xmm6, %xmm6, %xmm0  #  2     0x5  4      OPC=vpor_xmm_xmm_xmm
circuit:movupd %xmm0, %xmm1       #  3     0x9  4      OPC=movupd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movq %rbx, %xmm1

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (0x0₆₄ ∘ (0x0₆₄ ⊕ %rbx))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/