// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSBW-R16-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsbw R1:R8, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 56, 64))), 48, 64)) )


)

    </regstate>
endmodule

module MOVSBW-R16-R8-SEMANTICS
  imports MOVSBW-R16-R8
endmodule
/*
TargetInstr:
movsbw %cl, %bx
RWSet:
maybe read:{ %cl }
must read:{ %cl }
maybe write:{ %bx }
must write:{ %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xfffffffffffffff8, %rbx  #  1     0     10     OPC=movq_r64_imm64
circuit:xchgb %cl, %bh                  #  2     0xa   2      OPC=xchgb_rh_r8
circuit:movsbl %bh, %eax                #  3     0xc   3      OPC=movsbl_r32_rh
circuit:movw %ax, %bx                   #  4     0xf   3      OPC=movw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movsbw %cl, %bx

  maybe read:      { %cl }
  must read:       { %cl }
  maybe write:     { %bx }
  must write:      { %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:16] âˆ˜ sign-extend-64(%rcx[7:0])[15:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/