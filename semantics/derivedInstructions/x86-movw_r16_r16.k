// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) )


)

    </regstate>
endmodule

module MOVW-R16-R16-SEMANTICS
  imports MOVW-R16-R16
endmodule
/*
TargetInstr:
movw %cx, %bx
RWSet:
maybe read:{ %cx }
must read:{ %cx }
maybe write:{ %bx }
must write:{ %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movswq %cx, %rbx  #  1     0    4      OPC=movswq_r64_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movw %cx, %bx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %bx }
  must write:      { %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:16] âˆ˜ %rcx[15:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/