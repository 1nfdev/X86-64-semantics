// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVZBL-R32-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movzbl R1:R8, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(56, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)) )


)

    </regstate>
endmodule

module MOVZBL-R32-R8-SEMANTICS
  imports MOVZBL-R32-R8
endmodule
/*
TargetInstr:
movzbl %cl, %ebx
RWSet:
maybe read:{ %cl }
must read:{ %cl }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x8, %rbx                    #  1     0     10     OPC=movq_r64_imm64
circuit:callq .move_032_016_ebx_r10w_r11w  #  2     0xa   5      OPC=callq_label
circuit:addw %bx, %r10w                    #  3     0xf   4      OPC=addw_r16_r16
circuit:callq .read_pf_into_rbx            #  4     0x13  5      OPC=callq_label
circuit:adcb %cl, %bl                      #  5     0x18  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movzbl %cl, %ebx

  maybe read:      { %cl }
  must read:       { %cl }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : 0x0₅₆ ∘ %rcx[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/