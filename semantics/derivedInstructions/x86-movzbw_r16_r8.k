// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVZBW-R16-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movzbw R1:R8, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module MOVZBW-R16-R8-SEMANTICS
  imports MOVZBW-R16-R8
endmodule
/*
TargetInstr:
movzbw %cl, %bx
RWSet:
maybe read:{ %cl }
must read:{ %cl }
maybe write:{ %bx }
must write:{ %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x5, %rbx                    #  1     0     10     OPC=movq_r64_imm64
circuit:callq .move_064_032_rbx_r12d_r13d  #  2     0xa   5      OPC=callq_label
circuit:movsbq %cl, %r12                   #  3     0xf   4      OPC=movsbq_r64_r8
circuit:callq .move_008_016_r12b_r13b_bx   #  4     0x13  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movzbw %cl, %bx

  maybe read:      { %cl }
  must read:       { %cl }
  maybe write:     { %bx }
  must write:      { %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:16] ∘ (0x0₈ ∘ %rcx[7:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/