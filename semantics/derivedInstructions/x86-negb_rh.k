// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGB-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 10) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17), extractMInt(getParentValue(R1, RSMap), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 10), extractMInt(getParentValue(R1, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17), extractMInt(getParentValue(R1, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)))), mi(17, 1)), 9, 17), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module NEGB-RH-SEMANTICS
  imports NEGB-RH
endmodule
/*
TargetInstr:
negb %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %cf %pf %af %zf %sf %of }
must write:{ %ah %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %ah, %eax  #  1     0    3      OPC=movzbl_r32_rh
circuit:negb %al          #  2     0x3  2      OPC=negb_r8
circuit:xchgb %ah, %al    #  3     0x5  2      OPC=xchgb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

negb %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:0] ∘ %rax[7:0]

%cf    : (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rax[15:8])[8:8] = 0x1₁
%pf    : !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[3:0] + 0x0₁ ∘ %rax[11:8])[4:4] = 0x1₁
%zf    : (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:0] = 0x0₈
%sf    : (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:7] = 0x1₁
%of    : ((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ %rax[15:15] = 0x1₁) ∧ !((0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:7] = 0x1₁ ↔ (0x0₁ ∘ (0x1₁₇ + 0x0₁ ∘ (0x0₈ ∘ %rax[15:8] ⊕ 0xffff₁₆))[7:0] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/