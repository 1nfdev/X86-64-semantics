// Autogenerated using stratification.
requires "x86-configuration.k"

module PHADDD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (phaddd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 128, 160)), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 160, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 192, 256)), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 192, 224))), 33, 65)), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 128, 160))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 128, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 192, 224), extractMInt(getParentValue(R2, RSMap), 192, 224))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 192, 256))), 33, 65)))) )


)

    </regstate>
endmodule

module PHADDD-XMM-XMM-SEMANTICS
  imports PHADDD-XMM-XMM
endmodule
/*
TargetInstr:
phaddd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ ssse3 }

Circuit:
circuit:movshdup %xmm1, %xmm0                           #  1     0     4      OPC=movshdup_xmm_xmm
circuit:callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11  #  2     0x4   5      OPC=callq_label
circuit:paddq %xmm0, %xmm1                              #  3     0x9   4      OPC=paddq_xmm_xmm
circuit:vpaddq %xmm9, %xmm2, %xmm6                      #  4     0xd   5      OPC=vpaddq_xmm_xmm_xmm
circuit:vunpcklpd %xmm9, %xmm1, %xmm4                   #  5     0x12  5      OPC=vunpcklpd_xmm_xmm_xmm
circuit:vmovhlps %xmm1, %xmm8, %xmm5                    #  6     0x17  4      OPC=vmovhlps_xmm_xmm_xmm
circuit:vpaddq %xmm10, %xmm11, %xmm7                    #  7     0x1b  5      OPC=vpaddq_xmm_xmm_xmm
circuit:callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1    #  8     0x20  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

phaddd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { ssse3 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ ((0x0₁ ∘ (0x0₃₂ ∘ %ymm2[127:96]) + 0x0₁ ∘ (0x0₃₂ ∘ %ymm2[95:64]))[31:0] ∘ (0x0₁ ∘ %ymm2[63:0] + 0x0₁ ∘ (0x0₃₂ ∘ %ymm2[63:32]))[31:0] ∘ (0x0₁ ∘ (%ymm1[127:96] ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:64])[31:0] ∘ (0x0₁ ∘ (%ymm1[63:32] ∘ %ymm1[63:32]) + 0x0₁ ∘ %ymm1[63:0])[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/