// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVSXBQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pmovsxbq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(mi(64, svalueMInt(xorMInt(mi(32, -128), extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 240, 248))))), 33, 65)))), mi(64, svalueMInt(xorMInt(mi(32, -128), extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 248, 256))))), 33, 65)))))) )


)

    </regstate>
endmodule

module PMOVSXBQ-XMM-XMM-SEMANTICS
  imports PMOVSXBQ-XMM-XMM
endmodule
/*
TargetInstr:
pmovsxbq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse4_1 }

Circuit:
circuit:vpmovsxdq %xmm2, %xmm8  #  1     0    5      OPC=vpmovsxdq_xmm_xmm
circuit:vpmovsxbd %xmm8, %ymm4  #  2     0x5  5      OPC=vpmovsxbd_ymm_xmm
circuit:pmovsxdq %xmm4, %xmm1   #  3     0xa  5      OPC=pmovsxdq_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pmovsxbq %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse4_1 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (sign-extend-64((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[15:8])))[31:0] ⊕ 0xffffff80₃₂) ∘ sign-extend-64((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[7:0])))[31:0] ⊕ 0xffffff80₃₂))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/