// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVSXWQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pmovsxwq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 224, 240)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256))))), concatenateMInt(mi(1, 0), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256)))), 33, 49)), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256)))), 49, 65))))), mi(65, 1)), 1, 33))), mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 224, 240)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256))))), concatenateMInt(mi(1, 0), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256)))), 33, 49)), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256)))), 49, 65))))), mi(65, 1)), 33, 65))))) )


)

    </regstate>
endmodule

module PMOVSXWQ-XMM-XMM-SEMANTICS
  imports PMOVSXWQ-XMM-XMM
endmodule
/*
TargetInstr:
pmovsxwq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse4_1 }

Circuit:
circuit:vpmovsxwq %xmm2, %xmm0  #  1     0    5      OPC=vpmovsxwq_xmm_xmm
circuit:movdqa %xmm0, %xmm1     #  2     0x5  4      OPC=movdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pmovsxwq %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse4_1 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (sign-extend-64((0x0₁ ∘ (0x0₁₆ ∘ %ymm2[31:16] ∘ (0x0₁₆ ∘ %ymm2[15:0]) ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ (0x0₁₆ ∘ (0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]) + 0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]))[31:16] ∘ (0x0₁₆ ∘ (0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]) + 0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]))[15:0])))[63:32]) ∘ sign-extend-64((0x0₁ ∘ (0x0₁₆ ∘ %ymm2[31:16] ∘ (0x0₁₆ ∘ %ymm2[15:0]) ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ (0x0₁₆ ∘ (0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]) + 0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]))[31:16] ∘ (0x0₁₆ ∘ (0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]) + 0x0₁ ∘ (%ymm2[31:0] ∘ %ymm2[31:0]))[15:0])))[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/