// Autogenerated using stratification.
requires "x86-configuration.k"

module ROLW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rolw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1))), 1, 17)) )


)

    </regstate>
endmodule

module ROLW-R16-ONE-SEMANTICS
  imports ROLW-R16-ONE
endmodule
/*
TargetInstr:
rolw $0x1, %bx
RWSet:
maybe read:{ %bx }
must read:{ %bx }
maybe write:{ %bx %cf %of }
must write:{ %bx %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movswq %bx, %r8  #  1     0    4      OPC=movswq_r64_r16
circuit:clc              #  2     0x4  1      OPC=clc
circuit:adcw %r8w, %r8w  #  3     0x5  4      OPC=adcw_r16_r16
circuit:adcw %bx, %bx    #  4     0x9  3      OPC=adcw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rolw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %of }
  must write:      { %bx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:16] ∘ (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:0]

%cf    : (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁
%of    : (%rbx[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/