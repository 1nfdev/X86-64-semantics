// Autogenerated using stratification.
requires "x86-configuration.k"

module SARQ-R64-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(getParentValue(R2, RSMap), 63, 64) )

 "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(getParentValue(R2, RSMap))), 1), 0, 1) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(getParentValue(R2, RSMap))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (ashrMInt(mi(64, svalueMInt(getParentValue(R2, RSMap))), 1) )

 "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(getParentValue(R2, RSMap))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SARQ-R64-ONE-SEMANTICS
  imports SARQ-R64-ONE
endmodule
/*
TargetInstr:
sarq $0x1, %rbx
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:andnl %ebx, %ebx, %esi  #  1     0     5      OPC=andnl_r32_r32_r32
circuit:movl %esi, %esi         #  2     0x5   2      OPC=movl_r32_r32
circuit:setns %cl               #  3     0x7   3      OPC=setns_r8
circuit:sarq %cl, %rbx          #  4     0xa   3      OPC=sarq_r64_cl
circuit:movzwl %si, %r12d       #  5     0xd   4      OPC=movzwl_r32_r16
circuit:decl %r12d              #  6     0x11  3      OPC=decl_r32
circuit:callq .set_szp_for_rbx  #  7     0x14  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sarq $0x1, %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

%cf    : true ∧ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf    : !((%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf    : (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf    : (%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/