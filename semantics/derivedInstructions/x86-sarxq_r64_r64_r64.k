// Autogenerated using stratification.
requires "x86-configuration.k"

module SARXQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarxq R1:R64, R2:R64, R3:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> ((#ifMInt (ultMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(getParentValue(R2, RSMap))), uvalueMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi)  )


)

    </regstate>
endmodule

module SARXQ-R64-R64-R64-SEMANTICS
  imports SARXQ-R64-R64-R64
endmodule
/*
TargetInstr:
sarxq %rdx, %rcx, %rbx
RWSet:
maybe read:{ %rcx %rdx }
must read:{ %rcx %rdx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ bmi2 }

Circuit:
circuit:callq .move_064_032_rdx_r10d_r11d  #  1     0     5      OPC=callq_label
circuit:callq .move_064_032_rcx_r8d_r9d    #  2     0x5   5      OPC=callq_label
circuit:callq .move_008_016_r10b_r11b_cx   #  3     0xa   5      OPC=callq_label
circuit:callq .move_032_064_r8d_r9d_rbx    #  4     0xf   5      OPC=callq_label
circuit:sarq %cl, %rbx                     #  5     0x14  3      OPC=sarq_r64_cl
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sarxq %rdx, %rcx, %rbx

  maybe read:      { %rcx %rdx }
  must read:       { %rcx %rdx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { bmi2 }

Circuits:

%rbx   : (%rcx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[64:1]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/