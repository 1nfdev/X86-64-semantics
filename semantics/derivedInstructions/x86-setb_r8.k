// Autogenerated using stratification.
requires "x86-configuration.k"

module SETB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))) )


)

    </regstate>
endmodule

module SETB-R8-SEMANTICS
  imports SETB-R8
endmodule
/*
TargetInstr:
setb %bl
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_cf_into_rcx  #  1     0    5      OPC=callq_label
circuit:movsbq %cl, %rbx         #  2     0x5  4      OPC=movsbq_r64_r8
circuit:orq %rcx, %rbx           #  3     0x9  3      OPC=orq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setb %bl

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (%cf ? 0x1₈ : 0x0₈)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/