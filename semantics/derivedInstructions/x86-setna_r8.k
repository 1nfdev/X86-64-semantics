// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNA-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setna R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap))) ) #fi)  )


)

    </regstate>
endmodule

module SETNA-R8-SEMANTICS
  imports SETNA-R8
endmodule
/*
TargetInstr:
setna %bl
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x5, %rbx  #  1     0    10     OPC=movq_r64_imm64
circuit:setna %dh        #  2     0xa  3      OPC=setna_rh
circuit:xchgb %bl, %dh   #  3     0xd  2      OPC=xchgb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setna %bl

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (%zf ? %zf ? 0x1₈ : 0x0₈ : %cf ? 0x1₈ : 0x0₈)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/