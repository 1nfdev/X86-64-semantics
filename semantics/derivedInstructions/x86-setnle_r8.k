// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNLE-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnle R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), mi(8, 1))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #fi)  )


)

    </regstate>
endmodule

module SETNLE-R8-SEMANTICS
  imports SETNLE-R8
endmodule
/*
TargetInstr:
setnle %bl
RWSet:
maybe read:{ %zf %sf %of }
must read:{ %zf %sf %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_of_into_rbx  #  1     0     5      OPC=callq_label
circuit:setnl %r9b               #  2     0x5   4      OPC=setnl_r8
circuit:xchgb %bh, %bl           #  3     0x9   2      OPC=xchgb_r8_rh
circuit:movzbl %r9b, %edi        #  4     0xb   4      OPC=movzbl_r32_r8
circuit:cmovnel %edi, %ebx       #  5     0xf   3      OPC=cmovnel_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnle %bl

  maybe read:      { %zf %sf %of }
  must read:       { %zf %sf %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (%zf ? 0x0₈ : 0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈)))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/