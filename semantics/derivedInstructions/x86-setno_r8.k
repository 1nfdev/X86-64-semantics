// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNO-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setno R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(concatenateMInt(mi(7, 0), getFlag("OF", RSMap)), mi(8, 1))) )


)

    </regstate>
endmodule

module SETNO-R8-SEMANTICS
  imports SETNO-R8
endmodule
/*
TargetInstr:
setno %bl
RWSet:
maybe read:{ %of }
must read:{ %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_of_into_rcx  #  1     0     5      OPC=callq_label
circuit:callq .set_cf            #  2     0x5   5      OPC=callq_label
circuit:callq .read_cf_into_rbx  #  3     0xa   5      OPC=callq_label
circuit:movslq %ecx, %r8         #  4     0xf   3      OPC=movslq_r64_r32
circuit:xorw %r8w, %bx           #  5     0x12  4      OPC=xorw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setno %bl

  maybe read:      { %of }
  must read:       { %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (%of ? 0x0₈ : 0x1₈)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/