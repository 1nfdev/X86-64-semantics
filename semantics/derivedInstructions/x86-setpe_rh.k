// Autogenerated using stratification.
requires "x86-configuration.k"

module SETPE-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setpe R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 0)), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETPE-RH-SEMANTICS
  imports SETPE-RH
endmodule
/*
TargetInstr:
setpe %ah
RWSet:
maybe read:{ %pf }
must read:{ %pf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_pf_into_rbx  #  1     0    5      OPC=callq_label
circuit:movw %bx, %ax            #  2     0x5  3      OPC=movw_r16_r16
circuit:xchgb %al, %bh           #  3     0x8  2      OPC=xchgb_rh_r8
circuit:xorw %bx, %ax            #  4     0xa  3      OPC=xorw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setpe %ah

  maybe read:      { %pf }
  must read:       { %pf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (%pf ? 0x1₈ : 0x0₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/