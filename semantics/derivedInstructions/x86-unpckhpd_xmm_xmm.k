// Autogenerated using stratification.
requires "x86-configuration.k"

module UNPCKHPD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (unpckhpd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192))) )


)

    </regstate>
endmodule

module UNPCKHPD-XMM-XMM-SEMANTICS
  imports UNPCKHPD-XMM-XMM
endmodule
/*
TargetInstr:
unpckhpd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:callq .move_128_64_xmm1_xmm12_xmm13  #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm2_r12_r13     #  2     0x5   5      OPC=callq_label
circuit:movq %xmm13, %r12                    #  3     0xa   5      OPC=movq_r64_xmm
circuit:callq .move_064_128_r12_r13_xmm1     #  4     0xf   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

unpckhpd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm2[127:64] ∘ %ymm1[127:64])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/