// Autogenerated using stratification.
requires "x86-configuration.k"

module VANDNPD-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vandnpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 0, 64), extractMInt(getParentValue(R2, RSMap), 0, 64)), extractMInt(getParentValue(R2, RSMap), 0, 64)), xorMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 64, 128), extractMInt(getParentValue(R2, RSMap), 64, 128)), extractMInt(getParentValue(R2, RSMap), 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(getParentValue(R2, RSMap), 128, 192), extractMInt(getParentValue(R1, RSMap), 128, 192)), extractMInt(getParentValue(R2, RSMap), 128, 192)), xorMInt(orMInt(extractMInt(getParentValue(R2, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256)), extractMInt(getParentValue(R2, RSMap), 192, 256)))) )


)

    </regstate>
endmodule

module VANDNPD-YMM-YMM-YMM-SEMANTICS
  imports VANDNPD-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vandnpd %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_256_128_ymm3_xmm12_xmm13  #  1     0     5      OPC=callq_label
circuit:pandn %xmm3, %xmm2                    #  2     0x5   4      OPC=pandn_xmm_xmm
circuit:callq .move_256_128_ymm2_xmm10_xmm11  #  3     0x9   5      OPC=callq_label
circuit:vmovdqa %xmm10, %xmm14                #  4     0xe   5      OPC=vmovdqa_xmm_xmm
circuit:vandnpd %xmm13, %xmm11, %xmm11        #  5     0x13  5      OPC=vandnpd_xmm_xmm_xmm
circuit:callq .move_128_256_xmm10_xmm11_ymm3  #  6     0x18  5      OPC=callq_label
circuit:vorpd %ymm3, %ymm14, %ymm1            #  7     0x1d  4      OPC=vorpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vandnpd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (%ymm2[255:192] ⊕ (%ymm2[255:192] | %ymm3[255:192]) | 0x0₆₄) ∘ (%ymm2[191:128] ⊕ (%ymm2[191:128] | %ymm3[191:128]) | 0x0₆₄) ∘ ((%ymm2[127:64] ⊕ (%ymm3[127:64] | %ymm2[127:64])) ∘ (%ymm2[63:0] ⊕ (%ymm3[63:0] | %ymm2[63:0])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/