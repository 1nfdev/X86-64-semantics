// Autogenerated using stratification.
requires "x86-configuration.k"

module VFNMADD213PS-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfnmadd213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 224, 256), 24, 8) ) ) ) , 32)))))))) )


)

    </regstate>
endmodule

module VFNMADD213PS-YMM-YMM-YMM-SEMANTICS
  imports VFNMADD213PS-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vfnmadd213ps %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm1 %ymm2 %ymm3 }
must read:{ %ymm1 %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:vfnmadd132ps %ymm1, %ymm3, %ymm2  #  1     0    5      OPC=vfnmadd132ps_ymm_ymm_ymm
circuit:vmaxpd %ymm2, %ymm2, %ymm1        #  2     0x5  4      OPC=vmaxpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfnmadd213ps %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm1 %ymm2 %ymm3 }
  must read:       { %ymm1 %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

Circuits:

%ymm1  : vfnmadd132_single(%ymm2[255:224], %ymm3[255:224], %ymm1[255:224]) ∘ vfnmadd132_single(%ymm2[223:192], %ymm3[223:192], %ymm1[223:192]) ∘ (vfnmadd132_single(%ymm2[191:160], %ymm3[191:160], %ymm1[191:160]) ∘ (vfnmadd132_single(%ymm2[159:128], %ymm3[159:128], %ymm1[159:128]) ∘ (vfnmadd132_single(%ymm2[127:96], %ymm3[127:96], %ymm1[127:96]) ∘ (vfnmadd132_single(%ymm2[95:64], %ymm3[95:64], %ymm1[95:64]) ∘ (vfnmadd132_single(%ymm2[63:32], %ymm3[63:32], %ymm1[63:32]) ∘ vfnmadd132_single(%ymm2[31:0], %ymm3[31:0], %ymm1[31:0]))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/