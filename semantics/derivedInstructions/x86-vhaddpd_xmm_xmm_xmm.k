// Autogenerated using stratification.
requires "x86-configuration.k"

module VHADDPD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhaddpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11) ) , 64))) )


)

    </regstate>
endmodule

module VHADDPD-XMM-XMM-XMM-SEMANTICS
  imports VHADDPD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vhaddpd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovlhps %xmm3, %xmm2, %xmm1     #  1     0    4      OPC=vmovlhps_xmm_xmm_xmm
circuit:vpunpckhqdq %xmm3, %xmm2, %xmm9  #  2     0x4  4      OPC=vpunpckhqdq_xmm_xmm_xmm
circuit:addpd %xmm9, %xmm1               #  3     0x8  5      OPC=addpd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhaddpd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ (add_double(%ymm3[63:0], %ymm3[127:64]) ∘ add_double(%ymm2[63:0], %ymm2[127:64]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/