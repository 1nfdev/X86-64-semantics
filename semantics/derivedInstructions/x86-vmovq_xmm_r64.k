// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVQ-XMM-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovq R1:R64, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(192, 0), xorMInt(getParentValue(R1, RSMap), mi(64, 0))) )


)

    </regstate>
endmodule

module VMOVQ-XMM-R64-SEMANTICS
  imports VMOVQ-XMM-R64
endmodule
/*
TargetInstr:
vmovq %rbx, %xmm1
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vzeroall                        #  1     0     3      OPC=vzeroall
circuit:callq .move_128_064_xmm1_r8_r9  #  2     0x3   5      OPC=callq_label
circuit:xorq %rbx, %r8                  #  3     0x8   3      OPC=xorq_r64_r64
circuit:callq .move_064_128_r8_r9_xmm1  #  4     0xb   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovq %rbx, %xmm1

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ (0x0₆₄ ∘ (0x0₆₄ ⊕ %rbx))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/