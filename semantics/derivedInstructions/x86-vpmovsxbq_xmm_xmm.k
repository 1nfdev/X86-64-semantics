// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMOVSXBQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpmovsxbq R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(xorMInt(mi(32, -128), extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 240, 248))))), 33, 65)))), mi(64, svalueMInt(xorMInt(mi(32, -128), extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 248, 256))))), 33, 65)))))) )


)

    </regstate>
endmodule

module VPMOVSXBQ-XMM-XMM-SEMANTICS
  imports VPMOVSXBQ-XMM-XMM
endmodule
/*
TargetInstr:
vpmovsxbq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r10_r11  #  1     0     5      OPC=callq_label
circuit:callq .move_064_128_r10_r11_xmm3  #  2     0x5   5      OPC=callq_label
circuit:vpmovsxbq %xmm3, %ymm10           #  3     0xa   5      OPC=vpmovsxbq_ymm_xmm
circuit:vmovdqa %xmm10, %xmm1             #  4     0xf   5      OPC=vmovdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpmovsxbq %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ (sign-extend-64((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[15:8])))[31:0] ⊕ 0xffffff80₃₂)[63:32] ∘ ((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[15:8])))[31:0] ⊕ 0xffffff80₃₂) ∘ sign-extend-64((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[7:0])))[31:0] ⊕ 0xffffff80₃₂))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/