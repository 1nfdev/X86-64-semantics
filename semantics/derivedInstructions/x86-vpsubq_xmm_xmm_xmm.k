// Autogenerated using stratification.
requires "x86-configuration.k"

module VPSUBQ-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpsubq R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(getParentValue(R1, RSMap), 128, 192))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 128, 192))), mi(65, 1)), 1, 65), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(getParentValue(R1, RSMap), 192, 256))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 192, 256))), mi(65, 1)), 1, 65))) )


)

    </regstate>
endmodule

module VPSUBQ-XMM-XMM-XMM-SEMANTICS
  imports VPSUBQ-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vpsubq %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r10_r11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm3_r8_r9    #  2     0x5   5      OPC=callq_label
circuit:vzeroall                          #  3     0xa   3      OPC=vzeroall
circuit:subq %r9, %r11                    #  4     0xd   3      OPC=subq_r64_r64
circuit:subq %r8, %r10                    #  5     0x10  3      OPC=subq_r64_r64
circuit:callq .move_064_128_r10_r11_xmm1  #  6     0x13  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpsubq %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ ((0x0₁ ∘ (%ymm3[127:64] ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %ymm2[127:64])[63:0] ∘ (0x0₁ ∘ (%ymm3[63:0] ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %ymm2[63:0])[63:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/