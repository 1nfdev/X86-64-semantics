// Autogenerated using stratification.
requires "x86-configuration.k"

module VPUNPCKLWD-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpunpcklwd R1:Ymm, R2:Ymm, R3:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 80, 96)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 80, 96))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 64, 96), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 80, 96), extractMInt(getParentValue(R1, RSMap), 80, 96)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 80, 96)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 80, 96)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 64, 80)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 80, 96)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 112, 128)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 112, 128))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 96, 128), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 112, 128), extractMInt(getParentValue(R1, RSMap), 112, 128)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 112, 128)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 112, 128)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 96, 112)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 112, 128))))), concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 224), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 208, 224), extractMInt(getParentValue(R1, RSMap), 208, 224)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 192, 208)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 208, 224)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 240, 256), extractMInt(getParentValue(R1, RSMap), 240, 256)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 224, 240)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 240, 256)))))) )


)

    </regstate>
endmodule

module VPUNPCKLWD-YMM-YMM-YMM-SEMANTICS
  imports VPUNPCKLWD-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vpunpcklwd %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_256_128_ymm2_xmm12_xmm13  #  1     0     5      OPC=callq_label
circuit:callq .move_256_128_ymm3_xmm8_xmm9    #  2     0x5   5      OPC=callq_label
circuit:vpunpcklwd %xmm8, %xmm2, %xmm10       #  3     0xa   5      OPC=vpunpcklwd_xmm_xmm_xmm
circuit:vpunpcklwd %xmm9, %xmm13, %xmm11      #  4     0xf   5      OPC=vpunpcklwd_xmm_xmm_xmm
circuit:callq .move_128_256_xmm10_xmm11_ymm1  #  5     0x14  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpunpcklwd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : (0x0₁₆ ∘ %ymm2[191:176] ∘ (0x0₁₆ ∘ %ymm2[175:160]) ⊕ (0x0₁₆ ∘ %ymm3[175:160] ∘ (0x0₁₆ ∘ %ymm3[175:160]) ⊕ (%ymm3[191:160] ∘ (%ymm3[175:160] ∘ %ymm3[175:160]) | 0x0₁₆ ∘ %ymm3[175:160] ∘ (0x0₁₆ ∘ %ymm3[175:160])))) ∘ (0x0₁₆ ∘ %ymm2[159:144] ∘ (0x0₁₆ ∘ %ymm2[143:128]) ⊕ (0x0₁₆ ∘ %ymm3[143:128] ∘ (0x0₁₆ ∘ %ymm3[143:128]) ⊕ (%ymm3[159:128] ∘ (%ymm3[143:128] ∘ %ymm3[143:128]) | 0x0₁₆ ∘ %ymm3[143:128] ∘ (0x0₁₆ ∘ %ymm3[143:128])))) ∘ ((0x0₁₆ ∘ %ymm2[63:48] ∘ (0x0₁₆ ∘ %ymm2[47:32]) ⊕ (0x0₁₆ ∘ %ymm3[47:32] ∘ (0x0₁₆ ∘ %ymm3[47:32]) ⊕ (%ymm3[63:32] ∘ (%ymm3[47:32] ∘ %ymm3[47:32]) | 0x0₁₆ ∘ %ymm3[47:32] ∘ (0x0₁₆ ∘ %ymm3[47:32])))) ∘ (0x0₁₆ ∘ %ymm2[31:16] ∘ (0x0₁₆ ∘ %ymm2[15:0]) ⊕ (0x0₁₆ ∘ %ymm3[15:0] ∘ (0x0₁₆ ∘ %ymm3[15:0]) ⊕ (%ymm3[31:0] ∘ (%ymm3[15:0] ∘ %ymm3[15:0]) | 0x0₁₆ ∘ %ymm3[15:0] ∘ (0x0₁₆ ∘ %ymm3[15:0])))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/