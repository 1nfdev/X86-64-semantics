// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (getParentValue(R1, RSMap) )

convToRegKeys(R1) |-> (getParentValue(R2, RSMap) )


)

    </regstate>
endmodule

module XCHGQ-R64-R64-SEMANTICS
  imports XCHGQ-R64-R64
endmodule
/*
TargetInstr:
xchgq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %rcx %rbx }
must write:{ %rcx %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .move_064_032_rbx_r8d_r9d  #  1     0     5      OPC=callq_label
circuit:movq %rcx, %rbx                  #  2     0x5   3      OPC=movq_r64_r64
circuit:callq .move_016_032_r8w_r9w_edx  #  3     0x8   5      OPC=callq_label
circuit:callq .move_032_016_edx_r8w_r9w  #  4     0xd   5      OPC=callq_label
circuit:callq .move_032_064_r8d_r9d_rcx  #  5     0x12  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rcx %rbx }
  must write:      { %rcx %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rcx   : %rbx
%rbx   : %rcx

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/