-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _74_656:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _73_655:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _78_660:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _77_659:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _84_666:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _81_663:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _82_664:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _80_662:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _83_665:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _79_661:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _76_658:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _75_657:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_654:K@SORT-K   ),, <regstatequeue>(_85_667:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))), updateZeroFlag(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))), updateParityFlag(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))), updateParityFlag(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"))),, xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_650:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
111.96user 1.25system 0:27.13elapsed 417%CPU (0avgtext+0avgdata 2445176maxresident)k
0inputs+3784outputs (0major+538559minor)pagefaults 0swaps
