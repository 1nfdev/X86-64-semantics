// Autogenerated using stratification.
requires "x86-configuration.k"

module VPINSRQ-XMM-XMM-M64-IMM8
  imports X86-CONFIGURATION

  context execinstr(vpinsrq:Opcode Imm8:Imm, HOLE:Mem, R3:Xmm, R4:Xmm,  .Operands) [result(MemOffset)]
  
          rule <k>
            execinstr (vpinsrq:Opcode Imm8:Imm, memOffset( MemOff:MInt):MemOffset, R3:Xmm, R4:Xmm,  .Operands) =>
              loadFromMemory( MemOff, 64) ~> execinstr (vpinsrq Imm8, memOffset( MemOff), R3:Xmm, R4:Xmm,  .Operands)
          ...</k>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (vpinsrq:Opcode Imm8:Imm, memOffset( MemOff:MInt):MemOffset, R3:Xmm, R4:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 18446744073709551615), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))))), andMInt( shlMInt( concatenateMInt( mi(64, 0), Mem64), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))), shlMInt( mi(128, 18446744073709551615), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))))))
      )
      </regstate>
endmodule
