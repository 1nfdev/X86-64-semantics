// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDB-RH-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255))))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), xorMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)))), mi(1, 1)) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), xorMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), xorMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), xorMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), xorMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), xorMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module ANDB-RH-R8-SEMANTICS
  imports ANDB-RH-R8
endmodule
