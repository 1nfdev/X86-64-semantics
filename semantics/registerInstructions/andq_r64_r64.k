// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( xorMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap)), orMInt( getParentValue(R1, RSMap), xorMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), extractMInt( getParentValue(R2, RSMap), 63, 64)), orMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), xorMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), extractMInt( getParentValue(R2, RSMap), 63, 64)))), mi(1, 1)) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), extractMInt( getParentValue(R2, RSMap), 62, 63)), orMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), xorMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), extractMInt( getParentValue(R2, RSMap), 62, 63)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), extractMInt( getParentValue(R2, RSMap), 61, 62)), orMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), xorMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), extractMInt( getParentValue(R2, RSMap), 61, 62)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), extractMInt( getParentValue(R2, RSMap), 60, 61)), orMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), xorMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), extractMInt( getParentValue(R2, RSMap), 60, 61)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), orMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), extractMInt( getParentValue(R2, RSMap), 58, 59)), orMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), xorMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), extractMInt( getParentValue(R2, RSMap), 58, 59)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), extractMInt( getParentValue(R2, RSMap), 57, 58)), orMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), xorMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), extractMInt( getParentValue(R2, RSMap), 57, 58)))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), extractMInt( getParentValue(R2, RSMap), 56, 57)), orMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), extractMInt( getParentValue(R2, RSMap), 56, 57)))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( xorMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap)), orMInt( getParentValue(R1, RSMap), xorMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), extractMInt( getParentValue(R2, RSMap), 0, 1)), orMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), extractMInt( getParentValue(R2, RSMap), 0, 1))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module ANDQ-R64-R64-SEMANTICS
  imports ANDQ-R64-R64
endmodule
