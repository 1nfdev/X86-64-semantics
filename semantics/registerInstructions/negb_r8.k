// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 17)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 13, 17)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 64))), 0, 1)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 17), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 10)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 10), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 10), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( mi(16, 65535), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))))), 9, 17)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module NEGB-R8-SEMANTICS
  imports NEGB-R8
endmodule
