// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGL-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 1, 33))

"CF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(4, 15), extractMInt( getParentValue(R1, RSMap), 60, 64))), mi(5, 1)), 0, 1)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( xorMInt( mi(1, 1), extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool false) andBool (notBool (eqMInt( xorMInt( mi(1, 1), extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(32, 4294967295), extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module NEGL-R32-SEMANTICS
  imports NEGL-R32
endmodule
