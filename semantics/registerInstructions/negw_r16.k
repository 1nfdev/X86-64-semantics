// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGW-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 65535)), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 1, 2)

"OF" |-> (#ifMInt ((false ==Bool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)), mi(1, 1))) andBool (notBool (false ==Bool eqMInt( extractMInt( addMInt( mi(17, 1), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 65535)))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module NEGW-R16-SEMANTICS
  imports NEGW-R16
endmodule
