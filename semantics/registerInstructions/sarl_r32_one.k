// Autogenerated using stratification.
requires "x86-configuration.k"

module SARL-R32-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarl $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 32, 64))

"CF" |-> (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt ((countOnes(extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 64), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module SARL-R32-ONE-SEMANTICS
  imports SARL-R32-ONE
endmodule
