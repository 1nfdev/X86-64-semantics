// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTB-RH-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 63, 64)), extractMInt( getParentValue(R1, RSMap), 63, 64)), extractMInt( getParentValue(R2, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 62, 63)), extractMInt( getParentValue(R1, RSMap), 62, 63)), extractMInt( getParentValue(R2, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 61, 62)), extractMInt( getParentValue(R1, RSMap), 61, 62)), extractMInt( getParentValue(R2, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 60, 61)), extractMInt( getParentValue(R1, RSMap), 60, 61)), extractMInt( getParentValue(R2, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 59, 60)), extractMInt( getParentValue(R1, RSMap), 59, 60)), extractMInt( getParentValue(R2, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 58, 59)), extractMInt( getParentValue(R1, RSMap), 58, 59)), extractMInt( getParentValue(R2, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 57, 58)), extractMInt( getParentValue(R1, RSMap), 57, 58)), extractMInt( getParentValue(R2, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57)), extractMInt( getParentValue(R1, RSMap), 56, 57)), extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( xorMInt( orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), 32, 64)), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), 32, 64)), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( xorMInt( orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), 32, 33)), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), 32, 33)), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module TESTB-RH-R8-SEMANTICS
  imports TESTB-RH-R8
endmodule
