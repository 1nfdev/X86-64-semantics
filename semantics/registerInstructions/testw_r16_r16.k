// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt ((countOnes(xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)))), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 64), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 64), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 33), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 33), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 33))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module TESTW-R16-R16-SEMANTICS
  imports TESTW-R16-R16
endmodule
