// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)))), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 64), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 64), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 33), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 33), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), 32, 33))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module TESTW-R16-R16-SEMANTICS
  imports TESTW-R16-R16
endmodule
