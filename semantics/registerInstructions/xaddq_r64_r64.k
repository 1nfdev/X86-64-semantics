// Autogenerated using stratification.
requires "x86-configuration.k"

module XADDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> getParentValue(R2, RSMap)

convToRegKeys(R2) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 0, 1)

"PF" |-> (#ifMInt ((countOnes(extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 57, 65), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 64))), 0, 1)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module XADDQ-R64-R64-SEMANTICS
  imports XADDQ-R64-R64
endmodule
