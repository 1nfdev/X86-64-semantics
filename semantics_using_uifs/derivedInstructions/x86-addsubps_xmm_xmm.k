// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDSUBPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addsubps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt( add_single ( extractMInt(getParentValue(R1, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 128, 160) ) ,  sub_single ( extractMInt(getParentValue(R1, RSMap), 160, 192), extractMInt(getParentValue(R2, RSMap), 160, 192) ) ), concatenateMInt( add_single ( extractMInt(getParentValue(R1, RSMap), 192, 224), extractMInt(getParentValue(R2, RSMap), 192, 224) ) ,  sub_single ( extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R2, RSMap), 224, 256) ) ))) )


)

    </regstate>
endmodule

module ADDSUBPS-XMM-XMM-SEMANTICS
  imports ADDSUBPS-XMM-XMM
endmodule
/*
TargetInstr:
addsubps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ pni }

Circuit:
circuit:vaddps %xmm2, %xmm1, %xmm3                      #  1     0     4      OPC=vaddps_xmm_xmm_xmm
circuit:callq .move_128_032_xmm3_xmm4_xmm5_xmm6_xmm7    #  2     0x4   5      OPC=callq_label
circuit:vsubps %xmm2, %xmm1, %xmm4                      #  3     0x9   4      OPC=vsubps_xmm_xmm_xmm
circuit:vunpckhpd %ymm4, %ymm4, %ymm6                   #  4     0xd   4      OPC=vunpckhpd_ymm_ymm_ymm
circuit:callq .move_128_032_xmm3_xmm8_xmm9_xmm10_xmm11  #  5     0x11  5      OPC=callq_label
circuit:vmovss %xmm11, %xmm10, %xmm7                    #  6     0x16  5      OPC=vmovss_xmm_xmm_xmm
circuit:callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1    #  7     0x1b  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

addsubps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { pni }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat (concat (concat add_single(<%ymm1|256>[127:96], <%ymm2|256>[127:96]) sub_single(<%ymm1|256>[95:64], <%ymm2|256>[95:64])) add_single(<%ymm1|256>[63:32], <%ymm2|256>[63:32])) sub_single(<%ymm1|256>[31:0], <%ymm2|256>[31:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/