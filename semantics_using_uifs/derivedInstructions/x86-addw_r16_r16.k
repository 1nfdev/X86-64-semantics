// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 64), extractMInt(getParentValue(R2, RSMap), 48, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ADDW-R16-R16-SEMANTICS
  imports ADDW-R16-R16
endmodule
/*
TargetInstr:
addw %cx, %bx
RWSet:
maybe read:{ %cx %bx }
must read:{ %cx %bx }
maybe write:{ %bx %cf %pf %af %zf %sf %of }
must write:{ %bx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:clc                    #  1     0    1      OPC=clc
circuit:adcw %cx, %bx          #  2     0x1  3      OPC=adcw_r16_r16
circuit:callq .set_szp_for_bx  #  3     0x4  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

addw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %af %zf %sf %of }
  must write:      { %bx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[15:0])

%cf    : (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[16:16] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[0:0] <0x1|1>) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[1:1] <0x1|1>)) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[2:2] <0x1|1>)) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[3:3] <0x1|1>)) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[4:4] <0x1|1>)) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[5:5] <0x1|1>)) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[6:6] <0x1|1>)) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> <%rcx|64>[3:0]) (concat <0x0|1> <%rbx|64>[3:0]))[4:4] <0x1|1>)
%zf    : (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[15:0] <0x0|16>)
%sf    : (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[15:15] <0x1|1>)
%of    : (and (== (== <%rcx|64>[15:15] <0x1|1>) (== <%rbx|64>[15:15] <0x1|1>)) (not (== (== <%rcx|64>[15:15] <0x1|1>) (== (plus (concat <0x0|1> <%rcx|64>[15:0]) (concat <0x0|1> <%rbx|64>[15:0]))[15:15] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/