// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "AF" |-> (undef)

convToRegKeys(R2) |-> (xorMInt(orMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(getParentValue(R1, RSMap), mi(64, 0))), xorMInt(getParentValue(R1, RSMap), mi(64, 0))), xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(getParentValue(R1, RSMap), mi(64, 0)))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(getParentValue(R1, RSMap), mi(64, 0))), xorMInt(getParentValue(R1, RSMap), mi(64, 0))), xorMInt(xorMInt(getParentValue(R2, RSMap), mi(64, 0)), xorMInt(getParentValue(R1, RSMap), mi(64, 0)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> (xorMInt(orMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), mi(1, 0)), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), mi(1, 0))), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), mi(1, 0))), xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), mi(1, 0)), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), mi(1, 0)))) )

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 0)), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 0))), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 0))), xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), mi(8, 0)), xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 0)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )


)

    </regstate>
endmodule

module ANDQ-R64-R64-SEMANTICS
  imports ANDQ-R64-R64
endmodule
/*
TargetInstr:
andq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:vmovq %rbx, %xmm12          #  1     0     5      OPC=vmovq_xmm_r64
circuit:vmovq %xmm12, %xmm2         #  2     0x5   5      OPC=vmovq_xmm_xmm
circuit:vmovq %rcx, %xmm4           #  3     0xa   5      OPC=vmovq_xmm_r64
circuit:xorw %cx, %cx               #  4     0xf   3      OPC=xorw_r16_r16
circuit:vandpd %ymm2, %ymm4, %ymm1  #  5     0x12  4      OPC=vandpd_ymm_ymm_ymm
circuit:vmovq %xmm1, %rbx           #  6     0x16  5      OPC=vmovq_r64_xmm
circuit:callq .set_szp_for_rbx      #  7     0x1b  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (^ (^ (^ <0x0|64> <%rcx|64>) (^ <0x0|64> <%rbx|64>)) (| (^ <0x0|64> <%rcx|64>) (^ (^ <0x0|64> <%rcx|64>) (^ <0x0|64> <%rbx|64>))))

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (^ (^ (^ <0x0|1> <%rcx|64>[0:0]) (^ <0x0|1> <%rbx|64>[0:0])) (| (^ <0x0|1> <%rcx|64>[0:0]) (^ (^ <0x0|1> <%rcx|64>[0:0]) (^ <0x0|1> <%rbx|64>[0:0])))) <0x1|1>) (== (^ (^ (^ <0x0|1> <%rcx|64>[1:1]) (^ <0x0|1> <%rbx|64>[1:1])) (| (^ <0x0|1> <%rcx|64>[1:1]) (^ (^ <0x0|1> <%rcx|64>[1:1]) (^ <0x0|1> <%rbx|64>[1:1])))) <0x1|1>)) (== (^ (^ (^ <0x0|1> <%rcx|64>[2:2]) (^ <0x0|1> <%rbx|64>[2:2])) (| (^ <0x0|1> <%rcx|64>[2:2]) (^ (^ <0x0|1> <%rcx|64>[2:2]) (^ <0x0|1> <%rbx|64>[2:2])))) <0x1|1>)) (== (^ (^ (^ <0x0|1> <%rcx|64>[3:3]) (^ <0x0|1> <%rbx|64>[3:3])) (| (^ <0x0|1> <%rcx|64>[3:3]) (^ (^ <0x0|1> <%rcx|64>[3:3]) (^ <0x0|1> <%rbx|64>[3:3])))) <0x1|1>)) (== (^ (^ (^ <0x0|1> <%rcx|64>[4:4]) (^ <0x0|1> <%rbx|64>[4:4])) (| (^ <0x0|1> <%rcx|64>[4:4]) (^ (^ <0x0|1> <%rcx|64>[4:4]) (^ <0x0|1> <%rbx|64>[4:4])))) <0x1|1>)) (== (^ (^ (^ <0x0|1> <%rcx|64>[5:5]) (^ <0x0|1> <%rbx|64>[5:5])) (| (^ <0x0|1> <%rcx|64>[5:5]) (^ (^ <0x0|1> <%rcx|64>[5:5]) (^ <0x0|1> <%rbx|64>[5:5])))) <0x1|1>)) (== (^ (^ (^ <0x0|1> <%rcx|64>[6:6]) (^ <0x0|1> <%rbx|64>[6:6])) (| (^ <0x0|1> <%rcx|64>[6:6]) (^ (^ <0x0|1> <%rcx|64>[6:6]) (^ <0x0|1> <%rbx|64>[6:6])))) <0x1|1>)) (== (^ (^ (^ <0x0|1> <%rcx|64>[7:7]) (^ <0x0|1> <%rbx|64>[7:7])) (| (^ <0x0|1> <%rcx|64>[7:7]) (^ (^ <0x0|1> <%rcx|64>[7:7]) (^ <0x0|1> <%rbx|64>[7:7])))) <0x1|1>)))
%zf    : (== (^ (^ (^ <0x0|64> <%rcx|64>) (^ <0x0|64> <%rbx|64>)) (| (^ <0x0|64> <%rcx|64>) (^ (^ <0x0|64> <%rcx|64>) (^ <0x0|64> <%rbx|64>)))) <0x0|64>)
%sf    : (== (^ (^ (^ <0x0|1> <%rcx|64>[63:63]) (^ <0x0|1> <%rbx|64>[63:63])) (| (^ <0x0|1> <%rcx|64>[63:63]) (^ (^ <0x0|1> <%rcx|64>[63:63]) (^ <0x0|1> <%rbx|64>[63:63])))) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/