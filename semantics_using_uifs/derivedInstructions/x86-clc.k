// Autogenerated using stratification.
requires "x86-configuration.k"

module CLC
  imports X86-CONFIGURATION

  rule <k>
    execinstr (clc  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )


)

    </regstate>
endmodule

module CLC-SEMANTICS
  imports CLC
endmodule
/*
TargetInstr:
clc
RWSet:
maybe read:{ }
must read:{ }
maybe write:{ %cf }
must write:{ %cf }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax  #  1     0    3      OPC=xorq_r64_r64
circuit:adcb %al, %al    #  2     0x3  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

clc 

  maybe read:      { }
  must read:       { }
  maybe write:     { %cf }
  must write:      { %cf }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%cf    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/