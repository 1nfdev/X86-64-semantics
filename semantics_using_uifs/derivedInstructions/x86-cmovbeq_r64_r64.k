// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVBEQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovbeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap)))), mi(32, 0)) ) #then ( getParentValue(R2, RSMap) ) #else ( getParentValue(R1, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVBEQ-R64-R64-SEMANTICS
  imports CMOVBEQ-R64-R64
endmodule
/*
TargetInstr:
cmovbeq %rcx, %rbx
RWSet:
maybe read:{ %rcx %cf %zf }
must read:{ %rcx %cf %zf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setnbe %al         #  1     0    3      OPC=setnbe_r8
circuit:xaddb %al, %al     #  2     0x3  3      OPC=xaddb_r8_r8
circuit:cmoveq %rcx, %rbx  #  3     0x6  4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovbeq %rcx, %rbx

  maybe read:      { %rcx %cf %zf }
  must read:       { %rcx %cf %zf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (if (== (plus (if (== (concat (if <%cf> then <0x1|24> else <0x0|24>) (if <%zf> then <0x1|8> else <0x0|8>)) <0x0|32>) then <0x1|9> else <0x0|9>) (if (== (concat (if <%cf> then <0x1|24> else <0x0|24>) (if <%zf> then <0x1|8> else <0x0|8>)) <0x0|32>) then <0x1|9> else <0x0|9>))[7:0] <0x0|8>) then <%rcx|64> else <%rbx|64>)

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/