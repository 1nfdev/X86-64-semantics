// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNBEL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovnbel R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNBEL-R32-R32-SEMANTICS
  imports CMOVNBEL-R32-R32
endmodule
/*
TargetInstr:
cmovnbel %ecx, %ebx
RWSet:
maybe read:{ %ecx %cf %zf }
must read:{ %ecx %cf %zf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:movslq %ebx, %rsi               #  1     0     3      OPC=movslq_r64_r32
circuit:vmovd %ecx, %xmm1               #  2     0x3   4      OPC=vmovd_xmm_r32
circuit:callq .move_128_064_xmm1_r8_r9  #  3     0x7   5      OPC=callq_label
circuit:cmovnel %r8d, %ebx              #  4     0xc   4      OPC=cmovnel_r32_r32
circuit:adcb %r9b, %r9b                 #  5     0x10  3      OPC=adcb_r8_r8
circuit:cmovnzl %esi, %ebx              #  6     0x13  3      OPC=cmovnzl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovnbel %ecx, %ebx

  maybe read:      { %ecx %cf %zf }
  must read:       { %ecx %cf %zf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (concat <0x0|32> (if (== (if <%cf> then <0x1|8> else <0x0|8>) <0x0|8>) then (if <%zf> then <%rbx|64>[31:0] else <%rcx|64>[31:0]) else <%rbx|64>[31:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/