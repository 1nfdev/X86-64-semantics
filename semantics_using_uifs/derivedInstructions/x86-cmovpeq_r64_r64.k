// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVPEQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovpeq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt ((#ifBool (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)))), 0, 1)), mi(8, 1))), mi(32, 0)) ) #else ( eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)))), 0, 1)), mi(8, 0))), mi(32, 0)) ) #fi) ) #then ( getParentValue(R2, RSMap) ) #else ( getParentValue(R1, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVPEQ-R64-R64-SEMANTICS
  imports CMOVPEQ-R64-R64
endmodule
/*
TargetInstr:
cmovpeq %rcx, %rbx
RWSet:
maybe read:{ %rcx %pf }
must read:{ %rcx %pf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setpo %dh           #  1     0    3      OPC=setpo_rh
circuit:salb $0x1, %dh      #  2     0x3  2      OPC=salb_rh_one
circuit:cmovnaq %rcx, %rbx  #  3     0x5  4      OPC=cmovnaq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovpeq %rcx, %rbx

  maybe read:      { %rcx %pf }
  must read:       { %rcx %pf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (if (== (plus (if (== (concat (if (== (plus (if <%pf> then <0x0|9> else <0x1|9>) (if <%pf> then <0x0|9> else <0x1|9>))[8:8] <0x1|1>) then <0x1|24> else <0x0|24>) (if (== (plus (if <%pf> then <0x0|9> else <0x1|9>) (if <%pf> then <0x0|9> else <0x1|9>))[7:0] <0x0|8>) then <0x1|8> else <0x0|8>)) <0x0|32>) then <0x1|9> else <0x0|9>) (if (== (concat (if (== (plus (if <%pf> then <0x0|9> else <0x1|9>) (if <%pf> then <0x0|9> else <0x1|9>))[8:8] <0x1|1>) then <0x1|24> else <0x0|24>) (if (== (plus (if <%pf> then <0x0|9> else <0x1|9>) (if <%pf> then <0x0|9> else <0x1|9>))[7:0] <0x0|8>) then <0x1|8> else <0x0|8>)) <0x0|32>) then <0x1|9> else <0x0|9>))[7:0] <0x0|8>) then <%rcx|64> else <%rbx|64>)

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/