// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movb R1:Rh, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module MOVB-RH-RH-SEMANTICS
  imports MOVB-RH-RH
endmodule
/*
TargetInstr:
movb %bh, %ah
RWSet:
maybe read:{ %bh }
must read:{ %bh }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %bh, %edx                 #  1     0    3      OPC=movzbl_r32_rh
circuit:callq .move_064_032_rdx_r8d_r9d  #  2     0x3  5      OPC=callq_label
circuit:callq .move_032_064_r8d_r9d_rcx  #  3     0x8  5      OPC=callq_label
circuit:movb %cl, %ah                    #  4     0xd  2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movb %bh, %ah

  maybe read:      { %bh }
  must read:       { %bh }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] <%rbx|64>[15:8]) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/