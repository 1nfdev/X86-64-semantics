// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVD-R32-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movd R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 224, 256)) )


)

    </regstate>
endmodule

module MOVD-R32-XMM-SEMANTICS
  imports MOVD-R32-XMM
endmodule
/*
TargetInstr:
movd %xmm1, %ebx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_256_xmm8_xmm9_ymm1              #  2     0x5   5      OPC=callq_label
circuit:callq .move_128_064_xmm1_r10_r11                #  3     0xa   5      OPC=callq_label
circuit:callq .move_032_064_r10d_r11d_rbx               #  4     0xf   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movd %xmm1, %ebx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%rbx   : (concat <0x0|32> <%ymm1|256>[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/