// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSLDUP-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsldup R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), extractMInt(getParentValue(R1, RSMap), 160, 192)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256)))) )


)

    </regstate>
endmodule

module MOVSLDUP-XMM-XMM-SEMANTICS
  imports MOVSLDUP-XMM-XMM
endmodule
/*
TargetInstr:
movsldup %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ pni }

Circuit:
circuit:vmovsldup %xmm2, %xmm12  #  1     0    4      OPC=vmovsldup_xmm_xmm
circuit:movdqa %xmm12, %xmm1     #  2     0x4  5      OPC=movdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movsldup %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { pni }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat (concat <%ymm2|256>[95:64] <%ymm2|256>[95:64]) (concat <%ymm2|256>[31:0] <%ymm2|256>[31:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/