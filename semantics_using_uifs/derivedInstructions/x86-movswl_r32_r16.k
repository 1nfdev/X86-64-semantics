// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSWL-R32-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movswl R1:R16, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 48, 64))), 32, 64)) )


)

    </regstate>
endmodule

module MOVSWL-R32-R16-SEMANTICS
  imports MOVSWL-R32-R16
endmodule
/*
TargetInstr:
movswl %cx, %ebx
RWSet:
maybe read:{ %cx }
must read:{ %cx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzwl %cx, %ebx                 #  1     0     3      OPC=movzwl_r32_r16
circuit:callq .move_064_032_rbx_r8d_r9d  #  2     0x3   5      OPC=callq_label
circuit:movq $0xffffffffffffffc0, %rbx   #  3     0x8   10     OPC=movq_r64_imm64
circuit:movw %r8w, %bx                   #  4     0x12  4      OPC=movw_r16_r16
circuit:movswq %bx, %r9                  #  5     0x16  4      OPC=movswq_r64_r16
circuit:xchgl %ebx, %r9d                 #  6     0x1a  3      OPC=xchgl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movswl %cx, %ebx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (sign-extend-64 <%rcx|64>[15:0])[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/