// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVZBQ-R64-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movzbq R1:R8, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(56, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)) )


)

    </regstate>
endmodule

module MOVZBQ-R64-R8-SEMANTICS
  imports MOVZBQ-R64-R8
endmodule
/*
TargetInstr:
movzbq %cl, %rbx
RWSet:
maybe read:{ %cl }
must read:{ %cl }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x0, %rbx   #  1     0     10     OPC=movq_r64_imm64
circuit:clc               #  2     0xa   1      OPC=clc
circuit:movsbq %cl, %rdi  #  3     0xb   4      OPC=movsbq_r64_r8
circuit:adcb %dil, %bl    #  4     0xf   3      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movzbq %cl, %rbx

  maybe read:      { %cl }
  must read:       { %cl }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|56> <%rcx|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/