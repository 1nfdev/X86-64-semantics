// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVZBW-R16-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movzbw R1:Rh, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))) )


)

    </regstate>
endmodule

module MOVZBW-R16-RH-SEMANTICS
  imports MOVZBW-R16-RH
endmodule
/*
TargetInstr:
movzbw %ah, %bx
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %bx }
must write:{ %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorq %rcx, %rcx          #  1     0    3      OPC=xorq_r64_r64
circuit:callq .read_sf_into_rbx  #  2     0x3  5      OPC=callq_label
circuit:movb %ah, %bl            #  3     0x8  2      OPC=movb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movzbw %ah, %bx

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %bx }
  must write:      { %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (concat <0x0|8> <%rax|64>[15:8]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/