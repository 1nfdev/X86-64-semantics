// Autogenerated using stratification.
requires "x86-configuration.k"

module NOTL-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (notl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))) )


)

    </regstate>
endmodule

module NOTL-R32-SEMANTICS
  imports NOTL-R32
endmodule
/*
TargetInstr:
notl %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movslq %ebx, %rax               #  1     0    3      OPC=movslq_r64_r32
circuit:movq $0xffffffffffffffff, %rbx  #  2     0x3  10     OPC=movq_r64_imm64
circuit:xorl %eax, %ebx                 #  3     0xd  2      OPC=xorl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

notl %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (^ (concat <0x0|32> <%rbx|64>[31:0]) <0xffffffff|64>)

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/