// Autogenerated using stratification.
requires "x86-configuration.k"

module ORB-RH-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (orb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))), 0, 1)) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 48, 56)), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64)))), mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ORB-RH-R8-SEMANTICS
  imports ORB-RH-R8
endmodule
/*
TargetInstr:
orb %bl, %ah
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %ah %cf %pf %zf %sf %of }
must write:{ %ah %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:xorb %al, %al   #  1     0    2      OPC=xorb_r8_r8
circuit:xchgb %ah, %bl  #  2     0x2  2      OPC=xchgb_r8_rh
circuit:adcb %ah, %al   #  3     0x4  2      OPC=adcb_r8_rh
circuit:movb %bl, %bh   #  4     0x6  2      OPC=movb_rh_r8
circuit:orw %bx, %ax    #  5     0x8  3      OPC=orw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

orb %bl, %ah

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (| <%rax|64>[15:8] <%rbx|64>[7:0])) <%rax|64>[7:0])

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (| <%rax|64>[8:8] <%rbx|64>[0:0]) <0x1|1>) (== (| <%rax|64>[9:9] <%rbx|64>[1:1]) <0x1|1>)) (== (| <%rax|64>[10:10] <%rbx|64>[2:2]) <0x1|1>)) (== (| <%rax|64>[11:11] <%rbx|64>[3:3]) <0x1|1>)) (== (| <%rax|64>[12:12] <%rbx|64>[4:4]) <0x1|1>)) (== (| <%rax|64>[13:13] <%rbx|64>[5:5]) <0x1|1>)) (== (| <%rax|64>[14:14] <%rbx|64>[6:6]) <0x1|1>)) (== (| <%rax|64>[15:15] <%rbx|64>[7:7]) <0x1|1>)))
%zf    : (== (| (sign-extend-64 (concat <%rax|64>[15:8] <%rax|64>[15:8])) (sign-extend-64 (concat <%rbx|64>[7:0] <%rbx|64>[7:0]))) <0x0|64>)
%sf    : (== (| (sign-extend-64 (concat <%rax|64>[15:8] <%rax|64>[15:8]))[63:63] (sign-extend-64 (concat <%rbx|64>[7:0] <%rbx|64>[7:0]))[63:63]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/