// Autogenerated using stratification.
requires "x86-configuration.k"

module PSUBQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (psubq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(getParentValue(R1, RSMap), 128, 192))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 128, 192))), mi(65, 1)), 1, 65), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(getParentValue(R1, RSMap), 192, 256))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 192, 256))), mi(65, 1)), 1, 65))) )


)

    </regstate>
endmodule

module PSUBQ-XMM-XMM-SEMANTICS
  imports PSUBQ-XMM-XMM
endmodule
/*
TargetInstr:
psubq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vpsubq %xmm2, %xmm1, %xmm12  #  1     0    4      OPC=vpsubq_xmm_xmm_xmm
circuit:movupd %xmm12, %xmm1         #  2     0x4  5      OPC=movupd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

psubq %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat (plus (plus (concat <0x0|1> (^ <%ymm2|256>[127:64] <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%ymm1|256>[127:64]))[63:0] (plus (plus (concat <0x0|1> (^ <%ymm2|256>[63:0] <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%ymm1|256>[63:0]))[63:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/