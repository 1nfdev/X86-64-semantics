// Autogenerated using stratification.
requires "x86-configuration.k"

module SALB-RH-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (salb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56))), 1, 2) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56))), 1, 9), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SALB-RH-ONE-SEMANTICS
  imports SALB-RH-ONE
endmodule
/*
TargetInstr:
salb $0x1, %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %cf %pf %zf %sf %of }
must write:{ %ah %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:shlb $0x1, %ah  #  1     0    2      OPC=shlb_rh_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

salb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[7:0]) <%rax|64>[7:0])

%cf    : (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[0:0] <0x1|1>) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[1:1] <0x1|1>)) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[2:2] <0x1|1>)) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[3:3] <0x1|1>)) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[4:4] <0x1|1>)) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[5:5] <0x1|1>)) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[6:6] <0x1|1>)) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[7:7] <0x1|1>)))
%zf    : (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[7:0] <0x0|8>)
%sf    : (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[7:7] <0x1|1>)
%of    : (and (== (== <%rax|64>[15:15] <0x1|1>) (== <%rax|64>[15:15] <0x1|1>)) (not (== (== <%rax|64>[15:15] <0x1|1>) (== (plus (concat <0x0|1> <%rax|64>[15:8]) (concat <0x0|1> <%rax|64>[15:8]))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/