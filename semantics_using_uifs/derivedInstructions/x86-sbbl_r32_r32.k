// Autogenerated using stratification.
requires "x86-configuration.k"

module SBBL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sbbl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64)), extractMInt(getParentValue(R2, RSMap), 32, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 32, 33)), extractMInt(getParentValue(R2, RSMap), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 32, 33)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 33)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SBBL-R32-R32-SEMANTICS
  imports SBBL-R32-R32
endmodule
/*
TargetInstr:
sbbl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx %cf }
must read:{ %ecx %ebx %cf }
maybe write:{ %rbx %cf %pf %af %zf %sf %of }
must write:{ %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:notl %ecx               #  1     0    2      OPC=notl_r32
circuit:cmc                     #  2     0x2  1      OPC=cmc
circuit:adcl %ecx, %ebx         #  3     0x3  2      OPC=adcl_r32_r32
circuit:callq .set_szp_for_ebx  #  4     0x5  5      OPC=callq_label
circuit:cmc                     #  5     0xa  1      OPC=cmc
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sbbl %ecx, %ebx

  maybe read:      { %ecx %ebx %cf }
  must read:       { %ecx %ebx %cf }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[31:0])

%cf    : (== (plus (if (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[32:32] <0x1|1>) then <0x0|9> else <0xff|9>) (if (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[32:32] <0x1|1>) then <0x0|9> else <0xff|9>))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[0:0] <0x1|1>) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[1:1] <0x1|1>)) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[2:2] <0x1|1>)) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[3:3] <0x1|1>)) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[4:4] <0x1|1>)) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[5:5] <0x1|1>)) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[6:6] <0x1|1>)) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> (^ <%rcx|64>[3:0] <0xf|4>)) (concat <0x0|1> <%rbx|64>[3:0]))[4:4] <0x1|1>)
%zf    : (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[31:0] <0x0|32>)
%sf    : (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[31:31] <0x1|1>)
%of    : (and (== (== (^ <%rcx|64>[31:31] <0x1|1>) <0x1|1>) (== <%rbx|64>[31:31] <0x1|1>)) (not (== (== (^ <%rcx|64>[31:31] <0x1|1>) <0x1|1>) (== (plus (if (== (plus (if <%cf> then <0x0|9> else <0xff|9>) (if <%cf> then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>)) <0x1|33>) else (concat <0x0|1> (^ <%rcx|64>[31:0] <0xffffffff|32>))) (concat <0x0|1> <%rbx|64>[31:0]))[31:31] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/