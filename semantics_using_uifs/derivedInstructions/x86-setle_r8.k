// Autogenerated using stratification.
requires "x86-configuration.k"

module SETLE-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setle R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 1)) ) #fi)  )


)

    </regstate>
endmodule

module SETLE-R8-SEMANTICS
  imports SETLE-R8
endmodule
/*
TargetInstr:
setle %bl
RWSet:
maybe read:{ %zf %sf %of }
must read:{ %zf %sf %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:setng %bl  #  1     0    3      OPC=setng_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setle %bl

  maybe read:      { %zf %sf %of }
  must read:       { %zf %sf %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if (== (concat (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>)) (if <%zf> then <0x1|8> else <0x0|8>)) <0x0|16>) then <0x0|8> else <0x1|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/