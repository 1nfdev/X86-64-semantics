// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNC-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnc R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))) )


)

    </regstate>
endmodule

module SETNC-R8-SEMANTICS
  imports SETNC-R8
endmodule
/*
TargetInstr:
setnc %bl
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_cf_into_rbx  #  1     0    5      OPC=callq_label
circuit:orl %ebx, %ebx           #  2     0x5  2      OPC=orl_r32_r32
circuit:setge %r10b              #  3     0x7  4      OPC=setge_r8
circuit:xorb %r10b, %bl          #  4     0xb  3      OPC=xorb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnc %bl

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if <%cf> then <0x0|8> else <0x1|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/