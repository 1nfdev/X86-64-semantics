// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNE-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setne R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #fi)  )


)

    </regstate>
endmodule

module SETNE-R8-SEMANTICS
  imports SETNE-R8
endmodule
/*
TargetInstr:
setne %bl
RWSet:
maybe read:{ %zf }
must read:{ %zf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x0, %rbx                   #  1     0     10     OPC=movq_r64_imm64
circuit:setne %bh                         #  2     0xa   3      OPC=setne_rh
circuit:callq .move_016_008_bx_r8b_r9b    #  3     0xd   5      OPC=callq_label
circuit:callq .move_r9b_to_byte_6_of_rbx  #  4     0x12  5      OPC=callq_label
circuit:xaddb %bh, %bl                    #  5     0x17  3      OPC=xaddb_r8_rh
circuit:callq .move_r8b_to_byte_5_of_rbx  #  6     0x1a  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setne %bl

  maybe read:      { %zf }
  must read:       { %zf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if <%zf> then <0x0|8> else <0x1|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/