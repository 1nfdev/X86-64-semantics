// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNGE-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnge R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETNGE-RH-SEMANTICS
  imports SETNGE-RH
endmodule
/*
TargetInstr:
setnge %ah
RWSet:
maybe read:{ %sf %of }
must read:{ %sf %of }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_of_into_rcx  #  1     0     5      OPC=callq_label
circuit:callq .read_sf_into_rbx  #  2     0x5   5      OPC=callq_label
circuit:xorw %bx, %cx            #  3     0xa   3      OPC=xorw_r16_r16
circuit:movslq %ecx, %rdx        #  4     0xd   3      OPC=movslq_r64_r32
circuit:movb %dl, %ah            #  5     0x10  2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnge %ah

  maybe read:      { %sf %of }
  must read:       { %sf %of }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>))) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/