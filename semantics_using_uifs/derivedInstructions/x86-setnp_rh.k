// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNP-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnp R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), getFlag("PF", RSMap)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 1), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETNP-RH-SEMANTICS
  imports SETNP-RH
endmodule
/*
TargetInstr:
setnp %ah
RWSet:
maybe read:{ %pf }
must read:{ %pf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_pf_into_rbx           #  1     0     5      OPC=callq_label
circuit:callq .move_032_016_ebx_r8w_r9w   #  2     0x5   5      OPC=callq_label
circuit:callq .move_r8b_to_byte_2_of_rbx  #  3     0xa   5      OPC=callq_label
circuit:callq .set_szp_for_bx             #  4     0xf   5      OPC=callq_label
circuit:callq .read_zf_into_rbx           #  5     0x14  5      OPC=callq_label
circuit:movb %bl, %ah                     #  6     0x19  2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnp %ah

  maybe read:      { %pf }
  must read:       { %pf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (if (== (if <%pf> then <0x1|16> else <0x0|16>) <0x0|16>) then <0x1|8> else <0x0|8>)) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/