// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNS-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setns R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), mi(8, 0)), mi(8, 1)), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETNS-RH-SEMANTICS
  imports SETNS-RH
endmodule
/*
TargetInstr:
setns %ah
RWSet:
maybe read:{ %sf }
must read:{ %sf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x2, %rax  #  1     0    10     OPC=movq_r64_imm64
circuit:roll $0x1, %eax  #  2     0xa  2      OPC=roll_r32_one
circuit:setnl %ah        #  3     0xc  3      OPC=setnl_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setns %ah

  maybe read:      { %sf }
  must read:       { %sf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (if <%sf> then <0x0|8> else <0x1|8>)) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/