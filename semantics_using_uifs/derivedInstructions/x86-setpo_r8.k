// Autogenerated using stratification.
requires "x86-configuration.k"

module SETPO-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setpo R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))) )


)

    </regstate>
endmodule

module SETPO-R8-SEMANTICS
  imports SETPO-R8
endmodule
/*
TargetInstr:
setpo %bl
RWSet:
maybe read:{ %pf }
must read:{ %pf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_pf_into_rbx           #  1     0     5      OPC=callq_label
circuit:callq .move_064_032_rbx_r8d_r9d   #  2     0x5   5      OPC=callq_label
circuit:callq .move_byte_3_of_rbx_to_r9b  #  3     0xa   5      OPC=callq_label
circuit:xchgl %r8d, %r9d                  #  4     0xf   3      OPC=xchgl_r32_r32
circuit:xorq %rbx, %rbx                   #  5     0x12  3      OPC=xorq_r64_r64
circuit:callq .read_pf_into_rbx           #  6     0x15  5      OPC=callq_label
circuit:xorq %r9, %rbx                    #  7     0x1a  3      OPC=xorq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setpo %bl

  maybe read:      { %pf }
  must read:       { %pf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if <%pf> then <0x0|8> else <0x1|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/