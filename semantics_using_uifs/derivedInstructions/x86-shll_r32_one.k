// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLL-R32-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shll $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), 1, 2) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), extractMInt(getParentValue(R2, RSMap), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), 1, 33)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SHLL-R32-ONE-SEMANTICS
  imports SHLL-R32-ONE
endmodule
/*
TargetInstr:
shll $0x1, %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax         #  1     0    3      OPC=xorq_r64_r64
circuit:clc                     #  2     0x3  1      OPC=clc
circuit:adcb %al, %bl           #  3     0x4  2      OPC=adcb_r8_r8
circuit:rcll $0x1, %ebx         #  4     0x6  2      OPC=rcll_r32_one
circuit:callq .set_szp_for_ebx  #  5     0x8  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shll $0x1, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[31:0])

%cf    : (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[32:32] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[0:0] <0x1|1>) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[1:1] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[2:2] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[3:3] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[4:4] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[5:5] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[6:6] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[7:7] <0x1|1>)))
%zf    : (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[31:0] <0x0|32>)
%sf    : (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[31:31] <0x1|1>)
%of    : (and (== (== <%rbx|64>[31:31] <0x1|1>) (== <%rbx|64>[31:31] <0x1|1>)) (not (== (== <%rbx|64>[31:31] <0x1|1>) (== (plus (concat <0x0|1> <%rbx|64>[31:0]) (concat <0x0|1> <%rbx|64>[31:0]))[31:31] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/