// Autogenerated using stratification.
requires "x86-configuration.k"

module SUBQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (subq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), getParentValue(R2, RSMap)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 0, 1)), extractMInt(getParentValue(R2, RSMap), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 0, 1)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 1, 65) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), mi(65, 1)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SUBQ-R64-R64-SEMANTICS
  imports SUBQ-R64-R64
endmodule
/*
TargetInstr:
subq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %rbx %cf %pf %af %zf %sf %of }
must write:{ %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:stc              #  1     0    1      OPC=stc
circuit:notq %rcx        #  2     0x1  3      OPC=notq_r64
circuit:adcq %rcx, %rbx  #  3     0x4  3      OPC=adcq_r64_r64
circuit:cmc              #  4     0x7  1      OPC=cmc
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

subq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[63:0]

%cf    : (== (plus (if (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[64:64] <0x1|1>) then <0x0|9> else <0xff|9>) (if (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[64:64] <0x1|1>) then <0x0|9> else <0xff|9>))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[0:0] <0x1|1>) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[1:1] <0x1|1>)) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[2:2] <0x1|1>)) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[3:3] <0x1|1>)) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[4:4] <0x1|1>)) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[5:5] <0x1|1>)) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[6:6] <0x1|1>)) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> (^ <%rcx|64>[3:0] <0xf|4>)) (concat <0x0|1> <%rbx|64>[3:0]))[4:4] <0x1|1>)
%zf    : (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[63:0] <0x0|64>)
%sf    : (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[63:63] <0x1|1>)
%of    : (and (== (== (^ <%rcx|64>[63:63] <0x1|1>) <0x1|1>) (== <%rbx|64>[63:63] <0x1|1>)) (not (== (== (^ <%rcx|64>[63:63] <0x1|1>) <0x1|1>) (== (plus (plus (concat <0x0|1> (^ <%rcx|64> <0xffffffffffffffff|64>)) <0x1|65>) (concat <0x0|1> <%rbx|64>))[63:63] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/