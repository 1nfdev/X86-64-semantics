// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVD-R32-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovd R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 224, 256)) )


)

    </regstate>
endmodule

module VMOVD-R32-XMM-SEMANTICS
  imports VMOVD-R32-XMM
endmodule
/*
TargetInstr:
vmovd %xmm1, %ebx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:movq %xmm1, %rbx                 #  1     0    5      OPC=movq_r64_xmm
circuit:callq .move_032_016_ebx_r8w_r9w  #  2     0x5  5      OPC=callq_label
circuit:callq .move_016_032_r8w_r9w_ebx  #  3     0xa  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovd %xmm1, %ebx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%rbx   : (concat <0x0|32> <%ymm1|256>[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/