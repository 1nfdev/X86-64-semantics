// Autogenerated using stratification.
requires "x86-configuration.k"

module VPBROADCASTB-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpbroadcastb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256))), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 248, 256), extractMInt(getParentValue(R1, RSMap), 248, 256)))))) )


)

    </regstate>
endmodule

module VPBROADCASTB-XMM-XMM-SEMANTICS
  imports VPBROADCASTB-XMM-XMM
endmodule
/*
TargetInstr:
vpbroadcastb %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_128_064_xmm2_r12_r13   #  1     0     5      OPC=callq_label
circuit:movsbw %r12b, %ax                  #  2     0x5   5      OPC=movsbw_r16_r8
circuit:movw %ax, %r12w                    #  3     0xa   4      OPC=movw_r16_r16
circuit:callq .move_064_128_r12_r13_xmm2   #  4     0xe   5      OPC=callq_label
circuit:callq .move_128_064_xmm2_r8_r9     #  5     0x13  5      OPC=callq_label
circuit:vpbroadcastd %xmm2, %ymm1          #  6     0x18  5      OPC=vpbroadcastd_ymm_xmm
circuit:callq .move_r8b_to_byte_3_of_ymm1  #  7     0x1d  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_2_of_ymm1  #  8     0x22  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_1_of_ymm1  #  9     0x27  5      OPC=callq_label
circuit:vpbroadcastd %xmm1, %xmm1          #  10    0x2c  5      OPC=vpbroadcastd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpbroadcastb %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : (concat <0x0|128> (concat (concat (concat (concat (concat (concat <%ymm2|256>[7:0] <%ymm2|256>[7:0]) <%ymm2|256>[7:0]) <%ymm2|256>[7:0]) (concat (concat (concat <%ymm2|256>[7:0] <%ymm2|256>[7:0]) <%ymm2|256>[7:0]) <%ymm2|256>[7:0])) (concat (concat (concat <%ymm2|256>[7:0] <%ymm2|256>[7:0]) <%ymm2|256>[7:0]) <%ymm2|256>[7:0])) (concat (concat (concat <%ymm2|256>[7:0] <%ymm2|256>[7:0]) <%ymm2|256>[7:0]) <%ymm2|256>[7:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/