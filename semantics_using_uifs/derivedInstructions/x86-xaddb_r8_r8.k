// Autogenerated using stratification.
requires "x86-configuration.k"

module XADDB-R8-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xaddb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2) )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )


)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2) )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )


)

    </regstate>
      requires sameRegisters(R1, R2)
endmodule

module XADDB-R8-R8-SEMANTICS
  imports XADDB-R8-R8
endmodule
/*
TargetInstr:
xaddb %cl, %bl
RWSet:
maybe read:{ %cl %bl }
must read:{ %cl %bl }
maybe write:{ %cl %bl %cf %pf %af %zf %sf %of }
must write:{ %cl %bl %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .clear_cf     #  1     0     5      OPC=callq_label
circuit:movsbl %cl, %r13d   #  2     0x5   4      OPC=movsbl_r32_r8
circuit:movsbl %bl, %r15d   #  3     0x9   4      OPC=movsbl_r32_r8
circuit:movsbq %r15b, %rcx  #  4     0xd   4      OPC=movsbq_r64_r8
circuit:adcb %cl, %r13b     #  5     0x11  3      OPC=adcb_r8_r8
circuit:movslq %r13d, %rbx  #  6     0x14  3      OPC=movslq_r64_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xaddb %cl, %bl

  maybe read:      { %cl %bl }
  must read:       { %cl %bl }
  maybe write:     { %cl %bl %cf %pf %af %zf %sf %of }
  must write:      { %cl %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rcx   : (concat <%rcx|64>[63:8] <%rbx|64>[7:0])
%rbx   : (concat <%rbx|64>[63:8] (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[7:0])

%cf    : (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[0:0] <0x1|1>) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[1:1] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[2:2] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[3:3] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[4:4] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[5:5] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[6:6] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> <%rbx|64>[3:0]) (concat <0x0|1> <%rcx|64>[3:0]))[4:4] <0x1|1>)
%zf    : (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[7:0] <0x0|8>)
%sf    : (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[7:7] <0x1|1>)
%of    : (and (== (== <%rbx|64>[7:7] <0x1|1>) (== <%rcx|64>[7:7] <0x1|1>)) (not (== (== <%rbx|64>[7:7] <0x1|1>) (== (plus (concat <0x0|1> <%rbx|64>[7:0]) (concat <0x0|1> <%rcx|64>[7:0]))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
