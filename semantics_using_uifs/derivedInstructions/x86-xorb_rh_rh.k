// Autogenerated using stratification.
requires "x86-configuration.k"

module XORB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R1, RSMap), 48, 49)) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module XORB-RH-RH-SEMANTICS
  imports XORB-RH-RH
endmodule
/*
TargetInstr:
xorb %bh, %ah
RWSet:
maybe read:{ %ah %bh }
must read:{ %ah %bh }
maybe write:{ %ah %cf %pf %zf %sf %of }
must write:{ %ah %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:xorb %al, %al   #  1     0    2      OPC=xorb_r8_r8
circuit:xaddb %al, %bh  #  2     0x2  3      OPC=xaddb_rh_r8
circuit:xorb %al, %ah   #  3     0x5  2      OPC=xorb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xorb %bh, %ah

  maybe read:      { %ah %bh }
  must read:       { %ah %bh }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (^ <%rbx|64>[15:8] <%rax|64>[15:8])) <%rax|64>[7:0])

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (^ <%rbx|64>[8:8] <%rax|64>[8:8]) <0x1|1>) (== (^ <%rbx|64>[9:9] <%rax|64>[9:9]) <0x1|1>)) (== (^ <%rbx|64>[10:10] <%rax|64>[10:10]) <0x1|1>)) (== (^ <%rbx|64>[11:11] <%rax|64>[11:11]) <0x1|1>)) (== (^ <%rbx|64>[12:12] <%rax|64>[12:12]) <0x1|1>)) (== (^ <%rbx|64>[13:13] <%rax|64>[13:13]) <0x1|1>)) (== (^ <%rbx|64>[14:14] <%rax|64>[14:14]) <0x1|1>)) (== (^ <%rbx|64>[15:15] <%rax|64>[15:15]) <0x1|1>)))
%zf    : (== (^ <%rbx|64>[15:8] <%rax|64>[15:8]) <0x0|8>)
%sf    : (== (^ <%rbx|64>[15:15] <%rax|64>[15:15]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/