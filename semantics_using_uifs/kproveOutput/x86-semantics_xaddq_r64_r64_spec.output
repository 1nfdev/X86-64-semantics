-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rsi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rsi(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_738:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_739:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _73_742:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _79_748:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _72_741:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_744:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _77_746:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_743:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_740:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _76_745:K@SORT-K String@STRING-SYNTAX(#""RSI"") |-> _78_747:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _80_749:K@SORT-K   ),, <regstatequeue>(_81_750:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rsi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rsi(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_738:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_739:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, %rsi(.KList@BASIC-K)), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rsi(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_738:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_739:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rsi(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_738:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_739:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xchgq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX)),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"57"),, Int@INT-SYNTAX(#"65")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX)),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"57"),, Int@INT-SYNTAX(#"65")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX)),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"57"),, Int@INT-SYNTAX(#"65")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX)),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"57"),, Int@INT-SYNTAX(#"65")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX)),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"57"),, Int@INT-SYNTAX(#"65")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"65")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
49.72user 1.07system 0:12.03elapsed 422%CPU (0avgtext+0avgdata 1436500maxresident)k
0inputs+3656outputs (0major+276264minor)pagefaults 0swaps
