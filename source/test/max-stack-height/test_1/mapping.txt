========================================================

Source line mapping for function: sub_40
========================================================
allocas
global->local

288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <40>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <40>	pushq	%rbp
290 :   %79 = add i64 %78, -8 : NIL
291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <40>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <40>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <41>	movq	%rsp, %rbp

294 :   %81 = add i64 %78, -24 : NIL

313 :   store i64 %81, i64* %RSP_val, !mcsema_real_eip !4 :          <44>	subq	$16, %rsp

314 :   store i64 10, i64* %RDI_val, !mcsema_real_eip !5 :          <48>	movl	$10, %edi
315 :   store i64 20, i64* %RSI_val, !mcsema_real_eip !6 :          <4d>	movl	$20, %esi
316 :   %94 = load i64* %RBP_val, !mcsema_real_eip !7 :          <52>	movl	$0, -4(%rbp)
317 :   %95 = add i64 %94, -4, !mcsema_real_eip !7 :          <52>	movl	$0, -4(%rbp)
318 :   %96 = inttoptr i64 %95 to i64*, !mcsema_real_eip !7 :          <52>	movl	$0, -4(%rbp)
319 :   %97 = bitcast i64* %96 to i32* : NIL
320 :   store i32 0, i32* %97, !mcsema_real_eip !7 :          <52>	movl	$0, -4(%rbp)

321 :   %98 = load i64* %RSP_val, !mcsema_real_eip !8 :          <59>	callq	-94
322 :   %99 = add i64 %98, -8 : NIL
323 :   %100 = inttoptr i64 %99 to i64*, !mcsema_real_eip !8 :          <59>	callq	-94
324 :   store i64 -4981261766360305936, i64* %100, !mcsema_real_eip !8 :          <59>	callq	-94
325 :   store i64 %99, i64* %RSP_val, !mcsema_real_eip !8 :          <59>	callq	-94

local->global
467 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0), !mcsema_real_eip !8 :          <59>	callq	-94
glocal->local

609 :   %241 = load i64* %RBP_val, !mcsema_real_eip !9 :          <5e>	movl	%eax, -8(%rbp)
610 :   %242 = add i64 %241, -8, !mcsema_real_eip !9 :          <5e>	movl	%eax, -8(%rbp)
611 :   %243 = inttoptr i64 %242 to i64*, !mcsema_real_eip !9 :          <5e>	movl	%eax, -8(%rbp)
612 :   %244 = load i64* %RAX_val, !mcsema_real_eip !9 :          <5e>	movl	%eax, -8(%rbp)
613 :   %245 = trunc i64 %244 to i32, !mcsema_real_eip !9 :          <5e>	movl	%eax, -8(%rbp)
614 :   %246 = bitcast i64* %243 to i32* : NIL
615 :   store i32 %245, i32* %246, !mcsema_real_eip !9 :          <5e>	movl	%eax, -8(%rbp)

616 :   %247 = load i64* %RBP_val, !mcsema_real_eip !10 :          <61>	movl	-8(%rbp), %eax
617 :   %248 = add i64 %247, -8, !mcsema_real_eip !10 :          <61>	movl	-8(%rbp), %eax
618 :   %249 = inttoptr i64 %248 to i64*, !mcsema_real_eip !10 :          <61>	movl	-8(%rbp), %eax
619 :   %250 = bitcast i64* %249 to i32* : NIL
620 :   %251 = load i32* %250, !mcsema_real_eip !10 :          <61>	movl	-8(%rbp), %eax
621 :   %252 = zext i32 %251 to i64, !mcsema_real_eip !10 :          <61>	movl	-8(%rbp), %eax
622 :   store i64 %252, i64* %RAX_val, !mcsema_real_eip !10 :          <61>	movl	-8(%rbp), %eax

623 :   %253 = load i64* %RSP_val, !mcsema_real_eip !11 :          <64>	addq	$16, %rsp
624 :   %uadd = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %253, i64 16) : NIL
625 :   %254 = extractvalue { i64, i1 } %uadd, 0 : NIL

645 :   store i64 %254, i64* %RSP_val, !mcsema_real_eip !11 :          <64>	addq	$16, %rsp

646 :   %268 = inttoptr i64 %254 to i64*, !mcsema_real_eip !12 :          <68>	popq	%rbp
647 :   %269 = load i64* %268, !mcsema_real_eip !12 :          <68>	popq	%rbp
648 :   store i64 %269, i64* %RBP_val, !mcsema_real_eip !12 :          <68>	popq	%rbp

649 :   %270 = add i64 %254, 16, !mcsema_real_eip !13 :          <69>	retq
650 :   store i64 %270, i64* %RSP_val, !mcsema_real_eip !13 :          <69>	retq
local -> global

========================================================
Source line mapping for function: sub_0
========================================================
allocas
global->local
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
290 :   %79 = add i64 %78, -8 : NIL
291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <0>	pushq	%rbp
293 :   store i64 %79, i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

294 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <1>	movq	%rsp, %rbp

295 :   %81 = add i64 %78, -12, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
296 :   %82 = inttoptr i64 %81 to i64*, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
297 :   %83 = load i64* %RDI_val, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
298 :   %84 = trunc i64 %83 to i32, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
299 :   %85 = bitcast i64* %82 to i32* : NIL
300 :   store i32 %84, i32* %85, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)

301 :   %86 = load i64* %RBP_val, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
302 :   %87 = add i64 %86, -8, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
303 :   %88 = inttoptr i64 %87 to i64*, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)

304 :   %89 = load i64* %RSI_val, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
305 :   %90 = trunc i64 %89 to i32, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
306 :   %91 = bitcast i64* %88 to i32* : NIL
307 :   store i32 %90, i32* %91, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)

308 :   %92 = load i64* %RBP_val, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
309 :   %93 = add i64 %92, -4, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
310 :   %94 = inttoptr i64 %93 to i64*, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
311 :   %95 = bitcast i64* %94 to i32* : NIL
312 :   %96 = load i32* %95, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
313 :   %97 = zext i32 %96 to i64, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
314 :   store i64 %97, i64* %RSI_val, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi

315 :   %98 = load i64* %RBP_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
316 :   %99 = add i64 %98, -8, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
317 :   %100 = inttoptr i64 %99 to i64*, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
318 :   %101 = bitcast i64* %100 to i32* : NIL
319 :   %102 = load i32* %101, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
320 :   %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %96, i32 %102) : NIL
321 :   %103 = extractvalue { i32, i1 } %uadd, 0 : NIL
343 :   %119 = zext i32 %103 to i64, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
344 :   store i64 %119, i64* %RSI_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

345 :   %120 = load i64* %RBP_val, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)
346 :   %121 = add i64 %120, -12, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)
347 :   %122 = inttoptr i64 %121 to i64*, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)
348 :   %123 = bitcast i64* %122 to i32* : NIL
349 :   store i32 %103, i32* %123, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)

350 :   %124 = load i64* %RBP_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
351 :   %125 = add i64 %124, -4, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
352 :   %126 = inttoptr i64 %125 to i64*, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
353 :   %127 = bitcast i64* %126 to i32* : NIL
354 :   %128 = load i32* %127, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
355 :   %129 = add i32 %128, -40 : NIL
356 :   %130 = xor i32 %129, %128, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
357 :   %131 = and i32 %130, 16, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
358 :   %132 = icmp ne i32 %131, 0, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
359 :   store i1 %132, i1* %AF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
360 :   %133 = trunc i32 %129 to i8, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
361 :   %134 = tail call i8 @llvm.ctpop.i8(i8 %133), !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
362 :   %135 = and i8 %134, 1 : NIL
363 :   %136 = icmp eq i8 %135, 0 : NIL
364 :   store i1 %136, i1* %PF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
365 :   %137 = icmp eq i32 %129, 0, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
366 :   store i1 %137, i1* %ZF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
367 :   %138 = icmp slt i32 %129, 0 : NIL
368 :   store i1 %138, i1* %SF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
369 :   %139 = icmp ult i32 %128, 40, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
370 :   store i1 %139, i1* %CF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
371 :   %140 = and i32 %130, %128, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
372 :   %141 = icmp slt i32 %140, 0 : NIL
373 :   store i1 %141, i1* %OF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
374 :   %142 = xor i1 %138, %141 : NIL
375 :   %143 = load i1* %ZF_val, !mcsema_real_eip !10 :          <1a>	jle	16
376 :   %144 = or i1 %143, %142, !mcsema_real_eip !10 :          <1a>	jle	16
377 :   %145 = load i64* %RBP_val, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
378 :   %146 = add i64 %145, -12, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
379 :   %147 = inttoptr i64 %146 to i64*, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
380 :   %148 = bitcast i64* %147 to i32* : NIL
381 :   %149 = load i32* %148, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
382 :   %150 = zext i32 %149 to i64, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
383 :   store i64 %150, i64* %RAX_val, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
384 :   br i1 %144, label %block_0x30, label %block_0x20, !mcsema_real_eip !10 :          <1a>	jle	16
385 :   %151 = add i32 %149, -10 : NIL
386 :   %152 = xor i32 %151, %149, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
387 :   %153 = and i32 %152, 16, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
388 :   %154 = icmp ne i32 %153, 0, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
389 :   store i1 %154, i1* %AF_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
390 :   %155 = trunc i32 %151 to i8, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
391 :   %156 = tail call i8 @llvm.ctpop.i8(i8 %155), !mcsema_real_eip !12 :          <33>	subl	$10, %eax
392 :   %157 = and i8 %156, 1 : NIL
393 :   %158 = icmp eq i8 %157, 0 : NIL
394 :   store i1 %158, i1* %PF_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
395 :   %159 = icmp eq i32 %151, 0, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
396 :   store i1 %159, i1* %ZF_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
397 :   %160 = icmp slt i32 %151, 0 : NIL
398 :   store i1 %160, i1* %SF_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
399 :   %161 = icmp ult i32 %149, 10, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
400 :   store i1 %161, i1* %CF_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
401 :   %162 = and i32 %152, %149, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
402 :   %163 = icmp slt i32 %162, 0 : NIL
403 :   store i1 %163, i1* %OF_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
404 :   %164 = zext i32 %151 to i64, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
405 :   store i64 %164, i64* %RAX_val, !mcsema_real_eip !12 :          <33>	subl	$10, %eax
406 :   %165 = load i64* %RBP_val, !mcsema_real_eip !13 :          <38>	movl	%eax, -16(%rbp)
407 :   %166 = add i64 %165, -16, !mcsema_real_eip !13 :          <38>	movl	%eax, -16(%rbp)
408 :   %167 = inttoptr i64 %166 to i64*, !mcsema_real_eip !13 :          <38>	movl	%eax, -16(%rbp)
409 :   %168 = bitcast i64* %167 to i32* : NIL
410 :   store i32 %151, i32* %168, !mcsema_real_eip !13 :          <38>	movl	%eax, -16(%rbp)
411 :   %169 = load i64* %RBP_val, !mcsema_real_eip !14 :          <3b>	movl	-16(%rbp), %eax
412 :   %170 = add i64 %169, -16, !mcsema_real_eip !14 :          <3b>	movl	-16(%rbp), %eax
413 :   %171 = inttoptr i64 %170 to i64*, !mcsema_real_eip !14 :          <3b>	movl	-16(%rbp), %eax
414 :   %172 = bitcast i64* %171 to i32* : NIL
415 :   %173 = load i32* %172, !mcsema_real_eip !14 :          <3b>	movl	-16(%rbp), %eax
416 :   %174 = zext i32 %173 to i64, !mcsema_real_eip !14 :          <3b>	movl	-16(%rbp), %eax
417 :   store i64 %174, i64* %RAX_val, !mcsema_real_eip !14 :          <3b>	movl	-16(%rbp), %eax

418 :   %175 = load i64* %RSP_val, !mcsema_real_eip !15 :          <3e>	popq	%rbp
419 :   %176 = inttoptr i64 %175 to i64*, !mcsema_real_eip !15 :          <3e>	popq	%rbp
420 :   %177 = load i64* %176, !mcsema_real_eip !15 :          <3e>	popq	%rbp
421 :   store i64 %177, i64* %RBP_val, !mcsema_real_eip !15 :          <3e>	popq	%rbp

422 :   %178 = add i64 %175, 16, !mcsema_real_eip !16 :          <3f>	retq
423 :   store i64 %178, i64* %RSP_val, !mcsema_real_eip !16 :          <3f>	retq
local->global
748 :   ret void, !mcsema_real_eip !16 :          <3f>	retq
========================================================
Source line mapping for function: mcsema_main
========================================================
1 :   tail call x86_64_sysvcc void @sub_40(%struct.regs* %0) : NIL
2 :   ret void : NIL
