========================================================
Source line mapping for function: sub_0
========================================================

1 :   %R15_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
2 :   %STACK_LIMIT_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
3 :   %STACK_BASE_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
4 :   %XMM15_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
5 :   %XMM14_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
6 :   %XMM13_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
7 :   %XMM12_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
8 :   %XMM11_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
9 :   %XMM10_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
10 :   %XMM9_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
11 :   %XMM8_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
12 :   %XMM7_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
13 :   %XMM6_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
14 :   %XMM5_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
15 :   %XMM4_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
16 :   %XMM3_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
17 :   %XMM2_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
18 :   %XMM1_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
19 :   %XMM0_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
20 :   %FPU_LASTDATA_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
21 :   %FPU_LASTDATA_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
22 :   %FPU_LASTIP_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
23 :   %FPU_LASTIP_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
24 :   %FPU_TAG_val = alloca [8 x i2], !mcsema_real_eip !2 :          <0>	pushq	%rbp
25 :   %FPU_IM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
26 :   %FPU_DM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
27 :   %FPU_ZM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
28 :   %FPU_OM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
29 :   %FPU_UM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
30 :   %FPU_PM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
31 :   %FPU_PC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
32 :   %FPU_RC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
33 :   %FPU_X_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
34 :   %FPU_IE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
35 :   %FPU_DE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
36 :   %FPU_ZE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
37 :   %FPU_OE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
38 :   %FPU_UE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
39 :   %FPU_PE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
40 :   %FPU_SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
41 :   %FPU_ES_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
42 :   %FPU_C0_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
43 :   %FPU_C1_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
44 :   %FPU_C2_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
45 :   %FPU_TOP_val = alloca i3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
46 :   %FPU_C3_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
47 :   %FPU_B_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
48 :   %STi_val = alloca [8 x x86_fp80], !mcsema_real_eip !2 :          <0>	pushq	%rbp
49 :   %DF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
50 :   %OF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
51 :   %SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
52 :   %CF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
53 :   %AF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
54 :   %PF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
55 :   %ZF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
56 :   %RIP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
57 :   %R14_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
58 :   %R13_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
59 :   %R12_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
60 :   %R11_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
61 :   %R10_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
62 :   %R9_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
63 :   %R8_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
64 :   %RSP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
65 :   %RBP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
66 :   %RDI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
67 :   %RSI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
68 :   %RDX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
69 :   %RCX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
70 :   %RBX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
71 :   %RAX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
72 :   %RAX = getelementptr inbounds %struct.regs* %0, i64 0, i32 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
73 :   %1 = load i64* %RAX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
74 :   store i64 %1, i64* %RAX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
75 :   %RBX = getelementptr inbounds %struct.regs* %0, i64 0, i32 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
76 :   %2 = load i64* %RBX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
77 :   store i64 %2, i64* %RBX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
78 :   %RCX = getelementptr inbounds %struct.regs* %0, i64 0, i32 2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
79 :   %3 = load i64* %RCX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
80 :   store i64 %3, i64* %RCX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
81 :   %RDX = getelementptr inbounds %struct.regs* %0, i64 0, i32 3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
82 :   %4 = load i64* %RDX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
83 :   store i64 %4, i64* %RDX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
84 :   %RSI = getelementptr inbounds %struct.regs* %0, i64 0, i32 4, !mcsema_real_eip !2 :          <0>	pushq	%rbp
85 :   %5 = load i64* %RSI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
86 :   store i64 %5, i64* %RSI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
87 :   %RDI = getelementptr inbounds %struct.regs* %0, i64 0, i32 5, !mcsema_real_eip !2 :          <0>	pushq	%rbp
88 :   %6 = load i64* %RDI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
89 :   store i64 %6, i64* %RDI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
90 :   %RSP = getelementptr inbounds %struct.regs* %0, i64 0, i32 6, !mcsema_real_eip !2 :          <0>	pushq	%rbp
91 :   %7 = load i64* %RSP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
92 :   store i64 %7, i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
93 :   %RBP = getelementptr inbounds %struct.regs* %0, i64 0, i32 7, !mcsema_real_eip !2 :          <0>	pushq	%rbp
94 :   %8 = load i64* %RBP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
95 :   store i64 %8, i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
96 :   %R8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
97 :   %9 = load i64* %R8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
98 :   store i64 %9, i64* %R8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
99 :   %R9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
100 :   %10 = load i64* %R9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
101 :   store i64 %10, i64* %R9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
102 :   %R10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
103 :   %11 = load i64* %R10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
104 :   store i64 %11, i64* %R10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
105 :   %R11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
106 :   %12 = load i64* %R11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
107 :   store i64 %12, i64* %R11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
108 :   %R12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
109 :   %13 = load i64* %R12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
110 :   store i64 %13, i64* %R12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
111 :   %R13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
112 :   %14 = load i64* %R13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
113 :   store i64 %14, i64* %R13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
114 :   %R14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
115 :   %15 = load i64* %R14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
116 :   store i64 %15, i64* %R14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
117 :   %R15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
118 :   %16 = load i64* %R15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
119 :   store i64 %16, i64* %R15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
120 :   %RIP = getelementptr inbounds %struct.regs* %0, i64 0, i32 16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
121 :   %17 = load i64* %RIP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
122 :   store i64 %17, i64* %RIP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
123 :   %CF = getelementptr inbounds %struct.regs* %0, i64 0, i32 17, !mcsema_real_eip !2 :          <0>	pushq	%rbp
124 :   %18 = load i1* %CF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
125 :   store i1 %18, i1* %CF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
126 :   %PF = getelementptr inbounds %struct.regs* %0, i64 0, i32 18, !mcsema_real_eip !2 :          <0>	pushq	%rbp
127 :   %19 = load i1* %PF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
128 :   store i1 %19, i1* %PF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
129 :   %AF = getelementptr inbounds %struct.regs* %0, i64 0, i32 19, !mcsema_real_eip !2 :          <0>	pushq	%rbp
130 :   %20 = load i1* %AF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
131 :   store i1 %20, i1* %AF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
132 :   %ZF = getelementptr inbounds %struct.regs* %0, i64 0, i32 20, !mcsema_real_eip !2 :          <0>	pushq	%rbp
133 :   %21 = load i1* %ZF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
134 :   store i1 %21, i1* %ZF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
135 :   %SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 21, !mcsema_real_eip !2 :          <0>	pushq	%rbp
136 :   %22 = load i1* %SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
137 :   store i1 %22, i1* %SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
138 :   %OF = getelementptr inbounds %struct.regs* %0, i64 0, i32 22, !mcsema_real_eip !2 :          <0>	pushq	%rbp
139 :   %23 = load i1* %OF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
140 :   store i1 %23, i1* %OF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
141 :   %DF = getelementptr inbounds %struct.regs* %0, i64 0, i32 23, !mcsema_real_eip !2 :          <0>	pushq	%rbp
142 :   %24 = load i1* %DF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
143 :   store i1 %24, i1* %DF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
144 :   %25 = getelementptr inbounds %struct.regs* %0, i64 0, i32 24, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
145 :   %26 = bitcast x86_fp80* %25 to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
146 :   %27 = bitcast [8 x x86_fp80]* %STi_val to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
147 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !2 :          <0>	pushq	%rbp
148 :   %FPU_B = getelementptr inbounds %struct.regs* %0, i64 0, i32 25, !mcsema_real_eip !2 :          <0>	pushq	%rbp
149 :   %28 = load i1* %FPU_B, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
150 :   store i1 %28, i1* %FPU_B_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
151 :   %FPU_C3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 26, !mcsema_real_eip !2 :          <0>	pushq	%rbp
152 :   %29 = load i1* %FPU_C3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
153 :   store i1 %29, i1* %FPU_C3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
154 :   %FPU_TOP = getelementptr inbounds %struct.regs* %0, i64 0, i32 27, !mcsema_real_eip !2 :          <0>	pushq	%rbp
155 :   %30 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
156 :   store i3 %30, i3* %FPU_TOP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
157 :   %FPU_C2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 28, !mcsema_real_eip !2 :          <0>	pushq	%rbp
158 :   %31 = load i1* %FPU_C2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
159 :   store i1 %31, i1* %FPU_C2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
160 :   %FPU_C1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 29, !mcsema_real_eip !2 :          <0>	pushq	%rbp
161 :   %32 = load i1* %FPU_C1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
162 :   store i1 %32, i1* %FPU_C1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
163 :   %FPU_C0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 30, !mcsema_real_eip !2 :          <0>	pushq	%rbp
164 :   %33 = load i1* %FPU_C0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
165 :   store i1 %33, i1* %FPU_C0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
166 :   %FPU_ES = getelementptr inbounds %struct.regs* %0, i64 0, i32 31, !mcsema_real_eip !2 :          <0>	pushq	%rbp
167 :   %34 = load i1* %FPU_ES, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
168 :   store i1 %34, i1* %FPU_ES_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
169 :   %FPU_SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 32, !mcsema_real_eip !2 :          <0>	pushq	%rbp
170 :   %35 = load i1* %FPU_SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
171 :   store i1 %35, i1* %FPU_SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
172 :   %FPU_PE = getelementptr inbounds %struct.regs* %0, i64 0, i32 33, !mcsema_real_eip !2 :          <0>	pushq	%rbp
173 :   %36 = load i1* %FPU_PE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
174 :   store i1 %36, i1* %FPU_PE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
175 :   %FPU_UE = getelementptr inbounds %struct.regs* %0, i64 0, i32 34, !mcsema_real_eip !2 :          <0>	pushq	%rbp
176 :   %37 = load i1* %FPU_UE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
177 :   store i1 %37, i1* %FPU_UE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
178 :   %FPU_OE = getelementptr inbounds %struct.regs* %0, i64 0, i32 35, !mcsema_real_eip !2 :          <0>	pushq	%rbp
179 :   %38 = load i1* %FPU_OE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
180 :   store i1 %38, i1* %FPU_OE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
181 :   %FPU_ZE = getelementptr inbounds %struct.regs* %0, i64 0, i32 36, !mcsema_real_eip !2 :          <0>	pushq	%rbp
182 :   %39 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
183 :   store i1 %39, i1* %FPU_ZE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
184 :   %FPU_DE = getelementptr inbounds %struct.regs* %0, i64 0, i32 37, !mcsema_real_eip !2 :          <0>	pushq	%rbp
185 :   %40 = load i1* %FPU_DE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
186 :   store i1 %40, i1* %FPU_DE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
187 :   %FPU_IE = getelementptr inbounds %struct.regs* %0, i64 0, i32 38, !mcsema_real_eip !2 :          <0>	pushq	%rbp
188 :   %41 = load i1* %FPU_IE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
189 :   store i1 %41, i1* %FPU_IE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
190 :   %FPU_X = getelementptr inbounds %struct.regs* %0, i64 0, i32 39, !mcsema_real_eip !2 :          <0>	pushq	%rbp
191 :   %42 = load i1* %FPU_X, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
192 :   store i1 %42, i1* %FPU_X_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
193 :   %FPU_RC = getelementptr inbounds %struct.regs* %0, i64 0, i32 40, !mcsema_real_eip !2 :          <0>	pushq	%rbp
194 :   %43 = load i2* %FPU_RC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
195 :   store i2 %43, i2* %FPU_RC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
196 :   %FPU_PC = getelementptr inbounds %struct.regs* %0, i64 0, i32 41, !mcsema_real_eip !2 :          <0>	pushq	%rbp
197 :   %44 = load i2* %FPU_PC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
198 :   store i2 %44, i2* %FPU_PC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
199 :   %FPU_PM = getelementptr inbounds %struct.regs* %0, i64 0, i32 42, !mcsema_real_eip !2 :          <0>	pushq	%rbp
200 :   %45 = load i1* %FPU_PM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
201 :   store i1 %45, i1* %FPU_PM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
202 :   %FPU_UM = getelementptr inbounds %struct.regs* %0, i64 0, i32 43, !mcsema_real_eip !2 :          <0>	pushq	%rbp
203 :   %46 = load i1* %FPU_UM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
204 :   store i1 %46, i1* %FPU_UM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
205 :   %FPU_OM = getelementptr inbounds %struct.regs* %0, i64 0, i32 44, !mcsema_real_eip !2 :          <0>	pushq	%rbp
206 :   %47 = load i1* %FPU_OM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
207 :   store i1 %47, i1* %FPU_OM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
208 :   %FPU_ZM = getelementptr inbounds %struct.regs* %0, i64 0, i32 45, !mcsema_real_eip !2 :          <0>	pushq	%rbp
209 :   %48 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
210 :   store i1 %48, i1* %FPU_ZM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
211 :   %FPU_DM = getelementptr inbounds %struct.regs* %0, i64 0, i32 46, !mcsema_real_eip !2 :          <0>	pushq	%rbp
212 :   %49 = load i1* %FPU_DM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
213 :   store i1 %49, i1* %FPU_DM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
214 :   %FPU_IM = getelementptr inbounds %struct.regs* %0, i64 0, i32 47, !mcsema_real_eip !2 :          <0>	pushq	%rbp
215 :   %50 = load i1* %FPU_IM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
216 :   store i1 %50, i1* %FPU_IM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
217 :   %51 = getelementptr inbounds %struct.regs* %0, i64 0, i32 48, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp

218 :   %52 = bitcast i8* %51 to i64* : NIL
219 :   %53 = bitcast [8 x i2]* %FPU_TAG_val to i64* : NIL
220 :   %54 = load i64* %52, align 4 : NIL
221 :   store i64 %54, i64* %53, align 4 : NIL

222 :   %FPU_LASTIP_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 49, !mcsema_real_eip !2 :          <0>	pushq	%rbp
223 :   %55 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
224 :   store i16 %55, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
225 :   %FPU_LASTIP_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 50, !mcsema_real_eip !2 :          <0>	pushq	%rbp
226 :   %56 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
227 :   store i64 %56, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
228 :   %FPU_LASTDATA_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 51, !mcsema_real_eip !2 :          <0>	pushq	%rbp
229 :   %57 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
230 :   store i16 %57, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
231 :   %FPU_LASTDATA_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 52, !mcsema_real_eip !2 :          <0>	pushq	%rbp
232 :   %58 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
233 :   store i64 %58, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
234 :   %XMM0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 54, !mcsema_real_eip !2 :          <0>	pushq	%rbp
235 :   %59 = load i128* %XMM0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
236 :   store i128 %59, i128* %XMM0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
237 :   %XMM1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 55, !mcsema_real_eip !2 :          <0>	pushq	%rbp
238 :   %60 = load i128* %XMM1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
239 :   store i128 %60, i128* %XMM1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
240 :   %XMM2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 56, !mcsema_real_eip !2 :          <0>	pushq	%rbp
241 :   %61 = load i128* %XMM2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
242 :   store i128 %61, i128* %XMM2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
243 :   %XMM3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 57, !mcsema_real_eip !2 :          <0>	pushq	%rbp
244 :   %62 = load i128* %XMM3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
245 :   store i128 %62, i128* %XMM3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
246 :   %XMM4 = getelementptr inbounds %struct.regs* %0, i64 0, i32 58, !mcsema_real_eip !2 :          <0>	pushq	%rbp
247 :   %63 = load i128* %XMM4, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
248 :   store i128 %63, i128* %XMM4_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
249 :   %XMM5 = getelementptr inbounds %struct.regs* %0, i64 0, i32 59, !mcsema_real_eip !2 :          <0>	pushq	%rbp
250 :   %64 = load i128* %XMM5, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
251 :   store i128 %64, i128* %XMM5_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
252 :   %XMM6 = getelementptr inbounds %struct.regs* %0, i64 0, i32 60, !mcsema_real_eip !2 :          <0>	pushq	%rbp
253 :   %65 = load i128* %XMM6, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
254 :   store i128 %65, i128* %XMM6_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
255 :   %XMM7 = getelementptr inbounds %struct.regs* %0, i64 0, i32 61, !mcsema_real_eip !2 :          <0>	pushq	%rbp
256 :   %66 = load i128* %XMM7, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
257 :   store i128 %66, i128* %XMM7_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
258 :   %XMM8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 62, !mcsema_real_eip !2 :          <0>	pushq	%rbp
259 :   %67 = load i128* %XMM8, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
260 :   store i128 %67, i128* %XMM8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
261 :   %XMM9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 63, !mcsema_real_eip !2 :          <0>	pushq	%rbp
262 :   %68 = load i128* %XMM9, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
263 :   store i128 %68, i128* %XMM9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
264 :   %XMM10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
265 :   %69 = load i128* %XMM10, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
266 :   store i128 %69, i128* %XMM10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
267 :   %XMM11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 65, !mcsema_real_eip !2 :          <0>	pushq	%rbp
268 :   %70 = load i128* %XMM11, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
269 :   store i128 %70, i128* %XMM11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
270 :   %XMM12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 66, !mcsema_real_eip !2 :          <0>	pushq	%rbp
271 :   %71 = load i128* %XMM12, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
272 :   store i128 %71, i128* %XMM12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
273 :   %XMM13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 67, !mcsema_real_eip !2 :          <0>	pushq	%rbp
274 :   %72 = load i128* %XMM13, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
275 :   store i128 %72, i128* %XMM13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
276 :   %XMM14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 68, !mcsema_real_eip !2 :          <0>	pushq	%rbp
277 :   %73 = load i128* %XMM14, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
278 :   store i128 %73, i128* %XMM14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
279 :   %XMM15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 69, !mcsema_real_eip !2 :          <0>	pushq	%rbp
280 :   %74 = load i128* %XMM15, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
281 :   store i128 %74, i128* %XMM15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
282 :   %STACK_BASE = getelementptr inbounds %struct.regs* %0, i64 0, i32 70, !mcsema_real_eip !2 :          <0>	pushq	%rbp
283 :   %75 = load i64* %STACK_BASE, !mcsema_real_eip !2 :          <0>	pushq	%rbp
284 :   store i64 %75, i64* %STACK_BASE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
285 :   %STACK_LIMIT = getelementptr inbounds %struct.regs* %0, i64 0, i32 71, !mcsema_real_eip !2 :          <0>	pushq	%rbp
286 :   %76 = load i64* %STACK_LIMIT, !mcsema_real_eip !2 :          <0>	pushq	%rbp
287 :   store i64 %76, i64* %STACK_LIMIT_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <0>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <1>	movq	%rsp, %rbp

294 :   %81 = add i64 %78, -88 : NIL

295 :   %82 = xor i64 %81, %79, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp

296 :   %83 = and i64 %82, 16 : NIL
297 :   %84 = icmp eq i64 %83, 0 : NIL

298 :   store i1 %84, i1* %AF_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
299 :   %85 = trunc i64 %81 to i8, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
300 :   %86 = tail call i8 @llvm.ctpop.i8(i8 %85), !mcsema_real_eip !4 :          <4>	subq	$80, %rsp

301 :   %87 = and i8 %86, 1 : NIL
302 :   %88 = icmp eq i8 %87, 0 : NIL

303 :   store i1 %88, i1* %PF_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
304 :   %89 = icmp eq i64 %81, 0, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
305 :   store i1 %89, i1* %ZF_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp

306 :   %90 = icmp slt i64 %81, 0 : NIL

307 :   store i1 %90, i1* %SF_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
308 :   %91 = icmp ult i64 %79, 80, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
309 :   store i1 %91, i1* %CF_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
310 :   %92 = and i64 %82, %79, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp

311 :   %93 = icmp slt i64 %92, 0 : NIL

312 :   store i1 %93, i1* %OF_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp
313 :   store i64 %81, i64* %RSP_val, !mcsema_real_eip !4 :          <4>	subq	$80, %rsp

314 :   %94 = load i64* %RBP_val, !mcsema_real_eip !5 :          <8>	movq	%rdi, -16(%rbp)
315 :   %95 = add i64 %94, -16, !mcsema_real_eip !5 :          <8>	movq	%rdi, -16(%rbp)
316 :   %96 = inttoptr i64 %95 to i64*, !mcsema_real_eip !5 :          <8>	movq	%rdi, -16(%rbp)
317 :   %97 = load i64* %RDI_val, !mcsema_real_eip !5 :          <8>	movq	%rdi, -16(%rbp)
318 :   store i64 %97, i64* %96, !mcsema_real_eip !5 :          <8>	movq	%rdi, -16(%rbp)

319 :   %98 = load i64* %RBP_val, !mcsema_real_eip !6 :          <c>	movq	-16(%rbp), %rdi
320 :   %99 = add i64 %98, -16, !mcsema_real_eip !6 :          <c>	movq	-16(%rbp), %rdi
321 :   %100 = inttoptr i64 %99 to i64*, !mcsema_real_eip !6 :          <c>	movq	-16(%rbp), %rdi
322 :   %101 = load i64* %100, !mcsema_real_eip !6 :          <c>	movq	-16(%rbp), %rdi
323 :   store i64 %101, i64* %RDI_val, !mcsema_real_eip !6 :          <c>	movq	-16(%rbp), %rdi

324 :   %102 = tail call x86_64_sysvcc i64 @strlen(i64 %101), !mcsema_real_eip !7 :          <10>	callq	0
325 :   store i64 %102, i64* %RAX_val, !mcsema_real_eip !7 :          <10>	callq	0

326 :   %103 = and i64 %102, 4294967295 : NIL

327 :   store i64 %103, i64* %RCX_val, !mcsema_real_eip !8 :          <15>	movl	%eax, %ecx

328 :   %104 = load i64* %RBP_val, !mcsema_real_eip !9 :          <17>	movl	%ecx, -32(%rbp)
329 :   %105 = add i64 %104, -32, !mcsema_real_eip !9 :          <17>	movl	%ecx, -32(%rbp)
330 :   %106 = inttoptr i64 %105 to i64*, !mcsema_real_eip !9 :          <17>	movl	%ecx, -32(%rbp)
331 :   %107 = trunc i64 %102 to i32, !mcsema_real_eip !9 :          <17>	movl	%ecx, -32(%rbp)

332 :   %108 = bitcast i64* %106 to i32* : NIL

333 :   store i32 %107, i32* %108, !mcsema_real_eip !9 :          <17>	movl	%ecx, -32(%rbp)

334 :   %109 = load i64* %RBP_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
335 :   %110 = add i64 %109, -32, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
336 :   %111 = inttoptr i64 %110 to i64*, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)

337 :   %112 = bitcast i64* %111 to i32* : NIL

338 :   %113 = load i32* %112, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)

339 :   %114 = add i32 %113, -37 : NIL

340 :   %115 = xor i32 %114, %113, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
341 :   %116 = and i32 %115, 16, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
342 :   %117 = icmp ne i32 %116, 0, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
343 :   store i1 %117, i1* %AF_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
344 :   %118 = trunc i32 %114 to i8, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
345 :   %119 = tail call i8 @llvm.ctpop.i8(i8 %118), !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)

346 :   %120 = and i8 %119, 1 : NIL
347 :   %121 = icmp eq i8 %120, 0 : NIL

348 :   store i1 %121, i1* %PF_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
349 :   %122 = icmp eq i32 %114, 0, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
350 :   store i1 %122, i1* %ZF_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)

351 :   %123 = icmp slt i32 %114, 0 : NIL

352 :   store i1 %123, i1* %SF_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
353 :   %124 = icmp ult i32 %113, 37, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
354 :   store i1 %124, i1* %CF_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)
355 :   %125 = and i32 %115, %113, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)

356 :   %126 = icmp slt i32 %125, 0 : NIL

357 :   store i1 %126, i1* %OF_val, !mcsema_real_eip !10 :          <1a>	cmpl	$37, -32(%rbp)

358 :   %127 = load i1* %ZF_val, !mcsema_real_eip !11 :          <21>	je	11

359 :   %128 = load i64* %RBP_val, !mcsema_real_eip !12 :          <32>	movq	-16(%rbp), %rax

360 :   br i1 %127, label %block_0x32, label %block_0x27, !mcsema_real_eip !11 :          <21>	je	11

361 :   %129 = add i64 %128, -16, !mcsema_real_eip !12 :          <32>	movq	-16(%rbp), %rax
362 :   %130 = inttoptr i64 %129 to i64*, !mcsema_real_eip !12 :          <32>	movq	-16(%rbp), %rax
363 :   %131 = load i64* %130, !mcsema_real_eip !12 :          <32>	movq	-16(%rbp), %rax

364 :   %uadd139 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %131, i64 4) : NIL
365 :   %132 = extractvalue { i64, i1 } %uadd139, 0 : NIL

366 :   %133 = xor i64 %132, %131, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
367 :   %134 = and i64 %133, 16, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
368 :   %135 = icmp ne i64 %134, 0, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
369 :   store i1 %135, i1* %AF_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax

370 :   %136 = icmp slt i64 %132, 0 : NIL

371 :   store i1 %136, i1* %SF_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
372 :   %137 = icmp eq i64 %132, 0, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
373 :   store i1 %137, i1* %ZF_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
374 :   %138 = xor i64 %131, -9223372036854775808, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
375 :   %139 = and i64 %133, %138, !mcsema_real_eip !13 :          <36>	addq	$4, %rax

376 :   %140 = icmp slt i64 %139, 0 : NIL

377 :   store i1 %140, i1* %OF_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
378 :   %141 = trunc i64 %132 to i8, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
379 :   %142 = tail call i8 @llvm.ctpop.i8(i8 %141), !mcsema_real_eip !13 :          <36>	addq	$4, %rax

380 :   %143 = and i8 %142, 1 : NIL
381 :   %144 = icmp eq i8 %143, 0 : NIL

382 :   store i1 %144, i1* %PF_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax

383 :   %145 = extractvalue { i64, i1 } %uadd139, 1 : NIL

384 :   store i1 %145, i1* %CF_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax
385 :   store i64 %132, i64* %RAX_val, !mcsema_real_eip !13 :          <36>	addq	$4, %rax

386 :   %146 = load i64* %RBP_val, !mcsema_real_eip !14 :          <3c>	movq	%rax, -16(%rbp)
387 :   %147 = add i64 %146, -16, !mcsema_real_eip !14 :          <3c>	movq	%rax, -16(%rbp)
388 :   %148 = inttoptr i64 %147 to i64*, !mcsema_real_eip !14 :          <3c>	movq	%rax, -16(%rbp)
389 :   store i64 %132, i64* %148, !mcsema_real_eip !14 :          <3c>	movq	%rax, -16(%rbp)

390 :   %149 = load i64* %RBP_val, !mcsema_real_eip !15 :          <40>	movq	-16(%rbp), %rax
391 :   %150 = add i64 %149, -16, !mcsema_real_eip !15 :          <40>	movq	-16(%rbp), %rax
392 :   %151 = inttoptr i64 %150 to i64*, !mcsema_real_eip !15 :          <40>	movq	-16(%rbp), %rax
393 :   %152 = load i64* %151, !mcsema_real_eip !15 :          <40>	movq	-16(%rbp), %rax
394 :   store i64 %152, i64* %RAX_val, !mcsema_real_eip !15 :          <40>	movq	-16(%rbp), %rax

395 :   %153 = inttoptr i64 %152 to i64*, !mcsema_real_eip !16 :          <44>	movsbl	(%rax), %ecx

396 :   %154 = bitcast i64* %153 to i8* : NIL

397 :   %155 = load i8* %154, !mcsema_real_eip !16 :          <44>	movsbl	(%rax), %ecx
398 :   %156 = sext i8 %155 to i32, !mcsema_real_eip !16 :          <44>	movsbl	(%rax), %ecx
399 :   %157 = zext i32 %156 to i64, !mcsema_real_eip !16 :          <44>	movsbl	(%rax), %ecx
400 :   store i64 %157, i64* %RCX_val, !mcsema_real_eip !16 :          <44>	movsbl	(%rax), %ecx

401 :   %158 = add nsw i32 %156, -100 : NIL

402 :   %159 = xor i32 %158, %156, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
403 :   %160 = and i32 %159, 16, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
404 :   %161 = icmp ne i32 %160, 0, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
405 :   store i1 %161, i1* %AF_val, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
406 :   %162 = trunc i32 %158 to i8, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
407 :   %163 = tail call i8 @llvm.ctpop.i8(i8 %162), !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx

408 :   %164 = and i8 %163, 1 : NIL
409 :   %165 = icmp eq i8 %164, 0 : NIL

410 :   store i1 %165, i1* %PF_val, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
411 :   %166 = icmp eq i32 %158, 0, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
412 :   store i1 %166, i1* %ZF_val, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx

413 :   %167 = icmp slt i32 %158, 0 : NIL

414 :   store i1 %167, i1* %SF_val, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx

415 :   %168 = icmp ult i8 %155, 100 : NIL

416 :   store i1 %168, i1* %CF_val, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx
417 :   %169 = and i32 %159, %156, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx

418 :   %170 = icmp slt i32 %169, 0 : NIL

419 :   store i1 %170, i1* %OF_val, !mcsema_real_eip !17 :          <47>	cmpl	$100, %ecx

420 :   %171 = load i1* %ZF_val, !mcsema_real_eip !18 :          <4d>	je	12

421 :   %172 = load i64* %RBP_val, !mcsema_real_eip !19 :          <5f>	movq	-16(%rbp), %rax

422 :   br i1 %171, label %block_0x5f, label %block_0x53, !mcsema_real_eip !18 :          <4d>	je	12

423 :   %173 = add i64 %128, -32, !mcsema_real_eip !20 :          <27>	movl	-32(%rbp), %eax
424 :   %174 = inttoptr i64 %173 to i64*, !mcsema_real_eip !20 :          <27>	movl	-32(%rbp), %eax

425 :   %175 = bitcast i64* %174 to i32* : NIL

426 :   %176 = load i32* %175, !mcsema_real_eip !20 :          <27>	movl	-32(%rbp), %eax
427 :   %177 = zext i32 %176 to i64, !mcsema_real_eip !20 :          <27>	movl	-32(%rbp), %eax
428 :   store i64 %177, i64* %RAX_val, !mcsema_real_eip !20 :          <27>	movl	-32(%rbp), %eax

429 :   %178 = load i64* %RBP_val, !mcsema_real_eip !21 :          <2a>	movl	%eax, -4(%rbp)
430 :   %179 = add i64 %178, -4, !mcsema_real_eip !21 :          <2a>	movl	%eax, -4(%rbp)
431 :   %180 = inttoptr i64 %179 to i64*, !mcsema_real_eip !21 :          <2a>	movl	%eax, -4(%rbp)

432 :   %181 = bitcast i64* %180 to i32* : NIL

433 :   store i32 %176, i32* %181, !mcsema_real_eip !21 :          <2a>	movl	%eax, -4(%rbp)

434 :   br label %block_0x46d, !mcsema_real_eip !22 :          <2d>	jmp	1083

435 :   %182 = load i64* %RBP_val, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
436 :   %183 = add i64 %182, -4, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
437 :   %184 = inttoptr i64 %183 to i64*, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax

438 :   %185 = bitcast i64* %184 to i32* : NIL

439 :   %186 = load i32* %185, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
440 :   %187 = zext i32 %186 to i64, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
441 :   store i64 %187, i64* %RAX_val, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax

442 :   %188 = load i64* %RSP_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

443 :   %uadd = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %188, i64 80) : NIL
444 :   %189 = extractvalue { i64, i1 } %uadd, 0 : NIL

445 :   %190 = xor i64 %189, %188, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

446 :   %191 = and i64 %190, 16 : NIL
447 :   %192 = icmp eq i64 %191, 0 : NIL

448 :   store i1 %192, i1* %AF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

449 :   %193 = icmp slt i64 %189, 0 : NIL

450 :   store i1 %193, i1* %SF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
451 :   %194 = icmp eq i64 %189, 0, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
452 :   store i1 %194, i1* %ZF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
453 :   %195 = xor i64 %188, -9223372036854775808, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
454 :   %196 = and i64 %190, %195, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

455 :   %197 = icmp slt i64 %196, 0 : NIL

456 :   store i1 %197, i1* %OF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
457 :   %198 = trunc i64 %189 to i8, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
458 :   %199 = tail call i8 @llvm.ctpop.i8(i8 %198), !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

459 :   %200 = and i8 %199, 1 : NIL
460 :   %201 = icmp eq i8 %200, 0 : NIL

461 :   store i1 %201, i1* %PF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

462 :   %202 = extractvalue { i64, i1 } %uadd, 1 : NIL

463 :   store i1 %202, i1* %CF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
464 :   store i64 %189, i64* %RSP_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

465 :   %203 = inttoptr i64 %189 to i64*, !mcsema_real_eip !25 :          <474>	popq	%rbp
466 :   %204 = load i64* %203, !mcsema_real_eip !25 :          <474>	popq	%rbp
467 :   store i64 %204, i64* %RBP_val, !mcsema_real_eip !25 :          <474>	popq	%rbp

468 :   %205 = add i64 %189, 16, !mcsema_real_eip !26 :          <475>	retq
469 :   store i64 %205, i64* %RSP_val, !mcsema_real_eip !26 :          <475>	retq
470 :   %206 = load i64* %RAX_val, !mcsema_real_eip !26 :          <475>	retq
471 :   store i64 %206, i64* %RAX, !mcsema_real_eip !26 :          <475>	retq
472 :   %207 = load i64* %RBX_val, !mcsema_real_eip !26 :          <475>	retq
473 :   store i64 %207, i64* %RBX, !mcsema_real_eip !26 :          <475>	retq
474 :   %208 = load i64* %RCX_val, !mcsema_real_eip !26 :          <475>	retq
475 :   store i64 %208, i64* %RCX, !mcsema_real_eip !26 :          <475>	retq
476 :   %209 = load i64* %RDX_val, !mcsema_real_eip !26 :          <475>	retq
477 :   store i64 %209, i64* %RDX, !mcsema_real_eip !26 :          <475>	retq
478 :   %210 = load i64* %RSI_val, !mcsema_real_eip !26 :          <475>	retq
479 :   store i64 %210, i64* %RSI, !mcsema_real_eip !26 :          <475>	retq
480 :   %211 = load i64* %RDI_val, !mcsema_real_eip !26 :          <475>	retq
481 :   store i64 %211, i64* %RDI, !mcsema_real_eip !26 :          <475>	retq
482 :   %212 = load i64* %RSP_val, !mcsema_real_eip !26 :          <475>	retq
483 :   store i64 %212, i64* %RSP, !mcsema_real_eip !26 :          <475>	retq
484 :   %213 = load i64* %RBP_val, !mcsema_real_eip !26 :          <475>	retq
485 :   store i64 %213, i64* %RBP, !mcsema_real_eip !26 :          <475>	retq
486 :   %214 = load i64* %R8_val, !mcsema_real_eip !26 :          <475>	retq
487 :   store i64 %214, i64* %R8, !mcsema_real_eip !26 :          <475>	retq
488 :   %215 = load i64* %R9_val, !mcsema_real_eip !26 :          <475>	retq
489 :   store i64 %215, i64* %R9, !mcsema_real_eip !26 :          <475>	retq
490 :   %216 = load i64* %R10_val, !mcsema_real_eip !26 :          <475>	retq
491 :   store i64 %216, i64* %R10, !mcsema_real_eip !26 :          <475>	retq
492 :   %217 = load i64* %R11_val, !mcsema_real_eip !26 :          <475>	retq
493 :   store i64 %217, i64* %R11, !mcsema_real_eip !26 :          <475>	retq
494 :   %218 = load i64* %R12_val, !mcsema_real_eip !26 :          <475>	retq
495 :   store i64 %218, i64* %R12, !mcsema_real_eip !26 :          <475>	retq
496 :   %219 = load i64* %R13_val, !mcsema_real_eip !26 :          <475>	retq
497 :   store i64 %219, i64* %R13, !mcsema_real_eip !26 :          <475>	retq
498 :   %220 = load i64* %R14_val, !mcsema_real_eip !26 :          <475>	retq
499 :   store i64 %220, i64* %R14, !mcsema_real_eip !26 :          <475>	retq
500 :   %221 = load i64* %R15_val, !mcsema_real_eip !26 :          <475>	retq
501 :   store i64 %221, i64* %R15, !mcsema_real_eip !26 :          <475>	retq
502 :   %222 = load i64* %RIP_val, !mcsema_real_eip !26 :          <475>	retq
503 :   store i64 %222, i64* %RIP, !mcsema_real_eip !26 :          <475>	retq
504 :   %223 = load i1* %CF_val, !mcsema_real_eip !26 :          <475>	retq
505 :   store i1 %223, i1* %CF, align 1, !mcsema_real_eip !26 :          <475>	retq
506 :   %224 = load i1* %PF_val, !mcsema_real_eip !26 :          <475>	retq
507 :   store i1 %224, i1* %PF, align 1, !mcsema_real_eip !26 :          <475>	retq
508 :   %225 = load i1* %AF_val, !mcsema_real_eip !26 :          <475>	retq
509 :   store i1 %225, i1* %AF, align 1, !mcsema_real_eip !26 :          <475>	retq
510 :   %226 = load i1* %ZF_val, !mcsema_real_eip !26 :          <475>	retq
511 :   store i1 %226, i1* %ZF, align 1, !mcsema_real_eip !26 :          <475>	retq
512 :   %227 = load i1* %SF_val, !mcsema_real_eip !26 :          <475>	retq
513 :   store i1 %227, i1* %SF, align 1, !mcsema_real_eip !26 :          <475>	retq
514 :   %228 = load i1* %OF_val, !mcsema_real_eip !26 :          <475>	retq
515 :   store i1 %228, i1* %OF, align 1, !mcsema_real_eip !26 :          <475>	retq
516 :   %229 = load i1* %DF_val, !mcsema_real_eip !26 :          <475>	retq
517 :   store i1 %229, i1* %DF, align 1, !mcsema_real_eip !26 :          <475>	retq
518 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !26 :          <475>	retq
519 :   %230 = load i1* %FPU_B_val, !mcsema_real_eip !26 :          <475>	retq
520 :   store i1 %230, i1* %FPU_B, align 1, !mcsema_real_eip !26 :          <475>	retq
521 :   %231 = load i1* %FPU_C3_val, !mcsema_real_eip !26 :          <475>	retq
522 :   store i1 %231, i1* %FPU_C3, align 1, !mcsema_real_eip !26 :          <475>	retq
523 :   %232 = load i3* %FPU_TOP_val, !mcsema_real_eip !26 :          <475>	retq
524 :   store i3 %232, i3* %FPU_TOP, align 1, !mcsema_real_eip !26 :          <475>	retq
525 :   %233 = load i1* %FPU_C2_val, !mcsema_real_eip !26 :          <475>	retq
526 :   store i1 %233, i1* %FPU_C2, align 1, !mcsema_real_eip !26 :          <475>	retq
527 :   %234 = load i1* %FPU_C1_val, !mcsema_real_eip !26 :          <475>	retq
528 :   store i1 %234, i1* %FPU_C1, align 1, !mcsema_real_eip !26 :          <475>	retq
529 :   %235 = load i1* %FPU_C0_val, !mcsema_real_eip !26 :          <475>	retq
530 :   store i1 %235, i1* %FPU_C0, align 1, !mcsema_real_eip !26 :          <475>	retq
531 :   %236 = load i1* %FPU_ES_val, !mcsema_real_eip !26 :          <475>	retq
532 :   store i1 %236, i1* %FPU_ES, align 1, !mcsema_real_eip !26 :          <475>	retq
533 :   %237 = load i1* %FPU_SF_val, !mcsema_real_eip !26 :          <475>	retq
534 :   store i1 %237, i1* %FPU_SF, align 1, !mcsema_real_eip !26 :          <475>	retq
535 :   %238 = load i1* %FPU_PE_val, !mcsema_real_eip !26 :          <475>	retq
536 :   store i1 %238, i1* %FPU_PE, align 1, !mcsema_real_eip !26 :          <475>	retq
537 :   %239 = load i1* %FPU_UE_val, !mcsema_real_eip !26 :          <475>	retq
538 :   store i1 %239, i1* %FPU_UE, align 1, !mcsema_real_eip !26 :          <475>	retq
539 :   %240 = load i1* %FPU_OE_val, !mcsema_real_eip !26 :          <475>	retq
540 :   store i1 %240, i1* %FPU_OE, align 1, !mcsema_real_eip !26 :          <475>	retq
541 :   %241 = load i1* %FPU_ZE_val, !mcsema_real_eip !26 :          <475>	retq
542 :   store i1 %241, i1* %FPU_ZE, align 1, !mcsema_real_eip !26 :          <475>	retq
543 :   %242 = load i1* %FPU_DE_val, !mcsema_real_eip !26 :          <475>	retq
544 :   store i1 %242, i1* %FPU_DE, align 1, !mcsema_real_eip !26 :          <475>	retq
545 :   %243 = load i1* %FPU_IE_val, !mcsema_real_eip !26 :          <475>	retq
546 :   store i1 %243, i1* %FPU_IE, align 1, !mcsema_real_eip !26 :          <475>	retq
547 :   %244 = load i1* %FPU_X_val, !mcsema_real_eip !26 :          <475>	retq
548 :   store i1 %244, i1* %FPU_X, align 1, !mcsema_real_eip !26 :          <475>	retq
549 :   %245 = load i2* %FPU_RC_val, !mcsema_real_eip !26 :          <475>	retq
550 :   store i2 %245, i2* %FPU_RC, align 1, !mcsema_real_eip !26 :          <475>	retq
551 :   %246 = load i2* %FPU_PC_val, !mcsema_real_eip !26 :          <475>	retq
552 :   store i2 %246, i2* %FPU_PC, align 1, !mcsema_real_eip !26 :          <475>	retq
553 :   %247 = load i1* %FPU_PM_val, !mcsema_real_eip !26 :          <475>	retq
554 :   store i1 %247, i1* %FPU_PM, align 1, !mcsema_real_eip !26 :          <475>	retq
555 :   %248 = load i1* %FPU_UM_val, !mcsema_real_eip !26 :          <475>	retq
556 :   store i1 %248, i1* %FPU_UM, align 1, !mcsema_real_eip !26 :          <475>	retq
557 :   %249 = load i1* %FPU_OM_val, !mcsema_real_eip !26 :          <475>	retq
558 :   store i1 %249, i1* %FPU_OM, align 1, !mcsema_real_eip !26 :          <475>	retq
559 :   %250 = load i1* %FPU_ZM_val, !mcsema_real_eip !26 :          <475>	retq
560 :   store i1 %250, i1* %FPU_ZM, align 1, !mcsema_real_eip !26 :          <475>	retq
561 :   %251 = load i1* %FPU_DM_val, !mcsema_real_eip !26 :          <475>	retq
562 :   store i1 %251, i1* %FPU_DM, align 1, !mcsema_real_eip !26 :          <475>	retq
563 :   %252 = load i1* %FPU_IM_val, !mcsema_real_eip !26 :          <475>	retq
564 :   store i1 %252, i1* %FPU_IM, align 1, !mcsema_real_eip !26 :          <475>	retq

565 :   %253 = load i64* %53, align 4 : NIL
566 :   store i64 %253, i64* %52, align 4 : NIL

567 :   %254 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !26 :          <475>	retq
568 :   store i16 %254, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !26 :          <475>	retq
569 :   %255 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !26 :          <475>	retq
570 :   store i64 %255, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !26 :          <475>	retq
571 :   %256 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !26 :          <475>	retq
572 :   store i16 %256, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !26 :          <475>	retq
573 :   %257 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !26 :          <475>	retq
574 :   store i64 %257, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !26 :          <475>	retq
575 :   %258 = load i128* %XMM0_val, !mcsema_real_eip !26 :          <475>	retq
576 :   store i128 %258, i128* %XMM0, align 1, !mcsema_real_eip !26 :          <475>	retq
577 :   %259 = load i128* %XMM1_val, !mcsema_real_eip !26 :          <475>	retq
578 :   store i128 %259, i128* %XMM1, align 1, !mcsema_real_eip !26 :          <475>	retq
579 :   %260 = load i128* %XMM2_val, !mcsema_real_eip !26 :          <475>	retq
580 :   store i128 %260, i128* %XMM2, align 1, !mcsema_real_eip !26 :          <475>	retq
581 :   %261 = load i128* %XMM3_val, !mcsema_real_eip !26 :          <475>	retq
582 :   store i128 %261, i128* %XMM3, align 1, !mcsema_real_eip !26 :          <475>	retq
583 :   %262 = load i128* %XMM4_val, !mcsema_real_eip !26 :          <475>	retq
584 :   store i128 %262, i128* %XMM4, align 1, !mcsema_real_eip !26 :          <475>	retq
585 :   %263 = load i128* %XMM5_val, !mcsema_real_eip !26 :          <475>	retq
586 :   store i128 %263, i128* %XMM5, align 1, !mcsema_real_eip !26 :          <475>	retq
587 :   %264 = load i128* %XMM6_val, !mcsema_real_eip !26 :          <475>	retq
588 :   store i128 %264, i128* %XMM6, align 1, !mcsema_real_eip !26 :          <475>	retq
589 :   %265 = load i128* %XMM7_val, !mcsema_real_eip !26 :          <475>	retq
590 :   store i128 %265, i128* %XMM7, align 1, !mcsema_real_eip !26 :          <475>	retq
591 :   %266 = load i128* %XMM8_val, !mcsema_real_eip !26 :          <475>	retq
592 :   store i128 %266, i128* %XMM8, align 1, !mcsema_real_eip !26 :          <475>	retq
593 :   %267 = load i128* %XMM9_val, !mcsema_real_eip !26 :          <475>	retq
594 :   store i128 %267, i128* %XMM9, align 1, !mcsema_real_eip !26 :          <475>	retq
595 :   %268 = load i128* %XMM10_val, !mcsema_real_eip !26 :          <475>	retq
596 :   store i128 %268, i128* %XMM10, align 1, !mcsema_real_eip !26 :          <475>	retq
597 :   %269 = load i128* %XMM11_val, !mcsema_real_eip !26 :          <475>	retq
598 :   store i128 %269, i128* %XMM11, align 1, !mcsema_real_eip !26 :          <475>	retq
599 :   %270 = load i128* %XMM12_val, !mcsema_real_eip !26 :          <475>	retq
600 :   store i128 %270, i128* %XMM12, align 1, !mcsema_real_eip !26 :          <475>	retq
601 :   %271 = load i128* %XMM13_val, !mcsema_real_eip !26 :          <475>	retq
602 :   store i128 %271, i128* %XMM13, align 1, !mcsema_real_eip !26 :          <475>	retq
603 :   %272 = load i128* %XMM14_val, !mcsema_real_eip !26 :          <475>	retq
604 :   store i128 %272, i128* %XMM14, align 1, !mcsema_real_eip !26 :          <475>	retq
605 :   %273 = load i128* %XMM15_val, !mcsema_real_eip !26 :          <475>	retq
606 :   store i128 %273, i128* %XMM15, align 1, !mcsema_real_eip !26 :          <475>	retq
607 :   %274 = load i64* %STACK_BASE_val, !mcsema_real_eip !26 :          <475>	retq
608 :   store i64 %274, i64* %STACK_BASE, align 1, !mcsema_real_eip !26 :          <475>	retq
609 :   %275 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !26 :          <475>	retq
610 :   store i64 %275, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !26 :          <475>	retq
611 :   ret void, !mcsema_real_eip !26 :          <475>	retq

612 :   %276 = add i64 %172, -16, !mcsema_real_eip !19 :          <5f>	movq	-16(%rbp), %rax
613 :   %277 = inttoptr i64 %276 to i64*, !mcsema_real_eip !19 :          <5f>	movq	-16(%rbp), %rax
614 :   %278 = load i64* %277, !mcsema_real_eip !19 :          <5f>	movq	-16(%rbp), %rax
615 :   store i64 %278, i64* %RAX_val, !mcsema_real_eip !19 :          <5f>	movq	-16(%rbp), %rax

616 :   %279 = add i64 %278, 1, !mcsema_real_eip !27 :          <63>	movzbl	1(%rax), %edi
617 :   %280 = inttoptr i64 %279 to i64*, !mcsema_real_eip !27 :          <63>	movzbl	1(%rax), %edi

618 :   %281 = bitcast i64* %280 to i8* : NIL

619 :   %282 = load i8* %281, !mcsema_real_eip !27 :          <63>	movzbl	1(%rax), %edi

620 :   %283 = zext i8 %282 to i64 : NIL

621 :   store i64 %283, i64* %RDI_val, !mcsema_real_eip !27 :          <63>	movzbl	1(%rax), %edi

622 :   %284 = tail call x86_64_sysvcc i64 @to_byte(i64 %283), !mcsema_real_eip !28 :          <67>	callq	0
623 :   store i64 %284, i64* %RAX_val, !mcsema_real_eip !28 :          <67>	callq	0

624 :   %285 = trunc i64 %284 to i32, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax

625 :   %286 = add i32 %285, -9 : NIL

626 :   %287 = xor i32 %286, %285, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
627 :   %288 = and i32 %287, 16, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
628 :   %289 = icmp ne i32 %288, 0, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
629 :   store i1 %289, i1* %AF_val, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
630 :   %290 = trunc i32 %286 to i8, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
631 :   %291 = tail call i8 @llvm.ctpop.i8(i8 %290), !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax

632 :   %292 = and i8 %291, 1 : NIL
633 :   %293 = icmp eq i8 %292, 0 : NIL

634 :   store i1 %293, i1* %PF_val, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
635 :   %294 = icmp eq i32 %286, 0, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
636 :   store i1 %294, i1* %ZF_val, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax

637 :   %295 = icmp slt i32 %286, 0 : NIL

638 :   store i1 %295, i1* %SF_val, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
639 :   %296 = icmp ult i32 %285, 9, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
640 :   store i1 %296, i1* %CF_val, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax
641 :   %297 = and i32 %287, %285, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax

642 :   %298 = icmp slt i32 %297, 0 : NIL

643 :   store i1 %298, i1* %OF_val, !mcsema_real_eip !29 :          <6c>	cmpl	$9, %eax

644 :   %299 = load i1* %ZF_val, !mcsema_real_eip !30 :          <71>	je	12

645 :   %300 = load i64* %RBP_val, !mcsema_real_eip !31 :          <83>	movq	-16(%rbp), %rax

646 :   br i1 %299, label %block_0x83, label %block_0x77, !mcsema_real_eip !30 :          <71>	je	12

647 :   %301 = add i64 %172, -4, !mcsema_real_eip !32 :          <53>	movl	$4294967294, -4(%rbp)
648 :   %302 = inttoptr i64 %301 to i64*, !mcsema_real_eip !32 :          <53>	movl	$4294967294, -4(%rbp)

649 :   %303 = bitcast i64* %302 to i32* : NIL

650 :   store i32 -2, i32* %303, !mcsema_real_eip !32 :          <53>	movl	$4294967294, -4(%rbp)

651 :   br label %block_0x46d, !mcsema_real_eip !33 :          <5a>	jmp	1038

652 :   %304 = add i64 %300, -16, !mcsema_real_eip !31 :          <83>	movq	-16(%rbp), %rax
653 :   %305 = inttoptr i64 %304 to i64*, !mcsema_real_eip !31 :          <83>	movq	-16(%rbp), %rax
654 :   %306 = load i64* %305, !mcsema_real_eip !31 :          <83>	movq	-16(%rbp), %rax
655 :   store i64 %306, i64* %RAX_val, !mcsema_real_eip !31 :          <83>	movq	-16(%rbp), %rax

656 :   %307 = add i64 %306, 2, !mcsema_real_eip !34 :          <87>	movzbl	2(%rax), %edi
657 :   %308 = inttoptr i64 %307 to i64*, !mcsema_real_eip !34 :          <87>	movzbl	2(%rax), %edi

658 :   %309 = bitcast i64* %308 to i8* : NIL

659 :   %310 = load i8* %309, !mcsema_real_eip !34 :          <87>	movzbl	2(%rax), %edi

660 :   %311 = zext i8 %310 to i64 : NIL

661 :   store i64 %311, i64* %RDI_val, !mcsema_real_eip !34 :          <87>	movzbl	2(%rax), %edi

662 :   %312 = tail call x86_64_sysvcc i64 @to_byte(i64 %311), !mcsema_real_eip !35 :          <8b>	callq	0
663 :   store i64 %312, i64* %RAX_val, !mcsema_real_eip !35 :          <8b>	callq	0

664 :   %313 = load i64* %RBP_val, !mcsema_real_eip !36 :          <90>	movl	%eax, -24(%rbp)
665 :   %314 = add i64 %313, -24, !mcsema_real_eip !36 :          <90>	movl	%eax, -24(%rbp)
666 :   %315 = inttoptr i64 %314 to i64*, !mcsema_real_eip !36 :          <90>	movl	%eax, -24(%rbp)
667 :   %316 = trunc i64 %312 to i32, !mcsema_real_eip !36 :          <90>	movl	%eax, -24(%rbp)

668 :   %317 = bitcast i64* %315 to i32* : NIL

669 :   store i32 %316, i32* %317, !mcsema_real_eip !36 :          <90>	movl	%eax, -24(%rbp)

670 :   %318 = load i64* %RBP_val, !mcsema_real_eip !37 :          <93>	movl	-24(%rbp), %eax
671 :   %319 = add i64 %318, -24, !mcsema_real_eip !37 :          <93>	movl	-24(%rbp), %eax
672 :   %320 = inttoptr i64 %319 to i64*, !mcsema_real_eip !37 :          <93>	movl	-24(%rbp), %eax

673 :   %321 = bitcast i64* %320 to i32* : NIL

674 :   %322 = load i32* %321, !mcsema_real_eip !37 :          <93>	movl	-24(%rbp), %eax

675 :   %323 = shl i32 %322, 1, !mcsema_real_eip !38 :          <96>	shll	$1, %eax
676 :   %324 = zext i32 %323 to i64, !mcsema_real_eip !38 :          <96>	shll	$1, %eax
677 :   store i64 %324, i64* %RAX_val, !mcsema_real_eip !38 :          <96>	shll	$1, %eax

678 :   %325 = add i32 %323, -26 : NIL

679 :   %326 = xor i32 %325, %323, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax

680 :   %327 = and i32 %326, 16 : NIL
681 :   %328 = icmp eq i32 %327, 0 : NIL

682 :   store i1 %328, i1* %AF_val, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
683 :   %329 = trunc i32 %325 to i8, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
684 :   %330 = tail call i8 @llvm.ctpop.i8(i8 %329), !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax

685 :   %331 = and i8 %330, 1 : NIL
686 :   %332 = icmp eq i8 %331, 0 : NIL

687 :   store i1 %332, i1* %PF_val, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
688 :   %333 = icmp eq i32 %325, 0, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
689 :   store i1 %333, i1* %ZF_val, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax

690 :   %334 = icmp slt i32 %325, 0 : NIL

691 :   store i1 %334, i1* %SF_val, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
692 :   %335 = icmp ult i32 %323, 26, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
693 :   store i1 %335, i1* %CF_val, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax
694 :   %336 = and i32 %326, %323, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax

695 :   %337 = icmp slt i32 %336, 0 : NIL

696 :   store i1 %337, i1* %OF_val, !mcsema_real_eip !39 :          <99>	cmpl	$26, %eax

697 :   %338 = load i1* %ZF_val, !mcsema_real_eip !40 :          <9e>	je	12

698 :   %339 = load i64* %RBP_val, !mcsema_real_eip !41 :          <b0>	movq	-16(%rbp), %rax

699 :   br i1 %338, label %block_0xb0, label %block_0xa4, !mcsema_real_eip !40 :          <9e>	je	12

700 :   %340 = add i64 %300, -4, !mcsema_real_eip !42 :          <77>	movl	$4294967293, -4(%rbp)
701 :   %341 = inttoptr i64 %340 to i64*, !mcsema_real_eip !42 :          <77>	movl	$4294967293, -4(%rbp)

702 :   %342 = bitcast i64* %341 to i32* : NIL

703 :   store i32 -3, i32* %342, !mcsema_real_eip !42 :          <77>	movl	$4294967293, -4(%rbp)

704 :   br label %block_0x46d, !mcsema_real_eip !43 :          <7e>	jmp	1002

705 :   %343 = add i64 %339, -16, !mcsema_real_eip !41 :          <b0>	movq	-16(%rbp), %rax
706 :   %344 = inttoptr i64 %343 to i64*, !mcsema_real_eip !41 :          <b0>	movq	-16(%rbp), %rax
707 :   %345 = load i64* %344, !mcsema_real_eip !41 :          <b0>	movq	-16(%rbp), %rax
708 :   store i64 %345, i64* %RAX_val, !mcsema_real_eip !41 :          <b0>	movq	-16(%rbp), %rax

709 :   %346 = add i64 %345, 3, !mcsema_real_eip !44 :          <b4>	movzbl	3(%rax), %edi
710 :   %347 = inttoptr i64 %346 to i64*, !mcsema_real_eip !44 :          <b4>	movzbl	3(%rax), %edi

711 :   %348 = bitcast i64* %347 to i8* : NIL

712 :   %349 = load i8* %348, !mcsema_real_eip !44 :          <b4>	movzbl	3(%rax), %edi

713 :   %350 = zext i8 %349 to i64 : NIL

714 :   %351 = tail call x86_64_sysvcc i64 @to_byte(i64 %350), !mcsema_real_eip !45 :          <b8>	callq	0
715 :   store i64 %351, i64* %RAX_val, !mcsema_real_eip !45 :          <b8>	callq	0

716 :   store i64 2, i64* %RDI_val, !mcsema_real_eip !46 :          <bd>	movl	$2, %edi

717 :   %352 = load i64* %RBP_val, !mcsema_real_eip !47 :          <c2>	movl	%eax, -28(%rbp)
718 :   %353 = add i64 %352, -28, !mcsema_real_eip !47 :          <c2>	movl	%eax, -28(%rbp)
719 :   %354 = inttoptr i64 %353 to i64*, !mcsema_real_eip !47 :          <c2>	movl	%eax, -28(%rbp)
720 :   %355 = trunc i64 %351 to i32, !mcsema_real_eip !47 :          <c2>	movl	%eax, -28(%rbp)

721 :   %356 = bitcast i64* %354 to i32* : NIL

722 :   store i32 %355, i32* %356, !mcsema_real_eip !47 :          <c2>	movl	%eax, -28(%rbp)

723 :   %357 = load i64* %RBP_val, !mcsema_real_eip !48 :          <c5>	movl	-28(%rbp), %eax
724 :   %358 = add i64 %357, -28, !mcsema_real_eip !48 :          <c5>	movl	-28(%rbp), %eax
725 :   %359 = inttoptr i64 %358 to i64*, !mcsema_real_eip !48 :          <c5>	movl	-28(%rbp), %eax

726 :   %360 = bitcast i64* %359 to i32* : NIL

727 :   %361 = load i32* %360, !mcsema_real_eip !48 :          <c5>	movl	-28(%rbp), %eax

728 :   %362 = add i32 %361, 1 : NIL
729 :   %.lobit = ashr i32 %362, 31 : NIL

730 :   %363 = zext i32 %.lobit to i64, !mcsema_real_eip !49 :          <cd>	cltd

731 :   %364 = load i64* %RDI_val, !mcsema_real_eip !50 :          <ce>	idivl	%edi
732 :   %365 = shl nuw i64 %363, 32, !mcsema_real_eip !50 :          <ce>	idivl	%edi
733 :   %366 = sext i32 %362 to i64, !mcsema_real_eip !50 :          <ce>	idivl	%edi
734 :   %367 = or i64 %365, %366, !mcsema_real_eip !50 :          <ce>	idivl	%edi

735 :   %sext = shl i64 %364, 32 : NIL
736 :   %368 = ashr exact i64 %sext, 32 : NIL

737 :   %369 = sdiv i64 %367, %368, !mcsema_real_eip !50 :          <ce>	idivl	%edi
738 :   %370 = srem i64 %367, %368, !mcsema_real_eip !50 :          <ce>	idivl	%edi

739 :   %371 = and i64 %370, 4294967295 : NIL

740 :   store i64 %371, i64* %RDX_val, !mcsema_real_eip !50 :          <ce>	idivl	%edi

741 :   %372 = and i64 %369, 4294967295 : NIL

742 :   store i64 %372, i64* %RAX_val, !mcsema_real_eip !50 :          <ce>	idivl	%edi

743 :   %373 = trunc i64 %369 to i32, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax

744 :   %374 = add i32 %373, -7 : NIL

745 :   %375 = xor i32 %374, %373, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
746 :   %376 = and i32 %375, 16, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
747 :   %377 = icmp ne i32 %376, 0, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
748 :   store i1 %377, i1* %AF_val, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
749 :   %378 = trunc i32 %374 to i8, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
750 :   %379 = tail call i8 @llvm.ctpop.i8(i8 %378), !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax

751 :   %380 = and i8 %379, 1 : NIL
752 :   %381 = icmp eq i8 %380, 0 : NIL

753 :   store i1 %381, i1* %PF_val, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
754 :   %382 = icmp eq i32 %374, 0, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
755 :   store i1 %382, i1* %ZF_val, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax

756 :   %383 = icmp slt i32 %374, 0 : NIL

757 :   store i1 %383, i1* %SF_val, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
758 :   %384 = icmp ult i32 %373, 7, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
759 :   store i1 %384, i1* %CF_val, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax
760 :   %385 = and i32 %375, %373, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax

761 :   %386 = icmp slt i32 %385, 0 : NIL

762 :   store i1 %386, i1* %OF_val, !mcsema_real_eip !51 :          <d0>	cmpl	$7, %eax

763 :   %387 = load i1* %ZF_val, !mcsema_real_eip !52 :          <d5>	je	12

764 :   %388 = load i64* %RBP_val, !mcsema_real_eip !53 :          <e7>	movq	-16(%rbp), %rax

765 :   br i1 %387, label %block_0xe7, label %block_0xdb, !mcsema_real_eip !52 :          <d5>	je	12

766 :   %389 = add i64 %339, -4, !mcsema_real_eip !54 :          <a4>	movl	$4294967292, -4(%rbp)
767 :   %390 = inttoptr i64 %389 to i64*, !mcsema_real_eip !54 :          <a4>	movl	$4294967292, -4(%rbp)

768 :   %391 = bitcast i64* %390 to i32* : NIL

769 :   store i32 -4, i32* %391, !mcsema_real_eip !54 :          <a4>	movl	$4294967292, -4(%rbp)

770 :   br label %block_0x46d, !mcsema_real_eip !55 :          <ab>	jmp	957

771 :   %392 = add i64 %388, -16, !mcsema_real_eip !53 :          <e7>	movq	-16(%rbp), %rax
772 :   %393 = inttoptr i64 %392 to i64*, !mcsema_real_eip !53 :          <e7>	movq	-16(%rbp), %rax
773 :   %394 = load i64* %393, !mcsema_real_eip !53 :          <e7>	movq	-16(%rbp), %rax
774 :   store i64 %394, i64* %RAX_val, !mcsema_real_eip !53 :          <e7>	movq	-16(%rbp), %rax

775 :   %395 = add i64 %394, 4, !mcsema_real_eip !56 :          <eb>	movsbl	4(%rax), %ecx
776 :   %396 = inttoptr i64 %395 to i64*, !mcsema_real_eip !56 :          <eb>	movsbl	4(%rax), %ecx

777 :   %397 = bitcast i64* %396 to i8* : NIL

778 :   %398 = load i8* %397, !mcsema_real_eip !56 :          <eb>	movsbl	4(%rax), %ecx

779 :   %399 = zext i8 %398 to i32 : NIL

780 :   %400 = and i32 %399, 15, !mcsema_real_eip !57 :          <ef>	andl	$15, %ecx
781 :   %401 = icmp eq i32 %400, 0, !mcsema_real_eip !57 :          <ef>	andl	$15, %ecx
782 :   %402 = zext i32 %400 to i64, !mcsema_real_eip !57 :          <ef>	andl	$15, %ecx
783 :   store i64 %402, i64* %RCX_val, !mcsema_real_eip !57 :          <ef>	andl	$15, %ecx

784 :   %403 = add nsw i32 %400, -1 : NIL

785 :   %404 = and i32 %403, 16, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
786 :   %405 = icmp ne i32 %404, 0, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
787 :   store i1 %405, i1* %AF_val, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
788 :   %406 = trunc i32 %403 to i8, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
789 :   %407 = tail call i8 @llvm.ctpop.i8(i8 %406), !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx

790 :   %408 = and i8 %407, 1 : NIL
791 :   %409 = icmp eq i8 %408, 0 : NIL

792 :   store i1 %409, i1* %PF_val, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
793 :   %410 = icmp eq i32 %403, 0, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
794 :   store i1 %410, i1* %ZF_val, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
795 :   store i1 %401, i1* %SF_val, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
796 :   store i1 %401, i1* %CF_val, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx
797 :   store i1 false, i1* %OF_val, !mcsema_real_eip !58 :          <f5>	cmpl	$1, %ecx

798 :   br i1 %410, label %block_0x101, label %block_0x127, !mcsema_real_eip !59 :          <fb>	jne	38

799 :   %411 = add i64 %388, -4, !mcsema_real_eip !60 :          <db>	movl	$4294967291, -4(%rbp)
800 :   %412 = inttoptr i64 %411 to i64*, !mcsema_real_eip !60 :          <db>	movl	$4294967291, -4(%rbp)

801 :   %413 = bitcast i64* %412 to i32* : NIL

802 :   store i32 -5, i32* %413, !mcsema_real_eip !60 :          <db>	movl	$4294967291, -4(%rbp)

803 :   br label %block_0x46d, !mcsema_real_eip !61 :          <e2>	jmp	902

804 :   %414 = load i64* %RBP_val, !mcsema_real_eip !62 :          <127>	movl	$4294967290, -4(%rbp)
805 :   %415 = add i64 %414, -4, !mcsema_real_eip !62 :          <127>	movl	$4294967290, -4(%rbp)
806 :   %416 = inttoptr i64 %415 to i64*, !mcsema_real_eip !62 :          <127>	movl	$4294967290, -4(%rbp)

807 :   %417 = bitcast i64* %416 to i32* : NIL

808 :   store i32 -6, i32* %417, !mcsema_real_eip !62 :          <127>	movl	$4294967290, -4(%rbp)

809 :   br label %block_0x46d, !mcsema_real_eip !63 :          <12e>	jmp	826

810 :   %418 = load i64* %RBP_val, !mcsema_real_eip !64 :          <101>	movq	-16(%rbp), %rax
811 :   %419 = add i64 %418, -16, !mcsema_real_eip !64 :          <101>	movq	-16(%rbp), %rax
812 :   %420 = inttoptr i64 %419 to i64*, !mcsema_real_eip !64 :          <101>	movq	-16(%rbp), %rax
813 :   %421 = load i64* %420, !mcsema_real_eip !64 :          <101>	movq	-16(%rbp), %rax
814 :   store i64 %421, i64* %RAX_val, !mcsema_real_eip !64 :          <101>	movq	-16(%rbp), %rax

815 :   %422 = add i64 %421, 4, !mcsema_real_eip !65 :          <105>	movsbl	4(%rax), %ecx
816 :   %423 = inttoptr i64 %422 to i64*, !mcsema_real_eip !65 :          <105>	movsbl	4(%rax), %ecx

817 :   %424 = bitcast i64* %423 to i8* : NIL

818 :   %425 = load i8* %424, !mcsema_real_eip !65 :          <105>	movsbl	4(%rax), %ecx
819 :   %426 = sext i8 %425 to i32, !mcsema_real_eip !65 :          <105>	movsbl	4(%rax), %ecx

820 :   %427 = and i32 %426, 240, !mcsema_real_eip !66 :          <109>	andl	$240, %ecx
821 :   %428 = zext i32 %427 to i64, !mcsema_real_eip !66 :          <109>	andl	$240, %ecx
822 :   store i64 %428, i64* %RCX_val, !mcsema_real_eip !66 :          <109>	andl	$240, %ecx

823 :   %429 = add nsw i32 %427, -48 : NIL

824 :   %430 = xor i32 %429, %426, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx

825 :   %431 = and i32 %430, 16 : NIL
826 :   %432 = icmp eq i32 %431, 0 : NIL

827 :   store i1 %432, i1* %AF_val, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
828 :   %433 = trunc i32 %429 to i8, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
829 :   %434 = tail call i8 @llvm.ctpop.i8(i8 %433), !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx

830 :   %435 = and i8 %434, 1 : NIL
831 :   %436 = icmp eq i8 %435, 0 : NIL

832 :   store i1 %436, i1* %PF_val, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
833 :   %437 = icmp eq i32 %429, 0, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
834 :   store i1 %437, i1* %ZF_val, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx

835 :   %438 = icmp slt i32 %429, 0 : NIL

836 :   store i1 %438, i1* %SF_val, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
837 :   %439 = icmp ult i32 %427, 48, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
838 :   store i1 %439, i1* %CF_val, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx
839 :   store i1 false, i1* %OF_val, !mcsema_real_eip !67 :          <10f>	cmpl	$48, %ecx

840 :   br i1 %437, label %block_0x11b, label %block_0x127, !mcsema_real_eip !68 :          <115>	jne	12

841 :   %440 = load i64* %RBP_val, !mcsema_real_eip !69 :          <11b>	movl	$4294967292, -20(%rbp)
842 :   %441 = add i64 %440, -20, !mcsema_real_eip !69 :          <11b>	movl	$4294967292, -20(%rbp)
843 :   %442 = inttoptr i64 %441 to i64*, !mcsema_real_eip !69 :          <11b>	movl	$4294967292, -20(%rbp)

844 :   %443 = bitcast i64* %442 to i32* : NIL

845 :   store i32 -4, i32* %443, !mcsema_real_eip !69 :          <11b>	movl	$4294967292, -20(%rbp)

846 :   %444 = load i64* %RBP_val, !mcsema_real_eip !70 :          <133>	movq	-16(%rbp), %rax
847 :   %445 = add i64 %444, -16, !mcsema_real_eip !70 :          <133>	movq	-16(%rbp), %rax
848 :   %446 = inttoptr i64 %445 to i64*, !mcsema_real_eip !70 :          <133>	movq	-16(%rbp), %rax
849 :   %447 = load i64* %446, !mcsema_real_eip !70 :          <133>	movq	-16(%rbp), %rax
850 :   store i64 %447, i64* %RAX_val, !mcsema_real_eip !70 :          <133>	movq	-16(%rbp), %rax

851 :   %448 = add i64 %447, 5, !mcsema_real_eip !71 :          <137>	movsbl	5(%rax), %ecx
852 :   %449 = inttoptr i64 %448 to i64*, !mcsema_real_eip !71 :          <137>	movsbl	5(%rax), %ecx

853 :   %450 = bitcast i64* %449 to i8* : NIL

854 :   %451 = load i8* %450, !mcsema_real_eip !71 :          <137>	movsbl	5(%rax), %ecx

855 :   %452 = zext i8 %451 to i32 : NIL

856 :   %453 = and i32 %452, 15, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
857 :   store i1 false, i1* %SF_val, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
858 :   %454 = icmp eq i32 %453, 0, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
859 :   store i1 %454, i1* %ZF_val, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
860 :   %455 = trunc i32 %453 to i8, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
861 :   %456 = tail call i8 @llvm.ctpop.i8(i8 %455), !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx

862 :   %457 = and i8 %456, 1 : NIL
863 :   %458 = icmp eq i8 %457, 0 : NIL

864 :   store i1 %458, i1* %PF_val, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
865 :   store i1 false, i1* %OF_val, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
866 :   store i1 false, i1* %CF_val, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
867 :   %459 = zext i32 %453 to i64, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx
868 :   store i64 %459, i64* %RCX_val, !mcsema_real_eip !72 :          <13b>	andl	$15, %ecx

869 :   %460 = load i64* %RDX_val, !mcsema_real_eip !73 :          <141>	movb	%cl, %dl
870 :   %461 = and i64 %460, -256, !mcsema_real_eip !73 :          <141>	movb	%cl, %dl

871 :   %462 = or i64 %461, %459 : NIL

872 :   store i64 %462, i64* %RDX_val, !mcsema_real_eip !73 :          <141>	movb	%cl, %dl

873 :   %463 = load i64* %RBP_val, !mcsema_real_eip !74 :          <143>	movb	%dl, -33(%rbp)
874 :   %464 = add i64 %463, -33, !mcsema_real_eip !74 :          <143>	movb	%dl, -33(%rbp)
875 :   %465 = inttoptr i64 %464 to i64*, !mcsema_real_eip !74 :          <143>	movb	%dl, -33(%rbp)

876 :   %466 = bitcast i64* %465 to i8* : NIL

877 :   store i8 %455, i8* %466, !mcsema_real_eip !74 :          <143>	movb	%dl, -33(%rbp)

878 :   %467 = load i64* %RBP_val, !mcsema_real_eip !75 :          <146>	movq	-16(%rbp), %rax
879 :   %468 = add i64 %467, -16, !mcsema_real_eip !75 :          <146>	movq	-16(%rbp), %rax
880 :   %469 = inttoptr i64 %468 to i64*, !mcsema_real_eip !75 :          <146>	movq	-16(%rbp), %rax
881 :   %470 = load i64* %469, !mcsema_real_eip !75 :          <146>	movq	-16(%rbp), %rax
882 :   store i64 %470, i64* %RAX_val, !mcsema_real_eip !75 :          <146>	movq	-16(%rbp), %rax

883 :   %471 = add i64 %470, 5, !mcsema_real_eip !76 :          <14a>	movsbl	5(%rax), %ecx
884 :   %472 = inttoptr i64 %471 to i64*, !mcsema_real_eip !76 :          <14a>	movsbl	5(%rax), %ecx

885 :   %473 = bitcast i64* %472 to i8* : NIL

886 :   %474 = load i8* %473, !mcsema_real_eip !76 :          <14a>	movsbl	5(%rax), %ecx

887 :   %475 = zext i8 %474 to i32 : NIL

888 :   %476 = and i32 %475, 240, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
889 :   store i1 false, i1* %SF_val, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
890 :   %477 = icmp eq i32 %476, 0, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
891 :   store i1 %477, i1* %ZF_val, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
892 :   %478 = trunc i32 %476 to i8, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
893 :   %479 = tail call i8 @llvm.ctpop.i8(i8 %478), !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx

894 :   %480 = and i8 %479, 1 : NIL
895 :   %481 = icmp eq i8 %480, 0 : NIL

896 :   store i1 %481, i1* %PF_val, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
897 :   store i1 false, i1* %OF_val, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
898 :   store i1 false, i1* %CF_val, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
899 :   %482 = zext i32 %476 to i64, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx
900 :   store i64 %482, i64* %RCX_val, !mcsema_real_eip !77 :          <14e>	andl	$240, %ecx

901 :   %483 = load i64* %RDX_val, !mcsema_real_eip !78 :          <154>	movb	%cl, %dl
902 :   %484 = and i64 %483, -256, !mcsema_real_eip !78 :          <154>	movb	%cl, %dl

903 :   %485 = or i64 %484, %482 : NIL

904 :   store i64 %485, i64* %RDX_val, !mcsema_real_eip !78 :          <154>	movb	%cl, %dl

905 :   %486 = load i64* %RBP_val, !mcsema_real_eip !79 :          <156>	movb	%dl, -34(%rbp)
906 :   %487 = add i64 %486, -34, !mcsema_real_eip !79 :          <156>	movb	%dl, -34(%rbp)
907 :   %488 = inttoptr i64 %487 to i64*, !mcsema_real_eip !79 :          <156>	movb	%dl, -34(%rbp)

908 :   %489 = bitcast i64* %488 to i8* : NIL

909 :   store i8 %478, i8* %489, !mcsema_real_eip !79 :          <156>	movb	%dl, -34(%rbp)

910 :   %490 = load i64* %RBP_val, !mcsema_real_eip !80 :          <159>	movzbl	-33(%rbp), %ecx
911 :   %491 = add i64 %490, -33, !mcsema_real_eip !80 :          <159>	movzbl	-33(%rbp), %ecx
912 :   %492 = inttoptr i64 %491 to i64*, !mcsema_real_eip !80 :          <159>	movzbl	-33(%rbp), %ecx

913 :   %493 = bitcast i64* %492 to i8* : NIL

914 :   %494 = load i8* %493, !mcsema_real_eip !80 :          <159>	movzbl	-33(%rbp), %ecx

915 :   %495 = zext i8 %494 to i64 : NIL

916 :   store i64 %495, i64* %RCX_val, !mcsema_real_eip !80 :          <159>	movzbl	-33(%rbp), %ecx

917 :   %496 = zext i8 %494 to i32 : NIL
918 :   %497 = add nsw i32 %496, -3 : NIL

919 :   %498 = xor i32 %497, %496, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
920 :   %499 = and i32 %498, 16, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
921 :   %500 = icmp ne i32 %499, 0, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
922 :   store i1 %500, i1* %AF_val, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
923 :   %501 = trunc i32 %497 to i8, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
924 :   %502 = tail call i8 @llvm.ctpop.i8(i8 %501), !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx

925 :   %503 = and i8 %502, 1 : NIL
926 :   %504 = icmp eq i8 %503, 0 : NIL

927 :   store i1 %504, i1* %PF_val, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
928 :   %505 = icmp eq i32 %497, 0, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
929 :   store i1 %505, i1* %ZF_val, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx

930 :   %506 = icmp slt i32 %497, 0 : NIL

931 :   store i1 %506, i1* %SF_val, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx

932 :   %507 = icmp ult i8 %494, 3 : NIL

933 :   store i1 %507, i1* %CF_val, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx
934 :   store i1 false, i1* %OF_val, !mcsema_real_eip !81 :          <15d>	cmpl	$3, %ecx

935 :   br i1 %505, label %block_0x169, label %block_0x188, !mcsema_real_eip !82 :          <163>	jne	31

936 :   %508 = load i64* %RBP_val, !mcsema_real_eip !83 :          <188>	movl	-20(%rbp), %eax
937 :   %509 = add i64 %508, -20, !mcsema_real_eip !83 :          <188>	movl	-20(%rbp), %eax
938 :   %510 = inttoptr i64 %509 to i64*, !mcsema_real_eip !83 :          <188>	movl	-20(%rbp), %eax

939 :   %511 = bitcast i64* %510 to i32* : NIL

940 :   %512 = load i32* %511, !mcsema_real_eip !83 :          <188>	movl	-20(%rbp), %eax

941 :   %uadd151 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %512, i32 5) : NIL
942 :   %513 = extractvalue { i32, i1 } %uadd151, 0 : NIL

943 :   %514 = xor i32 %513, %512, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
944 :   %515 = and i32 %514, 16, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
945 :   %516 = icmp ne i32 %515, 0, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
946 :   store i1 %516, i1* %AF_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax

947 :   %517 = icmp slt i32 %513, 0 : NIL

948 :   store i1 %517, i1* %SF_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
949 :   %518 = icmp eq i32 %513, 0, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
950 :   store i1 %518, i1* %ZF_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
951 :   %519 = xor i32 %512, -2147483648, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
952 :   %520 = and i32 %514, %519, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax

953 :   %521 = icmp slt i32 %520, 0 : NIL

954 :   store i1 %521, i1* %OF_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
955 :   %522 = trunc i32 %513 to i8, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
956 :   %523 = tail call i8 @llvm.ctpop.i8(i8 %522), !mcsema_real_eip !84 :          <18b>	addl	$5, %eax

957 :   %524 = and i8 %523, 1 : NIL
958 :   %525 = icmp eq i8 %524, 0 : NIL

959 :   store i1 %525, i1* %PF_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax

960 :   %526 = extractvalue { i32, i1 } %uadd151, 1 : NIL

961 :   store i1 %526, i1* %CF_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
962 :   %527 = zext i32 %513 to i64, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax
963 :   store i64 %527, i64* %RAX_val, !mcsema_real_eip !84 :          <18b>	addl	$5, %eax

964 :   %528 = load i64* %RBP_val, !mcsema_real_eip !85 :          <190>	movl	%eax, -20(%rbp)
965 :   %529 = add i64 %528, -20, !mcsema_real_eip !85 :          <190>	movl	%eax, -20(%rbp)
966 :   %530 = inttoptr i64 %529 to i64*, !mcsema_real_eip !85 :          <190>	movl	%eax, -20(%rbp)

967 :   %531 = bitcast i64* %530 to i32* : NIL

968 :   store i32 %513, i32* %531, !mcsema_real_eip !85 :          <190>	movl	%eax, -20(%rbp)

969 :   %532 = load i64* %RBP_val, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
970 :   %533 = add i64 %532, -16, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
971 :   %534 = inttoptr i64 %533 to i64*, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
972 :   %535 = load i64* %534, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
973 :   store i64 %535, i64* %RAX_val, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax

974 :   %536 = add i64 %535, 6, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi
975 :   %537 = inttoptr i64 %536 to i64*, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi

976 :   %538 = bitcast i64* %537 to i8* : NIL

977 :   %539 = load i8* %538, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi

978 :   %540 = zext i8 %539 to i64 : NIL

979 :   store i64 %540, i64* %RDI_val, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi

980 :   %541 = tail call x86_64_sysvcc i64 @to_byte(i64 %540), !mcsema_real_eip !88 :          <19b>	callq	0
981 :   store i64 %541, i64* %RAX_val, !mcsema_real_eip !88 :          <19b>	callq	0

982 :   %542 = and i64 %541, 255 : NIL

983 :   %543 = load i64* %RCX_val, !mcsema_real_eip !89 :          <1a0>	movb	%al, %cl
984 :   %544 = and i64 %543, -256, !mcsema_real_eip !89 :          <1a0>	movb	%al, %cl

985 :   %545 = or i64 %544, %542 : NIL

986 :   store i64 %545, i64* %RCX_val, !mcsema_real_eip !89 :          <1a0>	movb	%al, %cl

987 :   %546 = load i64* %RBP_val, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)
988 :   %547 = add i64 %546, -35, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)
989 :   %548 = inttoptr i64 %547 to i64*, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)
990 :   %549 = trunc i64 %541 to i8, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)

991 :   %550 = bitcast i64* %548 to i8* : NIL

992 :   store i8 %549, i8* %550, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)

993 :   %551 = load i64* %RBP_val, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
994 :   %552 = add i64 %551, -16, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
995 :   %553 = inttoptr i64 %552 to i64*, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
996 :   %554 = load i64* %553, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
997 :   store i64 %554, i64* %RDX_val, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx

998 :   %555 = add i64 %554, 7, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi
999 :   %556 = inttoptr i64 %555 to i64*, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi

1000 :   %557 = bitcast i64* %556 to i8* : NIL

1001 :   %558 = load i8* %557, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi

1002 :   %559 = zext i8 %558 to i64 : NIL

1003 :   store i64 %559, i64* %RDI_val, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi

1004 :   %560 = tail call x86_64_sysvcc i64 @to_byte(i64 %559), !mcsema_real_eip !93 :          <1ad>	callq	0
1005 :   store i64 %560, i64* %RAX_val, !mcsema_real_eip !93 :          <1ad>	callq	0

1006 :   %561 = load i64* %RBP_val, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi
1007 :   %562 = add i64 %561, -35, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi
1008 :   %563 = inttoptr i64 %562 to i64*, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi

1009 :   %564 = bitcast i64* %563 to i8* : NIL

1010 :   %565 = load i8* %564, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi

1011 :   %566 = zext i8 %565 to i32 : NIL

1012 :   %567 = load i64* %RAX_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1013 :   %568 = trunc i64 %567 to i32, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1014 :   %569 = or i32 %568, %566, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1015 :   store i1 false, i1* %OF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1016 :   store i1 false, i1* %CF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi

1017 :   %570 = icmp slt i32 %568, 0 : NIL

1018 :   store i1 %570, i1* %SF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1019 :   %571 = icmp eq i32 %569, 0, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1020 :   store i1 %571, i1* %ZF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1021 :   %572 = trunc i32 %569 to i8, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1022 :   %573 = tail call i8 @llvm.ctpop.i8(i8 %572), !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi

1023 :   %574 = and i8 %573, 1 : NIL
1024 :   %575 = icmp eq i8 %574, 0 : NIL

1025 :   store i1 %575, i1* %PF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1026 :   %576 = zext i32 %569 to i64, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1027 :   store i64 %576, i64* %RDI_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi

1028 :   %.mask152 = and i32 %569, 255 : NIL
1029 :   %577 = zext i32 %.mask152 to i64 : NIL

1030 :   %578 = load i64* %RCX_val, !mcsema_real_eip !96 :          <1b8>	movb	%dil, %cl
1031 :   %579 = and i64 %578, -256, !mcsema_real_eip !96 :          <1b8>	movb	%dil, %cl

1032 :   %580 = or i64 %577, %579 : NIL

1033 :   store i64 %580, i64* %RCX_val, !mcsema_real_eip !96 :          <1b8>	movb	%dil, %cl

1034 :   %581 = load i64* %RBP_val, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)
1035 :   %582 = add i64 %581, -35, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)
1036 :   %583 = inttoptr i64 %582 to i64*, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)

1037 :   %584 = bitcast i64* %583 to i8* : NIL

1038 :   store i8 %572, i8* %584, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)

1039 :   %585 = load i64* %RBP_val, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax
1040 :   %586 = add i64 %585, -35, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax
1041 :   %587 = inttoptr i64 %586 to i64*, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax

1042 :   %588 = bitcast i64* %587 to i8* : NIL

1043 :   %589 = load i8* %588, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax

1044 :   %590 = zext i8 %589 to i32 : NIL

1045 :   %591 = xor i32 %590, -1, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1046 :   store i1 false, i1* %CF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1047 :   store i1 false, i1* %OF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1048 :   store i1 true, i1* %SF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1049 :   store i1 false, i1* %ZF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1050 :   %592 = trunc i32 %591 to i8, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1051 :   %593 = tail call i8 @llvm.ctpop.i8(i8 %592), !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax

1052 :   %594 = and i8 %593, 1 : NIL
1053 :   %595 = icmp eq i8 %594, 0 : NIL

1054 :   store i1 %595, i1* %PF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1055 :   %596 = zext i32 %591 to i64, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1056 :   store i64 %596, i64* %RAX_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax

1057 :   %597 = sub i32 -71, %590 : NIL

1058 :   %598 = xor i32 %597, %591, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1059 :   %599 = and i32 %598, 16, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1060 :   %600 = icmp ne i32 %599, 0, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1061 :   store i1 %600, i1* %AF_val, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1062 :   %601 = trunc i32 %597 to i8, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax

1063 :   br label %block_0x1e2 : NIL

1064 :   %602 = load i64* %RBP_val, !mcsema_real_eip !101 :          <169>	movzbl	-34(%rbp), %eax
1065 :   %603 = add i64 %602, -34, !mcsema_real_eip !101 :          <169>	movzbl	-34(%rbp), %eax
1066 :   %604 = inttoptr i64 %603 to i64*, !mcsema_real_eip !101 :          <169>	movzbl	-34(%rbp), %eax

1067 :   %605 = bitcast i64* %604 to i8* : NIL

1068 :   %606 = load i8* %605, !mcsema_real_eip !101 :          <169>	movzbl	-34(%rbp), %eax

1069 :   %607 = zext i8 %606 to i64 : NIL

1070 :   store i64 %607, i64* %RAX_val, !mcsema_real_eip !101 :          <169>	movzbl	-34(%rbp), %eax

1071 :   %608 = zext i8 %606 to i32 : NIL
1072 :   %609 = add nsw i32 %608, -96 : NIL

1073 :   %610 = xor i32 %609, %608, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1074 :   %611 = and i32 %610, 16, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1075 :   %612 = icmp ne i32 %611, 0, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1076 :   store i1 %612, i1* %AF_val, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1077 :   %613 = trunc i32 %609 to i8, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1078 :   %614 = tail call i8 @llvm.ctpop.i8(i8 %613), !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax

1079 :   %615 = and i8 %614, 1 : NIL
1080 :   %616 = icmp eq i8 %615, 0 : NIL

1081 :   store i1 %616, i1* %PF_val, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1082 :   %617 = icmp eq i32 %609, 0, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1083 :   store i1 %617, i1* %ZF_val, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax

1084 :   %618 = icmp slt i32 %609, 0 : NIL

1085 :   store i1 %618, i1* %SF_val, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax

1086 :   %619 = icmp ult i8 %606, 96 : NIL

1087 :   store i1 %619, i1* %CF_val, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax
1088 :   store i1 false, i1* %OF_val, !mcsema_real_eip !102 :          <16d>	cmpl	$96, %eax

1089 :   br i1 %617, label %block_0x178, label %block_0x188, !mcsema_real_eip !103 :          <172>	jne	16

1090 :   %620 = load i64* %RBP_val, !mcsema_real_eip !104 :          <178>	movl	-20(%rbp), %eax
1091 :   %621 = add i64 %620, -20, !mcsema_real_eip !104 :          <178>	movl	-20(%rbp), %eax
1092 :   %622 = inttoptr i64 %621 to i64*, !mcsema_real_eip !104 :          <178>	movl	-20(%rbp), %eax

1093 :   %623 = bitcast i64* %622 to i32* : NIL

1094 :   %624 = load i32* %623, !mcsema_real_eip !104 :          <178>	movl	-20(%rbp), %eax

1095 :   %uadd141 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %624, i32 4) : NIL
1096 :   %625 = extractvalue { i32, i1 } %uadd141, 0 : NIL

1097 :   %626 = xor i32 %625, %624, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1098 :   %627 = and i32 %626, 16, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1099 :   %628 = icmp ne i32 %627, 0, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1100 :   store i1 %628, i1* %AF_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax

1101 :   %629 = icmp slt i32 %625, 0 : NIL

1102 :   store i1 %629, i1* %SF_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1103 :   %630 = icmp eq i32 %625, 0, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1104 :   store i1 %630, i1* %ZF_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1105 :   %631 = xor i32 %624, -2147483648, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1106 :   %632 = and i32 %626, %631, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax

1107 :   %633 = icmp slt i32 %632, 0 : NIL

1108 :   store i1 %633, i1* %OF_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1109 :   %634 = trunc i32 %625 to i8, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1110 :   %635 = tail call i8 @llvm.ctpop.i8(i8 %634), !mcsema_real_eip !105 :          <17b>	addl	$4, %eax

1111 :   %636 = and i8 %635, 1 : NIL
1112 :   %637 = icmp eq i8 %636, 0 : NIL

1113 :   store i1 %637, i1* %PF_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax

1114 :   %638 = extractvalue { i32, i1 } %uadd141, 1 : NIL

1115 :   store i1 %638, i1* %CF_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1116 :   %639 = zext i32 %625 to i64, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax
1117 :   store i64 %639, i64* %RAX_val, !mcsema_real_eip !105 :          <17b>	addl	$4, %eax

1118 :   %640 = load i64* %RBP_val, !mcsema_real_eip !106 :          <180>	movl	%eax, -20(%rbp)
1119 :   %641 = add i64 %640, -20, !mcsema_real_eip !106 :          <180>	movl	%eax, -20(%rbp)
1120 :   %642 = inttoptr i64 %641 to i64*, !mcsema_real_eip !106 :          <180>	movl	%eax, -20(%rbp)

1121 :   %643 = bitcast i64* %642 to i32* : NIL

1122 :   store i32 %625, i32* %643, !mcsema_real_eip !106 :          <180>	movl	%eax, -20(%rbp)

1123 :   %644 = load i64* %RBP_val, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
1124 :   %645 = add i64 %644, -16, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
1125 :   %646 = inttoptr i64 %645 to i64*, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
1126 :   %647 = load i64* %646, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax
1127 :   store i64 %647, i64* %RAX_val, !mcsema_real_eip !86 :          <193>	movq	-16(%rbp), %rax

1128 :   %648 = add i64 %647, 6, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi
1129 :   %649 = inttoptr i64 %648 to i64*, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi

1130 :   %650 = bitcast i64* %649 to i8* : NIL

1131 :   %651 = load i8* %650, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi

1132 :   %652 = zext i8 %651 to i64 : NIL

1133 :   store i64 %652, i64* %RDI_val, !mcsema_real_eip !87 :          <197>	movzbl	6(%rax), %edi

1134 :   %653 = tail call x86_64_sysvcc i64 @to_byte(i64 %652), !mcsema_real_eip !88 :          <19b>	callq	0
1135 :   store i64 %653, i64* %RAX_val, !mcsema_real_eip !88 :          <19b>	callq	0

1136 :   %654 = and i64 %653, 255 : NIL

1137 :   %655 = load i64* %RCX_val, !mcsema_real_eip !89 :          <1a0>	movb	%al, %cl
1138 :   %656 = and i64 %655, -256, !mcsema_real_eip !89 :          <1a0>	movb	%al, %cl

1139 :   %657 = or i64 %656, %654 : NIL

1140 :   store i64 %657, i64* %RCX_val, !mcsema_real_eip !89 :          <1a0>	movb	%al, %cl

1141 :   %658 = load i64* %RBP_val, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)
1142 :   %659 = add i64 %658, -35, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)
1143 :   %660 = inttoptr i64 %659 to i64*, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)
1144 :   %661 = trunc i64 %653 to i8, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)

1145 :   %662 = bitcast i64* %660 to i8* : NIL

1146 :   store i8 %661, i8* %662, !mcsema_real_eip !90 :          <1a2>	movb	%cl, -35(%rbp)

1147 :   %663 = load i64* %RBP_val, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
1148 :   %664 = add i64 %663, -16, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
1149 :   %665 = inttoptr i64 %664 to i64*, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
1150 :   %666 = load i64* %665, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx
1151 :   store i64 %666, i64* %RDX_val, !mcsema_real_eip !91 :          <1a5>	movq	-16(%rbp), %rdx

1152 :   %667 = add i64 %666, 7, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi
1153 :   %668 = inttoptr i64 %667 to i64*, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi

1154 :   %669 = bitcast i64* %668 to i8* : NIL

1155 :   %670 = load i8* %669, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi

1156 :   %671 = zext i8 %670 to i64 : NIL

1157 :   store i64 %671, i64* %RDI_val, !mcsema_real_eip !92 :          <1a9>	movzbl	7(%rdx), %edi

1158 :   %672 = tail call x86_64_sysvcc i64 @to_byte(i64 %671), !mcsema_real_eip !93 :          <1ad>	callq	0
1159 :   store i64 %672, i64* %RAX_val, !mcsema_real_eip !93 :          <1ad>	callq	0

1160 :   %673 = load i64* %RBP_val, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi
1161 :   %674 = add i64 %673, -35, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi
1162 :   %675 = inttoptr i64 %674 to i64*, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi

1163 :   %676 = bitcast i64* %675 to i8* : NIL

1164 :   %677 = load i8* %676, !mcsema_real_eip !94 :          <1b2>	movzbl	-35(%rbp), %edi

1165 :   %678 = zext i8 %677 to i32 : NIL

1166 :   %679 = load i64* %RAX_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1167 :   %680 = trunc i64 %679 to i32, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1168 :   %681 = or i32 %680, %678, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1169 :   store i1 false, i1* %OF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1170 :   store i1 false, i1* %CF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi

1171 :   %682 = icmp slt i32 %680, 0 : NIL

1172 :   store i1 %682, i1* %SF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1173 :   %683 = icmp eq i32 %681, 0, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1174 :   store i1 %683, i1* %ZF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1175 :   %684 = trunc i32 %681 to i8, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1176 :   %685 = tail call i8 @llvm.ctpop.i8(i8 %684), !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi

1177 :   %686 = and i8 %685, 1 : NIL
1178 :   %687 = icmp eq i8 %686, 0 : NIL

1179 :   store i1 %687, i1* %PF_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1180 :   %688 = zext i32 %681 to i64, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi
1181 :   store i64 %688, i64* %RDI_val, !mcsema_real_eip !95 :          <1b6>	orl	%eax, %edi

1182 :   %.mask = and i32 %681, 255 : NIL
1183 :   %689 = zext i32 %.mask to i64 : NIL

1184 :   %690 = load i64* %RCX_val, !mcsema_real_eip !96 :          <1b8>	movb	%dil, %cl
1185 :   %691 = and i64 %690, -256, !mcsema_real_eip !96 :          <1b8>	movb	%dil, %cl

1186 :   %692 = or i64 %689, %691 : NIL

1187 :   store i64 %692, i64* %RCX_val, !mcsema_real_eip !96 :          <1b8>	movb	%dil, %cl

1188 :   %693 = load i64* %RBP_val, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)
1189 :   %694 = add i64 %693, -35, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)
1190 :   %695 = inttoptr i64 %694 to i64*, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)

1191 :   %696 = bitcast i64* %695 to i8* : NIL

1192 :   store i8 %684, i8* %696, !mcsema_real_eip !97 :          <1bb>	movb	%cl, -35(%rbp)

1193 :   %697 = load i64* %RBP_val, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax
1194 :   %698 = add i64 %697, -35, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax
1195 :   %699 = inttoptr i64 %698 to i64*, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax

1196 :   %700 = bitcast i64* %699 to i8* : NIL

1197 :   %701 = load i8* %700, !mcsema_real_eip !98 :          <1be>	movzbl	-35(%rbp), %eax

1198 :   %702 = zext i8 %701 to i32 : NIL

1199 :   %703 = xor i32 %702, -1, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1200 :   store i1 false, i1* %CF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1201 :   store i1 false, i1* %OF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1202 :   store i1 true, i1* %SF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1203 :   store i1 false, i1* %ZF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1204 :   %704 = trunc i32 %703 to i8, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1205 :   %705 = tail call i8 @llvm.ctpop.i8(i8 %704), !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax

1206 :   %706 = and i8 %705, 1 : NIL
1207 :   %707 = icmp eq i8 %706, 0 : NIL

1208 :   store i1 %707, i1* %PF_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1209 :   %708 = zext i32 %703 to i64, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax
1210 :   store i64 %708, i64* %RAX_val, !mcsema_real_eip !99 :          <1c2>	xorl	$4294967295, %eax

1211 :   %709 = sub i32 -71, %702 : NIL

1212 :   %710 = xor i32 %709, %703, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1213 :   %711 = and i32 %710, 16, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1214 :   %712 = icmp ne i32 %711, 0, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1215 :   store i1 %712, i1* %AF_val, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax
1216 :   %713 = trunc i32 %709 to i8, !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax

1217 :   br label %block_0x1e2 : NIL
1218 :   %.sink = phi i8 [ %601, %block_0x188 ], [ %713, %block_0x178 ] : NIL
1219 :   %storemerge244.in = phi i32 [ %597, %block_0x188 ], [ %709, %block_0x178 ] : NIL
1220 :   %storemerge.in = phi i32 [ %598, %block_0x188 ], [ %710, %block_0x178 ] : NIL

1221 :   %714 = tail call i8 @llvm.ctpop.i8(i8 %.sink), !mcsema_real_eip !100 :          <1c7>	cmpl	$70, %eax

1222 :   %storemerge245.in = and i8 %714, 1 : NIL
1223 :   %storemerge245 = icmp eq i8 %storemerge245.in, 0 : NIL
1224 :   store i1 %storemerge245, i1* %PF_val : NIL
1225 :   store i1 false, i1* %ZF_val : NIL
1226 :   %storemerge244 = icmp slt i32 %storemerge244.in, 0 : NIL
1227 :   store i1 %storemerge244, i1* %SF_val : NIL
1228 :   store i1 false, i1* %CF_val : NIL
1229 :   %storemerge = icmp slt i32 %storemerge.in, 0 : NIL
1230 :   store i1 %storemerge, i1* %OF_val : NIL

1231 :   %715 = load i64* %RBP_val, !mcsema_real_eip !107 :          <1e2>	movl	-20(%rbp), %ecx
1232 :   %716 = add i64 %715, -20, !mcsema_real_eip !107 :          <1e2>	movl	-20(%rbp), %ecx
1233 :   %717 = inttoptr i64 %716 to i64*, !mcsema_real_eip !107 :          <1e2>	movl	-20(%rbp), %ecx

1234 :   %718 = bitcast i64* %717 to i32* : NIL

1235 :   %719 = load i32* %718, !mcsema_real_eip !107 :          <1e2>	movl	-20(%rbp), %ecx
1236 :   %720 = zext i32 %719 to i64, !mcsema_real_eip !107 :          <1e2>	movl	-20(%rbp), %ecx
1237 :   store i64 %720, i64* %RCX_val, !mcsema_real_eip !107 :          <1e2>	movl	-20(%rbp), %ecx

1238 :   %721 = load i64* %RBP_val, !mcsema_real_eip !108 :          <1e5>	movl	-20(%rbp), %eax
1239 :   %722 = add i64 %721, -20, !mcsema_real_eip !108 :          <1e5>	movl	-20(%rbp), %eax
1240 :   %723 = inttoptr i64 %722 to i64*, !mcsema_real_eip !108 :          <1e5>	movl	-20(%rbp), %eax

1241 :   %724 = bitcast i64* %723 to i32* : NIL

1242 :   %725 = load i32* %724, !mcsema_real_eip !108 :          <1e5>	movl	-20(%rbp), %eax

1243 :   %726 = and i32 %719, 31, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax

1244 :   %727 = add i32 %719, -1 : NIL

1245 :   %728 = icmp ne i32 %726, 0, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1246 :   %729 = select i1 %728, i32 %727, i32 0, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax

1247 :   %730 = zext i1 %728 to i32 : NIL

1248 :   %731 = shl i32 %725, %729, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax

1249 :   %732 = icmp slt i32 %731, 0 : NIL

1250 :   %733 = load i1* %CF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1251 :   %734 = select i1 %728, i1 %732, i1 %733, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1252 :   %735 = shl i32 %731, %730, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1253 :   %736 = icmp eq i32 %726, 1, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1254 :   %737 = load i1* %OF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax

1255 :   %738 = icmp slt i32 %735, 0 : NIL

1256 :   %739 = xor i1 %738, %734, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1257 :   %740 = select i1 %736, i1 %739, i1 %737, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1258 :   store i1 %740, i1* %OF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1259 :   store i1 %734, i1* %CF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1260 :   %741 = load i1* %ZF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1261 :   %742 = icmp eq i32 %735, 0, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1262 :   %743 = select i1 %728, i1 %742, i1 %741, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1263 :   store i1 %743, i1* %ZF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1264 :   %744 = load i1* %SF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1265 :   %745 = select i1 %728, i1 %738, i1 %744, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1266 :   store i1 %745, i1* %SF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1267 :   %746 = load i1* %PF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1268 :   %747 = trunc i32 %735 to i8, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1269 :   %748 = tail call i8 @llvm.ctpop.i8(i8 %747), !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax

1270 :   %749 = and i8 %748, 1 : NIL
1271 :   %750 = icmp eq i8 %749, 0 : NIL

1272 :   %751 = select i1 %728, i1 %750, i1 %746, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1273 :   store i1 %751, i1* %PF_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1274 :   %752 = zext i32 %735 to i64, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax
1275 :   store i64 %752, i64* %RAX_val, !mcsema_real_eip !109 :          <1e8>	shll	%cl, %eax

1276 :   %753 = load i64* %RBP_val, !mcsema_real_eip !110 :          <1ea>	movl	%eax, -20(%rbp)
1277 :   %754 = add i64 %753, -20, !mcsema_real_eip !110 :          <1ea>	movl	%eax, -20(%rbp)
1278 :   %755 = inttoptr i64 %754 to i64*, !mcsema_real_eip !110 :          <1ea>	movl	%eax, -20(%rbp)

1279 :   %756 = bitcast i64* %755 to i32* : NIL

1280 :   store i32 %735, i32* %756, !mcsema_real_eip !110 :          <1ea>	movl	%eax, -20(%rbp)

1281 :   %757 = load i64* %RBP_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1282 :   %758 = add i64 %757, -20, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1283 :   %759 = inttoptr i64 %758 to i64*, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)

1284 :   %760 = bitcast i64* %759 to i32* : NIL

1285 :   %761 = load i32* %760, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1286 :   store i1 false, i1* %AF_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1287 :   %762 = trunc i32 %761 to i8, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1288 :   %763 = tail call i8 @llvm.ctpop.i8(i8 %762), !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)

1289 :   %764 = and i8 %763, 1 : NIL
1290 :   %765 = icmp eq i8 %764, 0 : NIL

1291 :   store i1 %765, i1* %PF_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1292 :   %766 = icmp eq i32 %761, 0, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1293 :   store i1 %766, i1* %ZF_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)

1294 :   %767 = icmp slt i32 %761, 0 : NIL

1295 :   store i1 %767, i1* %SF_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1296 :   store i1 false, i1* %CF_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)
1297 :   store i1 false, i1* %OF_val, !mcsema_real_eip !111 :          <1ed>	cmpl	$0, -20(%rbp)

1298 :   br i1 %766, label %block_0x206, label %block_0x1fa, !mcsema_real_eip !112 :          <1f4>	je	12

1299 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !113 :          <206>	movl	$0, %edi

1300 :   store i64 4, i64* %RDX_val, !mcsema_real_eip !114 :          <20b>	movl	$4, %edx

1301 :   %768 = load i64* %RBP_val, !mcsema_real_eip !115 :          <210>	movq	-16(%rbp), %rax
1302 :   %769 = add i64 %768, -16, !mcsema_real_eip !115 :          <210>	movq	-16(%rbp), %rax
1303 :   %770 = inttoptr i64 %769 to i64*, !mcsema_real_eip !115 :          <210>	movq	-16(%rbp), %rax
1304 :   %771 = load i64* %770, !mcsema_real_eip !115 :          <210>	movq	-16(%rbp), %rax

1305 :   %uadd142 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %771, i64 8) : NIL
1306 :   %772 = extractvalue { i64, i1 } %uadd142, 0 : NIL

1307 :   %773 = xor i64 %772, %771, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1308 :   %774 = and i64 %773, 16, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1309 :   %775 = icmp ne i64 %774, 0, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1310 :   store i1 %775, i1* %AF_val, !mcsema_real_eip !116 :          <214>	addq	$8, %rax

1311 :   %776 = icmp slt i64 %772, 0 : NIL

1312 :   store i1 %776, i1* %SF_val, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1313 :   %777 = icmp eq i64 %772, 0, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1314 :   store i1 %777, i1* %ZF_val, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1315 :   %778 = xor i64 %771, -9223372036854775808, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1316 :   %779 = and i64 %773, %778, !mcsema_real_eip !116 :          <214>	addq	$8, %rax

1317 :   %780 = icmp slt i64 %779, 0 : NIL

1318 :   store i1 %780, i1* %OF_val, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1319 :   %781 = trunc i64 %772 to i8, !mcsema_real_eip !116 :          <214>	addq	$8, %rax
1320 :   %782 = tail call i8 @llvm.ctpop.i8(i8 %781), !mcsema_real_eip !116 :          <214>	addq	$8, %rax

1321 :   %783 = and i8 %782, 1 : NIL
1322 :   %784 = icmp eq i8 %783, 0 : NIL

1323 :   store i1 %784, i1* %PF_val, !mcsema_real_eip !116 :          <214>	addq	$8, %rax

1324 :   %785 = extractvalue { i64, i1 } %uadd142, 1 : NIL

1325 :   store i1 %785, i1* %CF_val, !mcsema_real_eip !116 :          <214>	addq	$8, %rax

1326 :   store i64 %772, i64* %RSI_val, !mcsema_real_eip !117 :          <21a>	movq	%rax, %rsi

1327 :   %786 = load i64* %RDI_val, !mcsema_real_eip !118 :          <21d>	callq	0
1328 :   %787 = load i64* %RDX_val, !mcsema_real_eip !118 :          <21d>	callq	0
1329 :   %788 = tail call x86_64_sysvcc i64 @read_bytes(i64 %786, i64 %772, i64 %787), !mcsema_real_eip !118 :          <21d>	callq	0
1330 :   store i64 %788, i64* %RAX_val, !mcsema_real_eip !118 :          <21d>	callq	0

1331 :   %789 = and i64 %788, 65535 : NIL

1332 :   %790 = load i64* %RCX_val, !mcsema_real_eip !119 :          <222>	movw	%ax, %cx
1333 :   %791 = and i64 %790, -65536, !mcsema_real_eip !119 :          <222>	movw	%ax, %cx

1334 :   %792 = or i64 %791, %789 : NIL

1335 :   store i64 %792, i64* %RCX_val, !mcsema_real_eip !119 :          <222>	movw	%ax, %cx

1336 :   %793 = load i64* %RBP_val, !mcsema_real_eip !120 :          <225>	movw	%cx, -38(%rbp)
1337 :   %794 = add i64 %793, -38, !mcsema_real_eip !120 :          <225>	movw	%cx, -38(%rbp)
1338 :   %795 = inttoptr i64 %794 to i64*, !mcsema_real_eip !120 :          <225>	movw	%cx, -38(%rbp)
1339 :   %796 = trunc i64 %788 to i16, !mcsema_real_eip !120 :          <225>	movw	%cx, -38(%rbp)

1340 :   %797 = bitcast i64* %795 to i16* : NIL

1341 :   store i16 %796, i16* %797, !mcsema_real_eip !120 :          <225>	movw	%cx, -38(%rbp)

1342 :   %798 = load i64* %RBP_val, !mcsema_real_eip !121 :          <229>	movzwl	-38(%rbp), %eax
1343 :   %799 = add i64 %798, -38, !mcsema_real_eip !121 :          <229>	movzwl	-38(%rbp), %eax
1344 :   %800 = inttoptr i64 %799 to i64*, !mcsema_real_eip !121 :          <229>	movzwl	-38(%rbp), %eax

1345 :   %801 = bitcast i64* %800 to i16* : NIL

1346 :   %802 = load i16* %801, !mcsema_real_eip !121 :          <229>	movzwl	-38(%rbp), %eax

1347 :   %803 = zext i16 %802 to i32 : NIL

1348 :   %804 = or i32 %803, 21845, !mcsema_real_eip !122 :          <22d>	orl	$21845, %eax
1349 :   %805 = zext i32 %804 to i64, !mcsema_real_eip !122 :          <22d>	orl	$21845, %eax
1350 :   store i64 %805, i64* %RAX_val, !mcsema_real_eip !122 :          <22d>	orl	$21845, %eax

1351 :   %806 = add nsw i32 %804, -56663 : NIL
1352 :   %807 = and i32 %806, 16 : NIL
1353 :   %808 = icmp ne i32 %807, 0 : NIL

1354 :   store i1 %808, i1* %AF_val, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1355 :   %809 = trunc i32 %806 to i8, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1356 :   %810 = tail call i8 @llvm.ctpop.i8(i8 %809), !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax

1357 :   %811 = and i8 %810, 1 : NIL
1358 :   %812 = icmp eq i8 %811, 0 : NIL

1359 :   store i1 %812, i1* %PF_val, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1360 :   %813 = icmp eq i32 %806, 0, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1361 :   store i1 %813, i1* %ZF_val, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax

1362 :   %814 = icmp slt i32 %806, 0 : NIL

1363 :   store i1 %814, i1* %SF_val, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1364 :   %815 = icmp ult i32 %804, 56663, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1365 :   store i1 %815, i1* %CF_val, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax
1366 :   store i1 false, i1* %OF_val, !mcsema_real_eip !123 :          <232>	cmpl	$56663, %eax

1367 :   br i1 %813, label %block_0x23d, label %block_0x25d, !mcsema_real_eip !124 :          <237>	jne	32

1368 :   %816 = load i64* %RBP_val, !mcsema_real_eip !125 :          <1fa>	movl	$4294967289, -4(%rbp)
1369 :   %817 = add i64 %816, -4, !mcsema_real_eip !125 :          <1fa>	movl	$4294967289, -4(%rbp)
1370 :   %818 = inttoptr i64 %817 to i64*, !mcsema_real_eip !125 :          <1fa>	movl	$4294967289, -4(%rbp)

1371 :   %819 = bitcast i64* %818 to i32* : NIL

1372 :   store i32 -7, i32* %819, !mcsema_real_eip !125 :          <1fa>	movl	$4294967289, -4(%rbp)

1373 :   br label %block_0x46d, !mcsema_real_eip !126 :          <201>	jmp	615

1374 :   %820 = load i64* %RBP_val, !mcsema_real_eip !127 :          <25d>	movl	$48059, -20(%rbp)
1375 :   %821 = add i64 %820, -20, !mcsema_real_eip !127 :          <25d>	movl	$48059, -20(%rbp)
1376 :   %822 = inttoptr i64 %821 to i64*, !mcsema_real_eip !127 :          <25d>	movl	$48059, -20(%rbp)

1377 :   %823 = bitcast i64* %822 to i32* : NIL

1378 :   store i32 48059, i32* %823, !mcsema_real_eip !127 :          <25d>	movl	$48059, -20(%rbp)

1379 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !128 :          <264>	movl	$0, %edi

1380 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !129 :          <269>	movl	$8, %edx

1381 :   %824 = load i64* %RBP_val, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax
1382 :   %825 = add i64 %824, -16, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax
1383 :   %826 = inttoptr i64 %825 to i64*, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax
1384 :   %827 = load i64* %826, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax

1385 :   %uadd150 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %827, i64 12) : NIL
1386 :   %828 = extractvalue { i64, i1 } %uadd150, 0 : NIL

1387 :   %829 = xor i64 %828, %827, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1388 :   %830 = and i64 %829, 16, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1389 :   %831 = icmp ne i64 %830, 0, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1390 :   store i1 %831, i1* %AF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1391 :   %832 = icmp slt i64 %828, 0 : NIL

1392 :   store i1 %832, i1* %SF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1393 :   %833 = icmp eq i64 %828, 0, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1394 :   store i1 %833, i1* %ZF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1395 :   %834 = xor i64 %827, -9223372036854775808, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1396 :   %835 = and i64 %829, %834, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1397 :   %836 = icmp slt i64 %835, 0 : NIL

1398 :   store i1 %836, i1* %OF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1399 :   %837 = trunc i64 %828 to i8, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1400 :   %838 = tail call i8 @llvm.ctpop.i8(i8 %837), !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1401 :   %839 = and i8 %838, 1 : NIL
1402 :   %840 = icmp eq i8 %839, 0 : NIL

1403 :   store i1 %840, i1* %PF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1404 :   %841 = extractvalue { i64, i1 } %uadd150, 1 : NIL

1405 :   store i1 %841, i1* %CF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1406 :   store i64 %828, i64* %RSI_val, !mcsema_real_eip !132 :          <278>	movq	%rax, %rsi

1407 :   %842 = load i64* %RDI_val, !mcsema_real_eip !133 :          <27b>	callq	0
1408 :   %843 = load i64* %RDX_val, !mcsema_real_eip !133 :          <27b>	callq	0
1409 :   %844 = tail call x86_64_sysvcc i64 @read_bytes(i64 %842, i64 %828, i64 %843), !mcsema_real_eip !133 :          <27b>	callq	0
1410 :   store i64 %844, i64* %RAX_val, !mcsema_real_eip !133 :          <27b>	callq	0

1411 :   %845 = load i64* %RBP_val, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)
1412 :   %846 = add i64 %845, -44, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)
1413 :   %847 = inttoptr i64 %846 to i64*, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)
1414 :   %848 = trunc i64 %844 to i32, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)

1415 :   %849 = bitcast i64* %847 to i32* : NIL

1416 :   store i32 %848, i32* %849, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)

1417 :   %850 = load i64* %RBP_val, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax
1418 :   %851 = add i64 %850, -44, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax
1419 :   %852 = inttoptr i64 %851 to i64*, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax

1420 :   %853 = bitcast i64* %852 to i32* : NIL

1421 :   %854 = load i32* %853, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax

1422 :   %855 = xor i32 %854, -1534560611, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1423 :   store i1 false, i1* %CF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1424 :   store i1 false, i1* %OF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1425 :   %856 = icmp sgt i32 %854, -1 : NIL

1426 :   store i1 %856, i1* %SF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1427 :   %857 = icmp eq i32 %854, -1534560611 : NIL

1428 :   store i1 %857, i1* %ZF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1429 :   %858 = trunc i32 %855 to i8, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1430 :   %859 = tail call i8 @llvm.ctpop.i8(i8 %858), !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1431 :   %860 = and i8 %859, 1 : NIL
1432 :   %861 = icmp eq i8 %860, 0 : NIL

1433 :   store i1 %861, i1* %PF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1434 :   %862 = zext i32 %855 to i64, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1435 :   store i64 %862, i64* %RAX_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1436 :   %863 = load i64* %RBP_val, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)
1437 :   %864 = add i64 %863, -48, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)
1438 :   %865 = inttoptr i64 %864 to i64*, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)

1439 :   %866 = bitcast i64* %865 to i32* : NIL

1440 :   store i32 %855, i32* %866, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)

1441 :   %867 = load i64* %RBP_val, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax
1442 :   %868 = add i64 %867, -48, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax
1443 :   %869 = inttoptr i64 %868 to i64*, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax

1444 :   %870 = bitcast i64* %869 to i32* : NIL

1445 :   %871 = load i32* %870, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax

1446 :   %872 = and i32 %871, 32768, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1447 :   %873 = icmp ne i32 %872, 0, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax

1448 :   %874 = lshr i32 %871, 16 : NIL

1449 :   store i1 %873, i1* %CF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1450 :   %875 = icmp eq i32 %874, 0, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1451 :   store i1 %875, i1* %ZF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1452 :   store i1 false, i1* %SF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1453 :   %876 = trunc i32 %874 to i8, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1454 :   %877 = tail call i8 @llvm.ctpop.i8(i8 %876), !mcsema_real_eip !139 :          <291>	shrl	$16, %eax

1455 :   %878 = and i8 %877, 1 : NIL
1456 :   %879 = icmp eq i8 %878, 0 : NIL

1457 :   store i1 %879, i1* %PF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1458 :   %880 = zext i32 %874 to i64, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1459 :   store i64 %880, i64* %RAX_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax

1460 :   %881 = load i64* %RBP_val, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)
1461 :   %882 = add i64 %881, -52, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)
1462 :   %883 = inttoptr i64 %882 to i64*, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)

1463 :   %884 = bitcast i64* %883 to i32* : NIL

1464 :   store i32 %874, i32* %884, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)

1465 :   %885 = load i64* %RBP_val, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax
1466 :   %886 = add i64 %885, -48, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax
1467 :   %887 = inttoptr i64 %886 to i64*, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax

1468 :   %888 = bitcast i64* %887 to i32* : NIL

1469 :   %889 = load i32* %888, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax

1470 :   %890 = and i32 %889, 65535, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1471 :   store i1 false, i1* %SF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1472 :   %891 = icmp eq i32 %890, 0, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1473 :   store i1 %891, i1* %ZF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1474 :   %892 = trunc i32 %889 to i8, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1475 :   %893 = tail call i8 @llvm.ctpop.i8(i8 %892), !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax

1476 :   %894 = and i8 %893, 1 : NIL
1477 :   %895 = icmp eq i8 %894, 0 : NIL

1478 :   store i1 %895, i1* %PF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1479 :   store i1 false, i1* %OF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1480 :   store i1 false, i1* %CF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1481 :   %896 = zext i32 %890 to i64, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1482 :   store i64 %896, i64* %RAX_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax

1483 :   %897 = load i64* %RBP_val, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)
1484 :   %898 = add i64 %897, -56, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)
1485 :   %899 = inttoptr i64 %898 to i64*, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)

1486 :   %900 = bitcast i64* %899 to i32* : NIL

1487 :   store i32 %890, i32* %900, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)

1488 :   %901 = load i64* %RBP_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1489 :   %902 = add i64 %901, -52, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1490 :   %903 = inttoptr i64 %902 to i64*, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1491 :   %904 = bitcast i64* %903 to i32* : NIL

1492 :   %905 = load i32* %904, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1493 :   %906 = add i32 %905, -20299 : NIL

1494 :   %907 = xor i32 %906, %905, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1495 :   %908 = and i32 %907, 16, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1496 :   %909 = icmp ne i32 %908, 0, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1497 :   store i1 %909, i1* %AF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1498 :   %910 = trunc i32 %906 to i8, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1499 :   %911 = tail call i8 @llvm.ctpop.i8(i8 %910), !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1500 :   %912 = and i8 %911, 1 : NIL
1501 :   %913 = icmp eq i8 %912, 0 : NIL

1502 :   store i1 %913, i1* %PF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1503 :   %914 = icmp eq i32 %906, 0, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1504 :   store i1 %914, i1* %ZF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1505 :   %915 = icmp slt i32 %906, 0 : NIL

1506 :   store i1 %915, i1* %SF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1507 :   %916 = icmp ult i32 %905, 20299, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1508 :   store i1 %916, i1* %CF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1509 :   %917 = and i32 %907, %905, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1510 :   %918 = icmp slt i32 %917, 0 : NIL

1511 :   store i1 %918, i1* %OF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1512 :   %919 = load i1* %ZF_val, !mcsema_real_eip !145 :          <2a9>	jne	24
1513 :   br i1 %919, label %block_0x2af, label %block_0x2c7, !mcsema_real_eip !145 :          <2a9>	jne	24

1514 :   %920 = load i64* %RBP_val, !mcsema_real_eip !146 :          <23d>	movzwl	-38(%rbp), %eax
1515 :   %921 = add i64 %920, -38, !mcsema_real_eip !146 :          <23d>	movzwl	-38(%rbp), %eax
1516 :   %922 = inttoptr i64 %921 to i64*, !mcsema_real_eip !146 :          <23d>	movzwl	-38(%rbp), %eax

1517 :   %923 = bitcast i64* %922 to i16* : NIL

1518 :   %924 = load i16* %923, !mcsema_real_eip !146 :          <23d>	movzwl	-38(%rbp), %eax

1519 :   %925 = zext i16 %924 to i32 : NIL

1520 :   %926 = or i32 %925, 43690, !mcsema_real_eip !147 :          <241>	orl	$43690, %eax
1521 :   %927 = zext i32 %926 to i64, !mcsema_real_eip !147 :          <241>	orl	$43690, %eax
1522 :   store i64 %927, i64* %RAX_val, !mcsema_real_eip !147 :          <241>	orl	$43690, %eax

1523 :   %928 = add nsw i32 %926, -65211 : NIL

1524 :   %929 = xor i32 %928, %925, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax

1525 :   %930 = and i32 %929, 16 : NIL
1526 :   %931 = icmp eq i32 %930, 0 : NIL

1527 :   store i1 %931, i1* %AF_val, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1528 :   %932 = trunc i32 %928 to i8, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1529 :   %933 = tail call i8 @llvm.ctpop.i8(i8 %932), !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax

1530 :   %934 = and i8 %933, 1 : NIL
1531 :   %935 = icmp eq i8 %934, 0 : NIL

1532 :   store i1 %935, i1* %PF_val, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1533 :   %936 = icmp eq i32 %928, 0, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1534 :   store i1 %936, i1* %ZF_val, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax

1535 :   %937 = icmp slt i32 %928, 0 : NIL

1536 :   store i1 %937, i1* %SF_val, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1537 :   %938 = icmp ult i32 %926, 65211, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1538 :   store i1 %938, i1* %CF_val, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax
1539 :   store i1 false, i1* %OF_val, !mcsema_real_eip !148 :          <246>	cmpl	$65211, %eax

1540 :   br i1 %936, label %block_0x251, label %block_0x25d, !mcsema_real_eip !149 :          <24b>	jne	12

1541 :   %939 = load i64* %RBP_val, !mcsema_real_eip !150 :          <251>	movl	$43690, -20(%rbp)
1542 :   %940 = add i64 %939, -20, !mcsema_real_eip !150 :          <251>	movl	$43690, -20(%rbp)
1543 :   %941 = inttoptr i64 %940 to i64*, !mcsema_real_eip !150 :          <251>	movl	$43690, -20(%rbp)

1544 :   %942 = bitcast i64* %941 to i32* : NIL

1545 :   store i32 43690, i32* %942, !mcsema_real_eip !150 :          <251>	movl	$43690, -20(%rbp)

1546 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !128 :          <264>	movl	$0, %edi

1547 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !129 :          <269>	movl	$8, %edx

1548 :   %943 = load i64* %RBP_val, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax
1549 :   %944 = add i64 %943, -16, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax
1550 :   %945 = inttoptr i64 %944 to i64*, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax
1551 :   %946 = load i64* %945, !mcsema_real_eip !130 :          <26e>	movq	-16(%rbp), %rax

1552 :   %uadd143 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %946, i64 12) : NIL
1553 :   %947 = extractvalue { i64, i1 } %uadd143, 0 : NIL

1554 :   %948 = xor i64 %947, %946, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1555 :   %949 = and i64 %948, 16, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1556 :   %950 = icmp ne i64 %949, 0, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1557 :   store i1 %950, i1* %AF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1558 :   %951 = icmp slt i64 %947, 0 : NIL

1559 :   store i1 %951, i1* %SF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1560 :   %952 = icmp eq i64 %947, 0, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1561 :   store i1 %952, i1* %ZF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1562 :   %953 = xor i64 %946, -9223372036854775808, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1563 :   %954 = and i64 %948, %953, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1564 :   %955 = icmp slt i64 %954, 0 : NIL

1565 :   store i1 %955, i1* %OF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1566 :   %956 = trunc i64 %947 to i8, !mcsema_real_eip !131 :          <272>	addq	$12, %rax
1567 :   %957 = tail call i8 @llvm.ctpop.i8(i8 %956), !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1568 :   %958 = and i8 %957, 1 : NIL
1569 :   %959 = icmp eq i8 %958, 0 : NIL

1570 :   store i1 %959, i1* %PF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1571 :   %960 = extractvalue { i64, i1 } %uadd143, 1 : NIL

1572 :   store i1 %960, i1* %CF_val, !mcsema_real_eip !131 :          <272>	addq	$12, %rax

1573 :   store i64 %947, i64* %RSI_val, !mcsema_real_eip !132 :          <278>	movq	%rax, %rsi

1574 :   %961 = load i64* %RDI_val, !mcsema_real_eip !133 :          <27b>	callq	0
1575 :   %962 = load i64* %RDX_val, !mcsema_real_eip !133 :          <27b>	callq	0
1576 :   %963 = tail call x86_64_sysvcc i64 @read_bytes(i64 %961, i64 %947, i64 %962), !mcsema_real_eip !133 :          <27b>	callq	0
1577 :   store i64 %963, i64* %RAX_val, !mcsema_real_eip !133 :          <27b>	callq	0

1578 :   %964 = load i64* %RBP_val, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)
1579 :   %965 = add i64 %964, -44, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)
1580 :   %966 = inttoptr i64 %965 to i64*, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)
1581 :   %967 = trunc i64 %963 to i32, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)

1582 :   %968 = bitcast i64* %966 to i32* : NIL

1583 :   store i32 %967, i32* %968, !mcsema_real_eip !134 :          <280>	movl	%eax, -44(%rbp)

1584 :   %969 = load i64* %RBP_val, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax
1585 :   %970 = add i64 %969, -44, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax
1586 :   %971 = inttoptr i64 %970 to i64*, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax

1587 :   %972 = bitcast i64* %971 to i32* : NIL

1588 :   %973 = load i32* %972, !mcsema_real_eip !135 :          <283>	movl	-44(%rbp), %eax

1589 :   %974 = xor i32 %973, -1534560611, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1590 :   store i1 false, i1* %CF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1591 :   store i1 false, i1* %OF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1592 :   %975 = icmp sgt i32 %973, -1 : NIL

1593 :   store i1 %975, i1* %SF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1594 :   %976 = icmp eq i32 %973, -1534560611 : NIL

1595 :   store i1 %976, i1* %ZF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1596 :   %977 = trunc i32 %974 to i8, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1597 :   %978 = tail call i8 @llvm.ctpop.i8(i8 %977), !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1598 :   %979 = and i8 %978, 1 : NIL
1599 :   %980 = icmp eq i8 %979, 0 : NIL

1600 :   store i1 %980, i1* %PF_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1601 :   %981 = zext i32 %974 to i64, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax
1602 :   store i64 %981, i64* %RAX_val, !mcsema_real_eip !136 :          <286>	xorl	$2760406685, %eax

1603 :   %982 = load i64* %RBP_val, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)
1604 :   %983 = add i64 %982, -48, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)
1605 :   %984 = inttoptr i64 %983 to i64*, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)

1606 :   %985 = bitcast i64* %984 to i32* : NIL

1607 :   store i32 %974, i32* %985, !mcsema_real_eip !137 :          <28b>	movl	%eax, -48(%rbp)

1608 :   %986 = load i64* %RBP_val, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax
1609 :   %987 = add i64 %986, -48, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax
1610 :   %988 = inttoptr i64 %987 to i64*, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax

1611 :   %989 = bitcast i64* %988 to i32* : NIL

1612 :   %990 = load i32* %989, !mcsema_real_eip !138 :          <28e>	movl	-48(%rbp), %eax

1613 :   %991 = and i32 %990, 32768, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1614 :   %992 = icmp ne i32 %991, 0, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax

1615 :   %993 = lshr i32 %990, 16 : NIL

1616 :   store i1 %992, i1* %CF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1617 :   %994 = icmp eq i32 %993, 0, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1618 :   store i1 %994, i1* %ZF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1619 :   store i1 false, i1* %SF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1620 :   %995 = trunc i32 %993 to i8, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1621 :   %996 = tail call i8 @llvm.ctpop.i8(i8 %995), !mcsema_real_eip !139 :          <291>	shrl	$16, %eax

1622 :   %997 = and i8 %996, 1 : NIL
1623 :   %998 = icmp eq i8 %997, 0 : NIL

1624 :   store i1 %998, i1* %PF_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1625 :   %999 = zext i32 %993 to i64, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax
1626 :   store i64 %999, i64* %RAX_val, !mcsema_real_eip !139 :          <291>	shrl	$16, %eax

1627 :   %1000 = load i64* %RBP_val, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)
1628 :   %1001 = add i64 %1000, -52, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)
1629 :   %1002 = inttoptr i64 %1001 to i64*, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)

1630 :   %1003 = bitcast i64* %1002 to i32* : NIL

1631 :   store i32 %993, i32* %1003, !mcsema_real_eip !140 :          <294>	movl	%eax, -52(%rbp)

1632 :   %1004 = load i64* %RBP_val, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax
1633 :   %1005 = add i64 %1004, -48, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax
1634 :   %1006 = inttoptr i64 %1005 to i64*, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax

1635 :   %1007 = bitcast i64* %1006 to i32* : NIL

1636 :   %1008 = load i32* %1007, !mcsema_real_eip !141 :          <297>	movl	-48(%rbp), %eax

1637 :   %1009 = and i32 %1008, 65535, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1638 :   store i1 false, i1* %SF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1639 :   %1010 = icmp eq i32 %1009, 0, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1640 :   store i1 %1010, i1* %ZF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1641 :   %1011 = trunc i32 %1008 to i8, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1642 :   %1012 = tail call i8 @llvm.ctpop.i8(i8 %1011), !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax

1643 :   %1013 = and i8 %1012, 1 : NIL
1644 :   %1014 = icmp eq i8 %1013, 0 : NIL

1645 :   store i1 %1014, i1* %PF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1646 :   store i1 false, i1* %OF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1647 :   store i1 false, i1* %CF_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1648 :   %1015 = zext i32 %1009 to i64, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax
1649 :   store i64 %1015, i64* %RAX_val, !mcsema_real_eip !142 :          <29a>	andl	$65535, %eax

1650 :   %1016 = load i64* %RBP_val, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)
1651 :   %1017 = add i64 %1016, -56, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)
1652 :   %1018 = inttoptr i64 %1017 to i64*, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)

1653 :   %1019 = bitcast i64* %1018 to i32* : NIL

1654 :   store i32 %1009, i32* %1019, !mcsema_real_eip !143 :          <29f>	movl	%eax, -56(%rbp)

1655 :   %1020 = load i64* %RBP_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1656 :   %1021 = add i64 %1020, -52, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1657 :   %1022 = inttoptr i64 %1021 to i64*, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1658 :   %1023 = bitcast i64* %1022 to i32* : NIL

1659 :   %1024 = load i32* %1023, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1660 :   %1025 = add i32 %1024, -20299 : NIL

1661 :   %1026 = xor i32 %1025, %1024, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1662 :   %1027 = and i32 %1026, 16, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1663 :   %1028 = icmp ne i32 %1027, 0, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1664 :   store i1 %1028, i1* %AF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1665 :   %1029 = trunc i32 %1025 to i8, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1666 :   %1030 = tail call i8 @llvm.ctpop.i8(i8 %1029), !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1667 :   %1031 = and i8 %1030, 1 : NIL
1668 :   %1032 = icmp eq i8 %1031, 0 : NIL

1669 :   store i1 %1032, i1* %PF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1670 :   %1033 = icmp eq i32 %1025, 0, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1671 :   store i1 %1033, i1* %ZF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1672 :   %1034 = icmp slt i32 %1025, 0 : NIL

1673 :   store i1 %1034, i1* %SF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1674 :   %1035 = icmp ult i32 %1024, 20299, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1675 :   store i1 %1035, i1* %CF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)
1676 :   %1036 = and i32 %1026, %1024, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1677 :   %1037 = icmp slt i32 %1036, 0 : NIL

1678 :   store i1 %1037, i1* %OF_val, !mcsema_real_eip !144 :          <2a2>	cmpl	$20299, -52(%rbp)

1679 :   %1038 = load i1* %ZF_val, !mcsema_real_eip !145 :          <2a9>	jne	24
1680 :   br i1 %1038, label %block_0x2af, label %block_0x2c7, !mcsema_real_eip !145 :          <2a9>	jne	24

1681 :   %1039 = load i64* %RBP_val, !mcsema_real_eip !151 :          <2c7>	movl	$48351, -20(%rbp)
1682 :   %1040 = add i64 %1039, -20, !mcsema_real_eip !151 :          <2c7>	movl	$48351, -20(%rbp)
1683 :   %1041 = inttoptr i64 %1040 to i64*, !mcsema_real_eip !151 :          <2c7>	movl	$48351, -20(%rbp)

1684 :   %1042 = bitcast i64* %1041 to i32* : NIL

1685 :   store i32 48351, i32* %1042, !mcsema_real_eip !151 :          <2c7>	movl	$48351, -20(%rbp)

1686 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !152 :          <2ce>	movl	$8, %edx

1687 :   %1043 = load i64* %RBP_val, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1688 :   %1044 = add i64 %1043, -20, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1689 :   %1045 = inttoptr i64 %1044 to i64*, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi

1690 :   %1046 = bitcast i64* %1045 to i32* : NIL

1691 :   %1047 = load i32* %1046, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1692 :   %1048 = zext i32 %1047 to i64, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1693 :   store i64 %1048, i64* %RDI_val, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi

1694 :   %1049 = load i64* %RBP_val, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax
1695 :   %1050 = add i64 %1049, -16, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax
1696 :   %1051 = inttoptr i64 %1050 to i64*, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax
1697 :   %1052 = load i64* %1051, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax

1698 :   %uadd149 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1052, i64 20) : NIL
1699 :   %1053 = extractvalue { i64, i1 } %uadd149, 0 : NIL

1700 :   %1054 = xor i64 %1053, %1052, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1701 :   %1055 = and i64 %1054, 16 : NIL
1702 :   %1056 = icmp eq i64 %1055, 0 : NIL

1703 :   store i1 %1056, i1* %AF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1704 :   %1057 = icmp slt i64 %1053, 0 : NIL

1705 :   store i1 %1057, i1* %SF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1706 :   %1058 = icmp eq i64 %1053, 0, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1707 :   store i1 %1058, i1* %ZF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1708 :   %1059 = xor i64 %1052, -9223372036854775808, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1709 :   %1060 = and i64 %1054, %1059, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1710 :   %1061 = icmp slt i64 %1060, 0 : NIL

1711 :   store i1 %1061, i1* %OF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1712 :   %1062 = trunc i64 %1053 to i8, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1713 :   %1063 = tail call i8 @llvm.ctpop.i8(i8 %1062), !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1714 :   %1064 = and i8 %1063, 1 : NIL
1715 :   %1065 = icmp eq i8 %1064, 0 : NIL

1716 :   store i1 %1065, i1* %PF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1717 :   %1066 = extractvalue { i64, i1 } %uadd149, 1 : NIL

1718 :   store i1 %1066, i1* %CF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1719 :   store i64 %1053, i64* %RSI_val, !mcsema_real_eip !156 :          <2e0>	movq	%rax, %rsi

1720 :   %1067 = load i64* %RDI_val, !mcsema_real_eip !157 :          <2e3>	callq	0
1721 :   %1068 = load i64* %RDX_val, !mcsema_real_eip !157 :          <2e3>	callq	0
1722 :   %1069 = tail call x86_64_sysvcc i64 @read_bytes(i64 %1067, i64 %1053, i64 %1068), !mcsema_real_eip !157 :          <2e3>	callq	0
1723 :   store i64 %1069, i64* %RAX_val, !mcsema_real_eip !157 :          <2e3>	callq	0

1724 :   %1070 = load i64* %RBP_val, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)
1725 :   %1071 = add i64 %1070, -60, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)
1726 :   %1072 = inttoptr i64 %1071 to i64*, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)
1727 :   %1073 = trunc i64 %1069 to i32, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)

1728 :   %1074 = bitcast i64* %1072 to i32* : NIL

1729 :   store i32 %1073, i32* %1074, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)

1730 :   %1075 = load i64* %RBP_val, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax
1731 :   %1076 = add i64 %1075, -60, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax
1732 :   %1077 = inttoptr i64 %1076 to i64*, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax

1733 :   %1078 = bitcast i64* %1077 to i32* : NIL

1734 :   %1079 = load i32* %1078, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax

1735 :   %1080 = add i32 %1079, -3 : NIL

1736 :   %1081 = xor i32 %1080, %1079, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1737 :   %1082 = and i32 %1081, 16, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1738 :   %1083 = icmp ne i32 %1082, 0, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1739 :   store i1 %1083, i1* %AF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1740 :   %1084 = trunc i32 %1080 to i8, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1741 :   %1085 = tail call i8 @llvm.ctpop.i8(i8 %1084), !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1742 :   %1086 = and i8 %1085, 1 : NIL
1743 :   %1087 = icmp eq i8 %1086, 0 : NIL

1744 :   store i1 %1087, i1* %PF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1745 :   %1088 = icmp eq i32 %1080, 0, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1746 :   store i1 %1088, i1* %ZF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1747 :   %1089 = icmp slt i32 %1080, 0 : NIL

1748 :   store i1 %1089, i1* %SF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1749 :   %1090 = icmp ult i32 %1079, 3, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1750 :   store i1 %1090, i1* %CF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1751 :   %1091 = and i32 %1081, %1079, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1752 :   %1092 = icmp slt i32 %1091, 0 : NIL

1753 :   store i1 %1092, i1* %OF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1754 :   %1093 = zext i32 %1080 to i64, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1755 :   store i64 %1093, i64* %RAX_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1756 :   %1094 = load i64* %RBP_val, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)
1757 :   %1095 = add i64 %1094, -60, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)
1758 :   %1096 = inttoptr i64 %1095 to i64*, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)

1759 :   %1097 = bitcast i64* %1096 to i32* : NIL

1760 :   store i32 %1080, i32* %1097, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)

1761 :   %1098 = load i64* %RBP_val, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax
1762 :   %1099 = add i64 %1098, -60, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax
1763 :   %1100 = inttoptr i64 %1099 to i64*, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax

1764 :   %1101 = bitcast i64* %1100 to i32* : NIL

1765 :   %1102 = load i32* %1101, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax

1766 :   %1103 = and i32 %1102, 7, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1767 :   %1104 = icmp eq i32 %1103, 0, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1768 :   %1105 = trunc i32 %1103 to i8, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1769 :   %1106 = tail call i8 @llvm.ctpop.i8(i8 %1105), !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax

1770 :   %1107 = and i8 %1106, 1 : NIL
1771 :   %1108 = icmp eq i8 %1107, 0 : NIL

1772 :   %1109 = zext i32 %1103 to i64, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1773 :   store i64 %1109, i64* %RAX_val, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax

1774 :   store i1 false, i1* %AF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1775 :   store i1 %1108, i1* %PF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1776 :   store i1 %1104, i1* %ZF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1777 :   store i1 false, i1* %SF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1778 :   store i1 false, i1* %CF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1779 :   store i1 false, i1* %OF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax

1780 :   br i1 %1104, label %block_0x315, label %block_0x309, !mcsema_real_eip !165 :          <303>	je	12

1781 :   %1110 = load i64* %RBP_val, !mcsema_real_eip !166 :          <2af>	movl	-56(%rbp), %eax
1782 :   %1111 = add i64 %1110, -56, !mcsema_real_eip !166 :          <2af>	movl	-56(%rbp), %eax
1783 :   %1112 = inttoptr i64 %1111 to i64*, !mcsema_real_eip !166 :          <2af>	movl	-56(%rbp), %eax

1784 :   %1113 = bitcast i64* %1112 to i32* : NIL

1785 :   %1114 = load i32* %1113, !mcsema_real_eip !166 :          <2af>	movl	-56(%rbp), %eax
1786 :   %1115 = zext i32 %1114 to i64, !mcsema_real_eip !166 :          <2af>	movl	-56(%rbp), %eax
1787 :   store i64 %1115, i64* %RAX_val, !mcsema_real_eip !166 :          <2af>	movl	-56(%rbp), %eax

1788 :   %1116 = load i64* %RBP_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1789 :   %1117 = add i64 %1116, -20, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1790 :   %1118 = inttoptr i64 %1117 to i64*, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax

1791 :   %1119 = bitcast i64* %1118 to i32* : NIL

1792 :   %1120 = load i32* %1119, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1793 :   %1121 = sub i32 %1114, %1120, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1794 :   %1122 = xor i32 %1121, %1114, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1795 :   %1123 = xor i32 %1122, %1120, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1796 :   %1124 = and i32 %1123, 16, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1797 :   %1125 = icmp ne i32 %1124, 0, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1798 :   store i1 %1125, i1* %AF_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1799 :   %1126 = trunc i32 %1121 to i8, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1800 :   %1127 = tail call i8 @llvm.ctpop.i8(i8 %1126), !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax

1801 :   %1128 = and i8 %1127, 1 : NIL
1802 :   %1129 = icmp eq i8 %1128, 0 : NIL

1803 :   store i1 %1129, i1* %PF_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax

1804 :   %1130 = icmp eq i32 %1114, %1120 : NIL

1805 :   store i1 %1130, i1* %ZF_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax

1806 :   %1131 = icmp slt i32 %1121, 0 : NIL

1807 :   store i1 %1131, i1* %SF_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1808 :   %1132 = icmp ult i32 %1114, %1120, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1809 :   store i1 %1132, i1* %CF_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1810 :   %1133 = xor i32 %1120, %1114, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax
1811 :   %1134 = and i32 %1122, %1133, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax

1812 :   %1135 = icmp slt i32 %1134, 0 : NIL

1813 :   store i1 %1135, i1* %OF_val, !mcsema_real_eip !167 :          <2b2>	cmpl	-20(%rbp), %eax

1814 :   %1136 = load i1* %ZF_val, !mcsema_real_eip !168 :          <2b5>	jne	12
1815 :   br i1 %1136, label %block_0x2bb, label %block_0x2c7, !mcsema_real_eip !168 :          <2b5>	jne	12

1816 :   %1137 = load i64* %RBP_val, !mcsema_real_eip !169 :          <2bb>	movl	$0, -20(%rbp)
1817 :   %1138 = add i64 %1137, -20, !mcsema_real_eip !169 :          <2bb>	movl	$0, -20(%rbp)
1818 :   %1139 = inttoptr i64 %1138 to i64*, !mcsema_real_eip !169 :          <2bb>	movl	$0, -20(%rbp)

1819 :   %1140 = bitcast i64* %1139 to i32* : NIL

1820 :   store i32 0, i32* %1140, !mcsema_real_eip !169 :          <2bb>	movl	$0, -20(%rbp)

1821 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !152 :          <2ce>	movl	$8, %edx

1822 :   %1141 = load i64* %RBP_val, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1823 :   %1142 = add i64 %1141, -20, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1824 :   %1143 = inttoptr i64 %1142 to i64*, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi

1825 :   %1144 = bitcast i64* %1143 to i32* : NIL

1826 :   %1145 = load i32* %1144, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1827 :   %1146 = zext i32 %1145 to i64, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi
1828 :   store i64 %1146, i64* %RDI_val, !mcsema_real_eip !153 :          <2d3>	movl	-20(%rbp), %edi

1829 :   %1147 = load i64* %RBP_val, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax
1830 :   %1148 = add i64 %1147, -16, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax
1831 :   %1149 = inttoptr i64 %1148 to i64*, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax
1832 :   %1150 = load i64* %1149, !mcsema_real_eip !154 :          <2d6>	movq	-16(%rbp), %rax

1833 :   %uadd144 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1150, i64 20) : NIL
1834 :   %1151 = extractvalue { i64, i1 } %uadd144, 0 : NIL

1835 :   %1152 = xor i64 %1151, %1150, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1836 :   %1153 = and i64 %1152, 16 : NIL
1837 :   %1154 = icmp eq i64 %1153, 0 : NIL

1838 :   store i1 %1154, i1* %AF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1839 :   %1155 = icmp slt i64 %1151, 0 : NIL

1840 :   store i1 %1155, i1* %SF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1841 :   %1156 = icmp eq i64 %1151, 0, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1842 :   store i1 %1156, i1* %ZF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1843 :   %1157 = xor i64 %1150, -9223372036854775808, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1844 :   %1158 = and i64 %1152, %1157, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1845 :   %1159 = icmp slt i64 %1158, 0 : NIL

1846 :   store i1 %1159, i1* %OF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1847 :   %1160 = trunc i64 %1151 to i8, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax
1848 :   %1161 = tail call i8 @llvm.ctpop.i8(i8 %1160), !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1849 :   %1162 = and i8 %1161, 1 : NIL
1850 :   %1163 = icmp eq i8 %1162, 0 : NIL

1851 :   store i1 %1163, i1* %PF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1852 :   %1164 = extractvalue { i64, i1 } %uadd144, 1 : NIL

1853 :   store i1 %1164, i1* %CF_val, !mcsema_real_eip !155 :          <2da>	addq	$20, %rax

1854 :   store i64 %1151, i64* %RSI_val, !mcsema_real_eip !156 :          <2e0>	movq	%rax, %rsi

1855 :   %1165 = load i64* %RDI_val, !mcsema_real_eip !157 :          <2e3>	callq	0
1856 :   %1166 = load i64* %RDX_val, !mcsema_real_eip !157 :          <2e3>	callq	0
1857 :   %1167 = tail call x86_64_sysvcc i64 @read_bytes(i64 %1165, i64 %1151, i64 %1166), !mcsema_real_eip !157 :          <2e3>	callq	0
1858 :   store i64 %1167, i64* %RAX_val, !mcsema_real_eip !157 :          <2e3>	callq	0

1859 :   %1168 = load i64* %RBP_val, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)
1860 :   %1169 = add i64 %1168, -60, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)
1861 :   %1170 = inttoptr i64 %1169 to i64*, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)
1862 :   %1171 = trunc i64 %1167 to i32, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)

1863 :   %1172 = bitcast i64* %1170 to i32* : NIL

1864 :   store i32 %1171, i32* %1172, !mcsema_real_eip !158 :          <2e8>	movl	%eax, -60(%rbp)

1865 :   %1173 = load i64* %RBP_val, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax
1866 :   %1174 = add i64 %1173, -60, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax
1867 :   %1175 = inttoptr i64 %1174 to i64*, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax

1868 :   %1176 = bitcast i64* %1175 to i32* : NIL

1869 :   %1177 = load i32* %1176, !mcsema_real_eip !159 :          <2eb>	movl	-60(%rbp), %eax

1870 :   %1178 = add i32 %1177, -3 : NIL

1871 :   %1179 = xor i32 %1178, %1177, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1872 :   %1180 = and i32 %1179, 16, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1873 :   %1181 = icmp ne i32 %1180, 0, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1874 :   store i1 %1181, i1* %AF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1875 :   %1182 = trunc i32 %1178 to i8, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1876 :   %1183 = tail call i8 @llvm.ctpop.i8(i8 %1182), !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1877 :   %1184 = and i8 %1183, 1 : NIL
1878 :   %1185 = icmp eq i8 %1184, 0 : NIL

1879 :   store i1 %1185, i1* %PF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1880 :   %1186 = icmp eq i32 %1178, 0, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1881 :   store i1 %1186, i1* %ZF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1882 :   %1187 = icmp slt i32 %1178, 0 : NIL

1883 :   store i1 %1187, i1* %SF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1884 :   %1188 = icmp ult i32 %1177, 3, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1885 :   store i1 %1188, i1* %CF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1886 :   %1189 = and i32 %1179, %1177, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1887 :   %1190 = icmp slt i32 %1189, 0 : NIL

1888 :   store i1 %1190, i1* %OF_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1889 :   %1191 = zext i32 %1178 to i64, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax
1890 :   store i64 %1191, i64* %RAX_val, !mcsema_real_eip !160 :          <2ee>	subl	$3, %eax

1891 :   %1192 = load i64* %RBP_val, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)
1892 :   %1193 = add i64 %1192, -60, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)
1893 :   %1194 = inttoptr i64 %1193 to i64*, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)

1894 :   %1195 = bitcast i64* %1194 to i32* : NIL

1895 :   store i32 %1178, i32* %1195, !mcsema_real_eip !161 :          <2f3>	movl	%eax, -60(%rbp)

1896 :   %1196 = load i64* %RBP_val, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax
1897 :   %1197 = add i64 %1196, -60, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax
1898 :   %1198 = inttoptr i64 %1197 to i64*, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax

1899 :   %1199 = bitcast i64* %1198 to i32* : NIL

1900 :   %1200 = load i32* %1199, !mcsema_real_eip !162 :          <2f6>	movl	-60(%rbp), %eax

1901 :   %1201 = and i32 %1200, 7, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1902 :   %1202 = icmp eq i32 %1201, 0, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1903 :   %1203 = trunc i32 %1201 to i8, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1904 :   %1204 = tail call i8 @llvm.ctpop.i8(i8 %1203), !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax

1905 :   %1205 = and i8 %1204, 1 : NIL
1906 :   %1206 = icmp eq i8 %1205, 0 : NIL

1907 :   %1207 = zext i32 %1201 to i64, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax
1908 :   store i64 %1207, i64* %RAX_val, !mcsema_real_eip !163 :          <2f9>	andl	$7, %eax

1909 :   store i1 false, i1* %AF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1910 :   store i1 %1206, i1* %PF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1911 :   store i1 %1202, i1* %ZF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1912 :   store i1 false, i1* %SF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1913 :   store i1 false, i1* %CF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax
1914 :   store i1 false, i1* %OF_val, !mcsema_real_eip !164 :          <2fe>	cmpl	$0, %eax

1915 :   br i1 %1202, label %block_0x315, label %block_0x309, !mcsema_real_eip !165 :          <303>	je	12

1916 :   %1208 = load i64* %RBP_val, !mcsema_real_eip !170 :          <315>	movl	-60(%rbp), %eax
1917 :   %1209 = add i64 %1208, -60, !mcsema_real_eip !170 :          <315>	movl	-60(%rbp), %eax
1918 :   %1210 = inttoptr i64 %1209 to i64*, !mcsema_real_eip !170 :          <315>	movl	-60(%rbp), %eax

1919 :   %1211 = bitcast i64* %1210 to i32* : NIL

1920 :   %1212 = load i32* %1211, !mcsema_real_eip !170 :          <315>	movl	-60(%rbp), %eax

1921 :   %1213 = xor i32 %1212, -2147483648 : NIL

1922 :   store i1 false, i1* %AF_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax
1923 :   %1214 = trunc i32 %1212 to i8, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax
1924 :   %1215 = tail call i8 @llvm.ctpop.i8(i8 %1214), !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax

1925 :   %1216 = and i8 %1215, 1 : NIL
1926 :   %1217 = icmp eq i8 %1216, 0 : NIL

1927 :   store i1 %1217, i1* %PF_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax

1928 :   %1218 = icmp eq i32 %1212, -2147483648 : NIL

1929 :   store i1 %1218, i1* %ZF_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax

1930 :   %1219 = icmp sgt i32 %1212, -1 : NIL

1931 :   store i1 %1219, i1* %SF_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax
1932 :   store i1 %1219, i1* %CF_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax
1933 :   store i1 %1219, i1* %OF_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax
1934 :   %1220 = zext i32 %1213 to i64, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax
1935 :   store i64 %1220, i64* %RAX_val, !mcsema_real_eip !171 :          <318>	subl	$2147483648, %eax

1936 :   %1221 = load i64* %RBP_val, !mcsema_real_eip !172 :          <31d>	movl	%eax, -60(%rbp)
1937 :   %1222 = add i64 %1221, -60, !mcsema_real_eip !172 :          <31d>	movl	%eax, -60(%rbp)
1938 :   %1223 = inttoptr i64 %1222 to i64*, !mcsema_real_eip !172 :          <31d>	movl	%eax, -60(%rbp)

1939 :   %1224 = bitcast i64* %1223 to i32* : NIL

1940 :   store i32 %1213, i32* %1224, !mcsema_real_eip !172 :          <31d>	movl	%eax, -60(%rbp)

1941 :   %1225 = load i64* %RBP_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1942 :   %1226 = add i64 %1225, -60, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1943 :   %1227 = inttoptr i64 %1226 to i64*, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1944 :   %1228 = bitcast i64* %1227 to i32* : NIL

1945 :   %1229 = load i32* %1228, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1946 :   %1230 = add i32 %1229, -268435455 : NIL

1947 :   %1231 = xor i32 %1230, %1229, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1948 :   %1232 = and i32 %1231, 16 : NIL
1949 :   %1233 = icmp eq i32 %1232, 0 : NIL

1950 :   store i1 %1233, i1* %AF_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1951 :   %1234 = trunc i32 %1230 to i8, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1952 :   %1235 = tail call i8 @llvm.ctpop.i8(i8 %1234), !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1953 :   %1236 = and i8 %1235, 1 : NIL
1954 :   %1237 = icmp eq i8 %1236, 0 : NIL

1955 :   store i1 %1237, i1* %PF_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1956 :   %1238 = icmp eq i32 %1230, 0, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1957 :   store i1 %1238, i1* %ZF_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1958 :   %1239 = icmp slt i32 %1230, 0 : NIL

1959 :   store i1 %1239, i1* %SF_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1960 :   %1240 = icmp ult i32 %1229, 268435455, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1961 :   store i1 %1240, i1* %CF_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)
1962 :   %1241 = and i32 %1231, %1229, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1963 :   %1242 = icmp slt i32 %1241, 0 : NIL

1964 :   store i1 %1242, i1* %OF_val, !mcsema_real_eip !173 :          <320>	cmpl	$268435455, -60(%rbp)

1965 :   %1243 = load i1* %ZF_val, !mcsema_real_eip !174 :          <327>	jbe	12
1966 :   %1244 = or i1 %1240, %1243, !mcsema_real_eip !174 :          <327>	jbe	12
1967 :   br i1 %1244, label %block_0x339, label %block_0x32d, !mcsema_real_eip !174 :          <327>	jbe	12

1968 :   %1245 = load i64* %RBP_val, !mcsema_real_eip !175 :          <309>	movl	$4294967275, -4(%rbp)
1969 :   %1246 = add i64 %1245, -4, !mcsema_real_eip !175 :          <309>	movl	$4294967275, -4(%rbp)
1970 :   %1247 = inttoptr i64 %1246 to i64*, !mcsema_real_eip !175 :          <309>	movl	$4294967275, -4(%rbp)

1971 :   %1248 = bitcast i64* %1247 to i32* : NIL

1972 :   store i32 -21, i32* %1248, !mcsema_real_eip !175 :          <309>	movl	$4294967275, -4(%rbp)

1973 :   br label %block_0x46d, !mcsema_real_eip !176 :          <310>	jmp	344

1974 :   store i64 10000, i64* %RAX_val, !mcsema_real_eip !177 :          <339>	movl	$10000, %eax

1975 :   %1249 = load i64* %RBP_val, !mcsema_real_eip !178 :          <33e>	movl	-60(%rbp), %ecx
1976 :   %1250 = add i64 %1249, -60, !mcsema_real_eip !178 :          <33e>	movl	-60(%rbp), %ecx
1977 :   %1251 = inttoptr i64 %1250 to i64*, !mcsema_real_eip !178 :          <33e>	movl	-60(%rbp), %ecx

1978 :   %1252 = bitcast i64* %1251 to i32* : NIL

1979 :   %1253 = load i32* %1252, !mcsema_real_eip !178 :          <33e>	movl	-60(%rbp), %ecx

1980 :   %1254 = xor i32 %1253, 13631488, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx
1981 :   store i1 false, i1* %CF_val, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx
1982 :   store i1 false, i1* %OF_val, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx

1983 :   %1255 = icmp slt i32 %1253, 0 : NIL

1984 :   store i1 %1255, i1* %SF_val, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx

1985 :   %1256 = icmp eq i32 %1253, 13631488 : NIL

1986 :   store i1 %1256, i1* %ZF_val, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx
1987 :   %1257 = trunc i32 %1253 to i8, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx
1988 :   %1258 = tail call i8 @llvm.ctpop.i8(i8 %1257), !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx

1989 :   %1259 = and i8 %1258, 1 : NIL
1990 :   %1260 = icmp eq i8 %1259, 0 : NIL

1991 :   store i1 %1260, i1* %PF_val, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx
1992 :   %1261 = zext i32 %1254 to i64, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx
1993 :   store i64 %1261, i64* %RCX_val, !mcsema_real_eip !179 :          <341>	xorl	$13631488, %ecx

1994 :   %1262 = load i64* %RBP_val, !mcsema_real_eip !180 :          <347>	movl	%ecx, -60(%rbp)
1995 :   %1263 = add i64 %1262, -60, !mcsema_real_eip !180 :          <347>	movl	%ecx, -60(%rbp)
1996 :   %1264 = inttoptr i64 %1263 to i64*, !mcsema_real_eip !180 :          <347>	movl	%ecx, -60(%rbp)

1997 :   %1265 = bitcast i64* %1264 to i32* : NIL

1998 :   store i32 %1254, i32* %1265, !mcsema_real_eip !180 :          <347>	movl	%ecx, -60(%rbp)

1999 :   %1266 = load i64* %RBP_val, !mcsema_real_eip !181 :          <34a>	movl	-60(%rbp), %ecx
2000 :   %1267 = add i64 %1266, -60, !mcsema_real_eip !181 :          <34a>	movl	-60(%rbp), %ecx
2001 :   %1268 = inttoptr i64 %1267 to i64*, !mcsema_real_eip !181 :          <34a>	movl	-60(%rbp), %ecx

2002 :   %1269 = bitcast i64* %1268 to i32* : NIL

2003 :   %1270 = load i32* %1269, !mcsema_real_eip !181 :          <34a>	movl	-60(%rbp), %ecx

2004 :   %1271 = and i32 %1270, 8, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2005 :   %1272 = icmp ne i32 %1271, 0, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx

2006 :   %1273 = lshr i32 %1270, 4 : NIL

2007 :   store i1 %1272, i1* %CF_val, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2008 :   %1274 = icmp eq i32 %1273, 0, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2009 :   store i1 %1274, i1* %ZF_val, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2010 :   store i1 false, i1* %SF_val, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2011 :   %1275 = trunc i32 %1273 to i8, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2012 :   %1276 = tail call i8 @llvm.ctpop.i8(i8 %1275), !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx

2013 :   %1277 = and i8 %1276, 1 : NIL
2014 :   %1278 = icmp eq i8 %1277, 0 : NIL

2015 :   store i1 %1278, i1* %PF_val, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2016 :   %1279 = zext i32 %1273 to i64, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx
2017 :   store i64 %1279, i64* %RCX_val, !mcsema_real_eip !182 :          <34d>	shrl	$4, %ecx

2018 :   %1280 = load i64* %RBP_val, !mcsema_real_eip !183 :          <350>	movl	%ecx, -60(%rbp)
2019 :   %1281 = add i64 %1280, -60, !mcsema_real_eip !183 :          <350>	movl	%ecx, -60(%rbp)
2020 :   %1282 = inttoptr i64 %1281 to i64*, !mcsema_real_eip !183 :          <350>	movl	%ecx, -60(%rbp)

2021 :   %1283 = bitcast i64* %1282 to i32* : NIL

2022 :   store i32 %1273, i32* %1283, !mcsema_real_eip !183 :          <350>	movl	%ecx, -60(%rbp)

2023 :   %1284 = load i64* %RBP_val, !mcsema_real_eip !184 :          <353>	movl	-60(%rbp), %ecx
2024 :   %1285 = add i64 %1284, -60, !mcsema_real_eip !184 :          <353>	movl	-60(%rbp), %ecx
2025 :   %1286 = inttoptr i64 %1285 to i64*, !mcsema_real_eip !184 :          <353>	movl	-60(%rbp), %ecx

2026 :   %1287 = bitcast i64* %1286 to i32* : NIL

2027 :   %1288 = load i32* %1287, !mcsema_real_eip !184 :          <353>	movl	-60(%rbp), %ecx

2028 :   %1289 = add i32 %1288, -226 : NIL

2029 :   %1290 = xor i32 %1289, %1288, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2030 :   %1291 = and i32 %1290, 16, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2031 :   %1292 = icmp ne i32 %1291, 0, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2032 :   store i1 %1292, i1* %AF_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2033 :   %1293 = trunc i32 %1289 to i8, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2034 :   %1294 = tail call i8 @llvm.ctpop.i8(i8 %1293), !mcsema_real_eip !185 :          <356>	subl	$226, %ecx

2035 :   %1295 = and i8 %1294, 1 : NIL
2036 :   %1296 = icmp eq i8 %1295, 0 : NIL

2037 :   store i1 %1296, i1* %PF_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2038 :   %1297 = icmp eq i32 %1289, 0, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2039 :   store i1 %1297, i1* %ZF_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx

2040 :   %1298 = icmp slt i32 %1289, 0 : NIL

2041 :   store i1 %1298, i1* %SF_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2042 :   %1299 = icmp ult i32 %1288, 226, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2043 :   store i1 %1299, i1* %CF_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2044 :   %1300 = and i32 %1290, %1288, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx

2045 :   %1301 = icmp slt i32 %1300, 0 : NIL

2046 :   store i1 %1301, i1* %OF_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2047 :   %1302 = zext i32 %1289 to i64, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx
2048 :   store i64 %1302, i64* %RCX_val, !mcsema_real_eip !185 :          <356>	subl	$226, %ecx

2049 :   %1303 = load i64* %RBP_val, !mcsema_real_eip !186 :          <35c>	movl	%ecx, -60(%rbp)
2050 :   %1304 = add i64 %1303, -60, !mcsema_real_eip !186 :          <35c>	movl	%ecx, -60(%rbp)
2051 :   %1305 = inttoptr i64 %1304 to i64*, !mcsema_real_eip !186 :          <35c>	movl	%ecx, -60(%rbp)

2052 :   %1306 = bitcast i64* %1305 to i32* : NIL

2053 :   store i32 %1289, i32* %1306, !mcsema_real_eip !186 :          <35c>	movl	%ecx, -60(%rbp)

2054 :   %1307 = load i64* %RBP_val, !mcsema_real_eip !187 :          <35f>	movl	-60(%rbp), %ecx
2055 :   %1308 = add i64 %1307, -60, !mcsema_real_eip !187 :          <35f>	movl	-60(%rbp), %ecx
2056 :   %1309 = inttoptr i64 %1308 to i64*, !mcsema_real_eip !187 :          <35f>	movl	-60(%rbp), %ecx

2057 :   %1310 = bitcast i64* %1309 to i32* : NIL

2058 :   %1311 = load i32* %1310, !mcsema_real_eip !187 :          <35f>	movl	-60(%rbp), %ecx
2059 :   %1312 = zext i32 %1311 to i64, !mcsema_real_eip !187 :          <35f>	movl	-60(%rbp), %ecx
2060 :   store i64 %1312, i64* %RCX_val, !mcsema_real_eip !187 :          <35f>	movl	-60(%rbp), %ecx

2061 :   %1313 = load i64* %RBP_val, !mcsema_real_eip !188 :          <362>	movl	%eax, -68(%rbp)
2062 :   %1314 = add i64 %1313, -68, !mcsema_real_eip !188 :          <362>	movl	%eax, -68(%rbp)
2063 :   %1315 = inttoptr i64 %1314 to i64*, !mcsema_real_eip !188 :          <362>	movl	%eax, -68(%rbp)
2064 :   %1316 = load i64* %RAX_val, !mcsema_real_eip !188 :          <362>	movl	%eax, -68(%rbp)
2065 :   %1317 = trunc i64 %1316 to i32, !mcsema_real_eip !188 :          <362>	movl	%eax, -68(%rbp)

2066 :   %1318 = bitcast i64* %1315 to i32* : NIL

2067 :   store i32 %1317, i32* %1318, !mcsema_real_eip !188 :          <362>	movl	%eax, -68(%rbp)

2068 :   %1319 = load i64* %RCX_val, !mcsema_real_eip !189 :          <365>	movl	%ecx, %eax

2069 :   %1320 = and i64 %1319, 4294967295 : NIL

2070 :   store i64 %1320, i64* %RAX_val, !mcsema_real_eip !189 :          <365>	movl	%ecx, %eax

2071 :   store i1 false, i1* %CF_val, !mcsema_real_eip !190 :          <367>	xorl	%edx, %edx
2072 :   store i1 false, i1* %OF_val, !mcsema_real_eip !190 :          <367>	xorl	%edx, %edx
2073 :   store i1 false, i1* %SF_val, !mcsema_real_eip !190 :          <367>	xorl	%edx, %edx
2074 :   store i1 true, i1* %ZF_val, !mcsema_real_eip !190 :          <367>	xorl	%edx, %edx
2075 :   store i1 true, i1* %PF_val, !mcsema_real_eip !190 :          <367>	xorl	%edx, %edx
2076 :   store i64 0, i64* %RDX_val, !mcsema_real_eip !190 :          <367>	xorl	%edx, %edx

2077 :   %1321 = load i64* %RBP_val, !mcsema_real_eip !191 :          <369>	movl	-68(%rbp), %ecx
2078 :   %1322 = add i64 %1321, -68, !mcsema_real_eip !191 :          <369>	movl	-68(%rbp), %ecx
2079 :   %1323 = inttoptr i64 %1322 to i64*, !mcsema_real_eip !191 :          <369>	movl	-68(%rbp), %ecx

2080 :   %1324 = bitcast i64* %1323 to i32* : NIL

2081 :   %1325 = load i32* %1324, !mcsema_real_eip !191 :          <369>	movl	-68(%rbp), %ecx
2082 :   %1326 = zext i32 %1325 to i64, !mcsema_real_eip !191 :          <369>	movl	-68(%rbp), %ecx
2083 :   store i64 %1326, i64* %RCX_val, !mcsema_real_eip !191 :          <369>	movl	-68(%rbp), %ecx

2084 :   %1327 = load i64* %RAX_val, !mcsema_real_eip !192 :          <36c>	divl	%ecx
2085 :   %1328 = load i64* %RDX_val, !mcsema_real_eip !192 :          <36c>	divl	%ecx
2086 :   %1329 = shl i64 %1328, 32, !mcsema_real_eip !192 :          <36c>	divl	%ecx

2087 :   %sext145 = shl i64 %1327, 32 : NIL
2088 :   %1330 = ashr exact i64 %sext145, 32 : NIL

2089 :   %1331 = or i64 %1329, %1330, !mcsema_real_eip !192 :          <36c>	divl	%ecx
2090 :   %1332 = udiv i64 %1331, %1326, !mcsema_real_eip !192 :          <36c>	divl	%ecx
2091 :   %1333 = urem i64 %1331, %1326, !mcsema_real_eip !192 :          <36c>	divl	%ecx

2092 :   %1334 = and i64 %1333, 4294967295 : NIL

2093 :   store i64 %1334, i64* %RDX_val, !mcsema_real_eip !192 :          <36c>	divl	%ecx

2094 :   %1335 = and i64 %1332, 4294967295 : NIL

2095 :   store i64 %1335, i64* %RAX_val, !mcsema_real_eip !192 :          <36c>	divl	%ecx

2096 :   %1336 = load i64* %RBP_val, !mcsema_real_eip !193 :          <36e>	movl	%eax, -60(%rbp)
2097 :   %1337 = add i64 %1336, -60, !mcsema_real_eip !193 :          <36e>	movl	%eax, -60(%rbp)
2098 :   %1338 = inttoptr i64 %1337 to i64*, !mcsema_real_eip !193 :          <36e>	movl	%eax, -60(%rbp)
2099 :   %1339 = trunc i64 %1332 to i32, !mcsema_real_eip !193 :          <36e>	movl	%eax, -60(%rbp)

2100 :   %1340 = bitcast i64* %1338 to i32* : NIL

2101 :   store i32 %1339, i32* %1340, !mcsema_real_eip !193 :          <36e>	movl	%eax, -60(%rbp)

2102 :   %1341 = load i64* %RBP_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2103 :   %1342 = add i64 %1341, -60, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2104 :   %1343 = inttoptr i64 %1342 to i64*, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)

2105 :   %1344 = bitcast i64* %1343 to i32* : NIL

2106 :   %1345 = load i32* %1344, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)

2107 :   %1346 = add i32 %1345, -3 : NIL

2108 :   %1347 = xor i32 %1346, %1345, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2109 :   %1348 = and i32 %1347, 16, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2110 :   %1349 = icmp ne i32 %1348, 0, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2111 :   store i1 %1349, i1* %AF_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2112 :   %1350 = trunc i32 %1346 to i8, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2113 :   %1351 = tail call i8 @llvm.ctpop.i8(i8 %1350), !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)

2114 :   %1352 = and i8 %1351, 1 : NIL
2115 :   %1353 = icmp eq i8 %1352, 0 : NIL

2116 :   store i1 %1353, i1* %PF_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2117 :   %1354 = icmp eq i32 %1346, 0, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2118 :   store i1 %1354, i1* %ZF_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)

2119 :   %1355 = icmp slt i32 %1346, 0 : NIL

2120 :   store i1 %1355, i1* %SF_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2121 :   %1356 = icmp ult i32 %1345, 3, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2122 :   store i1 %1356, i1* %CF_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)
2123 :   %1357 = and i32 %1347, %1345, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)

2124 :   %1358 = icmp slt i32 %1357, 0 : NIL

2125 :   store i1 %1358, i1* %OF_val, !mcsema_real_eip !194 :          <371>	cmpl	$3, -60(%rbp)

2126 :   %1359 = load i1* %ZF_val, !mcsema_real_eip !195 :          <378>	je	11
2127 :   br i1 %1359, label %block_0x389, label %block_0x37e, !mcsema_real_eip !195 :          <378>	je	11

2128 :   %1360 = load i64* %RBP_val, !mcsema_real_eip !196 :          <32d>	movl	$4294967274, -4(%rbp)
2129 :   %1361 = add i64 %1360, -4, !mcsema_real_eip !196 :          <32d>	movl	$4294967274, -4(%rbp)
2130 :   %1362 = inttoptr i64 %1361 to i64*, !mcsema_real_eip !196 :          <32d>	movl	$4294967274, -4(%rbp)

2131 :   %1363 = bitcast i64* %1362 to i32* : NIL

2132 :   store i32 -22, i32* %1363, !mcsema_real_eip !196 :          <32d>	movl	$4294967274, -4(%rbp)

2133 :   br label %block_0x46d, !mcsema_real_eip !197 :          <334>	jmp	308

2134 :   store i64 4, i64* %RDX_val, !mcsema_real_eip !198 :          <389>	movl	$4, %edx

2135 :   %1364 = load i64* %RBP_val, !mcsema_real_eip !199 :          <38e>	movl	-20(%rbp), %edi
2136 :   %1365 = add i64 %1364, -20, !mcsema_real_eip !199 :          <38e>	movl	-20(%rbp), %edi
2137 :   %1366 = inttoptr i64 %1365 to i64*, !mcsema_real_eip !199 :          <38e>	movl	-20(%rbp), %edi

2138 :   %1367 = bitcast i64* %1366 to i32* : NIL

2139 :   %1368 = load i32* %1367, !mcsema_real_eip !199 :          <38e>	movl	-20(%rbp), %edi
2140 :   %1369 = zext i32 %1368 to i64, !mcsema_real_eip !199 :          <38e>	movl	-20(%rbp), %edi
2141 :   store i64 %1369, i64* %RDI_val, !mcsema_real_eip !199 :          <38e>	movl	-20(%rbp), %edi

2142 :   %1370 = load i64* %RBP_val, !mcsema_real_eip !200 :          <391>	movq	-16(%rbp), %rax
2143 :   %1371 = add i64 %1370, -16, !mcsema_real_eip !200 :          <391>	movq	-16(%rbp), %rax
2144 :   %1372 = inttoptr i64 %1371 to i64*, !mcsema_real_eip !200 :          <391>	movq	-16(%rbp), %rax
2145 :   %1373 = load i64* %1372, !mcsema_real_eip !200 :          <391>	movq	-16(%rbp), %rax

2146 :   %uadd146 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1373, i64 28) : NIL
2147 :   %1374 = extractvalue { i64, i1 } %uadd146, 0 : NIL

2148 :   %1375 = xor i64 %1374, %1373, !mcsema_real_eip !201 :          <395>	addq	$28, %rax

2149 :   %1376 = and i64 %1375, 16 : NIL
2150 :   %1377 = icmp eq i64 %1376, 0 : NIL

2151 :   store i1 %1377, i1* %AF_val, !mcsema_real_eip !201 :          <395>	addq	$28, %rax

2152 :   %1378 = icmp slt i64 %1374, 0 : NIL

2153 :   store i1 %1378, i1* %SF_val, !mcsema_real_eip !201 :          <395>	addq	$28, %rax
2154 :   %1379 = icmp eq i64 %1374, 0, !mcsema_real_eip !201 :          <395>	addq	$28, %rax
2155 :   store i1 %1379, i1* %ZF_val, !mcsema_real_eip !201 :          <395>	addq	$28, %rax
2156 :   %1380 = xor i64 %1373, -9223372036854775808, !mcsema_real_eip !201 :          <395>	addq	$28, %rax
2157 :   %1381 = and i64 %1375, %1380, !mcsema_real_eip !201 :          <395>	addq	$28, %rax

2158 :   %1382 = icmp slt i64 %1381, 0 : NIL

2159 :   store i1 %1382, i1* %OF_val, !mcsema_real_eip !201 :          <395>	addq	$28, %rax
2160 :   %1383 = trunc i64 %1374 to i8, !mcsema_real_eip !201 :          <395>	addq	$28, %rax
2161 :   %1384 = tail call i8 @llvm.ctpop.i8(i8 %1383), !mcsema_real_eip !201 :          <395>	addq	$28, %rax

2162 :   %1385 = and i8 %1384, 1 : NIL
2163 :   %1386 = icmp eq i8 %1385, 0 : NIL

2164 :   store i1 %1386, i1* %PF_val, !mcsema_real_eip !201 :          <395>	addq	$28, %rax

2165 :   %1387 = extractvalue { i64, i1 } %uadd146, 1 : NIL

2166 :   store i1 %1387, i1* %CF_val, !mcsema_real_eip !201 :          <395>	addq	$28, %rax

2167 :   store i64 %1374, i64* %RSI_val, !mcsema_real_eip !202 :          <39b>	movq	%rax, %rsi

2168 :   %1388 = load i64* %RDI_val, !mcsema_real_eip !203 :          <39e>	callq	0
2169 :   %1389 = load i64* %RDX_val, !mcsema_real_eip !203 :          <39e>	callq	0
2170 :   %1390 = tail call x86_64_sysvcc i64 @read_bytes(i64 %1388, i64 %1374, i64 %1389), !mcsema_real_eip !203 :          <39e>	callq	0
2171 :   store i64 %1390, i64* %RAX_val, !mcsema_real_eip !203 :          <39e>	callq	0

2172 :   %1391 = load i64* %RBP_val, !mcsema_real_eip !204 :          <3a3>	movl	%eax, -64(%rbp)
2173 :   %1392 = add i64 %1391, -64, !mcsema_real_eip !204 :          <3a3>	movl	%eax, -64(%rbp)
2174 :   %1393 = inttoptr i64 %1392 to i64*, !mcsema_real_eip !204 :          <3a3>	movl	%eax, -64(%rbp)
2175 :   %1394 = trunc i64 %1390 to i32, !mcsema_real_eip !204 :          <3a3>	movl	%eax, -64(%rbp)

2176 :   %1395 = bitcast i64* %1393 to i32* : NIL

2177 :   store i32 %1394, i32* %1395, !mcsema_real_eip !204 :          <3a3>	movl	%eax, -64(%rbp)

2178 :   %1396 = load i64* %RBP_val, !mcsema_real_eip !205 :          <3a6>	movq	-16(%rbp), %rsi
2179 :   %1397 = add i64 %1396, -16, !mcsema_real_eip !205 :          <3a6>	movq	-16(%rbp), %rsi
2180 :   %1398 = inttoptr i64 %1397 to i64*, !mcsema_real_eip !205 :          <3a6>	movq	-16(%rbp), %rsi
2181 :   %1399 = load i64* %1398, !mcsema_real_eip !205 :          <3a6>	movq	-16(%rbp), %rsi
2182 :   store i64 %1399, i64* %RSI_val, !mcsema_real_eip !205 :          <3a6>	movq	-16(%rbp), %rsi

2183 :   %1400 = add i64 %1399, 28, !mcsema_real_eip !206 :          <3aa>	movsbl	28(%rsi), %eax
2184 :   %1401 = inttoptr i64 %1400 to i64*, !mcsema_real_eip !206 :          <3aa>	movsbl	28(%rsi), %eax

2185 :   %1402 = bitcast i64* %1401 to i8* : NIL

2186 :   %1403 = load i8* %1402, !mcsema_real_eip !206 :          <3aa>	movsbl	28(%rsi), %eax
2187 :   %1404 = sext i8 %1403 to i32, !mcsema_real_eip !206 :          <3aa>	movsbl	28(%rsi), %eax
2188 :   %1405 = zext i32 %1404 to i64, !mcsema_real_eip !206 :          <3aa>	movsbl	28(%rsi), %eax
2189 :   store i64 %1405, i64* %RAX_val, !mcsema_real_eip !206 :          <3aa>	movsbl	28(%rsi), %eax

2190 :   %1406 = add nsw i32 %1404, -100 : NIL

2191 :   %1407 = xor i32 %1406, %1404, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2192 :   %1408 = and i32 %1407, 16, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2193 :   %1409 = icmp ne i32 %1408, 0, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2194 :   store i1 %1409, i1* %AF_val, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2195 :   %1410 = trunc i32 %1406 to i8, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2196 :   %1411 = tail call i8 @llvm.ctpop.i8(i8 %1410), !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax

2197 :   %1412 = and i8 %1411, 1 : NIL
2198 :   %1413 = icmp eq i8 %1412, 0 : NIL

2199 :   store i1 %1413, i1* %PF_val, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2200 :   %1414 = icmp eq i32 %1406, 0, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2201 :   store i1 %1414, i1* %ZF_val, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax

2202 :   %1415 = icmp slt i32 %1406, 0 : NIL

2203 :   store i1 %1415, i1* %SF_val, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax

2204 :   %1416 = icmp ult i8 %1403, 100 : NIL

2205 :   store i1 %1416, i1* %CF_val, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax
2206 :   %1417 = and i32 %1407, %1404, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax

2207 :   %1418 = icmp slt i32 %1417, 0 : NIL

2208 :   store i1 %1418, i1* %OF_val, !mcsema_real_eip !207 :          <3ae>	cmpl	$100, %eax

2209 :   %1419 = load i1* %ZF_val, !mcsema_real_eip !208 :          <3b3>	jne	36
2210 :   br i1 %1419, label %block_0x3b9, label %block_0x3dd, !mcsema_real_eip !208 :          <3b3>	jne	36

2211 :   %1420 = load i64* %RBP_val, !mcsema_real_eip !209 :          <37e>	movl	-60(%rbp), %eax
2212 :   %1421 = add i64 %1420, -60, !mcsema_real_eip !209 :          <37e>	movl	-60(%rbp), %eax
2213 :   %1422 = inttoptr i64 %1421 to i64*, !mcsema_real_eip !209 :          <37e>	movl	-60(%rbp), %eax

2214 :   %1423 = bitcast i64* %1422 to i32* : NIL

2215 :   %1424 = load i32* %1423, !mcsema_real_eip !209 :          <37e>	movl	-60(%rbp), %eax
2216 :   %1425 = zext i32 %1424 to i64, !mcsema_real_eip !209 :          <37e>	movl	-60(%rbp), %eax
2217 :   store i64 %1425, i64* %RAX_val, !mcsema_real_eip !209 :          <37e>	movl	-60(%rbp), %eax

2218 :   %1426 = load i64* %RBP_val, !mcsema_real_eip !210 :          <381>	movl	%eax, -4(%rbp)
2219 :   %1427 = add i64 %1426, -4, !mcsema_real_eip !210 :          <381>	movl	%eax, -4(%rbp)
2220 :   %1428 = inttoptr i64 %1427 to i64*, !mcsema_real_eip !210 :          <381>	movl	%eax, -4(%rbp)

2221 :   %1429 = bitcast i64* %1428 to i32* : NIL

2222 :   store i32 %1424, i32* %1429, !mcsema_real_eip !210 :          <381>	movl	%eax, -4(%rbp)

2223 :   br label %block_0x46d, !mcsema_real_eip !211 :          <384>	jmp	228

2224 :   %1430 = load i64* %RBP_val, !mcsema_real_eip !212 :          <3dd>	movq	-16(%rbp), %rax
2225 :   %1431 = add i64 %1430, -16, !mcsema_real_eip !212 :          <3dd>	movq	-16(%rbp), %rax
2226 :   %1432 = inttoptr i64 %1431 to i64*, !mcsema_real_eip !212 :          <3dd>	movq	-16(%rbp), %rax
2227 :   %1433 = load i64* %1432, !mcsema_real_eip !212 :          <3dd>	movq	-16(%rbp), %rax
2228 :   store i64 %1433, i64* %RAX_val, !mcsema_real_eip !212 :          <3dd>	movq	-16(%rbp), %rax

2229 :   %1434 = add i64 %1433, 28, !mcsema_real_eip !213 :          <3e1>	movsbl	28(%rax), %ecx
2230 :   %1435 = inttoptr i64 %1434 to i64*, !mcsema_real_eip !213 :          <3e1>	movsbl	28(%rax), %ecx

2231 :   %1436 = bitcast i64* %1435 to i8* : NIL

2232 :   %1437 = load i8* %1436, !mcsema_real_eip !213 :          <3e1>	movsbl	28(%rax), %ecx
2233 :   %1438 = sext i8 %1437 to i32, !mcsema_real_eip !213 :          <3e1>	movsbl	28(%rax), %ecx
2234 :   %1439 = zext i32 %1438 to i64, !mcsema_real_eip !213 :          <3e1>	movsbl	28(%rax), %ecx
2235 :   store i64 %1439, i64* %RCX_val, !mcsema_real_eip !213 :          <3e1>	movsbl	28(%rax), %ecx

2236 :   %1440 = load i64* %RBP_val, !mcsema_real_eip !214 :          <3e5>	movq	-16(%rbp), %rax
2237 :   %1441 = add i64 %1440, -16, !mcsema_real_eip !214 :          <3e5>	movq	-16(%rbp), %rax
2238 :   %1442 = inttoptr i64 %1441 to i64*, !mcsema_real_eip !214 :          <3e5>	movq	-16(%rbp), %rax
2239 :   %1443 = load i64* %1442, !mcsema_real_eip !214 :          <3e5>	movq	-16(%rbp), %rax
2240 :   store i64 %1443, i64* %RAX_val, !mcsema_real_eip !214 :          <3e5>	movq	-16(%rbp), %rax

2241 :   %1444 = add i64 %1443, 29, !mcsema_real_eip !215 :          <3e9>	movsbl	29(%rax), %edx
2242 :   %1445 = inttoptr i64 %1444 to i64*, !mcsema_real_eip !215 :          <3e9>	movsbl	29(%rax), %edx

2243 :   %1446 = bitcast i64* %1445 to i8* : NIL

2244 :   %1447 = load i8* %1446, !mcsema_real_eip !215 :          <3e9>	movsbl	29(%rax), %edx
2245 :   %1448 = sext i8 %1447 to i32, !mcsema_real_eip !215 :          <3e9>	movsbl	29(%rax), %edx
2246 :   %1449 = zext i32 %1448 to i64, !mcsema_real_eip !215 :          <3e9>	movsbl	29(%rax), %edx
2247 :   store i64 %1449, i64* %RDX_val, !mcsema_real_eip !215 :          <3e9>	movsbl	29(%rax), %edx

2248 :   %1450 = load i64* %RCX_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2249 :   %1451 = trunc i64 %1450 to i32, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2250 :   %1452 = sub i32 %1451, %1448, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2251 :   %1453 = xor i32 %1452, %1451, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2252 :   %1454 = xor i32 %1453, %1448, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2253 :   %1455 = and i32 %1454, 16, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2254 :   %1456 = icmp ne i32 %1455, 0, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2255 :   store i1 %1456, i1* %AF_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2256 :   %1457 = trunc i32 %1452 to i8, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2257 :   %1458 = tail call i8 @llvm.ctpop.i8(i8 %1457), !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx

2258 :   %1459 = and i8 %1458, 1 : NIL
2259 :   %1460 = icmp eq i8 %1459, 0 : NIL

2260 :   store i1 %1460, i1* %PF_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx

2261 :   %1461 = icmp eq i32 %1451, %1448 : NIL

2262 :   store i1 %1461, i1* %ZF_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx

2263 :   %1462 = icmp slt i32 %1452, 0 : NIL

2264 :   store i1 %1462, i1* %SF_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2265 :   %1463 = icmp ult i32 %1451, %1448, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2266 :   store i1 %1463, i1* %CF_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2267 :   %1464 = xor i32 %1451, %1448, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx
2268 :   %1465 = and i32 %1453, %1464, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx

2269 :   %1466 = icmp slt i32 %1465, 0 : NIL

2270 :   store i1 %1466, i1* %OF_val, !mcsema_real_eip !216 :          <3ed>	cmpl	%edx, %ecx

2271 :   %1467 = load i1* %ZF_val, !mcsema_real_eip !217 :          <3ef>	jne	103
2272 :   br i1 %1467, label %block_0x3f5, label %block_0x45c, !mcsema_real_eip !217 :          <3ef>	jne	103

2273 :   %1468 = load i64* %RBP_val, !mcsema_real_eip !218 :          <3b9>	movq	-16(%rbp), %rax
2274 :   %1469 = add i64 %1468, -16, !mcsema_real_eip !218 :          <3b9>	movq	-16(%rbp), %rax
2275 :   %1470 = inttoptr i64 %1469 to i64*, !mcsema_real_eip !218 :          <3b9>	movq	-16(%rbp), %rax
2276 :   %1471 = load i64* %1470, !mcsema_real_eip !218 :          <3b9>	movq	-16(%rbp), %rax
2277 :   store i64 %1471, i64* %RAX_val, !mcsema_real_eip !218 :          <3b9>	movq	-16(%rbp), %rax

2278 :   %1472 = add i64 %1471, 29, !mcsema_real_eip !219 :          <3bd>	movsbl	29(%rax), %ecx
2279 :   %1473 = inttoptr i64 %1472 to i64*, !mcsema_real_eip !219 :          <3bd>	movsbl	29(%rax), %ecx

2280 :   %1474 = bitcast i64* %1473 to i8* : NIL

2281 :   %1475 = load i8* %1474, !mcsema_real_eip !219 :          <3bd>	movsbl	29(%rax), %ecx
2282 :   %1476 = sext i8 %1475 to i32, !mcsema_real_eip !219 :          <3bd>	movsbl	29(%rax), %ecx
2283 :   %1477 = zext i32 %1476 to i64, !mcsema_real_eip !219 :          <3bd>	movsbl	29(%rax), %ecx
2284 :   store i64 %1477, i64* %RCX_val, !mcsema_real_eip !219 :          <3bd>	movsbl	29(%rax), %ecx

2285 :   %1478 = add nsw i32 %1476, -100 : NIL

2286 :   %1479 = xor i32 %1478, %1476, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2287 :   %1480 = and i32 %1479, 16, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2288 :   %1481 = icmp ne i32 %1480, 0, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2289 :   store i1 %1481, i1* %AF_val, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2290 :   %1482 = trunc i32 %1478 to i8, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2291 :   %1483 = tail call i8 @llvm.ctpop.i8(i8 %1482), !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx

2292 :   %1484 = and i8 %1483, 1 : NIL
2293 :   %1485 = icmp eq i8 %1484, 0 : NIL

2294 :   store i1 %1485, i1* %PF_val, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2295 :   %1486 = icmp eq i32 %1478, 0, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2296 :   store i1 %1486, i1* %ZF_val, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx

2297 :   %1487 = icmp slt i32 %1478, 0 : NIL

2298 :   store i1 %1487, i1* %SF_val, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx

2299 :   %1488 = icmp ult i8 %1475, 100 : NIL

2300 :   store i1 %1488, i1* %CF_val, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx
2301 :   %1489 = and i32 %1479, %1476, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx

2302 :   %1490 = icmp slt i32 %1489, 0 : NIL

2303 :   store i1 %1490, i1* %OF_val, !mcsema_real_eip !220 :          <3c1>	cmpl	$100, %ecx

2304 :   %1491 = load i1* %ZF_val, !mcsema_real_eip !221 :          <3c7>	jne	16
2305 :   br i1 %1491, label %block_0x3cd, label %block_0x3dd, !mcsema_real_eip !221 :          <3c7>	jne	16

2306 :   %1492 = load i64* %RBP_val, !mcsema_real_eip !222 :          <3cd>	movl	-64(%rbp), %eax
2307 :   %1493 = add i64 %1492, -64, !mcsema_real_eip !222 :          <3cd>	movl	-64(%rbp), %eax
2308 :   %1494 = inttoptr i64 %1493 to i64*, !mcsema_real_eip !222 :          <3cd>	movl	-64(%rbp), %eax

2309 :   %1495 = bitcast i64* %1494 to i32* : NIL

2310 :   %1496 = load i32* %1495, !mcsema_real_eip !222 :          <3cd>	movl	-64(%rbp), %eax
2311 :   %1497 = zext i32 %1496 to i64, !mcsema_real_eip !222 :          <3cd>	movl	-64(%rbp), %eax
2312 :   store i64 %1497, i64* %RAX_val, !mcsema_real_eip !222 :          <3cd>	movl	-64(%rbp), %eax

2313 :   %1498 = load i64* %RBP_val, !mcsema_real_eip !223 :          <3d0>	movl	-20(%rbp), %ecx
2314 :   %1499 = add i64 %1498, -20, !mcsema_real_eip !223 :          <3d0>	movl	-20(%rbp), %ecx
2315 :   %1500 = inttoptr i64 %1499 to i64*, !mcsema_real_eip !223 :          <3d0>	movl	-20(%rbp), %ecx

2316 :   %1501 = bitcast i64* %1500 to i32* : NIL

2317 :   %1502 = load i32* %1501, !mcsema_real_eip !223 :          <3d0>	movl	-20(%rbp), %ecx

2318 :   %1503 = xor i32 %1496, %1502, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx
2319 :   store i1 false, i1* %CF_val, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx
2320 :   store i1 false, i1* %OF_val, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx

2321 :   %1504 = icmp slt i32 %1503, 0 : NIL

2322 :   store i1 %1504, i1* %SF_val, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx

2323 :   %1505 = icmp eq i32 %1502, %1496 : NIL

2324 :   store i1 %1505, i1* %ZF_val, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx
2325 :   %1506 = trunc i32 %1503 to i8, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx
2326 :   %1507 = tail call i8 @llvm.ctpop.i8(i8 %1506), !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx

2327 :   %1508 = and i8 %1507, 1 : NIL
2328 :   %1509 = icmp eq i8 %1508, 0 : NIL

2329 :   store i1 %1509, i1* %PF_val, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx
2330 :   %1510 = zext i32 %1503 to i64, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx
2331 :   store i64 %1510, i64* %RCX_val, !mcsema_real_eip !224 :          <3d3>	xorl	%eax, %ecx

2332 :   %1511 = load i64* %RBP_val, !mcsema_real_eip !225 :          <3d5>	movl	%ecx, -20(%rbp)
2333 :   %1512 = add i64 %1511, -20, !mcsema_real_eip !225 :          <3d5>	movl	%ecx, -20(%rbp)
2334 :   %1513 = inttoptr i64 %1512 to i64*, !mcsema_real_eip !225 :          <3d5>	movl	%ecx, -20(%rbp)

2335 :   %1514 = bitcast i64* %1513 to i32* : NIL

2336 :   store i32 %1503, i32* %1514, !mcsema_real_eip !225 :          <3d5>	movl	%ecx, -20(%rbp)

2337 :   br label %block_0x467, !mcsema_real_eip !226 :          <3d8>	jmp	138

2338 :   %1515 = load i64* %RBP_val, !mcsema_real_eip !227 :          <45c>	movl	-64(%rbp), %eax
2339 :   %1516 = add i64 %1515, -64, !mcsema_real_eip !227 :          <45c>	movl	-64(%rbp), %eax
2340 :   %1517 = inttoptr i64 %1516 to i64*, !mcsema_real_eip !227 :          <45c>	movl	-64(%rbp), %eax

2341 :   %1518 = bitcast i64* %1517 to i32* : NIL

2342 :   %1519 = load i32* %1518, !mcsema_real_eip !227 :          <45c>	movl	-64(%rbp), %eax
2343 :   %1520 = zext i32 %1519 to i64, !mcsema_real_eip !227 :          <45c>	movl	-64(%rbp), %eax
2344 :   store i64 %1520, i64* %RAX_val, !mcsema_real_eip !227 :          <45c>	movl	-64(%rbp), %eax

2345 :   %1521 = load i64* %RBP_val, !mcsema_real_eip !228 :          <45f>	movl	%eax, -20(%rbp)
2346 :   %1522 = add i64 %1521, -20, !mcsema_real_eip !228 :          <45f>	movl	%eax, -20(%rbp)
2347 :   %1523 = inttoptr i64 %1522 to i64*, !mcsema_real_eip !228 :          <45f>	movl	%eax, -20(%rbp)

2348 :   %1524 = bitcast i64* %1523 to i32* : NIL

2349 :   store i32 %1519, i32* %1524, !mcsema_real_eip !228 :          <45f>	movl	%eax, -20(%rbp)

2350 :   br label %block_0x467, !mcsema_real_eip !229 :          <462>	jmp	0

2351 :   store i64 15, i64* %RAX_val, !mcsema_real_eip !230 :          <3f5>	movl	$15, %eax

2352 :   %1525 = load i64* %RBP_val, !mcsema_real_eip !231 :          <3fa>	movq	-16(%rbp), %rcx
2353 :   %1526 = add i64 %1525, -16, !mcsema_real_eip !231 :          <3fa>	movq	-16(%rbp), %rcx
2354 :   %1527 = inttoptr i64 %1526 to i64*, !mcsema_real_eip !231 :          <3fa>	movq	-16(%rbp), %rcx
2355 :   %1528 = load i64* %1527, !mcsema_real_eip !231 :          <3fa>	movq	-16(%rbp), %rcx
2356 :   store i64 %1528, i64* %RCX_val, !mcsema_real_eip !231 :          <3fa>	movq	-16(%rbp), %rcx

2357 :   %1529 = add i64 %1528, 31, !mcsema_real_eip !232 :          <3fe>	movsbl	31(%rcx), %edx
2358 :   %1530 = inttoptr i64 %1529 to i64*, !mcsema_real_eip !232 :          <3fe>	movsbl	31(%rcx), %edx

2359 :   %1531 = bitcast i64* %1530 to i8* : NIL

2360 :   %1532 = load i8* %1531, !mcsema_real_eip !232 :          <3fe>	movsbl	31(%rcx), %edx
2361 :   %1533 = sext i8 %1532 to i32, !mcsema_real_eip !232 :          <3fe>	movsbl	31(%rcx), %edx
2362 :   %1534 = zext i32 %1533 to i64, !mcsema_real_eip !232 :          <3fe>	movsbl	31(%rcx), %edx
2363 :   store i64 %1534, i64* %RDX_val, !mcsema_real_eip !232 :          <3fe>	movsbl	31(%rcx), %edx

2364 :   %1535 = load i64* %RBP_val, !mcsema_real_eip !233 :          <402>	movq	-16(%rbp), %rcx
2365 :   %1536 = add i64 %1535, -16, !mcsema_real_eip !233 :          <402>	movq	-16(%rbp), %rcx
2366 :   %1537 = inttoptr i64 %1536 to i64*, !mcsema_real_eip !233 :          <402>	movq	-16(%rbp), %rcx
2367 :   %1538 = load i64* %1537, !mcsema_real_eip !233 :          <402>	movq	-16(%rbp), %rcx
2368 :   store i64 %1538, i64* %RCX_val, !mcsema_real_eip !233 :          <402>	movq	-16(%rbp), %rcx

2369 :   %1539 = add i64 %1538, 30, !mcsema_real_eip !234 :          <406>	movsbl	30(%rcx), %esi
2370 :   %1540 = inttoptr i64 %1539 to i64*, !mcsema_real_eip !234 :          <406>	movsbl	30(%rcx), %esi

2371 :   %1541 = bitcast i64* %1540 to i8* : NIL

2372 :   %1542 = load i8* %1541, !mcsema_real_eip !234 :          <406>	movsbl	30(%rcx), %esi
2373 :   %1543 = sext i8 %1542 to i32, !mcsema_real_eip !234 :          <406>	movsbl	30(%rcx), %esi
2374 :   %1544 = zext i32 %1543 to i64, !mcsema_real_eip !234 :          <406>	movsbl	30(%rcx), %esi
2375 :   store i64 %1544, i64* %RSI_val, !mcsema_real_eip !234 :          <406>	movsbl	30(%rcx), %esi

2376 :   %1545 = load i64* %RDX_val, !mcsema_real_eip !235 :          <40a>	subl	%esi, %edx
2377 :   %1546 = trunc i64 %1545 to i32, !mcsema_real_eip !235 :          <40a>	subl	%esi, %edx
2378 :   %1547 = sub i32 %1546, %1543, !mcsema_real_eip !235 :          <40a>	subl	%esi, %edx
2379 :   %1548 = zext i32 %1547 to i64, !mcsema_real_eip !235 :          <40a>	subl	%esi, %edx
2380 :   store i64 %1548, i64* %RDX_val, !mcsema_real_eip !235 :          <40a>	subl	%esi, %edx

2381 :   %1549 = load i64* %RAX_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2382 :   %1550 = trunc i64 %1549 to i32, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2383 :   %1551 = sub i32 %1550, %1547, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2384 :   %1552 = xor i32 %1551, %1550, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2385 :   %1553 = xor i32 %1552, %1547, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2386 :   %1554 = and i32 %1553, 16, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2387 :   %1555 = icmp ne i32 %1554, 0, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2388 :   store i1 %1555, i1* %AF_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2389 :   %1556 = trunc i32 %1551 to i8, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2390 :   %1557 = tail call i8 @llvm.ctpop.i8(i8 %1556), !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax

2391 :   %1558 = and i8 %1557, 1 : NIL
2392 :   %1559 = icmp eq i8 %1558, 0 : NIL

2393 :   store i1 %1559, i1* %PF_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax

2394 :   %1560 = icmp eq i32 %1550, %1547 : NIL

2395 :   store i1 %1560, i1* %ZF_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax

2396 :   %1561 = icmp slt i32 %1551, 0 : NIL

2397 :   store i1 %1561, i1* %SF_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2398 :   %1562 = icmp ult i32 %1550, %1547, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2399 :   store i1 %1562, i1* %CF_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2400 :   %1563 = xor i32 %1550, %1547, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2401 :   %1564 = and i32 %1552, %1563, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax

2402 :   %1565 = icmp slt i32 %1564, 0 : NIL

2403 :   store i1 %1565, i1* %OF_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2404 :   %1566 = zext i32 %1551 to i64, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax
2405 :   store i64 %1566, i64* %RAX_val, !mcsema_real_eip !236 :          <40c>	subl	%edx, %eax

2406 :   %1567 = load i64* %RBP_val, !mcsema_real_eip !237 :          <40e>	movl	-20(%rbp), %edx
2407 :   %1568 = add i64 %1567, -20, !mcsema_real_eip !237 :          <40e>	movl	-20(%rbp), %edx
2408 :   %1569 = inttoptr i64 %1568 to i64*, !mcsema_real_eip !237 :          <40e>	movl	-20(%rbp), %edx

2409 :   %1570 = bitcast i64* %1569 to i32* : NIL

2410 :   %1571 = load i32* %1570, !mcsema_real_eip !237 :          <40e>	movl	-20(%rbp), %edx

2411 :   %uadd148 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %1551, i32 %1571) : NIL
2412 :   %1572 = extractvalue { i32, i1 } %uadd148, 0 : NIL

2413 :   %1573 = xor i32 %1572, %1571, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2414 :   %1574 = xor i32 %1573, %1551, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2415 :   %1575 = and i32 %1574, 16, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2416 :   %1576 = icmp ne i32 %1575, 0, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2417 :   store i1 %1576, i1* %AF_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx

2418 :   %1577 = icmp slt i32 %1572, 0 : NIL

2419 :   store i1 %1577, i1* %SF_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2420 :   %1578 = icmp eq i32 %1572, 0, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2421 :   store i1 %1578, i1* %ZF_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2422 :   %1579 = xor i32 %1571, -2147483648, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2423 :   %1580 = xor i32 %1579, %1551, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2424 :   %1581 = and i32 %1573, %1580, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx

2425 :   %1582 = icmp slt i32 %1581, 0 : NIL

2426 :   store i1 %1582, i1* %OF_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2427 :   %1583 = trunc i32 %1572 to i8, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2428 :   %1584 = tail call i8 @llvm.ctpop.i8(i8 %1583), !mcsema_real_eip !238 :          <411>	addl	%eax, %edx

2429 :   %1585 = and i8 %1584, 1 : NIL
2430 :   %1586 = icmp eq i8 %1585, 0 : NIL

2431 :   store i1 %1586, i1* %PF_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx

2432 :   %1587 = extractvalue { i32, i1 } %uadd148, 1 : NIL

2433 :   store i1 %1587, i1* %CF_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2434 :   %1588 = zext i32 %1572 to i64, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx
2435 :   store i64 %1588, i64* %RDX_val, !mcsema_real_eip !238 :          <411>	addl	%eax, %edx

2436 :   %1589 = load i64* %RBP_val, !mcsema_real_eip !239 :          <413>	movl	%edx, -20(%rbp)
2437 :   %1590 = add i64 %1589, -20, !mcsema_real_eip !239 :          <413>	movl	%edx, -20(%rbp)
2438 :   %1591 = inttoptr i64 %1590 to i64*, !mcsema_real_eip !239 :          <413>	movl	%edx, -20(%rbp)

2439 :   %1592 = bitcast i64* %1591 to i32* : NIL

2440 :   store i32 %1572, i32* %1592, !mcsema_real_eip !239 :          <413>	movl	%edx, -20(%rbp)

2441 :   %1593 = load i64* %RBP_val, !mcsema_real_eip !240 :          <416>	movq	-16(%rbp), %rcx
2442 :   %1594 = add i64 %1593, -16, !mcsema_real_eip !240 :          <416>	movq	-16(%rbp), %rcx
2443 :   %1595 = inttoptr i64 %1594 to i64*, !mcsema_real_eip !240 :          <416>	movq	-16(%rbp), %rcx
2444 :   %1596 = load i64* %1595, !mcsema_real_eip !240 :          <416>	movq	-16(%rbp), %rcx
2445 :   store i64 %1596, i64* %RCX_val, !mcsema_real_eip !240 :          <416>	movq	-16(%rbp), %rcx

2446 :   %1597 = add i64 %1596, 28, !mcsema_real_eip !241 :          <41a>	movzbl	28(%rcx), %edi
2447 :   %1598 = inttoptr i64 %1597 to i64*, !mcsema_real_eip !241 :          <41a>	movzbl	28(%rcx), %edi

2448 :   %1599 = bitcast i64* %1598 to i8* : NIL

2449 :   %1600 = load i8* %1599, !mcsema_real_eip !241 :          <41a>	movzbl	28(%rcx), %edi

2450 :   %1601 = zext i8 %1600 to i64 : NIL

2451 :   store i64 %1601, i64* %RDI_val, !mcsema_real_eip !241 :          <41a>	movzbl	28(%rcx), %edi

2452 :   %1602 = tail call x86_64_sysvcc i64 @to_byte(i64 %1601), !mcsema_real_eip !242 :          <41e>	callq	0
2453 :   store i64 %1602, i64* %RAX_val, !mcsema_real_eip !242 :          <41e>	callq	0

2454 :   %1603 = load i64* %RBP_val, !mcsema_real_eip !243 :          <423>	movl	-20(%rbp), %edx
2455 :   %1604 = add i64 %1603, -20, !mcsema_real_eip !243 :          <423>	movl	-20(%rbp), %edx
2456 :   %1605 = inttoptr i64 %1604 to i64*, !mcsema_real_eip !243 :          <423>	movl	-20(%rbp), %edx

2457 :   %1606 = bitcast i64* %1605 to i32* : NIL

2458 :   %1607 = load i32* %1606, !mcsema_real_eip !243 :          <423>	movl	-20(%rbp), %edx

2459 :   %1608 = trunc i64 %1602 to i32, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2460 :   %1609 = sub i32 %1607, %1608, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2461 :   %1610 = xor i32 %1609, %1607, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2462 :   %1611 = xor i32 %1610, %1608, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2463 :   %1612 = and i32 %1611, 16, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2464 :   %1613 = icmp ne i32 %1612, 0, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2465 :   store i1 %1613, i1* %AF_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2466 :   %1614 = trunc i32 %1609 to i8, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2467 :   %1615 = tail call i8 @llvm.ctpop.i8(i8 %1614), !mcsema_real_eip !244 :          <426>	subl	%eax, %edx

2468 :   %1616 = and i8 %1615, 1 : NIL
2469 :   %1617 = icmp eq i8 %1616, 0 : NIL

2470 :   store i1 %1617, i1* %PF_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx

2471 :   %1618 = icmp eq i32 %1607, %1608 : NIL

2472 :   store i1 %1618, i1* %ZF_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx

2473 :   %1619 = icmp slt i32 %1609, 0 : NIL

2474 :   store i1 %1619, i1* %SF_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2475 :   %1620 = icmp ult i32 %1607, %1608, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2476 :   store i1 %1620, i1* %CF_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2477 :   %1621 = xor i32 %1608, %1607, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2478 :   %1622 = and i32 %1610, %1621, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx

2479 :   %1623 = icmp slt i32 %1622, 0 : NIL

2480 :   store i1 %1623, i1* %OF_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2481 :   %1624 = zext i32 %1609 to i64, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx
2482 :   store i64 %1624, i64* %RDX_val, !mcsema_real_eip !244 :          <426>	subl	%eax, %edx

2483 :   %1625 = load i64* %RBP_val, !mcsema_real_eip !245 :          <428>	movl	%edx, -20(%rbp)
2484 :   %1626 = add i64 %1625, -20, !mcsema_real_eip !245 :          <428>	movl	%edx, -20(%rbp)
2485 :   %1627 = inttoptr i64 %1626 to i64*, !mcsema_real_eip !245 :          <428>	movl	%edx, -20(%rbp)

2486 :   %1628 = bitcast i64* %1627 to i32* : NIL

2487 :   store i32 %1609, i32* %1628, !mcsema_real_eip !245 :          <428>	movl	%edx, -20(%rbp)

2488 :   %1629 = load i64* %RBP_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2489 :   %1630 = add i64 %1629, -20, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2490 :   %1631 = inttoptr i64 %1630 to i64*, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)

2491 :   %1632 = bitcast i64* %1631 to i32* : NIL

2492 :   %1633 = load i32* %1632, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2493 :   store i1 false, i1* %AF_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2494 :   %1634 = trunc i32 %1633 to i8, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2495 :   %1635 = tail call i8 @llvm.ctpop.i8(i8 %1634), !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)

2496 :   %1636 = and i8 %1635, 1 : NIL
2497 :   %1637 = icmp eq i8 %1636, 0 : NIL

2498 :   store i1 %1637, i1* %PF_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2499 :   %1638 = icmp eq i32 %1633, 0, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2500 :   store i1 %1638, i1* %ZF_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)

2501 :   %1639 = icmp slt i32 %1633, 0 : NIL

2502 :   store i1 %1639, i1* %SF_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2503 :   store i1 false, i1* %CF_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)
2504 :   store i1 false, i1* %OF_val, !mcsema_real_eip !246 :          <42b>	cmpl	$0, -20(%rbp)

2505 :   br i1 %1638, label %block_0x438, label %block_0x467, !mcsema_real_eip !247 :          <432>	jne	31

2506 :   %1640 = load i64* %RBP_val, !mcsema_real_eip !248 :          <467>	movl	-20(%rbp), %eax
2507 :   %1641 = add i64 %1640, -20, !mcsema_real_eip !248 :          <467>	movl	-20(%rbp), %eax
2508 :   %1642 = inttoptr i64 %1641 to i64*, !mcsema_real_eip !248 :          <467>	movl	-20(%rbp), %eax

2509 :   %1643 = bitcast i64* %1642 to i32* : NIL

2510 :   %1644 = load i32* %1643, !mcsema_real_eip !248 :          <467>	movl	-20(%rbp), %eax
2511 :   %1645 = zext i32 %1644 to i64, !mcsema_real_eip !248 :          <467>	movl	-20(%rbp), %eax
2512 :   store i64 %1645, i64* %RAX_val, !mcsema_real_eip !248 :          <467>	movl	-20(%rbp), %eax

2513 :   %1646 = load i64* %RBP_val, !mcsema_real_eip !249 :          <46a>	movl	%eax, -4(%rbp)
2514 :   %1647 = add i64 %1646, -4, !mcsema_real_eip !249 :          <46a>	movl	%eax, -4(%rbp)
2515 :   %1648 = inttoptr i64 %1647 to i64*, !mcsema_real_eip !249 :          <46a>	movl	%eax, -4(%rbp)

2516 :   %1649 = bitcast i64* %1648 to i32* : NIL

2517 :   store i32 %1644, i32* %1649, !mcsema_real_eip !249 :          <46a>	movl	%eax, -4(%rbp)

2518 :   %1650 = load i64* %RBP_val, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
2519 :   %1651 = add i64 %1650, -4, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
2520 :   %1652 = inttoptr i64 %1651 to i64*, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax

2521 :   %1653 = bitcast i64* %1652 to i32* : NIL

2522 :   %1654 = load i32* %1653, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
2523 :   %1655 = zext i32 %1654 to i64, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax
2524 :   store i64 %1655, i64* %RAX_val, !mcsema_real_eip !23 :          <46d>	movl	-4(%rbp), %eax

2525 :   %1656 = load i64* %RSP_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2526 :   %uadd147 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1656, i64 80) : NIL
2527 :   %1657 = extractvalue { i64, i1 } %uadd147, 0 : NIL

2528 :   %1658 = xor i64 %1657, %1656, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2529 :   %1659 = and i64 %1658, 16 : NIL
2530 :   %1660 = icmp eq i64 %1659, 0 : NIL

2531 :   store i1 %1660, i1* %AF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2532 :   %1661 = icmp slt i64 %1657, 0 : NIL

2533 :   store i1 %1661, i1* %SF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2534 :   %1662 = icmp eq i64 %1657, 0, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2535 :   store i1 %1662, i1* %ZF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2536 :   %1663 = xor i64 %1656, -9223372036854775808, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2537 :   %1664 = and i64 %1658, %1663, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2538 :   %1665 = icmp slt i64 %1664, 0 : NIL

2539 :   store i1 %1665, i1* %OF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2540 :   %1666 = trunc i64 %1657 to i8, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2541 :   %1667 = tail call i8 @llvm.ctpop.i8(i8 %1666), !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2542 :   %1668 = and i8 %1667, 1 : NIL
2543 :   %1669 = icmp eq i8 %1668, 0 : NIL

2544 :   store i1 %1669, i1* %PF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2545 :   %1670 = extractvalue { i64, i1 } %uadd147, 1 : NIL

2546 :   store i1 %1670, i1* %CF_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp
2547 :   store i64 %1657, i64* %RSP_val, !mcsema_real_eip !24 :          <470>	addq	$80, %rsp

2548 :   %1671 = inttoptr i64 %1657 to i64*, !mcsema_real_eip !25 :          <474>	popq	%rbp
2549 :   %1672 = load i64* %1671, !mcsema_real_eip !25 :          <474>	popq	%rbp
2550 :   store i64 %1672, i64* %RBP_val, !mcsema_real_eip !25 :          <474>	popq	%rbp

2551 :   %1673 = add i64 %1657, 16, !mcsema_real_eip !26 :          <475>	retq
2552 :   store i64 %1673, i64* %RSP_val, !mcsema_real_eip !26 :          <475>	retq
2553 :   %1674 = load i64* %RAX_val, !mcsema_real_eip !26 :          <475>	retq
2554 :   store i64 %1674, i64* %RAX, !mcsema_real_eip !26 :          <475>	retq
2555 :   %1675 = load i64* %RBX_val, !mcsema_real_eip !26 :          <475>	retq
2556 :   store i64 %1675, i64* %RBX, !mcsema_real_eip !26 :          <475>	retq
2557 :   %1676 = load i64* %RCX_val, !mcsema_real_eip !26 :          <475>	retq
2558 :   store i64 %1676, i64* %RCX, !mcsema_real_eip !26 :          <475>	retq
2559 :   %1677 = load i64* %RDX_val, !mcsema_real_eip !26 :          <475>	retq
2560 :   store i64 %1677, i64* %RDX, !mcsema_real_eip !26 :          <475>	retq
2561 :   %1678 = load i64* %RSI_val, !mcsema_real_eip !26 :          <475>	retq
2562 :   store i64 %1678, i64* %RSI, !mcsema_real_eip !26 :          <475>	retq
2563 :   %1679 = load i64* %RDI_val, !mcsema_real_eip !26 :          <475>	retq
2564 :   store i64 %1679, i64* %RDI, !mcsema_real_eip !26 :          <475>	retq
2565 :   %1680 = load i64* %RSP_val, !mcsema_real_eip !26 :          <475>	retq
2566 :   store i64 %1680, i64* %RSP, !mcsema_real_eip !26 :          <475>	retq
2567 :   %1681 = load i64* %RBP_val, !mcsema_real_eip !26 :          <475>	retq
2568 :   store i64 %1681, i64* %RBP, !mcsema_real_eip !26 :          <475>	retq
2569 :   %1682 = load i64* %R8_val, !mcsema_real_eip !26 :          <475>	retq
2570 :   store i64 %1682, i64* %R8, !mcsema_real_eip !26 :          <475>	retq
2571 :   %1683 = load i64* %R9_val, !mcsema_real_eip !26 :          <475>	retq
2572 :   store i64 %1683, i64* %R9, !mcsema_real_eip !26 :          <475>	retq
2573 :   %1684 = load i64* %R10_val, !mcsema_real_eip !26 :          <475>	retq
2574 :   store i64 %1684, i64* %R10, !mcsema_real_eip !26 :          <475>	retq
2575 :   %1685 = load i64* %R11_val, !mcsema_real_eip !26 :          <475>	retq
2576 :   store i64 %1685, i64* %R11, !mcsema_real_eip !26 :          <475>	retq
2577 :   %1686 = load i64* %R12_val, !mcsema_real_eip !26 :          <475>	retq
2578 :   store i64 %1686, i64* %R12, !mcsema_real_eip !26 :          <475>	retq
2579 :   %1687 = load i64* %R13_val, !mcsema_real_eip !26 :          <475>	retq
2580 :   store i64 %1687, i64* %R13, !mcsema_real_eip !26 :          <475>	retq
2581 :   %1688 = load i64* %R14_val, !mcsema_real_eip !26 :          <475>	retq
2582 :   store i64 %1688, i64* %R14, !mcsema_real_eip !26 :          <475>	retq
2583 :   %1689 = load i64* %R15_val, !mcsema_real_eip !26 :          <475>	retq
2584 :   store i64 %1689, i64* %R15, !mcsema_real_eip !26 :          <475>	retq
2585 :   %1690 = load i64* %RIP_val, !mcsema_real_eip !26 :          <475>	retq
2586 :   store i64 %1690, i64* %RIP, !mcsema_real_eip !26 :          <475>	retq
2587 :   %1691 = load i1* %CF_val, !mcsema_real_eip !26 :          <475>	retq
2588 :   store i1 %1691, i1* %CF, align 1, !mcsema_real_eip !26 :          <475>	retq
2589 :   %1692 = load i1* %PF_val, !mcsema_real_eip !26 :          <475>	retq
2590 :   store i1 %1692, i1* %PF, align 1, !mcsema_real_eip !26 :          <475>	retq
2591 :   %1693 = load i1* %AF_val, !mcsema_real_eip !26 :          <475>	retq
2592 :   store i1 %1693, i1* %AF, align 1, !mcsema_real_eip !26 :          <475>	retq
2593 :   %1694 = load i1* %ZF_val, !mcsema_real_eip !26 :          <475>	retq
2594 :   store i1 %1694, i1* %ZF, align 1, !mcsema_real_eip !26 :          <475>	retq
2595 :   %1695 = load i1* %SF_val, !mcsema_real_eip !26 :          <475>	retq
2596 :   store i1 %1695, i1* %SF, align 1, !mcsema_real_eip !26 :          <475>	retq
2597 :   %1696 = load i1* %OF_val, !mcsema_real_eip !26 :          <475>	retq
2598 :   store i1 %1696, i1* %OF, align 1, !mcsema_real_eip !26 :          <475>	retq
2599 :   %1697 = load i1* %DF_val, !mcsema_real_eip !26 :          <475>	retq
2600 :   store i1 %1697, i1* %DF, align 1, !mcsema_real_eip !26 :          <475>	retq
2601 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !26 :          <475>	retq
2602 :   %1698 = load i1* %FPU_B_val, !mcsema_real_eip !26 :          <475>	retq
2603 :   store i1 %1698, i1* %FPU_B, align 1, !mcsema_real_eip !26 :          <475>	retq
2604 :   %1699 = load i1* %FPU_C3_val, !mcsema_real_eip !26 :          <475>	retq
2605 :   store i1 %1699, i1* %FPU_C3, align 1, !mcsema_real_eip !26 :          <475>	retq
2606 :   %1700 = load i3* %FPU_TOP_val, !mcsema_real_eip !26 :          <475>	retq
2607 :   store i3 %1700, i3* %FPU_TOP, align 1, !mcsema_real_eip !26 :          <475>	retq
2608 :   %1701 = load i1* %FPU_C2_val, !mcsema_real_eip !26 :          <475>	retq
2609 :   store i1 %1701, i1* %FPU_C2, align 1, !mcsema_real_eip !26 :          <475>	retq
2610 :   %1702 = load i1* %FPU_C1_val, !mcsema_real_eip !26 :          <475>	retq
2611 :   store i1 %1702, i1* %FPU_C1, align 1, !mcsema_real_eip !26 :          <475>	retq
2612 :   %1703 = load i1* %FPU_C0_val, !mcsema_real_eip !26 :          <475>	retq
2613 :   store i1 %1703, i1* %FPU_C0, align 1, !mcsema_real_eip !26 :          <475>	retq
2614 :   %1704 = load i1* %FPU_ES_val, !mcsema_real_eip !26 :          <475>	retq
2615 :   store i1 %1704, i1* %FPU_ES, align 1, !mcsema_real_eip !26 :          <475>	retq
2616 :   %1705 = load i1* %FPU_SF_val, !mcsema_real_eip !26 :          <475>	retq
2617 :   store i1 %1705, i1* %FPU_SF, align 1, !mcsema_real_eip !26 :          <475>	retq
2618 :   %1706 = load i1* %FPU_PE_val, !mcsema_real_eip !26 :          <475>	retq
2619 :   store i1 %1706, i1* %FPU_PE, align 1, !mcsema_real_eip !26 :          <475>	retq
2620 :   %1707 = load i1* %FPU_UE_val, !mcsema_real_eip !26 :          <475>	retq
2621 :   store i1 %1707, i1* %FPU_UE, align 1, !mcsema_real_eip !26 :          <475>	retq
2622 :   %1708 = load i1* %FPU_OE_val, !mcsema_real_eip !26 :          <475>	retq
2623 :   store i1 %1708, i1* %FPU_OE, align 1, !mcsema_real_eip !26 :          <475>	retq
2624 :   %1709 = load i1* %FPU_ZE_val, !mcsema_real_eip !26 :          <475>	retq
2625 :   store i1 %1709, i1* %FPU_ZE, align 1, !mcsema_real_eip !26 :          <475>	retq
2626 :   %1710 = load i1* %FPU_DE_val, !mcsema_real_eip !26 :          <475>	retq
2627 :   store i1 %1710, i1* %FPU_DE, align 1, !mcsema_real_eip !26 :          <475>	retq
2628 :   %1711 = load i1* %FPU_IE_val, !mcsema_real_eip !26 :          <475>	retq
2629 :   store i1 %1711, i1* %FPU_IE, align 1, !mcsema_real_eip !26 :          <475>	retq
2630 :   %1712 = load i1* %FPU_X_val, !mcsema_real_eip !26 :          <475>	retq
2631 :   store i1 %1712, i1* %FPU_X, align 1, !mcsema_real_eip !26 :          <475>	retq
2632 :   %1713 = load i2* %FPU_RC_val, !mcsema_real_eip !26 :          <475>	retq
2633 :   store i2 %1713, i2* %FPU_RC, align 1, !mcsema_real_eip !26 :          <475>	retq
2634 :   %1714 = load i2* %FPU_PC_val, !mcsema_real_eip !26 :          <475>	retq
2635 :   store i2 %1714, i2* %FPU_PC, align 1, !mcsema_real_eip !26 :          <475>	retq
2636 :   %1715 = load i1* %FPU_PM_val, !mcsema_real_eip !26 :          <475>	retq
2637 :   store i1 %1715, i1* %FPU_PM, align 1, !mcsema_real_eip !26 :          <475>	retq
2638 :   %1716 = load i1* %FPU_UM_val, !mcsema_real_eip !26 :          <475>	retq
2639 :   store i1 %1716, i1* %FPU_UM, align 1, !mcsema_real_eip !26 :          <475>	retq
2640 :   %1717 = load i1* %FPU_OM_val, !mcsema_real_eip !26 :          <475>	retq
2641 :   store i1 %1717, i1* %FPU_OM, align 1, !mcsema_real_eip !26 :          <475>	retq
2642 :   %1718 = load i1* %FPU_ZM_val, !mcsema_real_eip !26 :          <475>	retq
2643 :   store i1 %1718, i1* %FPU_ZM, align 1, !mcsema_real_eip !26 :          <475>	retq
2644 :   %1719 = load i1* %FPU_DM_val, !mcsema_real_eip !26 :          <475>	retq
2645 :   store i1 %1719, i1* %FPU_DM, align 1, !mcsema_real_eip !26 :          <475>	retq
2646 :   %1720 = load i1* %FPU_IM_val, !mcsema_real_eip !26 :          <475>	retq
2647 :   store i1 %1720, i1* %FPU_IM, align 1, !mcsema_real_eip !26 :          <475>	retq

2648 :   %1721 = load i64* %53, align 4 : NIL
2649 :   store i64 %1721, i64* %52, align 4 : NIL

2650 :   %1722 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !26 :          <475>	retq
2651 :   store i16 %1722, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !26 :          <475>	retq
2652 :   %1723 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !26 :          <475>	retq
2653 :   store i64 %1723, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !26 :          <475>	retq
2654 :   %1724 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !26 :          <475>	retq
2655 :   store i16 %1724, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !26 :          <475>	retq
2656 :   %1725 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !26 :          <475>	retq
2657 :   store i64 %1725, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !26 :          <475>	retq
2658 :   %1726 = load i128* %XMM0_val, !mcsema_real_eip !26 :          <475>	retq
2659 :   store i128 %1726, i128* %XMM0, align 1, !mcsema_real_eip !26 :          <475>	retq
2660 :   %1727 = load i128* %XMM1_val, !mcsema_real_eip !26 :          <475>	retq
2661 :   store i128 %1727, i128* %XMM1, align 1, !mcsema_real_eip !26 :          <475>	retq
2662 :   %1728 = load i128* %XMM2_val, !mcsema_real_eip !26 :          <475>	retq
2663 :   store i128 %1728, i128* %XMM2, align 1, !mcsema_real_eip !26 :          <475>	retq
2664 :   %1729 = load i128* %XMM3_val, !mcsema_real_eip !26 :          <475>	retq
2665 :   store i128 %1729, i128* %XMM3, align 1, !mcsema_real_eip !26 :          <475>	retq
2666 :   %1730 = load i128* %XMM4_val, !mcsema_real_eip !26 :          <475>	retq
2667 :   store i128 %1730, i128* %XMM4, align 1, !mcsema_real_eip !26 :          <475>	retq
2668 :   %1731 = load i128* %XMM5_val, !mcsema_real_eip !26 :          <475>	retq
2669 :   store i128 %1731, i128* %XMM5, align 1, !mcsema_real_eip !26 :          <475>	retq
2670 :   %1732 = load i128* %XMM6_val, !mcsema_real_eip !26 :          <475>	retq
2671 :   store i128 %1732, i128* %XMM6, align 1, !mcsema_real_eip !26 :          <475>	retq
2672 :   %1733 = load i128* %XMM7_val, !mcsema_real_eip !26 :          <475>	retq
2673 :   store i128 %1733, i128* %XMM7, align 1, !mcsema_real_eip !26 :          <475>	retq
2674 :   %1734 = load i128* %XMM8_val, !mcsema_real_eip !26 :          <475>	retq
2675 :   store i128 %1734, i128* %XMM8, align 1, !mcsema_real_eip !26 :          <475>	retq
2676 :   %1735 = load i128* %XMM9_val, !mcsema_real_eip !26 :          <475>	retq
2677 :   store i128 %1735, i128* %XMM9, align 1, !mcsema_real_eip !26 :          <475>	retq
2678 :   %1736 = load i128* %XMM10_val, !mcsema_real_eip !26 :          <475>	retq
2679 :   store i128 %1736, i128* %XMM10, align 1, !mcsema_real_eip !26 :          <475>	retq
2680 :   %1737 = load i128* %XMM11_val, !mcsema_real_eip !26 :          <475>	retq
2681 :   store i128 %1737, i128* %XMM11, align 1, !mcsema_real_eip !26 :          <475>	retq
2682 :   %1738 = load i128* %XMM12_val, !mcsema_real_eip !26 :          <475>	retq
2683 :   store i128 %1738, i128* %XMM12, align 1, !mcsema_real_eip !26 :          <475>	retq
2684 :   %1739 = load i128* %XMM13_val, !mcsema_real_eip !26 :          <475>	retq
2685 :   store i128 %1739, i128* %XMM13, align 1, !mcsema_real_eip !26 :          <475>	retq
2686 :   %1740 = load i128* %XMM14_val, !mcsema_real_eip !26 :          <475>	retq
2687 :   store i128 %1740, i128* %XMM14, align 1, !mcsema_real_eip !26 :          <475>	retq
2688 :   %1741 = load i128* %XMM15_val, !mcsema_real_eip !26 :          <475>	retq
2689 :   store i128 %1741, i128* %XMM15, align 1, !mcsema_real_eip !26 :          <475>	retq
2690 :   %1742 = load i64* %STACK_BASE_val, !mcsema_real_eip !26 :          <475>	retq
2691 :   store i64 %1742, i64* %STACK_BASE, align 1, !mcsema_real_eip !26 :          <475>	retq
2692 :   %1743 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !26 :          <475>	retq
2693 :   store i64 %1743, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !26 :          <475>	retq
2694 :   ret void, !mcsema_real_eip !26 :          <475>	retq

2695 :   %1744 = load i64* %RBP_val, !mcsema_real_eip !250 :          <438>	movq	-16(%rbp), %rax
2696 :   %1745 = add i64 %1744, -16, !mcsema_real_eip !250 :          <438>	movq	-16(%rbp), %rax
2697 :   %1746 = inttoptr i64 %1745 to i64*, !mcsema_real_eip !250 :          <438>	movq	-16(%rbp), %rax
2698 :   %1747 = load i64* %1746, !mcsema_real_eip !250 :          <438>	movq	-16(%rbp), %rax
2699 :   store i64 %1747, i64* %RAX_val, !mcsema_real_eip !250 :          <438>	movq	-16(%rbp), %rax

2700 :   %1748 = add i64 %1747, 31, !mcsema_real_eip !251 :          <43c>	movzbl	31(%rax), %edi
2701 :   %1749 = inttoptr i64 %1748 to i64*, !mcsema_real_eip !251 :          <43c>	movzbl	31(%rax), %edi

2702 :   %1750 = bitcast i64* %1749 to i8* : NIL

2703 :   %1751 = load i8* %1750, !mcsema_real_eip !251 :          <43c>	movzbl	31(%rax), %edi

2704 :   %1752 = zext i8 %1751 to i64 : NIL

2705 :   store i64 %1752, i64* %RDI_val, !mcsema_real_eip !251 :          <43c>	movzbl	31(%rax), %edi

2706 :   %1753 = tail call x86_64_sysvcc i64 @to_byte(i64 %1752), !mcsema_real_eip !252 :          <440>	callq	0
2707 :   store i64 %1753, i64* %RAX_val, !mcsema_real_eip !252 :          <440>	callq	0

2708 :   %1754 = trunc i64 %1753 to i32, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax

2709 :   %1755 = add i32 %1754, -4 : NIL

2710 :   %1756 = xor i32 %1755, %1754, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2711 :   %1757 = and i32 %1756, 16, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2712 :   %1758 = icmp ne i32 %1757, 0, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2713 :   store i1 %1758, i1* %AF_val, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2714 :   %1759 = trunc i32 %1755 to i8, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2715 :   %1760 = tail call i8 @llvm.ctpop.i8(i8 %1759), !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax

2716 :   %1761 = and i8 %1760, 1 : NIL
2717 :   %1762 = icmp eq i8 %1761, 0 : NIL

2718 :   store i1 %1762, i1* %PF_val, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2719 :   %1763 = icmp eq i32 %1755, 0, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2720 :   store i1 %1763, i1* %ZF_val, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax

2721 :   %1764 = icmp slt i32 %1755, 0 : NIL

2722 :   store i1 %1764, i1* %SF_val, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2723 :   %1765 = icmp ult i32 %1754, 4, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2724 :   store i1 %1765, i1* %CF_val, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax
2725 :   %1766 = and i32 %1756, %1754, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax

2726 :   %1767 = icmp slt i32 %1766, 0 : NIL

2727 :   store i1 %1767, i1* %OF_val, !mcsema_real_eip !253 :          <445>	cmpl	$4, %eax

2728 :   %1768 = load i1* %ZF_val, !mcsema_real_eip !254 :          <44a>	je	7
2729 :   br i1 %1768, label %block_0x467, label %block_0x450, !mcsema_real_eip !254 :          <44a>	je	7

2730 :   %1769 = load i64* %RBP_val, !mcsema_real_eip !255 :          <450>	movl	$4294967264, -20(%rbp)
2731 :   %1770 = add i64 %1769, -20, !mcsema_real_eip !255 :          <450>	movl	$4294967264, -20(%rbp)
2732 :   %1771 = inttoptr i64 %1770 to i64*, !mcsema_real_eip !255 :          <450>	movl	$4294967264, -20(%rbp)

2733 :   %1772 = bitcast i64* %1771 to i32* : NIL

2734 :   store i32 -32, i32* %1772, !mcsema_real_eip !255 :          <450>	movl	$4294967264, -20(%rbp)

2735 :   br label %block_0x467, !mcsema_real_eip !256 :          <457>	jmp	6
========================================================
Source line mapping for function: mcsema_main
========================================================

1 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0) : NIL
2 :   ret void : NIL
