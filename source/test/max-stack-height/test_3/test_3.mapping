========================================================
Source line mapping for function: sub_0
========================================================

288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <0>	pushq	%rbp
293 :   store i64 %79, i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

294 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <1>	movq	%rsp, %rbp

295 :   %81 = add i64 %78, -12, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
296 :   %82 = inttoptr i64 %81 to i64*, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
297 :   %83 = load i64* %RDI_val, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)
298 :   %84 = trunc i64 %83 to i32, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)

299 :   %85 = bitcast i64* %82 to i32* : NIL

300 :   store i32 %84, i32* %85, !mcsema_real_eip !4 :          <4>	movl	%edi, -4(%rbp)

301 :   %86 = load i64* %RBP_val, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
302 :   %87 = add i64 %86, -8, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
303 :   %88 = inttoptr i64 %87 to i64*, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
304 :   %89 = load i64* %RSI_val, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)
305 :   %90 = trunc i64 %89 to i32, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)

306 :   %91 = bitcast i64* %88 to i32* : NIL

307 :   store i32 %90, i32* %91, !mcsema_real_eip !5 :          <7>	movl	%esi, -8(%rbp)

308 :   %92 = load i64* %RBP_val, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
309 :   %93 = add i64 %92, -4, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
310 :   %94 = inttoptr i64 %93 to i64*, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi

311 :   %95 = bitcast i64* %94 to i32* : NIL

312 :   %96 = load i32* %95, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
313 :   %97 = zext i32 %96 to i64, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi
314 :   store i64 %97, i64* %RSI_val, !mcsema_real_eip !6 :          <a>	movl	-4(%rbp), %esi

315 :   %98 = load i64* %RBP_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
316 :   %99 = add i64 %98, -8, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
317 :   %100 = inttoptr i64 %99 to i64*, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

318 :   %101 = bitcast i64* %100 to i32* : NIL

319 :   %102 = load i32* %101, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

320 :   %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %96, i32 %102) : NIL
321 :   %103 = extractvalue { i32, i1 } %uadd, 0 : NIL

322 :   %104 = xor i32 %103, %102, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
323 :   %105 = xor i32 %104, %96, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
324 :   %106 = and i32 %105, 16, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
325 :   %107 = icmp ne i32 %106, 0, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
326 :   store i1 %107, i1* %AF_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

327 :   %108 = icmp slt i32 %103, 0 : NIL

328 :   store i1 %108, i1* %SF_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
329 :   %109 = icmp eq i32 %103, 0, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
330 :   store i1 %109, i1* %ZF_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
331 :   %110 = xor i32 %96, -2147483648, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
332 :   %111 = xor i32 %110, %102, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
333 :   %112 = and i32 %104, %111, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

334 :   %113 = icmp slt i32 %112, 0 : NIL

335 :   store i1 %113, i1* %OF_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
336 :   %114 = trunc i32 %103 to i8, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
337 :   %115 = tail call i8 @llvm.ctpop.i8(i8 %114), !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

338 :   %116 = and i8 %115, 1 : NIL
339 :   %117 = icmp eq i8 %116, 0 : NIL

340 :   store i1 %117, i1* %PF_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

341 :   %118 = extractvalue { i32, i1 } %uadd, 1 : NIL

342 :   store i1 %118, i1* %CF_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
343 :   %119 = zext i32 %103 to i64, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi
344 :   store i64 %119, i64* %RSI_val, !mcsema_real_eip !7 :          <d>	addl	-8(%rbp), %esi

345 :   %120 = load i64* %RBP_val, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)
346 :   %121 = add i64 %120, -12, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)
347 :   %122 = inttoptr i64 %121 to i64*, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)

348 :   %123 = bitcast i64* %122 to i32* : NIL

349 :   store i32 %103, i32* %123, !mcsema_real_eip !8 :          <10>	movl	%esi, -12(%rbp)

350 :   %124 = load i64* %RBP_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
351 :   %125 = add i64 %124, -4, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
352 :   %126 = inttoptr i64 %125 to i64*, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)

353 :   %127 = bitcast i64* %126 to i32* : NIL

354 :   %128 = load i32* %127, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)

355 :   %129 = add i32 %128, -40 : NIL

356 :   %130 = xor i32 %129, %128, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
357 :   %131 = and i32 %130, 16, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
358 :   %132 = icmp ne i32 %131, 0, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
359 :   store i1 %132, i1* %AF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
360 :   %133 = trunc i32 %129 to i8, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
361 :   %134 = tail call i8 @llvm.ctpop.i8(i8 %133), !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)

362 :   %135 = and i8 %134, 1 : NIL
363 :   %136 = icmp eq i8 %135, 0 : NIL

364 :   store i1 %136, i1* %PF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
365 :   %137 = icmp eq i32 %129, 0, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
366 :   store i1 %137, i1* %ZF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)

367 :   %138 = icmp slt i32 %129, 0 : NIL

368 :   store i1 %138, i1* %SF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
369 :   %139 = icmp ult i32 %128, 40, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
370 :   store i1 %139, i1* %CF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)
371 :   %140 = and i32 %130, %128, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)

372 :   %141 = icmp slt i32 %140, 0 : NIL

373 :   store i1 %141, i1* %OF_val, !mcsema_real_eip !9 :          <13>	cmpl	$40, -4(%rbp)

374 :   %142 = xor i1 %138, %141 : NIL

375 :   %143 = load i1* %ZF_val, !mcsema_real_eip !10 :          <1a>	jle	16
376 :   %144 = or i1 %143, %142, !mcsema_real_eip !10 :          <1a>	jle	16

377 :   %145 = load i64* %RBP_val, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
378 :   %146 = add i64 %145, -12, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
379 :   %147 = inttoptr i64 %146 to i64*, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax

380 :   %148 = bitcast i64* %147 to i32* : NIL

381 :   %149 = load i32* %148, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
382 :   %150 = zext i32 %149 to i64, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax
383 :   store i64 %150, i64* %RAX_val, !mcsema_real_eip !11 :          <30>	movl	-12(%rbp), %eax

384 :   br i1 %144, label %block_0x30, label %block_0x20, !mcsema_real_eip !10 :          <1a>	jle	16

385 :   %151 = add i32 %149, -10 : NIL

410 :   store i32 %151, i32* %168, !mcsema_real_eip !13 :          <38>	movl	%eax, -16(%rbp)

411 :   %169 = load i64* %RBP_val, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
412 :   %170 = add i64 %169, -12, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
413 :   %171 = inttoptr i64 %170 to i64*, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax

414 :   %172 = bitcast i64* %171 to i32* : NIL

415 :   %173 = load i32* %172, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
416 :   %174 = zext i32 %173 to i64, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
417 :   store i64 %174, i64* %RAX_val, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax

418 :   %175 = load i64* %RSP_val, !mcsema_real_eip !15 :          <3e>	popq	%rbp
419 :   %176 = inttoptr i64 %175 to i64*, !mcsema_real_eip !15 :          <3e>	popq	%rbp
420 :   %177 = load i64* %176, !mcsema_real_eip !15 :          <3e>	popq	%rbp
421 :   store i64 %177, i64* %RBP_val, !mcsema_real_eip !15 :          <3e>	popq	%rbp

422 :   %178 = add i64 %175, 16, !mcsema_real_eip !16 :          <3f>	retq
423 :   store i64 %178, i64* %RSP_val, !mcsema_real_eip !16 :          <3f>	retq
565 :   ret void, !mcsema_real_eip !16 :          <3f>	retq

566 :   %uadd140 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %149, i32 10) : NIL
567 :   %249 = extractvalue { i32, i1 } %uadd140, 0 : NIL

568 :   %250 = xor i32 %249, %149, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
569 :   %251 = and i32 %250, 16, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
570 :   %252 = icmp ne i32 %251, 0, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
571 :   store i1 %252, i1* %AF_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax

572 :   %253 = icmp slt i32 %249, 0 : NIL

573 :   store i1 %253, i1* %SF_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
574 :   %254 = icmp eq i32 %249, 0, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
575 :   store i1 %254, i1* %ZF_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
576 :   %255 = xor i32 %149, -2147483648, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
577 :   %256 = and i32 %250, %255, !mcsema_real_eip !17 :          <23>	addl	$10, %eax

578 :   %257 = icmp slt i32 %256, 0 : NIL

579 :   store i1 %257, i1* %OF_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
580 :   %258 = trunc i32 %249 to i8, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
581 :   %259 = tail call i8 @llvm.ctpop.i8(i8 %258), !mcsema_real_eip !17 :          <23>	addl	$10, %eax

582 :   %260 = and i8 %259, 1 : NIL
583 :   %261 = icmp eq i8 %260, 0 : NIL

584 :   store i1 %261, i1* %PF_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax

585 :   %262 = extractvalue { i32, i1 } %uadd140, 1 : NIL

586 :   store i1 %262, i1* %CF_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
587 :   %263 = zext i32 %249 to i64, !mcsema_real_eip !17 :          <23>	addl	$10, %eax
588 :   store i64 %263, i64* %RAX_val, !mcsema_real_eip !17 :          <23>	addl	$10, %eax

589 :   %264 = load i64* %RBP_val, !mcsema_real_eip !18 :          <28>	movl	%eax, -12(%rbp)
590 :   %265 = add i64 %264, -12, !mcsema_real_eip !18 :          <28>	movl	%eax, -12(%rbp)
591 :   %266 = inttoptr i64 %265 to i64*, !mcsema_real_eip !18 :          <28>	movl	%eax, -12(%rbp)

592 :   %267 = bitcast i64* %266 to i32* : NIL

593 :   store i32 %249, i32* %267, !mcsema_real_eip !18 :          <28>	movl	%eax, -12(%rbp)

594 :   %268 = load i64* %RBP_val, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
595 :   %269 = add i64 %268, -12, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
596 :   %270 = inttoptr i64 %269 to i64*, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax

597 :   %271 = bitcast i64* %270 to i32* : NIL

598 :   %272 = load i32* %271, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
599 :   %273 = zext i32 %272 to i64, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax
600 :   store i64 %273, i64* %RAX_val, !mcsema_real_eip !14 :          <3b>	movl	-12(%rbp), %eax

601 :   %274 = load i64* %RSP_val, !mcsema_real_eip !15 :          <3e>	popq	%rbp
602 :   %275 = inttoptr i64 %274 to i64*, !mcsema_real_eip !15 :          <3e>	popq	%rbp
603 :   %276 = load i64* %275, !mcsema_real_eip !15 :          <3e>	popq	%rbp
604 :   store i64 %276, i64* %RBP_val, !mcsema_real_eip !15 :          <3e>	popq	%rbp

605 :   %277 = add i64 %274, 16, !mcsema_real_eip !16 :          <3f>	retq
606 :   store i64 %277, i64* %RSP_val, !mcsema_real_eip !16 :          <3f>	retq

748 :   ret void, !mcsema_real_eip !16 :          <3f>	retq
========================================================
Source line mapping for function: mcsema_main
========================================================

1 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0) : NIL
2 :   ret void : NIL
