OPT=$(shell which opt)
RUN_SH=../utils/run.sh  
loadso=${HOME}/Github/binary-decompilation/source/Release+Asserts/lib/LLVMmax_stack_height.so 
GCC=$(shell which gcc)
CLANG=$(shell which clang)
ICC=$(shell which icc)

all:   clang gcc

gcc:
	@echo " using gcc"
	@COMPILER=${GCC} ENTRY_FUNC=${ENTRY_FUNC} ASM_FILE=${ASM_FILE} FUNC_MAP=${FUNC_MAP} ${RUN_SH} ${PROG_PREFIX} 64
	@${MAKE} run_pass 

clang:
	@echo " using clang"
	@COMPILER=${CLANG} ENTRY_FUNC=${ENTRY_FUNC} ASM_FILE=${ASM_FILE} FUNC_MAP=${FUNC_MAP} ${RUN_SH} ${PROG_PREFIX} 64
	@${MAKE} run_pass

icc:
	@echo " using icc"
	@COMPILER=${ICC} ENTRY_FUNC=${ENTRY_FUNC} ASM_FILE=${ASM_FILE} FUNC_MAP=${FUNC_MAP} ${RUN_SH} ${PROG_PREFIX} 64
	@${MAKE} run_pass

run_pass:
	@${OPT} -load=${loadso} -ssh  -debug ${PROG_PREFIX}.ll  -o /dev/null 2>  log
	@${MAKE} check

check:
	@sed -e '/Args:/,/Subtarget features:/d' log > log.mod	
	@sed -e '/Args:/,/Subtarget features:/d'  ${PROG_PREFIX}.gold >  ${PROG_PREFIX}.mod
	@diff -w -q log.mod  ${PROG_PREFIX}.mod
	@if [ $$? != 0  ]; then \
		echo 	"    ${PROG_PREFIX} FAILED" ;\
	fi

	@for file in `ls *.dot` ; do \
	  gold=$$(echo $$file | sed 's/dot/gold/g') ; \
	  diff -w -q  $$gold $$file; \
		if [ $$? != 0  ]; then \
			echo 	"    ${PROG_PREFIX} FAILED" ;\
		fi \
	done  
	@echo "    ${PROG_PREFIX} Pass"
	@${MAKE} run

clean:
	@../utils/clearall.sh
	@rm -rf log *.dot *.mod



