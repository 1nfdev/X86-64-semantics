// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "CF" |-> ( _ => #ifMInt ( (  ( ultMInt(addMInt(MI520, MI519), MI520)  orBool  ultMInt(addMInt(MI520, MI519), MI519) )  orBool  ultMInt(addMInt(MI520, MI519), addMInt(MI520, MI519)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "AF" |-> ( _ => fromBool((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MI520, MI519), addMInt(MI520, MI519)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi):>Bool , 1) )

convToRegKeys(R1) |-> ( MI520 => MI520 )

convToRegKeys(R2) |-> ( MI519 => addMInt(MI520, MI519) )

 "ZF" |-> ( _ => #ifMInt (eqMInt(addMInt(MI520, MI519), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "SF" |-> ( _ => #ifMInt (eqMInt(mi(64, 1), lshrMInt(addMInt(MI520, MI519), 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "PF" |-> ( _ => fromBool((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(MI520, MI519), 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi):>Bool , 1) )

 "OF" |-> ( _ => #ifMInt (eqMInt(mi(64, 2), addMInt(xorMInt(lshrMInt(MI520, 63), lshrMInt(addMInt(MI520, MI519), 63)), xorMInt(lshrMInt(MI519, 63), lshrMInt(addMInt(MI520, MI519), 63)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )


    ...</regstate>
endmodule

module ADDQ-SEMANTICS
  imports ADDQ-R64-R64
endmodule
  