
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> _688:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _686:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _678:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _681:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _682:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _679:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _667:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _680:K@SORT-K String@STRING-SYNTAX(#""RDI"") |-> _691:K@SORT-K String@STRING-SYNTAX(#""YMM14"") |-> _683:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _668:K@SORT-K String@STRING-SYNTAX(#""YMM15"") |-> _684:K@SORT-K String@STRING-SYNTAX(#""RBP"") |-> _693:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _663:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _665:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _655:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _689:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _656:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _687:K@SORT-K String@STRING-SYNTAX(#""RSI"") |-> _690:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _666:K@SORT-K String@STRING-SYNTAX(#""RSP"") |-> _692:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _657:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _671:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _670:K@SORT-K String@STRING-SYNTAX(#""R12"") |-> _659:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _673:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _658:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _672:K@SORT-K String@STRING-SYNTAX(#""R14"") |-> _661:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _675:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _660:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _674:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _664:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _677:K@SORT-K String@STRING-SYNTAX(#""R15"") |-> _662:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _676:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _685:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _669:K@SORT-K   ),, <regstatequeue>(_616:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _626:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _624:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _625:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, typeoperandlist(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(DerivedOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _646:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, _639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _642:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _643:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, _640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, _641:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM14"") |-> mi(Int@INT-SYNTAX(#"256"),, _644:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> mi(Int@INT-SYNTAX(#"256"),, _645:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _653:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _654:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _617:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _652:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _618:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _620:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, _634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _619:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _622:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, _636:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _621:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, _635:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _648:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _649:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, _638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _623:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, _637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> mi(Int@INT-SYNTAX(#"256"),, _630:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
125.96user 2.34system 0:39.21elapsed 327%CPU (0avgtext+0avgdata 1074620maxresident)k
0inputs+3928outputs (0major+82688minor)pagefaults 0swaps
