
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _461:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _463:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _460:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _458:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _465:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _459:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _466:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _457:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _462:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _464:K@SORT-K   ),, <regstatequeue>(_467:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, typeoperandlist(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _456:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
66.08user 4.84system 0:23.48elapsed 301%CPU (0avgtext+0avgdata 1962576maxresident)k
0inputs+3720outputs (0major+77692minor)pagefaults 0swaps
