-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_563:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_569:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_568:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_565:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_564:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _69_572:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _68_571:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _73_576:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _72_575:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _79_582:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _76_579:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _77_580:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _75_578:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _78_581:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _74_577:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _71_574:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _70_573:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _67_570:K@SORT-K   ),, <regstatequeue>(_80_583:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_563:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_569:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_568:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_565:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_564:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_563:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_569:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_568:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_565:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_564:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_563:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_569:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_568:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_565:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_564:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_563:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_569:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_568:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_565:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_564:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vandpd(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm4(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))), updateZeroFlag(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))), updateParityFlag(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))), updateParityFlag(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, MInt@MINT(#"16'0")) String@STRING-SYNTAX(#""RBX"") |-> xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(orMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""SF"") |-> xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_566:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_567:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
131.74user 7.47system 0:35.04elapsed 397%CPU (0avgtext+0avgdata 3036204maxresident)k
0inputs+3896outputs (0major+101564minor)pagefaults 0swaps
