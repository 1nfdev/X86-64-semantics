-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(xchgl(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _69_537:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _75_543:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _68_536:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _71_539:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _72_540:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _70_538:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _73_541:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _67_535:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _74_542:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _76_544:K@SORT-K   ),, <regstatequeue>(_77_545:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(xchgl(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %r8(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r9(.KList@BASIC-K)), execinstr(__(xchgl(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r9(.KList@BASIC-K)), execinstr(__(xchgl(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xchgl(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovew(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%r8w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(bswap(.KList@BASIC-K),, typeoperandlist(%r8d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"))))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"))))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"))))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"))))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"))))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"))))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))))),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
129.73user 8.56system 0:35.43elapsed 390%CPU (0avgtext+0avgdata 3137932maxresident)k
0inputs+3720outputs (0major+90303minor)pagefaults 0swaps
