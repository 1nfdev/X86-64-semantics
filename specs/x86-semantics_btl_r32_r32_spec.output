-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(shrxl(.KList@BASIC-K),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%esi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rsi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_611:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_610:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _71_619:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _77_625:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _70_618:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _73_621:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _75_623:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _72_620:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _69_617:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _74_622:K@SORT-K String@STRING-SYNTAX(#""RSI"") |-> _76_624:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _78_626:K@SORT-K   ),, <regstatequeue>(_79_627:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(shrxl(.KList@BASIC-K),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%esi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rsi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_611:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_610:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%rsi(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_611:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_610:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(ultMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, lshrMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, uvalueMInt(andMInt(xorMInt(MInt@MINT(#"8'32"),, orMInt(MInt@MINT(#"8'32"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for ashrMInt
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
108.57user 4.84system 0:29.65elapsed 382%CPU (0avgtext+0avgdata 2624380maxresident)k
0inputs+3840outputs (0major+129727minor)pagefaults 0swaps
