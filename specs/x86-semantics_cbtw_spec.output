
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movsbq"),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%r8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"10")),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> _500:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _499:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _498:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _501:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _496:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _497:K@SORT-K   ),, <regstatequeue>(_502:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movsbq"),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%r8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"10")),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, %r8(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"10")),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"10")),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'16"),, %r9(.KList@BASIC-K)), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, %xmm1(.KList@BASIC-K)), splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToR32(%xmm1(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %rax(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %rdx(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'16"),, %r8(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %rdx(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'16"),, %r8(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'16"),, %r8(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'16")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"64'16"),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
70.41user 1.71system 0:19.78elapsed 364%CPU (0avgtext+0avgdata 987264maxresident)k
0inputs+3768outputs (0major+81801minor)pagefaults 0swaps
