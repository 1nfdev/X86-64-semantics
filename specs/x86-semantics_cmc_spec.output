-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""CF""),, %rbx(.KList@BASIC-K)), split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _527:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _533:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _526:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _529:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _530:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _528:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _531:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _525:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _532:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _534:K@SORT-K   ),, <regstatequeue>(_535:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""CF""),, %rbx(.KList@BASIC-K)), split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, %r8(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"5"),, %rbx(.KList@BASIC-K)), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"40")), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"39'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"16'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'2"),, addMInt(xorMInt(lshrMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"15")),, lshrMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"15"))),, xorMInt(MInt@MINT(#"16'1"),, lshrMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"15"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, typeoperandlist(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, typeoperandlist(MInt@MINT(#"8'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, typeoperandlist(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, typeoperandlist(MInt@MINT(#"8'0"),, typeoperandlist(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, typeoperandlist(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateZeroFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateSignFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateAuxCarryFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateCarryFlagAdd(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateParityFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateSignFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateAuxCarryFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateCarryFlagAdd(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateParityFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateAuxCarryFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateCarryFlagAdd(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateParityFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateCarryFlagAdd(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateParityFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), updateParityFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))), setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, MInt@MINT(#"8'0")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, MInt@MINT(#"8'0")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, MInt@MINT(#"8'0")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"8'0"),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"24'0"))),, MInt@MINT(#"8'0")),, addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
74.10user 3.81system 0:19.95elapsed 390%CPU (0avgtext+0avgdata 1978840maxresident)k
0inputs+3776outputs (0major+126877minor)pagefaults 0swaps
