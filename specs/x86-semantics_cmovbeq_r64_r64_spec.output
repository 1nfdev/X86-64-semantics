
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(setnbe(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xaddb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmoveq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _527:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _529:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _533:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _539:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _532:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _535:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _534:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _531:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _536:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _537:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _540:K@SORT-K   ),, <regstatequeue>(_541:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setnbe(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xaddb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmoveq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _527:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _529:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xaddb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmoveq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _527:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _529:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _527:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
[Error] Critical: failed to concatenate maps with common keys:
[(String@STRING-SYNTAX(#""RAX""),concatenateMInt(MInt@MINT(#"63'0"),,
#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),,
concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),,
_527:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),,
mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)))),, MInt@MINT(#"32'0")),,
MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),concatenateMInt(MInt@MINT(#"56'0"),,
addMInt(concatenateMInt(MInt@MINT(#"7'0"),,
#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),,
concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),,
_527:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),,
mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)))),, MInt@MINT(#"32'0")),,
MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),,
#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),,
concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),,
_527:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),,
mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX)))),, MInt@MINT(#"32'0")),,
MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))))]
  while evaluating function _Map_
[Warning] Critical: missing SMTLib translation for mi
Command exited with non-zero status 113
54.98user 3.16system 0:14.54elapsed 399%CPU (0avgtext+0avgdata 1641028maxresident)k
0inputs+3616outputs (0major+88691minor)pagefaults 0swaps
