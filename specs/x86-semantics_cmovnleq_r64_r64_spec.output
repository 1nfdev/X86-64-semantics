-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(setnle(.KList@BASIC-K),, typeoperandlist(%r14b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(sarb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%r14b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovnaeq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _547:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _553:K@SORT-K String@STRING-SYNTAX(#""R14"") |-> _550:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _546:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _549:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _552:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _548:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _545:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _551:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _554:K@SORT-K   ),, <regstatequeue>(_555:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setnle(.KList@BASIC-K),, typeoperandlist(%r14b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(sarb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%r14b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovnaeq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%r14b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmovnaeq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> concatenateMInt(MInt@MINT(#"56'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovnaeq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(#ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _543:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX))),, MInt@MINT(#"8'1")),, MInt@MINT(#"8'0")))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for ashrMInt
[Warning] Critical: missing SMTLib translation for mi
91.79user 2.24system 0:26.90elapsed 349%CPU (0avgtext+0avgdata 2108936maxresident)k
0inputs+3704outputs (0major+359851minor)pagefaults 0swaps
