-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovneq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> _71_618:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _69_616:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _70_617:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _72_619:K@SORT-K   ),, <regstatequeue>(_73_620:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovneq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I1_613:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I1_613:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I1_613:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I1_613:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_615:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_614:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
126.99user 9.22system 0:35.59elapsed 382%CPU (0avgtext+0avgdata 3352368maxresident)k
0inputs+3744outputs (0major+164465minor)pagefaults 0swaps
