-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rcx(.KList@BASIC-K)), execinstr(__(cwtl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I5_544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I6_545:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _70_549:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _76_555:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _69_548:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _72_551:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _75_554:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _68_547:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _71_550:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _67_546:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _73_552:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _74_553:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _77_556:K@SORT-K   ),, <regstatequeue>(_78_557:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rcx(.KList@BASIC-K)), execinstr(__(cwtl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I5_544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I6_545:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rcx(.KList@BASIC-K)), execinstr(__(cwtl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I5_544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I6_545:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rcx(.KList@BASIC-K)), execinstr(__(cwtl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(cwtl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cwtl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movzbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(decw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(addb(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'255"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))),, xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'255"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))),, xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'255"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))),, xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'255"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))),, xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'255"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))),, xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'255"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))),, xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'65535") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I4_543:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'255")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
123.46user 9.18system 0:34.48elapsed 384%CPU (0avgtext+0avgdata 3315764maxresident)k
0inputs+3856outputs (0major+89346minor)pagefaults 0swaps
