
InitialTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm1(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %xmm10(.KList@BASIC-K),, %xmm11(.KList@BASIC-K)), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> _450:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _444:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _449:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _446:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _447:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _448:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _442:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _443:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _445:K@SORT-K   ),, <regstatequeue>(_451:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm1(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %xmm10(.KList@BASIC-K),, %xmm11(.KList@BASIC-K)), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))),, %xmm8(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %xmm9(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %xmm10(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm11(.KList@BASIC-K)), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %xmm9(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %xmm10(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm11(.KList@BASIC-K)), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %xmm10(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm11(.KList@BASIC-K)), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm11(.KList@BASIC-K)), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, %ymm1(.KList@BASIC-K)), split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm1(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, %r10(.KList@BASIC-K)), setRegisterValue(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, %r11(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _441:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96"))))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96"))))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96"))))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM10"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""YMM11"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""YMM8"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(extractMInt(extractMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM9"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _440:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96"))))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
71.40user 5.14system 0:24.80elapsed 308%CPU (0avgtext+0avgdata 2156224maxresident)k
0inputs+3720outputs (0major+121590minor)pagefaults 0swaps
