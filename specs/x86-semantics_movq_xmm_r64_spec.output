-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vpor(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movupd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> _73_611:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _74_612:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _70_608:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _69_607:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _71_609:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _72_610:K@SORT-K   ),, <regstatequeue>(_75_613:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vpor(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movupd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vpor(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movupd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vpor(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movupd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movupd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(MInt@MINT(#"64'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_605:Int@INT-SYNTAX),, MInt@MINT(#"64'0"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_606:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
103.60user 7.28system 0:29.00elapsed 382%CPU (0avgtext+0avgdata 2678364maxresident)k
0inputs+3808outputs (0major+88400minor)pagefaults 0swaps
