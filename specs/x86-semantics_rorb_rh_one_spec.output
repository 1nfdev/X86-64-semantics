-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rorb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _540:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _539:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _541:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _544:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _542:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _543:K@SORT-K   ),, <regstatequeue>(_545:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rorb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rorb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%dh(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rorb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, %al(.KList@BASIC-K)), execinstr(__(rorb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(rorb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%ax(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, %rbx(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for ashrMInt
[Warning] Critical: missing SMTLib translation for mi
97.98user 2.90system 0:28.08elapsed 359%CPU (0avgtext+0avgdata 2391128maxresident)k
0inputs+3832outputs (0major+388268minor)pagefaults 0swaps
