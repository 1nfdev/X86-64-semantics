-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%rdx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), split2NToN(%rcx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _69_545:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _68_544:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _74_550:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _77_553:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _75_551:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _78_554:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _76_552:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _80_556:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _72_548:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _73_549:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _79_555:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _71_547:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _70_546:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _67_543:K@SORT-K   ),, <regstatequeue>(_81_557:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rdx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), split2NToN(%rcx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %r10(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r11(.KList@BASIC-K)), split2NToN(%rcx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r11(.KList@BASIC-K)), split2NToN(%rcx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rcx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %r8(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r9(.KList@BASIC-K)), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r9(.KList@BASIC-K)), combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r10b(.KList@BASIC-K),, %r11b(.KList@BASIC-K),, %cx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"8")), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %cx(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, typeoperandlist(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))),, String@STRING-SYNTAX(#""OF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, String@STRING-SYNTAX(#""ZF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, String@STRING-SYNTAX(#""SF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, String@STRING-SYNTAX(#""ZF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, String@STRING-SYNTAX(#""SF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, String@STRING-SYNTAX(#""SF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)),, String@STRING-SYNTAX(#""AF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, String@STRING-SYNTAX(#""CF"")), setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(#ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))),, String@STRING-SYNTAX(#""PF"")), setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(#ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, _-Int_(uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63"))),, Int@INT-SYNTAX(#"1"))),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K)) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"64'0"),, MInt@MINT(#"64'-1"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(ultMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'64")),, #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_541:Int@INT-SYNTAX))),, uvalueMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'1"))) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'0"),, #ifMInt_#then_#else_#fi(eqMInt(andMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_542:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'63")),, MInt@MINT(#"8'1")),, MInt@MINT(#"1'0"),, undef(.KList@BASIC-K))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for ashrMInt
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
156.21user 3.06system 0:41.48elapsed 383%CPU (0avgtext+0avgdata 3084544maxresident)k
0inputs+3904outputs (0major+505044minor)pagefaults 0swaps
