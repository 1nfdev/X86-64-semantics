-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> _74_543:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _70_539:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _73_542:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _68_537:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _69_538:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _67_536:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _71_540:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _72_541:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _75_544:K@SORT-K   ),, <regstatequeue>(_76_545:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rax(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%ebx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX))), updateZeroFlag(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX))), updateParityFlag(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX))), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX))), updateParityFlag(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX))), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX))), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, %rcx(.KList@BASIC-K)), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, %ah(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"8"),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, %rax(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_535:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_534:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for mi
163.12user 3.60system 0:45.31elapsed 367%CPU (0avgtext+0avgdata 2678868maxresident)k
8inputs+3896outputs (0major+432611minor)pagefaults 0swaps
