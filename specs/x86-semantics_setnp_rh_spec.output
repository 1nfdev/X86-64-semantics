
InitialTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> _447:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _443:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _448:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _445:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _441:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _442:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _446:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _444:K@SORT-K   ),, <regstatequeue>(_449:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, %r8w(.KList@BASIC-K)), setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")),, %r9w(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")),, %r9w(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateZeroFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateParityFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateParityFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""ZF""),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %ah(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RAX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RAX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RAX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RAX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _439:Int@INT-SYNTAX),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, MInt@MINT(#"64'-65281")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"8"))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
69.61user 3.87system 0:24.05elapsed 305%CPU (0avgtext+0avgdata 1823688maxresident)k
0inputs+3736outputs (0major+80746minor)pagefaults 0swaps
