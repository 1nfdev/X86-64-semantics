
InitialTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rbx(.KList@BASIC-K)), movPosOfRegToByte(Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R9"") |-> _438:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _440:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _437:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _439:K@SORT-K   ),, <regstatequeue>(_441:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""OF""),, %rbx(.KList@BASIC-K)), movPosOfRegToByte(Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), movPosOfRegToByte(Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movPosOfRegToByte(Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"6"),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %rbx(.KList@BASIC-K),, Int@INT-SYNTAX(#"40")), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, MInt@MINT(#"64'-280375465082881")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, MInt@MINT(#"64'-280375465082881")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, MInt@MINT(#"64'-280375465082881")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, MInt@MINT(#"64'-280375465082881")),, shlMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"24")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _436:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
72.16user 4.71system 0:24.37elapsed 315%CPU (0avgtext+0avgdata 2044008maxresident)k
0inputs+3624outputs (0major+88680minor)pagefaults 0swaps
