
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(Derivedopcode@X86-SYNTAX(#"clc"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _504:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _512:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _516:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _511:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _514:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _513:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _510:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _515:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _517:K@SORT-K   ),, <regstatequeue>(_518:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Derivedopcode@X86-SYNTAX(#"clc"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _504:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'0"),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateZeroFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _509:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _508:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _503:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _507:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
159.26user 4.26system 0:56.84elapsed 287%CPU (0avgtext+0avgdata 2662880maxresident)k
0inputs+3976outputs (0major+113618minor)pagefaults 0swaps
