
InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm3(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> _541:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _524:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _542:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _534:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _530:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _536:K@SORT-K String@STRING-SYNTAX(#""YMM14"") |-> _529:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _533:K@SORT-K String@STRING-SYNTAX(#""YMM15"") |-> _539:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _526:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _531:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _527:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _523:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _528:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _540:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _544:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _543:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _545:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _547:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _537:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _535:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _522:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _546:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _525:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _521:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _532:K@SORT-K   ),, <regstatequeue>(_548:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm3(.KList@BASIC-K),, %r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, %r10(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r11(.KList@BASIC-K)), split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r11(.KList@BASIC-K)), split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, %r8(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _519:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r9(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r11(.KList@BASIC-K),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, typeoperandlist(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), updateSignFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), updateSignFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, %r11(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r8(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"orq"),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, typeoperandlist(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), updateSignFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), updateSignFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))), setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"184"),, Int@INT-SYNTAX(#"192"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R10"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _518:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _520:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
107.76user 2.58system 0:28.67elapsed 384%CPU (0avgtext+0avgdata 1215060maxresident)k
0inputs+3920outputs (0major+92532minor)pagefaults 0swaps
