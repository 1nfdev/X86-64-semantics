
InitialTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm2(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> _468:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _461:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _472:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _469:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _471:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _458:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _459:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _464:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _467:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _475:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _474:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _477:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _462:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _463:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _465:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _476:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _473:K@SORT-K String@STRING-SYNTAX(#""YMM14"") |-> _470:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _478:K@SORT-K String@STRING-SYNTAX(#""YMM15"") |-> _457:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _460:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _456:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _466:K@SORT-K   ),, <regstatequeue>(_479:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm2(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))),, %eax(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %edx(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r8d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %edx(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r8d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r8d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r11(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"vzeroall"),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movslq"),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _454:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
80.38user 4.09system 0:26.81elapsed 315%CPU (0avgtext+0avgdata 2332604maxresident)k
0inputs+3840outputs (0major+144894minor)pagefaults 0swaps
