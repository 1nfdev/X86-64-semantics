-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _539:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _540:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _556:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _545:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _549:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _542:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _546:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _543:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _551:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _544:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _550:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _553:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _552:K@SORT-K String@STRING-SYNTAX(#""YMM14"") |-> _547:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _555:K@SORT-K String@STRING-SYNTAX(#""YMM15"") |-> _548:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _554:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _537:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _541:K@SORT-K   ),, <regstatequeue>(_557:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, %r8(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r9(.KList@BASIC-K)), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r9(.KList@BASIC-K)), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"0")), execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(notb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))),, %rdx(.KList@BASIC-K)), split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%dx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))),, %r8b(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""R9"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"184")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"184")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"184")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"184'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"184")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"184'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"184")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"184'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"184")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"176"),, Int@INT-SYNTAX(#"192")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, xorMInt(MInt@MINT(#"8'255"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"184'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"240"),, Int@INT-SYNTAX(#"248")),, concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"248"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
83.18user 4.75system 0:21.12elapsed 416%CPU (0avgtext+0avgdata 2710496maxresident)k
0inputs+3696outputs (0major+294055minor)pagefaults 0swaps
