

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-38F3-7EE4-0C			    |
; |			    University of Illinois			    |
; +-------------------------------------------------------------------------+
;
; Input	SHA256 : AD052A02711967726712D47CBABAD905C374F91617FAF2E76EC2BAA428A5C732
; Input	MD5    : 8AF692CA14FD5091C512913A5434647C
; Input	CRC32  : 4D38392E

; File Name   :	/home/sdasgup3/Github/binary-decompilation/test/FP/test_1/Output/test_1.clang.o
; Format      :	ELF64 for x86-64 (Relocatable)
;
; Source File :	'test_1.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use64
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl testfunc(__int16	s, float X, char C, __int64 LL,	int I, double D)
		public testfunc
testfunc	proc near		; CODE XREF: main+47p

var_34		= dword	ptr -34h
var_30		= qword	ptr -30h
D		= qword	ptr -28h
I		= dword	ptr -1Ch
LL		= qword	ptr -18h
C		= byte ptr -9
X		= dword	ptr -8
s		= word ptr -2
arg_0		= dword	ptr  10h
arg_8		= qword	ptr  18h

		push	rbp
		mov	rbp, rsp
		sub	rsp, 50h
		mov	al, sil
		mov	r8w, di
		fld	[rbp+arg_8]
		fld	[rbp+arg_0]
		mov	r9, offset format ; "%d, %f, %d, %lld, %d, %f\n"
		mov	[rbp+s], r8w
		fstp	[rbp+X]
		mov	[rbp+C], al
		mov	[rbp+LL], rdx
		mov	[rbp+I], ecx
		fst	[rbp+D]
		movsx	esi, [rbp+s]
		fld	[rbp+X]
		movsx	edx, [rbp+C]
		mov	rcx, [rbp+LL]
		mov	r8d, [rbp+I]
		mov	r10, rsp
		fxch	st(1)
		db	41h
		fstp	qword ptr [r10+8]
		db	41h
		fstp	qword ptr [r10]
		mov	edi, offset format ; "%d, %f, %d, %lld,	%d, %f\n"
		xor	r11d, r11d
		mov	al, r11b
		mov	[rbp+var_30], r9
		call	printf
		mov	[rbp+var_34], eax
		add	rsp, 50h
		pop	rbp
		retn
testfunc	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near		; DATA XREF: .eh_frame:0000000000000104o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	rbp
		mov	rbp, rsp
		sub	rsp, 20h
		mov	eax, 0Ch
		mov	[rbp+var_4], 0
		mov	rcx, rsp
		mov	rdx, 4012000000000000h
		mov	[rcx+8], rdx
		mov	dword ptr [rcx], 3F9F5C29h
		mov	edi, 0Ch	; s
		mov	esi, 78h ; 'x'  ; C
		mov	rdx, 1CBE976802h ; LL
		mov	ecx, 0FFFFFFF6h	; I
		mov	[rbp+var_8], eax
		call	testfunc
		xor	eax, eax
		add	rsp, 20h
		pop	rbp

locret_C3:				; DATA XREF: .eh_frame:0000000000000100o
					; .eh_frame:000000000000011Co
		retn
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rodata_str1_1	segment	byte public 'CONST' use64
		assume cs:_rodata_str1_1
		;org 0C4h
; char format[]
format		db '%d, %f, %d, %lld, %d, %f',0Ah,0 ; DATA XREF: testfunc+15o
					; testfunc+53o
_rodata_str1_1	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame	segment	para public 'CONST' use64
		assume cs:_eh_frame
		;org 0E0h
		db  14h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  7Ah	; z
		db  52h	; R
		db    0
		db    1
		db  78h	; x
		db  10h
		db    1
		db  1Bh
		db  0Ch
		db    7
		db    8
		db  90h	; ê
		db    1
		db    0
		db    0
		db  18h
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		dd offset locret_C3+0FFFFFE3Dh
		dd offset main
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; Ü
		db    2
		db  43h	; C
		db  0Dh
		db    6
		db    0
		db    0
		db    0
		db  18h
		db    0
		db    0
		db    0
		db  38h	; 8
		db    0
		db    0
		db    0
		dd offset locret_C3+0FFFFFE91h
		dq 100E410000000054h
		db  86h	; Ü
		db    2
		db  43h	; C
		db  0Dh
		db    6
		db    0
		db    0
		db    0
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: testfunc+62p


		end
