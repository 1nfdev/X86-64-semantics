; ModuleID = 'Output/test_0.clang.lifted.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%seg_4003b8__init_type = type <{ [23 x i8] }>
%seg_4003d0__plt_type = type <{ [32 x i8] }>
%seg_4003f0__text_type = type <{ [466 x i8] }>
%seg_4005c4__fini_type = type <{ [9 x i8] }>
%seg_4005d0__rodata_type = type <{ [4 x i8], [4 x i8] }>
%seg_4005d8__eh_frame_hdr_type = type <{ [52 x i8] }>
%seg_400610__eh_frame_type = type <{ [244 x i8] }>
%seg_600df8__init_array_type = type <{ i64 }>
%seg_600e00__fini_array_type = type <{ i64 }>
%seg_600e08__jcr_type = type <{ [8 x i8] }>
%seg_600ff0__got_type = type <{ i64, [8 x i8] }>
%seg_601000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_601020__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.Flags, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.Flags }
%struct.ArchState = type { i32, i32, i32, i32 }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.Flags }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.2] }
%struct.anon.2 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8 }
%union.Flags = type { i64 }
%struct.Memory = type opaque
%struct.anon.1 = type { i8, i8 }
%struct.uint8v8_t = type { [8 x i8] }
%struct.uint8v16_t = type { [16 x i8] }
%struct.uint16v8_t = type { [8 x i16] }
%struct.uint8v4_t = type { [4 x i8] }
%struct.int16v4_t = type { [4 x i16] }
%struct.int32v4_t = type { [4 x i32] }
%struct.uint64v2_t = type { [2 x i64] }
%struct.uint128v1_t = type { [1 x i128] }
%"class.(anonymous namespace)::BitMatrix" = type { %"class.std::bitset", [16 x [16 x i8]] }
%"class.std::bitset" = type { %"struct.std::_Base_bitset" }
%"struct.std::_Base_bitset" = type { [4 x i64] }
%struct.anon.4 = type { i32, i32 }
%union.vec128_t = type { %struct.uint128v1_t }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@seg_4003b8__init = internal constant %seg_4003b8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\055\0C \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4003d0__plt = internal constant %seg_4003d0__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%2\0C \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_4003f0__text = internal constant %seg_4003f0__text_type <{ [466 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\C0\05@\00H\C7\C1P\05@\00H\C7\C7\F0\04@\00\FF\15\D6\0B \00\F4\0F\1FD\00\00\B87\10`\00UH-0\10`\00H\83\F8\0EH\89\E5v\1B\B8\00\00\00\00H\85\C0t\11]\BF0\10`\00\FF\E0f\0F\1F\84\00\00\00\00\00]\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00\BE0\10`\00UH\81\EE0\10`\00H\C1\FE\03H\89\E5H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0\10`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\89\0B \00\00u\11UH\89\E5\E8n\FF\FF\FF]\C6\05v\0B \00\01\F3\C3\0F\1F@\00\BF\08\0E`\00H\83?\00u\05\EB\93\0F\1F\00\B8\00\00\00\00H\85\C0t\F1UH\89\E5\FF\D0]\E9z\FF\FF\FFf.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\BF\D4\05@\00\00\00\00\00H\8DE\F0\C7E\FC\00\00\00\00H\89E\E8H\8BE\E8\C7\00\01\00\00\00H\8BE\E8\C7@\04\02\00\00\00H\8BE\E8\8Bp\04\B0\00\E8\AC\FE\FF\FFH\8B}\E8\8Bw\04\89E\E4\89\F0H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00AWAVA\89\FFAUATL\8D%\96\08 \00UH\8D-\96\08 \00SI\89\F6I\89\D5L)\E5H\83\EC\08H\C1\FD\03\E87\FE\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\EAL\89\F6D\89\FFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_4005c4__fini = internal constant %seg_4005c4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_4005d0__rodata = internal constant %seg_4005d0__rodata_type <{ [4 x i8] c"\01\00\02\00", [4 x i8] c"%d\0A\00" }>
@seg_4005d8__eh_frame_hdr = internal constant %seg_4005d8__eh_frame_hdr_type <{ [52 x i8] c"\01\1B\03;4\00\00\00\05\00\00\00\F8\FD\FF\FF\80\00\00\00\18\FE\FF\FFP\00\00\00\18\FF\FF\FF\A8\00\00\00x\FF\FF\FF\C8\00\00\00\E8\FF\FF\FF\10\01\00\00" }>
@seg_400610__eh_frame = internal constant %seg_400610__eh_frame_type <{ [244 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\14\00\00\00\1C\00\00\00\C0\FD\FF\FF+\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00$\00\00\00\1C\00\00\00p\FD\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\1C\00\00\00D\00\00\00h\FE\FF\FFV\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00d\00\00\00\A8\FE\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\14\00\00\00\AC\00\00\00\D0\FE\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_600df8__init_array = internal global %seg_600df8__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004c0_frame_dummy to i64) }>
@seg_600e00__fini_array = internal global %seg_600e00__fini_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004a0___do_global_dtors_aux to i64) }>
@seg_600e08__jcr = internal global %seg_600e08__jcr_type zeroinitializer
@seg_600ff0__got = internal global %seg_600ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), [8 x i8] c"X\10`\00\00\00\00\00" }>
@seg_601000__got_plt = internal global %seg_601000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64) }>
@seg_601020__data = internal global %seg_601020__data_type zeroinitializer
@__bss_start = dllexport global %__bss_start_type zeroinitializer
@0 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_4004c0_frame_dummy
@1 = internal constant void ()* @__mcsema_attach_call
@2 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_4004a0___do_global_dtors_aux
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_4005c0___libc_csu_fini
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_400550___libc_csu_init
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_4004f0_main
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_4003b8__init_proc
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sub_4005c4__term_proc

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L17HandleUnsupportedEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 257) #21
  ret %struct.Memory* %3
}

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(2688), %struct.Memory*, i32) #1

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L24HandleInvalidInstructionEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 12, i32* %3, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = add i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = icmp ult i8 %8, %6
  %11 = icmp ult i8 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = zext i8 %8 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i8 %6, %7
  %22 = xor i8 %21, %8
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i8 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i8 %8, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %7, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = add i8 %7, %6
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = icmp ult i8 %8, %6
  %10 = icmp ult i8 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = zext i8 %8 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i64 %4, %3
  %21 = trunc i64 %20 to i8
  %22 = xor i8 %21, %8
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i8 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i8 %8, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %7, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = add i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = icmp ult i16 %8, %6
  %11 = icmp ult i16 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i16 %8, 255
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i16 %6, %7
  %23 = xor i16 %22, %8
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i16 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i16 %8, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %7, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = add i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i32 %6, %7
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = add i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = icmp ult i64 %7, %6
  %10 = icmp ult i64 %7, %4
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = trunc i64 %7 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %6, %4
  %22 = xor i64 %21, %7
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i64 %7, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i64 %7, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i64 %6, 63
  %34 = lshr i64 %4, 63
  %35 = xor i64 %30, %33
  %36 = xor i64 %30, %34
  %37 = add nuw nsw i64 %35, %36
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %8
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = add i16 %7, %6
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = icmp ult i16 %8, %6
  %10 = icmp ult i16 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = and i16 %8, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i16
  %23 = xor i16 %22, %8
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i16 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i16 %8, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %7, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %8
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i32 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i32 %8, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %7, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = icmp ult i64 %6, %3
  %8 = icmp ult i64 %6, %4
  %9 = or i1 %7, %8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %4, %3
  %20 = xor i64 %19, %6
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i64 %6, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i64 %6, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %28, %31
  %34 = xor i64 %28, %32
  %35 = add nuw nsw i64 %33, %34
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = add i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = icmp ult i8 %8, %6
  %11 = icmp ult i8 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = zext i8 %8 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i8 %6, %7
  %22 = xor i8 %21, %8
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i8 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i8 %8, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %7, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = add i8 %7, %6
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = icmp ult i8 %8, %6
  %10 = icmp ult i8 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = zext i8 %8 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i64 %4, %3
  %21 = trunc i64 %20 to i8
  %22 = xor i8 %21, %8
  %23 = lshr i8 %22, 4
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i8 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i8 %8, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i8 %6, 7
  %32 = lshr i8 %7, 7
  %33 = xor i8 %29, %31
  %34 = xor i8 %29, %32
  %35 = add nuw nsw i8 %33, %34
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = add i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = icmp ult i16 %8, %6
  %11 = icmp ult i16 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i16 %8, 255
  %16 = zext i16 %15 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i16 %6, %7
  %23 = xor i16 %22, %8
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i16 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i16 %8, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %7, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = add i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i32 %6, %7
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = add i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = icmp ult i64 %7, %6
  %10 = icmp ult i64 %7, %4
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = trunc i64 %7 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %6, %4
  %22 = xor i64 %21, %7
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i64 %7, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i64 %7, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i64 %6, 63
  %34 = lshr i64 %4, 63
  %35 = xor i64 %30, %33
  %36 = xor i64 %30, %34
  %37 = add nuw nsw i64 %35, %36
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = add i16 %7, %6
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = icmp ult i16 %8, %6
  %10 = icmp ult i16 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = and i16 %8, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i16
  %23 = xor i16 %22, %8
  %24 = lshr i16 %23, 4
  %25 = trunc i16 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i16 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i16 %8, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i16 %6, 15
  %35 = lshr i16 %7, 15
  %36 = xor i16 %31, %34
  %37 = xor i16 %31, %35
  %38 = add nuw nsw i16 %36, %37
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %4, %3
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %8
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i32 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i32 %8, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i32 %6, 31
  %35 = lshr i32 %7, 31
  %36 = xor i32 %31, %34
  %37 = xor i32 %31, %35
  %38 = add nuw nsw i32 %36, %37
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = icmp ult i64 %6, %3
  %8 = icmp ult i64 %6, %4
  %9 = or i1 %7, %8
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %4, %3
  %20 = xor i64 %19, %6
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i64 %6, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i64 %6, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i64 %3, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %28, %31
  %34 = xor i64 %28, %32
  %35 = add nuw nsw i64 %33, %34
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = add i8 %7, %6
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = icmp ult i8 %8, %6
  %10 = icmp ult i8 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = zext i8 %8 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i8 %7, %6
  %21 = xor i8 %20, %8
  %22 = lshr i8 %21, 4
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i8 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i8 %8, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i8 %6, 7
  %31 = lshr i8 %7, 7
  %32 = xor i8 %28, %30
  %33 = xor i8 %28, %31
  %34 = add nuw nsw i8 %32, %33
  %35 = icmp eq i8 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i16 %7, %6
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = icmp ult i16 %8, %6
  %10 = icmp ult i16 %8, %7
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = and i16 %8, 255
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i16 %7, %6
  %22 = xor i16 %21, %8
  %23 = lshr i16 %22, 4
  %24 = trunc i16 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i16 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i16 %8, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i16 %6, 15
  %34 = lshr i16 %7, 15
  %35 = xor i16 %30, %33
  %36 = xor i16 %30, %34
  %37 = add nuw nsw i16 %35, %36
  %38 = icmp eq i16 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = add i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = icmp ult i32 %8, %6
  %11 = icmp ult i32 %8, %7
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i32 %7, %6
  %22 = xor i32 %21, %8
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i32 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i32 %8, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i32 %6, 31
  %34 = lshr i32 %7, 31
  %35 = xor i32 %30, %33
  %36 = xor i32 %30, %34
  %37 = add nuw nsw i32 %35, %36
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = add i64 %6, %3
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %6
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i64 %6, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %6, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 4
  %13 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 8
  %15 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 12
  %17 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %16) #22
  %18 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19 = insertelement <4 x float> undef, float %11, i32 0
  %20 = insertelement <4 x float> %19, float %13, i32 1
  %21 = insertelement <4 x float> %20, float %15, i32 2
  %22 = insertelement <4 x float> %21, float %17, i32 3
  %23 = fadd <4 x float> %18, %22
  %24 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fadd <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x double> undef, double %8, i32 0
  %12 = insertelement <2 x double> %11, double %10, i32 1
  %13 = fadd <2 x double> %7, %12
  %14 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fadd <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = extractelement <2 x float> %7, i32 0
  %13 = fadd float %12, %11
  %14 = bitcast i8* %2 to float*
  store float %13, float* %14, align 1, !tbaa !871
  %15 = bitcast <2 x float> %7 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i32 1
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1, !tbaa !871
  %19 = extractelement <2 x i32> %10, i32 0
  %20 = getelementptr inbounds i8, i8* %2, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1, !tbaa !871
  %22 = extractelement <2 x i32> %10, i32 1
  %23 = getelementptr inbounds i8, i8* %2, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 %22, i32* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fadd float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1, !tbaa !871
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1, !tbaa !871
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %12 = fadd double %7, %11
  %13 = bitcast i8* %2 to double*
  store double %12, double* %13, align 1, !tbaa !873
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %10, i64* %15, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ADDSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fadd double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1, !tbaa !873
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = sub i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = icmp ult i8 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = zext i8 %8 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i8 %6, %7
  %20 = xor i8 %19, %8
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i8 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %8, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %7, 7
  %31 = xor i8 %29, %30
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = sub i8 %6, %7
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = icmp ult i8 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i64 %4, %3
  %19 = trunc i64 %18 to i8
  %20 = xor i8 %19, %8
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i8 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %8, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %7, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = sub i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = icmp ult i16 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i16 %8, 255
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i16 %6, %7
  %21 = xor i16 %20, %8
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i16 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %8, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %7, 15
  %34 = xor i16 %32, %33
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = sub i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i32 %6, %7
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %31, %32
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = sub i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = icmp ult i64 %6, %4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = trunc i64 %7 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %6, %4
  %20 = xor i64 %19, %7
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i64 %7, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i64 %7, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i64 %6, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %31, %32
  %34 = xor i64 %28, %31
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = sub i16 %6, %7
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = icmp ult i16 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i16
  %21 = xor i16 %20, %8
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i16 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %8, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %7, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %20, %8
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i32 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i32 %8, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i32 %6, 31
  %33 = lshr i32 %7, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = sub i64 %3, %4
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = icmp ult i64 %3, %4
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %4, %3
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i64 %3, 63
  %30 = lshr i64 %4, 63
  %31 = xor i64 %30, %29
  %32 = xor i64 %26, %29
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = sub i8 %6, %7
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = icmp ult i8 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i64 %4, %3
  %19 = trunc i64 %18 to i8
  %20 = xor i8 %19, %8
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i8 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %8, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %7, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = sub i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = icmp ult i8 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = zext i8 %8 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i8 %6, %7
  %20 = xor i8 %19, %8
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i8 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %8, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i8 %6, 7
  %30 = lshr i8 %7, 7
  %31 = xor i8 %29, %30
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = sub i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = icmp ult i16 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i16 %8, 255
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i16 %6, %7
  %21 = xor i16 %20, %8
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i16 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %8, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %7, 15
  %34 = xor i16 %32, %33
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = sub i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i32 %6, %7
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %31, %32
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = sub i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = icmp ult i64 %6, %4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = trunc i64 %7 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %6, %4
  %20 = xor i64 %19, %7
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i64 %7, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i64 %7, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i64 %6, 63
  %32 = lshr i64 %4, 63
  %33 = xor i64 %31, %32
  %34 = xor i64 %28, %31
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = sub i16 %6, %7
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = icmp ult i16 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i16
  %21 = xor i16 %20, %8
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i16 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %8, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i16 %6, 15
  %33 = lshr i16 %7, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %4, %3
  %20 = trunc i64 %19 to i32
  %21 = xor i32 %20, %8
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i32 %8, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i32 %8, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i32 %6, 31
  %33 = lshr i32 %7, 31
  %34 = xor i32 %33, %32
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = sub i64 %3, %4
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = icmp ult i64 %3, %4
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %4, %3
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i64 %3, 63
  %30 = lshr i64 %4, 63
  %31 = xor i64 %30, %29
  %32 = xor i64 %26, %29
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = sub i8 %6, %7
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = icmp ult i8 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = zext i8 %8 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i8 %7, %6
  %19 = xor i8 %18, %8
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i8 %8, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i8 %8, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i8 %6, 7
  %29 = lshr i8 %7, 7
  %30 = xor i8 %29, %28
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = sub i16 %6, %7
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = icmp ult i16 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = and i16 %8, 255
  %13 = zext i16 %12 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i16 %7, %6
  %20 = xor i16 %19, %8
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i16 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i16 %8, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i16 %6, 15
  %32 = lshr i16 %7, 15
  %33 = xor i16 %32, %31
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = sub i32 %6, %7
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = icmp ult i32 %6, %7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i32 %7, %6
  %20 = xor i32 %19, %8
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i32 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i32 %6, 31
  %32 = lshr i32 %7, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = sub i64 %3, %6
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = icmp ugt i64 %6, %3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = trunc i64 %7 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i64 %6, %3
  %19 = xor i64 %18, %7
  %20 = lshr i64 %19, 4
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i64 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i64 %7, 63
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i64 %3, 63
  %31 = lshr i64 %6, 63
  %32 = xor i64 %31, %30
  %33 = xor i64 %27, %30
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 4
  %13 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 8
  %15 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 12
  %17 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %16) #22
  %18 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19 = insertelement <4 x float> undef, float %11, i32 0
  %20 = insertelement <4 x float> %19, float %13, i32 1
  %21 = insertelement <4 x float> %20, float %15, i32 2
  %22 = insertelement <4 x float> %21, float %17, i32 3
  %23 = fsub <4 x float> %18, %22
  %24 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fsub <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x double> undef, double %8, i32 0
  %12 = insertelement <2 x double> %11, double %10, i32 1
  %13 = fsub <2 x double> %7, %12
  %14 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fsub <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = extractelement <2 x float> %7, i32 0
  %13 = fsub float %12, %11
  %14 = bitcast i8* %2 to float*
  store float %13, float* %14, align 1, !tbaa !871
  %15 = bitcast <2 x float> %7 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i32 1
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1, !tbaa !871
  %19 = extractelement <2 x i32> %10, i32 0
  %20 = getelementptr inbounds i8, i8* %2, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1, !tbaa !871
  %22 = extractelement <2 x i32> %10, i32 1
  %23 = getelementptr inbounds i8, i8* %2, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 %22, i32* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fsub float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1, !tbaa !871
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1, !tbaa !871
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %12 = fsub double %7, %11
  %13 = bitcast i8* %2 to double*
  store double %12, double* %13, align 1, !tbaa !873
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %10, i64* %15, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SUBSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fsub double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1, !tbaa !873
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i8
  %7 = sub i8 %5, %6
  %8 = icmp ult i8 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %7 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i8 %5, %6
  %18 = xor i8 %17, %7
  %19 = lshr i8 %18, 4
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i8 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i8 %7, 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1, !tbaa !866
  %27 = lshr i8 %5, 7
  %28 = lshr i8 %6, 7
  %29 = xor i8 %27, %28
  %30 = xor i8 %25, %27
  %31 = add nuw nsw i8 %30, %29
  %32 = icmp eq i8 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i8
  %6 = trunc i64 %3 to i8
  %7 = sub i8 %5, %6
  %8 = icmp ult i8 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %7 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i8
  %19 = xor i8 %18, %7
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i8 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i8 %7, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i8 %5, 7
  %29 = lshr i8 %6, 7
  %30 = xor i8 %29, %28
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i16
  %7 = sub i16 %5, %6
  %8 = icmp ult i16 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i16 %7, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i16 %5, %6
  %19 = xor i16 %18, %7
  %20 = lshr i16 %19, 4
  %21 = trunc i16 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i16 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i16 %7, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i16 %5, 15
  %31 = lshr i16 %6, 15
  %32 = xor i16 %30, %31
  %33 = xor i16 %27, %30
  %34 = add nuw nsw i16 %33, %32
  %35 = icmp eq i16 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i32 %5, %6
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i32 %5, 31
  %30 = lshr i32 %6, 31
  %31 = xor i32 %29, %30
  %32 = xor i32 %26, %29
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %6 = sub i64 %5, %3
  %7 = icmp ult i64 %5, %3
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %5, %3
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i64 %5, 63
  %30 = lshr i64 %3, 63
  %31 = xor i64 %29, %30
  %32 = xor i64 %26, %29
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i16
  %6 = trunc i64 %3 to i16
  %7 = sub i16 %5, %6
  %8 = icmp ult i16 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i16 %7, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i64 %3, %2
  %19 = trunc i64 %18 to i16
  %20 = xor i16 %19, %7
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i16 %7, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i16 %7, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i16 %5, 15
  %32 = lshr i16 %6, 15
  %33 = xor i16 %32, %31
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i32
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i32
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %6, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = sub i64 %2, %3
  %6 = icmp ult i64 %2, %3
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = xor i64 %3, %2
  %17 = xor i64 %16, %5
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i64 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i64 %5, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i64 %2, 63
  %29 = lshr i64 %3, 63
  %30 = xor i64 %29, %28
  %31 = xor i64 %25, %28
  %32 = add nuw nsw i64 %31, %30
  %33 = icmp eq i64 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIhES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i8
  %6 = trunc i64 %3 to i8
  %7 = sub i8 %5, %6
  %8 = icmp ult i8 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %7 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i8
  %19 = xor i8 %18, %7
  %20 = lshr i8 %19, 4
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i8 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i8 %7, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i8 %5, 7
  %29 = lshr i8 %6, 7
  %30 = xor i8 %29, %28
  %31 = xor i8 %26, %28
  %32 = add nuw nsw i8 %31, %30
  %33 = icmp eq i8 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnItES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i16
  %6 = trunc i64 %3 to i16
  %7 = sub i16 %5, %6
  %8 = icmp ult i16 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i16 %7, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i64 %3, %2
  %19 = trunc i64 %18 to i16
  %20 = xor i16 %19, %7
  %21 = lshr i16 %20, 4
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i16 %7, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i16 %7, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i16 %5, 15
  %32 = lshr i16 %6, 15
  %33 = xor i16 %32, %31
  %34 = xor i16 %28, %31
  %35 = add nuw nsw i16 %34, %33
  %36 = icmp eq i16 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i32
  %6 = trunc i64 %3 to i32
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %3, %2
  %18 = trunc i64 %17 to i32
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i32 %5, 31
  %31 = lshr i32 %6, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = sub i64 %2, %3
  %6 = icmp ult i64 %2, %3
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = xor i64 %3, %2
  %17 = xor i64 %16, %5
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i64 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i64 %5, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i64 %2, 63
  %29 = lshr i64 %3, 63
  %30 = xor i64 %29, %28
  %31 = xor i64 %25, %28
  %32 = add nuw nsw i64 %31, %30
  %33 = icmp eq i64 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i8
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = sub i8 %5, %6
  %8 = icmp ult i8 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %7 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i8 %6, %5
  %18 = xor i8 %17, %7
  %19 = lshr i8 %18, 4
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i8 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i8 %7, 7
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1, !tbaa !866
  %27 = lshr i8 %5, 7
  %28 = lshr i8 %6, 7
  %29 = xor i8 %28, %27
  %30 = xor i8 %25, %27
  %31 = add nuw nsw i8 %30, %29
  %32 = icmp eq i8 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i16
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = sub i16 %5, %6
  %8 = icmp ult i16 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i16 %7, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i16 %6, %5
  %19 = xor i16 %18, %7
  %20 = lshr i16 %19, 4
  %21 = trunc i16 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i16 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i16 %7, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i16 %5, 15
  %31 = lshr i16 %6, 15
  %32 = xor i16 %31, %30
  %33 = xor i16 %27, %30
  %34 = add nuw nsw i16 %33, %32
  %35 = icmp eq i16 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = trunc i64 %2 to i32
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = sub i32 %5, %6
  %8 = icmp ult i32 %5, %6
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i32 %6, %5
  %18 = xor i32 %17, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i32 %5, 31
  %30 = lshr i32 %6, 31
  %31 = xor i32 %30, %29
  %32 = xor i32 %26, %29
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = sub i64 %2, %5
  %7 = icmp ugt i64 %5, %2
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i64 %5, %2
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i64 %2, 63
  %30 = lshr i64 %5, 63
  %31 = xor i64 %30, %29
  %32 = xor i64 %26, %29
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULalI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %9 = sext i8 %7 to i16
  %10 = sext i8 %8 to i16
  %11 = mul nsw i16 %10, %9
  %12 = trunc i16 %11 to i8
  store i8 %12, i8* %6, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %14 = lshr i16 %11, 8
  %15 = trunc i16 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = shl i16 %11, 8
  %17 = ashr exact i16 %16, 8
  %18 = icmp ne i16 %17, %11
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !850
  %21 = and i16 %11, 255
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !864
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1, !tbaa !865
  %30 = lshr i8 %12, 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULalI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = trunc i64 %2 to i16
  %9 = sext i8 %7 to i16
  %10 = shl i16 %8, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %9, %11
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %6, align 1, !tbaa !868
  %14 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %15 = lshr i16 %12, 8
  %16 = trunc i16 %15 to i8
  store i8 %16, i8* %14, align 1, !tbaa !868
  %17 = shl i16 %12, 8
  %18 = ashr exact i16 %17, 8
  %19 = icmp ne i16 %18, %12
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1, !tbaa !850
  %22 = and i16 %12, 255
  %23 = zext i16 %22 to i32
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #23
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !863
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !864
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1, !tbaa !865
  %31 = lshr i8 %13, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %8 = sext i16 %6 to i32
  %9 = sext i16 %7 to i32
  %10 = mul nsw i32 %9, %8
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %5, align 2, !tbaa !869
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %13 = bitcast %union.Flags* %12 to i16*
  %14 = lshr i32 %10, 16
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %13, align 2, !tbaa !869
  %16 = shl i32 %10, 16
  %17 = ashr exact i32 %16, 16
  %18 = icmp ne i32 %17, %10
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !850
  %21 = and i32 %10, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !863
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !864
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %11, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %8 = sext i32 %6 to i64
  %9 = sext i32 %7 to i64
  %10 = mul nsw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  %13 = and i64 %10, 4294967295
  store i64 %13, i64* %12, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %15 = lshr i64 %10, 32
  store i64 %15, i64* %14, align 8, !tbaa !870
  %16 = shl i64 %10, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %10
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !850
  %21 = and i32 %11, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !863
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !864
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1, !tbaa !865
  %29 = lshr i32 %11, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %7 = sext i64 %5 to i128
  %8 = and i128 %7, -18446744073709551616
  %9 = sext i64 %6 to i128
  %10 = and i128 %9, -18446744073709551616
  %11 = zext i64 %5 to i128
  %12 = or i128 %8, %11
  %13 = zext i64 %6 to i128
  %14 = or i128 %10, %13
  %15 = mul nsw i128 %14, %12
  %16 = trunc i128 %15 to i64
  store i64 %16, i64* %4, align 8, !tbaa !870
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %18 = lshr i128 %15, 64
  %19 = trunc i128 %18 to i64
  store i64 %19, i64* %17, align 8, !tbaa !870
  %20 = sext i64 %16 to i128
  %21 = icmp ne i128 %20, %15
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %22, i8* %23, align 1, !tbaa !850
  %24 = trunc i128 %15 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #23
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1, !tbaa !863
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1, !tbaa !864
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1, !tbaa !865
  %33 = lshr i64 %16, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %36, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IMULaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = trunc i64 %2 to i32
  %8 = sext i16 %6 to i32
  %9 = shl i32 %7, 16
  %10 = ashr exact i32 %9, 16
  %11 = mul nsw i32 %8, %10
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %5, align 2, !tbaa !869
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %14 = bitcast %union.Flags* %13 to i16*
  %15 = lshr i32 %11, 16
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %14, align 2, !tbaa !869
  %17 = shl i32 %11, 16
  %18 = ashr exact i32 %17, 16
  %19 = icmp ne i32 %18, %11
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1, !tbaa !850
  %22 = and i32 %11, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !864
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1, !tbaa !865
  %30 = lshr i16 %12, 15
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %33, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = sext i32 %6 to i64
  %8 = shl i64 %2, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %7, %9
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  %13 = and i64 %10, 4294967295
  store i64 %13, i64* %12, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %15 = lshr i64 %10, 32
  store i64 %15, i64* %14, align 8, !tbaa !870
  %16 = shl i64 %10, 32
  %17 = ashr exact i64 %16, 32
  %18 = icmp ne i64 %17, %10
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !850
  %21 = and i32 %11, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !863
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !864
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1, !tbaa !865
  %29 = lshr i32 %11, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7IMULraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = sext i64 %5 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %2 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %5 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %2 to i128
  %13 = or i128 %9, %12
  %14 = mul nsw i128 %11, %13
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %4, align 8, !tbaa !870
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %17 = lshr i128 %14, 64
  %18 = trunc i128 %17 to i64
  store i64 %18, i64* %16, align 8, !tbaa !870
  %19 = sext i64 %15 to i128
  %20 = icmp ne i128 %19, %14
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1, !tbaa !850
  %23 = trunc i128 %14 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %30, align 1, !tbaa !864
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %31, align 1, !tbaa !865
  %32 = lshr i64 %15, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !866
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %21, i8* %35, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = sext i8 %6 to i16
  %9 = shl i16 %7, 8
  %10 = ashr exact i16 %9, 8
  %11 = mul nsw i16 %8, %10
  %12 = trunc i16 %11 to i8
  store i8 %12, i8* %2, align 1, !tbaa !868
  %13 = shl i16 %11, 8
  %14 = ashr exact i16 %13, 8
  %15 = icmp ne i16 %14, %11
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i16 %11, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %12, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = sext i16 %6 to i32
  %9 = shl i32 %7, 16
  %10 = ashr exact i32 %9, 16
  %11 = mul nsw i32 %8, %10
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = shl i32 %11, 16
  %14 = ashr exact i32 %13, 16
  %15 = icmp ne i32 %14, %11
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = lshr i16 %12, 15
  %27 = trunc i16 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = sext i32 %6 to i64
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %7, %9
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = sext i64 %6 to i128
  %8 = and i128 %7, -18446744073709551616
  %9 = sext i64 %4 to i128
  %10 = and i128 %9, -18446744073709551616
  %11 = zext i64 %6 to i128
  %12 = or i128 %8, %11
  %13 = zext i64 %4 to i128
  %14 = or i128 %10, %13
  %15 = mul nsw i128 %12, %14
  %16 = trunc i128 %15 to i64
  store i64 %16, i64* %2, align 8, !tbaa !870
  %17 = sext i64 %16 to i128
  %18 = icmp ne i128 %17, %15
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !850
  %21 = trunc i128 %15 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !864
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1, !tbaa !865
  %30 = lshr i64 %16, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %33, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = shl i16 %6, 8
  %9 = ashr exact i16 %8, 8
  %10 = shl i16 %7, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %11, %9
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %2, align 1, !tbaa !868
  %14 = shl i16 %12, 8
  %15 = ashr exact i16 %14, 8
  %16 = icmp ne i16 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !850
  %19 = and i16 %12, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = lshr i8 %13, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = shl i32 %6, 16
  %9 = ashr exact i32 %8, 16
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %9
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %2, align 2, !tbaa !869
  %14 = shl i32 %12, 16
  %15 = ashr exact i32 %14, 16
  %16 = icmp ne i32 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !850
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1, !tbaa !865
  %27 = lshr i16 %13, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = shl i64 %3, 32
  %7 = ashr exact i64 %6, 32
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %9, %7
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %4 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %3 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %4 to i128
  %13 = or i128 %9, %12
  %14 = mul nsw i128 %13, %11
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %2, align 8, !tbaa !870
  %16 = sext i64 %15 to i128
  %17 = icmp ne i128 %16, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !850
  %20 = trunc i128 %14 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !863
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !864
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1, !tbaa !865
  %29 = lshr i64 %15, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = shl i16 %6, 8
  %9 = ashr exact i16 %8, 8
  %10 = sext i8 %7 to i16
  %11 = mul nsw i16 %10, %9
  %12 = trunc i16 %11 to i8
  store i8 %12, i8* %2, align 1, !tbaa !868
  %13 = shl i16 %11, 8
  %14 = ashr exact i16 %13, 8
  %15 = icmp ne i16 %14, %11
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i16 %11, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %12, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = shl i32 %6, 16
  %9 = ashr exact i32 %8, 16
  %10 = sext i16 %7 to i32
  %11 = mul nsw i32 %10, %9
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = shl i32 %11, 16
  %14 = ashr exact i32 %13, 16
  %15 = icmp ne i32 %14, %11
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = lshr i16 %12, 15
  %27 = trunc i16 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = shl i64 %3, 32
  %8 = ashr exact i64 %7, 32
  %9 = sext i32 %6 to i64
  %10 = mul nsw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = sext i64 %3 to i128
  %8 = and i128 %7, -18446744073709551616
  %9 = sext i64 %6 to i128
  %10 = and i128 %9, -18446744073709551616
  %11 = zext i64 %3 to i128
  %12 = or i128 %8, %11
  %13 = zext i64 %6 to i128
  %14 = or i128 %10, %13
  %15 = mul nsw i128 %14, %12
  %16 = trunc i128 %15 to i64
  store i64 %16, i64* %2, align 8, !tbaa !870
  %17 = sext i64 %16 to i128
  %18 = icmp ne i128 %17, %15
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !850
  %21 = trunc i128 %15 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !864
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1, !tbaa !865
  %30 = lshr i64 %16, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %33, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = shl i16 %6, 8
  %9 = ashr exact i16 %8, 8
  %10 = shl i16 %7, 8
  %11 = ashr exact i16 %10, 8
  %12 = mul nsw i16 %11, %9
  %13 = trunc i16 %12 to i8
  store i8 %13, i8* %2, align 1, !tbaa !868
  %14 = shl i16 %12, 8
  %15 = ashr exact i16 %14, 8
  %16 = icmp ne i16 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !850
  %19 = and i16 %12, 255
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = lshr i8 %13, 7
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = shl i32 %6, 16
  %9 = ashr exact i32 %8, 16
  %10 = shl i32 %7, 16
  %11 = ashr exact i32 %10, 16
  %12 = mul nsw i32 %11, %9
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %2, align 2, !tbaa !869
  %14 = shl i32 %12, 16
  %15 = ashr exact i32 %14, 16
  %16 = icmp ne i32 %15, %12
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !850
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1, !tbaa !865
  %27 = lshr i16 %13, 15
  %28 = trunc i16 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = shl i64 %3, 32
  %7 = ashr exact i64 %6, 32
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = mul nsw i64 %9, %7
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = shl i64 %10, 32
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4IMULI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = sext i64 %4 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %3 to i128
  %11 = or i128 %7, %10
  %12 = zext i64 %4 to i128
  %13 = or i128 %9, %12
  %14 = mul nsw i128 %13, %11
  %15 = trunc i128 %14 to i64
  store i64 %15, i64* %2, align 8, !tbaa !870
  %16 = sext i64 %15 to i128
  %17 = icmp ne i128 %16, %14
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !850
  %20 = trunc i128 %14 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !863
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !864
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1, !tbaa !865
  %29 = lshr i64 %15, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULalI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = trunc i64 %2 to i16
  %9 = zext i8 %7 to i16
  %10 = and i16 %8, 255
  %11 = mul nuw i16 %9, %10
  %12 = trunc i16 %11 to i8
  store i8 %12, i8* %6, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %14 = lshr i16 %11, 8
  %15 = trunc i16 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = and i16 %11, 255
  %17 = icmp ne i16 %16, %11
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !850
  %20 = zext i16 %16 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULalI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %9 = zext i8 %7 to i16
  %10 = zext i8 %8 to i16
  %11 = mul nuw i16 %10, %9
  %12 = trunc i16 %11 to i8
  store i8 %12, i8* %6, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %14 = lshr i16 %11, 8
  %15 = trunc i16 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = and i16 %11, 255
  %17 = icmp ne i16 %16, %11
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !850
  %20 = zext i16 %16 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %8 = zext i16 %6 to i32
  %9 = zext i16 %7 to i32
  %10 = mul nuw i32 %9, %8
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %5, align 2, !tbaa !869
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %13 = bitcast %union.Flags* %12 to i16*
  %14 = lshr i32 %10, 16
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %13, align 2, !tbaa !869
  %16 = and i32 %10, 65535
  %17 = icmp ne i32 %16, %10
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !850
  %20 = and i32 %10, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %8 = zext i32 %6 to i64
  %9 = zext i32 %7 to i64
  %10 = mul nuw i64 %9, %8
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  %13 = and i64 %10, 4294967295
  store i64 %13, i64* %12, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %15 = lshr i64 %10, 32
  store i64 %15, i64* %14, align 8, !tbaa !870
  %16 = icmp ne i64 %13, %10
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !850
  %19 = and i32 %11, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1, !tbaa !865
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %27, align 1, !tbaa !866
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %28, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %7 = zext i64 %5 to i128
  %8 = zext i64 %6 to i128
  %9 = mul nuw i128 %8, %7
  %10 = trunc i128 %9 to i64
  store i64 %10, i64* %4, align 8, !tbaa !870
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %12 = and i128 %9, 18446744073709551615
  %13 = lshr i128 %9, 64
  %14 = trunc i128 %13 to i64
  store i64 %14, i64* %11, align 8, !tbaa !870
  %15 = icmp ne i128 %12, %9
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = trunc i128 %9 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %26, align 1, !tbaa !865
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %27, align 1, !tbaa !866
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %28, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = trunc i64 %2 to i32
  %8 = zext i16 %6 to i32
  %9 = and i32 %7, 65535
  %10 = mul nuw i32 %8, %9
  %11 = trunc i32 %10 to i16
  store i16 %11, i16* %5, align 2, !tbaa !869
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %13 = bitcast %union.Flags* %12 to i16*
  %14 = lshr i32 %10, 16
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %13, align 2, !tbaa !869
  %16 = and i32 %10, 65535
  %17 = icmp ne i32 %16, %10
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !850
  %20 = and i32 %10, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = zext i32 %6 to i64
  %8 = and i64 %2, 4294967295
  %9 = mul nuw i64 %7, %8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  %12 = and i64 %9, 4294967295
  store i64 %12, i64* %11, align 8, !tbaa !870
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %14 = lshr i64 %9, 32
  store i64 %14, i64* %13, align 8, !tbaa !870
  %15 = icmp ne i64 %12, %9
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %10, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %26, align 1, !tbaa !866
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %16, i8* %27, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MULraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = zext i64 %5 to i128
  %7 = zext i64 %2 to i128
  %8 = mul nuw i128 %6, %7
  %9 = trunc i128 %8 to i64
  store i64 %9, i64* %4, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %11 = and i128 %8, 18446744073709551615
  %12 = lshr i128 %8, 64
  %13 = trunc i128 %12 to i64
  store i64 %13, i64* %10, align 8, !tbaa !870
  %14 = icmp ne i128 %11, %8
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !850
  %17 = trunc i128 %8 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1, !tbaa !865
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %26, align 1, !tbaa !866
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %15, i8* %27, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64* nocapture, i64) #2 {
  %6 = and i64 %4, 4294967295
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !870
  %9 = and i64 %8, 4294967295
  %10 = mul nuw i64 %9, %6
  %11 = lshr i64 %10, 32
  store i64 %11, i64* %2, align 8, !tbaa !870
  %12 = and i64 %10, 4294967295
  store i64 %12, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory*, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64* nocapture, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !870
  %10 = and i64 %9, 4294967295
  %11 = mul nuw i64 %10, %7
  %12 = lshr i64 %11, 32
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = and i64 %11, 4294967295
  store i64 %13, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2RnImEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64* nocapture, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = zext i64 %4 to i128
  %9 = zext i64 %7 to i128
  %10 = mul nuw i128 %9, %8
  %11 = trunc i128 %10 to i64
  %12 = lshr i128 %10, 64
  %13 = trunc i128 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  store i64 %11, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MULXI3RnWImE2MnImEEEP6MemoryS6_R5StateT_S9_T0_(%struct.Memory*, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64* nocapture, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !870
  %9 = zext i64 %6 to i128
  %10 = zext i64 %8 to i128
  %11 = mul nuw i128 %10, %9
  %12 = trunc i128 %11 to i64
  %13 = lshr i128 %11, 64
  %14 = trunc i128 %13 to i64
  store i64 %14, i64* %2, align 8, !tbaa !870
  store i64 %12, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 4
  %13 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 8
  %15 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 12
  %17 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %16) #22
  %18 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19 = insertelement <4 x float> undef, float %11, i32 0
  %20 = insertelement <4 x float> %19, float %13, i32 1
  %21 = insertelement <4 x float> %20, float %15, i32 2
  %22 = insertelement <4 x float> %21, float %17, i32 3
  %23 = fmul <4 x float> %18, %22
  %24 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fmul <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x double> undef, double %8, i32 0
  %12 = insertelement <2 x double> %11, double %10, i32 1
  %13 = fmul <2 x double> %7, %12
  %14 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fmul <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = extractelement <2 x float> %7, i32 0
  %13 = fmul float %12, %11
  %14 = bitcast i8* %2 to float*
  store float %13, float* %14, align 1, !tbaa !871
  %15 = bitcast <2 x float> %7 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i32 1
  %17 = getelementptr inbounds i8, i8* %2, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1, !tbaa !871
  %19 = extractelement <2 x i32> %10, i32 0
  %20 = getelementptr inbounds i8, i8* %2, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1, !tbaa !871
  %22 = extractelement <2 x i32> %10, i32 1
  %23 = getelementptr inbounds i8, i8* %2, i64 12
  %24 = bitcast i8* %23 to i32*
  store i32 %22, i32* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = extractelement <2 x float> %7, i32 0
  %14 = extractelement <2 x float> %12, i32 0
  %15 = fmul float %13, %14
  %16 = bitcast i8* %2 to float*
  store float %15, float* %16, align 1, !tbaa !871
  %17 = bitcast <2 x float> %7 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  %21 = extractelement <2 x i32> %10, i32 0
  %22 = getelementptr inbounds i8, i8* %2, i64 8
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1, !tbaa !871
  %24 = extractelement <2 x i32> %10, i32 1
  %25 = getelementptr inbounds i8, i8* %2, i64 12
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %12 = fmul double %7, %11
  %13 = bitcast i8* %2 to double*
  store double %12, double* %13, align 1, !tbaa !873
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %10, i64* %15, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MULSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fmul double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1, !tbaa !873
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IDIVaxI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1, !tbaa !878
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %12 = zext i8 %10 to i16
  %13 = shl nuw i16 %12, 8
  %14 = or i16 %13, %8
  %15 = sext i16 %14 to i64
  %16 = sext i8 %11 to i64
  %17 = sdiv i64 %15, %16
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %17 to i8
  %20 = sext i8 %19 to i16
  %21 = icmp eq i16 %18, %20
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %24 = load i64, i64* %23, align 8, !tbaa !870
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %24, %struct.Memory* %0) #21
  br label %35

; <label>:26:                                     ; preds = %3
  %27 = srem i64 %15, %16
  %28 = trunc i64 %27 to i8
  store i8 %19, i8* %6, align 1, !tbaa !868
  store i8 %28, i8* %9, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %29, align 1, !tbaa !850
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %30, align 1, !tbaa !863
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1, !tbaa !864
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1, !tbaa !865
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1, !tbaa !866
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1, !tbaa !867
  br label %35

; <label>:35:                                     ; preds = %26, %22
  %36 = phi %struct.Memory* [ %25, %22 ], [ %0, %26 ]
  ret %struct.Memory* %36
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(2688), i64, %struct.Memory*) #5

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6IDIVaxI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1, !tbaa !878
  %11 = zext i8 %10 to i16
  %12 = shl nuw i16 %11, 8
  %13 = or i16 %12, %8
  %14 = sext i16 %13 to i64
  %15 = shl i64 %2, 56
  %16 = ashr exact i64 %15, 56
  %17 = sdiv i64 %14, %16
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %17 to i8
  %20 = sext i8 %19 to i16
  %21 = icmp eq i16 %18, %20
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %24 = load i64, i64* %23, align 8, !tbaa !870
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %24, %struct.Memory* %0) #21
  br label %35

; <label>:26:                                     ; preds = %3
  %27 = srem i64 %14, %16
  %28 = trunc i64 %27 to i8
  store i8 %19, i8* %6, align 1, !tbaa !868
  store i8 %28, i8* %9, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %29, align 1, !tbaa !850
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %30, align 1, !tbaa !863
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1, !tbaa !864
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1, !tbaa !865
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1, !tbaa !866
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1, !tbaa !867
  br label %35

; <label>:35:                                     ; preds = %26, %22
  %36 = phi %struct.Memory* [ %25, %22 ], [ %0, %26 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8IDIVdxaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %12 = zext i16 %10 to i32
  %13 = shl nuw i32 %12, 16
  %14 = or i32 %13, %7
  %15 = sext i32 %14 to i64
  %16 = sext i16 %11 to i64
  %17 = sdiv i64 %15, %16
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %17 to i16
  %20 = sext i16 %19 to i32
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %24 = load i64, i64* %23, align 8, !tbaa !870
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %24, %struct.Memory* %0) #21
  br label %35

; <label>:26:                                     ; preds = %3
  %27 = srem i64 %15, %16
  %28 = trunc i64 %27 to i16
  store i16 %19, i16* %5, align 2, !tbaa !869
  store i16 %28, i16* %9, align 2, !tbaa !869
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %29, align 1, !tbaa !850
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %30, align 1, !tbaa !863
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1, !tbaa !864
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1, !tbaa !865
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1, !tbaa !866
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1, !tbaa !867
  br label %35

; <label>:35:                                     ; preds = %26, %22
  %36 = phi %struct.Memory* [ %25, %22 ], [ %0, %26 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = zext i32 %10 to i64
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %13 = sext i32 %12 to i64
  %14 = shl nuw i64 %11, 32
  %15 = or i64 %14, %7
  %16 = sdiv i64 %15, %13
  %17 = shl i64 %16, 32
  %18 = ashr exact i64 %17, 32
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !870
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %22, %struct.Memory* %0) #21
  br label %36

; <label>:24:                                     ; preds = %3
  %25 = srem i64 %15, %13
  %26 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  %27 = and i64 %16, 4294967295
  store i64 %27, i64* %26, align 8, !tbaa !870
  %28 = getelementptr inbounds %union.Flags, %union.Flags* %8, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8, !tbaa !870
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1, !tbaa !850
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1, !tbaa !863
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1, !tbaa !864
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1, !tbaa !865
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1, !tbaa !866
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1, !tbaa !867
  br label %36

; <label>:36:                                     ; preds = %24, %20
  %37 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %9 = sext i64 %8 to i128
  %10 = and i128 %9, -18446744073709551616
  %11 = zext i64 %7 to i128
  %12 = shl nuw i128 %11, 64
  %13 = zext i64 %5 to i128
  %14 = or i128 %12, %13
  %15 = zext i64 %8 to i128
  %16 = or i128 %10, %15
  %17 = sdiv i128 %14, %16
  %18 = trunc i128 %17 to i64
  %19 = and i128 %17, 18446744073709551615
  %20 = sext i64 %18 to i128
  %21 = and i128 %20, -18446744073709551616
  %22 = or i128 %21, %19
  %23 = icmp eq i128 %17, %22
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %3
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %26 = load i64, i64* %25, align 8, !tbaa !870
  %27 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %26, %struct.Memory* %0) #21
  br label %37

; <label>:28:                                     ; preds = %3
  %29 = srem i128 %14, %16
  %30 = trunc i128 %29 to i64
  store i64 %18, i64* %4, align 8, !tbaa !870
  store i64 %30, i64* %6, align 8, !tbaa !870
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %31, align 1, !tbaa !850
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %32, align 1, !tbaa !863
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1, !tbaa !864
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %34, align 1, !tbaa !865
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1, !tbaa !866
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1, !tbaa !867
  br label %37

; <label>:37:                                     ; preds = %28, %24
  %38 = phi %struct.Memory* [ %27, %24 ], [ %0, %28 ]
  ret %struct.Memory* %38
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8IDIVdxaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = zext i16 %10 to i32
  %12 = shl nuw i32 %11, 16
  %13 = or i32 %12, %7
  %14 = sext i32 %13 to i64
  %15 = shl i64 %2, 48
  %16 = ashr exact i64 %15, 48
  %17 = sdiv i64 %14, %16
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %17 to i16
  %20 = sext i16 %19 to i32
  %21 = icmp eq i32 %18, %20
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %24 = load i64, i64* %23, align 8, !tbaa !870
  %25 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %24, %struct.Memory* %0) #21
  br label %35

; <label>:26:                                     ; preds = %3
  %27 = srem i64 %14, %16
  %28 = trunc i64 %27 to i16
  store i16 %19, i16* %5, align 2, !tbaa !869
  store i16 %28, i16* %9, align 2, !tbaa !869
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %29, align 1, !tbaa !850
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %30, align 1, !tbaa !863
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %31, align 1, !tbaa !864
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %32, align 1, !tbaa !865
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1, !tbaa !866
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1, !tbaa !867
  br label %35

; <label>:35:                                     ; preds = %26, %22
  %36 = phi %struct.Memory* [ %25, %22 ], [ %0, %26 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = zext i32 %10 to i64
  %12 = shl i64 %2, 32
  %13 = ashr exact i64 %12, 32
  %14 = shl nuw i64 %11, 32
  %15 = or i64 %14, %7
  %16 = sdiv i64 %15, %13
  %17 = shl i64 %16, 32
  %18 = ashr exact i64 %17, 32
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !870
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %22, %struct.Memory* %0) #21
  br label %36

; <label>:24:                                     ; preds = %3
  %25 = srem i64 %15, %13
  %26 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  %27 = and i64 %16, 4294967295
  store i64 %27, i64* %26, align 8, !tbaa !870
  %28 = getelementptr inbounds %union.Flags, %union.Flags* %8, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8, !tbaa !870
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1, !tbaa !850
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1, !tbaa !863
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1, !tbaa !864
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1, !tbaa !865
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1, !tbaa !866
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1, !tbaa !867
  br label %36

; <label>:36:                                     ; preds = %24, %20
  %37 = phi %struct.Memory* [ %23, %20 ], [ %0, %24 ]
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = sext i64 %2 to i128
  %9 = and i128 %8, -18446744073709551616
  %10 = zext i64 %7 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %5 to i128
  %13 = or i128 %11, %12
  %14 = zext i64 %2 to i128
  %15 = or i128 %9, %14
  %16 = sdiv i128 %13, %15
  %17 = trunc i128 %16 to i64
  %18 = and i128 %16, 18446744073709551615
  %19 = sext i64 %17 to i128
  %20 = and i128 %19, -18446744073709551616
  %21 = or i128 %20, %18
  %22 = icmp eq i128 %16, %21
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %3
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !870
  %26 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %25, %struct.Memory* %0) #21
  br label %36

; <label>:27:                                     ; preds = %3
  %28 = srem i128 %13, %15
  %29 = trunc i128 %28 to i64
  store i64 %17, i64* %4, align 8, !tbaa !870
  store i64 %29, i64* %6, align 8, !tbaa !870
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1, !tbaa !850
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1, !tbaa !863
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1, !tbaa !864
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1, !tbaa !865
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1, !tbaa !866
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1, !tbaa !867
  br label %36

; <label>:36:                                     ; preds = %27, %23
  %37 = phi %struct.Memory* [ %26, %23 ], [ %0, %27 ]
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVaxI2MnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1, !tbaa !878
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %12 = zext i8 %11 to i16
  %13 = zext i8 %10 to i16
  %14 = shl nuw i16 %13, 8
  %15 = or i16 %14, %8
  %16 = udiv i16 %15, %12
  %17 = and i16 %16, 255
  %18 = icmp eq i16 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !870
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %21, %struct.Memory* %0) #21
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = trunc i16 %16 to i8
  %25 = urem i16 %15, %12
  %26 = trunc i16 %25 to i8
  store i8 %24, i8* %6, align 1, !tbaa !868
  store i8 %26, i8* %9, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !850
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1, !tbaa !863
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !864
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1, !tbaa !865
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !867
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVaxI2RnIhEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to %struct.anon.1*
  %6 = bitcast %union.Flags* %4 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = zext i8 %7 to i16
  %9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %5, i64 0, i32 1
  %10 = load i8, i8* %9, align 1, !tbaa !878
  %11 = trunc i64 %2 to i16
  %12 = and i16 %11, 255
  %13 = zext i8 %10 to i16
  %14 = shl nuw i16 %13, 8
  %15 = or i16 %14, %8
  %16 = udiv i16 %15, %12
  %17 = and i16 %16, 255
  %18 = icmp eq i16 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !870
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %21, %struct.Memory* %0) #21
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = trunc i16 %16 to i8
  %25 = urem i16 %15, %12
  %26 = trunc i16 %25 to i8
  store i8 %24, i8* %6, align 1, !tbaa !868
  store i8 %26, i8* %9, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !850
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1, !tbaa !863
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !864
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1, !tbaa !865
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !867
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DIVdxaxI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %12 = zext i16 %11 to i32
  %13 = zext i16 %10 to i32
  %14 = shl nuw i32 %13, 16
  %15 = or i32 %14, %7
  %16 = udiv i32 %15, %12
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !870
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %21, %struct.Memory* %0) #21
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = trunc i32 %16 to i16
  %25 = urem i32 %15, %12
  %26 = trunc i32 %25 to i16
  store i16 %24, i16* %5, align 2, !tbaa !869
  store i16 %26, i16* %9, align 2, !tbaa !869
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !850
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1, !tbaa !863
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !864
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1, !tbaa !865
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !867
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = zext i32 %10 to i64
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %13 = zext i32 %12 to i64
  %14 = shl nuw i64 %11, 32
  %15 = or i64 %14, %7
  %16 = udiv i64 %15, %13
  %17 = and i64 %16, 4294967295
  %18 = icmp eq i64 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !870
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %21, %struct.Memory* %0) #21
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = urem i64 %15, %13
  %25 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  store i64 %16, i64* %25, align 8, !tbaa !870
  %26 = getelementptr inbounds %union.Flags, %union.Flags* %8, i64 0, i32 0
  store i64 %24, i64* %26, align 8, !tbaa !870
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !850
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1, !tbaa !863
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !864
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1, !tbaa !865
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !867
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVrdxraxI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %9 = zext i64 %7 to i128
  %10 = shl nuw i128 %9, 64
  %11 = zext i64 %5 to i128
  %12 = or i128 %10, %11
  %13 = zext i64 %8 to i128
  %14 = udiv i128 %12, %13
  %15 = and i128 %14, 18446744073709551615
  %16 = icmp eq i128 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %3
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !870
  %20 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %19, %struct.Memory* %0) #21
  br label %31

; <label>:21:                                     ; preds = %3
  %22 = urem i128 %12, %13
  %23 = trunc i128 %22 to i64
  %24 = trunc i128 %14 to i64
  store i64 %24, i64* %4, align 8, !tbaa !870
  store i64 %23, i64* %6, align 8, !tbaa !870
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %25, align 1, !tbaa !850
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %26, align 1, !tbaa !863
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !864
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %28, align 1, !tbaa !865
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %29, align 1, !tbaa !866
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %30, align 1, !tbaa !867
  br label %31

; <label>:31:                                     ; preds = %21, %17
  %32 = phi %struct.Memory* [ %20, %17 ], [ %0, %21 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DIVdxaxI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = zext i16 %6 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = trunc i64 %2 to i32
  %12 = and i32 %11, 65535
  %13 = zext i16 %10 to i32
  %14 = shl nuw i32 %13, 16
  %15 = or i32 %14, %7
  %16 = udiv i32 %15, %12
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %3
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !870
  %22 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %21, %struct.Memory* %0) #21
  br label %33

; <label>:23:                                     ; preds = %3
  %24 = trunc i32 %16 to i16
  %25 = urem i32 %15, %12
  %26 = trunc i32 %25 to i16
  store i16 %24, i16* %5, align 2, !tbaa !869
  store i16 %26, i16* %9, align 2, !tbaa !869
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !850
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %28, align 1, !tbaa !863
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !864
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %30, align 1, !tbaa !865
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %31, align 1, !tbaa !866
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !867
  br label %33

; <label>:33:                                     ; preds = %23, %19
  %34 = phi %struct.Memory* [ %22, %19 ], [ %0, %23 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = zext i32 %10 to i64
  %12 = and i64 %2, 4294967295
  %13 = shl nuw i64 %11, 32
  %14 = or i64 %13, %7
  %15 = udiv i64 %14, %12
  %16 = and i64 %15, 4294967295
  %17 = icmp eq i64 %15, %16
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %3
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = load i64, i64* %19, align 8, !tbaa !870
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %20, %struct.Memory* %0) #21
  br label %32

; <label>:22:                                     ; preds = %3
  %23 = urem i64 %14, %12
  %24 = getelementptr inbounds %union.Flags, %union.Flags* %4, i64 0, i32 0
  store i64 %15, i64* %24, align 8, !tbaa !870
  %25 = getelementptr inbounds %union.Flags, %union.Flags* %8, i64 0, i32 0
  store i64 %23, i64* %25, align 8, !tbaa !870
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %26, align 1, !tbaa !850
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %27, align 1, !tbaa !863
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !864
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %29, align 1, !tbaa !865
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %30, align 1, !tbaa !866
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %31, align 1, !tbaa !867
  br label %32

; <label>:32:                                     ; preds = %22, %18
  %33 = phi %struct.Memory* [ %21, %18 ], [ %0, %22 ]
  ret %struct.Memory* %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = zext i64 %7 to i128
  %9 = shl nuw i128 %8, 64
  %10 = zext i64 %5 to i128
  %11 = or i128 %9, %10
  %12 = zext i64 %2 to i128
  %13 = udiv i128 %11, %12
  %14 = and i128 %13, 18446744073709551615
  %15 = icmp eq i128 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %3
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !870
  %19 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %18, %struct.Memory* %0) #21
  br label %30

; <label>:20:                                     ; preds = %3
  %21 = urem i128 %11, %12
  %22 = trunc i128 %21 to i64
  %23 = trunc i128 %13 to i64
  store i64 %23, i64* %4, align 8, !tbaa !870
  store i64 %22, i64* %6, align 8, !tbaa !870
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1, !tbaa !850
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %25, align 1, !tbaa !863
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !864
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %27, align 1, !tbaa !865
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %28, align 1, !tbaa !866
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %29, align 1, !tbaa !867
  br label %30

; <label>:30:                                     ; preds = %20, %16
  %31 = phi %struct.Memory* [ %19, %16 ], [ %0, %20 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 4
  %13 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 8
  %15 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 12
  %17 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %16) #22
  %18 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %19 = insertelement <4 x float> undef, float %11, i32 0
  %20 = insertelement <4 x float> %19, float %13, i32 1
  %21 = insertelement <4 x float> %20, float %15, i32 2
  %22 = insertelement <4 x float> %21, float %17, i32 3
  %23 = fdiv <4 x float> %18, %22
  %24 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = bitcast i8* %4 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = shufflevector <2 x float> %7, <2 x float> %10, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <2 x float> %12, <2 x float> %15, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %18 = fdiv <4 x float> %16, %17
  %19 = bitcast i8* %2 to <4 x float>*
  store <4 x float> %18, <4 x float>* %19, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x double> undef, double %8, i32 0
  %12 = insertelement <2 x double> %11, double %10, i32 1
  %13 = fdiv <2 x double> %7, %12
  %14 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %13, <2 x double>* %14, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 1
  %8 = bitcast i8* %4 to <2 x double>*
  %9 = load <2 x double>, <2 x double>* %8, align 1
  %10 = fdiv <2 x double> %7, %9
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVSDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %12 = fdiv double %7, %11
  %13 = bitcast i8* %2 to double*
  store double %12, double* %13, align 1, !tbaa !873
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %10, i64* %15, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DIVSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fdiv double %7, %12
  %14 = bitcast i8* %2 to double*
  store double %13, double* %14, align 1, !tbaa !873
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to i64*
  store i64 %10, i64* %16, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = add i8 %5, 1
  %7 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  %8 = zext i8 %6 to i32
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i8 %6, %5
  %15 = lshr i8 %14, 4
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %17, align 1, !tbaa !864
  %18 = icmp eq i8 %6, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i8 %6, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = lshr i8 %5, 7
  %24 = xor i8 %21, %23
  %25 = add nuw nsw i8 %24, %21
  %26 = icmp eq i8 %25, 2
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %27, i8* %28, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = add i8 %5, 1
  store i8 %6, i8* %2, align 1, !tbaa !868
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #23
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !863
  %13 = xor i8 %6, %5
  %14 = lshr i8 %13, 4
  %15 = and i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %16, align 1, !tbaa !864
  %17 = icmp eq i8 %6, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %6, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = lshr i8 %5, 7
  %23 = xor i8 %20, %22
  %24 = add nuw nsw i8 %23, %20
  %25 = icmp eq i8 %24, 2
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %26, i8* %27, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = add i16 %5, 1
  %7 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  %8 = and i16 %6, 255
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = xor i16 %6, %5
  %16 = lshr i16 %15, 4
  %17 = trunc i16 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1, !tbaa !864
  %20 = icmp eq i16 %6, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1, !tbaa !865
  %23 = lshr i16 %6, 15
  %24 = trunc i16 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1, !tbaa !866
  %26 = lshr i16 %5, 15
  %27 = xor i16 %23, %26
  %28 = add nuw nsw i16 %27, %23
  %29 = icmp eq i16 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = add i32 %5, 1
  %7 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i32 %6, %5
  %15 = lshr i32 %14, 4
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1, !tbaa !864
  %19 = icmp eq i32 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1, !tbaa !865
  %22 = lshr i32 %6, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i32 %5, 31
  %26 = xor i32 %22, %25
  %27 = add nuw nsw i32 %26, %22
  %28 = icmp eq i32 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %5, 1
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = xor i64 %6, %5
  %16 = lshr i64 %15, 4
  %17 = trunc i64 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1, !tbaa !864
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1, !tbaa !865
  %23 = lshr i64 %6, 63
  %24 = trunc i64 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1, !tbaa !866
  %26 = lshr i64 %5, 63
  %27 = xor i64 %23, %26
  %28 = add nuw nsw i64 %27, %23
  %29 = icmp eq i64 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = add i16 %5, 1
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = and i16 %6, 255
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i16 %6, %5
  %15 = lshr i16 %14, 4
  %16 = trunc i16 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1, !tbaa !864
  %19 = icmp eq i16 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1, !tbaa !865
  %22 = lshr i16 %6, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i16 %5, 15
  %26 = xor i16 %22, %25
  %27 = add nuw nsw i16 %26, %22
  %28 = icmp eq i16 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = add i32 %5, 1
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i32 %6, %5
  %15 = lshr i32 %14, 4
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1, !tbaa !864
  %19 = icmp eq i32 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1, !tbaa !865
  %22 = lshr i32 %6, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i32 %5, 31
  %26 = xor i32 %22, %25
  %27 = add nuw nsw i32 %26, %22
  %28 = icmp eq i32 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3INCI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = add i64 %3, 1
  store i64 %5, i64* %2, align 8, !tbaa !870
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #23
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !863
  %13 = xor i64 %5, %3
  %14 = lshr i64 %13, 4
  %15 = trunc i64 %14 to i8
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %17, align 1, !tbaa !864
  %18 = icmp eq i64 %5, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i64 %5, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = lshr i64 %3, 63
  %25 = xor i64 %21, %24
  %26 = add nuw nsw i64 %25, %21
  %27 = icmp eq i64 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = add i8 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  %8 = zext i8 %6 to i32
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i8 %6, %5
  %15 = lshr i8 %14, 4
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %17, align 1, !tbaa !864
  %18 = icmp eq i8 %6, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i8 %6, 7
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = lshr i8 %5, 7
  %24 = xor i8 %21, %23
  %25 = add nuw nsw i8 %24, %23
  %26 = icmp eq i8 %25, 2
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %27, i8* %28, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = add i8 %5, -1
  store i8 %6, i8* %2, align 1, !tbaa !868
  %7 = zext i8 %6 to i32
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #23
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !863

  %13 = xor i8 %6, %5
  %14 = lshr i8 %13, 4
  %15 = and i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %16, align 1, !tbaa !864

  %17 = icmp eq i8 %6, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %6, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = lshr i8 %5, 7
  %23 = xor i8 %20, %22
  %24 = add nuw nsw i8 %23, %22
  %25 = icmp eq i8 %24, 2
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %26, i8* %27, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = add i16 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  %8 = and i16 %6, 255
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = xor i16 %6, %5
  %16 = lshr i16 %15, 4
  %17 = trunc i16 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1, !tbaa !864
  %20 = icmp eq i16 %6, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1, !tbaa !865
  %23 = lshr i16 %6, 15
  %24 = trunc i16 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1, !tbaa !866
  %26 = lshr i16 %5, 15
  %27 = xor i16 %23, %26
  %28 = add nuw nsw i16 %27, %26
  %29 = icmp eq i16 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = add i32 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i32 %6, %5
  %15 = lshr i32 %14, 4
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1, !tbaa !864
  %19 = icmp eq i32 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1, !tbaa !865
  %22 = lshr i32 %6, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i32 %5, 31
  %26 = xor i32 %22, %25
  %27 = add nuw nsw i32 %26, %25
  %28 = icmp eq i32 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = xor i64 %6, %5
  %16 = lshr i64 %15, 4
  %17 = trunc i64 %16 to i8
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1, !tbaa !864
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1, !tbaa !865
  %23 = lshr i64 %6, 63
  %24 = trunc i64 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1, !tbaa !866
  %26 = lshr i64 %5, 63
  %27 = xor i64 %23, %26
  %28 = add nuw nsw i64 %27, %26
  %29 = icmp eq i64 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = add i16 %5, -1
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = and i16 %6, 255
  %8 = zext i16 %7 to i32
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i16 %6, %5
  %15 = lshr i16 %14, 4
  %16 = trunc i16 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1, !tbaa !864
  %19 = icmp eq i16 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1, !tbaa !865
  %22 = lshr i16 %6, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i16 %5, 15
  %26 = xor i16 %22, %25
  %27 = add nuw nsw i16 %26, %25
  %28 = icmp eq i16 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = add i32 %5, -1
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = xor i32 %6, %5
  %15 = lshr i32 %14, 4
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %18, align 1, !tbaa !864
  %19 = icmp eq i32 %6, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1, !tbaa !865
  %22 = lshr i32 %6, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i32 %5, 31
  %26 = xor i32 %22, %25
  %27 = add nuw nsw i32 %26, %25
  %28 = icmp eq i32 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3DECI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = add i64 %3, -1
  store i64 %5, i64* %2, align 8, !tbaa !870
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7) #23
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1, !tbaa !863
  %13 = xor i64 %5, %3
  %14 = lshr i64 %13, 4
  %15 = trunc i64 %14 to i8
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %17, align 1, !tbaa !864
  %18 = icmp eq i64 %5, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i64 %5, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = lshr i64 %3, 63
  %25 = xor i64 %21, %24
  %26 = add nuw nsw i64 %25, %24
  %27 = icmp eq i64 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = sub i8 0, %5
  %7 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  %8 = icmp ne i8 %5, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %6 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i8 %5, %6
  %18 = lshr i8 %17, 4
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1, !tbaa !864
  %21 = icmp eq i8 %5, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1, !tbaa !865
  %24 = lshr i8 %6, 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1, !tbaa !866
  %26 = lshr i8 %5, 7
  %27 = add nuw nsw i8 %24, %26
  %28 = icmp eq i8 %27, 2
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %29, i8* %30, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = sub i8 0, %5
  store i8 %6, i8* %2, align 1, !tbaa !868
  %7 = icmp ne i8 %5, 0
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1, !tbaa !850
  %10 = zext i8 %6 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = xor i8 %5, %6
  %17 = lshr i8 %16, 4
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %19, align 1, !tbaa !864
  %20 = icmp eq i8 %5, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1, !tbaa !865
  %23 = lshr i8 %6, 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1, !tbaa !866
  %25 = lshr i8 %5, 7
  %26 = add nuw nsw i8 %23, %25
  %27 = icmp eq i8 %26, 2
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %29, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = sub i16 0, %5
  %7 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  %8 = icmp ne i16 %5, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i16 %6, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i16 %5, %6
  %19 = lshr i16 %18, 4
  %20 = trunc i16 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i16 %5, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i16 %6, 15
  %27 = trunc i16 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i16 %5, 15
  %30 = add nuw nsw i16 %26, %29
  %31 = icmp eq i16 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = sub i32 0, %5
  %7 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  %8 = icmp ne i32 %5, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i32 %6, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i32 %5, %6
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i32 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i32 %6, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i32 %5, 31
  %29 = add nuw nsw i32 %25, %28
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = sub i64 0, %5
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  %8 = icmp ne i64 %5, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = trunc i64 %6 to i32
  %12 = and i32 %11, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = xor i64 %5, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1, !tbaa !864
  %23 = icmp eq i64 %5, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !865
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i64 %5, 63
  %30 = add nuw nsw i64 %26, %29
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = sub i16 0, %5
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = icmp ne i16 %5, 0
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1, !tbaa !850
  %10 = and i16 %6, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i16 %5, %6
  %18 = lshr i16 %17, 4
  %19 = trunc i16 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i16 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i16 %6, 15
  %26 = trunc i16 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i16 %5, 15
  %29 = add nuw nsw i16 %25, %28
  %30 = icmp eq i16 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = sub i32 0, %5
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = icmp ne i32 %5, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1, !tbaa !850
  %11 = and i32 %6, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = xor i32 %5, %6
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1, !tbaa !864
  %22 = icmp eq i32 %5, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1, !tbaa !865
  %25 = lshr i32 %6, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !866
  %28 = lshr i32 %5, 31
  %29 = add nuw nsw i32 %25, %28
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NEGI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = sub i64 0, %3
  store i64 %5, i64* %2, align 8, !tbaa !870
  %6 = icmp ne i64 %3, 0
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = xor i64 %3, %5
  %17 = lshr i64 %16, 4
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1, !tbaa !864
  %21 = icmp eq i64 %3, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1, !tbaa !865
  %24 = lshr i64 %5, 63
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1, !tbaa !866
  %27 = lshr i64 %3, 63
  %28 = add nuw nsw i64 %24, %27
  %29 = icmp eq i64 %28, 2
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %30, i8* %31, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  %12 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %11) #22
  %13 = icmp ult i8 %6, %7
  %14 = icmp ult i8 %10, %9
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1, !tbaa !868
  %17 = zext i8 %11 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i8 %6, %7
  %24 = xor i8 %23, %11
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %7, 7
  %35 = xor i8 %33, %34
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = icmp ult i8 %6, %7
  %13 = icmp ult i8 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %8, align 1, !tbaa !868
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i64 %4, %3
  %23 = trunc i64 %22 to i8
  %24 = xor i8 %11, %23
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %7, 7
  %35 = xor i8 %34, %33
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  %13 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %12) #22
  %14 = icmp ult i16 %6, %7
  %15 = icmp ult i16 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i16 %12, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = xor i16 %6, %7
  %26 = xor i16 %25, %12
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %7, 15
  %39 = xor i16 %37, %38
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %12) #22
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i32 %6, %7
  %25 = xor i32 %24, %12
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i32 %12, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i32 %12, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i32 %6, 31
  %37 = lshr i32 %7, 31
  %38 = xor i32 %36, %37
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1, !tbaa !850
  %9 = zext i8 %8 to i64
  %10 = sub i64 %6, %4
  %11 = sub i64 %10, %9
  %12 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %11) #22
  %13 = icmp ult i64 %6, %4
  %14 = icmp ult i64 %10, %9
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  %17 = trunc i64 %11 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %6, %4
  %25 = xor i64 %24, %11
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i64 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i64 %11, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i64 %6, 63
  %37 = lshr i64 %4, 63
  %38 = xor i64 %36, %37
  %39 = xor i64 %33, %36
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = icmp ult i16 %6, %7
  %14 = icmp ult i16 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1, !tbaa !868
  %17 = and i16 %12, 255
  %18 = zext i16 %17 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i16
  %26 = xor i16 %12, %25
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %7, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i32
  %26 = xor i32 %12, %25
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i32 %6, 31
  %38 = lshr i32 %7, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = zext i8 %7 to i64
  %9 = sub i64 %3, %4
  %10 = sub i64 %9, %8
  store i64 %10, i64* %2, align 8, !tbaa !870
  %11 = icmp ult i64 %3, %4
  %12 = icmp ult i64 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %6, align 1, !tbaa !868
  %15 = trunc i64 %10 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i64 %4, %3
  %23 = xor i64 %22, %10
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i64 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i64 %10, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i64 %3, 63
  %35 = lshr i64 %4, 63
  %36 = xor i64 %35, %34
  %37 = xor i64 %31, %34
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = icmp ult i8 %6, %7
  %13 = icmp ult i8 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %8, align 1, !tbaa !868
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i64 %4, %3
  %23 = trunc i64 %22 to i8
  %24 = xor i8 %11, %23
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %7, 7
  %35 = xor i8 %34, %33
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  %12 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %11) #22
  %13 = icmp ult i8 %6, %7
  %14 = icmp ult i8 %10, %9
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1, !tbaa !868
  %17 = zext i8 %11 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i8 %6, %7
  %24 = xor i8 %23, %11
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i8 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i8 %11, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i8 %6, 7
  %34 = lshr i8 %7, 7
  %35 = xor i8 %33, %34
  %36 = xor i8 %31, %33
  %37 = add nuw nsw i8 %36, %35
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  %13 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %12) #22
  %14 = icmp ult i16 %6, %7
  %15 = icmp ult i16 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i16 %12, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !863
  %25 = xor i16 %6, %7
  %26 = xor i16 %25, %12
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %7, 15
  %39 = xor i16 %37, %38
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %12) #22
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i32 %6, %7
  %25 = xor i32 %24, %12
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i32 %12, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i32 %12, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i32 %6, 31
  %37 = lshr i32 %7, 31
  %38 = xor i32 %36, %37
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1, !tbaa !850
  %9 = zext i8 %8 to i64
  %10 = sub i64 %6, %4
  %11 = sub i64 %10, %9
  %12 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %11) #22
  %13 = icmp ult i64 %6, %4
  %14 = icmp ult i64 %10, %9
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  %17 = trunc i64 %11 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %6, %4
  %25 = xor i64 %24, %11
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i64 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i64 %11, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i64 %6, 63
  %37 = lshr i64 %4, 63
  %38 = xor i64 %36, %37
  %39 = xor i64 %33, %36
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = icmp ult i16 %6, %7
  %14 = icmp ult i16 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1, !tbaa !868
  %17 = and i16 %12, 255
  %18 = zext i16 %17 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i16
  %26 = xor i16 %12, %25
  %27 = lshr i16 %26, 4
  %28 = trunc i16 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i16 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i16 %12, 15
  %35 = trunc i16 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i16 %6, 15
  %38 = lshr i16 %7, 15
  %39 = xor i16 %38, %37
  %40 = xor i16 %34, %37
  %41 = add nuw nsw i16 %40, %39
  %42 = icmp eq i16 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %4, %3
  %25 = trunc i64 %24 to i32
  %26 = xor i32 %12, %25
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i32 %6, 31
  %38 = lshr i32 %7, 31
  %39 = xor i32 %38, %37
  %40 = xor i32 %34, %37
  %41 = add nuw nsw i32 %40, %39
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = zext i8 %7 to i64
  %9 = sub i64 %3, %4
  %10 = sub i64 %9, %8
  store i64 %10, i64* %2, align 8, !tbaa !870
  %11 = icmp ult i64 %3, %4
  %12 = icmp ult i64 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %6, align 1, !tbaa !868
  %15 = trunc i64 %10 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i64 %4, %3
  %23 = xor i64 %22, %10
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i64 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i64 %10, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i64 %3, 63
  %35 = lshr i64 %4, 63
  %36 = xor i64 %35, %34
  %37 = xor i64 %31, %34
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = sub i8 %6, %7
  %11 = sub i8 %10, %9
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = icmp ult i8 %6, %7
  %13 = icmp ult i8 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %8, align 1, !tbaa !868
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i8 %7, %6
  %23 = xor i8 %22, %11
  %24 = lshr i8 %23, 4
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i8 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i8 %11, 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i8 %6, 7
  %33 = lshr i8 %7, 7
  %34 = xor i8 %33, %32
  %35 = xor i8 %30, %32
  %36 = add nuw nsw i8 %35, %34
  %37 = icmp eq i8 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = sub i16 %6, %7
  %12 = sub i16 %11, %10
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = icmp ult i16 %6, %7
  %14 = icmp ult i16 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %8, align 1, !tbaa !868
  %17 = and i16 %12, 255
  %18 = zext i16 %17 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i16 %7, %6
  %25 = xor i16 %24, %12
  %26 = lshr i16 %25, 4
  %27 = trunc i16 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i16 %12, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i16 %12, 15
  %34 = trunc i16 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i16 %6, 15
  %37 = lshr i16 %7, 15
  %38 = xor i16 %37, %36
  %39 = xor i16 %33, %36
  %40 = add nuw nsw i16 %39, %38
  %41 = icmp eq i16 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = sub i32 %6, %7
  %12 = sub i32 %11, %10
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = icmp ult i32 %6, %7
  %15 = icmp ult i32 %11, %10
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %8, align 1, !tbaa !868
  %18 = and i32 %12, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i32 %7, %6
  %25 = xor i32 %24, %12
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i32 %12, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i32 %12, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i32 %6, 31
  %37 = lshr i32 %7, 31
  %38 = xor i32 %37, %36
  %39 = xor i32 %33, %36
  %40 = add nuw nsw i32 %39, %38
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SBBI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1, !tbaa !850
  %9 = zext i8 %8 to i64
  %10 = sub i64 %3, %6
  %11 = sub i64 %10, %9
  store i64 %11, i64* %2, align 8, !tbaa !870
  %12 = icmp ugt i64 %6, %3
  %13 = icmp ult i64 %10, %9
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %7, align 1, !tbaa !868
  %16 = trunc i64 %11 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i64 %6, %3
  %24 = xor i64 %23, %11
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !864
  %29 = icmp eq i64 %11, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !865
  %32 = lshr i64 %11, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !866
  %35 = lshr i64 %3, 63
  %36 = lshr i64 %6, 63
  %37 = xor i64 %36, %35
  %38 = xor i64 %32, %35
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = add i8 %6, %7
  %11 = add i8 %9, %10
  %12 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %11) #22
  %13 = icmp ult i8 %10, %6
  %14 = icmp ult i8 %10, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %11, %10
  %18 = icmp ult i8 %11, %9
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1, !tbaa !868
  %23 = zext i8 %11 to i32
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #23
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !863
  %29 = xor i8 %6, %7
  %30 = xor i8 %29, %11
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !864
  %34 = icmp eq i8 %11, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !865
  %37 = lshr i8 %11, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !866
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %7, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = add i8 %7, %6
  %11 = add i8 %9, %10
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = icmp ult i8 %10, %6
  %13 = icmp ult i8 %10, %7
  %14 = or i1 %12, %13
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %11, %10
  %17 = icmp ult i8 %11, %9
  %18 = or i1 %16, %17
  br label %19

; <label>:19:                                     ; preds = %15, %5
  %20 = phi i1 [ true, %5 ], [ %18, %15 ]
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %8, align 1, !tbaa !868
  %22 = zext i8 %11 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863

  %28 = xor i64 %4, %3
  %29 = trunc i64 %28 to i8
  %30 = xor i8 %11, %29
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !864

  %34 = icmp eq i8 %11, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !865
  %37 = lshr i8 %11, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !866
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %7, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = add i16 %6, %7
  %12 = add i16 %10, %11
  %13 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %12) #22
  %14 = icmp ult i16 %11, %6
  %15 = icmp ult i16 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i16 %12, %11
  %19 = icmp ult i16 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i16 %12, 255
  %25 = zext i16 %24 to i32
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #23
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1, !tbaa !863
  %31 = xor i16 %6, %7
  %32 = xor i16 %31, %12
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1, !tbaa !864
  %37 = icmp eq i16 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !865
  %40 = lshr i16 %12, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !866
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %7, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = add i32 %6, %7
  %12 = add i32 %10, %11
  %13 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %12) #22
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i32 %6, %7
  %31 = xor i32 %30, %12
  %32 = lshr i32 %31, 4
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1, !tbaa !864
  %36 = icmp eq i32 %12, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1, !tbaa !865
  %39 = lshr i32 %12, 31
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1, !tbaa !866
  %42 = lshr i32 %6, 31
  %43 = lshr i32 %7, 31
  %44 = xor i32 %39, %42
  %45 = xor i32 %39, %43
  %46 = add nuw nsw i32 %44, %45
  %47 = icmp eq i32 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1, !tbaa !850
  %9 = zext i8 %8 to i64
  %10 = add i64 %6, %4
  %11 = add i64 %9, %10
  %12 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %11) #22
  %13 = icmp ult i64 %10, %6
  %14 = icmp ult i64 %10, %4
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i64 %11, %10
  %18 = icmp ult i64 %11, %9
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %7, align 1, !tbaa !868
  %23 = trunc i64 %11 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i64 %6, %4
  %31 = xor i64 %30, %11
  %32 = lshr i64 %31, 4
  %33 = trunc i64 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1, !tbaa !864
  %36 = icmp eq i64 %11, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1, !tbaa !865
  %39 = lshr i64 %11, 63
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1, !tbaa !866
  %42 = lshr i64 %6, 63
  %43 = lshr i64 %4, 63
  %44 = xor i64 %39, %42
  %45 = xor i64 %39, %43
  %46 = add nuw nsw i64 %44, %45
  %47 = icmp eq i64 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = add i16 %7, %6
  %12 = add i16 %10, %11
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = icmp ult i16 %11, %6
  %14 = icmp ult i16 %11, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %12, %11
  %18 = icmp ult i16 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1, !tbaa !868
  %23 = and i16 %12, 255
  %24 = zext i16 %23 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i16
  %32 = xor i16 %12, %31
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1, !tbaa !864
  %37 = icmp eq i16 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !865
  %40 = lshr i16 %12, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !866
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %7, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = add i32 %7, %6
  %12 = add i32 %10, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i32
  %32 = xor i32 %12, %31
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1, !tbaa !864
  %37 = icmp eq i32 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !865
  %40 = lshr i32 %12, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !866
  %43 = lshr i32 %6, 31
  %44 = lshr i32 %7, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = zext i8 %7 to i64
  %9 = add i64 %4, %3
  %10 = add i64 %8, %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  %11 = icmp ult i64 %9, %3
  %12 = icmp ult i64 %9, %4
  %13 = or i1 %11, %12
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i64 %10, %9
  %16 = icmp ult i64 %10, %8
  %17 = or i1 %15, %16
  br label %18

; <label>:18:                                     ; preds = %14, %5
  %19 = phi i1 [ true, %5 ], [ %17, %14 ]
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %6, align 1, !tbaa !868
  %21 = trunc i64 %10 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = xor i64 %4, %3
  %29 = xor i64 %28, %10
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !864
  %34 = icmp eq i64 %10, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !865
  %37 = lshr i64 %10, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !866
  %40 = lshr i64 %3, 63
  %41 = lshr i64 %4, 63
  %42 = xor i64 %37, %40
  %43 = xor i64 %37, %41
  %44 = add nuw nsw i64 %42, %43
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = add i8 %6, %7
  %11 = add i8 %9, %10
  %12 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %11) #22
  %13 = icmp ult i8 %10, %6
  %14 = icmp ult i8 %10, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %11, %10
  %18 = icmp ult i8 %11, %9
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1, !tbaa !868
  %23 = zext i8 %11 to i32
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #23
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !863
  %29 = xor i8 %6, %7
  %30 = xor i8 %29, %11
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !864
  %34 = icmp eq i8 %11, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !865
  %37 = lshr i8 %11, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !866
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %7, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = add i8 %7, %6
  %11 = add i8 %9, %10
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = icmp ult i8 %10, %6
  %13 = icmp ult i8 %10, %7
  %14 = or i1 %12, %13
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %11, %10
  %17 = icmp ult i8 %11, %9
  %18 = or i1 %16, %17
  br label %19

; <label>:19:                                     ; preds = %15, %5
  %20 = phi i1 [ true, %5 ], [ %18, %15 ]
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %8, align 1, !tbaa !868
  %22 = zext i8 %11 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = xor i64 %4, %3
  %29 = trunc i64 %28 to i8
  %30 = xor i8 %11, %29
  %31 = lshr i8 %30, 4
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !864
  %34 = icmp eq i8 %11, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !865
  %37 = lshr i8 %11, 7
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !866
  %39 = lshr i8 %6, 7
  %40 = lshr i8 %7, 7
  %41 = xor i8 %37, %39
  %42 = xor i8 %37, %40
  %43 = add nuw nsw i8 %41, %42
  %44 = icmp eq i8 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = add i16 %6, %7
  %12 = add i16 %10, %11
  %13 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %12) #22
  %14 = icmp ult i16 %11, %6
  %15 = icmp ult i16 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i16 %12, %11
  %19 = icmp ult i16 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i16 %12, 255
  %25 = zext i16 %24 to i32
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #23
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %29, i8* %30, align 1, !tbaa !863
  %31 = xor i16 %6, %7
  %32 = xor i16 %31, %12
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1, !tbaa !864
  %37 = icmp eq i16 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !865
  %40 = lshr i16 %12, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !866
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %7, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = add i32 %6, %7
  %12 = add i32 %10, %11
  %13 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %12) #22
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i32 %6, %7
  %31 = xor i32 %30, %12
  %32 = lshr i32 %31, 4
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1, !tbaa !864
  %36 = icmp eq i32 %12, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1, !tbaa !865
  %39 = lshr i32 %12, 31
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1, !tbaa !866
  %42 = lshr i32 %6, 31
  %43 = lshr i32 %7, 31
  %44 = xor i32 %39, %42
  %45 = xor i32 %39, %43
  %46 = add nuw nsw i32 %44, %45
  %47 = icmp eq i32 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1, !tbaa !867
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1, !tbaa !850
  %9 = zext i8 %8 to i64
  %10 = add i64 %6, %4
  %11 = add i64 %9, %10
  %12 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %11) #22
  %13 = icmp ult i64 %10, %6
  %14 = icmp ult i64 %10, %4
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i64 %11, %10
  %18 = icmp ult i64 %11, %9
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %7, align 1, !tbaa !868
  %23 = trunc i64 %11 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i64 %6, %4
  %31 = xor i64 %30, %11
  %32 = lshr i64 %31, 4
  %33 = trunc i64 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1, !tbaa !864
  %36 = icmp eq i64 %11, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1, !tbaa !865
  %39 = lshr i64 %11, 63
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1, !tbaa !866
  %42 = lshr i64 %6, 63
  %43 = lshr i64 %4, 63
  %44 = xor i64 %39, %42
  %45 = xor i64 %39, %43
  %46 = add nuw nsw i64 %44, %45
  %47 = icmp eq i64 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1, !tbaa !867
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = add i16 %7, %6
  %12 = add i16 %10, %11
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = icmp ult i16 %11, %6
  %14 = icmp ult i16 %11, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %12, %11
  %18 = icmp ult i16 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1, !tbaa !868
  %23 = and i16 %12, 255
  %24 = zext i16 %23 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i16
  %32 = xor i16 %12, %31
  %33 = lshr i16 %32, 4
  %34 = trunc i16 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1, !tbaa !864
  %37 = icmp eq i16 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !865
  %40 = lshr i16 %12, 15
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !866
  %43 = lshr i16 %6, 15
  %44 = lshr i16 %7, 15
  %45 = xor i16 %40, %43
  %46 = xor i16 %40, %44
  %47 = add nuw nsw i16 %45, %46
  %48 = icmp eq i16 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = add i32 %7, %6
  %12 = add i32 %10, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i64 %4, %3
  %31 = trunc i64 %30 to i32
  %32 = xor i32 %12, %31
  %33 = lshr i32 %32, 4
  %34 = trunc i32 %33 to i8
  %35 = and i8 %34, 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %36, align 1, !tbaa !864
  %37 = icmp eq i32 %12, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !865
  %40 = lshr i32 %12, 31
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !866
  %43 = lshr i32 %6, 31
  %44 = lshr i32 %7, 31
  %45 = xor i32 %40, %43
  %46 = xor i32 %40, %44
  %47 = add nuw nsw i32 %45, %46
  %48 = icmp eq i32 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = zext i8 %7 to i64
  %9 = add i64 %4, %3
  %10 = add i64 %8, %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  %11 = icmp ult i64 %9, %3
  %12 = icmp ult i64 %9, %4
  %13 = or i1 %11, %12
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i64 %10, %9
  %16 = icmp ult i64 %10, %8
  %17 = or i1 %15, %16
  br label %18

; <label>:18:                                     ; preds = %14, %5
  %19 = phi i1 [ true, %5 ], [ %17, %14 ]
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %6, align 1, !tbaa !868
  %21 = trunc i64 %10 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = xor i64 %4, %3
  %29 = xor i64 %28, %10
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !864
  %34 = icmp eq i64 %10, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !865
  %37 = lshr i64 %10, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !866
  %40 = lshr i64 %3, 63
  %41 = lshr i64 %4, 63
  %42 = xor i64 %37, %40
  %43 = xor i64 %37, %41
  %44 = add nuw nsw i64 %42, %43
  %45 = icmp eq i64 %44, 2
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %46, i8* %47, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = add i8 %7, %6
  %11 = add i8 %9, %10
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = icmp ult i8 %10, %6
  %13 = icmp ult i8 %10, %7
  %14 = or i1 %12, %13
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %11, %10
  %17 = icmp ult i8 %11, %9
  %18 = or i1 %16, %17
  br label %19

; <label>:19:                                     ; preds = %15, %5
  %20 = phi i1 [ true, %5 ], [ %18, %15 ]
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %8, align 1, !tbaa !868
  %22 = zext i8 %11 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !863
  %28 = xor i8 %7, %6
  %29 = xor i8 %28, %11
  %30 = lshr i8 %29, 4
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !864
  %33 = icmp eq i8 %11, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !865
  %36 = lshr i8 %11, 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !866
  %38 = lshr i8 %6, 7
  %39 = lshr i8 %7, 7
  %40 = xor i8 %36, %38
  %41 = xor i8 %36, %39
  %42 = add nuw nsw i8 %40, %41
  %43 = icmp eq i8 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i16
  %11 = add i16 %7, %6
  %12 = add i16 %10, %11
  store i16 %12, i16* %2, align 2, !tbaa !869
  %13 = icmp ult i16 %11, %6
  %14 = icmp ult i16 %11, %7
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %12, %11
  %18 = icmp ult i16 %12, %10
  %19 = or i1 %17, %18
  br label %20

; <label>:20:                                     ; preds = %16, %5
  %21 = phi i1 [ true, %5 ], [ %19, %16 ]
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %8, align 1, !tbaa !868
  %23 = and i16 %12, 255
  %24 = zext i16 %23 to i32
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i16 %7, %6
  %31 = xor i16 %30, %12
  %32 = lshr i16 %31, 4
  %33 = trunc i16 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1, !tbaa !864
  %36 = icmp eq i16 %12, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1, !tbaa !865
  %39 = lshr i16 %12, 15
  %40 = trunc i16 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1, !tbaa !866
  %42 = lshr i16 %6, 15
  %43 = lshr i16 %7, 15
  %44 = xor i16 %39, %42
  %45 = xor i16 %39, %43
  %46 = add nuw nsw i16 %44, %45
  %47 = icmp eq i16 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = load i8, i8* %8, align 1, !tbaa !850
  %10 = zext i8 %9 to i32
  %11 = add i32 %7, %6
  %12 = add i32 %10, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = icmp ult i32 %11, %6
  %15 = icmp ult i32 %11, %7
  %16 = or i1 %14, %15
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %5
  %18 = icmp ult i32 %12, %11
  %19 = icmp ult i32 %12, %10
  %20 = or i1 %18, %19
  br label %21

; <label>:21:                                     ; preds = %17, %5
  %22 = phi i1 [ true, %5 ], [ %20, %17 ]
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %8, align 1, !tbaa !868
  %24 = and i32 %12, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !863
  %30 = xor i32 %7, %6
  %31 = xor i32 %30, %12
  %32 = lshr i32 %31, 4
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %35, align 1, !tbaa !864
  %36 = icmp eq i32 %12, 0
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %37, i8* %38, align 1, !tbaa !865
  %39 = lshr i32 %12, 31
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %40, i8* %41, align 1, !tbaa !866
  %42 = lshr i32 %6, 31
  %43 = lshr i32 %7, 31
  %44 = xor i32 %39, %42
  %45 = xor i32 %39, %43
  %46 = add nuw nsw i32 %44, %45
  %47 = icmp eq i32 %46, 2
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %48, i8* %49, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ADCI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = load i8, i8* %7, align 1, !tbaa !850
  %9 = zext i8 %8 to i64
  %10 = add i64 %6, %3
  %11 = add i64 %9, %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  %12 = icmp ult i64 %10, %3
  %13 = icmp ult i64 %10, %6
  %14 = or i1 %12, %13
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i64 %11, %10
  %17 = icmp ult i64 %11, %9
  %18 = or i1 %16, %17
  br label %19

; <label>:19:                                     ; preds = %15, %5
  %20 = phi i1 [ true, %5 ], [ %18, %15 ]
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %7, align 1, !tbaa !868
  %22 = trunc i64 %11 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #23
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !863
  %29 = xor i64 %6, %3
  %30 = xor i64 %29, %11
  %31 = lshr i64 %30, 4
  %32 = trunc i64 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1, !tbaa !864
  %35 = icmp eq i64 %11, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %36, i8* %37, align 1, !tbaa !865
  %38 = lshr i64 %11, 63
  %39 = trunc i64 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %39, i8* %40, align 1, !tbaa !866
  %41 = lshr i64 %3, 63
  %42 = lshr i64 %6, 63
  %43 = xor i64 %38, %41
  %44 = xor i64 %38, %42
  %45 = add nuw nsw i64 %43, %44
  %46 = icmp eq i64 %45, 2
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %47, i8* %48, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETBI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETBI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETLI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1, !tbaa !867
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  %12 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %11) #22
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETLI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1, !tbaa !867
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETOI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1, !tbaa !867
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETOI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1, !tbaa !867
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETPI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1, !tbaa !863
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETPI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1, !tbaa !863
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETZI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETZI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETSI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SETSI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNOI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1, !tbaa !867
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNOI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %5 = load i8, i8* %4, align 1, !tbaa !867
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNLI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1, !tbaa !867
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  %13 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %12) #22
  ret %struct.Memory* %13
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNLI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1, !tbaa !867
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNBI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNBI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNZI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNZI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNSI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNSI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1, !tbaa !866
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNPI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1, !tbaa !863
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETNPI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %5 = load i8, i8* %4, align 1, !tbaa !863
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNBEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = or i8 %7, %5
  %9 = icmp eq i8 %8, 0
  %10 = zext i1 %9 to i8
  %11 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %10) #22
  ret %struct.Memory* %11
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNBEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = or i8 %7, %5
  %9 = icmp eq i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETLEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1, !tbaa !866
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1, !tbaa !867
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  %16 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %15) #22
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETLEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1, !tbaa !866
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1, !tbaa !867
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNLEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1, !tbaa !866
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1, !tbaa !867
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  %17 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %16) #22
  ret %struct.Memory* %17
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SETNLEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1, !tbaa !865
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1, !tbaa !866
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1, !tbaa !867
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETBEI3MnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  %11 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %10) #22
  ret %struct.Memory* %11
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5SETBEI3RnWIhEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !850
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 31
  %10 = add i64 %9, %2
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %10) #22
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i8 %11, %7
  %14 = icmp ne i8 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i16
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 8190
  %10 = add i64 %9, %2
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i16 %11, %7
  %14 = icmp ne i16 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 536870908
  %10 = add i64 %9, %2
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %10) #22
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i32 %11, %7
  %14 = icmp ne i32 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = lshr i64 %3, 6
  %8 = shl nuw nsw i64 %7, 3
  %9 = add i64 %8, %2
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = and i64 %10, %6
  %13 = icmp ne i64 %12, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %11, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 31
  %10 = add i64 %9, %2
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %10) #22
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i8 %11, %7
  %14 = icmp ne i8 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i16
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 8190
  %10 = add i64 %9, %2
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i16 %11, %7
  %14 = icmp ne i16 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = trunc i64 %6 to i32
  %8 = lshr i64 %3, 3
  %9 = and i64 %8, 536870908
  %10 = add i64 %9, %2
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %10) #22
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i32 %11, %7
  %14 = icmp ne i32 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTmemI2MnImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = lshr i64 %3, 6
  %8 = shl nuw nsw i64 %7, 3
  %9 = add i64 %8, %2
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = and i64 %10, %6
  %13 = icmp ne i64 %12, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %11, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIhES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 7
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnItES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 15
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 31
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5BTregI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #2 {
  %5 = and i64 %3, 63
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = and i64 %6, %2
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %7, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = or i8 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %13, i8 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i8 %12, %8
  %18 = icmp ne i8 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = or i16 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %13, i16 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i16 %12, %8
  %18 = icmp ne i16 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = or i32 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %13, i32 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i32 %12, %8
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %9, %2
  %13 = or i64 %11, %7
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = and i64 %11, %7
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %15, align 1, !tbaa !868
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2, !tbaa !869
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = or i64 %7, %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = or i8 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %13, i8 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i8 %12, %8
  %18 = icmp ne i8 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = or i16 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %13, i16 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i16 %12, %8
  %18 = icmp ne i16 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = or i32 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %13, i32 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i32 %12, %8
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSmemI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %9, %2
  %13 = or i64 %11, %7
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = and i64 %11, %7
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %15, align 1, !tbaa !868
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2, !tbaa !869
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = or i64 %7, %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTSregI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = or i64 %7, %3
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i8 %8, -1
  %15 = and i8 %12, %14
  %16 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %13, i8 zeroext %15) #22
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i8 %12, %8
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1, !tbaa !868
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i16 %8, -1
  %15 = and i16 %12, %14
  %16 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %13, i16 zeroext %15) #22
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i16 %12, %8
  %19 = icmp ne i16 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1, !tbaa !868
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i32 %8, -1
  %15 = and i32 %12, %14
  %16 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %13, i32 %15) #22
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i32 %12, %8
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1, !tbaa !868
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %9, %2
  %13 = xor i64 %7, -1
  %14 = and i64 %11, %13
  %15 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %11, %7
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %3 to i8
  %7 = and i64 %4, 7
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i8
  %10 = xor i8 %9, -1
  %11 = and i8 %6, %10
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %3 to i16
  %7 = and i64 %4, 15
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i16
  %10 = xor i16 %9, -1
  %11 = and i16 %6, %10
  store i16 %11, i16* %2, align 2, !tbaa !869
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = xor i64 %7, 4294967295
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, -1
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i8 %8, -1
  %15 = and i8 %12, %14
  %16 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %13, i8 zeroext %15) #22
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i8 %12, %8
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1, !tbaa !868
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i16 %8, -1
  %15 = and i16 %12, %14
  %16 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %13, i16 zeroext %15) #22
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i16 %12, %8
  %19 = icmp ne i16 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1, !tbaa !868
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i32 %8, -1
  %15 = and i32 %12, %14
  %16 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %13, i32 %15) #22
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %18 = and i32 %12, %8
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %17, align 1, !tbaa !868
  ret %struct.Memory* %16
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRmemI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %9, %2
  %13 = xor i64 %7, -1
  %14 = and i64 %11, %13
  %15 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i64 %11, %7
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %3 to i8
  %7 = and i64 %4, 7
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i8
  %10 = xor i8 %9, -1
  %11 = and i8 %6, %10
  store i8 %11, i8* %2, align 1, !tbaa !868
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %3 to i16
  %7 = and i64 %4, 15
  %8 = shl i64 1, %7
  %9 = trunc i64 %8 to i16
  %10 = xor i16 %9, -1
  %11 = and i16 %6, %10
  store i16 %11, i16* %2, align 2, !tbaa !869
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %13 = and i64 %8, %3
  %14 = icmp ne i64 %13, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %12, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = xor i64 %7, 4294967295
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTRregI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, -1
  %9 = and i64 %8, %3
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i8 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %13, i8 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i8 %12, %8
  %18 = icmp ne i8 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i16 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %13, i16 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i16 %12, %8
  %18 = icmp ne i16 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i32 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %13, i32 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i32 %12, %8
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %9, %2
  %13 = xor i64 %11, %7
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = and i64 %11, %7
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %15, align 1, !tbaa !868
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2, !tbaa !869
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = xor i64 %7, %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 31
  %11 = add i64 %10, %3
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i8 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %13, i8 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i8 %12, %8
  %18 = icmp ne i8 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i16
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 8190
  %11 = add i64 %10, %3
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i16 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %13, i16 zeroext %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i16 %12, %8
  %18 = icmp ne i16 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %4, 3
  %10 = and i64 %9, 536870908
  %11 = add i64 %10, %3
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %10, %2
  %14 = xor i32 %12, %8
  %15 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %13, i32 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = and i32 %12, %8
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %16, align 1, !tbaa !868
  ret %struct.Memory* %15
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCmemI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = lshr i64 %4, 6
  %9 = shl nuw nsw i64 %8, 3
  %10 = add i64 %9, %3
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %9, %2
  %13 = xor i64 %11, %7
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = and i64 %11, %7
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %15, align 1, !tbaa !868
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 7
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 15
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  %9 = trunc i64 %8 to i16
  store i16 %9, i16* %2, align 2, !tbaa !869
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 31
  %7 = shl i64 1, %6
  %8 = and i64 %3, 4294967295
  %9 = xor i64 %7, %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = and i64 %7, %3
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %10, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6BTCregI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = shl i64 1, %6
  %8 = xor i64 %7, %3
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = and i64 %7, %3
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %9, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8BSWAP_32EP6MemoryR5State3RnWImE2RnIjE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.bswap.i32(i32 %5)
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8BSWAP_64EP6MemoryR5State3RnWImE2RnImE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @llvm.bswap.i64(i64 %3)
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = zext i8 %5 to i32
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #23
  %8 = trunc i32 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1, !tbaa !863
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !864
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !866
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !867
  %15 = and i8 %5, 1
  store i8 %15, i8* %12, align 1, !tbaa !868
  %16 = icmp eq i8 %5, 0
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %9, align 1, !tbaa !868
  %18 = select i1 %16, i8 8, i8 %8
  store i8 %18, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = zext i16 %5 to i32
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #23
  %8 = trunc i32 %7 to i16
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %10, align 1, !tbaa !863
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !864
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !866
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !867
  %15 = trunc i16 %5 to i8
  %16 = and i8 %15, 1
  store i8 %16, i8* %12, align 1, !tbaa !868
  %17 = icmp eq i16 %5, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %9, align 1, !tbaa !868
  %19 = select i1 %17, i16 16, i16 %8
  store i16 %19, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 false) #23
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1, !tbaa !863
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !864
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1, !tbaa !866
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !867
  %13 = trunc i32 %5 to i8
  %14 = and i8 %13, 1
  store i8 %14, i8* %10, align 1, !tbaa !868
  %15 = icmp eq i32 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  %17 = zext i32 %6 to i64
  store i64 %17, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call i64 @llvm.cttz.i64(i64 %5, i1 false) #23
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1, !tbaa !863
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !864
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1, !tbaa !866
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !867
  %13 = trunc i64 %5 to i8
  %14 = and i8 %13, 1
  store i8 %14, i8* %10, align 1, !tbaa !868
  %15 = icmp eq i64 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #23
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1, !tbaa !863
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !864
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !866
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !867
  %16 = and i8 %5, 1
  store i8 %16, i8* %13, align 1, !tbaa !868
  %17 = icmp eq i8 %5, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %10, align 1, !tbaa !868
  %19 = select i1 %17, i8 8, i8 %9
  store i8 %19, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 65535
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #23
  %9 = trunc i32 %8 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1, !tbaa !863
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !864
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !866
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !867
  %16 = trunc i64 %3 to i8
  %17 = and i8 %16, 1
  store i8 %17, i8* %13, align 1, !tbaa !868
  %18 = icmp eq i16 %5, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %10, align 1, !tbaa !868
  %20 = select i1 %18, i16 16, i16 %9
  store i16 %20, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 false) #23
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1, !tbaa !863
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !864
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1, !tbaa !866
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !867
  %13 = trunc i64 %3 to i8
  %14 = and i8 %13, 1
  store i8 %14, i8* %10, align 1, !tbaa !868
  %15 = icmp eq i32 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  %17 = zext i32 %6 to i64
  store i64 %17, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5TZCNTI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @llvm.cttz.i64(i64 %3, i1 false) #23
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %7, align 1, !tbaa !863
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !864
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %10, align 1, !tbaa !866
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %11, align 1, !tbaa !867
  %12 = trunc i64 %3 to i8
  %13 = and i8 %12, 1
  store i8 %13, i8* %9, align 1, !tbaa !868
  %14 = icmp eq i64 %3, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %6, align 1, !tbaa !868
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = zext i8 %5 to i32
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 true) #23
  %8 = add nuw nsw i32 %7, 232
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1, !tbaa !863
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !864
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !866
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !867
  %16 = lshr i8 %5, 7
  store i8 %16, i8* %13, align 1, !tbaa !868
  %17 = icmp eq i8 %5, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %10, align 1, !tbaa !868
  %19 = select i1 %17, i8 8, i8 %9
  store i8 %19, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = zext i16 %5 to i32
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 true) #23
  %8 = add nuw nsw i32 %7, 65520
  %9 = trunc i32 %8 to i16
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %11, align 1, !tbaa !863
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %12, align 1, !tbaa !864
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !866
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !867
  %16 = lshr i16 %5, 15
  %17 = trunc i16 %16 to i8
  store i8 %17, i8* %13, align 1, !tbaa !868
  %18 = icmp eq i16 %5, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %10, align 1, !tbaa !868
  %20 = select i1 %18, i16 16, i16 %9
  store i16 %20, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 false) #23
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1, !tbaa !863
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !864
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1, !tbaa !866
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !867
  %13 = lshr i32 %5, 31
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %10, align 1, !tbaa !868
  %15 = icmp eq i32 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  %17 = zext i32 %6 to i64
  store i64 %17, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call i64 @llvm.ctlz.i64(i64 %5, i1 false) #23
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1, !tbaa !863
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !864
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1, !tbaa !866
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !867
  %13 = lshr i64 %5, 63
  %14 = trunc i64 %13 to i8
  store i8 %14, i8* %10, align 1, !tbaa !868
  %15 = icmp eq i64 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) #23
  %9 = add nuw nsw i32 %8, 232
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %12, align 1, !tbaa !863
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !864
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !866
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1, !tbaa !867
  %17 = lshr i8 %5, 7
  store i8 %17, i8* %14, align 1, !tbaa !868
  %18 = icmp eq i8 %5, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %11, align 1, !tbaa !868
  %20 = select i1 %18, i8 8, i8 %10
  store i8 %20, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 65535
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) #23
  %9 = add nuw nsw i32 %8, 65520
  %10 = trunc i32 %9 to i16
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %12, align 1, !tbaa !863
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1, !tbaa !864
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !866
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %16, align 1, !tbaa !867
  %17 = lshr i16 %5, 15
  %18 = trunc i16 %17 to i8
  store i8 %18, i8* %14, align 1, !tbaa !868
  %19 = icmp eq i16 %5, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %11, align 1, !tbaa !868
  %21 = select i1 %19, i16 16, i16 %10
  store i16 %21, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 false) #23
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %8, align 1, !tbaa !863
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !864
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %11, align 1, !tbaa !866
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !867
  %13 = lshr i32 %5, 31
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %10, align 1, !tbaa !868
  %15 = icmp eq i32 %5, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !868
  %17 = zext i32 %6 to i64
  store i64 %17, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LZCNTI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @llvm.ctlz.i64(i64 %3, i1 false) #23
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %7, align 1, !tbaa !863
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !864
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %10, align 1, !tbaa !866
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %11, align 1, !tbaa !867
  %12 = lshr i64 %3, 63
  %13 = trunc i64 %12 to i8
  store i8 %13, i8* %9, align 1, !tbaa !868
  %14 = icmp eq i64 %3, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %6, align 1, !tbaa !868
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = zext i8 %5 to i32
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 true) #23
  %8 = add nuw nsw i32 %7, 232
  %9 = trunc i32 %8 to i8
  %10 = sub i8 8, %9
  %11 = add i8 %10, -1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = icmp eq i8 %5, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %12, align 1, !tbaa !868
  %15 = load i8, i8* %2, align 1, !tbaa !868
  %16 = select i1 %13, i8 %15, i8 %11
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %20 = zext i8 %11 to i32
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #23
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %19, align 1, !tbaa !868
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %26, align 1, !tbaa !868
  store i8 %16, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = zext i16 %5 to i32
  %7 = tail call i32 @llvm.ctlz.i32(i32 %6, i1 true) #23
  %8 = add nuw nsw i32 %7, 65520
  %9 = trunc i32 %8 to i16
  %10 = sub i16 16, %9
  %11 = add i16 %10, -1
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = icmp eq i16 %5, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %12, align 1, !tbaa !868
  %15 = load i16, i16* %2, align 2, !tbaa !869
  %16 = select i1 %13, i16 %15, i16 %11
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %20 = and i16 %11, 255
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %19, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !868
  store i16 %16, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 true) #23
  %7 = sub nsw i32 32, %6
  %8 = add nsw i32 %7, -1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = icmp eq i32 %5, 0
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %9, align 1, !tbaa !868
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = zext i32 %8 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1, !tbaa !868
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = and i32 %8, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %17, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1, !tbaa !868
  store i64 %14, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call i64 @llvm.ctlz.i64(i64 %5, i1 true) #23
  %7 = sub nsw i64 64, %6
  %8 = add nsw i64 %7, -1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = icmp eq i64 %5, 0
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %9, align 1, !tbaa !868
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %10, i64 %12, i64 %8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %17 = trunc i64 %8 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %16, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1, !tbaa !868
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 255
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) #23
  %9 = add nuw nsw i32 %8, 232
  %10 = trunc i32 %9 to i8
  %11 = sub i8 8, %10
  %12 = add i8 %11, -1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = icmp eq i8 %5, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = load i8, i8* %2, align 1, !tbaa !868
  %17 = select i1 %14, i8 %16, i8 %12
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1, !tbaa !868
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = zext i8 %12 to i32
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %20, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %27, align 1, !tbaa !868
  store i8 %17, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = trunc i64 %3 to i32
  %7 = and i32 %6, 65535
  %8 = tail call i32 @llvm.ctlz.i32(i32 %7, i1 true) #23
  %9 = add nuw nsw i32 %8, 65520
  %10 = trunc i32 %9 to i16
  %11 = sub i16 16, %10
  %12 = add i16 %11, -1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = icmp eq i16 %5, 0
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = load i16, i16* %2, align 2, !tbaa !869
  %17 = select i1 %14, i16 %16, i16 %12
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1, !tbaa !868
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = and i16 %12, 255
  %22 = zext i16 %21 to i32
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !868
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1, !tbaa !868
  store i16 %17, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = tail call i32 @llvm.ctlz.i32(i32 %5, i1 true) #23
  %7 = sub nsw i32 32, %6
  %8 = add nsw i32 %7, -1
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %10 = icmp eq i32 %5, 0
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %9, align 1, !tbaa !868
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = zext i32 %8 to i64
  %14 = select i1 %10, i64 %12, i64 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1, !tbaa !868
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = and i32 %8, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %17, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1, !tbaa !868
  store i64 %14, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSRI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @llvm.ctlz.i64(i64 %3, i1 true) #23
  %6 = sub nsw i64 64, %5
  %7 = add nsw i64 %6, -1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %9 = icmp eq i64 %3, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %8, align 1, !tbaa !868
  %11 = load i64, i64* %2, align 8, !tbaa !870
  %12 = select i1 %9, i64 %11, i64 %7
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1, !tbaa !868
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %16 = trunc i64 %7 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %15, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1, !tbaa !868
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i8 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = zext i8 %5 to i32
  %11 = tail call i32 @llvm.cttz.i32(i32 %10, i1 true) #23
  %12 = trunc i32 %11 to i8
  %13 = select i1 %7, i8 %9, i8 %12
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %17 = zext i8 %13 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %16, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1, !tbaa !868
  store i8 %13, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i16 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = zext i16 %5 to i32
  %11 = tail call i32 @llvm.cttz.i32(i32 %10, i1 true) #23
  %12 = trunc i32 %11 to i16
  %13 = select i1 %7, i16 %9, i16 %12
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %17 = and i16 %13, 255
  %18 = zext i16 %17 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %16, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1, !tbaa !868
  store i16 %13, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i32 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #23
  %11 = zext i32 %10 to i64
  %12 = select i1 %7, i64 %9, i64 %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1, !tbaa !868
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %15, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1, !tbaa !868
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i64 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = tail call i64 @llvm.cttz.i64(i64 %5, i1 true) #23
  %11 = select i1 %7, i64 %9, i64 %10
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %12, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !868
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  store i8 %20, i8* %14, align 1, !tbaa !868
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %22, align 1, !tbaa !868
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i8
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i8 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = trunc i64 %3 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) #23
  %13 = trunc i32 %12 to i8
  %14 = select i1 %7, i8 %9, i8 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1, !tbaa !868
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = zext i8 %14 to i32
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %17, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %24, align 1, !tbaa !868
  store i8 %14, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i16 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = trunc i64 %3 to i32
  %11 = and i32 %10, 65535
  %12 = tail call i32 @llvm.cttz.i32(i32 %11, i1 true) #23
  %13 = trunc i32 %12 to i16
  %14 = select i1 %7, i16 %9, i16 %13
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %15, align 1, !tbaa !868
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1, !tbaa !868
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %18 = and i16 %14, 255
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #23
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  store i8 %23, i8* %17, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !868
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %25, align 1, !tbaa !868
  store i16 %14, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = icmp eq i32 %5, 0
  %8 = zext i1 %7 to i8
  store i8 %8, i8* %6, align 1, !tbaa !868
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #23
  %11 = zext i32 %10 to i64
  %12 = select i1 %7, i64 %9, i64 %11
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1, !tbaa !868
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %14, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %15, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %23, align 1, !tbaa !868
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3BSFI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = icmp eq i64 %3, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %5, align 1, !tbaa !868
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = tail call i64 @llvm.cttz.i64(i64 %3, i1 true) #23
  %10 = select i1 %6, i64 %8, i64 %9
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %11, align 1, !tbaa !868
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %13, align 1, !tbaa !868
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1, !tbaa !868
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %21, align 1, !tbaa !868
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -8
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %7, i64 %3) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %9, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2MnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -8
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %7, i64 %3) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %8, i64 %2) #22
  store i64 %10, i64* %9, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2RnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -8
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %7, i64 %3) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %9, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7RET_IMMEP6MemoryR5State2InItE(%struct.Memory* returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %6) #22
  store i64 %7, i64* %4, align 8, !tbaa !870
  %8 = and i64 %2, 65535
  %9 = add nuw nsw i64 %8, 8
  %10 = add i64 %9, %6
  store i64 %10, i64* %5, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  store i64 %6, i64* %3, align 8, !tbaa !870
  %7 = add i64 %5, 8
  store i64 %7, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %12 = load i8, i8* %2, align 1, !tbaa !868
  %13 = select i1 %10, i8 %11, i8 %12
  store i8 %13, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %12 = load i16, i16* %2, align 2, !tbaa !869
  %13 = select i1 %10, i16 %11, i16 %12
  store i16 %13, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = trunc i64 %12 to i32
  %14 = select i1 %10, i32 %11, i32 %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %10, i64 %11, i64 %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = trunc i64 %3 to i8
  %12 = load i8, i8* %2, align 1, !tbaa !868
  %13 = select i1 %10, i8 %11, i8 %12
  store i8 %13, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = trunc i64 %3 to i16
  %12 = load i16, i16* %2, align 2, !tbaa !869
  %13 = select i1 %10, i16 %11, i16 %12
  store i16 %13, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %2, align 8, !tbaa !870
  %12 = select i1 %10, i64 %3, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVBEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %2, align 8, !tbaa !870
  %12 = select i1 %10, i64 %3, i64 %11
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %17 = load i8, i8* %2, align 1, !tbaa !868
  %18 = select i1 %15, i8 %16, i8 %17
  store i8 %18, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %17 = load i16, i16* %2, align 2, !tbaa !869
  %18 = select i1 %15, i16 %16, i16 %17
  store i16 %18, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %17 = load i64, i64* %2, align 8, !tbaa !870
  %18 = trunc i64 %17 to i32
  %19 = select i1 %15, i32 %16, i32 %18
  %20 = zext i32 %19 to i64
  store i64 %20, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %17 = load i64, i64* %2, align 8, !tbaa !870
  %18 = select i1 %15, i64 %16, i64 %17
  store i64 %18, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = trunc i64 %3 to i8
  %17 = load i8, i8* %2, align 1, !tbaa !868
  %18 = select i1 %15, i8 %16, i8 %17
  store i8 %18, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = trunc i64 %3 to i16
  %17 = load i16, i16* %2, align 2, !tbaa !869
  %18 = select i1 %15, i16 %16, i16 %17
  store i16 %18, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = load i64, i64* %2, align 8, !tbaa !870
  %17 = select i1 %15, i64 %3, i64 %16
  %18 = and i64 %17, 4294967295
  store i64 %18, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVLEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = or i1 %7, %14
  %16 = load i64, i64* %2, align 8, !tbaa !870
  %17 = select i1 %15, i64 %3, i64 %16
  store i64 %17, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %18 = load i8, i8* %2, align 1, !tbaa !868
  %19 = select i1 %16, i8 %17, i8 %18
  store i8 %19, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %18 = load i16, i16* %2, align 2, !tbaa !869
  %19 = select i1 %16, i16 %17, i16 %18
  store i16 %19, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %18 = load i64, i64* %2, align 8, !tbaa !870
  %19 = trunc i64 %18 to i32
  %20 = select i1 %16, i32 %17, i32 %19
  %21 = zext i32 %20 to i64
  store i64 %21, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %18 = load i64, i64* %2, align 8, !tbaa !870
  %19 = select i1 %16, i64 %17, i64 %18
  store i64 %19, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = trunc i64 %3 to i8
  %18 = load i8, i8* %2, align 1, !tbaa !868
  %19 = select i1 %16, i8 %17, i8 %18
  store i8 %19, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = trunc i64 %3 to i16
  %18 = load i16, i16* %2, align 2, !tbaa !869
  %19 = select i1 %16, i16 %17, i16 %18
  store i16 %19, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = load i64, i64* %2, align 8, !tbaa !870
  %18 = select i1 %16, i64 %3, i64 %17
  %19 = and i64 %18, 4294967295
  store i64 %19, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNLEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %9 = load i8, i8* %8, align 1, !tbaa !866
  %10 = icmp ne i8 %9, 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %12 = load i8, i8* %11, align 1, !tbaa !867
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %10, %13
  %15 = xor i1 %14, true
  %16 = and i1 %7, %15
  %17 = load i64, i64* %2, align 8, !tbaa !870
  %18 = select i1 %16, i64 %3, i64 %17
  store i64 %18, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNPI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNZI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNSI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNOI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %13 = load i8, i8* %2, align 1, !tbaa !868
  %14 = select i1 %11, i8 %13, i8 %12
  store i8 %14, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %13 = load i16, i16* %2, align 2, !tbaa !869
  %14 = select i1 %11, i16 %13, i16 %12
  store i16 %14, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %13 = load i64, i64* %2, align 8, !tbaa !870
  %14 = trunc i64 %13 to i32
  %15 = select i1 %11, i32 %14, i32 %12
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %13 = load i64, i64* %2, align 8, !tbaa !870
  %14 = select i1 %11, i64 %13, i64 %12
  store i64 %14, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i8
  %13 = load i8, i8* %2, align 1, !tbaa !868
  %14 = select i1 %11, i8 %13, i8 %12
  store i8 %14, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i16
  %13 = load i16, i16* %2, align 2, !tbaa !869
  %14 = select i1 %11, i16 %13, i16 %12
  store i16 %14, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %11, i64 %12, i64 %3
  %14 = and i64 %13, 4294967295
  store i64 %14, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNLI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %11, i64 %12, i64 %3
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CMOVNBI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVOI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %6 = load i8, i8* %5, align 1, !tbaa !867
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVZI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVPI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVSI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %13 = load i8, i8* %2, align 1, !tbaa !868
  %14 = select i1 %11, i8 %12, i8 %13
  store i8 %14, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %13 = load i16, i16* %2, align 2, !tbaa !869
  %14 = select i1 %11, i16 %12, i16 %13
  store i16 %14, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %13 = load i64, i64* %2, align 8, !tbaa !870
  %14 = trunc i64 %13 to i32
  %15 = select i1 %11, i32 %12, i32 %14
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %13 = load i64, i64* %2, align 8, !tbaa !870
  %14 = select i1 %11, i64 %12, i64 %13
  store i64 %14, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i8
  %13 = load i8, i8* %2, align 1, !tbaa !868
  %14 = select i1 %11, i8 %12, i8 %13
  store i8 %14, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = trunc i64 %3 to i16
  %13 = load i16, i16* %2, align 2, !tbaa !869
  %14 = select i1 %11, i16 %12, i16 %13
  store i16 %14, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %11, i64 %3, i64 %12
  %14 = and i64 %13, 4294967295
  store i64 %14, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVLI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %6 = load i8, i8* %5, align 1, !tbaa !866
  %7 = icmp ne i8 %6, 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %9 = load i8, i8* %8, align 1, !tbaa !867
  %10 = icmp ne i8 %9, 0
  %11 = xor i1 %7, %10
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %11, i64 %3, i64 %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = trunc i64 %9 to i32
  %11 = select i1 %7, i32 %8, i32 %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %9 = load i64, i64* %2, align 8, !tbaa !870
  %10 = select i1 %7, i64 %8, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i8
  %9 = load i8, i8* %2, align 1, !tbaa !868
  %10 = select i1 %7, i8 %8, i8 %9
  store i8 %10, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = trunc i64 %3 to i16
  %9 = load i16, i16* %2, align 2, !tbaa !869
  %10 = select i1 %7, i16 %8, i16 %9
  store i16 %10, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  %10 = and i64 %9, 4294967295
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMOVBI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = load i64, i64* %2, align 8, !tbaa !870
  %9 = select i1 %7, i64 %3, i64 %8
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %12 = load i8, i8* %2, align 1, !tbaa !868
  %13 = select i1 %10, i8 %11, i8 %12
  store i8 %13, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %12 = load i16, i16* %2, align 2, !tbaa !869
  %13 = select i1 %10, i16 %11, i16 %12
  store i16 %13, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = trunc i64 %12 to i32
  %14 = select i1 %10, i32 %11, i32 %13
  %15 = zext i32 %14 to i64
  store i64 %15, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %12 = load i64, i64* %2, align 8, !tbaa !870
  %13 = select i1 %10, i64 %11, i64 %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = trunc i64 %3 to i8
  %12 = load i8, i8* %2, align 1, !tbaa !868
  %13 = select i1 %10, i8 %11, i8 %12
  store i8 %13, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = trunc i64 %3 to i16
  %12 = load i16, i16* %2, align 2, !tbaa !869
  %13 = select i1 %10, i16 %11, i16 %12
  store i16 %13, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %2, align 8, !tbaa !870
  %12 = select i1 %10, i64 %3, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CMOVNBEI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = load i64, i64* %2, align 8, !tbaa !870
  %12 = select i1 %10, i64 %3, i64 %11
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVNPI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp eq i8 %6, 0
  %8 = load double, double* %2, align 8, !tbaa !873
  %9 = select i1 %7, double %3, double %8
  store double %9, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVNBI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp eq i8 %6, 0
  %8 = load double, double* %2, align 8, !tbaa !873
  %9 = select i1 %7, double %3, double %8
  store double %9, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVNZI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp eq i8 %6, 0
  %8 = load double, double* %2, align 8, !tbaa !873
  %9 = select i1 %7, double %3, double %8
  store double %9, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FCMOVBEI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp ne i8 %9, 0
  %11 = load double, double* %2, align 8, !tbaa !873
  %12 = select i1 %10, double %3, double %11
  store double %12, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FCMOVNBEI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %8 = load i8, i8* %7, align 1, !tbaa !865
  %9 = or i8 %8, %6
  %10 = icmp eq i8 %9, 0
  %11 = load double, double* %2, align 8, !tbaa !873
  %12 = select i1 %10, double %3, double %11
  store double %12, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCMOVPI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %6 = load i8, i8* %5, align 1, !tbaa !863
  %7 = icmp ne i8 %6, 0
  %8 = load double, double* %2, align 8, !tbaa !873
  %9 = select i1 %7, double %3, double %8
  store double %9, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCMOVZI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %6 = load i8, i8* %5, align 1, !tbaa !865
  %7 = icmp ne i8 %6, 0
  %8 = load double, double* %2, align 8, !tbaa !873
  %9 = select i1 %7, double %3, double %8
  store double %9, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FCMOVBI3RnWIdE2RnIdEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), double* nocapture, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  %7 = icmp ne i8 %6, 0
  %8 = load double, double* %2, align 8, !tbaa !873
  %9 = select i1 %7, double %3, double %8
  store double %9, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4JNLEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %10 = load i8, i8* %9, align 1, !tbaa !866
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %13 = load i8, i8* %12, align 1, !tbaa !867
  %14 = icmp ne i8 %13, 0
  %15 = xor i1 %11, %14
  %16 = xor i1 %15, true
  %17 = and i1 %8, %16
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %2, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %20 = select i1 %17, i64 %3, i64 %4
  store i64 %20, i64* %19, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNSEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1, !tbaa !866
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1, !tbaa !866
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %10 = load i8, i8* %9, align 1, !tbaa !867
  %11 = icmp ne i8 %10, 0
  %12 = xor i1 %8, %11
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %2, align 1, !tbaa !868
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %15 = select i1 %12, i64 %3, i64 %4
  store i64 %15, i64* %14, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNPEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %7 = load i8, i8* %6, align 1, !tbaa !863
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNBEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNOEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %7 = load i8, i8* %6, align 1, !tbaa !867
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JNLEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1, !tbaa !866
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %10 = load i8, i8* %9, align 1, !tbaa !867
  %11 = icmp ne i8 %10, 0
  %12 = xor i1 %8, %11
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1, !tbaa !868
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %12, i64 %4, i64 %3
  store i64 %16, i64* %15, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4JNBEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1, !tbaa !865
  %10 = or i8 %9, %7
  %11 = icmp eq i8 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %14 = select i1 %11, i64 %3, i64 %4
  store i64 %14, i64* %13, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JBEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1, !tbaa !865
  %10 = or i8 %9, %7
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1, !tbaa !868
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %14 = select i1 %11, i64 %3, i64 %4
  store i64 %14, i64* %13, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JPEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %7 = load i8, i8* %6, align 1, !tbaa !863
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JSEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1, !tbaa !866
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JOEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %7 = load i8, i8* %6, align 1, !tbaa !867
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2JBEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %7 = load i8, i8* %6, align 1, !tbaa !850
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = icmp ne i8 %7, 0
  %10 = select i1 %9, i64 %3, i64 %4
  store i64 %10, i64* %8, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JLEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1, !tbaa !865
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %10 = load i8, i8* %9, align 1, !tbaa !866
  %11 = icmp ne i8 %10, 0
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %13 = load i8, i8* %12, align 1, !tbaa !867
  %14 = icmp ne i8 %13, 0
  %15 = xor i1 %11, %14
  %16 = or i1 %8, %15
  %17 = zext i1 %16 to i8
  store i8 %17, i8* %2, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %19 = select i1 %16, i64 %3, i64 %4
  store i64 %19, i64* %18, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4JCXZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.Flags* %6 to i16*
  %8 = load i16, i16* %7, align 8, !tbaa !869
  %9 = icmp eq i16 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1, !tbaa !868
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5JECXZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %7 = bitcast %union.Flags* %6 to i32*
  %8 = load i32, i32* %7, align 8, !tbaa !877
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1, !tbaa !868
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5JRCXZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = icmp eq i64 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %2, align 1, !tbaa !868
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = select i1 %8, i64 %3, i64 %4
  store i64 %11, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4LOOPEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = add i64 %7, -1
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %2, align 1, !tbaa !868
  store i64 %8, i64* %6, align 8, !tbaa !870
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5LOOPEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = add i64 %7, -1
  %9 = icmp ne i64 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = load i8, i8* %10, align 1, !tbaa !865
  %12 = icmp ne i8 %11, 0
  %13 = and i1 %9, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1, !tbaa !868
  store i64 %8, i64* %6, align 8, !tbaa !870
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %13, i64 %3, i64 %4
  store i64 %16, i64* %15, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6LOOPNEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = add i64 %7, -1
  %9 = icmp ne i64 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %11 = load i8, i8* %10, align 1, !tbaa !865
  %12 = icmp eq i8 %11, 0
  %13 = and i1 %9, %12
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %2, align 1, !tbaa !868
  store i64 %8, i64* %6, align 8, !tbaa !870
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = select i1 %13, i64 %3, i64 %4
  store i64 %16, i64* %15, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CBW_ALEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = bitcast %union.Flags* %3 to i16*
  %5 = bitcast %union.Flags* %3 to i8*
  %6 = load i8, i8* %5, align 8, !tbaa !875
  %7 = sext i8 %6 to i16
  store i16 %7, i16* %4, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CWDE_AXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %union.Flags, %union.Flags* %3, i64 0, i32 0
  %5 = bitcast %union.Flags* %3 to i16*
  %6 = load i16, i16* %5, align 8, !tbaa !869
  %7 = sext i16 %6 to i64
  %8 = and i64 %7, 4294967295
  store i64 %8, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CDQE_EAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %union.Flags, %union.Flags* %3, i64 0, i32 0
  %5 = bitcast %union.Flags* %3 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = sext i32 %6 to i64
  store i64 %7, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6CWD_AXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %4 = bitcast %union.Flags* %3 to i16*
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i16*
  %7 = load i16, i16* %6, align 8, !tbaa !869
  %8 = sext i16 %7 to i64
  %9 = lshr i64 %8, 16
  %10 = trunc i64 %9 to i16
  store i16 %10, i16* %4, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CDQ_EAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 8, !tbaa !877
  %7 = sext i32 %6 to i64
  %8 = lshr i64 %7, 32
  store i64 %8, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7CQO_RAXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = ashr i64 %5, 63
  store i64 %6, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PDI3MVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 4
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %6) #22
  %8 = sitofp i32 %5 to double
  %9 = sitofp i32 %7 to double
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %2 to double*
  store double %8, double* %11, align 1, !tbaa !873
  %12 = bitcast i8* %10 to double*
  store double %9, double* %12, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PDI3RVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %8 = sitofp i32 %5 to double
  %9 = sitofp i32 %7 to double
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %2 to double*
  store double %8, double* %11, align 1, !tbaa !873
  %12 = bitcast i8* %10 to double*
  store double %9, double* %12, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PSI3MVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 4
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %6) #22
  %8 = sitofp i32 %5 to float
  %9 = sitofp i32 %7 to float
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast i8* %2 to float*
  store float %8, float* %13, align 1, !tbaa !871
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to float*
  store float %9, float* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %12, i32 0
  %17 = bitcast i8* %10 to i32*
  store i32 %16, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %12, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPI2PSI3RVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %8 = sitofp i32 %5 to float
  %9 = sitofp i32 %7 to float
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast i8* %2 to float*
  store float %8, float* %13, align 1, !tbaa !871
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to float*
  store float %9, float* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %12, i32 0
  %17 = bitcast i8* %10 to i32*
  store i32 %16, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %12, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PDI3VnWI8vec128_tE3MVnI7vec64_tELm2EEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 4
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %6) #22
  %8 = sitofp i32 %5 to double
  %9 = sitofp i32 %7 to double
  %10 = bitcast i8* %2 to double*
  store double %8, double* %10, align 1, !tbaa !873
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to double*
  store double %9, double* %12, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PDI3VnWI8vec128_tE2VnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = lshr i64 %6, 32
  %10 = trunc i64 %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = bitcast i8* %2 to double*
  store double %8, double* %12, align 1, !tbaa !873
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to double*
  store double %11, double* %14, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PSI3VnWI8vec128_tE3MVnIS2_ELm4EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = add i64 %3, 4
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %7) #22
  %9 = add i64 %3, 8
  %10 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %9) #22
  %11 = add i64 %3, 12
  %12 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %11) #22
  %13 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %14 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %15 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %16 = bitcast <2 x float>* %15 to <2 x i32>*
  %17 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %18 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %19 = sitofp i32 %6 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %16, align 8
  %20 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %19, float* %20, align 8, !tbaa !871
  %21 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %22 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %23 = sitofp i32 %8 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  %24 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %22, i64* %24, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %16, align 8
  %25 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 0, i64 1
  store float %23, float* %25, align 4, !tbaa !871
  %26 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %27 = load <2 x i32>, <2 x i32>* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %28 = sitofp i32 %10 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i32> %27, <2 x i32>* %14, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %16, align 8
  %29 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  store float %28, float* %29, align 8, !tbaa !871
  %30 = bitcast float* %18 to i64*
  %31 = load i64, i64* %30, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %32 = sitofp i32 %12 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i32> %27, <2 x i32>* %14, align 8
  %33 = bitcast <2 x float>* %15 to i64*
  store i64 %31, i64* %33, align 8
  %34 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 0, i64 3
  store float %32, float* %34, align 4, !tbaa !871
  %35 = bitcast float* %18 to <2 x i32>*
  %36 = load <2 x i32>, <2 x i32>* %35, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %37 = extractelement <2 x i32> %27, i32 0
  %38 = bitcast i8* %2 to i32*
  store i32 %37, i32* %38, align 1, !tbaa !871
  %39 = extractelement <2 x i32> %27, i32 1
  %40 = getelementptr inbounds i8, i8* %2, i64 4
  %41 = bitcast i8* %40 to i32*
  store i32 %39, i32* %41, align 1, !tbaa !871
  %42 = extractelement <2 x i32> %36, i32 0
  %43 = getelementptr inbounds i8, i8* %2, i64 8
  %44 = bitcast i8* %43 to i32*
  store i32 %42, i32* %44, align 1, !tbaa !871
  %45 = extractelement <2 x i32> %36, i32 1
  %46 = getelementptr inbounds i8, i8* %2, i64 12
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #7

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTDQ2PSI3VnWI8vec128_tE2VnIS2_ELm4EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %12 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %14 = bitcast <2 x float>* %13 to <2 x i32>*
  %15 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %16 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %17 = trunc i64 %7 to i32
  %18 = sitofp i32 %17 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %19 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %18, float* %19, align 8, !tbaa !871
  %20 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %21 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %22 = lshr i64 %7, 32
  %23 = trunc i64 %22 to i32
  %24 = sitofp i32 %23 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  %25 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %21, i64* %25, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %26 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 1
  store float %24, float* %26, align 4, !tbaa !871
  %27 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %29 = trunc i64 %10 to i32
  %30 = sitofp i32 %29 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> %28, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %31 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  store float %30, float* %31, align 8, !tbaa !871
  %32 = bitcast float* %16 to i64*
  %33 = load i64, i64* %32, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %34 = lshr i64 %10, 32
  %35 = trunc i64 %34 to i32
  %36 = sitofp i32 %35 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> %28, <2 x i32>* %12, align 8
  %37 = bitcast <2 x float>* %13 to i64*
  store i64 %33, i64* %37, align 8
  %38 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 3
  store float %36, float* %38, align 4, !tbaa !871
  %39 = bitcast float* %16 to <2 x i32>*
  %40 = load <2 x i32>, <2 x i32>* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %41 = extractelement <2 x i32> %28, i32 0
  %42 = bitcast i8* %2 to i32*
  store i32 %41, i32* %42, align 1, !tbaa !871
  %43 = extractelement <2 x i32> %28, i32 1
  %44 = getelementptr inbounds i8, i8* %2, i64 4
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1, !tbaa !871
  %46 = extractelement <2 x i32> %40, i32 0
  %47 = getelementptr inbounds i8, i8* %2, i64 8
  %48 = bitcast i8* %47 to i32*
  store i32 %46, i32* %48, align 1, !tbaa !871
  %49 = extractelement <2 x i32> %40, i32 1
  %50 = getelementptr inbounds i8, i8* %2, i64 12
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE3MVnIS2_ELm2EXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %8 = add i64 %3, 8
  %9 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %8) #22
  %10 = bitcast <2 x i64>* %5 to i8*
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %13 = bitcast <2 x i64>* %5 to [4 x i32]*
  %14 = tail call double @llvm.nearbyint.f64(double %7) #23
  %15 = tail call double @llvm.fabs.f64(double %14) #23
  %16 = fcmp ogt double %15, 0x41DFFFFFFFC00000
  %17 = fptosi double %14 to i32
  %18 = select i1 %16, i32 -2147483648, i32 %17
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %19 = bitcast <2 x i64>* %5 to i32*
  store i32 %18, i32* %19, align 16, !tbaa !877
  %20 = load i64, i64* %11, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %21 = tail call double @llvm.nearbyint.f64(double %9) #23
  %22 = tail call double @llvm.fabs.f64(double %21) #23
  %23 = fcmp ogt double %22, 0x41DFFFFFFFC00000
  %24 = fptosi double %21 to i32
  %25 = select i1 %23, i32 -2147483648, i32 %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store i64 %20, i64* %11, align 16
  store i64 0, i64* %12, align 8
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 1
  store i32 %25, i32* %26, align 4, !tbaa !877
  %27 = load i64, i64* %11, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %27 to i32
  %30 = trunc i64 %28 to i32
  %31 = bitcast i8* %2 to i32*
  store i32 %29, i32* %31, align 1, !tbaa !877
  %32 = getelementptr inbounds i8, i8* %2, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 %30, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds i8, i8* %2, i64 8
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 1, !tbaa !877
  %36 = getelementptr inbounds i8, i8* %2, i64 12
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #4

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE2VnIS2_ELm2EXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = tail call double @llvm.nearbyint.f64(double %8) #23
  %17 = tail call double @llvm.fabs.f64(double %16) #23
  %18 = fcmp ogt double %17, 0x41DFFFFFFFC00000
  %19 = fptosi double %16 to i32
  %20 = select i1 %18, i32 -2147483648, i32 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16, !tbaa !877
  %22 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %23 = tail call double @llvm.nearbyint.f64(double %11) #23
  %24 = tail call double @llvm.fabs.f64(double %23) #23
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fptosi double %23 to i32
  %27 = select i1 %25, i32 -2147483648, i32 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %22, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %27, i32* %28, align 4, !tbaa !877
  %29 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i8* %2 to i32*
  store i32 %31, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 1, !tbaa !877
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1, !tbaa !877
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE3MVnIS2_ELm2EXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %8 = add i64 %3, 8
  %9 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %8) #22
  %10 = bitcast <2 x i64>* %5 to i8*
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %13 = bitcast <2 x i64>* %5 to [4 x i32]*
  %14 = tail call double @llvm.trunc.f64(double %7) #23
  %15 = tail call double @llvm.fabs.f64(double %14) #23
  %16 = fcmp ogt double %15, 0x41DFFFFFFFC00000
  %17 = fptosi double %14 to i32
  %18 = select i1 %16, i32 -2147483648, i32 %17
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %19 = bitcast <2 x i64>* %5 to i32*
  store i32 %18, i32* %19, align 16, !tbaa !877
  %20 = load i64, i64* %11, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %21 = tail call double @llvm.trunc.f64(double %9) #23
  %22 = tail call double @llvm.fabs.f64(double %21) #23
  %23 = fcmp ogt double %22, 0x41DFFFFFFFC00000
  %24 = fptosi double %21 to i32
  %25 = select i1 %23, i32 -2147483648, i32 %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store i64 %20, i64* %11, align 16
  store i64 0, i64* %12, align 8
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 1
  store i32 %25, i32* %26, align 4, !tbaa !877
  %27 = load i64, i64* %11, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %27 to i32
  %30 = trunc i64 %28 to i32
  %31 = bitcast i8* %2 to i32*
  store i32 %29, i32* %31, align 1, !tbaa !877
  %32 = getelementptr inbounds i8, i8* %2, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 %30, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds i8, i8* %2, i64 8
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 1, !tbaa !877
  %36 = getelementptr inbounds i8, i8* %2, i64 12
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2DQI3VnWI8vec128_tE2VnIS2_ELm2EXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = tail call double @llvm.trunc.f64(double %8) #23
  %17 = tail call double @llvm.fabs.f64(double %16) #23
  %18 = fcmp ogt double %17, 0x41DFFFFFFFC00000
  %19 = fptosi double %16 to i32
  %20 = select i1 %18, i32 -2147483648, i32 %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16, !tbaa !877
  %22 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %23 = tail call double @llvm.trunc.f64(double %11) #23
  %24 = tail call double @llvm.fabs.f64(double %23) #23
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fptosi double %23 to i32
  %27 = select i1 %25, i32 -2147483648, i32 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %22, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %27, i32* %28, align 4, !tbaa !877
  %29 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i8* %2 to i32*
  store i32 %31, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds i8, i8* %2, i64 4
  %35 = bitcast i8* %34 to i32*
  store i32 %32, i32* %35, align 1, !tbaa !877
  %36 = getelementptr inbounds i8, i8* %2, i64 8
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 1, !tbaa !877
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE3MVnIS2_ELm4EXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %8 = add i64 %3, 4
  %9 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %3, 8
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %3, 12
  %13 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast <2 x i64>* %5 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %17 = bitcast <2 x i64>* %5 to [4 x i32]*
  %18 = tail call float @llvm.nearbyint.f32(float %7) #23
  %19 = tail call float @llvm.fabs.f32(float %18) #23
  %20 = fcmp ogt float %19, 0x41E0000000000000
  %21 = fptosi float %18 to i32
  %22 = select i1 %20, i32 -2147483648, i32 %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %23 = bitcast <2 x i64>* %5 to i32*
  store i32 %22, i32* %23, align 16, !tbaa !877
  %24 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %25 = tail call float @llvm.nearbyint.f32(float %9) #23
  %26 = tail call float @llvm.fabs.f32(float %25) #23
  %27 = fcmp ogt float %26, 0x41E0000000000000
  %28 = fptosi float %25 to i32
  %29 = select i1 %27, i32 -2147483648, i32 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %24, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 1
  store i32 %29, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %32 = tail call float @llvm.nearbyint.f32(float %11) #23
  %33 = tail call float @llvm.fabs.f32(float %32) #23
  %34 = fcmp ogt float %33, 0x41E0000000000000
  %35 = fptosi float %32 to i32
  %36 = select i1 %34, i32 -2147483648, i32 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %31, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %38 = bitcast i64* %37 to i32*
  store i32 %36, i32* %38, align 8, !tbaa !877
  %39 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %40 = tail call float @llvm.nearbyint.f32(float %13) #23
  %41 = tail call float @llvm.fabs.f32(float %40) #23
  %42 = fcmp ogt float %41, 0x41E0000000000000
  %43 = fptosi float %40 to i32
  %44 = select i1 %42, i32 -2147483648, i32 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %31, i64* %15, align 16
  store i64 %39, i64* %16, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 3
  store i32 %44, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %47 = lshr i64 %31, 32
  %48 = trunc i64 %31 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1, !tbaa !877
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1, !tbaa !877
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #4

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE2VnIS2_ELm4EXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = trunc i64 %8 to i32
  %17 = bitcast i32 %16 to float
  %18 = tail call float @llvm.nearbyint.f32(float %17) #23
  %19 = tail call float @llvm.fabs.f32(float %18) #23
  %20 = fcmp ogt float %19, 0x41E0000000000000
  %21 = fptosi float %18 to i32
  %22 = select i1 %20, i32 -2147483648, i32 %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %23 = bitcast <2 x i64>* %5 to i32*
  store i32 %22, i32* %23, align 16, !tbaa !877
  %24 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %25 = lshr i64 %8, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = tail call float @llvm.nearbyint.f32(float %27) #23
  %29 = tail call float @llvm.fabs.f32(float %28) #23
  %30 = fcmp ogt float %29, 0x41E0000000000000
  %31 = fptosi float %28 to i32
  %32 = select i1 %30, i32 -2147483648, i32 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %24, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %35 = trunc i64 %11 to i32
  %36 = bitcast i32 %35 to float
  %37 = tail call float @llvm.nearbyint.f32(float %36) #23
  %38 = tail call float @llvm.fabs.f32(float %37) #23
  %39 = fcmp ogt float %38, 0x41E0000000000000
  %40 = fptosi float %37 to i32
  %41 = select i1 %39, i32 -2147483648, i32 %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8, !tbaa !877
  %44 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %45 = lshr i64 %11, 32
  %46 = trunc i64 %45 to i32
  %47 = bitcast i32 %46 to float
  %48 = tail call float @llvm.nearbyint.f32(float %47) #23
  %49 = tail call float @llvm.fabs.f32(float %48) #23
  %50 = fcmp ogt float %49, 0x41E0000000000000
  %51 = fptosi float %48 to i32
  %52 = select i1 %50, i32 -2147483648, i32 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 %44, i64* %14, align 8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  store i32 %52, i32* %53, align 4, !tbaa !877
  %54 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %55 = lshr i64 %34, 32
  %56 = trunc i64 %34 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1, !tbaa !877
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1, !tbaa !877
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !877
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE3MVnIS2_ELm4EXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %8 = add i64 %3, 4
  %9 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %3, 8
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %3, 12
  %13 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast <2 x i64>* %5 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %17 = bitcast <2 x i64>* %5 to [4 x i32]*
  %18 = tail call float @llvm.trunc.f32(float %7) #23
  %19 = tail call float @llvm.fabs.f32(float %18) #23
  %20 = fcmp ogt float %19, 0x41E0000000000000
  %21 = fptosi float %18 to i32
  %22 = select i1 %20, i32 -2147483648, i32 %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %23 = bitcast <2 x i64>* %5 to i32*
  store i32 %22, i32* %23, align 16, !tbaa !877
  %24 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %25 = tail call float @llvm.trunc.f32(float %9) #23
  %26 = tail call float @llvm.fabs.f32(float %25) #23
  %27 = fcmp ogt float %26, 0x41E0000000000000
  %28 = fptosi float %25 to i32
  %29 = select i1 %27, i32 -2147483648, i32 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %24, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 1
  store i32 %29, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %32 = tail call float @llvm.trunc.f32(float %11) #23
  %33 = tail call float @llvm.fabs.f32(float %32) #23
  %34 = fcmp ogt float %33, 0x41E0000000000000
  %35 = fptosi float %32 to i32
  %36 = select i1 %34, i32 -2147483648, i32 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %31, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %38 = bitcast i64* %37 to i32*
  store i32 %36, i32* %38, align 8, !tbaa !877
  %39 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %40 = tail call float @llvm.trunc.f32(float %13) #23
  %41 = tail call float @llvm.fabs.f32(float %40) #23
  %42 = fcmp ogt float %41, 0x41E0000000000000
  %43 = fptosi float %40 to i32
  %44 = select i1 %42, i32 -2147483648, i32 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %31, i64* %15, align 16
  store i64 %39, i64* %16, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 3
  store i32 %44, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %47 = lshr i64 %31, 32
  %48 = trunc i64 %31 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1, !tbaa !877
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1, !tbaa !877
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #4

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2DQI3VnWI8vec128_tE2VnIS2_ELm4EXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = trunc i64 %8 to i32
  %17 = bitcast i32 %16 to float
  %18 = tail call float @llvm.trunc.f32(float %17) #23
  %19 = tail call float @llvm.fabs.f32(float %18) #23
  %20 = fcmp ogt float %19, 0x41E0000000000000
  %21 = fptosi float %18 to i32
  %22 = select i1 %20, i32 -2147483648, i32 %21
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %23 = bitcast <2 x i64>* %5 to i32*
  store i32 %22, i32* %23, align 16, !tbaa !877
  %24 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %25 = lshr i64 %8, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = tail call float @llvm.trunc.f32(float %27) #23
  %29 = tail call float @llvm.fabs.f32(float %28) #23
  %30 = fcmp ogt float %29, 0x41E0000000000000
  %31 = fptosi float %28 to i32
  %32 = select i1 %30, i32 -2147483648, i32 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %24, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %35 = trunc i64 %11 to i32
  %36 = bitcast i32 %35 to float
  %37 = tail call float @llvm.trunc.f32(float %36) #23
  %38 = tail call float @llvm.fabs.f32(float %37) #23
  %39 = fcmp ogt float %38, 0x41E0000000000000
  %40 = fptosi float %37 to i32
  %41 = select i1 %39, i32 -2147483648, i32 %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8, !tbaa !877
  %44 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %45 = lshr i64 %11, 32
  %46 = trunc i64 %45 to i32
  %47 = bitcast i32 %46 to float
  %48 = tail call float @llvm.trunc.f32(float %47) #23
  %49 = tail call float @llvm.fabs.f32(float %48) #23
  %50 = fcmp ogt float %49, 0x41E0000000000000
  %51 = fptosi float %48 to i32
  %52 = select i1 %50, i32 -2147483648, i32 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %34, i64* %13, align 16
  store i64 %44, i64* %14, align 8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  store i32 %52, i32* %53, align 4, !tbaa !877
  %54 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %55 = lshr i64 %34, 32
  %56 = trunc i64 %34 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1, !tbaa !877
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1, !tbaa !877
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !877
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I3MVnI7vec32_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call float @llvm.nearbyint.f32(float %5) #23
  %7 = tail call float @llvm.fabs.f32(float %6) #23
  %8 = fcmp ogt float %7, 0x41E0000000000000
  %9 = fptosi float %6 to i32
  %10 = zext i32 %9 to i64
  %11 = select i1 %8, i64 2147483648, i64 %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.nearbyint.f32(float %7) #23
  %9 = tail call float @llvm.fabs.f32(float %8) #23
  %10 = fcmp ogt float %9, 0x41E0000000000000
  %11 = fptosi float %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I3MVnI7vec32_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call float @llvm.nearbyint.f32(float %5) #23
  %7 = fptosi float %6 to i64
  store i64 %7, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.nearbyint.f32(float %7) #23
  %9 = fptosi float %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I3MVnI7vec32_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call float @llvm.trunc.f32(float %5) #23
  %7 = tail call float @llvm.fabs.f32(float %6) #23
  %8 = fcmp ogt float %7, 0x41E0000000000000
  %9 = fptosi float %6 to i32
  %10 = zext i32 %9 to i64
  %11 = select i1 %8, i64 2147483648, i64 %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_32I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.trunc.f32(float %7) #23
  %9 = tail call float @llvm.fabs.f32(float %8) #23
  %10 = fcmp ogt float %9, 0x41E0000000000000
  %11 = fptosi float %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I3MVnI7vec32_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = tail call float @llvm.trunc.f32(float %5) #23
  %7 = fptosi float %6 to i64
  store i64 %7, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSS2SI_64I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero32EfEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @llvm.trunc.f32(float %7) #23
  %9 = fptosi float %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I3MVnI7vec64_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call double @llvm.nearbyint.f64(double %5) #23
  %7 = tail call double @llvm.fabs.f64(double %6) #23
  %8 = fcmp ogt double %7, 0x41DFFFFFFFC00000
  %9 = fptosi double %6 to i32
  %10 = zext i32 %9 to i64
  %11 = select i1 %8, i64 2147483648, i64 %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.nearbyint.f64(double %6) #23
  %8 = tail call double @llvm.fabs.f64(double %7) #23
  %9 = fcmp ogt double %8, 0x41DFFFFFFFC00000
  %10 = fptosi double %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I3MVnI7vec64_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call double @llvm.nearbyint.f64(double %5) #23
  %7 = tail call double @llvm.fabs.f64(double %6) #23
  %8 = fcmp ogt double %7, 0x43E0000000000000
  %9 = fptosi double %6 to i64
  %10 = select i1 %8, i64 -9223372036854775808, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I2VnI8vec128_tEXadL_ZNS_L17FRoundUsingMode64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.nearbyint.f64(double %6) #23
  %8 = tail call double @llvm.fabs.f64(double %7) #23
  %9 = fcmp ogt double %8, 0x43E0000000000000
  %10 = fptosi double %7 to i64
  %11 = select i1 %9, i64 -9223372036854775808, i64 %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I3MVnI7vec64_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call double @llvm.trunc.f64(double %5) #23
  %7 = tail call double @llvm.fabs.f64(double %6) #23
  %8 = fcmp ogt double %7, 0x41DFFFFFFFC00000
  %9 = fptosi double %6 to i32
  %10 = zext i32 %9 to i64
  %11 = select i1 %8, i64 2147483648, i64 %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_32I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.trunc.f64(double %6) #23
  %8 = tail call double @llvm.fabs.f64(double %7) #23
  %9 = fcmp ogt double %8, 0x41DFFFFFFFC00000
  %10 = fptosi double %7 to i32
  %11 = zext i32 %10 to i64
  %12 = select i1 %9, i64 2147483648, i64 %11
  store i64 %12, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I3MVnI7vec64_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = tail call double @llvm.trunc.f64(double %5) #23
  %7 = tail call double @llvm.fabs.f64(double %6) #23
  %8 = fcmp ogt double %7, 0x43E0000000000000
  %9 = fptosi double %6 to i64
  %10 = select i1 %8, i64 -9223372036854775808, i64 %9
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CVTSD2SI_64I2VnI8vec128_tEXadL_ZNS_L18FTruncTowardZero64EdEEEEP6MemoryS5_R5State3RnWImET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @llvm.trunc.f64(double %6) #23
  %8 = tail call double @llvm.fabs.f64(double %7) #23
  %9 = fcmp ogt double %8, 0x43E0000000000000
  %10 = fptosi double %7 to i64
  %11 = select i1 %9, i64 -9223372036854775808, i64 %10
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSD2SSI3MVnI7vec64_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %11 = fptrunc double %10 to float
  %12 = bitcast i8* %2 to float*
  store float %11, float* %12, align 1, !tbaa !871
  %13 = extractelement <2 x i32> %6, i32 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %9, i32 0
  %17 = bitcast i8* %7 to i32*
  store i32 %16, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSD2SSI2VnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_ET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = bitcast i8* %3 to double*
  %11 = load double, double* %10, align 1
  %12 = fptrunc double %11 to float
  %13 = bitcast i8* %2 to float*
  store float %12, float* %13, align 1, !tbaa !871
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1, !tbaa !871
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1, !tbaa !871
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2MnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %11 = sitofp i32 %10 to float
  %12 = bitcast i8* %2 to float*
  store float %11, float* %12, align 1, !tbaa !871
  %13 = extractelement <2 x i32> %6, i32 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %9, i32 0
  %17 = bitcast i8* %7 to i32*
  store i32 %16, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2RnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = trunc i64 %3 to i32
  %11 = sitofp i32 %10 to float
  %12 = bitcast i8* %2 to float*
  store float %11, float* %12, align 1, !tbaa !871
  %13 = extractelement <2 x i32> %6, i32 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %9, i32 0
  %17 = bitcast i8* %7 to i32*
  store i32 %16, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2MnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %11 = sitofp i64 %10 to float
  %12 = bitcast i8* %2 to float*
  store float %11, float* %12, align 1, !tbaa !871
  %13 = extractelement <2 x i32> %6, i32 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %9, i32 0
  %17 = bitcast i8* %7 to i32*
  store i32 %16, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SSI2RnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = sitofp i64 %3 to float
  %11 = bitcast i8* %2 to float*
  store float %10, float* %11, align 1, !tbaa !871
  %12 = extractelement <2 x i32> %6, i32 1
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 1, !tbaa !871
  %15 = extractelement <2 x i32> %9, i32 0
  %16 = bitcast i8* %7 to i32*
  store i32 %15, i32* %16, align 1, !tbaa !871
  %17 = extractelement <2 x i32> %9, i32 1
  %18 = getelementptr inbounds i8, i8* %2, i64 12
  %19 = bitcast i8* %18 to i32*
  store i32 %17, i32* %19, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2MnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = sitofp i32 %5 to double
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2RnIjEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = sitofp i32 %5 to double
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2MnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = sitofp i64 %5 to double
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSI2SDI2RnImEEEP6MemoryS4_R5State3VnWI8vec128_tET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = sitofp i64 %3 to double
  %6 = bitcast i8* %2 to double*
  store double %5, double* %6, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSS2SDI3MVnI7vec32_tEEEP6MemoryS5_R5State3VnWI8vec128_tET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = fpext float %5 to double
  %7 = bitcast i8* %2 to double*
  store double %6, double* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTSS2SDI2VnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_ET_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = fpext float %7 to double
  %9 = bitcast i8* %2 to double*
  store double %8, double* %9, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2PDI3VnWI8vec128_tE3MVnI7vec64_tELm2EEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 4
  %7 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %6) #22
  %8 = insertelement <2 x float> undef, float %5, i32 0
  %9 = insertelement <2 x float> %8, float %7, i32 1
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast i8* %2 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPS2PDI3VnWI8vec128_tE2VnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = bitcast i32 %7 to float
  %9 = fpext float %8 to double
  %10 = lshr i64 %6, 32
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32 %11 to float
  %13 = fpext float %12 to double
  %14 = bitcast i8* %2 to double*
  store double %9, double* %14, align 1, !tbaa !873
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to double*
  store double %13, double* %16, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2PSI3VnWI8vec128_tE3MVnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %7 = add i64 %3, 8
  %8 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %7) #22
  %9 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %10 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %11 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %12 = bitcast <2 x float>* %11 to <2 x i32>*
  %13 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %14 = fptrunc double %6 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9)
  store <2 x i32> zeroinitializer, <2 x i32>* %10, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  %15 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %14, float* %15, align 8, !tbaa !871
  %16 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %17 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9)
  %18 = fptrunc double %8 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9)
  %19 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %17, i64* %19, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  %20 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 0, i64 1
  store float %18, float* %20, align 4, !tbaa !871
  %21 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %22 = load <2 x i32>, <2 x i32>* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9)
  %23 = extractelement <2 x i32> %22, i32 0
  %24 = bitcast i8* %2 to i32*
  store i32 %23, i32* %24, align 1, !tbaa !871
  %25 = extractelement <2 x i32> %22, i32 1
  %26 = getelementptr inbounds i8, i8* %2, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1, !tbaa !871
  %28 = getelementptr inbounds i8, i8* %2, i64 8
  %29 = bitcast i8* %28 to i32*
  store i32 0, i32* %29, align 1, !tbaa !871
  %30 = getelementptr inbounds i8, i8* %2, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8CVTPD2PSI3VnWI8vec128_tE2VnIS2_ELm2EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to double*
  %10 = load double, double* %9, align 1
  %11 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  %12 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %14 = bitcast <2 x float>* %13 to <2 x i32>*
  %15 = bitcast { <2 x float>, <2 x float> }* %5 to [4 x float]*
  %16 = fptrunc double %7 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  store <2 x i32> zeroinitializer, <2 x i32>* %12, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %17 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  store float %16, float* %17, align 8, !tbaa !871
  %18 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  %19 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %20 = fptrunc double %10 to float
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11)
  %21 = bitcast { <2 x float>, <2 x float> }* %5 to i64*
  store i64 %19, i64* %21, align 8
  store <2 x i32> zeroinitializer, <2 x i32>* %14, align 8
  %22 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, i64 1
  store float %20, float* %22, align 4, !tbaa !871
  %23 = bitcast { <2 x float>, <2 x float> }* %5 to <2 x i32>*
  %24 = load <2 x i32>, <2 x i32>* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11)
  %25 = extractelement <2 x i32> %24, i32 0
  %26 = bitcast i8* %2 to i32*
  store i32 %25, i32* %26, align 1, !tbaa !871
  %27 = extractelement <2 x i32> %24, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1, !tbaa !871
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 1, !tbaa !871
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i8
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i8
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  store i64 %3, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i16
  %6 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i32
  %6 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %3) #22
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i8
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i8
  %6 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i16
  %6 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i32
  %6 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %3) #22
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 4294967295
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  store i64 %3, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  store i8 %5, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  store i16 %5, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWIhE2MnIhE3RnWIhE2RnIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64, i8* nocapture, i64) #0 {
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i8
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  store i8 %7, i8* %4, align 1, !tbaa !868
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWIhE2RnIhES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64, i8* nocapture, i64) #2 {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  store i8 %8, i8* %2, align 1, !tbaa !868
  store i8 %7, i8* %4, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWItE2MnItE3RnWItE2RnItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64, i16* nocapture, i64) #0 {
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i16
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  store i16 %7, i16* %4, align 2, !tbaa !869
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWIjE2MnIjE3RnWImE2RnIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64, i64* nocapture, i64) #0 {
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i32
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = zext i32 %7 to i64
  store i64 %10, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3MnWImE2MnImE3RnWImE2RnImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64, i64* nocapture, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %5) #22
  store i64 %7, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWItE2RnItES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64, i16* nocapture, i64) #2 {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  store i16 %8, i16* %2, align 2, !tbaa !869
  store i16 %7, i16* %4, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWImE2RnIjES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64* nocapture, i64) #2 {
  %7 = and i64 %5, 4294967295
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = and i64 %3, 4294967295
  store i64 %8, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XCHGI3RnWImE2RnImES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64* nocapture, i64) #2 {
  store i64 %5, i64* %2, align 8, !tbaa !870
  store i64 %3, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  store i64 %5, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  store i64 %3, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4MVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %3) #22
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i8* %2 to i64*
  store i64 %5, i64* %6, align 1, !tbaa !870
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i64*
  store i64 0, i64* %8, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI3VnWI8vec128_tE3RVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to i64*
  store i64 %3, i64* %5, align 1, !tbaa !870
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 0, i64* %7, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI4RVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  store i64 %6, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVQI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1, !tbaa !870
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4RVnWI7vec64_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i64* %2 to [2 x i32]*
  %7 = bitcast i64* %2 to i32*
  store i32 %5, i32* %7, align 1, !tbaa !877
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %8, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4RVnWI7vec64_tE3RVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = bitcast i64* %2 to [2 x i32]*
  %7 = bitcast i64* %2 to i32*
  store i32 %5, i32* %7, align 1, !tbaa !877
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %8, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4MVnWI7vec32_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = trunc i64 %3 to i32
  %6 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI3VnWI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i8* %2 to i32*
  store i32 %5, i32* %6, align 1, !tbaa !877
  %7 = getelementptr inbounds i8, i8* %2, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 0, i32* %8, align 1, !tbaa !877
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 1, !tbaa !877
  %11 = getelementptr inbounds i8, i8* %2, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI3VnWI8vec128_tE3RVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i32
  %6 = bitcast i8* %2 to i32*
  store i32 %5, i32* %6, align 1, !tbaa !877
  %7 = getelementptr inbounds i8, i8* %2, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 0, i32* %8, align 1, !tbaa !877
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 1, !tbaa !877
  %11 = getelementptr inbounds i8, i8* %2, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4MVnWI7vec32_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4MOVDI4RVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = trunc i64 %6 to i32
  %8 = bitcast i64* %2 to [2 x i32]*
  %9 = bitcast i64* %2 to i32*
  store i32 %7, i32* %9, align 1, !tbaa !877
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 0, i32* %10, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPSI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 4
  %7 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %6) #22
  %8 = add i64 %3, 8
  %9 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %3, 12
  %11 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %10) #22
  %12 = bitcast i8* %2 to float*
  store float %5, float* %12, align 1, !tbaa !871
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to float*
  store float %7, float* %14, align 1, !tbaa !871
  %15 = getelementptr inbounds i8, i8* %2, i64 8
  %16 = bitcast i8* %15 to float*
  store float %9, float* %16, align 1, !tbaa !871
  %17 = getelementptr inbounds i8, i8* %2, i64 12
  %18 = bitcast i8* %17 to float*
  store float %11, float* %18, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPSI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = extractelement <2 x i32> %6, i32 0
  %11 = bitcast i8* %2 to i32*
  store i32 %10, i32* %11, align 1, !tbaa !871
  %12 = extractelement <2 x i32> %6, i32 1
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 1, !tbaa !871
  %15 = extractelement <2 x i32> %9, i32 0
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPSI4MVnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %6, i32 0
  %11 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %0, i64 %2, float %10) #22
  %12 = add i64 %2, 4
  %13 = extractelement <2 x float> %6, i32 1
  %14 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %11, i64 %12, float %13) #22
  %15 = add i64 %2, 8
  %16 = extractelement <2 x float> %9, i32 0
  %17 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %14, i64 %15, float %16) #22
  %18 = add i64 %2, 12
  %19 = extractelement <2 x float> %9, i32 1
  %20 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %17, i64 %18, float %19) #22
  ret %struct.Memory* %20
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPDI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 8
  %7 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %6) #22
  %8 = bitcast i8* %2 to double*
  store double %5, double* %8, align 1, !tbaa !873
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to double*
  store double %7, double* %10, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 1
  %7 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %6, <2 x i64>* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVxPDI4MVnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 1
  %10 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %0, i64 %2, double %6) #22
  %11 = add i64 %2, 8
  %12 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %10, i64 %11, double %9) #22
  ret %struct.Memory* %12
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #3

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVDQxI4MVnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  %11 = add i64 %2, 8
  %12 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %10, i64 %11, i64 %9) #22
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVDQxI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %6) #22
  %8 = zext i64 %7 to i128
  %9 = shl nuw i128 %8, 64
  %10 = zext i64 %5 to i128
  %11 = or i128 %9, %10
  %12 = bitcast i8* %2 to i128*
  store i128 %11, i128* %12, align 1, !tbaa !879
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVDQxI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = zext i64 %9 to i128
  %11 = shl nuw i128 %10, 64
  %12 = zext i64 %6 to i128
  %13 = or i128 %11, %12
  %14 = bitcast i8* %2 to i128*
  store i128 %13, i128* %14, align 1, !tbaa !879
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPSI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = extractelement <2 x float> %6, i32 1
  %9 = add i64 %2, 4
  %10 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %0, i64 %2, float %7) #22
  %11 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %10, i64 %9, float %8) #22
  ret %struct.Memory* %11
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPSI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 4
  %7 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %6) #22
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = bitcast i8* %2 to float*
  store float %5, float* %11, align 1, !tbaa !871
  %12 = getelementptr inbounds i8, i8* %2, i64 4
  %13 = bitcast i8* %12 to float*
  store float %7, float* %13, align 1, !tbaa !871
  %14 = extractelement <2 x i32> %10, i32 0
  %15 = bitcast i8* %8 to i32*
  store i32 %14, i32* %15, align 1, !tbaa !871
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %2, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7MOVLHPSI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %5 to i64*
  store i64 %7, i64* %8, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPDI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i8* %2 to double*
  store double %5, double* %6, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVLPDI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %0, i64 %2, double %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSDEP6MemoryR5State3VnWI8vec128_tE2VnIS5_E(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSD_MEMI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i8* %2 to double*
  store double %5, double* %6, align 1, !tbaa !873
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to double*
  store double 0.000000e+00, double* %8, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSD_MEMI4MVnWI7vec64_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %0, i64 %2, double %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSS_MEMI3VnWI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i8* %2 to float*
  store float %5, float* %6, align 1, !tbaa !871
  %7 = getelementptr inbounds i8, i8* %2, i64 4
  %8 = bitcast i8* %7 to float*
  store float 0.000000e+00, float* %8, align 1, !tbaa !871
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to float*
  store float 0.000000e+00, float* %10, align 1, !tbaa !871
  %11 = getelementptr inbounds i8, i8* %2, i64 12
  %12 = bitcast i8* %11 to float*
  store float 0.000000e+00, float* %12, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9MOVSS_MEMI4MVnWI7vec32_tE2VnI8vec128_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %0, i64 %2, float %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSSEP6MemoryR5State3VnWI8vec128_tE2VnIS5_E(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = bitcast i8* %3 to <2 x i32>*
  %11 = load <2 x i32>, <2 x i32>* %10, align 1
  %12 = extractelement <2 x i32> %11, i32 0
  %13 = bitcast i8* %2 to i32*
  store i32 %12, i32* %13, align 1, !tbaa !871
  %14 = extractelement <2 x i32> %6, i32 1
  %15 = getelementptr inbounds i8, i8* %2, i64 4
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 1, !tbaa !871
  %17 = extractelement <2 x i32> %9, i32 0
  %18 = bitcast i8* %7 to i32*
  store i32 %17, i32* %18, align 1, !tbaa !871
  %19 = extractelement <2 x i32> %9, i32 1
  %20 = getelementptr inbounds i8, i8* %2, i64 12
  %21 = bitcast i8* %20 to i32*
  store i32 %19, i32* %21, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVHPDEP6MemoryR5State3VnWI8vec128_tE3MVnI7vec64_tE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %7 = bitcast i8* %5 to double*
  store double %6, double* %7, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12MOVHPD_STOREEP6MemoryR5State4MVnWI7vec64_tE2VnI8vec128_tE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %0, i64 %2, double %7) #22
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOVHPSEP6MemoryR5State3VnWI8vec128_tE3MVnI7vec64_tE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = bitcast i8* %2 to <2 x i32>*
  %6 = load <2 x i32>, <2 x i32>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %9 = add i64 %3, 4
  %10 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %9) #22
  %11 = extractelement <2 x i32> %6, i32 0
  %12 = bitcast i8* %2 to i32*
  store i32 %11, i32* %12, align 1, !tbaa !871
  %13 = extractelement <2 x i32> %6, i32 1
  %14 = getelementptr inbounds i8, i8* %2, i64 4
  %15 = bitcast i8* %14 to i32*
  store i32 %13, i32* %15, align 1, !tbaa !871
  %16 = bitcast i8* %7 to float*
  store float %8, float* %16, align 1, !tbaa !871
  %17 = getelementptr inbounds i8, i8* %2, i64 12
  %18 = bitcast i8* %17 to float*
  store float %10, float* %18, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12MOVHPS_STOREEP6MemoryR5State4MVnWI7vec64_tE2VnI8vec128_tE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly) #6 {
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = extractelement <2 x float> %7, i32 1
  %10 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %0, i64 %2, float %8) #22
  %11 = add i64 %2, 4
  %12 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %10, i64 %11, float %9) #22
  ret %struct.Memory* %12
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 65535
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_ESI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 261) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_SSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 262) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_DSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 263) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_FSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 264) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_GSI2MnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 265) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_ESI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 261) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_SSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 262) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_DSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 263) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_FSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 264) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6MOV_GSI2RnItEEEP6MemoryS4_R5State3RnWItET_(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = trunc i64 %3 to i16
  store i16 %5, i16* %2, align 2, !tbaa !869
  %6 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 265) #21
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWItE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = zext i8 %5 to i16
  store i16 %6, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = zext i8 %5 to i64
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWItE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i16
  %6 = and i16 %5, 255
  store i16 %6, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 255
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = zext i16 %5 to i64
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVZXI3RnWImE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 65535
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWItE2MnIhEsEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = sext i8 %5 to i16
  store i16 %6, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIhEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = sext i8 %5 to i64
  %7 = and i64 %6, 4294967295
  store i64 %7, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIhElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = sext i8 %5 to i64
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWItE2RnIhEsEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i16
  %6 = shl i16 %5, 8
  %7 = ashr exact i16 %6, 8
  store i16 %7, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIhEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i32
  %6 = shl i32 %5, 24
  %7 = ashr exact i32 %6, 24
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIhElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = shl i64 %3, 56
  %6 = ashr exact i64 %5, 56
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = sext i16 %5 to i64
  %7 = and i64 %6, 4294967295
  store i64 %7, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = sext i16 %5 to i64
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnItEiEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i32
  %6 = shl i32 %5, 16
  %7 = ashr exact i32 %6, 16
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnItElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = shl i64 %3, 48
  %6 = ashr exact i64 %5, 48
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2MnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = sext i32 %5 to i64
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MOVSXI3RnWImE2RnIjElEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = shl i64 %3, 32
  %6 = ashr exact i64 %5, 32
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10DoINT_IMMbEP6MemoryR5State2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #2 {
  %4 = trunc i64 %2 to i32
  %5 = and i32 %4, 255
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2
  store i32 %5, i32* %6, align 8, !tbaa !881
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 4, i32* %7, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoINT1EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2
  store i32 1, i32* %3, align 8, !tbaa !881
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 1, i32* %4, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoINT3EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 2
  store i32 3, i32* %3, align 8, !tbaa !881
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 2, i32* %4, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCLDEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 0, i8* %3, align 1, !tbaa !882
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoSTDEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 1, i8* %3, align 1, !tbaa !882
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCLCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !850
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCMCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1, !tbaa !850
  %5 = icmp eq i8 %4, 0
  %6 = zext i1 %5 to i8
  store i8 %6, i8* %3, align 1, !tbaa !850
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoSTCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1, !tbaa !850
  %5 = icmp eq i8 %4, 0
  %6 = zext i1 %5 to i8
  store i8 %6, i8* %3, align 1, !tbaa !850
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoSALCEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = bitcast %union.Flags* %3 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !850
  store i8 %6, i8* %4, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoSAHFEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %4 = bitcast %union.Flags* %3 to %struct.anon.1*
  %5 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %4, i64 0, i32 1
  %6 = load i8, i8* %5, align 1, !tbaa !878
  %7 = and i8 %6, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %7, i8* %8, align 1, !tbaa !850
  %9 = lshr i8 %6, 2
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %10, i8* %11, align 1, !tbaa !863
  %12 = lshr i8 %6, 4
  %13 = and i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %13, i8* %14, align 1, !tbaa !864
  %15 = lshr i8 %6, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !866
  %17 = lshr i8 %6, 6
  %18 = and i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoLAHFEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1, !tbaa !850
  %5 = and i8 %4, 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %7 = load i8, i8* %6, align 1, !tbaa !863
  %8 = shl i8 %7, 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %10 = load i8, i8* %9, align 1, !tbaa !864
  %11 = shl i8 %10, 4
  %12 = and i8 %8, 4
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %14 = load i8, i8* %13, align 1, !tbaa !865
  %15 = shl i8 %14, 6
  %16 = and i8 %11, 16
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %18 = load i8, i8* %17, align 1, !tbaa !866
  %19 = shl i8 %18, 7
  %20 = and i8 %15, 64
  %21 = or i8 %5, %12
  %22 = or i8 %21, %16
  %23 = or i8 %22, %20
  %24 = or i8 %23, %19
  %25 = or i8 %24, 2
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %27 = bitcast %union.Flags* %26 to %struct.anon.1*
  %28 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %27, i64 0, i32 1
  store i8 %25, i8* %28, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoCLACEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 1) #21
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, -262145
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoSTACEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 1) #21
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = or i32 %6, 262144
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoCLIEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 1) #21
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, -513
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5DoSTIEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 1) #21
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %5 = bitcast %union.Flags* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = or i32 %6, 512
  store i32 %7, i32* %5, align 16
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %8 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i8 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %8, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i16 %8, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1, !tbaa !867
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %7 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i64 %7, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i64 %7, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %8 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i8 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %8, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i16 %8, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1, !tbaa !867
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %7 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i64 %7, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i64 %7, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = and i8 %7, %6
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = zext i8 %8 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %8, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = and i16 %7, %6
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i16 %8, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i16 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i16 %8, 15
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = and i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = and i64 %6, %3
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i64 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i64 %7, 63
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = or i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %8 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i8 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %8, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = or i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i16 %8, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1, !tbaa !867
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = or i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = or i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %7 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i64 %7, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i64 %7, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = or i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %8 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i8 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %8, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = or i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i16 %8, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1, !tbaa !867
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = or i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = or i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %7 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i64 %7, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i64 %7, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = or i8 %7, %6
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = zext i8 %8 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %8, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = or i16 %7, %6
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i16 %8, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i16 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i16 %8, 15
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = or i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L2ORI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = or i64 %6, %3
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i64 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i64 %7, 63
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = xor i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %8 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i8 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %8, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = xor i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i16 %8, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1, !tbaa !867
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = xor i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = xor i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %7 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i64 %7, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i64 %7, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = xor i8 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = zext i8 %8 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i8 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i8 %8, 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %2, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %6 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %7, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = xor i16 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i16 %8, 255
  %12 = zext i16 %11 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12) #23
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1, !tbaa !863
  %18 = icmp eq i16 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1, !tbaa !865
  %21 = lshr i16 %8, 15
  %22 = trunc i16 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1, !tbaa !866
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1, !tbaa !867
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %25, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = xor i32 %6, %7
  %9 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %8) #22
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = xor i64 %6, %4
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = trunc i64 %7 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i64 %7, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i64 %7, 63
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %2, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  store i64 %6, i64* %2, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWIhE2RnIhE2MnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = xor i8 %7, %6
  store i8 %8, i8* %2, align 1, !tbaa !868
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = zext i8 %8 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i8 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i8 %8, 7
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWItE2RnItE2MnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = xor i16 %7, %6
  store i16 %8, i16* %2, align 2, !tbaa !869
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !850
  %10 = and i16 %8, 255
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i16 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i16 %8, 15
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjE2MnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = xor i32 %7, %6
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1, !tbaa !850
  %11 = and i32 %8, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11) #23
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1, !tbaa !863
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1, !tbaa !865
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1, !tbaa !866
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1, !tbaa !867
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnImE2MnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = xor i64 %6, %3
  store i64 %7, i64* %2, align 8, !tbaa !870
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = trunc i64 %7 to i32
  %10 = and i32 %9, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i64 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i64 %7, 63
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWIhE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %6 = xor i8 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i8
  %6 = xor i8 %5, -1
  store i8 %6, i8* %2, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWItE2MnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = xor i16 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWIjE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = xor i32 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3MnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = xor i64 %5, -1
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i16* nocapture, i64) #2 {
  %5 = trunc i64 %3 to i16
  %6 = xor i16 %5, -1
  store i16 %6, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = and i64 %3, 4294967295
  %6 = xor i64 %5, 4294967295
  store i64 %6, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3NOTI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  %5 = xor i64 %3, -1
  store i64 %5, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i8
  %7 = and i8 %5, %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i8 %7, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i8 %7, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i8 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i8 %6, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i16
  %7 = and i16 %5, %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i32
  %7 = and i32 %5, %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i32 %7, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i32 %7, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %6 = and i64 %5, %3
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnItE2InItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = and i16 %6, 255
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i16 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i16 %6, 15
  %19 = trunc i16 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = icmp eq i32 %6, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !865
  %17 = lshr i32 %6, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !850
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = icmp eq i64 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !865
  %17 = lshr i64 %5, 63
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIhE2RnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i8
  %7 = and i8 %5, %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i8 %7, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i8 %7, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIhES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i8
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i8 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i8 %6, 7
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnItE2RnItEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i16
  %7 = and i16 %5, %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i16 %7, 255
  %10 = zext i16 %9 to i32
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10) #23
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !863
  %16 = icmp eq i16 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1, !tbaa !865
  %19 = lshr i16 %7, 15
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1, !tbaa !866
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1, !tbaa !867
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %2) #22
  %6 = trunc i64 %3 to i32
  %7 = and i32 %5, %6
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1, !tbaa !850
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i32 %7, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i32 %7, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2MnImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %6 = and i64 %5, %3
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = trunc i64 %6 to i32
  %9 = and i32 %8, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i64 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i64 %6, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnItES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i16
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = and i16 %6, 255
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9) #23
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !863
  %15 = icmp eq i16 %6, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1, !tbaa !865
  %18 = lshr i16 %6, 15
  %19 = trunc i16 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1, !tbaa !866
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1, !tbaa !867
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnIjES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1, !tbaa !850
  %8 = and i32 %6, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = icmp eq i32 %6, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !865
  %17 = lshr i32 %6, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %3, %2
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1, !tbaa !850
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8) #23
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1, !tbaa !863
  %14 = icmp eq i64 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1, !tbaa !865
  %17 = lshr i64 %5, 63
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1, !tbaa !866
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1, !tbaa !867
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1, !tbaa !864
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = xor i64 %6, %3
  store i64 %7, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, %3
  store i64 %6, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x i64> undef, i64 %8, i32 0
  %12 = insertelement <2 x i64> %11, i64 %10, i32 1
  %13 = xor <2 x i64> %12, %7
  %14 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PXOR_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = xor <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PXORI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = xor i32 %14, %11
  %22 = xor i32 %16, %13
  %23 = trunc i64 %10 to i32
  %24 = xor i32 %18, %23
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = xor i32 %20, %26
  %28 = bitcast i8* %2 to i32*
  store i32 %21, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %22, i32* %30, align 1, !tbaa !877
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 1, !tbaa !877
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %27, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PXORI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = xor i64 %12, %7
  %17 = xor i64 %15, %10
  %18 = trunc i64 %16 to i32
  %19 = lshr i64 %16, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %2 to i32*
  store i32 %18, i32* %21, align 1, !tbaa !877
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %20, i32* %23, align 1, !tbaa !877
  %24 = trunc i64 %17 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !877
  %27 = lshr i64 %17, 32
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i8, i8* %2, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = and i64 %6, %3
  store i64 %7, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %4, %3
  store i64 %6, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PANDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = and i32 %14, %11
  %22 = and i32 %16, %13
  %23 = trunc i64 %10 to i32
  %24 = and i32 %18, %23
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = and i32 %20, %26
  %28 = bitcast i8* %2 to i32*
  store i32 %21, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %22, i32* %30, align 1, !tbaa !877
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 1, !tbaa !877
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %27, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PANDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = and i64 %12, %7
  %17 = and i64 %15, %10
  %18 = trunc i64 %16 to i32
  %19 = lshr i64 %16, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %2 to i32*
  store i32 %18, i32* %21, align 1, !tbaa !877
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %20, i32* %23, align 1, !tbaa !877
  %24 = trunc i64 %17 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !877
  %27 = lshr i64 %17, 32
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i8, i8* %2, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x i64> undef, i64 %8, i32 0
  %12 = insertelement <2 x i64> %11, i64 %10, i32 1
  %13 = and <2 x i64> %12, %7
  %14 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PAND_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = and <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = xor i64 %6, -1
  %8 = and i64 %7, %3
  store i64 %8, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = xor i64 %4, -1
  %7 = and i64 %6, %3
  store i64 %7, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PANDNI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = xor i32 %14, -1
  %22 = and i32 %11, %21
  %23 = xor i32 %16, -1
  %24 = and i32 %13, %23
  %25 = trunc i64 %10 to i32
  %26 = xor i32 %18, -1
  %27 = and i32 %25, %26
  %28 = lshr i64 %10, 32
  %29 = trunc i64 %28 to i32
  %30 = xor i32 %20, -1
  %31 = and i32 %29, %30
  %32 = bitcast i8* %2 to i32*
  store i32 %22, i32* %32, align 1, !tbaa !877
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %24, i32* %34, align 1, !tbaa !877
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i32*
  store i32 %27, i32* %36, align 1, !tbaa !877
  %37 = getelementptr inbounds i8, i8* %2, i64 12
  %38 = bitcast i8* %37 to i32*
  store i32 %31, i32* %38, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PANDNI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = and i64 %12, -4294967296
  %17 = xor i64 %12, 4294967295
  %18 = and i64 %17, %7
  %19 = xor i64 %16, -4294967296
  %20 = xor i64 %15, 4294967295
  %21 = and i64 %20, %10
  %22 = xor i64 %15, -4294967296
  %23 = and i64 %22, %10
  %24 = and i64 %19, %7
  %25 = trunc i64 %18 to i32
  %26 = lshr exact i64 %24, 32
  %27 = trunc i64 %26 to i32
  %28 = bitcast i8* %2 to i32*
  store i32 %25, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %27, i32* %30, align 1, !tbaa !877
  %31 = trunc i64 %21 to i32
  %32 = getelementptr inbounds i8, i8* %2, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 1, !tbaa !877
  %34 = lshr i64 %23, 32
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds i8, i8* %2, i64 12
  %37 = bitcast i8* %36 to i32*
  store i32 %35, i32* %37, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x i64> undef, i64 %8, i32 0
  %12 = insertelement <2 x i64> %11, i64 %10, i32 1
  %13 = xor <2 x i64> %12, <i64 -1, i64 -1>
  %14 = and <2 x i64> %7, %13
  %15 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %15, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PANDN_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = xor <2 x i64> %9, <i64 -1, i64 -1>
  %11 = and <2 x i64> %7, %10
  %12 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %12, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = or i64 %6, %3
  store i64 %7, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = or i64 %4, %3
  store i64 %6, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3PORI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = or i32 %14, %11
  %22 = or i32 %16, %13
  %23 = trunc i64 %10 to i32
  %24 = or i32 %18, %23
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = or i32 %20, %26
  %28 = bitcast i8* %2 to i32*
  store i32 %21, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %22, i32* %30, align 1, !tbaa !877
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 1, !tbaa !877
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %27, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3PORI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = or i64 %12, %7
  %17 = or i64 %15, %10
  %18 = trunc i64 %16 to i32
  %19 = lshr i64 %16, 32
  %20 = trunc i64 %19 to i32
  %21 = bitcast i8* %2 to i32*
  store i32 %18, i32* %21, align 1, !tbaa !877
  %22 = getelementptr inbounds i8, i8* %2, i64 4
  %23 = bitcast i8* %22 to i32*
  store i32 %20, i32* %23, align 1, !tbaa !877
  %24 = trunc i64 %17 to i32
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !877
  %27 = lshr i64 %17, 32
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds i8, i8* %2, i64 12
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x i64> undef, i64 %8, i32 0
  %12 = insertelement <2 x i64> %11, i64 %10, i32 1
  %13 = or <2 x i64> %12, %7
  %14 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POR_64I3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = or <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PTESTI2VnI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = trunc i64 %6 to i32
  %11 = lshr i64 %6, 32
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %14 = add i64 %3, 4
  %15 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %3, 8
  %17 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %3, 12
  %19 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %18) #22
  %20 = and i32 %13, %10
  %21 = and i32 %15, %12
  %22 = trunc i64 %9 to i32
  %23 = and i32 %17, %22
  %24 = lshr i64 %9, 32
  %25 = trunc i64 %24 to i32
  %26 = and i32 %19, %25
  %27 = xor i32 %10, -1
  %28 = and i32 %13, %27
  %29 = xor i32 %12, -1
  %30 = and i32 %15, %29
  %31 = xor i32 %22, -1
  %32 = and i32 %17, %31
  %33 = xor i32 %25, -1
  %34 = and i32 %19, %33
  %35 = or i32 %21, %20
  %36 = or i32 %35, %23
  %37 = or i32 %36, %26
  %38 = or i32 %30, %28
  %39 = or i32 %38, %32
  %40 = or i32 %39, %34
  %41 = icmp eq i32 %37, 0
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %42, i8* %43, align 1, !tbaa !865
  %44 = icmp eq i32 %40, 0
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %45, i8* %46, align 1, !tbaa !850
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %47, align 1, !tbaa !863
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %48, align 1, !tbaa !864
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1, !tbaa !866
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %50, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PTESTI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture readonly, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %2 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = lshr i64 %6, 32
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = lshr i64 %12, 32
  %17 = and i64 %12, %6
  %18 = and i64 %16, %10
  %19 = and i64 %15, %9
  %20 = lshr i64 %15, 32
  %21 = lshr i64 %9, 32
  %22 = and i64 %20, %21
  %23 = xor i64 %6, 4294967295
  %24 = and i64 %12, %23
  %25 = xor i64 %10, 4294967295
  %26 = and i64 %16, %25
  %27 = xor i64 %9, 4294967295
  %28 = and i64 %15, %27
  %29 = xor i64 %21, 4294967295
  %30 = and i64 %20, %29
  %31 = or i64 %18, %17
  %32 = or i64 %31, %19
  %33 = or i64 %32, %22
  %34 = trunc i64 %33 to i32
  %35 = or i64 %26, %24
  %36 = or i64 %35, %28
  %37 = or i64 %36, %30
  %38 = trunc i64 %37 to i32
  %39 = icmp eq i32 %34, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !865
  %42 = icmp eq i32 %38, 0
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !850
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %45, align 1, !tbaa !863
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %46, align 1, !tbaa !864
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %47, align 1, !tbaa !866
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %48, align 1, !tbaa !867
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #2 {
  store i64 %3, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11LEAVE_16BITEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  store i64 %5, i64* %3, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = add i64 %4, 2
  store i64 %7, i64* %6, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10LEAVE_FULLI2InImEEEP6MemoryS4_R5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  store i64 %5, i64* %3, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = add i64 %4, 8
  store i64 %7, i64* %6, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ENTERItEEP6MemoryS2_R5State2InItES5_IhE(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %2, 65535
  %6 = and i64 %3, 31
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !870
  %9 = add i64 %8, -2
  %10 = shl nuw nsw i64 %6, 1
  %11 = sub i64 %9, %10
  %12 = sub i64 %11, %5
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %12, i16 zeroext %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !870
  store i64 %9, i64* %7, align 8, !tbaa !870
  %17 = trunc i64 %16 to i16
  %18 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %14, i64 %9, i16 zeroext %17) #22
  %19 = trunc i64 %3 to i5
  switch i5 %19, label %20 [
    i5 0, label %41
    i5 1, label %36
  ]

; <label>:20:                                     ; preds = %4
  %21 = add nsw i64 %6, -1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %36, label %23

; <label>:23:                                     ; preds = %20
  br label %24

; <label>:24:                                     ; preds = %24, %23
  %25 = phi i64 [ %29, %24 ], [ %16, %23 ]
  %26 = phi i64 [ %30, %24 ], [ %9, %23 ]
  %27 = phi i64 [ %33, %24 ], [ 1, %23 ]
  %28 = phi %struct.Memory* [ %32, %24 ], [ %18, %23 ]
  %29 = add i64 %25, -2
  %30 = add i64 %26, -2
  %31 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %28, i64 %29) #22
  %32 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %28, i64 %30, i16 zeroext %31) #22
  %33 = add i64 %27, 1
  %34 = icmp ugt i64 %33, %21
  br i1 %34, label %35, label %24, !llvm.loop !883

; <label>:35:                                     ; preds = %24
  br label %36

; <label>:36:                                     ; preds = %35, %20, %4
  %37 = phi %struct.Memory* [ %18, %4 ], [ %18, %20 ], [ %32, %35 ]
  %38 = phi i64 [ %9, %4 ], [ %9, %20 ], [ %30, %35 ]
  %39 = add i64 %38, -2
  %40 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %37, i64 %39, i64 %9) #22
  br label %41

; <label>:41:                                     ; preds = %36, %4
  %42 = phi %struct.Memory* [ %40, %36 ], [ %18, %4 ]
  %43 = phi i64 [ %39, %36 ], [ %9, %4 ]
  store i64 %9, i64* %15, align 8, !tbaa !870
  %44 = sub i64 %43, %5
  store i64 %44, i64* %7, align 8, !tbaa !870
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5ENTERImEEP6MemoryS2_R5State2InItES5_IhE(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = and i64 %2, 65535
  %6 = and i64 %3, 31
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !870
  %9 = add i64 %8, -8
  %10 = shl nuw nsw i64 %6, 3
  %11 = sub i64 %9, %10
  %12 = sub i64 %11, %5
  %13 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %12) #22
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %12, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !870
  store i64 %9, i64* %7, align 8, !tbaa !870
  %17 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %14, i64 %9, i64 %16) #22
  %18 = trunc i64 %3 to i5
  switch i5 %18, label %19 [
    i5 0, label %40
    i5 1, label %35
  ]

; <label>:19:                                     ; preds = %4
  %20 = add nsw i64 %6, -1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %35, label %22

; <label>:22:                                     ; preds = %19
  br label %23

; <label>:23:                                     ; preds = %23, %22
  %24 = phi i64 [ %28, %23 ], [ %16, %22 ]
  %25 = phi i64 [ %29, %23 ], [ %9, %22 ]
  %26 = phi i64 [ %32, %23 ], [ 1, %22 ]
  %27 = phi %struct.Memory* [ %31, %23 ], [ %17, %22 ]
  %28 = add i64 %24, -8
  %29 = add i64 %25, -8
  %30 = tail call i64 @__remill_read_memory_64(%struct.Memory* %27, i64 %28) #22
  %31 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %27, i64 %29, i64 %30) #22
  %32 = add i64 %26, 1
  %33 = icmp ugt i64 %32, %20
  br i1 %33, label %34, label %23, !llvm.loop !885

; <label>:34:                                     ; preds = %23
  br label %35

; <label>:35:                                     ; preds = %34, %19, %4
  %36 = phi %struct.Memory* [ %17, %4 ], [ %17, %19 ], [ %31, %34 ]
  %37 = phi i64 [ %9, %4 ], [ %9, %19 ], [ %29, %34 ]
  %38 = add i64 %37, -8
  %39 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %36, i64 %38, i64 %9) #22
  br label %40

; <label>:40:                                     ; preds = %35, %4
  %41 = phi %struct.Memory* [ %39, %35 ], [ %17, %4 ]
  %42 = phi i64 [ %38, %35 ], [ %9, %4 ]
  store i64 %9, i64* %15, align 8, !tbaa !870
  %43 = sub i64 %42, %5
  store i64 %43, i64* %7, align 8, !tbaa !870
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoNothingEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688)) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L22DoCLFLUSH_MEMmprefetchEP6MemoryR5State2MnIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoMFENCEEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688)) #8 {
  %3 = tail call %struct.Memory* @__remill_barrier_store_load(%struct.Memory* %0) #24
  ret %struct.Memory* %3
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #3

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoSFENCEEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688)) #8 {
  %3 = tail call %struct.Memory* @__remill_barrier_store_store(%struct.Memory* %0) #24
  ret %struct.Memory* %3
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #3

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoLFENCEEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688)) #8 {
  %3 = tail call %struct.Memory* @__remill_barrier_load_load(%struct.Memory* %0) #24
  ret %struct.Memory* %3
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoXLATEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = zext i8 %7 to i64
  %9 = add i64 %8, %4
  %10 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %9) #22
  store i8 %10, i8* %6, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCPUIDEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 258) #21
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.uint8v8_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %3, i64* %8, align 8
  %13 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13) #23
  %14 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 1
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 2
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 3
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 5
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 6
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 7
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = zext i8 %28 to i64
  %30 = shl nuw i64 %29, 56
  %31 = zext i8 %26 to i64
  %32 = shl nuw nsw i64 %31, 48
  %33 = zext i8 %24 to i64
  %34 = shl nuw nsw i64 %33, 40
  %35 = zext i8 %22 to i64
  %36 = shl nuw nsw i64 %35, 32
  %37 = zext i8 %20 to i64
  %38 = shl nuw nsw i64 %37, 24
  %39 = zext i8 %18 to i64
  %40 = shl nuw nsw i64 %39, 16
  %41 = zext i8 %16 to i64
  %42 = shl nuw nsw i64 %41, 8
  %43 = zext i8 %14 to i64
  %44 = or i64 %42, %43
  %45 = or i64 %44, %40
  %46 = or i64 %45, %38
  %47 = or i64 %46, %36
  %48 = or i64 %47, %34
  %49 = or i64 %48, %32
  %50 = or i64 %49, %30
  store i64 %50, i64* %10, align 8
  %51 = bitcast i64* %6 to i8*
  %52 = bitcast i64* %6 to [8 x i8]*
  %53 = bitcast i64* %7 to i8*
  %54 = bitcast i64* %7 to [8 x i8]*
  %55 = lshr i64 %50, 56
  %56 = trunc i64 %55 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 0, i64* %6, align 8
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 7
  store i8 %56, i8* %57, align 1, !tbaa !868
  %58 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %59 = lshr i64 %3, 56
  %60 = trunc i64 %59 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %53)
  store i64 %58, i64* %7, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %54, i64 0, i64 6
  store i8 %60, i8* %61, align 2, !tbaa !868
  %62 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %53)
  %63 = lshr i64 %49, 48
  %64 = trunc i64 %63 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %62, i64* %6, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 5
  store i8 %64, i8* %65, align 1, !tbaa !868
  %66 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %67 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 6
  %68 = load i8, i8* %67, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %53)
  store i64 %66, i64* %7, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %54, i64 0, i64 4
  store i8 %68, i8* %69, align 4, !tbaa !868
  %70 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %53)
  %71 = lshr i64 %48, 40
  %72 = trunc i64 %71 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %70, i64* %6, align 8
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 3
  store i8 %72, i8* %73, align 1, !tbaa !868
  %74 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 5
  %76 = load i8, i8* %75, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %53)
  store i64 %74, i64* %7, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %54, i64 0, i64 2
  store i8 %76, i8* %77, align 2, !tbaa !868
  %78 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %53)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %78, i64* %6, align 8
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 1
  store i8 %80, i8* %81, align 1, !tbaa !868
  %82 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %83 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 4
  %84 = load i8, i8* %83, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %53)
  store i64 %82, i64* %7, align 8
  %85 = bitcast i64* %7 to i8*
  store i8 %84, i8* %85, align 8, !tbaa !868
  %86 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %53)
  %87 = lshr i64 %86, 8
  %88 = lshr i64 %86, 16
  %89 = lshr i64 %86, 24
  %90 = lshr i64 %86, 32
  %91 = lshr i64 %86, 40
  %92 = lshr i64 %86, 48
  %93 = lshr i64 %86, 56
  %94 = trunc i64 %86 to i8
  %95 = trunc i64 %87 to i8
  %96 = trunc i64 %88 to i8
  %97 = trunc i64 %89 to i8
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = bitcast i64* %2 to [8 x i8]*
  %103 = bitcast i64* %2 to i8*
  store i8 %94, i8* %103, align 1, !tbaa !868
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 1
  store i8 %95, i8* %104, align 1, !tbaa !868
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 2
  store i8 %96, i8* %105, align 1, !tbaa !868
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 3
  store i8 %97, i8* %106, align 1, !tbaa !868
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 4
  store i8 %98, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 5
  store i8 %99, i8* %108, align 1, !tbaa !868
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 6
  store i8 %100, i8* %109, align 1, !tbaa !868
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %102, i64 0, i64 7
  store i8 %101, i8* %110, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.uint8v8_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %3, i64* %8, align 8
  %13 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13) #23
  store i64 %4, i64* %10, align 8
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [8 x i8]*
  %16 = bitcast i64* %7 to i8*
  %17 = bitcast i64* %7 to [8 x i8]*
  %18 = lshr i64 %4, 56
  %19 = trunc i64 %18 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 7
  store i8 %19, i8* %20, align 1, !tbaa !868
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %22 = lshr i64 %3, 56
  %23 = trunc i64 %22 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %21, i64* %7, align 8
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 6
  store i8 %23, i8* %24, align 2, !tbaa !868
  %25 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %26 = lshr i64 %4, 48
  %27 = trunc i64 %26 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %25, i64* %6, align 8
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 5
  store i8 %27, i8* %28, align 1, !tbaa !868
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %30 = lshr i64 %3, 48
  %31 = trunc i64 %30 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %29, i64* %7, align 8
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 4
  store i8 %31, i8* %32, align 4, !tbaa !868
  %33 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %34 = lshr i64 %4, 40
  %35 = trunc i64 %34 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %33, i64* %6, align 8
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 3
  store i8 %35, i8* %36, align 1, !tbaa !868
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %38 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 5
  %39 = load i8, i8* %38, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %37, i64* %7, align 8
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 2
  store i8 %39, i8* %40, align 2, !tbaa !868
  %41 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %42 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 4
  %43 = load i8, i8* %42, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %41, i64* %6, align 8
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 1
  store i8 %43, i8* %44, align 1, !tbaa !868
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %46 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 4
  %47 = load i8, i8* %46, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %45, i64* %7, align 8
  %48 = bitcast i64* %7 to i8*
  store i8 %47, i8* %48, align 8, !tbaa !868
  %49 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %50 = lshr i64 %49, 8
  %51 = lshr i64 %49, 16
  %52 = lshr i64 %49, 24
  %53 = lshr i64 %49, 32
  %54 = lshr i64 %49, 40
  %55 = lshr i64 %49, 48
  %56 = lshr i64 %49, 56
  %57 = trunc i64 %49 to i8
  %58 = trunc i64 %50 to i8
  %59 = trunc i64 %51 to i8
  %60 = trunc i64 %52 to i8
  %61 = trunc i64 %53 to i8
  %62 = trunc i64 %54 to i8
  %63 = trunc i64 %55 to i8
  %64 = trunc i64 %56 to i8
  %65 = bitcast i64* %2 to [8 x i8]*
  %66 = bitcast i64* %2 to i8*
  store i8 %57, i8* %66, align 1, !tbaa !868
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 1
  store i8 %58, i8* %67, align 1, !tbaa !868
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 2
  store i8 %59, i8* %68, align 1, !tbaa !868
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 3
  store i8 %60, i8* %69, align 1, !tbaa !868
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 4
  store i8 %61, i8* %70, align 1, !tbaa !868
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 5
  store i8 %62, i8* %71, align 1, !tbaa !868
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 6
  store i8 %63, i8* %72, align 1, !tbaa !868
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %65, i64 0, i64 7
  store i8 %64, i8* %73, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %12 to %struct.uint8v16_t*
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) #23
  %16 = bitcast i8* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  store <2 x i64> %17, <2 x i64>* %9, align 16
  %18 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18) #23
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %20 = add i64 %4, 1
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 2
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 3
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 4
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %4, 5
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %4, 6
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = add i64 %4, 7
  %33 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %32) #22
  %34 = add i64 %4, 8
  %35 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %34) #22
  %36 = add i64 %4, 9
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = add i64 %4, 10
  %39 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %38) #22
  %40 = add i64 %4, 11
  %41 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %40) #22
  %42 = add i64 %4, 12
  %43 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %42) #22
  %44 = add i64 %4, 13
  %45 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %44) #22
  %46 = add i64 %4, 14
  %47 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %46) #22
  %48 = add i64 %4, 15
  %49 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %48) #22
  %50 = insertelement <2 x i8> undef, i8 %33, i32 0
  %51 = insertelement <2 x i8> %50, i8 %49, i32 1
  %52 = zext <2 x i8> %51 to <2 x i64>
  %53 = shl nuw <2 x i64> %52, <i64 56, i64 56>
  %54 = insertelement <2 x i8> undef, i8 %31, i32 0
  %55 = insertelement <2 x i8> %54, i8 %47, i32 1
  %56 = zext <2 x i8> %55 to <2 x i64>
  %57 = shl nuw nsw <2 x i64> %56, <i64 48, i64 48>
  %58 = insertelement <2 x i8> undef, i8 %29, i32 0
  %59 = insertelement <2 x i8> %58, i8 %45, i32 1
  %60 = zext <2 x i8> %59 to <2 x i64>
  %61 = shl nuw nsw <2 x i64> %60, <i64 40, i64 40>
  %62 = insertelement <2 x i8> undef, i8 %27, i32 0
  %63 = insertelement <2 x i8> %62, i8 %43, i32 1
  %64 = zext <2 x i8> %63 to <2 x i64>
  %65 = shl nuw nsw <2 x i64> %64, <i64 32, i64 32>
  %66 = insertelement <2 x i8> undef, i8 %25, i32 0
  %67 = insertelement <2 x i8> %66, i8 %41, i32 1
  %68 = zext <2 x i8> %67 to <2 x i64>
  %69 = shl nuw nsw <2 x i64> %68, <i64 24, i64 24>
  %70 = insertelement <2 x i8> undef, i8 %23, i32 0
  %71 = insertelement <2 x i8> %70, i8 %39, i32 1
  %72 = zext <2 x i8> %71 to <2 x i64>
  %73 = shl nuw nsw <2 x i64> %72, <i64 16, i64 16>
  %74 = insertelement <2 x i8> undef, i8 %21, i32 0
  %75 = insertelement <2 x i8> %74, i8 %37, i32 1
  %76 = zext <2 x i8> %75 to <2 x i64>
  %77 = shl nuw nsw <2 x i64> %76, <i64 8, i64 8>
  %78 = insertelement <2 x i8> undef, i8 %19, i32 0
  %79 = insertelement <2 x i8> %78, i8 %35, i32 1
  %80 = zext <2 x i8> %79 to <2 x i64>
  %81 = or <2 x i64> %77, %80
  %82 = or <2 x i64> %81, %73
  %83 = or <2 x i64> %82, %69
  %84 = or <2 x i64> %83, %65
  %85 = or <2 x i64> %84, %61
  %86 = or <2 x i64> %85, %57
  %87 = or <2 x i64> %86, %53
  store <2 x i64> %87, <2 x i64>* %12, align 16
  %88 = bitcast <2 x i64>* %6 to i8*
  %89 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %91 = bitcast <2 x i64>* %6 to [16 x i8]*
  %92 = bitcast { i64, i64 }* %8 to i8*
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %95 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %96 = extractelement <2 x i64> %87, i32 1
  %97 = lshr i64 %96, 56
  %98 = trunc i64 %97 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 15
  store i8 %98, i8* %99, align 1, !tbaa !868
  %100 = load i64, i64* %90, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  %102 = load i8, i8* %101, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 0, i64* %93, align 8
  store i64 %100, i64* %94, align 8
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %95, i64 0, i64 14
  store i8 %102, i8* %103, align 2, !tbaa !868
  %104 = load i64, i64* %94, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %105 = extractelement <2 x i64> %86, i32 1
  %106 = lshr i64 %105, 48
  %107 = trunc i64 %106 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 0, i64* %89, align 16
  store i64 %104, i64* %90, align 8
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 13
  store i8 %107, i8* %108, align 1, !tbaa !868
  %109 = load i64, i64* %90, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  %111 = load i8, i8* %110, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 0, i64* %93, align 8
  store i64 %109, i64* %94, align 8
  %112 = getelementptr inbounds [16 x i8], [16 x i8]* %95, i64 0, i64 12
  store i8 %111, i8* %112, align 4, !tbaa !868
  %113 = load i64, i64* %94, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %114 = extractelement <2 x i64> %85, i32 1
  %115 = lshr i64 %114, 40
  %116 = trunc i64 %115 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 0, i64* %89, align 16
  store i64 %113, i64* %90, align 8
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 11
  store i8 %116, i8* %117, align 1, !tbaa !868
  %118 = load i64, i64* %90, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  %120 = load i8, i8* %119, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 0, i64* %93, align 8
  store i64 %118, i64* %94, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %95, i64 0, i64 10
  store i8 %120, i8* %121, align 2, !tbaa !868
  %122 = load i64, i64* %94, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %123 = extractelement <2 x i64> %84, i32 1
  %124 = lshr i64 %123, 32
  %125 = trunc i64 %124 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 0, i64* %89, align 16
  store i64 %122, i64* %90, align 8
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 9
  store i8 %125, i8* %126, align 1, !tbaa !868
  %127 = load i64, i64* %90, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %129 = load i8, i8* %128, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 0, i64* %93, align 8
  store i64 %127, i64* %94, align 8
  %130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %131 = bitcast i64* %130 to i8*
  store i8 %129, i8* %131, align 8, !tbaa !868
  %132 = load i64, i64* %94, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 0, i64* %89, align 16
  store i64 %132, i64* %90, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 7
  store i8 %41, i8* %133, align 1, !tbaa !868
  %134 = load i64, i64* %89, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %136 = load i8, i8* %135, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 %134, i64* %93, align 8
  store i64 %132, i64* %94, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %95, i64 0, i64 6
  store i8 %136, i8* %137, align 2, !tbaa !868
  %138 = load i64, i64* %93, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 10
  %140 = load i8, i8* %139, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 %138, i64* %89, align 16
  store i64 %132, i64* %90, align 8
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 5
  store i8 %140, i8* %141, align 1, !tbaa !868
  %142 = load i64, i64* %89, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %144 = load i8, i8* %143, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 %142, i64* %93, align 8
  store i64 %132, i64* %94, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %95, i64 0, i64 4
  store i8 %144, i8* %145, align 4, !tbaa !868
  %146 = load i64, i64* %93, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 9
  %148 = load i8, i8* %147, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 %146, i64* %89, align 16
  store i64 %132, i64* %90, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 3
  store i8 %148, i8* %149, align 1, !tbaa !868
  %150 = load i64, i64* %89, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %152 = load i8, i8* %151, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 %150, i64* %93, align 8
  store i64 %132, i64* %94, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %95, i64 0, i64 2
  store i8 %152, i8* %153, align 2, !tbaa !868
  %154 = load i64, i64* %93, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %156 = bitcast i64* %155 to i8*
  %157 = load i8, i8* %156, align 8, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %88)
  store i64 %154, i64* %89, align 16
  store i64 %132, i64* %90, align 8
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %91, i64 0, i64 1
  store i8 %157, i8* %158, align 1, !tbaa !868
  %159 = load i64, i64* %89, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %88)
  %160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %161 = bitcast i64* %160 to i8*
  %162 = load i8, i8* %161, align 8, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %92)
  store i64 %159, i64* %93, align 8
  store i64 %132, i64* %94, align 8
  %163 = bitcast { i64, i64 }* %8 to i8*
  store i8 %162, i8* %163, align 8, !tbaa !868
  %164 = load i64, i64* %93, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %92)
  %165 = lshr i64 %164, 8
  %166 = lshr i64 %164, 16
  %167 = lshr i64 %164, 24
  %168 = lshr i64 %164, 32
  %169 = lshr i64 %164, 40
  %170 = lshr i64 %164, 48
  %171 = lshr i64 %164, 56
  %172 = trunc i64 %164 to i8
  %173 = trunc i64 %165 to i8
  %174 = trunc i64 %166 to i8
  %175 = trunc i64 %167 to i8
  %176 = trunc i64 %168 to i8
  %177 = trunc i64 %169 to i8
  %178 = trunc i64 %170 to i8
  %179 = trunc i64 %171 to i8
  store i8 %172, i8* %2, align 1, !tbaa !868
  %180 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %173, i8* %180, align 1, !tbaa !868
  %181 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %174, i8* %181, align 1, !tbaa !868
  %182 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %175, i8* %182, align 1, !tbaa !868
  %183 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %176, i8* %183, align 1, !tbaa !868
  %184 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %177, i8* %184, align 1, !tbaa !868
  %185 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %178, i8* %185, align 1, !tbaa !868
  %186 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %179, i8* %186, align 1, !tbaa !868
  %187 = trunc i64 %132 to i8
  %188 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %187, i8* %188, align 1, !tbaa !868
  %189 = lshr i64 %132, 8
  %190 = trunc i64 %189 to i8
  %191 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %190, i8* %191, align 1, !tbaa !868
  %192 = lshr i64 %132, 16
  %193 = trunc i64 %192 to i8
  %194 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %193, i8* %194, align 1, !tbaa !868
  %195 = lshr i64 %132, 24
  %196 = trunc i64 %195 to i8
  %197 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %196, i8* %197, align 1, !tbaa !868
  %198 = lshr i64 %132, 32
  %199 = trunc i64 %198 to i8
  %200 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %199, i8* %200, align 1, !tbaa !868
  %201 = lshr i64 %132, 40
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %202, i8* %203, align 1, !tbaa !868
  %204 = lshr i64 %132, 48
  %205 = trunc i64 %204 to i8
  %206 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %205, i8* %206, align 1, !tbaa !868
  %207 = lshr i64 %132, 56
  %208 = trunc i64 %207 to i8
  %209 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %208, i8* %209, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %12 to %struct.uint8v16_t*
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) #23
  %16 = bitcast i8* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  store <2 x i64> %17, <2 x i64>* %9, align 16
  %18 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18) #23
  %19 = bitcast i8* %4 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 1
  store <2 x i64> %20, <2 x i64>* %12, align 16
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [16 x i8]*
  %25 = bitcast { i64, i64 }* %8 to i8*
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %28 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %29 = extractelement <2 x i64> %20, i32 1
  %30 = lshr i64 %29, 56
  %31 = trunc i64 %30 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 15
  store i8 %31, i8* %32, align 1, !tbaa !868
  %33 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = extractelement <2 x i64> %17, i32 1
  %35 = lshr i64 %34, 56
  %36 = trunc i64 %35 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %33, i64* %27, align 8
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 14
  store i8 %36, i8* %37, align 2, !tbaa !868
  %38 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %39 = lshr i64 %29, 48
  %40 = trunc i64 %39 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %38, i64* %23, align 8
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 13
  store i8 %40, i8* %41, align 1, !tbaa !868
  %42 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %43 = lshr i64 %34, 48
  %44 = trunc i64 %43 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %42, i64* %27, align 8
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 12
  store i8 %44, i8* %45, align 4, !tbaa !868
  %46 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %47 = lshr i64 %29, 40
  %48 = trunc i64 %47 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %46, i64* %23, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 11
  store i8 %48, i8* %49, align 1, !tbaa !868
  %50 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %51 = lshr i64 %34, 40
  %52 = trunc i64 %51 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %50, i64* %27, align 8
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 10
  store i8 %52, i8* %53, align 2, !tbaa !868
  %54 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %55 = lshr i64 %29, 32
  %56 = trunc i64 %55 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %54, i64* %23, align 8
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 9
  store i8 %56, i8* %57, align 1, !tbaa !868
  %58 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %59 = lshr i64 %34, 32
  %60 = trunc i64 %59 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 0, i64* %26, align 8
  store i64 %58, i64* %27, align 8
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %62 = bitcast i64* %61 to i8*
  store i8 %60, i8* %62, align 8, !tbaa !868
  %63 = load i64, i64* %27, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %64 = lshr i64 %29, 24
  %65 = trunc i64 %64 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 7
  store i8 %65, i8* %66, align 1, !tbaa !868
  %67 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %68 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %69 = load i8, i8* %68, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %67, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 6
  store i8 %69, i8* %70, align 2, !tbaa !868
  %71 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 10
  %73 = load i8, i8* %72, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %71, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 5
  store i8 %73, i8* %74, align 1, !tbaa !868
  %75 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %76 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %77 = load i8, i8* %76, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %75, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 4
  store i8 %77, i8* %78, align 4, !tbaa !868
  %79 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %14, i64 0, i32 0, i64 9
  %81 = load i8, i8* %80, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 3
  store i8 %81, i8* %82, align 1, !tbaa !868
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %85 = load i8, i8* %84, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %83, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %28, i64 0, i64 2
  store i8 %85, i8* %86, align 2, !tbaa !868
  %87 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %87, i64* %22, align 16
  store i64 %63, i64* %23, align 8
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %24, i64 0, i64 1
  store i8 %90, i8* %91, align 1, !tbaa !868
  %92 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %94 = bitcast i64* %93 to i8*
  %95 = load i8, i8* %94, align 8, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %25)
  store i64 %92, i64* %26, align 8
  store i64 %63, i64* %27, align 8
  %96 = bitcast { i64, i64 }* %8 to i8*
  store i8 %95, i8* %96, align 8, !tbaa !868
  %97 = load i64, i64* %26, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %25)
  %98 = lshr i64 %97, 8
  %99 = lshr i64 %97, 16
  %100 = lshr i64 %97, 24
  %101 = lshr i64 %97, 32
  %102 = lshr i64 %97, 40
  %103 = lshr i64 %97, 48
  %104 = lshr i64 %97, 56
  %105 = trunc i64 %97 to i8
  %106 = trunc i64 %98 to i8
  %107 = trunc i64 %99 to i8
  %108 = trunc i64 %100 to i8
  %109 = trunc i64 %101 to i8
  %110 = trunc i64 %102 to i8
  %111 = trunc i64 %103 to i8
  %112 = trunc i64 %104 to i8
  store i8 %105, i8* %2, align 1, !tbaa !868
  %113 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %106, i8* %113, align 1, !tbaa !868
  %114 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %107, i8* %114, align 1, !tbaa !868
  %115 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %108, i8* %115, align 1, !tbaa !868
  %116 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %109, i8* %116, align 1, !tbaa !868
  %117 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %110, i8* %117, align 1, !tbaa !868
  %118 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %111, i8* %118, align 1, !tbaa !868
  %119 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %112, i8* %119, align 1, !tbaa !868
  %120 = trunc i64 %63 to i8
  %121 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %120, i8* %121, align 1, !tbaa !868
  %122 = lshr i64 %63, 8
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %123, i8* %124, align 1, !tbaa !868
  %125 = lshr i64 %63, 16
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %126, i8* %127, align 1, !tbaa !868
  %128 = lshr i64 %63, 24
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %129, i8* %130, align 1, !tbaa !868
  %131 = lshr i64 %63, 32
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %132, i8* %133, align 1, !tbaa !868
  %134 = lshr i64 %63, 40
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %135, i8* %136, align 1, !tbaa !868
  %137 = lshr i64 %63, 48
  %138 = trunc i64 %137 to i8
  %139 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %138, i8* %139, align 1, !tbaa !868
  %140 = lshr i64 %63, 56
  %141 = trunc i64 %140 to i8
  %142 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %141, i8* %142, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = add i64 %4, 4
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 6
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = bitcast i64* %6 to i8*
  %13 = bitcast i64* %6 to [4 x i16]*
  %14 = bitcast i64* %7 to i8*
  %15 = bitcast i64* %7 to [4 x i16]*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 0, i64* %6, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 3
  store i16 %11, i16* %16, align 2, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %18 = lshr i64 %3, 48
  %19 = trunc i64 %18 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %17, i64* %7, align 8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %19, i16* %20, align 4, !tbaa !869
  %21 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %21, i64* %6, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %13, i64 0, i64 1
  store i16 %9, i16* %22, align 2, !tbaa !869
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %24 = lshr i64 %3, 32
  %25 = trunc i64 %24 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %23, i64* %7, align 8
  %26 = bitcast i64* %7 to i16*
  store i16 %25, i16* %26, align 8, !tbaa !869
  %27 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %28 = lshr i64 %27, 16
  %29 = lshr i64 %27, 32
  %30 = lshr i64 %27, 48
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = trunc i64 %29 to i16
  %34 = trunc i64 %30 to i16
  %35 = bitcast i64* %2 to [4 x i16]*
  %36 = bitcast i64* %2 to i16*
  store i16 %31, i16* %36, align 1, !tbaa !869
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 1
  store i16 %32, i16* %37, align 1, !tbaa !869
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 2
  store i16 %33, i16* %38, align 1, !tbaa !869
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 3
  store i16 %34, i16* %39, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = bitcast i64* %7 to i8*
  %11 = bitcast i64* %7 to [4 x i16]*
  %12 = lshr i64 %4, 48
  %13 = trunc i64 %12 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  store i16 %13, i16* %14, align 2, !tbaa !869
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %16 = lshr i64 %3, 48
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %15, i64* %7, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %17, i16* %18, align 4, !tbaa !869
  %19 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %20 = lshr i64 %4, 32
  %21 = trunc i64 %20 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %19, i64* %6, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %21, i16* %22, align 2, !tbaa !869
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %24 = lshr i64 %3, 32
  %25 = trunc i64 %24 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %23, i64* %7, align 8
  %26 = bitcast i64* %7 to i16*
  store i16 %25, i16* %26, align 8, !tbaa !869
  %27 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %28 = lshr i64 %27, 16
  %29 = lshr i64 %27, 32
  %30 = lshr i64 %27, 48
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = trunc i64 %29 to i16
  %34 = trunc i64 %30 to i16
  %35 = bitcast i64* %2 to [4 x i16]*
  %36 = bitcast i64* %2 to i16*
  store i16 %31, i16* %36, align 1, !tbaa !869
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 1
  store i16 %32, i16* %37, align 1, !tbaa !869
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 2
  store i16 %33, i16* %38, align 1, !tbaa !869
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %35, i64 0, i64 3
  store i16 %34, i16* %39, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #23
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = add i64 %4, 8
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 10
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 14
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = bitcast <2 x i64>* %6 to i8*
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %26 = bitcast <2 x i64>* %6 to [8 x i16]*
  %27 = bitcast { i64, i64 }* %8 to i8*
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %30 = bitcast { i64, i64 }* %8 to [8 x i16]*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 %22, i16* %31, align 2, !tbaa !869
  %32 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %33 = extractelement <2 x i64> %14, i32 1
  %34 = lshr i64 %33, 48
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 0, i64* %28, align 8
  store i64 %32, i64* %29, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %30, i64 0, i64 6
  store i16 %35, i16* %36, align 4, !tbaa !869
  %37 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 0, i64* %24, align 16
  store i64 %37, i64* %25, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 %20, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %40 = lshr i64 %33, 32
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 0, i64* %28, align 8
  store i64 %39, i64* %29, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %43 = bitcast i64* %42 to i16*
  store i16 %41, i16* %43, align 8, !tbaa !869
  %44 = load i64, i64* %29, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 0, i64* %24, align 16
  store i64 %44, i64* %25, align 8
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 %18, i16* %45, align 2, !tbaa !869
  %46 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %47 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %48 = load i16, i16* %47, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 %46, i64* %28, align 8
  store i64 %44, i64* %29, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %30, i64 0, i64 2
  store i16 %48, i16* %49, align 4, !tbaa !869
  %50 = load i64, i64* %28, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %44, i64* %25, align 8
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 %16, i16* %51, align 2, !tbaa !869
  %52 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %54 = bitcast i64* %53 to i16*
  %55 = load i16, i16* %54, align 8, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %27)
  store i64 %52, i64* %28, align 8
  store i64 %44, i64* %29, align 8
  %56 = bitcast { i64, i64 }* %8 to i16*
  store i16 %55, i16* %56, align 8, !tbaa !869
  %57 = load i64, i64* %28, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %27)
  %58 = lshr i64 %57, 16
  %59 = lshr i64 %57, 32
  %60 = lshr i64 %57, 48
  %61 = trunc i64 %57 to i16
  %62 = trunc i64 %58 to i16
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = bitcast i8* %2 to i16*
  store i16 %61, i16* %65, align 1, !tbaa !869
  %66 = getelementptr inbounds i8, i8* %2, i64 2
  %67 = bitcast i8* %66 to i16*
  store i16 %62, i16* %67, align 1, !tbaa !869
  %68 = getelementptr inbounds i8, i8* %2, i64 4
  %69 = bitcast i8* %68 to i16*
  store i16 %63, i16* %69, align 1, !tbaa !869
  %70 = getelementptr inbounds i8, i8* %2, i64 6
  %71 = bitcast i8* %70 to i16*
  store i16 %64, i16* %71, align 1, !tbaa !869
  %72 = trunc i64 %44 to i16
  %73 = getelementptr inbounds i8, i8* %2, i64 8
  %74 = bitcast i8* %73 to i16*
  store i16 %72, i16* %74, align 1, !tbaa !869
  %75 = lshr i64 %44, 16
  %76 = trunc i64 %75 to i16
  %77 = getelementptr inbounds i8, i8* %2, i64 10
  %78 = bitcast i8* %77 to i16*
  store i16 %76, i16* %78, align 1, !tbaa !869
  %79 = lshr i64 %44, 32
  %80 = trunc i64 %79 to i16
  %81 = getelementptr inbounds i8, i8* %2, i64 12
  %82 = bitcast i8* %81 to i16*
  store i16 %80, i16* %82, align 1, !tbaa !869
  %83 = lshr i64 %44, 48
  %84 = trunc i64 %83 to i16
  %85 = getelementptr inbounds i8, i8* %2, i64 14
  %86 = bitcast i8* %85 to i16*
  store i16 %84, i16* %86, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHWDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #23
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %9, align 16
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [8 x i16]*
  %21 = bitcast { i64, i64 }* %8 to i8*
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %24 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %25 = lshr i64 %16, 48
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 7
  store i16 %26, i16* %27, align 2, !tbaa !869
  %28 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %29 = extractelement <2 x i64> %13, i32 1
  %30 = lshr i64 %29, 48
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 8
  store i64 %28, i64* %23, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %31, i16* %32, align 4, !tbaa !869
  %33 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = lshr i64 %16, 32
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 0, i64* %18, align 16
  store i64 %33, i64* %19, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 5
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %38 = lshr i64 %29, 32
  %39 = trunc i64 %38 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 0, i64* %22, align 8
  store i64 %37, i64* %23, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %41 = bitcast i64* %40 to i16*
  store i16 %39, i16* %41, align 8, !tbaa !869
  %42 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %43 = lshr i64 %16, 16
  %44 = trunc i64 %43 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 0, i64* %18, align 16
  store i64 %42, i64* %19, align 8
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 3
  store i16 %44, i16* %45, align 2, !tbaa !869
  %46 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %47 = lshr i64 %29, 16
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %46, i64* %22, align 8
  store i64 %42, i64* %23, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %48, i16* %49, align 4, !tbaa !869
  %50 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %51 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %50, i64* %18, align 16
  store i64 %42, i64* %19, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 1
  store i16 %51, i16* %52, align 2, !tbaa !869
  %53 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %55 = bitcast i64* %54 to i16*
  %56 = load i16, i16* %55, align 8, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %53, i64* %22, align 8
  store i64 %42, i64* %23, align 8
  %57 = bitcast { i64, i64 }* %8 to i16*
  store i16 %56, i16* %57, align 8, !tbaa !869
  %58 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %59 = lshr i64 %58, 16
  %60 = lshr i64 %58, 32
  %61 = lshr i64 %58, 48
  %62 = trunc i64 %58 to i16
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = trunc i64 %61 to i16
  %66 = bitcast i8* %2 to i16*
  store i16 %62, i16* %66, align 1, !tbaa !869
  %67 = getelementptr inbounds i8, i8* %2, i64 2
  %68 = bitcast i8* %67 to i16*
  store i16 %63, i16* %68, align 1, !tbaa !869
  %69 = getelementptr inbounds i8, i8* %2, i64 4
  %70 = bitcast i8* %69 to i16*
  store i16 %64, i16* %70, align 1, !tbaa !869
  %71 = getelementptr inbounds i8, i8* %2, i64 6
  %72 = bitcast i8* %71 to i16*
  store i16 %65, i16* %72, align 1, !tbaa !869
  %73 = trunc i64 %42 to i16
  %74 = getelementptr inbounds i8, i8* %2, i64 8
  %75 = bitcast i8* %74 to i16*
  store i16 %73, i16* %75, align 1, !tbaa !869
  %76 = lshr i64 %42, 16
  %77 = trunc i64 %76 to i16
  %78 = getelementptr inbounds i8, i8* %2, i64 10
  %79 = bitcast i8* %78 to i16*
  store i16 %77, i16* %79, align 1, !tbaa !869
  %80 = lshr i64 %42, 32
  %81 = trunc i64 %80 to i16
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  %83 = bitcast i8* %82 to i16*
  store i16 %81, i16* %83, align 1, !tbaa !869
  %84 = lshr i64 %42, 48
  %85 = trunc i64 %84 to i16
  %86 = getelementptr inbounds i8, i8* %2, i64 14
  %87 = bitcast i8* %86 to i16*
  store i16 %85, i16* %87, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = add i64 %4, 4
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %8) #22
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  %12 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %9, i32* %13, align 4, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12)
  store i64 %14, i64* %7, align 8
  %17 = bitcast i64* %7 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12)
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %18, 32
  %21 = trunc i64 %20 to i32
  %22 = bitcast i64* %2 to [2 x i32]*
  %23 = bitcast i64* %2 to i32*
  store i32 %19, i32* %23, align 1, !tbaa !877
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0, i64 1
  store i32 %21, i32* %24, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [2 x i32]*
  %10 = bitcast i64* %7 to i8*
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %12, i32* %13, align 4, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %14, i64* %7, align 8
  %17 = bitcast i64* %7 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %18, 32
  %21 = trunc i64 %20 to i32
  %22 = bitcast i64* %2 to [2 x i32]*
  %23 = bitcast i64* %2 to i32*
  store i32 %19, i32* %23, align 1, !tbaa !877
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0, i64 1
  store i32 %21, i32* %24, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = add i64 %4, 8
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 12
  %15 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %14) #22
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [4 x i32]*
  %20 = bitcast { i64, i64 }* %8 to i8*
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %15, i32* %23, align 4, !tbaa !877
  %24 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %25 = lshr i64 %11, 32
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 0, i64* %21, align 8
  store i64 %24, i64* %22, align 8
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %28 = bitcast i64* %27 to i32*
  store i32 %26, i32* %28, align 8, !tbaa !877
  %29 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 0, i64* %17, align 16
  store i64 %29, i64* %18, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %13, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %32 = trunc i64 %11 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 8
  store i64 %29, i64* %22, align 8
  %33 = bitcast { i64, i64 }* %8 to i32*
  store i32 %32, i32* %33, align 8, !tbaa !877
  %34 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %34, 32
  %36 = trunc i64 %34 to i32
  %37 = trunc i64 %35 to i32
  %38 = bitcast i8* %2 to i32*
  store i32 %36, i32* %38, align 1, !tbaa !877
  %39 = getelementptr inbounds i8, i8* %2, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 %37, i32* %40, align 1, !tbaa !877
  %41 = trunc i64 %29 to i32
  %42 = getelementptr inbounds i8, i8* %2, i64 8
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 1, !tbaa !877
  %44 = lshr i64 %29, 32
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i8, i8* %2, i64 12
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKHDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [4 x i32]*
  %19 = bitcast { i64, i64 }* %8 to i8*
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %22 = lshr i64 %14, 32
  %23 = trunc i64 %22 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 3
  store i32 %23, i32* %24, align 4, !tbaa !877
  %25 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %26 = lshr i64 %11, 32
  %27 = trunc i64 %26 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 0, i64* %20, align 8
  store i64 %25, i64* %21, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %29 = bitcast i64* %28 to i32*
  store i32 %27, i32* %29, align 8, !tbaa !877
  %30 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = trunc i64 %14 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 0, i64* %16, align 16
  store i64 %30, i64* %17, align 8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 1
  store i32 %31, i32* %32, align 4, !tbaa !877
  %33 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %34 = trunc i64 %11 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %33, i64* %20, align 8
  store i64 %30, i64* %21, align 8
  %35 = bitcast { i64, i64 }* %8 to i32*
  store i32 %34, i32* %35, align 8, !tbaa !877
  %36 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %36 to i32
  %39 = trunc i64 %37 to i32
  %40 = bitcast i8* %2 to i32*
  store i32 %38, i32* %40, align 1, !tbaa !877
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i32*
  store i32 %39, i32* %42, align 1, !tbaa !877
  %43 = trunc i64 %30 to i32
  %44 = getelementptr inbounds i8, i8* %2, i64 8
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1, !tbaa !877
  %46 = lshr i64 %30, 32
  %47 = trunc i64 %46 to i32
  %48 = getelementptr inbounds i8, i8* %2, i64 12
  %49 = bitcast i8* %48 to i32*
  store i32 %47, i32* %49, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKHQDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = bitcast i8* %2 to i64*
  store i64 %8, i64* %11, align 1, !tbaa !870
  %12 = getelementptr inbounds i8, i8* %2, i64 8
  %13 = bitcast i8* %12 to i64*
  store i64 %10, i64* %13, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKHQDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %4, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %2 to i64*
  store i64 %8, i64* %12, align 1, !tbaa !870
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 %11, i64* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI4RVnWI7vec64_tE3RVnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i32, align 4
  %11 = bitcast i32* %10 to %struct.uint8v4_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %3, i64* %8, align 8
  %13 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start(i64 4, i8* nonnull %13) #23
  %14 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 1
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 2
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 3
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = zext i8 %20 to i32
  %22 = shl nuw i32 %21, 24
  %23 = zext i8 %18 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = zext i8 %16 to i32
  %26 = shl nuw nsw i32 %25, 8
  %27 = zext i8 %14 to i32
  %28 = or i32 %26, %27
  %29 = or i32 %28, %24
  %30 = or i32 %29, %22
  store i32 %30, i32* %10, align 4
  %31 = bitcast i64* %6 to i8*
  %32 = bitcast i64* %6 to [8 x i8]*
  %33 = bitcast i64* %7 to i8*
  %34 = bitcast i64* %7 to [8 x i8]*
  %35 = trunc i64 %3 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 0, i64* %6, align 8
  %36 = bitcast i64* %6 to i8*
  store i8 %35, i8* %36, align 8, !tbaa !868
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %33)
  store i64 %37, i64* %7, align 8
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %34, i64 0, i64 1
  store i8 %14, i8* %38, align 1, !tbaa !868
  %39 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %33)
  %40 = lshr i64 %3, 8
  %41 = trunc i64 %40 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %39, i64* %6, align 8
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %32, i64 0, i64 2
  store i8 %41, i8* %42, align 2, !tbaa !868
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %33)
  store i64 %43, i64* %7, align 8
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %34, i64 0, i64 3
  store i8 %16, i8* %44, align 1, !tbaa !868
  %45 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %33)
  %46 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 2
  %47 = load i8, i8* %46, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %45, i64* %6, align 8
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %32, i64 0, i64 4
  store i8 %47, i8* %48, align 4, !tbaa !868
  %49 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %50 = getelementptr inbounds %struct.uint8v4_t, %struct.uint8v4_t* %11, i64 0, i32 0, i64 2
  %51 = load i8, i8* %50, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %33)
  store i64 %49, i64* %7, align 8
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %34, i64 0, i64 5
  store i8 %51, i8* %52, align 1, !tbaa !868
  %53 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %33)
  %54 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 3
  %55 = load i8, i8* %54, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %31)
  store i64 %53, i64* %6, align 8
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %32, i64 0, i64 6
  store i8 %55, i8* %56, align 2, !tbaa !868
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %31)
  %58 = getelementptr inbounds %struct.uint8v4_t, %struct.uint8v4_t* %11, i64 0, i32 0, i64 3
  %59 = load i8, i8* %58, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %33)
  store i64 %57, i64* %7, align 8
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %34, i64 0, i64 7
  store i8 %59, i8* %60, align 1, !tbaa !868
  %61 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %33)
  %62 = lshr i64 %61, 8
  %63 = lshr i64 %61, 16
  %64 = lshr i64 %61, 24
  %65 = lshr i64 %61, 32
  %66 = lshr i64 %61, 40
  %67 = lshr i64 %61, 48
  %68 = lshr i64 %61, 56
  %69 = trunc i64 %61 to i8
  %70 = trunc i64 %62 to i8
  %71 = trunc i64 %63 to i8
  %72 = trunc i64 %64 to i8
  %73 = trunc i64 %65 to i8
  %74 = trunc i64 %66 to i8
  %75 = trunc i64 %67 to i8
  %76 = trunc i64 %68 to i8
  %77 = bitcast i64* %2 to [8 x i8]*
  %78 = bitcast i64* %2 to i8*
  store i8 %69, i8* %78, align 1, !tbaa !868
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 1
  store i8 %70, i8* %79, align 1, !tbaa !868
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 2
  store i8 %71, i8* %80, align 1, !tbaa !868
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 3
  store i8 %72, i8* %81, align 1, !tbaa !868
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 4
  store i8 %73, i8* %82, align 1, !tbaa !868
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 5
  store i8 %74, i8* %83, align 1, !tbaa !868
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 6
  store i8 %75, i8* %84, align 1, !tbaa !868
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %77, i64 0, i64 7
  store i8 %76, i8* %85, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.uint8v8_t*
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %3, i64* %8, align 8
  %13 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13) #23
  store i64 %4, i64* %10, align 8
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [8 x i8]*
  %16 = bitcast i64* %7 to i8*
  %17 = bitcast i64* %7 to [8 x i8]*
  %18 = trunc i64 %3 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8, !tbaa !868
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %21 = trunc i64 %4 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %20, i64* %7, align 8
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 1
  store i8 %21, i8* %22, align 1, !tbaa !868
  %23 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %24 = lshr i64 %3, 8
  %25 = trunc i64 %24 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %23, i64* %6, align 8
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 2
  store i8 %25, i8* %26, align 2, !tbaa !868
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %28 = lshr i64 %4, 8
  %29 = trunc i64 %28 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %27, i64* %7, align 8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 3
  store i8 %29, i8* %30, align 1, !tbaa !868
  %31 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %32 = lshr i64 %3, 16
  %33 = trunc i64 %32 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %31, i64* %6, align 8
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 4
  store i8 %33, i8* %34, align 4, !tbaa !868
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %36 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 2
  %37 = load i8, i8* %36, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %35, i64* %7, align 8
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 5
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %40 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 3
  %41 = load i8, i8* %40, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %39, i64* %6, align 8
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %15, i64 0, i64 6
  store i8 %41, i8* %42, align 2, !tbaa !868
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %44 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %11, i64 0, i32 0, i64 3
  %45 = load i8, i8* %44, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 8, i8* nonnull %16)
  store i64 %43, i64* %7, align 8
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 7
  store i8 %45, i8* %46, align 1, !tbaa !868
  %47 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16)
  %48 = lshr i64 %47, 8
  %49 = lshr i64 %47, 16
  %50 = lshr i64 %47, 24
  %51 = lshr i64 %47, 32
  %52 = lshr i64 %47, 40
  %53 = lshr i64 %47, 48
  %54 = lshr i64 %47, 56
  %55 = trunc i64 %47 to i8
  %56 = trunc i64 %48 to i8
  %57 = trunc i64 %49 to i8
  %58 = trunc i64 %50 to i8
  %59 = trunc i64 %51 to i8
  %60 = trunc i64 %52 to i8
  %61 = trunc i64 %53 to i8
  %62 = trunc i64 %54 to i8
  %63 = bitcast i64* %2 to [8 x i8]*
  %64 = bitcast i64* %2 to i8*
  store i8 %55, i8* %64, align 1, !tbaa !868
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 1
  store i8 %56, i8* %65, align 1, !tbaa !868
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 2
  store i8 %57, i8* %66, align 1, !tbaa !868
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 3
  store i8 %58, i8* %67, align 1, !tbaa !868
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 4
  store i8 %59, i8* %68, align 1, !tbaa !868
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 5
  store i8 %60, i8* %69, align 1, !tbaa !868
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 6
  store i8 %61, i8* %70, align 1, !tbaa !868
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i64 0, i64 7
  store i8 %62, i8* %71, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %18 = add i64 %4, 1
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 2
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 3
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 4
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 5
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %4, 6
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %4, 7
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = add i64 %4, 8
  %33 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %32) #22
  %34 = add i64 %4, 9
  %35 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %34) #22
  %36 = add i64 %4, 10
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = add i64 %4, 11
  %39 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %38) #22
  %40 = add i64 %4, 12
  %41 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %40) #22
  %42 = add i64 %4, 13
  %43 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %42) #22
  %44 = add i64 %4, 14
  %45 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %44) #22
  %46 = add i64 %4, 15
  %47 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %46) #22
  %48 = insertelement <2 x i8> undef, i8 %31, i32 0
  %49 = insertelement <2 x i8> %48, i8 %47, i32 1
  %50 = zext <2 x i8> %49 to <2 x i64>
  %51 = shl nuw <2 x i64> %50, <i64 56, i64 56>
  %52 = insertelement <2 x i8> undef, i8 %29, i32 0
  %53 = insertelement <2 x i8> %52, i8 %45, i32 1
  %54 = zext <2 x i8> %53 to <2 x i64>
  %55 = shl nuw nsw <2 x i64> %54, <i64 48, i64 48>
  %56 = insertelement <2 x i8> undef, i8 %27, i32 0
  %57 = insertelement <2 x i8> %56, i8 %43, i32 1
  %58 = zext <2 x i8> %57 to <2 x i64>
  %59 = shl nuw nsw <2 x i64> %58, <i64 40, i64 40>
  %60 = insertelement <2 x i8> undef, i8 %25, i32 0
  %61 = insertelement <2 x i8> %60, i8 %41, i32 1
  %62 = zext <2 x i8> %61 to <2 x i64>
  %63 = shl nuw nsw <2 x i64> %62, <i64 32, i64 32>
  %64 = insertelement <2 x i8> undef, i8 %23, i32 0
  %65 = insertelement <2 x i8> %64, i8 %39, i32 1
  %66 = zext <2 x i8> %65 to <2 x i64>
  %67 = shl nuw nsw <2 x i64> %66, <i64 24, i64 24>
  %68 = insertelement <2 x i8> undef, i8 %21, i32 0
  %69 = insertelement <2 x i8> %68, i8 %37, i32 1
  %70 = zext <2 x i8> %69 to <2 x i64>
  %71 = shl nuw nsw <2 x i64> %70, <i64 16, i64 16>
  %72 = insertelement <2 x i8> undef, i8 %19, i32 0
  %73 = insertelement <2 x i8> %72, i8 %35, i32 1
  %74 = zext <2 x i8> %73 to <2 x i64>
  %75 = shl nuw nsw <2 x i64> %74, <i64 8, i64 8>
  %76 = insertelement <2 x i8> undef, i8 %17, i32 0
  %77 = insertelement <2 x i8> %76, i8 %33, i32 1
  %78 = zext <2 x i8> %77 to <2 x i64>
  %79 = or <2 x i64> %75, %78
  %80 = or <2 x i64> %79, %71
  %81 = or <2 x i64> %80, %67
  %82 = or <2 x i64> %81, %63
  %83 = or <2 x i64> %82, %59
  %84 = or <2 x i64> %83, %55
  %85 = or <2 x i64> %84, %51
  store <2 x i64> %85, <2 x i64>* %11, align 16
  %86 = bitcast <2 x i64>* %6 to i8*
  %87 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %89 = bitcast <2 x i64>* %6 to [16 x i8]*
  %90 = bitcast { i64, i64 }* %8 to i8*
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %93 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %94 = extractelement <2 x i64> %15, i32 0
  %95 = trunc i64 %94 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %96 = bitcast <2 x i64>* %6 to i8*
  store i8 %95, i8* %96, align 16, !tbaa !868
  %97 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %97, i64* %91, align 8
  store i64 0, i64* %92, align 8
  %98 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 1
  store i8 %17, i8* %98, align 1, !tbaa !868
  %99 = load i64, i64* %91, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %100 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %101 = load i8, i8* %100, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %99, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 2
  store i8 %101, i8* %102, align 2, !tbaa !868
  %103 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %103, i64* %91, align 8
  store i64 0, i64* %92, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 3
  store i8 %19, i8* %104, align 1, !tbaa !868
  %105 = load i64, i64* %91, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %106 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %107 = load i8, i8* %106, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %105, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 4
  store i8 %107, i8* %108, align 4, !tbaa !868
  %109 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 2
  %111 = load i8, i8* %110, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %109, i64* %91, align 8
  store i64 0, i64* %92, align 8
  %112 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 5
  store i8 %111, i8* %112, align 1, !tbaa !868
  %113 = load i64, i64* %91, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %115 = load i8, i8* %114, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %113, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 6
  store i8 %115, i8* %116, align 2, !tbaa !868
  %117 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %118 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %119 = load i8, i8* %118, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %117, i64* %91, align 8
  store i64 0, i64* %92, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 7
  store i8 %119, i8* %120, align 1, !tbaa !868
  %121 = load i64, i64* %91, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %123 = load i8, i8* %122, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %121, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %125 = bitcast i64* %124 to i8*
  store i8 %123, i8* %125, align 8, !tbaa !868
  %126 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %128 = load i8, i8* %127, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %121, i64* %91, align 8
  store i64 %126, i64* %92, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 9
  store i8 %128, i8* %129, align 1, !tbaa !868
  %130 = load i64, i64* %92, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %132 = load i8, i8* %131, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %121, i64* %87, align 16
  store i64 %130, i64* %88, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 10
  store i8 %132, i8* %133, align 2, !tbaa !868
  %134 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %136 = load i8, i8* %135, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %121, i64* %91, align 8
  store i64 %134, i64* %92, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 11
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %92, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %140 = load i8, i8* %139, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %121, i64* %87, align 16
  store i64 %138, i64* %88, align 8
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 12
  store i8 %140, i8* %141, align 4, !tbaa !868
  %142 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %144 = load i8, i8* %143, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %121, i64* %91, align 8
  store i64 %142, i64* %92, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 13
  store i8 %144, i8* %145, align 1, !tbaa !868
  %146 = load i64, i64* %92, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %148 = load i8, i8* %147, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %121, i64* %87, align 16
  store i64 %146, i64* %88, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 14
  store i8 %148, i8* %149, align 2, !tbaa !868
  %150 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %152 = load i8, i8* %151, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %90)
  store i64 %121, i64* %91, align 8
  store i64 %150, i64* %92, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %93, i64 0, i64 15
  store i8 %152, i8* %153, align 1, !tbaa !868
  %154 = load i64, i64* %92, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %90)
  %155 = lshr i64 %121, 8
  %156 = lshr i64 %121, 16
  %157 = lshr i64 %121, 24
  %158 = lshr i64 %121, 32
  %159 = lshr i64 %121, 40
  %160 = lshr i64 %121, 48
  %161 = lshr i64 %121, 56
  %162 = trunc i64 %121 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1, !tbaa !868
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1, !tbaa !868
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1, !tbaa !868
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1, !tbaa !868
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1, !tbaa !868
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1, !tbaa !868
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1, !tbaa !868
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1, !tbaa !868
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1, !tbaa !868
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1, !tbaa !868
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1, !tbaa !868
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1, !tbaa !868
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1, !tbaa !868
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1, !tbaa !868
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %11, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [16 x i8]*
  %23 = bitcast { i64, i64 }* %8 to i8*
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %26 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %27 = extractelement <2 x i64> %15, i32 0
  %28 = trunc i64 %27 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i8*
  store i8 %28, i8* %29, align 16, !tbaa !868
  %30 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = extractelement <2 x i64> %18, i32 0
  %32 = trunc i64 %31 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %30, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 1
  store i8 %32, i8* %33, align 1, !tbaa !868
  %34 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %35 = lshr i64 %27, 8
  %36 = trunc i64 %35 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %34, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 2
  store i8 %36, i8* %37, align 2, !tbaa !868
  %38 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %39 = lshr i64 %31, 8
  %40 = trunc i64 %39 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %38, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 3
  store i8 %40, i8* %41, align 1, !tbaa !868
  %42 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %43 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %44 = load i8, i8* %43, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %42, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 4
  store i8 %44, i8* %45, align 4, !tbaa !868
  %46 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %47 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 2
  %48 = load i8, i8* %47, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %46, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 5
  store i8 %48, i8* %49, align 1, !tbaa !868
  %50 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %51 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %52 = load i8, i8* %51, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %50, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 6
  store i8 %52, i8* %53, align 2, !tbaa !868
  %54 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %55 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %56 = load i8, i8* %55, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %54, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 7
  store i8 %56, i8* %57, align 1, !tbaa !868
  %58 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %60 = load i8, i8* %59, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %62 = bitcast i64* %61 to i8*
  store i8 %60, i8* %62, align 8, !tbaa !868
  %63 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %65 = load i8, i8* %64, align 4, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %63, i64* %25, align 8
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 9
  store i8 %65, i8* %66, align 1, !tbaa !868
  %67 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %68 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %69 = load i8, i8* %68, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 %67, i64* %21, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 10
  store i8 %69, i8* %70, align 2, !tbaa !868
  %71 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %73 = load i8, i8* %72, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %71, i64* %25, align 8
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 11
  store i8 %73, i8* %74, align 1, !tbaa !868
  %75 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %76 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %77 = load i8, i8* %76, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 %75, i64* %21, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 12
  store i8 %77, i8* %78, align 4, !tbaa !868
  %79 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %81 = load i8, i8* %80, align 2, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %79, i64* %25, align 8
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 13
  store i8 %81, i8* %82, align 1, !tbaa !868
  %83 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %85 = load i8, i8* %84, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %58, i64* %20, align 16
  store i64 %83, i64* %21, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 14
  store i8 %85, i8* %86, align 2, !tbaa !868
  %87 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %88 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %89 = load i8, i8* %88, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %58, i64* %24, align 8
  store i64 %87, i64* %25, align 8
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 15
  store i8 %89, i8* %90, align 1, !tbaa !868
  %91 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %92 = lshr i64 %58, 8
  %93 = lshr i64 %58, 16
  %94 = lshr i64 %58, 24
  %95 = lshr i64 %58, 32
  %96 = lshr i64 %58, 40
  %97 = lshr i64 %58, 48
  %98 = lshr i64 %58, 56
  %99 = trunc i64 %58 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = trunc i64 %96 to i8
  %105 = trunc i64 %97 to i8
  %106 = trunc i64 %98 to i8
  store i8 %99, i8* %2, align 1, !tbaa !868
  %107 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %100, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %101, i8* %108, align 1, !tbaa !868
  %109 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %102, i8* %109, align 1, !tbaa !868
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %103, i8* %110, align 1, !tbaa !868
  %111 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %104, i8* %111, align 1, !tbaa !868
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %105, i8* %112, align 1, !tbaa !868
  %113 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %106, i8* %113, align 1, !tbaa !868
  %114 = trunc i64 %91 to i8
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = lshr i64 %91, 8
  %117 = trunc i64 %116 to i8
  %118 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %117, i8* %118, align 1, !tbaa !868
  %119 = lshr i64 %91, 16
  %120 = trunc i64 %119 to i8
  %121 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %120, i8* %121, align 1, !tbaa !868
  %122 = lshr i64 %91, 24
  %123 = trunc i64 %122 to i8
  %124 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %123, i8* %124, align 1, !tbaa !868
  %125 = lshr i64 %91, 32
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %126, i8* %127, align 1, !tbaa !868
  %128 = lshr i64 %91, 40
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %129, i8* %130, align 1, !tbaa !868
  %131 = lshr i64 %91, 48
  %132 = trunc i64 %131 to i8
  %133 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %132, i8* %133, align 1, !tbaa !868
  %134 = lshr i64 %91, 56
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %135, i8* %136, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI4RVnWI7vec64_tE3RVnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 2
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %9) #22
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [4 x i16]*
  %13 = bitcast i64* %7 to i8*
  %14 = bitcast i64* %7 to [4 x i16]*
  %15 = trunc i64 %3 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %17, i64* %7, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  store i16 %8, i16* %18, align 2, !tbaa !869
  %19 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %20 = lshr i64 %3, 16
  %21 = trunc i64 %20 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %19, i64* %6, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 2
  store i16 %21, i16* %22, align 4, !tbaa !869
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %23, i64* %7, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  store i16 %10, i16* %24, align 2, !tbaa !869
  %25 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %26 = lshr i64 %25, 16
  %27 = lshr i64 %25, 32
  %28 = lshr i64 %25, 48
  %29 = trunc i64 %25 to i16
  %30 = trunc i64 %26 to i16
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = bitcast i64* %2 to [4 x i16]*
  %34 = bitcast i64* %2 to i16*
  store i16 %29, i16* %34, align 1, !tbaa !869
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 1
  store i16 %30, i16* %35, align 1, !tbaa !869
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 2
  store i16 %31, i16* %36, align 1, !tbaa !869
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 3
  store i16 %32, i16* %37, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = bitcast i64* %7 to i8*
  %11 = bitcast i64* %7 to [4 x i16]*
  %12 = trunc i64 %3 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8, !tbaa !869
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = trunc i64 %4 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %14, i64* %7, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %15, i16* %16, align 2, !tbaa !869
  %17 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %17, i64* %6, align 8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  store i16 %19, i16* %20, align 4, !tbaa !869
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %22 = lshr i64 %4, 16
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %21, i64* %7, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %23, i16* %24, align 2, !tbaa !869
  %25 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %26 = lshr i64 %25, 16
  %27 = lshr i64 %25, 32
  %28 = lshr i64 %25, 48
  %29 = trunc i64 %25 to i16
  %30 = trunc i64 %26 to i16
  %31 = trunc i64 %27 to i16
  %32 = trunc i64 %28 to i16
  %33 = bitcast i64* %2 to [4 x i16]*
  %34 = bitcast i64* %2 to i16*
  store i16 %29, i16* %34, align 1, !tbaa !869
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 1
  store i16 %30, i16* %35, align 1, !tbaa !869
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 2
  store i16 %31, i16* %36, align 1, !tbaa !869
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %33, i64 0, i64 3
  store i16 %32, i16* %37, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %18 = add i64 %4, 2
  %19 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 6
  %23 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 8
  %25 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 10
  %27 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %4, 12
  %29 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %4, 14
  %31 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %30) #22
  %32 = insertelement <2 x i16> undef, i16 %23, i32 0
  %33 = insertelement <2 x i16> %32, i16 %31, i32 1
  %34 = zext <2 x i16> %33 to <2 x i64>
  %35 = shl nuw <2 x i64> %34, <i64 48, i64 48>
  %36 = insertelement <2 x i16> undef, i16 %21, i32 0
  %37 = insertelement <2 x i16> %36, i16 %29, i32 1
  %38 = zext <2 x i16> %37 to <2 x i64>
  %39 = shl nuw nsw <2 x i64> %38, <i64 32, i64 32>
  %40 = insertelement <2 x i16> undef, i16 %19, i32 0
  %41 = insertelement <2 x i16> %40, i16 %27, i32 1
  %42 = zext <2 x i16> %41 to <2 x i64>
  %43 = shl nuw nsw <2 x i64> %42, <i64 16, i64 16>
  %44 = insertelement <2 x i16> undef, i16 %17, i32 0
  %45 = insertelement <2 x i16> %44, i16 %25, i32 1
  %46 = zext <2 x i16> %45 to <2 x i64>
  %47 = or <2 x i64> %43, %46
  %48 = or <2 x i64> %47, %39
  %49 = or <2 x i64> %48, %35
  store <2 x i64> %49, <2 x i64>* %11, align 16
  %50 = bitcast <2 x i64>* %6 to i8*
  %51 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %53 = bitcast <2 x i64>* %6 to [8 x i16]*
  %54 = bitcast { i64, i64 }* %8 to i8*
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %57 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %58 = extractelement <2 x i64> %15, i32 0
  %59 = trunc i64 %58 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %60 = bitcast <2 x i64>* %6 to i16*
  store i16 %59, i16* %60, align 16, !tbaa !869
  %61 = load i64, i64* %51, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %54)
  store i64 %61, i64* %55, align 8
  store i64 0, i64* %56, align 8
  %62 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 1
  store i16 %17, i16* %62, align 2, !tbaa !869
  %63 = load i64, i64* %55, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %54)
  %64 = lshr i64 %58, 16
  %65 = trunc i64 %64 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %63, i64* %51, align 16
  store i64 0, i64* %52, align 8
  %66 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 2
  store i16 %65, i16* %66, align 4, !tbaa !869
  %67 = load i64, i64* %51, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %54)
  store i64 %67, i64* %55, align 8
  store i64 0, i64* %56, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 3
  store i16 %19, i16* %68, align 2, !tbaa !869
  %69 = load i64, i64* %55, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %54)
  %70 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %71 = load i16, i16* %70, align 4, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %69, i64* %51, align 16
  store i64 0, i64* %52, align 8
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %73 = bitcast i64* %72 to i16*
  store i16 %71, i16* %73, align 8, !tbaa !869
  %74 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %54)
  store i64 %69, i64* %55, align 8
  store i64 %74, i64* %56, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 5
  store i16 %21, i16* %75, align 2, !tbaa !869
  %76 = load i64, i64* %56, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %54)
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %78 = load i16, i16* %77, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %69, i64* %51, align 16
  store i64 %76, i64* %52, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 6
  store i16 %78, i16* %79, align 4, !tbaa !869
  %80 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 3
  %82 = load i16, i16* %81, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %54)
  store i64 %69, i64* %55, align 8
  store i64 %80, i64* %56, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 7
  store i16 %82, i16* %83, align 2, !tbaa !869
  %84 = load i64, i64* %56, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %54)
  %85 = lshr i64 %69, 16
  %86 = lshr i64 %69, 32
  %87 = lshr i64 %69, 48
  %88 = trunc i64 %69 to i16
  %89 = trunc i64 %85 to i16
  %90 = trunc i64 %86 to i16
  %91 = trunc i64 %87 to i16
  %92 = bitcast i8* %2 to i16*
  store i16 %88, i16* %92, align 1, !tbaa !869
  %93 = getelementptr inbounds i8, i8* %2, i64 2
  %94 = bitcast i8* %93 to i16*
  store i16 %89, i16* %94, align 1, !tbaa !869
  %95 = getelementptr inbounds i8, i8* %2, i64 4
  %96 = bitcast i8* %95 to i16*
  store i16 %90, i16* %96, align 1, !tbaa !869
  %97 = getelementptr inbounds i8, i8* %2, i64 6
  %98 = bitcast i8* %97 to i16*
  store i16 %91, i16* %98, align 1, !tbaa !869
  %99 = trunc i64 %84 to i16
  %100 = getelementptr inbounds i8, i8* %2, i64 8
  %101 = bitcast i8* %100 to i16*
  store i16 %99, i16* %101, align 1, !tbaa !869
  %102 = lshr i64 %84, 16
  %103 = trunc i64 %102 to i16
  %104 = getelementptr inbounds i8, i8* %2, i64 10
  %105 = bitcast i8* %104 to i16*
  store i16 %103, i16* %105, align 1, !tbaa !869
  %106 = lshr i64 %84, 32
  %107 = trunc i64 %106 to i16
  %108 = getelementptr inbounds i8, i8* %2, i64 12
  %109 = bitcast i8* %108 to i16*
  store i16 %107, i16* %109, align 1, !tbaa !869
  %110 = lshr i64 %84, 48
  %111 = trunc i64 %110 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 14
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLWDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %13 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %9, align 16
  %16 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %11, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = bitcast { i64, i64 }* %8 to i8*
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %26 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %27 = extractelement <2 x i64> %15, i32 0
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i16*
  store i16 %28, i16* %29, align 16, !tbaa !869
  %30 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = extractelement <2 x i64> %18, i32 0
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %30, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %35 = lshr i64 %27, 16
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %34, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %36, i16* %37, align 4, !tbaa !869
  %38 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %39 = lshr i64 %31, 16
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %38, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 %40, i16* %41, align 2, !tbaa !869
  %42 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %43 = lshr i64 %27, 32
  %44 = trunc i64 %43 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %42, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %46 = bitcast i64* %45 to i16*
  store i16 %44, i16* %46, align 8, !tbaa !869
  %47 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %48 = lshr i64 %31, 32
  %49 = trunc i64 %48 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %42, i64* %24, align 8
  store i64 %47, i64* %25, align 8
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 %49, i16* %50, align 2, !tbaa !869
  %51 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %52 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %53 = load i16, i16* %52, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %42, i64* %20, align 16
  store i64 %51, i64* %21, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 6
  store i16 %53, i16* %54, align 4, !tbaa !869
  %55 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %12, i64 0, i32 0, i64 3
  %57 = load i16, i16* %56, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %42, i64* %24, align 8
  store i64 %55, i64* %25, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 %57, i16* %58, align 2, !tbaa !869
  %59 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %60 = lshr i64 %42, 16
  %61 = lshr i64 %42, 32
  %62 = lshr i64 %42, 48
  %63 = trunc i64 %42 to i16
  %64 = trunc i64 %60 to i16
  %65 = trunc i64 %61 to i16
  %66 = trunc i64 %62 to i16
  %67 = bitcast i8* %2 to i16*
  store i16 %63, i16* %67, align 1, !tbaa !869
  %68 = getelementptr inbounds i8, i8* %2, i64 2
  %69 = bitcast i8* %68 to i16*
  store i16 %64, i16* %69, align 1, !tbaa !869
  %70 = getelementptr inbounds i8, i8* %2, i64 4
  %71 = bitcast i8* %70 to i16*
  store i16 %65, i16* %71, align 1, !tbaa !869
  %72 = getelementptr inbounds i8, i8* %2, i64 6
  %73 = bitcast i8* %72 to i16*
  store i16 %66, i16* %73, align 1, !tbaa !869
  %74 = trunc i64 %59 to i16
  %75 = getelementptr inbounds i8, i8* %2, i64 8
  %76 = bitcast i8* %75 to i16*
  store i16 %74, i16* %76, align 1, !tbaa !869
  %77 = lshr i64 %59, 16
  %78 = trunc i64 %77 to i16
  %79 = getelementptr inbounds i8, i8* %2, i64 10
  %80 = bitcast i8* %79 to i16*
  store i16 %78, i16* %80, align 1, !tbaa !869
  %81 = lshr i64 %59, 32
  %82 = trunc i64 %81 to i16
  %83 = getelementptr inbounds i8, i8* %2, i64 12
  %84 = bitcast i8* %83 to i16*
  store i16 %82, i16* %84, align 1, !tbaa !869
  %85 = lshr i64 %59, 48
  %86 = trunc i64 %85 to i16
  %87 = getelementptr inbounds i8, i8* %2, i64 14
  %88 = bitcast i8* %87 to i16*
  store i16 %86, i16* %88, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI4RVnWI7vec64_tE3RVnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %7 to i8*
  %11 = bitcast i64* %7 to [2 x i32]*
  %12 = trunc i64 %3 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %14, i64* %7, align 8
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %8, i32* %15, align 4, !tbaa !877
  %16 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %17 = trunc i64 %16 to i32
  %18 = lshr i64 %16, 32
  %19 = trunc i64 %18 to i32
  %20 = bitcast i64* %2 to [2 x i32]*
  %21 = bitcast i64* %2 to i32*
  store i32 %17, i32* %21, align 1, !tbaa !877
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 0, i64 1
  store i32 %19, i32* %22, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %7 to i8*
  %10 = bitcast i64* %7 to [2 x i32]*
  %11 = trunc i64 %3 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %12 = bitcast i64* %6 to i32*
  store i32 %11, i32* %12, align 8, !tbaa !877
  %13 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %14 = trunc i64 %4 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %13, i64* %7, align 8
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %14, i32* %15, align 4, !tbaa !877
  %16 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %17 = trunc i64 %16 to i32
  %18 = lshr i64 %16, 32
  %19 = trunc i64 %18 to i32
  %20 = bitcast i64* %2 to [2 x i32]*
  %21 = bitcast i64* %2 to i32*
  store i32 %17, i32* %21, align 1, !tbaa !877
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 0, i64 1
  store i32 %19, i32* %22, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 4
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast <2 x i64>* %6 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %17 = bitcast { i64, i64 }* %8 to i8*
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %20 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %21 = trunc i64 %10 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %22 = bitcast <2 x i64>* %6 to i32*
  store i32 %21, i32* %22, align 16, !tbaa !877
  %23 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %23, i64* %18, align 8
  store i64 0, i64* %19, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %11, i32* %24, align 4, !tbaa !877
  %25 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %26 = lshr i64 %10, 32
  %27 = trunc i64 %26 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %25, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %29 = bitcast i64* %28 to i32*
  store i32 %27, i32* %29, align 8, !tbaa !877
  %30 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %25, i64* %18, align 8
  store i64 %30, i64* %19, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 %13, i32* %31, align 4, !tbaa !877
  %32 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %33 = lshr i64 %25, 32
  %34 = trunc i64 %25 to i32
  %35 = trunc i64 %33 to i32
  %36 = bitcast i8* %2 to i32*
  store i32 %34, i32* %36, align 1, !tbaa !877
  %37 = getelementptr inbounds i8, i8* %2, i64 4
  %38 = bitcast i8* %37 to i32*
  store i32 %35, i32* %38, align 1, !tbaa !877
  %39 = trunc i64 %32 to i32
  %40 = getelementptr inbounds i8, i8* %2, i64 8
  %41 = bitcast i8* %40 to i32*
  store i32 %39, i32* %41, align 1, !tbaa !877
  %42 = lshr i64 %32, 32
  %43 = trunc i64 %42 to i32
  %44 = getelementptr inbounds i8, i8* %2, i64 12
  %45 = bitcast i8* %44 to i32*
  store i32 %43, i32* %45, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PUNPCKLDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast <2 x i64>* %6 to i8*
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %16 = bitcast { i64, i64 }* %8 to i8*
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %19 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %20 = trunc i64 %10 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %21 = bitcast <2 x i64>* %6 to i32*
  store i32 %20, i32* %21, align 16, !tbaa !877
  %22 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %23 = trunc i64 %12 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %22, i64* %17, align 8
  store i64 0, i64* %18, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %23, i32* %24, align 4, !tbaa !877
  %25 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %26 = lshr i64 %10, 32
  %27 = trunc i64 %26 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %25, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %29 = bitcast i64* %28 to i32*
  store i32 %27, i32* %29, align 8, !tbaa !877
  %30 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %31 = lshr i64 %12, 32
  %32 = trunc i64 %31 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %25, i64* %17, align 8
  store i64 %30, i64* %18, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %35 = lshr i64 %25, 32
  %36 = trunc i64 %25 to i32
  %37 = trunc i64 %35 to i32
  %38 = bitcast i8* %2 to i32*
  store i32 %36, i32* %38, align 1, !tbaa !877
  %39 = getelementptr inbounds i8, i8* %2, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 %37, i32* %40, align 1, !tbaa !877
  %41 = trunc i64 %34 to i32
  %42 = getelementptr inbounds i8, i8* %2, i64 8
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 1, !tbaa !877
  %44 = lshr i64 %34, 32
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds i8, i8* %2, i64 12
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKLQDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = bitcast i8* %2 to i64*
  store i64 %7, i64* %9, align 1, !tbaa !870
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to i64*
  store i64 %8, i64* %11, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PUNPCKLQDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %4 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = bitcast i8* %2 to i64*
  store i64 %7, i64* %10, align 1, !tbaa !870
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 %9, i64* %12, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 56
  %7 = and i64 %4, 65280
  %8 = and i64 %4, 16711680
  %9 = and i64 %4, 4278190080
  %10 = and i64 %4, 1095216660480
  %11 = and i64 %4, 280375465082880
  %12 = and i64 %4, 71776119061217280
  %13 = lshr i64 %4, 56
  %14 = add i64 %4, %3
  %15 = add nuw nsw i64 %13, %6
  %16 = add i64 %12, %3
  %17 = add i64 %11, %3
  %18 = add i64 %10, %3
  %19 = add i64 %9, %3
  %20 = add i64 %8, %3
  %21 = add i64 %7, %3
  %22 = trunc i64 %14 to i8
  %23 = lshr i64 %21, 8
  %24 = trunc i64 %23 to i8
  %25 = lshr i64 %20, 16
  %26 = trunc i64 %25 to i8
  %27 = lshr i64 %19, 24
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %18, 32
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %17, 40
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %16, 48
  %34 = trunc i64 %33 to i8
  %35 = trunc i64 %15 to i8
  %36 = bitcast i64* %2 to [8 x i8]*
  %37 = bitcast i64* %2 to i8*
  store i8 %22, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 1
  store i8 %24, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 2
  store i8 %26, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 3
  store i8 %28, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 4
  store i8 %30, i8* %41, align 1, !tbaa !868
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 5
  store i8 %32, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 6
  store i8 %34, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 7
  store i8 %35, i8* %44, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 56
  %7 = trunc i64 %6 to i8
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 1
  %10 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %9) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 3
  %14 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 4
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 5
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 6
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 7
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = zext i8 %20 to i64
  %24 = zext i8 %18 to i64
  %25 = zext i8 %16 to i64
  %26 = zext i8 %14 to i64
  %27 = shl nuw nsw i64 %26, 24
  %28 = zext i8 %12 to i64
  %29 = shl nuw nsw i64 %28, 16
  %30 = zext i8 %10 to i64
  %31 = shl nuw nsw i64 %30, 8
  %32 = zext i8 %8 to i64
  %33 = add i64 %32, %3
  %34 = add i8 %22, %7
  %35 = shl nuw nsw i64 %23, 48
  %36 = add i64 %35, %3
  %37 = shl nuw nsw i64 %24, 40
  %38 = add i64 %37, %3
  %39 = shl nuw nsw i64 %25, 32
  %40 = add i64 %39, %3
  %41 = add i64 %27, %3
  %42 = add i64 %29, %3
  %43 = add i64 %31, %3
  %44 = trunc i64 %33 to i8
  %45 = lshr i64 %43, 8
  %46 = trunc i64 %45 to i8
  %47 = lshr i64 %42, 16
  %48 = trunc i64 %47 to i8
  %49 = lshr i64 %41, 24
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %40, 32
  %52 = trunc i64 %51 to i8
  %53 = lshr i64 %38, 40
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %36, 48
  %56 = trunc i64 %55 to i8
  %57 = bitcast i64* %2 to [8 x i8]*
  %58 = bitcast i64* %2 to i8*
  store i8 %44, i8* %58, align 1, !tbaa !868
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 1
  store i8 %46, i8* %59, align 1, !tbaa !868
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 2
  store i8 %48, i8* %60, align 1, !tbaa !868
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 3
  store i8 %50, i8* %61, align 1, !tbaa !868
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 4
  store i8 %52, i8* %62, align 1, !tbaa !868
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 5
  store i8 %54, i8* %63, align 1, !tbaa !868
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 6
  store i8 %56, i8* %64, align 1, !tbaa !868
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 7
  store i8 %34, i8* %65, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 65280
  %18 = and i64 %13, 16711680
  %19 = and i64 %13, 4278190080
  %20 = and i64 %13, 1095216660480
  %21 = and i64 %13, 280375465082880
  %22 = and i64 %13, 71776119061217280
  %23 = lshr i64 %13, 56
  %24 = add i64 %13, %7
  %25 = add nuw nsw i64 %23, %11
  %26 = add i64 %16, %10
  %27 = and i64 %16, 65280
  %28 = add i64 %27, %10
  %29 = and i64 %16, 16711680
  %30 = add i64 %29, %10
  %31 = and i64 %16, 4278190080
  %32 = add i64 %31, %10
  %33 = and i64 %16, 1095216660480
  %34 = add i64 %33, %10
  %35 = and i64 %16, 280375465082880
  %36 = add i64 %35, %10
  %37 = and i64 %16, 71776119061217280
  %38 = add i64 %37, %10
  %39 = lshr i64 %10, 56
  %40 = lshr i64 %16, 56
  %41 = add nuw nsw i64 %40, %39
  %42 = add i64 %22, %7
  %43 = add i64 %21, %7
  %44 = add i64 %20, %7
  %45 = add i64 %19, %7
  %46 = add i64 %18, %7
  %47 = add i64 %17, %7
  %48 = trunc i64 %24 to i8
  %49 = lshr i64 %47, 8
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %46, 16
  %52 = trunc i64 %51 to i8
  %53 = lshr i64 %45, 24
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %44, 32
  %56 = trunc i64 %55 to i8
  %57 = lshr i64 %43, 40
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %42, 48
  %60 = trunc i64 %59 to i8
  %61 = trunc i64 %25 to i8
  store i8 %48, i8* %2, align 1, !tbaa !868
  %62 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %50, i8* %62, align 1, !tbaa !868
  %63 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %52, i8* %63, align 1, !tbaa !868
  %64 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %54, i8* %64, align 1, !tbaa !868
  %65 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %56, i8* %65, align 1, !tbaa !868
  %66 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %58, i8* %66, align 1, !tbaa !868
  %67 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %60, i8* %67, align 1, !tbaa !868
  %68 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %61, i8* %68, align 1, !tbaa !868
  %69 = trunc i64 %26 to i8
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = lshr i64 %28, 8
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %72, i8* %73, align 1, !tbaa !868
  %74 = lshr i64 %30, 16
  %75 = trunc i64 %74 to i8
  %76 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %75, i8* %76, align 1, !tbaa !868
  %77 = lshr i64 %32, 24
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %78, i8* %79, align 1, !tbaa !868
  %80 = lshr i64 %34, 32
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %81, i8* %82, align 1, !tbaa !868
  %83 = lshr i64 %36, 40
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %84, i8* %85, align 1, !tbaa !868
  %86 = lshr i64 %38, 48
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %87, i8* %88, align 1, !tbaa !868
  %89 = trunc i64 %41 to i8
  %90 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %89, i8* %90, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = trunc i64 %11 to i8
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %4, 8
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %4, 9
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = zext i8 %31 to i64
  %33 = add i64 %4, 10
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = zext i8 %34 to i64
  %36 = add i64 %4, 11
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = zext i8 %37 to i64
  %39 = add i64 %4, 12
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = zext i8 %40 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = zext i8 %44 to i64
  %46 = shl nuw nsw i64 %45, 40
  %47 = add i64 %4, 14
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = zext i8 %48 to i64
  %50 = shl nuw nsw i64 %49, 48
  %51 = add i64 %4, 15
  %52 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %51) #22
  %53 = zext i8 %25 to i64
  %54 = zext i8 %23 to i64
  %55 = zext i8 %21 to i64
  %56 = zext i8 %19 to i64
  %57 = shl nuw nsw i64 %56, 24
  %58 = zext i8 %17 to i64
  %59 = shl nuw nsw i64 %58, 16
  %60 = zext i8 %15 to i64
  %61 = shl nuw nsw i64 %60, 8
  %62 = zext i8 %13 to i64
  %63 = add i64 %62, %7
  %64 = add i8 %27, %12
  %65 = trunc i64 %10 to i8
  %66 = add i8 %29, %65
  %67 = shl nuw nsw i64 %32, 8
  %68 = add i64 %67, %10
  %69 = shl nuw nsw i64 %35, 16
  %70 = add i64 %69, %10
  %71 = shl nuw nsw i64 %38, 24
  %72 = add i64 %71, %10
  %73 = add i64 %42, %10
  %74 = add i64 %46, %10
  %75 = add i64 %50, %10
  %76 = lshr i64 %10, 56
  %77 = trunc i64 %76 to i8
  %78 = add i8 %52, %77
  %79 = shl nuw nsw i64 %53, 48
  %80 = add i64 %79, %7
  %81 = shl nuw nsw i64 %54, 40
  %82 = add i64 %81, %7
  %83 = shl nuw nsw i64 %55, 32
  %84 = add i64 %83, %7
  %85 = add i64 %57, %7
  %86 = add i64 %59, %7
  %87 = add i64 %61, %7
  %88 = trunc i64 %63 to i8
  %89 = lshr i64 %87, 8
  %90 = trunc i64 %89 to i8
  %91 = lshr i64 %86, 16
  %92 = trunc i64 %91 to i8
  %93 = lshr i64 %85, 24
  %94 = trunc i64 %93 to i8
  %95 = lshr i64 %84, 32
  %96 = trunc i64 %95 to i8
  %97 = lshr i64 %82, 40
  %98 = trunc i64 %97 to i8
  %99 = lshr i64 %80, 48
  %100 = trunc i64 %99 to i8
  store i8 %88, i8* %2, align 1, !tbaa !868
  %101 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %90, i8* %101, align 1, !tbaa !868
  %102 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %92, i8* %102, align 1, !tbaa !868
  %103 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %94, i8* %103, align 1, !tbaa !868
  %104 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %96, i8* %104, align 1, !tbaa !868
  %105 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %98, i8* %105, align 1, !tbaa !868
  %106 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %100, i8* %106, align 1, !tbaa !868
  %107 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %64, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %66, i8* %108, align 1, !tbaa !868
  %109 = lshr i64 %68, 8
  %110 = trunc i64 %109 to i8
  %111 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %110, i8* %111, align 1, !tbaa !868
  %112 = lshr i64 %70, 16
  %113 = trunc i64 %112 to i8
  %114 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %113, i8* %114, align 1, !tbaa !868
  %115 = lshr i64 %72, 24
  %116 = trunc i64 %115 to i8
  %117 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %116, i8* %117, align 1, !tbaa !868
  %118 = lshr i64 %73, 32
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %119, i8* %120, align 1, !tbaa !868
  %121 = lshr i64 %74, 40
  %122 = trunc i64 %121 to i8
  %123 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %122, i8* %123, align 1, !tbaa !868
  %124 = lshr i64 %75, 48
  %125 = trunc i64 %124 to i8
  %126 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %125, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %78, i8* %127, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 48
  %7 = and i64 %4, 4294901760
  %8 = and i64 %4, 281470681743360
  %9 = lshr i64 %4, 48
  %10 = add i64 %4, %3
  %11 = add nuw nsw i64 %9, %6
  %12 = add i64 %8, %3
  %13 = add i64 %7, %3
  %14 = trunc i64 %10 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %12, 32
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %11 to i16
  %20 = bitcast i64* %2 to [4 x i16]*
  %21 = bitcast i64* %2 to i16*
  store i16 %14, i16* %21, align 1, !tbaa !869
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 1
  store i16 %16, i16* %22, align 1, !tbaa !869
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 2
  store i16 %18, i16* %23, align 1, !tbaa !869
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 3
  store i16 %19, i16* %24, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = lshr i64 %3, 48
  %8 = trunc i64 %7 to i16
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %10 = add i64 %4, 2
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 4
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 6
  %15 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %14) #22
  %16 = zext i16 %13 to i64
  %17 = zext i16 %11 to i64
  %18 = add i16 %9, %6
  %19 = add i16 %15, %8
  %20 = shl nuw nsw i64 %16, 32
  %21 = add i64 %20, %3
  %22 = shl nuw nsw i64 %17, 16
  %23 = add i64 %22, %3
  %24 = lshr i64 %23, 16
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %21, 32
  %27 = trunc i64 %26 to i16
  %28 = bitcast i64* %2 to [4 x i16]*
  %29 = bitcast i64* %2 to i16*
  store i16 %18, i16* %29, align 1, !tbaa !869
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 1
  store i16 %25, i16* %30, align 1, !tbaa !869
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 2
  store i16 %27, i16* %31, align 1, !tbaa !869
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 3
  store i16 %19, i16* %32, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 48
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 4294901760
  %18 = and i64 %13, 281470681743360
  %19 = lshr i64 %13, 48
  %20 = add i64 %13, %7
  %21 = add nuw nsw i64 %19, %11
  %22 = add i64 %16, %10
  %23 = and i64 %16, 4294901760
  %24 = add i64 %23, %10
  %25 = and i64 %16, 281470681743360
  %26 = add i64 %25, %10
  %27 = lshr i64 %10, 48
  %28 = lshr i64 %16, 48
  %29 = add nuw nsw i64 %28, %27
  %30 = add i64 %18, %7
  %31 = add i64 %17, %7
  %32 = trunc i64 %20 to i16
  %33 = lshr i64 %31, 16
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %30, 32
  %36 = trunc i64 %35 to i16
  %37 = trunc i64 %21 to i16
  %38 = bitcast i8* %2 to i16*
  store i16 %32, i16* %38, align 1, !tbaa !869
  %39 = getelementptr inbounds i8, i8* %2, i64 2
  %40 = bitcast i8* %39 to i16*
  store i16 %34, i16* %40, align 1, !tbaa !869
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i16*
  store i16 %36, i16* %42, align 1, !tbaa !869
  %43 = getelementptr inbounds i8, i8* %2, i64 6
  %44 = bitcast i8* %43 to i16*
  store i16 %37, i16* %44, align 1, !tbaa !869
  %45 = trunc i64 %22 to i16
  %46 = getelementptr inbounds i8, i8* %2, i64 8
  %47 = bitcast i8* %46 to i16*
  store i16 %45, i16* %47, align 1, !tbaa !869
  %48 = lshr i64 %24, 16
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds i8, i8* %2, i64 10
  %51 = bitcast i8* %50 to i16*
  store i16 %49, i16* %51, align 1, !tbaa !869
  %52 = lshr i64 %26, 32
  %53 = trunc i64 %52 to i16
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i16*
  store i16 %53, i16* %55, align 1, !tbaa !869
  %56 = trunc i64 %29 to i16
  %57 = getelementptr inbounds i8, i8* %2, i64 14
  %58 = bitcast i8* %57 to i16*
  store i16 %56, i16* %58, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i16
  %12 = lshr i64 %7, 48
  %13 = trunc i64 %12 to i16
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 2
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 4
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 6
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 8
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 10
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = zext i16 %24 to i64
  %26 = add i64 %4, 12
  %27 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %26) #22
  %28 = zext i16 %27 to i64
  %29 = add i64 %4, 14
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = zext i16 %18 to i64
  %32 = zext i16 %16 to i64
  %33 = add i16 %14, %11
  %34 = add i16 %20, %13
  %35 = trunc i64 %10 to i16
  %36 = add i16 %22, %35
  %37 = shl nuw nsw i64 %25, 16
  %38 = add i64 %37, %10
  %39 = shl nuw nsw i64 %28, 32
  %40 = add i64 %39, %10
  %41 = lshr i64 %10, 48
  %42 = trunc i64 %41 to i16
  %43 = add i16 %30, %42
  %44 = shl nuw nsw i64 %31, 32
  %45 = add i64 %44, %7
  %46 = shl nuw nsw i64 %32, 16
  %47 = add i64 %46, %7
  %48 = lshr i64 %47, 16
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %45, 32
  %51 = trunc i64 %50 to i16
  %52 = bitcast i8* %2 to i16*
  store i16 %33, i16* %52, align 1, !tbaa !869
  %53 = getelementptr inbounds i8, i8* %2, i64 2
  %54 = bitcast i8* %53 to i16*
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i16*
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds i8, i8* %2, i64 6
  %58 = bitcast i8* %57 to i16*
  store i16 %34, i16* %58, align 1, !tbaa !869
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i16*
  store i16 %36, i16* %60, align 1, !tbaa !869
  %61 = lshr i64 %38, 16
  %62 = trunc i64 %61 to i16
  %63 = getelementptr inbounds i8, i8* %2, i64 10
  %64 = bitcast i8* %63 to i16*
  store i16 %62, i16* %64, align 1, !tbaa !869
  %65 = lshr i64 %40, 32
  %66 = trunc i64 %65 to i16
  %67 = getelementptr inbounds i8, i8* %2, i64 12
  %68 = bitcast i8* %67 to i16*
  store i16 %66, i16* %68, align 1, !tbaa !869
  %69 = getelementptr inbounds i8, i8* %2, i64 14
  %70 = bitcast i8* %69 to i16*
  store i16 %43, i16* %70, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 32
  %7 = lshr i64 %4, 32
  %8 = add i64 %4, %3
  %9 = add nuw nsw i64 %7, %6
  %10 = trunc i64 %8 to i32
  %11 = trunc i64 %9 to i32
  %12 = bitcast i64* %2 to [2 x i32]*
  %13 = bitcast i64* %2 to i32*
  store i32 %10, i32* %13, align 1, !tbaa !877
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %11, i32* %14, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %10 = add i64 %4, 4
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %10) #22
  %12 = add i32 %9, %6
  %13 = add i32 %11, %8
  %14 = bitcast i64* %2 to [2 x i32]*
  %15 = bitcast i64* %2 to i32*
  store i32 %12, i32* %15, align 1, !tbaa !877
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0, i64 1
  store i32 %13, i32* %16, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 32
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = lshr i64 %13, 32
  %18 = add i64 %13, %7
  %19 = add nuw nsw i64 %17, %11
  %20 = add i64 %16, %10
  %21 = lshr i64 %10, 32
  %22 = lshr i64 %16, 32
  %23 = add nuw nsw i64 %22, %21
  %24 = trunc i64 %18 to i32
  %25 = trunc i64 %19 to i32
  %26 = bitcast i8* %2 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !877
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %25, i32* %28, align 1, !tbaa !877
  %29 = trunc i64 %20 to i32
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 1, !tbaa !877
  %32 = trunc i64 %23 to i32
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = add i32 %14, %11
  %22 = add i32 %16, %13
  %23 = trunc i64 %10 to i32
  %24 = add i32 %18, %23
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = add i32 %20, %26
  %28 = bitcast i8* %2 to i32*
  store i32 %21, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %22, i32* %30, align 1, !tbaa !877
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 1, !tbaa !877
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %27, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = add i64 %4, %3
  store i64 %6, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = add i64 %6, %3
  store i64 %7, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = add <2 x i64> %9, %7
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PADDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x i64> undef, i64 %8, i32 0
  %12 = insertelement <2 x i64> %11, i64 %10, i32 1
  %13 = add <2 x i64> %12, %7
  %14 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i16
  %16 = trunc i64 %4 to i16
  %17 = shl i16 %15, 8
  %18 = ashr exact i16 %17, 8
  %19 = shl i16 %16, 8
  %20 = ashr exact i16 %19, 8
  %21 = add nsw i16 %20, %18
  %22 = icmp slt i16 %21, 127
  %23 = select i1 %22, i16 %21, i16 127
  %24 = icmp sgt i16 %21, -128
  %25 = select i1 %24, i16 %21, i16 -128
  %26 = icmp slt i16 %21, 0
  %27 = select i1 %26, i16 %25, i16 %23
  %28 = trunc i16 %27 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %29 = bitcast i64* %6 to i8*
  store i8 %28, i8* %29, align 8, !tbaa !868
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %31 = trunc i64 %3 to i16
  %32 = ashr i16 %31, 8
  %33 = trunc i64 %4 to i16
  %34 = ashr i16 %33, 8
  %35 = add nsw i16 %34, %32
  %36 = icmp slt i16 %35, 127
  %37 = select i1 %36, i16 %35, i16 127
  %38 = icmp sgt i16 %35, -128
  %39 = select i1 %38, i16 %35, i16 -128
  %40 = icmp slt i16 %35, 0
  %41 = select i1 %40, i16 %39, i16 %37
  %42 = trunc i16 %41 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %30, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %42, i8* %43, align 1, !tbaa !868
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = lshr i64 %3, 16
  %46 = lshr i64 %4, 16
  %47 = shl nuw nsw i64 %45, 8
  %48 = trunc i64 %47 to i16
  %49 = ashr exact i16 %48, 8
  %50 = shl nuw nsw i64 %46, 8
  %51 = trunc i64 %50 to i16
  %52 = ashr exact i16 %51, 8
  %53 = add nsw i16 %52, %49
  %54 = icmp slt i16 %53, 127
  %55 = select i1 %54, i16 %53, i16 127
  %56 = icmp sgt i16 %53, -128
  %57 = select i1 %56, i16 %53, i16 -128
  %58 = icmp slt i16 %53, 0
  %59 = select i1 %58, i16 %57, i16 %55
  %60 = trunc i16 %59 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %60, i8* %61, align 2, !tbaa !868
  %62 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %64 = load i8, i8* %63, align 1, !tbaa !868
  %65 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %66 = load i8, i8* %65, align 1, !tbaa !868
  %67 = sext i8 %64 to i16
  %68 = sext i8 %66 to i16
  %69 = add nsw i16 %68, %67
  %70 = icmp slt i16 %69, 127
  %71 = select i1 %70, i16 %69, i16 127
  %72 = icmp sgt i16 %69, -128
  %73 = select i1 %72, i16 %69, i16 -128
  %74 = icmp slt i16 %69, 0
  %75 = select i1 %74, i16 %73, i16 %71
  %76 = trunc i16 %75 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %62, i64* %6, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %76, i8* %77, align 1, !tbaa !868
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4, !tbaa !868
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %82 = load i8, i8* %81, align 4, !tbaa !868
  %83 = sext i8 %80 to i16
  %84 = sext i8 %82 to i16
  %85 = add nsw i16 %84, %83
  %86 = icmp slt i16 %85, 127
  %87 = select i1 %86, i16 %85, i16 127
  %88 = icmp sgt i16 %85, -128
  %89 = select i1 %88, i16 %85, i16 -128
  %90 = icmp slt i16 %85, 0
  %91 = select i1 %90, i16 %89, i16 %87
  %92 = trunc i16 %91 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %78, i64* %6, align 8
  %93 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %92, i8* %93, align 4, !tbaa !868
  %94 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %96 = load i8, i8* %95, align 1, !tbaa !868
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %98 = load i8, i8* %97, align 1, !tbaa !868
  %99 = sext i8 %96 to i16
  %100 = sext i8 %98 to i16
  %101 = add nsw i16 %100, %99
  %102 = icmp slt i16 %101, 127
  %103 = select i1 %102, i16 %101, i16 127
  %104 = icmp sgt i16 %101, -128
  %105 = select i1 %104, i16 %101, i16 -128
  %106 = icmp slt i16 %101, 0
  %107 = select i1 %106, i16 %105, i16 %103
  %108 = trunc i16 %107 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %94, i64* %6, align 8
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %108, i8* %109, align 1, !tbaa !868
  %110 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %112 = load i8, i8* %111, align 2, !tbaa !868
  %113 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %114 = load i8, i8* %113, align 2, !tbaa !868
  %115 = sext i8 %112 to i16
  %116 = sext i8 %114 to i16
  %117 = add nsw i16 %116, %115
  %118 = icmp slt i16 %117, 127
  %119 = select i1 %118, i16 %117, i16 127
  %120 = icmp sgt i16 %117, -128
  %121 = select i1 %120, i16 %117, i16 -128
  %122 = icmp slt i16 %117, 0
  %123 = select i1 %122, i16 %121, i16 %119
  %124 = trunc i16 %123 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %110, i64* %6, align 8
  %125 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %124, i8* %125, align 2, !tbaa !868
  %126 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %127 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %130 = load i8, i8* %129, align 1, !tbaa !868
  %131 = sext i8 %128 to i16
  %132 = sext i8 %130 to i16
  %133 = add nsw i16 %132, %131
  %134 = icmp slt i16 %133, 127
  %135 = select i1 %134, i16 %133, i16 127
  %136 = icmp sgt i16 %133, -128
  %137 = select i1 %136, i16 %133, i16 -128
  %138 = icmp slt i16 %133, 0
  %139 = select i1 %138, i16 %137, i16 %135
  %140 = trunc i16 %139 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %126, i64* %6, align 8
  %141 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %140, i8* %141, align 1, !tbaa !868
  %142 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %143 = lshr i64 %142, 8
  %144 = lshr i64 %142, 16
  %145 = lshr i64 %142, 24
  %146 = lshr i64 %142, 32
  %147 = lshr i64 %142, 40
  %148 = lshr i64 %142, 48
  %149 = lshr i64 %142, 56
  %150 = trunc i64 %142 to i8
  %151 = trunc i64 %143 to i8
  %152 = trunc i64 %144 to i8
  %153 = trunc i64 %145 to i8
  %154 = trunc i64 %146 to i8
  %155 = trunc i64 %147 to i8
  %156 = trunc i64 %148 to i8
  %157 = trunc i64 %149 to i8
  %158 = bitcast i64* %2 to [8 x i8]*
  %159 = bitcast i64* %2 to i8*
  store i8 %150, i8* %159, align 1, !tbaa !868
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 1
  store i8 %151, i8* %160, align 1, !tbaa !868
  %161 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 2
  store i8 %152, i8* %161, align 1, !tbaa !868
  %162 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 3
  store i8 %153, i8* %162, align 1, !tbaa !868
  %163 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 4
  store i8 %154, i8* %163, align 1, !tbaa !868
  %164 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 5
  store i8 %155, i8* %164, align 1, !tbaa !868
  %165 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 6
  store i8 %156, i8* %165, align 1, !tbaa !868
  %166 = getelementptr inbounds [8 x i8], [8 x i8]* %158, i64 0, i64 7
  store i8 %157, i8* %166, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i16
  %53 = shl i16 %52, 8
  %54 = ashr exact i16 %53, 8
  %55 = sext i8 %13 to i16
  %56 = add nsw i16 %55, %54
  %57 = icmp slt i16 %56, 127
  %58 = select i1 %57, i16 %56, i16 127
  %59 = icmp sgt i16 %56, -128
  %60 = select i1 %59, i16 %56, i16 -128
  %61 = icmp slt i16 %56, 0
  %62 = select i1 %61, i16 %60, i16 %58
  %63 = trunc i16 %62 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %64 = bitcast i64* %6 to i8*
  store i8 %63, i8* %64, align 8, !tbaa !868
  %65 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %66 = trunc i64 %3 to i16
  %67 = ashr i16 %66, 8
  %68 = sext i8 %15 to i16
  %69 = add nsw i16 %68, %67
  %70 = icmp slt i16 %69, 127
  %71 = select i1 %70, i16 %69, i16 127
  %72 = icmp sgt i16 %69, -128
  %73 = select i1 %72, i16 %69, i16 -128
  %74 = icmp slt i16 %69, 0
  %75 = select i1 %74, i16 %73, i16 %71
  %76 = trunc i16 %75 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %65, i64* %6, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %76, i8* %77, align 1, !tbaa !868
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %80 = load i8, i8* %79, align 2, !tbaa !868
  %81 = sext i8 %80 to i16
  %82 = sext i8 %17 to i16
  %83 = add nsw i16 %82, %81
  %84 = icmp slt i16 %83, 127
  %85 = select i1 %84, i16 %83, i16 127
  %86 = icmp sgt i16 %83, -128
  %87 = select i1 %86, i16 %83, i16 -128
  %88 = icmp slt i16 %83, 0
  %89 = select i1 %88, i16 %87, i16 %85
  %90 = trunc i16 %89 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %78, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %90, i8* %91, align 2, !tbaa !868
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %94 = load i8, i8* %93, align 1, !tbaa !868
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %96 = load i8, i8* %95, align 1, !tbaa !868
  %97 = sext i8 %94 to i16
  %98 = sext i8 %96 to i16
  %99 = add nsw i16 %98, %97
  %100 = icmp slt i16 %99, 127
  %101 = select i1 %100, i16 %99, i16 127
  %102 = icmp sgt i16 %99, -128
  %103 = select i1 %102, i16 %99, i16 -128
  %104 = icmp slt i16 %99, 0
  %105 = select i1 %104, i16 %103, i16 %101
  %106 = trunc i16 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %92, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %110 = load i8, i8* %109, align 4, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %112 = load i8, i8* %111, align 4, !tbaa !868
  %113 = sext i8 %110 to i16
  %114 = sext i8 %112 to i16
  %115 = add nsw i16 %114, %113
  %116 = icmp slt i16 %115, 127
  %117 = select i1 %116, i16 %115, i16 127
  %118 = icmp sgt i16 %115, -128
  %119 = select i1 %118, i16 %115, i16 -128
  %120 = icmp slt i16 %115, 0
  %121 = select i1 %120, i16 %119, i16 %117
  %122 = trunc i16 %121 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %108, i64* %6, align 8
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %122, i8* %123, align 4, !tbaa !868
  %124 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %125 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %126 = load i8, i8* %125, align 1, !tbaa !868
  %127 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = sext i8 %126 to i16
  %130 = sext i8 %128 to i16
  %131 = add nsw i16 %130, %129
  %132 = icmp slt i16 %131, 127
  %133 = select i1 %132, i16 %131, i16 127
  %134 = icmp sgt i16 %131, -128
  %135 = select i1 %134, i16 %131, i16 -128
  %136 = icmp slt i16 %131, 0
  %137 = select i1 %136, i16 %135, i16 %133
  %138 = trunc i16 %137 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %124, i64* %6, align 8
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %138, i8* %139, align 1, !tbaa !868
  %140 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %141 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %142 = load i8, i8* %141, align 2, !tbaa !868
  %143 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %144 = load i8, i8* %143, align 2, !tbaa !868
  %145 = sext i8 %142 to i16
  %146 = sext i8 %144 to i16
  %147 = add nsw i16 %146, %145
  %148 = icmp slt i16 %147, 127
  %149 = select i1 %148, i16 %147, i16 127
  %150 = icmp sgt i16 %147, -128
  %151 = select i1 %150, i16 %147, i16 -128
  %152 = icmp slt i16 %147, 0
  %153 = select i1 %152, i16 %151, i16 %149
  %154 = trunc i16 %153 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %140, i64* %6, align 8
  %155 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %154, i8* %155, align 2, !tbaa !868
  %156 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %157 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %158 = load i8, i8* %157, align 1, !tbaa !868
  %159 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %160 = load i8, i8* %159, align 1, !tbaa !868
  %161 = sext i8 %158 to i16
  %162 = sext i8 %160 to i16
  %163 = add nsw i16 %162, %161
  %164 = icmp slt i16 %163, 127
  %165 = select i1 %164, i16 %163, i16 127
  %166 = icmp sgt i16 %163, -128
  %167 = select i1 %166, i16 %163, i16 -128
  %168 = icmp slt i16 %163, 0
  %169 = select i1 %168, i16 %167, i16 %165
  %170 = trunc i16 %169 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %156, i64* %6, align 8
  %171 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %170, i8* %171, align 1, !tbaa !868
  %172 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %173 = lshr i64 %172, 8
  %174 = lshr i64 %172, 16
  %175 = lshr i64 %172, 24
  %176 = lshr i64 %172, 32
  %177 = lshr i64 %172, 40
  %178 = lshr i64 %172, 48
  %179 = lshr i64 %172, 56
  %180 = trunc i64 %172 to i8
  %181 = trunc i64 %173 to i8
  %182 = trunc i64 %174 to i8
  %183 = trunc i64 %175 to i8
  %184 = trunc i64 %176 to i8
  %185 = trunc i64 %177 to i8
  %186 = trunc i64 %178 to i8
  %187 = trunc i64 %179 to i8
  %188 = bitcast i64* %2 to [8 x i8]*
  %189 = bitcast i64* %2 to i8*
  store i8 %180, i8* %189, align 1, !tbaa !868
  %190 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 1
  store i8 %181, i8* %190, align 1, !tbaa !868
  %191 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 2
  store i8 %182, i8* %191, align 1, !tbaa !868
  %192 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 3
  store i8 %183, i8* %192, align 1, !tbaa !868
  %193 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 4
  store i8 %184, i8* %193, align 1, !tbaa !868
  %194 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 5
  store i8 %185, i8* %194, align 1, !tbaa !868
  %195 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 6
  store i8 %186, i8* %195, align 1, !tbaa !868
  %196 = getelementptr inbounds [8 x i8], [8 x i8]* %188, i64 0, i64 7
  store i8 %187, i8* %196, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = shl i16 %25, 8
  %29 = ashr exact i16 %28, 8
  %30 = shl i16 %27, 8
  %31 = ashr exact i16 %30, 8
  %32 = add nsw i16 %31, %29
  %33 = icmp slt i16 %32, 127
  %34 = select i1 %33, i16 %32, i16 127
  %35 = icmp sgt i16 %32, -128
  %36 = select i1 %35, i16 %32, i16 -128
  %37 = icmp slt i16 %32, 0
  %38 = select i1 %37, i16 %36, i16 %34
  %39 = trunc i16 %38 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %40 = bitcast <2 x i64>* %6 to i8*
  store i8 %39, i8* %40, align 16, !tbaa !868
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = trunc i64 %24 to i16
  %43 = ashr i16 %42, 8
  %44 = trunc i64 %26 to i16
  %45 = ashr i16 %44, 8
  %46 = add nsw i16 %45, %43
  %47 = icmp slt i16 %46, 127
  %48 = select i1 %47, i16 %46, i16 127
  %49 = icmp sgt i16 %46, -128
  %50 = select i1 %49, i16 %46, i16 -128
  %51 = icmp slt i16 %46, 0
  %52 = select i1 %51, i16 %50, i16 %48
  %53 = trunc i16 %52 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %53, i8* %54, align 1, !tbaa !868
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = lshr i64 %24, 16
  %57 = lshr i64 %26, 16
  %58 = shl nuw nsw i64 %56, 8
  %59 = trunc i64 %58 to i16
  %60 = ashr exact i16 %59, 8
  %61 = shl nuw nsw i64 %57, 8
  %62 = trunc i64 %61 to i16
  %63 = ashr exact i16 %62, 8
  %64 = add nsw i16 %63, %60
  %65 = icmp slt i16 %64, 127
  %66 = select i1 %65, i16 %64, i16 127
  %67 = icmp sgt i16 %64, -128
  %68 = select i1 %67, i16 %64, i16 -128
  %69 = icmp slt i16 %64, 0
  %70 = select i1 %69, i16 %68, i16 %66
  %71 = trunc i16 %70 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %71, i8* %72, align 2, !tbaa !868
  %73 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %75 = load i8, i8* %74, align 1, !tbaa !868
  %76 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %77 = load i8, i8* %76, align 1, !tbaa !868
  %78 = sext i8 %75 to i16
  %79 = sext i8 %77 to i16
  %80 = add nsw i16 %79, %78
  %81 = icmp slt i16 %80, 127
  %82 = select i1 %81, i16 %80, i16 127
  %83 = icmp sgt i16 %80, -128
  %84 = select i1 %83, i16 %80, i16 -128
  %85 = icmp slt i16 %80, 0
  %86 = select i1 %85, i16 %84, i16 %82
  %87 = trunc i16 %86 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %73, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %87, i8* %88, align 1, !tbaa !868
  %89 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %91 = load i8, i8* %90, align 4, !tbaa !868
  %92 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %93 = load i8, i8* %92, align 4, !tbaa !868
  %94 = sext i8 %91 to i16
  %95 = sext i8 %93 to i16
  %96 = add nsw i16 %95, %94
  %97 = icmp slt i16 %96, 127
  %98 = select i1 %97, i16 %96, i16 127
  %99 = icmp sgt i16 %96, -128
  %100 = select i1 %99, i16 %96, i16 -128
  %101 = icmp slt i16 %96, 0
  %102 = select i1 %101, i16 %100, i16 %98
  %103 = trunc i16 %102 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %103, i8* %104, align 4, !tbaa !868
  %105 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %106 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %107 = load i8, i8* %106, align 1, !tbaa !868
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %109 = load i8, i8* %108, align 1, !tbaa !868
  %110 = sext i8 %107 to i16
  %111 = sext i8 %109 to i16
  %112 = add nsw i16 %111, %110
  %113 = icmp slt i16 %112, 127
  %114 = select i1 %113, i16 %112, i16 127
  %115 = icmp sgt i16 %112, -128
  %116 = select i1 %115, i16 %112, i16 -128
  %117 = icmp slt i16 %112, 0
  %118 = select i1 %117, i16 %116, i16 %114
  %119 = trunc i16 %118 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %105, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %119, i8* %120, align 1, !tbaa !868
  %121 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %123 = load i8, i8* %122, align 2, !tbaa !868
  %124 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %125 = load i8, i8* %124, align 2, !tbaa !868
  %126 = sext i8 %123 to i16
  %127 = sext i8 %125 to i16
  %128 = add nsw i16 %127, %126
  %129 = icmp slt i16 %128, 127
  %130 = select i1 %129, i16 %128, i16 127
  %131 = icmp sgt i16 %128, -128
  %132 = select i1 %131, i16 %128, i16 -128
  %133 = icmp slt i16 %128, 0
  %134 = select i1 %133, i16 %132, i16 %130
  %135 = trunc i16 %134 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %121, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %135, i8* %136, align 2, !tbaa !868
  %137 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %138 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %139 = load i8, i8* %138, align 1, !tbaa !868
  %140 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %141 = load i8, i8* %140, align 1, !tbaa !868
  %142 = sext i8 %139 to i16
  %143 = sext i8 %141 to i16
  %144 = add nsw i16 %143, %142
  %145 = icmp slt i16 %144, 127
  %146 = select i1 %145, i16 %144, i16 127
  %147 = icmp sgt i16 %144, -128
  %148 = select i1 %147, i16 %144, i16 -128
  %149 = icmp slt i16 %144, 0
  %150 = select i1 %149, i16 %148, i16 %146
  %151 = trunc i16 %150 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %137, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %151, i8* %152, align 1, !tbaa !868
  %153 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %155 = bitcast i64* %154 to i8*
  %156 = load i8, i8* %155, align 8, !tbaa !868
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  %159 = load i8, i8* %158, align 8, !tbaa !868
  %160 = sext i8 %156 to i16
  %161 = sext i8 %159 to i16
  %162 = add nsw i16 %161, %160
  %163 = icmp slt i16 %162, 127
  %164 = select i1 %163, i16 %162, i16 127
  %165 = icmp sgt i16 %162, -128
  %166 = select i1 %165, i16 %162, i16 -128
  %167 = icmp slt i16 %162, 0
  %168 = select i1 %167, i16 %166, i16 %164
  %169 = trunc i16 %168 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %170 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %171 = bitcast i64* %170 to i8*
  store i8 %169, i8* %171, align 8, !tbaa !868
  %172 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %174 = load i8, i8* %173, align 1, !tbaa !868
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %176 = load i8, i8* %175, align 1, !tbaa !868
  %177 = sext i8 %174 to i16
  %178 = sext i8 %176 to i16
  %179 = add nsw i16 %178, %177
  %180 = icmp slt i16 %179, 127
  %181 = select i1 %180, i16 %179, i16 127
  %182 = icmp sgt i16 %179, -128
  %183 = select i1 %182, i16 %179, i16 -128
  %184 = icmp slt i16 %179, 0
  %185 = select i1 %184, i16 %183, i16 %181
  %186 = trunc i16 %185 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %172, i64* %22, align 8
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %189 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %190 = load i8, i8* %189, align 2, !tbaa !868
  %191 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %192 = load i8, i8* %191, align 2, !tbaa !868
  %193 = sext i8 %190 to i16
  %194 = sext i8 %192 to i16
  %195 = add nsw i16 %194, %193
  %196 = icmp slt i16 %195, 127
  %197 = select i1 %196, i16 %195, i16 127
  %198 = icmp sgt i16 %195, -128
  %199 = select i1 %198, i16 %195, i16 -128
  %200 = icmp slt i16 %195, 0
  %201 = select i1 %200, i16 %199, i16 %197
  %202 = trunc i16 %201 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %188, i64* %22, align 8
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %202, i8* %203, align 2, !tbaa !868
  %204 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %206 = load i8, i8* %205, align 1, !tbaa !868
  %207 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %208 = load i8, i8* %207, align 1, !tbaa !868
  %209 = sext i8 %206 to i16
  %210 = sext i8 %208 to i16
  %211 = add nsw i16 %210, %209
  %212 = icmp slt i16 %211, 127
  %213 = select i1 %212, i16 %211, i16 127
  %214 = icmp sgt i16 %211, -128
  %215 = select i1 %214, i16 %211, i16 -128
  %216 = icmp slt i16 %211, 0
  %217 = select i1 %216, i16 %215, i16 %213
  %218 = trunc i16 %217 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %204, i64* %22, align 8
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %218, i8* %219, align 1, !tbaa !868
  %220 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %221 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %222 = load i8, i8* %221, align 4, !tbaa !868
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %224 = load i8, i8* %223, align 4, !tbaa !868
  %225 = sext i8 %222 to i16
  %226 = sext i8 %224 to i16
  %227 = add nsw i16 %226, %225
  %228 = icmp slt i16 %227, 127
  %229 = select i1 %228, i16 %227, i16 127
  %230 = icmp sgt i16 %227, -128
  %231 = select i1 %230, i16 %227, i16 -128
  %232 = icmp slt i16 %227, 0
  %233 = select i1 %232, i16 %231, i16 %229
  %234 = trunc i16 %233 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %220, i64* %22, align 8
  %235 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %234, i8* %235, align 4, !tbaa !868
  %236 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %237 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %238 = load i8, i8* %237, align 1, !tbaa !868
  %239 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %240 = load i8, i8* %239, align 1, !tbaa !868
  %241 = sext i8 %238 to i16
  %242 = sext i8 %240 to i16
  %243 = add nsw i16 %242, %241
  %244 = icmp slt i16 %243, 127
  %245 = select i1 %244, i16 %243, i16 127
  %246 = icmp sgt i16 %243, -128
  %247 = select i1 %246, i16 %243, i16 -128
  %248 = icmp slt i16 %243, 0
  %249 = select i1 %248, i16 %247, i16 %245
  %250 = trunc i16 %249 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %236, i64* %22, align 8
  %251 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %250, i8* %251, align 1, !tbaa !868
  %252 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %253 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %254 = load i8, i8* %253, align 2, !tbaa !868
  %255 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %256 = load i8, i8* %255, align 2, !tbaa !868
  %257 = sext i8 %254 to i16
  %258 = sext i8 %256 to i16
  %259 = add nsw i16 %258, %257
  %260 = icmp slt i16 %259, 127
  %261 = select i1 %260, i16 %259, i16 127
  %262 = icmp sgt i16 %259, -128
  %263 = select i1 %262, i16 %259, i16 -128
  %264 = icmp slt i16 %259, 0
  %265 = select i1 %264, i16 %263, i16 %261
  %266 = trunc i16 %265 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %252, i64* %22, align 8
  %267 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %266, i8* %267, align 2, !tbaa !868
  %268 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %269 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %270 = load i8, i8* %269, align 1, !tbaa !868
  %271 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %272 = load i8, i8* %271, align 1, !tbaa !868
  %273 = sext i8 %270 to i16
  %274 = sext i8 %272 to i16
  %275 = add nsw i16 %274, %273
  %276 = icmp slt i16 %275, 127
  %277 = select i1 %276, i16 %275, i16 127
  %278 = icmp sgt i16 %275, -128
  %279 = select i1 %278, i16 %275, i16 -128
  %280 = icmp slt i16 %275, 0
  %281 = select i1 %280, i16 %279, i16 %277
  %282 = trunc i16 %281 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %153, i64* %21, align 16
  store i64 %268, i64* %22, align 8
  %283 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %282, i8* %283, align 1, !tbaa !868
  %284 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %285 = lshr i64 %153, 8
  %286 = lshr i64 %153, 16
  %287 = lshr i64 %153, 24
  %288 = lshr i64 %153, 32
  %289 = lshr i64 %153, 40
  %290 = lshr i64 %153, 48
  %291 = lshr i64 %153, 56
  %292 = trunc i64 %153 to i8
  %293 = trunc i64 %285 to i8
  %294 = trunc i64 %286 to i8
  %295 = trunc i64 %287 to i8
  %296 = trunc i64 %288 to i8
  %297 = trunc i64 %289 to i8
  %298 = trunc i64 %290 to i8
  %299 = trunc i64 %291 to i8
  store i8 %292, i8* %2, align 1, !tbaa !868
  %300 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %293, i8* %300, align 1, !tbaa !868
  %301 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %294, i8* %301, align 1, !tbaa !868
  %302 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %295, i8* %302, align 1, !tbaa !868
  %303 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %296, i8* %303, align 1, !tbaa !868
  %304 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %297, i8* %304, align 1, !tbaa !868
  %305 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %298, i8* %305, align 1, !tbaa !868
  %306 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %299, i8* %306, align 1, !tbaa !868
  %307 = trunc i64 %284 to i8
  %308 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %307, i8* %308, align 1, !tbaa !868
  %309 = lshr i64 %284, 8
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %310, i8* %311, align 1, !tbaa !868
  %312 = lshr i64 %284, 16
  %313 = trunc i64 %312 to i8
  %314 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %313, i8* %314, align 1, !tbaa !868
  %315 = lshr i64 %284, 24
  %316 = trunc i64 %315 to i8
  %317 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %316, i8* %317, align 1, !tbaa !868
  %318 = lshr i64 %284, 32
  %319 = trunc i64 %318 to i8
  %320 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %319, i8* %320, align 1, !tbaa !868
  %321 = lshr i64 %284, 40
  %322 = trunc i64 %321 to i8
  %323 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %322, i8* %323, align 1, !tbaa !868
  %324 = lshr i64 %284, 48
  %325 = trunc i64 %324 to i8
  %326 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %325, i8* %326, align 1, !tbaa !868
  %327 = lshr i64 %284, 56
  %328 = trunc i64 %327 to i8
  %329 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %328, i8* %329, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i16
  %93 = shl i16 %92, 8
  %94 = ashr exact i16 %93, 8
  %95 = sext i8 %18 to i16
  %96 = add nsw i16 %95, %94
  %97 = icmp slt i16 %96, 127
  %98 = select i1 %97, i16 %96, i16 127
  %99 = icmp sgt i16 %96, -128
  %100 = select i1 %99, i16 %96, i16 -128
  %101 = icmp slt i16 %96, 0
  %102 = select i1 %101, i16 %100, i16 %98
  %103 = trunc i16 %102 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %104 = bitcast <2 x i64>* %6 to i8*
  store i8 %103, i8* %104, align 16, !tbaa !868
  %105 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %106 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %107 = load i8, i8* %106, align 1, !tbaa !868
  %108 = sext i8 %107 to i16
  %109 = sext i8 %20 to i16
  %110 = add nsw i16 %109, %108
  %111 = icmp slt i16 %110, 127
  %112 = select i1 %111, i16 %110, i16 127
  %113 = icmp sgt i16 %110, -128
  %114 = select i1 %113, i16 %110, i16 -128
  %115 = icmp slt i16 %110, 0
  %116 = select i1 %115, i16 %114, i16 %112
  %117 = trunc i16 %116 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %105, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %117, i8* %118, align 1, !tbaa !868
  %119 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %120 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %121 = load i8, i8* %120, align 2, !tbaa !868
  %122 = sext i8 %121 to i16
  %123 = sext i8 %22 to i16
  %124 = add nsw i16 %123, %122
  %125 = icmp slt i16 %124, 127
  %126 = select i1 %125, i16 %124, i16 127
  %127 = icmp sgt i16 %124, -128
  %128 = select i1 %127, i16 %124, i16 -128
  %129 = icmp slt i16 %124, 0
  %130 = select i1 %129, i16 %128, i16 %126
  %131 = trunc i16 %130 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %119, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %131, i8* %132, align 2, !tbaa !868
  %133 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %135 = load i8, i8* %134, align 1, !tbaa !868
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %137 = load i8, i8* %136, align 1, !tbaa !868
  %138 = sext i8 %135 to i16
  %139 = sext i8 %137 to i16
  %140 = add nsw i16 %139, %138
  %141 = icmp slt i16 %140, 127
  %142 = select i1 %141, i16 %140, i16 127
  %143 = icmp sgt i16 %140, -128
  %144 = select i1 %143, i16 %140, i16 -128
  %145 = icmp slt i16 %140, 0
  %146 = select i1 %145, i16 %144, i16 %142
  %147 = trunc i16 %146 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %133, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %147, i8* %148, align 1, !tbaa !868
  %149 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %151 = load i8, i8* %150, align 4, !tbaa !868
  %152 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %153 = load i8, i8* %152, align 4, !tbaa !868
  %154 = sext i8 %151 to i16
  %155 = sext i8 %153 to i16
  %156 = add nsw i16 %155, %154
  %157 = icmp slt i16 %156, 127
  %158 = select i1 %157, i16 %156, i16 127
  %159 = icmp sgt i16 %156, -128
  %160 = select i1 %159, i16 %156, i16 -128
  %161 = icmp slt i16 %156, 0
  %162 = select i1 %161, i16 %160, i16 %158
  %163 = trunc i16 %162 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %149, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %164 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %163, i8* %164, align 4, !tbaa !868
  %165 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %167 = load i8, i8* %166, align 1, !tbaa !868
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %169 = load i8, i8* %168, align 1, !tbaa !868
  %170 = sext i8 %167 to i16
  %171 = sext i8 %169 to i16
  %172 = add nsw i16 %171, %170
  %173 = icmp slt i16 %172, 127
  %174 = select i1 %173, i16 %172, i16 127
  %175 = icmp sgt i16 %172, -128
  %176 = select i1 %175, i16 %172, i16 -128
  %177 = icmp slt i16 %172, 0
  %178 = select i1 %177, i16 %176, i16 %174
  %179 = trunc i16 %178 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %165, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %179, i8* %180, align 1, !tbaa !868
  %181 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %182 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %183 = load i8, i8* %182, align 2, !tbaa !868
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %185 = load i8, i8* %184, align 2, !tbaa !868
  %186 = sext i8 %183 to i16
  %187 = sext i8 %185 to i16
  %188 = add nsw i16 %187, %186
  %189 = icmp slt i16 %188, 127
  %190 = select i1 %189, i16 %188, i16 127
  %191 = icmp sgt i16 %188, -128
  %192 = select i1 %191, i16 %188, i16 -128
  %193 = icmp slt i16 %188, 0
  %194 = select i1 %193, i16 %192, i16 %190
  %195 = trunc i16 %194 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %181, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %196 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %195, i8* %196, align 2, !tbaa !868
  %197 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %198 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %199 = load i8, i8* %198, align 1, !tbaa !868
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %201 = load i8, i8* %200, align 1, !tbaa !868
  %202 = sext i8 %199 to i16
  %203 = sext i8 %201 to i16
  %204 = add nsw i16 %203, %202
  %205 = icmp slt i16 %204, 127
  %206 = select i1 %205, i16 %204, i16 127
  %207 = icmp sgt i16 %204, -128
  %208 = select i1 %207, i16 %204, i16 -128
  %209 = icmp slt i16 %204, 0
  %210 = select i1 %209, i16 %208, i16 %206
  %211 = trunc i16 %210 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %197, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %212 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %211, i8* %212, align 1, !tbaa !868
  %213 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %214 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %215 = bitcast i64* %214 to i8*
  %216 = load i8, i8* %215, align 8, !tbaa !868
  %217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %218 = bitcast i64* %217 to i8*
  %219 = load i8, i8* %218, align 8, !tbaa !868
  %220 = sext i8 %216 to i16
  %221 = sext i8 %219 to i16
  %222 = add nsw i16 %221, %220
  %223 = icmp slt i16 %222, 127
  %224 = select i1 %223, i16 %222, i16 127
  %225 = icmp sgt i16 %222, -128
  %226 = select i1 %225, i16 %222, i16 -128
  %227 = icmp slt i16 %222, 0
  %228 = select i1 %227, i16 %226, i16 %224
  %229 = trunc i16 %228 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %230 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %231 = bitcast i64* %230 to i8*
  store i8 %229, i8* %231, align 8, !tbaa !868
  %232 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %233 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %234 = load i8, i8* %233, align 1, !tbaa !868
  %235 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %236 = load i8, i8* %235, align 1, !tbaa !868
  %237 = sext i8 %234 to i16
  %238 = sext i8 %236 to i16
  %239 = add nsw i16 %238, %237
  %240 = icmp slt i16 %239, 127
  %241 = select i1 %240, i16 %239, i16 127
  %242 = icmp sgt i16 %239, -128
  %243 = select i1 %242, i16 %239, i16 -128
  %244 = icmp slt i16 %239, 0
  %245 = select i1 %244, i16 %243, i16 %241
  %246 = trunc i16 %245 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %232, i64* %89, align 8
  %247 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %246, i8* %247, align 1, !tbaa !868
  %248 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %249 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %250 = load i8, i8* %249, align 2, !tbaa !868
  %251 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %252 = load i8, i8* %251, align 2, !tbaa !868
  %253 = sext i8 %250 to i16
  %254 = sext i8 %252 to i16
  %255 = add nsw i16 %254, %253
  %256 = icmp slt i16 %255, 127
  %257 = select i1 %256, i16 %255, i16 127
  %258 = icmp sgt i16 %255, -128
  %259 = select i1 %258, i16 %255, i16 -128
  %260 = icmp slt i16 %255, 0
  %261 = select i1 %260, i16 %259, i16 %257
  %262 = trunc i16 %261 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %248, i64* %89, align 8
  %263 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %262, i8* %263, align 2, !tbaa !868
  %264 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %265 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %266 = load i8, i8* %265, align 1, !tbaa !868
  %267 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %268 = load i8, i8* %267, align 1, !tbaa !868
  %269 = sext i8 %266 to i16
  %270 = sext i8 %268 to i16
  %271 = add nsw i16 %270, %269
  %272 = icmp slt i16 %271, 127
  %273 = select i1 %272, i16 %271, i16 127
  %274 = icmp sgt i16 %271, -128
  %275 = select i1 %274, i16 %271, i16 -128
  %276 = icmp slt i16 %271, 0
  %277 = select i1 %276, i16 %275, i16 %273
  %278 = trunc i16 %277 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %264, i64* %89, align 8
  %279 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %278, i8* %279, align 1, !tbaa !868
  %280 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %281 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %282 = load i8, i8* %281, align 4, !tbaa !868
  %283 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %284 = load i8, i8* %283, align 4, !tbaa !868
  %285 = sext i8 %282 to i16
  %286 = sext i8 %284 to i16
  %287 = add nsw i16 %286, %285
  %288 = icmp slt i16 %287, 127
  %289 = select i1 %288, i16 %287, i16 127
  %290 = icmp sgt i16 %287, -128
  %291 = select i1 %290, i16 %287, i16 -128
  %292 = icmp slt i16 %287, 0
  %293 = select i1 %292, i16 %291, i16 %289
  %294 = trunc i16 %293 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %280, i64* %89, align 8
  %295 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %294, i8* %295, align 4, !tbaa !868
  %296 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %297 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %298 = load i8, i8* %297, align 1, !tbaa !868
  %299 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %300 = load i8, i8* %299, align 1, !tbaa !868
  %301 = sext i8 %298 to i16
  %302 = sext i8 %300 to i16
  %303 = add nsw i16 %302, %301
  %304 = icmp slt i16 %303, 127
  %305 = select i1 %304, i16 %303, i16 127
  %306 = icmp sgt i16 %303, -128
  %307 = select i1 %306, i16 %303, i16 -128
  %308 = icmp slt i16 %303, 0
  %309 = select i1 %308, i16 %307, i16 %305
  %310 = trunc i16 %309 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %296, i64* %89, align 8
  %311 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %310, i8* %311, align 1, !tbaa !868
  %312 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %313 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %314 = load i8, i8* %313, align 2, !tbaa !868
  %315 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %316 = load i8, i8* %315, align 2, !tbaa !868
  %317 = sext i8 %314 to i16
  %318 = sext i8 %316 to i16
  %319 = add nsw i16 %318, %317
  %320 = icmp slt i16 %319, 127
  %321 = select i1 %320, i16 %319, i16 127
  %322 = icmp sgt i16 %319, -128
  %323 = select i1 %322, i16 %319, i16 -128
  %324 = icmp slt i16 %319, 0
  %325 = select i1 %324, i16 %323, i16 %321
  %326 = trunc i16 %325 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %312, i64* %89, align 8
  %327 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %326, i8* %327, align 2, !tbaa !868
  %328 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %329 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %330 = load i8, i8* %329, align 1, !tbaa !868
  %331 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %332 = load i8, i8* %331, align 1, !tbaa !868
  %333 = sext i8 %330 to i16
  %334 = sext i8 %332 to i16
  %335 = add nsw i16 %334, %333
  %336 = icmp slt i16 %335, 127
  %337 = select i1 %336, i16 %335, i16 127
  %338 = icmp sgt i16 %335, -128
  %339 = select i1 %338, i16 %335, i16 -128
  %340 = icmp slt i16 %335, 0
  %341 = select i1 %340, i16 %339, i16 %337
  %342 = trunc i16 %341 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %213, i64* %88, align 16
  store i64 %328, i64* %89, align 8
  %343 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %342, i8* %343, align 1, !tbaa !868
  %344 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %345 = lshr i64 %213, 8
  %346 = lshr i64 %213, 16
  %347 = lshr i64 %213, 24
  %348 = lshr i64 %213, 32
  %349 = lshr i64 %213, 40
  %350 = lshr i64 %213, 48
  %351 = lshr i64 %213, 56
  %352 = trunc i64 %213 to i8
  %353 = trunc i64 %345 to i8
  %354 = trunc i64 %346 to i8
  %355 = trunc i64 %347 to i8
  %356 = trunc i64 %348 to i8
  %357 = trunc i64 %349 to i8
  %358 = trunc i64 %350 to i8
  %359 = trunc i64 %351 to i8
  store i8 %352, i8* %2, align 1, !tbaa !868
  %360 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %353, i8* %360, align 1, !tbaa !868
  %361 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %354, i8* %361, align 1, !tbaa !868
  %362 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %355, i8* %362, align 1, !tbaa !868
  %363 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %356, i8* %363, align 1, !tbaa !868
  %364 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %357, i8* %364, align 1, !tbaa !868
  %365 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %358, i8* %365, align 1, !tbaa !868
  %366 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %359, i8* %366, align 1, !tbaa !868
  %367 = trunc i64 %344 to i8
  %368 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %367, i8* %368, align 1, !tbaa !868
  %369 = lshr i64 %344, 8
  %370 = trunc i64 %369 to i8
  %371 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %370, i8* %371, align 1, !tbaa !868
  %372 = lshr i64 %344, 16
  %373 = trunc i64 %372 to i8
  %374 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %373, i8* %374, align 1, !tbaa !868
  %375 = lshr i64 %344, 24
  %376 = trunc i64 %375 to i8
  %377 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %376, i8* %377, align 1, !tbaa !868
  %378 = lshr i64 %344, 32
  %379 = trunc i64 %378 to i8
  %380 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %379, i8* %380, align 1, !tbaa !868
  %381 = lshr i64 %344, 40
  %382 = trunc i64 %381 to i8
  %383 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %382, i8* %383, align 1, !tbaa !868
  %384 = lshr i64 %344, 48
  %385 = trunc i64 %384 to i8
  %386 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %385, i8* %386, align 1, !tbaa !868
  %387 = lshr i64 %344, 56
  %388 = trunc i64 %387 to i8
  %389 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %388, i8* %389, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = shl i32 %9, 16
  %12 = ashr exact i32 %11, 16
  %13 = shl i32 %10, 16
  %14 = ashr exact i32 %13, 16
  %15 = add nsw i32 %14, %12
  %16 = icmp slt i32 %15, 32767
  %17 = select i1 %16, i32 %15, i32 32767
  %18 = icmp sgt i32 %15, -32768
  %19 = select i1 %18, i32 %15, i32 -32768
  %20 = icmp slt i32 %15, 0
  %21 = select i1 %20, i32 %19, i32 %17
  %22 = trunc i32 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i16*
  store i16 %22, i16* %23, align 8, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %25 = trunc i64 %3 to i32
  %26 = ashr i32 %25, 16
  %27 = trunc i64 %4 to i32
  %28 = ashr i32 %27, 16
  %29 = add nsw i32 %28, %26
  %30 = icmp slt i32 %29, 32767
  %31 = select i1 %30, i32 %29, i32 32767
  %32 = icmp sgt i32 %29, -32768
  %33 = select i1 %32, i32 %29, i32 -32768
  %34 = icmp slt i32 %29, 0
  %35 = select i1 %34, i32 %33, i32 %31
  %36 = trunc i32 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %24, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %3, 32
  %40 = lshr i64 %4, 32
  %41 = shl nuw nsw i64 %39, 16
  %42 = trunc i64 %41 to i32
  %43 = ashr exact i32 %42, 16
  %44 = shl nuw nsw i64 %40, 16
  %45 = trunc i64 %44 to i32
  %46 = ashr exact i32 %45, 16
  %47 = add nsw i32 %46, %43
  %48 = icmp slt i32 %47, 32767
  %49 = select i1 %48, i32 %47, i32 32767
  %50 = icmp sgt i32 %47, -32768
  %51 = select i1 %50, i32 %47, i32 -32768
  %52 = icmp slt i32 %47, 0
  %53 = select i1 %52, i32 %51, i32 %49
  %54 = trunc i32 %53 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %38, i64* %6, align 8
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %54, i16* %55, align 4, !tbaa !869
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %57 = lshr i64 %3, 48
  %58 = lshr i64 %4, 48
  %59 = shl nuw nsw i64 %57, 16
  %60 = trunc i64 %59 to i32
  %61 = ashr exact i32 %60, 16
  %62 = shl nuw nsw i64 %58, 16
  %63 = trunc i64 %62 to i32
  %64 = ashr exact i32 %63, 16
  %65 = add nsw i32 %64, %61
  %66 = icmp slt i32 %65, 32767
  %67 = select i1 %66, i32 %65, i32 32767
  %68 = icmp sgt i32 %65, -32768
  %69 = select i1 %68, i32 %65, i32 -32768
  %70 = icmp slt i32 %65, 0
  %71 = select i1 %70, i32 %69, i32 %67
  %72 = trunc i32 %71 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %56, i64* %6, align 8
  %73 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %75 = lshr i64 %74, 16
  %76 = lshr i64 %74, 32
  %77 = lshr i64 %74, 48
  %78 = trunc i64 %74 to i16
  %79 = trunc i64 %75 to i16
  %80 = trunc i64 %76 to i16
  %81 = trunc i64 %77 to i16
  %82 = bitcast i64* %2 to [4 x i16]*
  %83 = bitcast i64* %2 to i16*
  store i16 %78, i16* %83, align 1, !tbaa !869
  %84 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 1
  store i16 %79, i16* %84, align 1, !tbaa !869
  %85 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 2
  store i16 %80, i16* %85, align 1, !tbaa !869
  %86 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 3
  store i16 %81, i16* %86, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = bitcast i64* %6 to i8*
  %18 = bitcast i64* %6 to [4 x i16]*
  %19 = trunc i64 %3 to i32
  %20 = shl i32 %19, 16
  %21 = ashr exact i32 %20, 16
  %22 = sext i16 %10 to i32
  %23 = add nsw i32 %22, %21
  %24 = icmp slt i32 %23, 32767
  %25 = select i1 %24, i32 %23, i32 32767
  %26 = icmp sgt i32 %23, -32768
  %27 = select i1 %26, i32 %23, i32 -32768
  %28 = icmp slt i32 %23, 0
  %29 = select i1 %28, i32 %27, i32 %25
  %30 = trunc i32 %29 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %6, align 8
  %31 = bitcast i64* %6 to i16*
  store i16 %30, i16* %31, align 8, !tbaa !869
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %33 = trunc i64 %3 to i32
  %34 = ashr i32 %33, 16
  %35 = sext i16 %12 to i32
  %36 = add nsw i32 %35, %34
  %37 = icmp slt i32 %36, 32767
  %38 = select i1 %37, i32 %36, i32 32767
  %39 = icmp sgt i32 %36, -32768
  %40 = select i1 %39, i32 %36, i32 -32768
  %41 = icmp slt i32 %36, 0
  %42 = select i1 %41, i32 %40, i32 %38
  %43 = trunc i32 %42 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %32, i64* %6, align 8
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %43, i16* %44, align 2, !tbaa !869
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %46 = lshr i64 %3, 32
  %47 = shl nuw nsw i64 %46, 16
  %48 = trunc i64 %47 to i32
  %49 = ashr exact i32 %48, 16
  %50 = sext i16 %14 to i32
  %51 = add nsw i32 %50, %49
  %52 = icmp slt i32 %51, 32767
  %53 = select i1 %52, i32 %51, i32 32767
  %54 = icmp sgt i32 %51, -32768
  %55 = select i1 %54, i32 %51, i32 -32768
  %56 = icmp slt i32 %51, 0
  %57 = select i1 %56, i32 %55, i32 %53
  %58 = trunc i32 %57 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %45, i64* %6, align 8
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %58, i16* %59, align 4, !tbaa !869
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %61 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %62 = load i16, i16* %61, align 2, !tbaa !869
  %63 = sext i16 %62 to i32
  %64 = sext i16 %16 to i32
  %65 = add nsw i32 %64, %63
  %66 = icmp slt i32 %65, 32767
  %67 = select i1 %66, i32 %65, i32 32767
  %68 = icmp sgt i32 %65, -32768
  %69 = select i1 %68, i32 %65, i32 -32768
  %70 = icmp slt i32 %65, 0
  %71 = select i1 %70, i32 %69, i32 %67
  %72 = trunc i32 %71 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %60, i64* %6, align 8
  %73 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %75 = lshr i64 %74, 16
  %76 = lshr i64 %74, 32
  %77 = lshr i64 %74, 48
  %78 = trunc i64 %74 to i16
  %79 = trunc i64 %75 to i16
  %80 = trunc i64 %76 to i16
  %81 = trunc i64 %77 to i16
  %82 = bitcast i64* %2 to [4 x i16]*
  %83 = bitcast i64* %2 to i16*
  store i16 %78, i16* %83, align 1, !tbaa !869
  %84 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 1
  store i16 %79, i16* %84, align 1, !tbaa !869
  %85 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 2
  store i16 %80, i16* %85, align 1, !tbaa !869
  %86 = getelementptr inbounds [4 x i16], [4 x i16]* %82, i64 0, i64 3
  store i16 %81, i16* %86, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i32
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i32
  %28 = shl i32 %25, 16
  %29 = ashr exact i32 %28, 16
  %30 = shl i32 %27, 16
  %31 = ashr exact i32 %30, 16
  %32 = add nsw i32 %31, %29
  %33 = icmp slt i32 %32, 32767
  %34 = select i1 %33, i32 %32, i32 32767
  %35 = icmp sgt i32 %32, -32768
  %36 = select i1 %35, i32 %32, i32 -32768
  %37 = icmp slt i32 %32, 0
  %38 = select i1 %37, i32 %36, i32 %34
  %39 = trunc i32 %38 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %40 = bitcast <2 x i64>* %6 to i16*
  store i16 %39, i16* %40, align 16, !tbaa !869
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = trunc i64 %24 to i32
  %43 = ashr i32 %42, 16
  %44 = trunc i64 %26 to i32
  %45 = ashr i32 %44, 16
  %46 = add nsw i32 %45, %43
  %47 = icmp slt i32 %46, 32767
  %48 = select i1 %47, i32 %46, i32 32767
  %49 = icmp sgt i32 %46, -32768
  %50 = select i1 %49, i32 %46, i32 -32768
  %51 = icmp slt i32 %46, 0
  %52 = select i1 %51, i32 %50, i32 %48
  %53 = trunc i32 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %53, i16* %54, align 2, !tbaa !869
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = lshr i64 %24, 32
  %57 = lshr i64 %26, 32
  %58 = shl nuw nsw i64 %56, 16
  %59 = trunc i64 %58 to i32
  %60 = ashr exact i32 %59, 16
  %61 = shl nuw nsw i64 %57, 16
  %62 = trunc i64 %61 to i32
  %63 = ashr exact i32 %62, 16
  %64 = add nsw i32 %63, %60
  %65 = icmp slt i32 %64, 32767
  %66 = select i1 %65, i32 %64, i32 32767
  %67 = icmp sgt i32 %64, -32768
  %68 = select i1 %67, i32 %64, i32 -32768
  %69 = icmp slt i32 %64, 0
  %70 = select i1 %69, i32 %68, i32 %66
  %71 = trunc i32 %70 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %71, i16* %72, align 4, !tbaa !869
  %73 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %75 = load i16, i16* %74, align 2, !tbaa !869
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 3
  %77 = load i16, i16* %76, align 2, !tbaa !869
  %78 = sext i16 %75 to i32
  %79 = sext i16 %77 to i32
  %80 = add nsw i32 %79, %78
  %81 = icmp slt i32 %80, 32767
  %82 = select i1 %81, i32 %80, i32 32767
  %83 = icmp sgt i32 %80, -32768
  %84 = select i1 %83, i32 %80, i32 -32768
  %85 = icmp slt i32 %80, 0
  %86 = select i1 %85, i32 %84, i32 %82
  %87 = trunc i32 %86 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %73, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %87, i16* %88, align 2, !tbaa !869
  %89 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8, !tbaa !869
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %94 = bitcast i64* %93 to i16*
  %95 = load i16, i16* %94, align 8, !tbaa !869
  %96 = sext i16 %92 to i32
  %97 = sext i16 %95 to i32
  %98 = add nsw i32 %97, %96
  %99 = icmp slt i32 %98, 32767
  %100 = select i1 %99, i32 %98, i32 32767
  %101 = icmp sgt i32 %98, -32768
  %102 = select i1 %101, i32 %98, i32 -32768
  %103 = icmp slt i32 %98, 0
  %104 = select i1 %103, i32 %102, i32 %100
  %105 = trunc i32 %104 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %107 = bitcast i64* %106 to i16*
  store i16 %105, i16* %107, align 8, !tbaa !869
  %108 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %109 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %110 = load i16, i16* %109, align 2, !tbaa !869
  %111 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %112 = load i16, i16* %111, align 2, !tbaa !869
  %113 = sext i16 %110 to i32
  %114 = sext i16 %112 to i32
  %115 = add nsw i32 %114, %113
  %116 = icmp slt i32 %115, 32767
  %117 = select i1 %116, i32 %115, i32 32767
  %118 = icmp sgt i32 %115, -32768
  %119 = select i1 %118, i32 %115, i32 -32768
  %120 = icmp slt i32 %115, 0
  %121 = select i1 %120, i32 %119, i32 %117
  %122 = trunc i32 %121 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 %108, i64* %22, align 8
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %122, i16* %123, align 2, !tbaa !869
  %124 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %126 = load i16, i16* %125, align 4, !tbaa !869
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %128 = load i16, i16* %127, align 4, !tbaa !869
  %129 = sext i16 %126 to i32
  %130 = sext i16 %128 to i32
  %131 = add nsw i32 %130, %129
  %132 = icmp slt i32 %131, 32767
  %133 = select i1 %132, i32 %131, i32 32767
  %134 = icmp sgt i32 %131, -32768
  %135 = select i1 %134, i32 %131, i32 -32768
  %136 = icmp slt i32 %131, 0
  %137 = select i1 %136, i32 %135, i32 %133
  %138 = trunc i32 %137 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 %124, i64* %22, align 8
  %139 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %138, i16* %139, align 4, !tbaa !869
  %140 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %141 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %142 = load i16, i16* %141, align 2, !tbaa !869
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %144 = load i16, i16* %143, align 2, !tbaa !869
  %145 = sext i16 %142 to i32
  %146 = sext i16 %144 to i32
  %147 = add nsw i32 %146, %145
  %148 = icmp slt i32 %147, 32767
  %149 = select i1 %148, i32 %147, i32 32767
  %150 = icmp sgt i32 %147, -32768
  %151 = select i1 %150, i32 %147, i32 -32768
  %152 = icmp slt i32 %147, 0
  %153 = select i1 %152, i32 %151, i32 %149
  %154 = trunc i32 %153 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 %140, i64* %22, align 8
  %155 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %154, i16* %155, align 2, !tbaa !869
  %156 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %157 = lshr i64 %89, 16
  %158 = lshr i64 %89, 32
  %159 = lshr i64 %89, 48
  %160 = trunc i64 %89 to i16
  %161 = trunc i64 %157 to i16
  %162 = trunc i64 %158 to i16
  %163 = trunc i64 %159 to i16
  %164 = bitcast i8* %2 to i16*
  store i16 %160, i16* %164, align 1, !tbaa !869
  %165 = getelementptr inbounds i8, i8* %2, i64 2
  %166 = bitcast i8* %165 to i16*
  store i16 %161, i16* %166, align 1, !tbaa !869
  %167 = getelementptr inbounds i8, i8* %2, i64 4
  %168 = bitcast i8* %167 to i16*
  store i16 %162, i16* %168, align 1, !tbaa !869
  %169 = getelementptr inbounds i8, i8* %2, i64 6
  %170 = bitcast i8* %169 to i16*
  store i16 %163, i16* %170, align 1, !tbaa !869
  %171 = trunc i64 %156 to i16
  %172 = getelementptr inbounds i8, i8* %2, i64 8
  %173 = bitcast i8* %172 to i16*
  store i16 %171, i16* %173, align 1, !tbaa !869
  %174 = lshr i64 %156, 16
  %175 = trunc i64 %174 to i16
  %176 = getelementptr inbounds i8, i8* %2, i64 10
  %177 = bitcast i8* %176 to i16*
  store i16 %175, i16* %177, align 1, !tbaa !869
  %178 = lshr i64 %156, 32
  %179 = trunc i64 %178 to i16
  %180 = getelementptr inbounds i8, i8* %2, i64 12
  %181 = bitcast i8* %180 to i16*
  store i16 %179, i16* %181, align 1, !tbaa !869
  %182 = lshr i64 %156, 48
  %183 = trunc i64 %182 to i16
  %184 = getelementptr inbounds i8, i8* %2, i64 14
  %185 = bitcast i8* %184 to i16*
  store i16 %183, i16* %185, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PADDSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 16
  %58 = ashr exact i32 %57, 16
  %59 = sext i16 %18 to i32
  %60 = add nsw i32 %59, %58
  %61 = icmp slt i32 %60, 32767
  %62 = select i1 %61, i32 %60, i32 32767
  %63 = icmp sgt i32 %60, -32768
  %64 = select i1 %63, i32 %60, i32 -32768
  %65 = icmp slt i32 %60, 0
  %66 = select i1 %65, i32 %64, i32 %62
  %67 = trunc i32 %66 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %68 = bitcast <2 x i64>* %6 to i16*
  store i16 %67, i16* %68, align 16, !tbaa !869
  %69 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %70 = trunc i64 %55 to i32
  %71 = ashr i32 %70, 16
  %72 = sext i16 %20 to i32
  %73 = add nsw i32 %72, %71
  %74 = icmp slt i32 %73, 32767
  %75 = select i1 %74, i32 %73, i32 32767
  %76 = icmp sgt i32 %73, -32768
  %77 = select i1 %76, i32 %73, i32 -32768
  %78 = icmp slt i32 %73, 0
  %79 = select i1 %78, i32 %77, i32 %75
  %80 = trunc i32 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %69, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %80, i16* %81, align 2, !tbaa !869
  %82 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %84 = load i16, i16* %83, align 4, !tbaa !869
  %85 = sext i16 %84 to i32
  %86 = sext i16 %22 to i32
  %87 = add nsw i32 %86, %85
  %88 = icmp slt i32 %87, 32767
  %89 = select i1 %88, i32 %87, i32 32767
  %90 = icmp sgt i32 %87, -32768
  %91 = select i1 %90, i32 %87, i32 -32768
  %92 = icmp slt i32 %87, 0
  %93 = select i1 %92, i32 %91, i32 %89
  %94 = trunc i32 %93 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %82, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %94, i16* %95, align 4, !tbaa !869
  %96 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %97 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %98 = load i16, i16* %97, align 2, !tbaa !869
  %99 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 3
  %100 = load i16, i16* %99, align 2, !tbaa !869
  %101 = sext i16 %98 to i32
  %102 = sext i16 %100 to i32
  %103 = add nsw i32 %102, %101
  %104 = icmp slt i32 %103, 32767
  %105 = select i1 %104, i32 %103, i32 32767
  %106 = icmp sgt i32 %103, -32768
  %107 = select i1 %106, i32 %103, i32 -32768
  %108 = icmp slt i32 %103, 0
  %109 = select i1 %108, i32 %107, i32 %105
  %110 = trunc i32 %109 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %96, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %110, i16* %111, align 2, !tbaa !869
  %112 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %113 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %114 = bitcast i64* %113 to i16*
  %115 = load i16, i16* %114, align 8, !tbaa !869
  %116 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %117 = bitcast i64* %116 to i16*
  %118 = load i16, i16* %117, align 8, !tbaa !869
  %119 = sext i16 %115 to i32
  %120 = sext i16 %118 to i32
  %121 = add nsw i32 %120, %119
  %122 = icmp slt i32 %121, 32767
  %123 = select i1 %122, i32 %121, i32 32767
  %124 = icmp sgt i32 %121, -32768
  %125 = select i1 %124, i32 %121, i32 -32768
  %126 = icmp slt i32 %121, 0
  %127 = select i1 %126, i32 %125, i32 %123
  %128 = trunc i32 %127 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %112, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %129 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %130 = bitcast i64* %129 to i16*
  store i16 %128, i16* %130, align 8, !tbaa !869
  %131 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %132 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %133 = load i16, i16* %132, align 2, !tbaa !869
  %134 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %135 = load i16, i16* %134, align 2, !tbaa !869
  %136 = sext i16 %133 to i32
  %137 = sext i16 %135 to i32
  %138 = add nsw i32 %137, %136
  %139 = icmp slt i32 %138, 32767
  %140 = select i1 %139, i32 %138, i32 32767
  %141 = icmp sgt i32 %138, -32768
  %142 = select i1 %141, i32 %138, i32 -32768
  %143 = icmp slt i32 %138, 0
  %144 = select i1 %143, i32 %142, i32 %140
  %145 = trunc i32 %144 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %112, i64* %52, align 16
  store i64 %131, i64* %53, align 8
  %146 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %145, i16* %146, align 2, !tbaa !869
  %147 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %148 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %149 = load i16, i16* %148, align 4, !tbaa !869
  %150 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %151 = load i16, i16* %150, align 4, !tbaa !869
  %152 = sext i16 %149 to i32
  %153 = sext i16 %151 to i32
  %154 = add nsw i32 %153, %152
  %155 = icmp slt i32 %154, 32767
  %156 = select i1 %155, i32 %154, i32 32767
  %157 = icmp sgt i32 %154, -32768
  %158 = select i1 %157, i32 %154, i32 -32768
  %159 = icmp slt i32 %154, 0
  %160 = select i1 %159, i32 %158, i32 %156
  %161 = trunc i32 %160 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %112, i64* %52, align 16
  store i64 %147, i64* %53, align 8
  %162 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %161, i16* %162, align 4, !tbaa !869
  %163 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %164 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %165 = load i16, i16* %164, align 2, !tbaa !869
  %166 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %167 = load i16, i16* %166, align 2, !tbaa !869
  %168 = sext i16 %165 to i32
  %169 = sext i16 %167 to i32
  %170 = add nsw i32 %169, %168
  %171 = icmp slt i32 %170, 32767
  %172 = select i1 %171, i32 %170, i32 32767
  %173 = icmp sgt i32 %170, -32768
  %174 = select i1 %173, i32 %170, i32 -32768
  %175 = icmp slt i32 %170, 0
  %176 = select i1 %175, i32 %174, i32 %172
  %177 = trunc i32 %176 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %112, i64* %52, align 16
  store i64 %163, i64* %53, align 8
  %178 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %177, i16* %178, align 2, !tbaa !869
  %179 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %180 = lshr i64 %112, 16
  %181 = lshr i64 %112, 32
  %182 = lshr i64 %112, 48
  %183 = trunc i64 %112 to i16
  %184 = trunc i64 %180 to i16
  %185 = trunc i64 %181 to i16
  %186 = trunc i64 %182 to i16
  %187 = bitcast i8* %2 to i16*
  store i16 %183, i16* %187, align 1, !tbaa !869
  %188 = getelementptr inbounds i8, i8* %2, i64 2
  %189 = bitcast i8* %188 to i16*
  store i16 %184, i16* %189, align 1, !tbaa !869
  %190 = getelementptr inbounds i8, i8* %2, i64 4
  %191 = bitcast i8* %190 to i16*
  store i16 %185, i16* %191, align 1, !tbaa !869
  %192 = getelementptr inbounds i8, i8* %2, i64 6
  %193 = bitcast i8* %192 to i16*
  store i16 %186, i16* %193, align 1, !tbaa !869
  %194 = trunc i64 %179 to i16
  %195 = getelementptr inbounds i8, i8* %2, i64 8
  %196 = bitcast i8* %195 to i16*
  store i16 %194, i16* %196, align 1, !tbaa !869
  %197 = lshr i64 %179, 16
  %198 = trunc i64 %197 to i16
  %199 = getelementptr inbounds i8, i8* %2, i64 10
  %200 = bitcast i8* %199 to i16*
  store i16 %198, i16* %200, align 1, !tbaa !869
  %201 = lshr i64 %179, 32
  %202 = trunc i64 %201 to i16
  %203 = getelementptr inbounds i8, i8* %2, i64 12
  %204 = bitcast i8* %203 to i16*
  store i16 %202, i16* %204, align 1, !tbaa !869
  %205 = lshr i64 %179, 48
  %206 = trunc i64 %205 to i16
  %207 = getelementptr inbounds i8, i8* %2, i64 14
  %208 = bitcast i8* %207 to i16*
  store i16 %206, i16* %208, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = trunc i64 %3 to i16
  %11 = lshr i64 %3, 16
  %12 = trunc i64 %11 to i16
  %13 = add i16 %12, %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i16*
  store i16 %13, i16* %14, align 8, !tbaa !869
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %16 = lshr i64 %3, 32
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %3, 48
  %19 = trunc i64 %18 to i16
  %20 = add i16 %19, %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %15, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %23 = bitcast i64* %7 to i8*
  %24 = bitcast i64* %7 to [4 x i16]*
  %25 = trunc i64 %4 to i16
  %26 = lshr i64 %4, 16
  %27 = trunc i64 %26 to i16
  %28 = add i16 %27, %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %22, i64* %7, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = add i16 %34, %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %30, i64* %7, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 3
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1, !tbaa !869
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 2
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %9) #22
  %11 = add i64 %4, 4
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 6
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = bitcast i64* %6 to i8*
  %16 = bitcast i64* %6 to [4 x i16]*
  %17 = trunc i64 %3 to i16
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  %20 = add i16 %19, %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i16*
  store i16 %20, i16* %21, align 8, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %3, 48
  %26 = trunc i64 %25 to i16
  %27 = add i16 %26, %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %22, i64* %6, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %16, i64 0, i64 1
  store i16 %27, i16* %28, align 2, !tbaa !869
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %30 = bitcast i64* %7 to i8*
  %31 = bitcast i64* %7 to [4 x i16]*
  %32 = add i16 %10, %8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %29, i64* %7, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %31, i64 0, i64 2
  store i16 %32, i16* %33, align 4, !tbaa !869
  %34 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %35 = add i16 %14, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %34, i64* %7, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %31, i64 0, i64 3
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1, !tbaa !869
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %9, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = trunc i64 %12 to i16
  %24 = lshr i64 %12, 16
  %25 = trunc i64 %24 to i16
  %26 = add i16 %25, %23
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16, !tbaa !869
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = lshr i64 %12, 32
  %30 = trunc i64 %29 to i16
  %31 = lshr i64 %12, 48
  %32 = trunc i64 %31 to i16
  %33 = add i16 %32, %30
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 1
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %36 = trunc i64 %15 to i16
  %37 = lshr i64 %15, 16
  %38 = trunc i64 %37 to i16
  %39 = add i16 %38, %36
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %35, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %39, i16* %40, align 4, !tbaa !869
  %41 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %42 = lshr i64 %15, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %15, 48
  %45 = trunc i64 %44 to i16
  %46 = add i16 %45, %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %41, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 3
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %49 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %50 = bitcast { i64, i64 }* %8 to i8*
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %53 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %54 = bitcast <2 x i64>* %9 to i16*
  %55 = load i16, i16* %54, align 16, !tbaa !869
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 1
  %57 = load i16, i16* %56, align 2, !tbaa !869
  %58 = add i16 %57, %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 0, i64* %52, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  store i16 %58, i16* %60, align 8, !tbaa !869
  %61 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 2
  %63 = load i16, i16* %62, align 4, !tbaa !869
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 3
  %65 = load i16, i16* %64, align 2, !tbaa !869
  %66 = add i16 %65, %63
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %61, i64* %52, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 5
  store i16 %66, i16* %67, align 2, !tbaa !869
  %68 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8, !tbaa !869
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 5
  %73 = load i16, i16* %72, align 2, !tbaa !869
  %74 = add i16 %73, %71
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %68, i64* %52, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 6
  store i16 %74, i16* %75, align 4, !tbaa !869
  %76 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4, !tbaa !869
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 7
  %80 = load i16, i16* %79, align 2, !tbaa !869
  %81 = add i16 %80, %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %76, i64* %52, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 7
  store i16 %81, i16* %82, align 2, !tbaa !869
  %83 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %84 = lshr i64 %48, 16
  %85 = lshr i64 %48, 32
  %86 = lshr i64 %48, 48
  %87 = trunc i64 %48 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = trunc i64 %86 to i16
  %91 = bitcast i8* %2 to i16*
  store i16 %87, i16* %91, align 1, !tbaa !869
  %92 = getelementptr inbounds i8, i8* %2, i64 2
  %93 = bitcast i8* %92 to i16*
  store i16 %88, i16* %93, align 1, !tbaa !869
  %94 = getelementptr inbounds i8, i8* %2, i64 4
  %95 = bitcast i8* %94 to i16*
  store i16 %89, i16* %95, align 1, !tbaa !869
  %96 = getelementptr inbounds i8, i8* %2, i64 6
  %97 = bitcast i8* %96 to i16*
  store i16 %90, i16* %97, align 1, !tbaa !869
  %98 = trunc i64 %83 to i16
  %99 = getelementptr inbounds i8, i8* %2, i64 8
  %100 = bitcast i8* %99 to i16*
  store i16 %98, i16* %100, align 1, !tbaa !869
  %101 = lshr i64 %83, 16
  %102 = trunc i64 %101 to i16
  %103 = getelementptr inbounds i8, i8* %2, i64 10
  %104 = bitcast i8* %103 to i16*
  store i16 %102, i16* %104, align 1, !tbaa !869
  %105 = lshr i64 %83, 32
  %106 = trunc i64 %105 to i16
  %107 = getelementptr inbounds i8, i8* %2, i64 12
  %108 = bitcast i8* %107 to i16*
  store i16 %106, i16* %108, align 1, !tbaa !869
  %109 = lshr i64 %83, 48
  %110 = trunc i64 %109 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 14
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %3, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %15, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %18, i64* %20, align 8
  %21 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) #23
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %23 = add i64 %4, 2
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 6
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 8
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 10
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 12
  %34 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 14
  %36 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %35) #22
  %37 = insertelement <2 x i16> undef, i16 %28, i32 0
  %38 = insertelement <2 x i16> %37, i16 %36, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw <2 x i64> %39, <i64 48, i64 48>
  %41 = insertelement <2 x i16> undef, i16 %26, i32 0
  %42 = insertelement <2 x i16> %41, i16 %34, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 32, i64 32>
  %45 = insertelement <2 x i16> undef, i16 %24, i32 0
  %46 = insertelement <2 x i16> %45, i16 %32, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 16, i64 16>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %30, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = or <2 x i64> %48, %51
  %53 = or <2 x i64> %52, %44
  %54 = or <2 x i64> %53, %40
  store <2 x i64> %54, <2 x i64>* %11, align 16
  %55 = bitcast <2 x i64>* %6 to i8*
  %56 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %58 = bitcast <2 x i64>* %6 to [8 x i16]*
  %59 = trunc i64 %15 to i16
  %60 = lshr i64 %15, 16
  %61 = trunc i64 %60 to i16
  %62 = add i16 %61, %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %63 = bitcast <2 x i64>* %6 to i16*
  store i16 %62, i16* %63, align 16, !tbaa !869
  %64 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %65 = lshr i64 %15, 32
  %66 = trunc i64 %65 to i16
  %67 = lshr i64 %15, 48
  %68 = trunc i64 %67 to i16
  %69 = add i16 %68, %66
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store i64 %64, i64* %56, align 16
  store i64 0, i64* %57, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %58, i64 0, i64 1
  store i16 %69, i16* %70, align 2, !tbaa !869
  %71 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %72 = trunc i64 %18 to i16
  %73 = lshr i64 %18, 16
  %74 = trunc i64 %73 to i16
  %75 = add i16 %74, %72
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store i64 %71, i64* %56, align 16
  store i64 0, i64* %57, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %58, i64 0, i64 2
  store i16 %75, i16* %76, align 4, !tbaa !869
  %77 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %79 = load i16, i16* %78, align 4, !tbaa !869
  %80 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %81 = load i16, i16* %80, align 2, !tbaa !869
  %82 = add i16 %81, %79
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store i64 %77, i64* %56, align 16
  store i64 0, i64* %57, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %58, i64 0, i64 3
  store i16 %82, i16* %83, align 2, !tbaa !869
  %84 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %85 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %86 = bitcast { i64, i64 }* %8 to i8*
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %89 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %90 = bitcast <2 x i64>* %11 to i16*
  %91 = load i16, i16* %90, align 16, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 1
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = add i16 %93, %91
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 0, i64* %88, align 8
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  store i16 %94, i16* %96, align 8, !tbaa !869
  %97 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 2
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 3
  %101 = load i16, i16* %100, align 2, !tbaa !869
  %102 = add i16 %101, %99
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 %97, i64* %88, align 8
  %103 = getelementptr inbounds [8 x i16], [8 x i16]* %89, i64 0, i64 5
  store i16 %102, i16* %103, align 2, !tbaa !869
  %104 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %106 = bitcast i64* %105 to i16*
  %107 = load i16, i16* %106, align 8, !tbaa !869
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 5
  %109 = load i16, i16* %108, align 2, !tbaa !869
  %110 = add i16 %109, %107
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 %104, i64* %88, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %89, i64 0, i64 6
  store i16 %110, i16* %111, align 4, !tbaa !869
  %112 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 6
  %114 = load i16, i16* %113, align 4, !tbaa !869
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 7
  %116 = load i16, i16* %115, align 2, !tbaa !869
  %117 = add i16 %116, %114
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 %112, i64* %88, align 8
  %118 = getelementptr inbounds [8 x i16], [8 x i16]* %89, i64 0, i64 7
  store i16 %117, i16* %118, align 2, !tbaa !869
  %119 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %120 = lshr i64 %84, 16
  %121 = lshr i64 %84, 32
  %122 = lshr i64 %84, 48
  %123 = trunc i64 %84 to i16
  %124 = trunc i64 %120 to i16
  %125 = trunc i64 %121 to i16
  %126 = trunc i64 %122 to i16
  %127 = bitcast i8* %2 to i16*
  store i16 %123, i16* %127, align 1, !tbaa !869
  %128 = getelementptr inbounds i8, i8* %2, i64 2
  %129 = bitcast i8* %128 to i16*
  store i16 %124, i16* %129, align 1, !tbaa !869
  %130 = getelementptr inbounds i8, i8* %2, i64 4
  %131 = bitcast i8* %130 to i16*
  store i16 %125, i16* %131, align 1, !tbaa !869
  %132 = getelementptr inbounds i8, i8* %2, i64 6
  %133 = bitcast i8* %132 to i16*
  store i16 %126, i16* %133, align 1, !tbaa !869
  %134 = trunc i64 %119 to i16
  %135 = getelementptr inbounds i8, i8* %2, i64 8
  %136 = bitcast i8* %135 to i16*
  store i16 %134, i16* %136, align 1, !tbaa !869
  %137 = lshr i64 %119, 16
  %138 = trunc i64 %137 to i16
  %139 = getelementptr inbounds i8, i8* %2, i64 10
  %140 = bitcast i8* %139 to i16*
  store i16 %138, i16* %140, align 1, !tbaa !869
  %141 = lshr i64 %119, 32
  %142 = trunc i64 %141 to i16
  %143 = getelementptr inbounds i8, i8* %2, i64 12
  %144 = bitcast i8* %143 to i16*
  store i16 %142, i16* %144, align 1, !tbaa !869
  %145 = lshr i64 %119, 48
  %146 = trunc i64 %145 to i16
  %147 = getelementptr inbounds i8, i8* %2, i64 14
  %148 = bitcast i8* %147 to i16*
  store i16 %146, i16* %148, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = trunc i64 %3 to i32
  %10 = lshr i64 %3, 32
  %11 = trunc i64 %10 to i32
  %12 = add i32 %11, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = bitcast i64* %7 to i8*
  %16 = bitcast i64* %7 to [2 x i32]*
  %17 = trunc i64 %4 to i32
  %18 = lshr i64 %4, 32
  %19 = trunc i64 %18 to i32
  %20 = add i32 %19, %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %14, i64* %7, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 4
  %10 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %9) #22
  %11 = bitcast i64* %6 to i8*
  %12 = trunc i64 %3 to i32
  %13 = lshr i64 %3, 32
  %14 = trunc i64 %13 to i32
  %15 = add i32 %14, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8, !tbaa !877
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %18 = bitcast i64* %7 to i8*
  %19 = bitcast i64* %7 to [2 x i32]*
  %20 = add i32 %10, %8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %17, i64* %7, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [4 x i32]*
  %23 = trunc i64 %10 to i32
  %24 = lshr i64 %10, 32
  %25 = trunc i64 %24 to i32
  %26 = add i32 %25, %23
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16, !tbaa !877
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = trunc i64 %13 to i32
  %30 = lshr i64 %13, 32
  %31 = trunc i64 %30 to i32
  %32 = add i32 %31, %29
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %35 = bitcast { i64, i64 }* %8 to i8*
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %38 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %39 = trunc i64 %15 to i32
  %40 = lshr i64 %15, 32
  %41 = trunc i64 %40 to i32
  %42 = add i32 %41, %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 0, i64* %37, align 8
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %44 = bitcast i64* %43 to i32*
  store i32 %42, i32* %44, align 8, !tbaa !877
  %45 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %46 = trunc i64 %18 to i32
  %47 = lshr i64 %18, 32
  %48 = trunc i64 %47 to i32
  %49 = add i32 %48, %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 %45, i64* %37, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 3
  store i32 %49, i32* %50, align 4, !tbaa !877
  %51 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %52 = lshr i64 %34, 32
  %53 = trunc i64 %34 to i32
  %54 = trunc i64 %52 to i32
  %55 = bitcast i8* %2 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = getelementptr inbounds i8, i8* %2, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %54, i32* %57, align 1, !tbaa !877
  %58 = trunc i64 %51 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1, !tbaa !877
  %61 = lshr i64 %51, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHADDDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [4 x i32]*
  %25 = trunc i64 %10 to i32
  %26 = lshr i64 %10, 32
  %27 = trunc i64 %26 to i32
  %28 = add i32 %27, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i32*
  store i32 %28, i32* %29, align 16, !tbaa !877
  %30 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %31 = trunc i64 %13 to i32
  %32 = lshr i64 %13, 32
  %33 = trunc i64 %32 to i32
  %34 = add i32 %33, %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %30, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 1
  store i32 %34, i32* %35, align 4, !tbaa !877
  %36 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %37 = bitcast { i64, i64 }* %8 to i8*
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %40 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %41 = add i32 %16, %14
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %36, i64* %38, align 8
  store i64 0, i64* %39, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8, !tbaa !877
  %44 = load i64, i64* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %45 = add i32 %20, %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %36, i64* %38, align 8
  store i64 %44, i64* %39, align 8
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 3
  store i32 %45, i32* %46, align 4, !tbaa !877
  %47 = load i64, i64* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %48 = lshr i64 %36, 32
  %49 = trunc i64 %36 to i32
  %50 = trunc i64 %48 to i32
  %51 = bitcast i8* %2 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !877
  %52 = getelementptr inbounds i8, i8* %2, i64 4
  %53 = bitcast i8* %52 to i32*
  store i32 %50, i32* %53, align 1, !tbaa !877
  %54 = trunc i64 %47 to i32
  %55 = getelementptr inbounds i8, i8* %2, i64 8
  %56 = bitcast i8* %55 to i32*
  store i32 %54, i32* %56, align 1, !tbaa !877
  %57 = lshr i64 %47, 32
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 12
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI4RVnWI7vec64_tE3RVnIS1_ES4_EP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %4, i64* %8, align 8
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  %12 = trunc i64 %3 to i16
  %13 = lshr i64 %3, 16
  %14 = trunc i64 %13 to i16
  %15 = add i16 %14, %12
  %16 = or i64 %13, %3
  %17 = trunc i64 %16 to i16
  %18 = and i64 %13, %3
  %19 = trunc i64 %18 to i16
  %20 = xor i16 %17, -32768
  %21 = and i16 %20, %15
  %22 = icmp slt i16 %21, 0
  %23 = select i1 %22, i16 32767, i16 %15
  %24 = xor i16 %15, -32768
  %25 = and i16 %19, %24
  %26 = icmp slt i16 %25, 0
  %27 = select i1 %26, i16 -32768, i16 %23
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %28 = bitcast i64* %6 to i16*
  store i16 %27, i16* %28, align 8, !tbaa !869
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %30 = lshr i64 %3, 32
  %31 = trunc i64 %30 to i16
  %32 = lshr i64 %3, 48
  %33 = trunc i64 %32 to i16
  %34 = add i16 %33, %31
  %35 = or i64 %32, %30
  %36 = trunc i64 %35 to i16
  %37 = and i64 %32, %30
  %38 = trunc i64 %37 to i16
  %39 = xor i16 %36, -32768
  %40 = and i16 %39, %34
  %41 = icmp slt i16 %40, 0
  %42 = select i1 %41, i16 32767, i16 %34
  %43 = xor i16 %34, -32768
  %44 = and i16 %38, %43
  %45 = icmp slt i16 %44, 0
  %46 = select i1 %45, i16 -32768, i16 %42
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %29, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %49 = bitcast i64* %8 to %struct.int16v4_t*
  %50 = bitcast i64* %7 to i8*
  %51 = bitcast i64* %7 to [4 x i16]*
  %52 = trunc i64 %4 to i16
  %53 = lshr i64 %4, 16
  %54 = trunc i64 %53 to i16
  %55 = add i16 %54, %52
  %56 = or i64 %53, %4
  %57 = trunc i64 %56 to i16
  %58 = and i64 %53, %4
  %59 = trunc i64 %58 to i16
  %60 = xor i16 %57, -32768
  %61 = and i16 %60, %55
  %62 = icmp slt i16 %61, 0
  %63 = select i1 %62, i16 32767, i16 %55
  %64 = xor i16 %55, -32768
  %65 = and i16 %59, %64
  %66 = icmp slt i16 %65, 0
  %67 = select i1 %66, i16 -32768, i16 %63
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %48, i64* %7, align 8
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 2
  store i16 %67, i16* %68, align 4, !tbaa !869
  %69 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %70 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %49, i64 0, i32 0, i64 2
  %71 = load i16, i16* %70, align 4, !tbaa !869
  %72 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %49, i64 0, i32 0, i64 3
  %73 = load i16, i16* %72, align 2, !tbaa !869
  %74 = add i16 %73, %71
  %75 = or i16 %73, %71
  %76 = and i16 %73, %71
  %77 = xor i16 %75, -32768
  %78 = and i16 %77, %74
  %79 = icmp slt i16 %78, 0
  %80 = select i1 %79, i16 32767, i16 %74
  %81 = xor i16 %74, -32768
  %82 = and i16 %76, %81
  %83 = icmp slt i16 %82, 0
  %84 = select i1 %83, i16 -32768, i16 %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %69, i64* %7, align 8
  %85 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 3
  store i16 %84, i16* %85, align 2, !tbaa !869
  %86 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %87 = lshr i64 %86, 16
  %88 = lshr i64 %86, 32
  %89 = lshr i64 %86, 48
  %90 = trunc i64 %86 to i16
  %91 = trunc i64 %87 to i16
  %92 = trunc i64 %88 to i16
  %93 = trunc i64 %89 to i16
  %94 = bitcast i64* %2 to [4 x i16]*
  %95 = bitcast i64* %2 to i16*
  store i16 %90, i16* %95, align 1, !tbaa !869
  %96 = getelementptr inbounds [4 x i16], [4 x i16]* %94, i64 0, i64 1
  store i16 %91, i16* %96, align 1, !tbaa !869
  %97 = getelementptr inbounds [4 x i16], [4 x i16]* %94, i64 0, i64 2
  store i16 %92, i16* %97, align 1, !tbaa !869
  %98 = getelementptr inbounds [4 x i16], [4 x i16]* %94, i64 0, i64 3
  store i16 %93, i16* %98, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI4RVnWI7vec64_tE3RVnIS1_E3MVnIS1_EEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = zext i16 %16 to i64
  %18 = shl nuw i64 %17, 48
  %19 = zext i16 %14 to i64
  %20 = shl nuw nsw i64 %19, 32
  %21 = zext i16 %12 to i64
  %22 = shl nuw nsw i64 %21, 16
  %23 = zext i16 %10 to i64
  %24 = or i64 %22, %23
  %25 = or i64 %24, %20
  %26 = or i64 %25, %18
  store i64 %26, i64* %8, align 8
  %27 = bitcast i64* %6 to i8*
  %28 = bitcast i64* %6 to [4 x i16]*
  %29 = trunc i64 %3 to i16
  %30 = lshr i64 %3, 16
  %31 = trunc i64 %30 to i16
  %32 = add i16 %31, %29
  %33 = or i64 %30, %3
  %34 = trunc i64 %33 to i16
  %35 = and i64 %30, %3
  %36 = trunc i64 %35 to i16
  %37 = xor i16 %34, -32768
  %38 = and i16 %37, %32
  %39 = icmp slt i16 %38, 0
  %40 = select i1 %39, i16 32767, i16 %32
  %41 = xor i16 %32, -32768
  %42 = and i16 %36, %41
  %43 = icmp slt i16 %42, 0
  %44 = select i1 %43, i16 -32768, i16 %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 0, i64* %6, align 8
  %45 = bitcast i64* %6 to i16*
  store i16 %44, i16* %45, align 8, !tbaa !869
  %46 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %47 = lshr i64 %3, 32
  %48 = trunc i64 %47 to i16
  %49 = lshr i64 %3, 48
  %50 = trunc i64 %49 to i16
  %51 = add i16 %50, %48
  %52 = or i64 %49, %47
  %53 = trunc i64 %52 to i16
  %54 = and i64 %49, %47
  %55 = trunc i64 %54 to i16
  %56 = xor i16 %53, -32768
  %57 = and i16 %56, %51
  %58 = icmp slt i16 %57, 0
  %59 = select i1 %58, i16 32767, i16 %51
  %60 = xor i16 %51, -32768
  %61 = and i16 %55, %60
  %62 = icmp slt i16 %61, 0
  %63 = select i1 %62, i16 -32768, i16 %59
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %46, i64* %6, align 8
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 1
  store i16 %63, i16* %64, align 2, !tbaa !869
  %65 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %66 = bitcast i64* %8 to %struct.int16v4_t*
  %67 = bitcast i64* %7 to i8*
  %68 = bitcast i64* %7 to [4 x i16]*
  %69 = add i16 %12, %10
  %70 = or i16 %12, %10
  %71 = and i16 %12, %10
  %72 = xor i16 %70, -32768
  %73 = and i16 %72, %69
  %74 = icmp slt i16 %73, 0
  %75 = select i1 %74, i16 32767, i16 %69
  %76 = xor i16 %69, -32768
  %77 = and i16 %71, %76
  %78 = icmp slt i16 %77, 0
  %79 = select i1 %78, i16 -32768, i16 %75
  call void @llvm.lifetime.start(i64 8, i8* nonnull %67)
  store i64 %65, i64* %7, align 8
  %80 = getelementptr inbounds [4 x i16], [4 x i16]* %68, i64 0, i64 2
  store i16 %79, i16* %80, align 4, !tbaa !869
  %81 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %67)
  %82 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %66, i64 0, i32 0, i64 2
  %83 = load i16, i16* %82, align 4, !tbaa !869
  %84 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %66, i64 0, i32 0, i64 3
  %85 = load i16, i16* %84, align 2, !tbaa !869
  %86 = add i16 %85, %83
  %87 = or i16 %85, %83
  %88 = and i16 %85, %83
  %89 = xor i16 %87, -32768
  %90 = and i16 %89, %86
  %91 = icmp slt i16 %90, 0
  %92 = select i1 %91, i16 32767, i16 %86
  %93 = xor i16 %86, -32768
  %94 = and i16 %88, %93
  %95 = icmp slt i16 %94, 0
  %96 = select i1 %95, i16 -32768, i16 %92
  call void @llvm.lifetime.start(i64 8, i8* nonnull %67)
  store i64 %81, i64* %7, align 8
  %97 = getelementptr inbounds [4 x i16], [4 x i16]* %68, i64 0, i64 3
  store i16 %96, i16* %97, align 2, !tbaa !869
  %98 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %67)
  %99 = lshr i64 %98, 16
  %100 = lshr i64 %98, 32
  %101 = lshr i64 %98, 48
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = bitcast i64* %2 to [4 x i16]*
  %107 = bitcast i64* %2 to i16*
  store i16 %102, i16* %107, align 1, !tbaa !869
  %108 = getelementptr inbounds [4 x i16], [4 x i16]* %106, i64 0, i64 1
  store i16 %103, i16* %108, align 1, !tbaa !869
  %109 = getelementptr inbounds [4 x i16], [4 x i16]* %106, i64 0, i64 2
  store i16 %104, i16* %109, align 1, !tbaa !869
  %110 = getelementptr inbounds [4 x i16], [4 x i16]* %106, i64 0, i64 3
  store i16 %105, i16* %110, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI3VnWI8vec128_tE2VnIS1_ES4_EP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %3, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %15, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %18, i64* %20, align 8
  %21 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) #23
  %22 = bitcast i8* %4 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 1
  store <2 x i64> %23, <2 x i64>* %11, align 16
  %24 = bitcast <2 x i64>* %6 to i8*
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %27 = bitcast <2 x i64>* %6 to [8 x i16]*
  %28 = trunc i64 %15 to i16
  %29 = lshr i64 %15, 16
  %30 = trunc i64 %29 to i16
  %31 = add i16 %30, %28
  %32 = or i64 %29, %15
  %33 = trunc i64 %32 to i16
  %34 = and i64 %29, %15
  %35 = trunc i64 %34 to i16
  %36 = xor i16 %33, -32768
  %37 = and i16 %36, %31
  %38 = icmp slt i16 %37, 0
  %39 = select i1 %38, i16 32767, i16 %31
  %40 = xor i16 %31, -32768
  %41 = and i16 %35, %40
  %42 = icmp slt i16 %41, 0
  %43 = select i1 %42, i16 -32768, i16 %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %44 = bitcast <2 x i64>* %6 to i16*
  store i16 %43, i16* %44, align 16, !tbaa !869
  %45 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %46 = lshr i64 %15, 32
  %47 = trunc i64 %46 to i16
  %48 = lshr i64 %15, 48
  %49 = trunc i64 %48 to i16
  %50 = add i16 %49, %47
  %51 = or i64 %48, %46
  %52 = trunc i64 %51 to i16
  %53 = and i64 %48, %46
  %54 = trunc i64 %53 to i16
  %55 = xor i16 %52, -32768
  %56 = and i16 %55, %50
  %57 = icmp slt i16 %56, 0
  %58 = select i1 %57, i16 32767, i16 %50
  %59 = xor i16 %50, -32768
  %60 = and i16 %54, %59
  %61 = icmp slt i16 %60, 0
  %62 = select i1 %61, i16 -32768, i16 %58
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %45, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %27, i64 0, i64 1
  store i16 %62, i16* %63, align 2, !tbaa !869
  %64 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %65 = trunc i64 %18 to i16
  %66 = lshr i64 %18, 16
  %67 = trunc i64 %66 to i16
  %68 = add i16 %67, %65
  %69 = or i64 %66, %18
  %70 = trunc i64 %69 to i16
  %71 = and i64 %66, %18
  %72 = trunc i64 %71 to i16
  %73 = xor i16 %70, -32768
  %74 = and i16 %73, %68
  %75 = icmp slt i16 %74, 0
  %76 = select i1 %75, i16 32767, i16 %68
  %77 = xor i16 %68, -32768
  %78 = and i16 %72, %77
  %79 = icmp slt i16 %78, 0
  %80 = select i1 %79, i16 -32768, i16 %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %64, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %27, i64 0, i64 2
  store i16 %80, i16* %81, align 4, !tbaa !869
  %82 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %84 = load i16, i16* %83, align 4, !tbaa !869
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = add i16 %86, %84
  %88 = or i16 %86, %84
  %89 = and i16 %86, %84
  %90 = xor i16 %88, -32768
  %91 = and i16 %90, %87
  %92 = icmp slt i16 %91, 0
  %93 = select i1 %92, i16 32767, i16 %87
  %94 = xor i16 %87, -32768
  %95 = and i16 %89, %94
  %96 = icmp slt i16 %95, 0
  %97 = select i1 %96, i16 -32768, i16 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %24)
  store i64 %82, i64* %25, align 16
  store i64 0, i64* %26, align 8
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %27, i64 0, i64 3
  store i16 %97, i16* %98, align 2, !tbaa !869
  %99 = load i64, i64* %25, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %24)
  %100 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %101 = bitcast { i64, i64 }* %8 to i8*
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %104 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %105 = bitcast <2 x i64>* %11 to i16*
  %106 = load i16, i16* %105, align 16, !tbaa !869
  %107 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 1
  %108 = load i16, i16* %107, align 2, !tbaa !869
  %109 = add i16 %108, %106
  %110 = or i16 %108, %106
  %111 = and i16 %108, %106
  %112 = xor i16 %110, -32768
  %113 = and i16 %112, %109
  %114 = icmp slt i16 %113, 0
  %115 = select i1 %114, i16 32767, i16 %109
  %116 = xor i16 %109, -32768
  %117 = and i16 %111, %116
  %118 = icmp slt i16 %117, 0
  %119 = select i1 %118, i16 -32768, i16 %115
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 0, i64* %103, align 8
  %120 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %121 = bitcast i64* %120 to i16*
  store i16 %119, i16* %121, align 8, !tbaa !869
  %122 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %123 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 2
  %124 = load i16, i16* %123, align 4, !tbaa !869
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 3
  %126 = load i16, i16* %125, align 2, !tbaa !869
  %127 = add i16 %126, %124
  %128 = or i16 %126, %124
  %129 = and i16 %126, %124
  %130 = xor i16 %128, -32768
  %131 = and i16 %130, %127
  %132 = icmp slt i16 %131, 0
  %133 = select i1 %132, i16 32767, i16 %127
  %134 = xor i16 %127, -32768
  %135 = and i16 %129, %134
  %136 = icmp slt i16 %135, 0
  %137 = select i1 %136, i16 -32768, i16 %133
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 %122, i64* %103, align 8
  %138 = getelementptr inbounds [8 x i16], [8 x i16]* %104, i64 0, i64 5
  store i16 %137, i16* %138, align 2, !tbaa !869
  %139 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %141 = bitcast i64* %140 to i16*
  %142 = load i16, i16* %141, align 8, !tbaa !869
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 5
  %144 = load i16, i16* %143, align 2, !tbaa !869
  %145 = add i16 %144, %142
  %146 = or i16 %144, %142
  %147 = and i16 %144, %142
  %148 = xor i16 %146, -32768
  %149 = and i16 %148, %145
  %150 = icmp slt i16 %149, 0
  %151 = select i1 %150, i16 32767, i16 %145
  %152 = xor i16 %145, -32768
  %153 = and i16 %147, %152
  %154 = icmp slt i16 %153, 0
  %155 = select i1 %154, i16 -32768, i16 %151
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 %139, i64* %103, align 8
  %156 = getelementptr inbounds [8 x i16], [8 x i16]* %104, i64 0, i64 6
  store i16 %155, i16* %156, align 4, !tbaa !869
  %157 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %158 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 6
  %159 = load i16, i16* %158, align 4, !tbaa !869
  %160 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %100, i64 0, i32 0, i64 7
  %161 = load i16, i16* %160, align 2, !tbaa !869
  %162 = add i16 %161, %159
  %163 = or i16 %161, %159
  %164 = and i16 %161, %159
  %165 = xor i16 %163, -32768
  %166 = and i16 %165, %162
  %167 = icmp slt i16 %166, 0
  %168 = select i1 %167, i16 32767, i16 %162
  %169 = xor i16 %162, -32768
  %170 = and i16 %164, %169
  %171 = icmp slt i16 %170, 0
  %172 = select i1 %171, i16 -32768, i16 %168
  call void @llvm.lifetime.start(i64 16, i8* nonnull %101)
  store i64 %99, i64* %102, align 8
  store i64 %157, i64* %103, align 8
  %173 = getelementptr inbounds [8 x i16], [8 x i16]* %104, i64 0, i64 7
  store i16 %172, i16* %173, align 2, !tbaa !869
  %174 = load i64, i64* %103, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %101)
  %175 = lshr i64 %99, 16
  %176 = lshr i64 %99, 32
  %177 = lshr i64 %99, 48
  %178 = trunc i64 %99 to i16
  %179 = trunc i64 %175 to i16
  %180 = trunc i64 %176 to i16
  %181 = trunc i64 %177 to i16
  %182 = bitcast i8* %2 to i16*
  store i16 %178, i16* %182, align 1, !tbaa !869
  %183 = getelementptr inbounds i8, i8* %2, i64 2
  %184 = bitcast i8* %183 to i16*
  store i16 %179, i16* %184, align 1, !tbaa !869
  %185 = getelementptr inbounds i8, i8* %2, i64 4
  %186 = bitcast i8* %185 to i16*
  store i16 %180, i16* %186, align 1, !tbaa !869
  %187 = getelementptr inbounds i8, i8* %2, i64 6
  %188 = bitcast i8* %187 to i16*
  store i16 %181, i16* %188, align 1, !tbaa !869
  %189 = trunc i64 %174 to i16
  %190 = getelementptr inbounds i8, i8* %2, i64 8
  %191 = bitcast i8* %190 to i16*
  store i16 %189, i16* %191, align 1, !tbaa !869
  %192 = lshr i64 %174, 16
  %193 = trunc i64 %192 to i16
  %194 = getelementptr inbounds i8, i8* %2, i64 10
  %195 = bitcast i8* %194 to i16*
  store i16 %193, i16* %195, align 1, !tbaa !869
  %196 = lshr i64 %174, 32
  %197 = trunc i64 %196 to i16
  %198 = getelementptr inbounds i8, i8* %2, i64 12
  %199 = bitcast i8* %198 to i16*
  store i16 %197, i16* %199, align 1, !tbaa !869
  %200 = lshr i64 %174, 48
  %201 = trunc i64 %200 to i16
  %202 = getelementptr inbounds i8, i8* %2, i64 14
  %203 = bitcast i8* %202 to i16*
  store i16 %201, i16* %203, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZL7PHADDSWI3VnWI8vec128_tE2VnIS1_E3MVnIS1_EEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %9, align 16
  %17 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %12, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = lshr i64 %55, 16
  %58 = trunc i64 %57 to i16
  %59 = add i16 %58, %56
  %60 = or i64 %57, %55
  %61 = trunc i64 %60 to i16
  %62 = and i64 %57, %55
  %63 = trunc i64 %62 to i16
  %64 = xor i16 %61, -32768
  %65 = and i16 %64, %59
  %66 = icmp slt i16 %65, 0
  %67 = select i1 %66, i16 32767, i16 %59
  %68 = xor i16 %59, -32768
  %69 = and i16 %63, %68
  %70 = icmp slt i16 %69, 0
  %71 = select i1 %70, i16 -32768, i16 %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %72 = bitcast <2 x i64>* %6 to i16*
  store i16 %71, i16* %72, align 16, !tbaa !869
  %73 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %74 = lshr i64 %55, 32
  %75 = trunc i64 %74 to i16
  %76 = lshr i64 %55, 48
  %77 = trunc i64 %76 to i16
  %78 = add i16 %77, %75
  %79 = or i64 %76, %74
  %80 = trunc i64 %79 to i16
  %81 = and i64 %76, %74
  %82 = trunc i64 %81 to i16
  %83 = xor i16 %80, -32768
  %84 = and i16 %83, %78
  %85 = icmp slt i16 %84, 0
  %86 = select i1 %85, i16 32767, i16 %78
  %87 = xor i16 %78, -32768
  %88 = and i16 %82, %87
  %89 = icmp slt i16 %88, 0
  %90 = select i1 %89, i16 -32768, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %73, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %90, i16* %91, align 2, !tbaa !869
  %92 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %94 = bitcast i64* %93 to i16*
  %95 = load i16, i16* %94, align 8, !tbaa !869
  %96 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %97 = load i16, i16* %96, align 2, !tbaa !869
  %98 = add i16 %97, %95
  %99 = or i16 %97, %95
  %100 = and i16 %97, %95
  %101 = xor i16 %99, -32768
  %102 = and i16 %101, %98
  %103 = icmp slt i16 %102, 0
  %104 = select i1 %103, i16 32767, i16 %98
  %105 = xor i16 %98, -32768
  %106 = and i16 %100, %105
  %107 = icmp slt i16 %106, 0
  %108 = select i1 %107, i16 -32768, i16 %104
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %92, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %109 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %108, i16* %109, align 4, !tbaa !869
  %110 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %111 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %112 = load i16, i16* %111, align 4, !tbaa !869
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %114 = load i16, i16* %113, align 2, !tbaa !869
  %115 = add i16 %114, %112
  %116 = or i16 %114, %112
  %117 = and i16 %114, %112
  %118 = xor i16 %116, -32768
  %119 = and i16 %118, %115
  %120 = icmp slt i16 %119, 0
  %121 = select i1 %120, i16 32767, i16 %115
  %122 = xor i16 %115, -32768
  %123 = and i16 %117, %122
  %124 = icmp slt i16 %123, 0
  %125 = select i1 %124, i16 -32768, i16 %121
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %110, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %126 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %125, i16* %126, align 2, !tbaa !869
  %127 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %128 = bitcast <2 x i64>* %12 to %struct.uint16v8_t*
  %129 = bitcast { i64, i64 }* %8 to i8*
  %130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %131 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %132 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %133 = bitcast <2 x i64>* %12 to i16*
  %134 = load i16, i16* %133, align 16, !tbaa !869
  %135 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 1
  %136 = load i16, i16* %135, align 2, !tbaa !869
  %137 = add i16 %136, %134
  %138 = or i16 %136, %134
  %139 = and i16 %136, %134
  %140 = xor i16 %138, -32768
  %141 = and i16 %140, %137
  %142 = icmp slt i16 %141, 0
  %143 = select i1 %142, i16 32767, i16 %137
  %144 = xor i16 %137, -32768
  %145 = and i16 %139, %144
  %146 = icmp slt i16 %145, 0
  %147 = select i1 %146, i16 -32768, i16 %143
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 0, i64* %131, align 8
  %148 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %149 = bitcast i64* %148 to i16*
  store i16 %147, i16* %149, align 8, !tbaa !869
  %150 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %151 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 2
  %152 = load i16, i16* %151, align 4, !tbaa !869
  %153 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 3
  %154 = load i16, i16* %153, align 2, !tbaa !869
  %155 = add i16 %154, %152
  %156 = or i16 %154, %152
  %157 = and i16 %154, %152
  %158 = xor i16 %156, -32768
  %159 = and i16 %158, %155
  %160 = icmp slt i16 %159, 0
  %161 = select i1 %160, i16 32767, i16 %155
  %162 = xor i16 %155, -32768
  %163 = and i16 %157, %162
  %164 = icmp slt i16 %163, 0
  %165 = select i1 %164, i16 -32768, i16 %161
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %150, i64* %131, align 8
  %166 = getelementptr inbounds [8 x i16], [8 x i16]* %132, i64 0, i64 5
  store i16 %165, i16* %166, align 2, !tbaa !869
  %167 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %169 = bitcast i64* %168 to i16*
  %170 = load i16, i16* %169, align 8, !tbaa !869
  %171 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 5
  %172 = load i16, i16* %171, align 2, !tbaa !869
  %173 = add i16 %172, %170
  %174 = or i16 %172, %170
  %175 = and i16 %172, %170
  %176 = xor i16 %174, -32768
  %177 = and i16 %176, %173
  %178 = icmp slt i16 %177, 0
  %179 = select i1 %178, i16 32767, i16 %173
  %180 = xor i16 %173, -32768
  %181 = and i16 %175, %180
  %182 = icmp slt i16 %181, 0
  %183 = select i1 %182, i16 -32768, i16 %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %167, i64* %131, align 8
  %184 = getelementptr inbounds [8 x i16], [8 x i16]* %132, i64 0, i64 6
  store i16 %183, i16* %184, align 4, !tbaa !869
  %185 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %186 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 6
  %187 = load i16, i16* %186, align 4, !tbaa !869
  %188 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 7
  %189 = load i16, i16* %188, align 2, !tbaa !869
  %190 = add i16 %189, %187
  %191 = or i16 %189, %187
  %192 = and i16 %189, %187
  %193 = xor i16 %191, -32768
  %194 = and i16 %193, %190
  %195 = icmp slt i16 %194, 0
  %196 = select i1 %195, i16 32767, i16 %190
  %197 = xor i16 %190, -32768
  %198 = and i16 %192, %197
  %199 = icmp slt i16 %198, 0
  %200 = select i1 %199, i16 -32768, i16 %196
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %185, i64* %131, align 8
  %201 = getelementptr inbounds [8 x i16], [8 x i16]* %132, i64 0, i64 7
  store i16 %200, i16* %201, align 2, !tbaa !869
  %202 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %203 = lshr i64 %127, 16
  %204 = lshr i64 %127, 32
  %205 = lshr i64 %127, 48
  %206 = trunc i64 %127 to i16
  %207 = trunc i64 %203 to i16
  %208 = trunc i64 %204 to i16
  %209 = trunc i64 %205 to i16
  %210 = bitcast i8* %2 to i16*
  store i16 %206, i16* %210, align 1, !tbaa !869
  %211 = getelementptr inbounds i8, i8* %2, i64 2
  %212 = bitcast i8* %211 to i16*
  store i16 %207, i16* %212, align 1, !tbaa !869
  %213 = getelementptr inbounds i8, i8* %2, i64 4
  %214 = bitcast i8* %213 to i16*
  store i16 %208, i16* %214, align 1, !tbaa !869
  %215 = getelementptr inbounds i8, i8* %2, i64 6
  %216 = bitcast i8* %215 to i16*
  store i16 %209, i16* %216, align 1, !tbaa !869
  %217 = trunc i64 %202 to i16
  %218 = getelementptr inbounds i8, i8* %2, i64 8
  %219 = bitcast i8* %218 to i16*
  store i16 %217, i16* %219, align 1, !tbaa !869
  %220 = lshr i64 %202, 16
  %221 = trunc i64 %220 to i16
  %222 = getelementptr inbounds i8, i8* %2, i64 10
  %223 = bitcast i8* %222 to i16*
  store i16 %221, i16* %223, align 1, !tbaa !869
  %224 = lshr i64 %202, 32
  %225 = trunc i64 %224 to i16
  %226 = getelementptr inbounds i8, i8* %2, i64 12
  %227 = bitcast i8* %226 to i16*
  store i16 %225, i16* %227, align 1, !tbaa !869
  %228 = lshr i64 %202, 48
  %229 = trunc i64 %228 to i16
  %230 = getelementptr inbounds i8, i8* %2, i64 14
  %231 = bitcast i8* %230 to i16*
  store i16 %229, i16* %231, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 56
  %7 = and i64 %4, 65280
  %8 = and i64 %4, 16711680
  %9 = and i64 %4, 4278190080
  %10 = and i64 %4, 1095216660480
  %11 = and i64 %4, 280375465082880
  %12 = and i64 %4, 71776119061217280
  %13 = lshr i64 %4, 56
  %14 = sub i64 %3, %4
  %15 = sub nsw i64 %6, %13
  %16 = sub i64 %3, %12
  %17 = sub i64 %3, %11
  %18 = sub i64 %3, %10
  %19 = sub i64 %3, %9
  %20 = sub i64 %3, %8
  %21 = sub i64 %3, %7
  %22 = trunc i64 %14 to i8
  %23 = lshr i64 %21, 8
  %24 = trunc i64 %23 to i8
  %25 = lshr i64 %20, 16
  %26 = trunc i64 %25 to i8
  %27 = lshr i64 %19, 24
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %18, 32
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %17, 40
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %16, 48
  %34 = trunc i64 %33 to i8
  %35 = trunc i64 %15 to i8
  %36 = bitcast i64* %2 to [8 x i8]*
  %37 = bitcast i64* %2 to i8*
  store i8 %22, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 1
  store i8 %24, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 2
  store i8 %26, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 3
  store i8 %28, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 4
  store i8 %30, i8* %41, align 1, !tbaa !868
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 5
  store i8 %32, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 6
  store i8 %34, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 7
  store i8 %35, i8* %44, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 56
  %7 = trunc i64 %6 to i8
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 1
  %10 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %9) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 3
  %14 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 4
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 5
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 6
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 7
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = zext i8 %20 to i64
  %24 = zext i8 %18 to i64
  %25 = zext i8 %16 to i64
  %26 = zext i8 %14 to i64
  %27 = shl nuw nsw i64 %26, 24
  %28 = zext i8 %12 to i64
  %29 = shl nuw nsw i64 %28, 16
  %30 = zext i8 %10 to i64
  %31 = shl nuw nsw i64 %30, 8
  %32 = zext i8 %8 to i64
  %33 = sub i64 %3, %32
  %34 = sub i8 %7, %22
  %35 = shl nuw nsw i64 %23, 48
  %36 = sub i64 %3, %35
  %37 = shl nuw nsw i64 %24, 40
  %38 = sub i64 %3, %37
  %39 = shl nuw nsw i64 %25, 32
  %40 = sub i64 %3, %39
  %41 = sub i64 %3, %27
  %42 = sub i64 %3, %29
  %43 = sub i64 %3, %31
  %44 = trunc i64 %33 to i8
  %45 = lshr i64 %43, 8
  %46 = trunc i64 %45 to i8
  %47 = lshr i64 %42, 16
  %48 = trunc i64 %47 to i8
  %49 = lshr i64 %41, 24
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %40, 32
  %52 = trunc i64 %51 to i8
  %53 = lshr i64 %38, 40
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %36, 48
  %56 = trunc i64 %55 to i8
  %57 = bitcast i64* %2 to [8 x i8]*
  %58 = bitcast i64* %2 to i8*
  store i8 %44, i8* %58, align 1, !tbaa !868
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 1
  store i8 %46, i8* %59, align 1, !tbaa !868
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 2
  store i8 %48, i8* %60, align 1, !tbaa !868
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 3
  store i8 %50, i8* %61, align 1, !tbaa !868
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 4
  store i8 %52, i8* %62, align 1, !tbaa !868
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 5
  store i8 %54, i8* %63, align 1, !tbaa !868
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 6
  store i8 %56, i8* %64, align 1, !tbaa !868
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %57, i64 0, i64 7
  store i8 %34, i8* %65, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 65280
  %18 = and i64 %13, 16711680
  %19 = and i64 %13, 4278190080
  %20 = and i64 %13, 1095216660480
  %21 = and i64 %13, 280375465082880
  %22 = and i64 %13, 71776119061217280
  %23 = lshr i64 %13, 56
  %24 = sub i64 %7, %13
  %25 = sub nsw i64 %11, %23
  %26 = sub i64 %10, %16
  %27 = and i64 %16, 65280
  %28 = sub i64 %10, %27
  %29 = and i64 %16, 16711680
  %30 = sub i64 %10, %29
  %31 = and i64 %16, 4278190080
  %32 = sub i64 %10, %31
  %33 = and i64 %16, 1095216660480
  %34 = sub i64 %10, %33
  %35 = and i64 %16, 280375465082880
  %36 = sub i64 %10, %35
  %37 = and i64 %16, 71776119061217280
  %38 = sub i64 %10, %37
  %39 = lshr i64 %10, 56
  %40 = lshr i64 %16, 56
  %41 = sub nsw i64 %39, %40
  %42 = sub i64 %7, %22
  %43 = sub i64 %7, %21
  %44 = sub i64 %7, %20
  %45 = sub i64 %7, %19
  %46 = sub i64 %7, %18
  %47 = sub i64 %7, %17
  %48 = trunc i64 %24 to i8
  %49 = lshr i64 %47, 8
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %46, 16
  %52 = trunc i64 %51 to i8
  %53 = lshr i64 %45, 24
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %44, 32
  %56 = trunc i64 %55 to i8
  %57 = lshr i64 %43, 40
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %42, 48
  %60 = trunc i64 %59 to i8
  %61 = trunc i64 %25 to i8
  store i8 %48, i8* %2, align 1, !tbaa !868
  %62 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %50, i8* %62, align 1, !tbaa !868
  %63 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %52, i8* %63, align 1, !tbaa !868
  %64 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %54, i8* %64, align 1, !tbaa !868
  %65 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %56, i8* %65, align 1, !tbaa !868
  %66 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %58, i8* %66, align 1, !tbaa !868
  %67 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %60, i8* %67, align 1, !tbaa !868
  %68 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %61, i8* %68, align 1, !tbaa !868
  %69 = trunc i64 %26 to i8
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = lshr i64 %28, 8
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %72, i8* %73, align 1, !tbaa !868
  %74 = lshr i64 %30, 16
  %75 = trunc i64 %74 to i8
  %76 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %75, i8* %76, align 1, !tbaa !868
  %77 = lshr i64 %32, 24
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %78, i8* %79, align 1, !tbaa !868
  %80 = lshr i64 %34, 32
  %81 = trunc i64 %80 to i8
  %82 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %81, i8* %82, align 1, !tbaa !868
  %83 = lshr i64 %36, 40
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %84, i8* %85, align 1, !tbaa !868
  %86 = lshr i64 %38, 48
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %87, i8* %88, align 1, !tbaa !868
  %89 = trunc i64 %41 to i8
  %90 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %89, i8* %90, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 56
  %12 = trunc i64 %11 to i8
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %4, 8
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %4, 9
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = zext i8 %31 to i64
  %33 = add i64 %4, 10
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = zext i8 %34 to i64
  %36 = add i64 %4, 11
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = zext i8 %37 to i64
  %39 = add i64 %4, 12
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = zext i8 %40 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = zext i8 %44 to i64
  %46 = shl nuw nsw i64 %45, 40
  %47 = add i64 %4, 14
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = zext i8 %48 to i64
  %50 = shl nuw nsw i64 %49, 48
  %51 = add i64 %4, 15
  %52 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %51) #22
  %53 = zext i8 %25 to i64
  %54 = zext i8 %23 to i64
  %55 = zext i8 %21 to i64
  %56 = zext i8 %19 to i64
  %57 = shl nuw nsw i64 %56, 24
  %58 = zext i8 %17 to i64
  %59 = shl nuw nsw i64 %58, 16
  %60 = zext i8 %15 to i64
  %61 = shl nuw nsw i64 %60, 8
  %62 = zext i8 %13 to i64
  %63 = sub i64 %7, %62
  %64 = sub i8 %12, %27
  %65 = trunc i64 %10 to i8
  %66 = sub i8 %65, %29
  %67 = shl nuw nsw i64 %32, 8
  %68 = sub i64 %10, %67
  %69 = shl nuw nsw i64 %35, 16
  %70 = sub i64 %10, %69
  %71 = shl nuw nsw i64 %38, 24
  %72 = sub i64 %10, %71
  %73 = sub i64 %10, %42
  %74 = sub i64 %10, %46
  %75 = sub i64 %10, %50
  %76 = lshr i64 %10, 56
  %77 = trunc i64 %76 to i8
  %78 = sub i8 %77, %52
  %79 = shl nuw nsw i64 %53, 48
  %80 = sub i64 %7, %79
  %81 = shl nuw nsw i64 %54, 40
  %82 = sub i64 %7, %81
  %83 = shl nuw nsw i64 %55, 32
  %84 = sub i64 %7, %83
  %85 = sub i64 %7, %57
  %86 = sub i64 %7, %59
  %87 = sub i64 %7, %61
  %88 = trunc i64 %63 to i8
  %89 = lshr i64 %87, 8
  %90 = trunc i64 %89 to i8
  %91 = lshr i64 %86, 16
  %92 = trunc i64 %91 to i8
  %93 = lshr i64 %85, 24
  %94 = trunc i64 %93 to i8
  %95 = lshr i64 %84, 32
  %96 = trunc i64 %95 to i8
  %97 = lshr i64 %82, 40
  %98 = trunc i64 %97 to i8
  %99 = lshr i64 %80, 48
  %100 = trunc i64 %99 to i8
  store i8 %88, i8* %2, align 1, !tbaa !868
  %101 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %90, i8* %101, align 1, !tbaa !868
  %102 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %92, i8* %102, align 1, !tbaa !868
  %103 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %94, i8* %103, align 1, !tbaa !868
  %104 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %96, i8* %104, align 1, !tbaa !868
  %105 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %98, i8* %105, align 1, !tbaa !868
  %106 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %100, i8* %106, align 1, !tbaa !868
  %107 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %64, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %66, i8* %108, align 1, !tbaa !868
  %109 = lshr i64 %68, 8
  %110 = trunc i64 %109 to i8
  %111 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %110, i8* %111, align 1, !tbaa !868
  %112 = lshr i64 %70, 16
  %113 = trunc i64 %112 to i8
  %114 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %113, i8* %114, align 1, !tbaa !868
  %115 = lshr i64 %72, 24
  %116 = trunc i64 %115 to i8
  %117 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %116, i8* %117, align 1, !tbaa !868
  %118 = lshr i64 %73, 32
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %119, i8* %120, align 1, !tbaa !868
  %121 = lshr i64 %74, 40
  %122 = trunc i64 %121 to i8
  %123 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %122, i8* %123, align 1, !tbaa !868
  %124 = lshr i64 %75, 48
  %125 = trunc i64 %124 to i8
  %126 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %125, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %78, i8* %127, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 48
  %7 = and i64 %4, 4294901760
  %8 = and i64 %4, 281470681743360
  %9 = lshr i64 %4, 48
  %10 = sub i64 %3, %4
  %11 = sub nsw i64 %6, %9
  %12 = sub i64 %3, %8
  %13 = sub i64 %3, %7
  %14 = trunc i64 %10 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %12, 32
  %18 = trunc i64 %17 to i16
  %19 = trunc i64 %11 to i16
  %20 = bitcast i64* %2 to [4 x i16]*
  %21 = bitcast i64* %2 to i16*
  store i16 %14, i16* %21, align 1, !tbaa !869
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 1
  store i16 %16, i16* %22, align 1, !tbaa !869
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 2
  store i16 %18, i16* %23, align 1, !tbaa !869
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %20, i64 0, i64 3
  store i16 %19, i16* %24, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = lshr i64 %3, 48
  %8 = trunc i64 %7 to i16
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %10 = add i64 %4, 2
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 4
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 6
  %15 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %14) #22
  %16 = zext i16 %13 to i64
  %17 = zext i16 %11 to i64
  %18 = sub i16 %6, %9
  %19 = sub i16 %8, %15
  %20 = shl nuw nsw i64 %16, 32
  %21 = sub i64 %3, %20
  %22 = shl nuw nsw i64 %17, 16
  %23 = sub i64 %3, %22
  %24 = lshr i64 %23, 16
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %21, 32
  %27 = trunc i64 %26 to i16
  %28 = bitcast i64* %2 to [4 x i16]*
  %29 = bitcast i64* %2 to i16*
  store i16 %18, i16* %29, align 1, !tbaa !869
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 1
  store i16 %25, i16* %30, align 1, !tbaa !869
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 2
  store i16 %27, i16* %31, align 1, !tbaa !869
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 3
  store i16 %19, i16* %32, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 48
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = and i64 %13, 4294901760
  %18 = and i64 %13, 281470681743360
  %19 = lshr i64 %13, 48
  %20 = sub i64 %7, %13
  %21 = sub nsw i64 %11, %19
  %22 = sub i64 %10, %16
  %23 = and i64 %16, 4294901760
  %24 = sub i64 %10, %23
  %25 = and i64 %16, 281470681743360
  %26 = sub i64 %10, %25
  %27 = lshr i64 %10, 48
  %28 = lshr i64 %16, 48
  %29 = sub nsw i64 %27, %28
  %30 = sub i64 %7, %18
  %31 = sub i64 %7, %17
  %32 = trunc i64 %20 to i16
  %33 = lshr i64 %31, 16
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %30, 32
  %36 = trunc i64 %35 to i16
  %37 = trunc i64 %21 to i16
  %38 = bitcast i8* %2 to i16*
  store i16 %32, i16* %38, align 1, !tbaa !869
  %39 = getelementptr inbounds i8, i8* %2, i64 2
  %40 = bitcast i8* %39 to i16*
  store i16 %34, i16* %40, align 1, !tbaa !869
  %41 = getelementptr inbounds i8, i8* %2, i64 4
  %42 = bitcast i8* %41 to i16*
  store i16 %36, i16* %42, align 1, !tbaa !869
  %43 = getelementptr inbounds i8, i8* %2, i64 6
  %44 = bitcast i8* %43 to i16*
  store i16 %37, i16* %44, align 1, !tbaa !869
  %45 = trunc i64 %22 to i16
  %46 = getelementptr inbounds i8, i8* %2, i64 8
  %47 = bitcast i8* %46 to i16*
  store i16 %45, i16* %47, align 1, !tbaa !869
  %48 = lshr i64 %24, 16
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds i8, i8* %2, i64 10
  %51 = bitcast i8* %50 to i16*
  store i16 %49, i16* %51, align 1, !tbaa !869
  %52 = lshr i64 %26, 32
  %53 = trunc i64 %52 to i16
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i16*
  store i16 %53, i16* %55, align 1, !tbaa !869
  %56 = trunc i64 %29 to i16
  %57 = getelementptr inbounds i8, i8* %2, i64 14
  %58 = bitcast i8* %57 to i16*
  store i16 %56, i16* %58, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i16
  %12 = lshr i64 %7, 48
  %13 = trunc i64 %12 to i16
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 2
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 4
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 6
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 8
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 10
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = zext i16 %24 to i64
  %26 = add i64 %4, 12
  %27 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %26) #22
  %28 = zext i16 %27 to i64
  %29 = add i64 %4, 14
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = zext i16 %18 to i64
  %32 = zext i16 %16 to i64
  %33 = sub i16 %11, %14
  %34 = sub i16 %13, %20
  %35 = trunc i64 %10 to i16
  %36 = sub i16 %35, %22
  %37 = shl nuw nsw i64 %25, 16
  %38 = sub i64 %10, %37
  %39 = shl nuw nsw i64 %28, 32
  %40 = sub i64 %10, %39
  %41 = lshr i64 %10, 48
  %42 = trunc i64 %41 to i16
  %43 = sub i16 %42, %30
  %44 = shl nuw nsw i64 %31, 32
  %45 = sub i64 %7, %44
  %46 = shl nuw nsw i64 %32, 16
  %47 = sub i64 %7, %46
  %48 = lshr i64 %47, 16
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %45, 32
  %51 = trunc i64 %50 to i16
  %52 = bitcast i8* %2 to i16*
  store i16 %33, i16* %52, align 1, !tbaa !869
  %53 = getelementptr inbounds i8, i8* %2, i64 2
  %54 = bitcast i8* %53 to i16*
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i16*
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds i8, i8* %2, i64 6
  %58 = bitcast i8* %57 to i16*
  store i16 %34, i16* %58, align 1, !tbaa !869
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i16*
  store i16 %36, i16* %60, align 1, !tbaa !869
  %61 = lshr i64 %38, 16
  %62 = trunc i64 %61 to i16
  %63 = getelementptr inbounds i8, i8* %2, i64 10
  %64 = bitcast i8* %63 to i16*
  store i16 %62, i16* %64, align 1, !tbaa !869
  %65 = lshr i64 %40, 32
  %66 = trunc i64 %65 to i16
  %67 = getelementptr inbounds i8, i8* %2, i64 12
  %68 = bitcast i8* %67 to i16*
  store i16 %66, i16* %68, align 1, !tbaa !869
  %69 = getelementptr inbounds i8, i8* %2, i64 14
  %70 = bitcast i8* %69 to i16*
  store i16 %43, i16* %70, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = lshr i64 %3, 32
  %7 = lshr i64 %4, 32
  %8 = sub i64 %3, %4
  %9 = sub nsw i64 %6, %7
  %10 = trunc i64 %8 to i32
  %11 = trunc i64 %9 to i32
  %12 = bitcast i64* %2 to [2 x i32]*
  %13 = bitcast i64* %2 to i32*
  store i32 %10, i32* %13, align 1, !tbaa !877
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %11, i32* %14, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = lshr i64 %3, 32
  %8 = trunc i64 %7 to i32
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %10 = add i64 %4, 4
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %10) #22
  %12 = sub i32 %6, %9
  %13 = sub i32 %8, %11
  %14 = bitcast i64* %2 to [2 x i32]*
  %15 = bitcast i64* %2 to i32*
  store i32 %12, i32* %15, align 1, !tbaa !877
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0, i64 1
  store i32 %13, i32* %16, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = lshr i64 %7, 32
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = lshr i64 %13, 32
  %18 = sub i64 %7, %13
  %19 = sub nsw i64 %11, %17
  %20 = sub i64 %10, %16
  %21 = lshr i64 %10, 32
  %22 = lshr i64 %16, 32
  %23 = sub nsw i64 %21, %22
  %24 = trunc i64 %18 to i32
  %25 = trunc i64 %19 to i32
  %26 = bitcast i8* %2 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !877
  %27 = getelementptr inbounds i8, i8* %2, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %25, i32* %28, align 1, !tbaa !877
  %29 = trunc i64 %20 to i32
  %30 = getelementptr inbounds i8, i8* %2, i64 8
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 1, !tbaa !877
  %32 = trunc i64 %23 to i32
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = trunc i64 %7 to i32
  %12 = lshr i64 %7, 32
  %13 = trunc i64 %12 to i32
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = sub i32 %11, %14
  %22 = sub i32 %13, %16
  %23 = trunc i64 %10 to i32
  %24 = sub i32 %23, %18
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = sub i32 %26, %20
  %28 = bitcast i8* %2 to i32*
  store i32 %21, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds i8, i8* %2, i64 4
  %30 = bitcast i8* %29 to i32*
  store i32 %22, i32* %30, align 1, !tbaa !877
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 1, !tbaa !877
  %33 = getelementptr inbounds i8, i8* %2, i64 12
  %34 = bitcast i8* %33 to i32*
  store i32 %27, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = sub nsw i64 %3, %4
  store i64 %6, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = sub nsw i64 %3, %6
  store i64 %7, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 1
  %10 = sub nsw <2 x i64> %7, %9
  %11 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSUBQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 8
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %9) #22
  %11 = insertelement <2 x i64> undef, i64 %8, i32 0
  %12 = insertelement <2 x i64> %11, i64 %10, i32 1
  %13 = sub nsw <2 x i64> %7, %12
  %14 = bitcast i8* %2 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = sub i8 %15, %16
  %18 = icmp ugt i8 %15, %16
  %19 = select i1 %18, i8 %17, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %20 = bitcast i64* %6 to i8*
  store i8 %19, i8* %20, align 8, !tbaa !868
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %22 = lshr i64 %3, 8
  %23 = trunc i64 %22 to i8
  %24 = lshr i64 %4, 8
  %25 = trunc i64 %24 to i8
  %26 = sub i8 %23, %25
  %27 = icmp ugt i8 %23, %25
  %28 = select i1 %27, i8 %26, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %21, i64* %6, align 8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %28, i8* %29, align 1, !tbaa !868
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %31 = lshr i64 %3, 16
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %4, 16
  %34 = trunc i64 %33 to i8
  %35 = sub i8 %32, %34
  %36 = icmp ugt i8 %32, %34
  %37 = select i1 %36, i8 %35, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %30, i64* %6, align 8
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %37, i8* %38, align 2, !tbaa !868
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %40 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %41 = load i8, i8* %40, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %43 = load i8, i8* %42, align 1, !tbaa !868
  %44 = sub i8 %41, %43
  %45 = icmp ugt i8 %41, %43
  %46 = select i1 %45, i8 %44, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %46, i8* %47, align 1, !tbaa !868
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %49 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %50 = load i8, i8* %49, align 4, !tbaa !868
  %51 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %52 = load i8, i8* %51, align 4, !tbaa !868
  %53 = sub i8 %50, %52
  %54 = icmp ugt i8 %50, %52
  %55 = select i1 %54, i8 %53, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %48, i64* %6, align 8
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %55, i8* %56, align 4, !tbaa !868
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %58 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %59 = load i8, i8* %58, align 1, !tbaa !868
  %60 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %61 = load i8, i8* %60, align 1, !tbaa !868
  %62 = sub i8 %59, %61
  %63 = icmp ugt i8 %59, %61
  %64 = select i1 %63, i8 %62, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %57, i64* %6, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %64, i8* %65, align 1, !tbaa !868
  %66 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %67 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %68 = load i8, i8* %67, align 2, !tbaa !868
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %70 = load i8, i8* %69, align 2, !tbaa !868
  %71 = sub i8 %68, %70
  %72 = icmp ugt i8 %68, %70
  %73 = select i1 %72, i8 %71, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %66, i64* %6, align 8
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %73, i8* %74, align 2, !tbaa !868
  %75 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %76 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %77 = load i8, i8* %76, align 1, !tbaa !868
  %78 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %79 = load i8, i8* %78, align 1, !tbaa !868
  %80 = sub i8 %77, %79
  %81 = icmp ugt i8 %77, %79
  %82 = select i1 %81, i8 %80, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %75, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %82, i8* %83, align 1, !tbaa !868
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %85 = lshr i64 %84, 8
  %86 = lshr i64 %84, 16
  %87 = lshr i64 %84, 24
  %88 = lshr i64 %84, 32
  %89 = lshr i64 %84, 40
  %90 = lshr i64 %84, 48
  %91 = lshr i64 %84, 56
  %92 = trunc i64 %84 to i8
  %93 = trunc i64 %85 to i8
  %94 = trunc i64 %86 to i8
  %95 = trunc i64 %87 to i8
  %96 = trunc i64 %88 to i8
  %97 = trunc i64 %89 to i8
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = bitcast i64* %2 to [8 x i8]*
  %101 = bitcast i64* %2 to i8*
  store i8 %92, i8* %101, align 1, !tbaa !868
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 1
  store i8 %93, i8* %102, align 1, !tbaa !868
  %103 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 2
  store i8 %94, i8* %103, align 1, !tbaa !868
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 3
  store i8 %95, i8* %104, align 1, !tbaa !868
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 4
  store i8 %96, i8* %105, align 1, !tbaa !868
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 5
  store i8 %97, i8* %106, align 1, !tbaa !868
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 6
  store i8 %98, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %100, i64 0, i64 7
  store i8 %99, i8* %108, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i8
  %53 = sub i8 %52, %13
  %54 = icmp ugt i8 %52, %13
  %55 = select i1 %54, i8 %53, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %56 = bitcast i64* %6 to i8*
  store i8 %55, i8* %56, align 8, !tbaa !868
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %58 = lshr i64 %3, 8
  %59 = trunc i64 %58 to i8
  %60 = sub i8 %59, %15
  %61 = icmp ugt i8 %59, %15
  %62 = select i1 %61, i8 %60, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %57, i64* %6, align 8
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %62, i8* %63, align 1, !tbaa !868
  %64 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %65 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %66 = load i8, i8* %65, align 2, !tbaa !868
  %67 = sub i8 %66, %17
  %68 = icmp ugt i8 %66, %17
  %69 = select i1 %68, i8 %67, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %64, i64* %6, align 8
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %69, i8* %70, align 2, !tbaa !868
  %71 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %72 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %73 = load i8, i8* %72, align 1, !tbaa !868
  %74 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %75 = load i8, i8* %74, align 1, !tbaa !868
  %76 = sub i8 %73, %75
  %77 = icmp ugt i8 %73, %75
  %78 = select i1 %77, i8 %76, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %71, i64* %6, align 8
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %78, i8* %79, align 1, !tbaa !868
  %80 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %82 = load i8, i8* %81, align 4, !tbaa !868
  %83 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %84 = load i8, i8* %83, align 4, !tbaa !868
  %85 = sub i8 %82, %84
  %86 = icmp ugt i8 %82, %84
  %87 = select i1 %86, i8 %85, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %80, i64* %6, align 8
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %87, i8* %88, align 4, !tbaa !868
  %89 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %90 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %91 = load i8, i8* %90, align 1, !tbaa !868
  %92 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %93 = load i8, i8* %92, align 1, !tbaa !868
  %94 = sub i8 %91, %93
  %95 = icmp ugt i8 %91, %93
  %96 = select i1 %95, i8 %94, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %89, i64* %6, align 8
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %96, i8* %97, align 1, !tbaa !868
  %98 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %99 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %100 = load i8, i8* %99, align 2, !tbaa !868
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %102 = load i8, i8* %101, align 2, !tbaa !868
  %103 = sub i8 %100, %102
  %104 = icmp ugt i8 %100, %102
  %105 = select i1 %104, i8 %103, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %98, i64* %6, align 8
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %105, i8* %106, align 2, !tbaa !868
  %107 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %108 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %109 = load i8, i8* %108, align 1, !tbaa !868
  %110 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %111 = load i8, i8* %110, align 1, !tbaa !868
  %112 = sub i8 %109, %111
  %113 = icmp ugt i8 %109, %111
  %114 = select i1 %113, i8 %112, i8 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %107, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %117 = lshr i64 %116, 8
  %118 = lshr i64 %116, 16
  %119 = lshr i64 %116, 24
  %120 = lshr i64 %116, 32
  %121 = lshr i64 %116, 40
  %122 = lshr i64 %116, 48
  %123 = lshr i64 %116, 56
  %124 = trunc i64 %116 to i8
  %125 = trunc i64 %117 to i8
  %126 = trunc i64 %118 to i8
  %127 = trunc i64 %119 to i8
  %128 = trunc i64 %120 to i8
  %129 = trunc i64 %121 to i8
  %130 = trunc i64 %122 to i8
  %131 = trunc i64 %123 to i8
  %132 = bitcast i64* %2 to [8 x i8]*
  %133 = bitcast i64* %2 to i8*
  store i8 %124, i8* %133, align 1, !tbaa !868
  %134 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 1
  store i8 %125, i8* %134, align 1, !tbaa !868
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 2
  store i8 %126, i8* %135, align 1, !tbaa !868
  %136 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 3
  store i8 %127, i8* %136, align 1, !tbaa !868
  %137 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 4
  store i8 %128, i8* %137, align 1, !tbaa !868
  %138 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 5
  store i8 %129, i8* %138, align 1, !tbaa !868
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 6
  store i8 %130, i8* %139, align 1, !tbaa !868
  %140 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 7
  store i8 %131, i8* %140, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = sub i8 %25, %27
  %29 = icmp ugt i8 %25, %27
  %30 = select i1 %29, i8 %28, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i8*
  store i8 %30, i8* %31, align 16, !tbaa !868
  %32 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %33 = lshr i64 %24, 8
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %26, 8
  %36 = trunc i64 %35 to i8
  %37 = sub i8 %34, %36
  %38 = icmp ugt i8 %34, %36
  %39 = select i1 %38, i8 %37, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %32, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %39, i8* %40, align 1, !tbaa !868
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = lshr i64 %24, 16
  %43 = trunc i64 %42 to i8
  %44 = lshr i64 %26, 16
  %45 = trunc i64 %44 to i8
  %46 = sub i8 %43, %45
  %47 = icmp ugt i8 %43, %45
  %48 = select i1 %47, i8 %46, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %48, i8* %49, align 2, !tbaa !868
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %52 = load i8, i8* %51, align 1, !tbaa !868
  %53 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %54 = load i8, i8* %53, align 1, !tbaa !868
  %55 = sub i8 %52, %54
  %56 = icmp ugt i8 %52, %54
  %57 = select i1 %56, i8 %55, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %57, i8* %58, align 1, !tbaa !868
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %61 = load i8, i8* %60, align 4, !tbaa !868
  %62 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %63 = load i8, i8* %62, align 4, !tbaa !868
  %64 = sub i8 %61, %63
  %65 = icmp ugt i8 %61, %63
  %66 = select i1 %65, i8 %64, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %66, i8* %67, align 4, !tbaa !868
  %68 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %69 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = sub i8 %70, %72
  %74 = icmp ugt i8 %70, %72
  %75 = select i1 %74, i8 %73, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %68, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %76 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %75, i8* %76, align 1, !tbaa !868
  %77 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %78 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %79 = load i8, i8* %78, align 2, !tbaa !868
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %81 = load i8, i8* %80, align 2, !tbaa !868
  %82 = sub i8 %79, %81
  %83 = icmp ugt i8 %79, %81
  %84 = select i1 %83, i8 %82, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %77, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %84, i8* %85, align 2, !tbaa !868
  %86 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %87 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %88 = load i8, i8* %87, align 1, !tbaa !868
  %89 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %90 = load i8, i8* %89, align 1, !tbaa !868
  %91 = sub i8 %88, %90
  %92 = icmp ugt i8 %88, %90
  %93 = select i1 %92, i8 %91, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %86, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %93, i8* %94, align 1, !tbaa !868
  %95 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  %98 = load i8, i8* %97, align 8, !tbaa !868
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %100 = bitcast i64* %99 to i8*
  %101 = load i8, i8* %100, align 8, !tbaa !868
  %102 = sub i8 %98, %101
  %103 = icmp ugt i8 %98, %101
  %104 = select i1 %103, i8 %102, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %106 = bitcast i64* %105 to i8*
  store i8 %104, i8* %106, align 8, !tbaa !868
  %107 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %109 = load i8, i8* %108, align 1, !tbaa !868
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %111 = load i8, i8* %110, align 1, !tbaa !868
  %112 = sub i8 %109, %111
  %113 = icmp ugt i8 %109, %111
  %114 = select i1 %113, i8 %112, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %107, i64* %22, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %118 = load i8, i8* %117, align 2, !tbaa !868
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %120 = load i8, i8* %119, align 2, !tbaa !868
  %121 = sub i8 %118, %120
  %122 = icmp ugt i8 %118, %120
  %123 = select i1 %122, i8 %121, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %116, i64* %22, align 8
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %123, i8* %124, align 2, !tbaa !868
  %125 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %127 = load i8, i8* %126, align 1, !tbaa !868
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %129 = load i8, i8* %128, align 1, !tbaa !868
  %130 = sub i8 %127, %129
  %131 = icmp ugt i8 %127, %129
  %132 = select i1 %131, i8 %130, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %125, i64* %22, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %132, i8* %133, align 1, !tbaa !868
  %134 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %136 = load i8, i8* %135, align 4, !tbaa !868
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %138 = load i8, i8* %137, align 4, !tbaa !868
  %139 = sub i8 %136, %138
  %140 = icmp ugt i8 %136, %138
  %141 = select i1 %140, i8 %139, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %134, i64* %22, align 8
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %141, i8* %142, align 4, !tbaa !868
  %143 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %145 = load i8, i8* %144, align 1, !tbaa !868
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %147 = load i8, i8* %146, align 1, !tbaa !868
  %148 = sub i8 %145, %147
  %149 = icmp ugt i8 %145, %147
  %150 = select i1 %149, i8 %148, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %143, i64* %22, align 8
  %151 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %150, i8* %151, align 1, !tbaa !868
  %152 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %153 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %154 = load i8, i8* %153, align 2, !tbaa !868
  %155 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %156 = load i8, i8* %155, align 2, !tbaa !868
  %157 = sub i8 %154, %156
  %158 = icmp ugt i8 %154, %156
  %159 = select i1 %158, i8 %157, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %152, i64* %22, align 8
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %159, i8* %160, align 2, !tbaa !868
  %161 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %163 = load i8, i8* %162, align 1, !tbaa !868
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %165 = load i8, i8* %164, align 1, !tbaa !868
  %166 = sub i8 %163, %165
  %167 = icmp ugt i8 %163, %165
  %168 = select i1 %167, i8 %166, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 %161, i64* %22, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %168, i8* %169, align 1, !tbaa !868
  %170 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %171 = lshr i64 %95, 8
  %172 = lshr i64 %95, 16
  %173 = lshr i64 %95, 24
  %174 = lshr i64 %95, 32
  %175 = lshr i64 %95, 40
  %176 = lshr i64 %95, 48
  %177 = lshr i64 %95, 56
  %178 = trunc i64 %95 to i8
  %179 = trunc i64 %171 to i8
  %180 = trunc i64 %172 to i8
  %181 = trunc i64 %173 to i8
  %182 = trunc i64 %174 to i8
  %183 = trunc i64 %175 to i8
  %184 = trunc i64 %176 to i8
  %185 = trunc i64 %177 to i8
  store i8 %178, i8* %2, align 1, !tbaa !868
  %186 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %179, i8* %186, align 1, !tbaa !868
  %187 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %180, i8* %187, align 1, !tbaa !868
  %188 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %181, i8* %188, align 1, !tbaa !868
  %189 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %182, i8* %189, align 1, !tbaa !868
  %190 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %183, i8* %190, align 1, !tbaa !868
  %191 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %184, i8* %191, align 1, !tbaa !868
  %192 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %185, i8* %192, align 1, !tbaa !868
  %193 = trunc i64 %170 to i8
  %194 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %193, i8* %194, align 1, !tbaa !868
  %195 = lshr i64 %170, 8
  %196 = trunc i64 %195 to i8
  %197 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %196, i8* %197, align 1, !tbaa !868
  %198 = lshr i64 %170, 16
  %199 = trunc i64 %198 to i8
  %200 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %199, i8* %200, align 1, !tbaa !868
  %201 = lshr i64 %170, 24
  %202 = trunc i64 %201 to i8
  %203 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %202, i8* %203, align 1, !tbaa !868
  %204 = lshr i64 %170, 32
  %205 = trunc i64 %204 to i8
  %206 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %205, i8* %206, align 1, !tbaa !868
  %207 = lshr i64 %170, 40
  %208 = trunc i64 %207 to i8
  %209 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %208, i8* %209, align 1, !tbaa !868
  %210 = lshr i64 %170, 48
  %211 = trunc i64 %210 to i8
  %212 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %211, i8* %212, align 1, !tbaa !868
  %213 = lshr i64 %170, 56
  %214 = trunc i64 %213 to i8
  %215 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %214, i8* %215, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i8
  %93 = sub i8 %92, %18
  %94 = icmp ugt i8 %92, %18
  %95 = select i1 %94, i8 %93, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %96 = bitcast <2 x i64>* %6 to i8*
  store i8 %95, i8* %96, align 16, !tbaa !868
  %97 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %98 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %99 = load i8, i8* %98, align 1, !tbaa !868
  %100 = sub i8 %99, %20
  %101 = icmp ugt i8 %99, %20
  %102 = select i1 %101, i8 %100, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %97, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %102, i8* %103, align 1, !tbaa !868
  %104 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %105 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %106 = load i8, i8* %105, align 2, !tbaa !868
  %107 = sub i8 %106, %22
  %108 = icmp ugt i8 %106, %22
  %109 = select i1 %108, i8 %107, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %104, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %109, i8* %110, align 2, !tbaa !868
  %111 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %112 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %113 = load i8, i8* %112, align 1, !tbaa !868
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %115 = load i8, i8* %114, align 1, !tbaa !868
  %116 = sub i8 %113, %115
  %117 = icmp ugt i8 %113, %115
  %118 = select i1 %117, i8 %116, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %111, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %118, i8* %119, align 1, !tbaa !868
  %120 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %121 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %122 = load i8, i8* %121, align 4, !tbaa !868
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %124 = load i8, i8* %123, align 4, !tbaa !868
  %125 = sub i8 %122, %124
  %126 = icmp ugt i8 %122, %124
  %127 = select i1 %126, i8 %125, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %120, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %127, i8* %128, align 4, !tbaa !868
  %129 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %130 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %131 = load i8, i8* %130, align 1, !tbaa !868
  %132 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %133 = load i8, i8* %132, align 1, !tbaa !868
  %134 = sub i8 %131, %133
  %135 = icmp ugt i8 %131, %133
  %136 = select i1 %135, i8 %134, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %129, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %142 = load i8, i8* %141, align 2, !tbaa !868
  %143 = sub i8 %140, %142
  %144 = icmp ugt i8 %140, %142
  %145 = select i1 %144, i8 %143, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %138, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %146 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %145, i8* %146, align 2, !tbaa !868
  %147 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %148 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %149 = load i8, i8* %148, align 1, !tbaa !868
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %151 = load i8, i8* %150, align 1, !tbaa !868
  %152 = sub i8 %149, %151
  %153 = icmp ugt i8 %149, %151
  %154 = select i1 %153, i8 %152, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %147, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %154, i8* %155, align 1, !tbaa !868
  %156 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  %159 = load i8, i8* %158, align 8, !tbaa !868
  %160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %161 = bitcast i64* %160 to i8*
  %162 = load i8, i8* %161, align 8, !tbaa !868
  %163 = sub i8 %159, %162
  %164 = icmp ugt i8 %159, %162
  %165 = select i1 %164, i8 %163, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %166 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %167 = bitcast i64* %166 to i8*
  store i8 %165, i8* %167, align 8, !tbaa !868
  %168 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %170 = load i8, i8* %169, align 1, !tbaa !868
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %172 = load i8, i8* %171, align 1, !tbaa !868
  %173 = sub i8 %170, %172
  %174 = icmp ugt i8 %170, %172
  %175 = select i1 %174, i8 %173, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %168, i64* %89, align 8
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %175, i8* %176, align 1, !tbaa !868
  %177 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %179 = load i8, i8* %178, align 2, !tbaa !868
  %180 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %181 = load i8, i8* %180, align 2, !tbaa !868
  %182 = sub i8 %179, %181
  %183 = icmp ugt i8 %179, %181
  %184 = select i1 %183, i8 %182, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %177, i64* %89, align 8
  %185 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %184, i8* %185, align 2, !tbaa !868
  %186 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %187 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %188 = load i8, i8* %187, align 1, !tbaa !868
  %189 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %190 = load i8, i8* %189, align 1, !tbaa !868
  %191 = sub i8 %188, %190
  %192 = icmp ugt i8 %188, %190
  %193 = select i1 %192, i8 %191, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %186, i64* %89, align 8
  %194 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %193, i8* %194, align 1, !tbaa !868
  %195 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %196 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %197 = load i8, i8* %196, align 4, !tbaa !868
  %198 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %199 = load i8, i8* %198, align 4, !tbaa !868
  %200 = sub i8 %197, %199
  %201 = icmp ugt i8 %197, %199
  %202 = select i1 %201, i8 %200, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %195, i64* %89, align 8
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %202, i8* %203, align 4, !tbaa !868
  %204 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %206 = load i8, i8* %205, align 1, !tbaa !868
  %207 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %208 = load i8, i8* %207, align 1, !tbaa !868
  %209 = sub i8 %206, %208
  %210 = icmp ugt i8 %206, %208
  %211 = select i1 %210, i8 %209, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %204, i64* %89, align 8
  %212 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %211, i8* %212, align 1, !tbaa !868
  %213 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %214 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %215 = load i8, i8* %214, align 2, !tbaa !868
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %217 = load i8, i8* %216, align 2, !tbaa !868
  %218 = sub i8 %215, %217
  %219 = icmp ugt i8 %215, %217
  %220 = select i1 %219, i8 %218, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %213, i64* %89, align 8
  %221 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %220, i8* %221, align 2, !tbaa !868
  %222 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %224 = load i8, i8* %223, align 1, !tbaa !868
  %225 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %226 = load i8, i8* %225, align 1, !tbaa !868
  %227 = sub i8 %224, %226
  %228 = icmp ugt i8 %224, %226
  %229 = select i1 %228, i8 %227, i8 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 %222, i64* %89, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %229, i8* %230, align 1, !tbaa !868
  %231 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %232 = lshr i64 %156, 8
  %233 = lshr i64 %156, 16
  %234 = lshr i64 %156, 24
  %235 = lshr i64 %156, 32
  %236 = lshr i64 %156, 40
  %237 = lshr i64 %156, 48
  %238 = lshr i64 %156, 56
  %239 = trunc i64 %156 to i8
  %240 = trunc i64 %232 to i8
  %241 = trunc i64 %233 to i8
  %242 = trunc i64 %234 to i8
  %243 = trunc i64 %235 to i8
  %244 = trunc i64 %236 to i8
  %245 = trunc i64 %237 to i8
  %246 = trunc i64 %238 to i8
  store i8 %239, i8* %2, align 1, !tbaa !868
  %247 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %240, i8* %247, align 1, !tbaa !868
  %248 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %241, i8* %248, align 1, !tbaa !868
  %249 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %242, i8* %249, align 1, !tbaa !868
  %250 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %243, i8* %250, align 1, !tbaa !868
  %251 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %244, i8* %251, align 1, !tbaa !868
  %252 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %245, i8* %252, align 1, !tbaa !868
  %253 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %246, i8* %253, align 1, !tbaa !868
  %254 = trunc i64 %231 to i8
  %255 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %254, i8* %255, align 1, !tbaa !868
  %256 = lshr i64 %231, 8
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %257, i8* %258, align 1, !tbaa !868
  %259 = lshr i64 %231, 16
  %260 = trunc i64 %259 to i8
  %261 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %260, i8* %261, align 1, !tbaa !868
  %262 = lshr i64 %231, 24
  %263 = trunc i64 %262 to i8
  %264 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %263, i8* %264, align 1, !tbaa !868
  %265 = lshr i64 %231, 32
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %266, i8* %267, align 1, !tbaa !868
  %268 = lshr i64 %231, 40
  %269 = trunc i64 %268 to i8
  %270 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %269, i8* %270, align 1, !tbaa !868
  %271 = lshr i64 %231, 48
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %272, i8* %273, align 1, !tbaa !868
  %274 = lshr i64 %231, 56
  %275 = trunc i64 %274 to i8
  %276 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %275, i8* %276, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = sub i16 %9, %10
  %12 = icmp ugt i16 %9, %10
  %13 = select i1 %12, i16 %11, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i16*
  store i16 %13, i16* %14, align 8, !tbaa !869
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %16 = lshr i64 %3, 16
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %4, 16
  %19 = trunc i64 %18 to i16
  %20 = sub i16 %17, %19
  %21 = icmp ugt i16 %17, %19
  %22 = select i1 %21, i16 %20, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %15, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %25 = lshr i64 %3, 32
  %26 = trunc i64 %25 to i16
  %27 = lshr i64 %4, 32
  %28 = trunc i64 %27 to i16
  %29 = sub i16 %26, %28
  %30 = icmp ugt i16 %26, %28
  %31 = select i1 %30, i16 %29, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %24, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %31, i16* %32, align 4, !tbaa !869
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %34 = lshr i64 %3, 48
  %35 = trunc i64 %34 to i16
  %36 = lshr i64 %4, 48
  %37 = trunc i64 %36 to i16
  %38 = sub i16 %35, %37
  %39 = icmp ugt i16 %35, %37
  %40 = select i1 %39, i16 %38, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %33, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %40, i16* %41, align 2, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1, !tbaa !869
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1, !tbaa !869
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1, !tbaa !869
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = trunc i64 %3 to i16
  %17 = sub i16 %16, %7
  %18 = icmp ugt i16 %16, %7
  %19 = select i1 %18, i16 %17, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %20 = bitcast i64* %6 to i16*
  store i16 %19, i16* %20, align 8, !tbaa !869
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %22 = lshr i64 %3, 16
  %23 = trunc i64 %22 to i16
  %24 = sub i16 %23, %9
  %25 = icmp ugt i16 %23, %9
  %26 = select i1 %25, i16 %24, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %21, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %26, i16* %27, align 2, !tbaa !869
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %29 = lshr i64 %3, 32
  %30 = trunc i64 %29 to i16
  %31 = sub i16 %30, %11
  %32 = icmp ugt i16 %30, %11
  %33 = select i1 %32, i16 %31, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %28, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %33, i16* %34, align 4, !tbaa !869
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %36 = lshr i64 %3, 48
  %37 = trunc i64 %36 to i16
  %38 = sub i16 %37, %13
  %39 = icmp ugt i16 %37, %13
  %40 = select i1 %39, i16 %38, i16 0
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %35, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %40, i16* %41, align 2, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1, !tbaa !869
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1, !tbaa !869
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1, !tbaa !869
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = sub i16 %25, %27
  %29 = icmp ugt i16 %25, %27
  %30 = select i1 %29, i16 %28, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i16*
  store i16 %30, i16* %31, align 16, !tbaa !869
  %32 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %33 = lshr i64 %24, 16
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %26, 16
  %36 = trunc i64 %35 to i16
  %37 = sub i16 %34, %36
  %38 = icmp ugt i16 %34, %36
  %39 = select i1 %38, i16 %37, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %32, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %39, i16* %40, align 2, !tbaa !869
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = lshr i64 %24, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %26, 32
  %45 = trunc i64 %44 to i16
  %46 = sub i16 %43, %45
  %47 = icmp ugt i16 %43, %45
  %48 = select i1 %47, i16 %46, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %48, i16* %49, align 4, !tbaa !869
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = lshr i64 %24, 48
  %52 = trunc i64 %51 to i16
  %53 = lshr i64 %26, 48
  %54 = trunc i64 %53 to i16
  %55 = sub i16 %52, %54
  %56 = icmp ugt i16 %52, %54
  %57 = select i1 %56, i16 %55, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %57, i16* %58, align 2, !tbaa !869
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8, !tbaa !869
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %64 = bitcast i64* %63 to i16*
  %65 = load i16, i16* %64, align 8, !tbaa !869
  %66 = sub i16 %62, %65
  %67 = icmp ugt i16 %62, %65
  %68 = select i1 %67, i16 %66, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  store i16 %68, i16* %70, align 8, !tbaa !869
  %71 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %73 = load i16, i16* %72, align 2, !tbaa !869
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %75 = load i16, i16* %74, align 2, !tbaa !869
  %76 = sub i16 %73, %75
  %77 = icmp ugt i16 %73, %75
  %78 = select i1 %77, i16 %76, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %71, i64* %22, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %78, i16* %79, align 2, !tbaa !869
  %80 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %82 = load i16, i16* %81, align 4, !tbaa !869
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %84 = load i16, i16* %83, align 4, !tbaa !869
  %85 = sub i16 %82, %84
  %86 = icmp ugt i16 %82, %84
  %87 = select i1 %86, i16 %85, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %80, i64* %22, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %87, i16* %88, align 4, !tbaa !869
  %89 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %91 = load i16, i16* %90, align 2, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = sub i16 %91, %93
  %95 = icmp ugt i16 %91, %93
  %96 = select i1 %95, i16 %94, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %89, i64* %22, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %96, i16* %97, align 2, !tbaa !869
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = lshr i64 %59, 16
  %100 = lshr i64 %59, 32
  %101 = lshr i64 %59, 48
  %102 = trunc i64 %59 to i16
  %103 = trunc i64 %99 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = bitcast i8* %2 to i16*
  store i16 %102, i16* %106, align 1, !tbaa !869
  %107 = getelementptr inbounds i8, i8* %2, i64 2
  %108 = bitcast i8* %107 to i16*
  store i16 %103, i16* %108, align 1, !tbaa !869
  %109 = getelementptr inbounds i8, i8* %2, i64 4
  %110 = bitcast i8* %109 to i16*
  store i16 %104, i16* %110, align 1, !tbaa !869
  %111 = getelementptr inbounds i8, i8* %2, i64 6
  %112 = bitcast i8* %111 to i16*
  store i16 %105, i16* %112, align 1, !tbaa !869
  %113 = trunc i64 %98 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 8
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1, !tbaa !869
  %116 = lshr i64 %98, 16
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 10
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1, !tbaa !869
  %120 = lshr i64 %98, 32
  %121 = trunc i64 %120 to i16
  %122 = getelementptr inbounds i8, i8* %2, i64 12
  %123 = bitcast i8* %122 to i16*
  store i16 %121, i16* %123, align 1, !tbaa !869
  %124 = lshr i64 %98, 48
  %125 = trunc i64 %124 to i16
  %126 = getelementptr inbounds i8, i8* %2, i64 14
  %127 = bitcast i8* %126 to i16*
  store i16 %125, i16* %127, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSUBUSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = sub i16 %56, %18
  %58 = icmp ugt i16 %56, %18
  %59 = select i1 %58, i16 %57, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %60 = bitcast <2 x i64>* %6 to i16*
  store i16 %59, i16* %60, align 16, !tbaa !869
  %61 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %62 = lshr i64 %55, 16
  %63 = trunc i64 %62 to i16
  %64 = sub i16 %63, %20
  %65 = icmp ugt i16 %63, %20
  %66 = select i1 %65, i16 %64, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %61, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %66, i16* %67, align 2, !tbaa !869
  %68 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %69 = lshr i64 %55, 32
  %70 = trunc i64 %69 to i16
  %71 = sub i16 %70, %22
  %72 = icmp ugt i16 %70, %22
  %73 = select i1 %72, i16 %71, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %68, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %73, i16* %74, align 4, !tbaa !869
  %75 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %77 = load i16, i16* %76, align 2, !tbaa !869
  %78 = sub i16 %77, %24
  %79 = icmp ugt i16 %77, %24
  %80 = select i1 %79, i16 %78, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %75, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %80, i16* %81, align 2, !tbaa !869
  %82 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  %85 = load i16, i16* %84, align 8, !tbaa !869
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %87 = bitcast i64* %86 to i16*
  %88 = load i16, i16* %87, align 8, !tbaa !869
  %89 = sub i16 %85, %88
  %90 = icmp ugt i16 %85, %88
  %91 = select i1 %90, i16 %89, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %82, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %93 = bitcast i64* %92 to i16*
  store i16 %91, i16* %93, align 8, !tbaa !869
  %94 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %96 = load i16, i16* %95, align 2, !tbaa !869
  %97 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %98 = load i16, i16* %97, align 2, !tbaa !869
  %99 = sub i16 %96, %98
  %100 = icmp ugt i16 %96, %98
  %101 = select i1 %100, i16 %99, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %82, i64* %52, align 16
  store i64 %94, i64* %53, align 8
  %102 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %101, i16* %102, align 2, !tbaa !869
  %103 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %104 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %105 = load i16, i16* %104, align 4, !tbaa !869
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %107 = load i16, i16* %106, align 4, !tbaa !869
  %108 = sub i16 %105, %107
  %109 = icmp ugt i16 %105, %107
  %110 = select i1 %109, i16 %108, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %82, i64* %52, align 16
  store i64 %103, i64* %53, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %110, i16* %111, align 4, !tbaa !869
  %112 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %114 = load i16, i16* %113, align 2, !tbaa !869
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %116 = load i16, i16* %115, align 2, !tbaa !869
  %117 = sub i16 %114, %116
  %118 = icmp ugt i16 %114, %116
  %119 = select i1 %118, i16 %117, i16 0
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %82, i64* %52, align 16
  store i64 %112, i64* %53, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %119, i16* %120, align 2, !tbaa !869
  %121 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %122 = lshr i64 %82, 16
  %123 = lshr i64 %82, 32
  %124 = lshr i64 %82, 48
  %125 = trunc i64 %82 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1, !tbaa !869
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1, !tbaa !869
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1, !tbaa !869
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1, !tbaa !869
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1, !tbaa !869
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i16
  %16 = trunc i64 %4 to i16
  %17 = and i16 %15, 255
  %18 = and i16 %16, 255
  %19 = add nuw nsw i16 %17, 1
  %20 = add nuw nsw i16 %19, %18
  %21 = lshr i16 %20, 1
  %22 = trunc i16 %21 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i8*
  store i8 %22, i8* %23, align 8, !tbaa !868
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %25 = lshr i64 %3, 8
  %26 = trunc i64 %25 to i16
  %27 = lshr i64 %4, 8
  %28 = trunc i64 %27 to i16
  %29 = and i16 %26, 255
  %30 = and i16 %28, 255
  %31 = add nuw nsw i16 %29, 1
  %32 = add nuw nsw i16 %31, %30
  %33 = lshr i16 %32, 1
  %34 = trunc i16 %33 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %24, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %34, i8* %35, align 1, !tbaa !868
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = lshr i64 %3, 16
  %38 = trunc i64 %37 to i16
  %39 = lshr i64 %4, 16
  %40 = trunc i64 %39 to i16
  %41 = and i16 %38, 255
  %42 = and i16 %40, 255
  %43 = add nuw nsw i16 %41, 1
  %44 = add nuw nsw i16 %43, %42
  %45 = lshr i16 %44, 1
  %46 = trunc i16 %45 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %46, i8* %47, align 2, !tbaa !868
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %49 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %50 = load i8, i8* %49, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %52 = load i8, i8* %51, align 1, !tbaa !868
  %53 = zext i8 %50 to i16
  %54 = zext i8 %52 to i16
  %55 = add nuw nsw i16 %53, 1
  %56 = add nuw nsw i16 %55, %54
  %57 = lshr i16 %56, 1
  %58 = trunc i16 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %48, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %58, i8* %59, align 1, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %62 = load i8, i8* %61, align 4, !tbaa !868
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %64 = load i8, i8* %63, align 4, !tbaa !868
  %65 = zext i8 %62 to i16
  %66 = zext i8 %64 to i16
  %67 = add nuw nsw i16 %65, 1
  %68 = add nuw nsw i16 %67, %66
  %69 = lshr i16 %68, 1
  %70 = trunc i16 %69 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %70, i8* %71, align 4, !tbaa !868
  %72 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %73 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %74 = load i8, i8* %73, align 1, !tbaa !868
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %76 = load i8, i8* %75, align 1, !tbaa !868
  %77 = zext i8 %74 to i16
  %78 = zext i8 %76 to i16
  %79 = add nuw nsw i16 %77, 1
  %80 = add nuw nsw i16 %79, %78
  %81 = lshr i16 %80, 1
  %82 = trunc i16 %81 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %72, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %82, i8* %83, align 1, !tbaa !868
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %86 = load i8, i8* %85, align 2, !tbaa !868
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %88 = load i8, i8* %87, align 2, !tbaa !868
  %89 = zext i8 %86 to i16
  %90 = zext i8 %88 to i16
  %91 = add nuw nsw i16 %89, 1
  %92 = add nuw nsw i16 %91, %90
  %93 = lshr i16 %92, 1
  %94 = trunc i16 %93 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %84, i64* %6, align 8
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %94, i8* %95, align 2, !tbaa !868
  %96 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %98 = load i8, i8* %97, align 1, !tbaa !868
  %99 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %100 = load i8, i8* %99, align 1, !tbaa !868
  %101 = zext i8 %98 to i16
  %102 = zext i8 %100 to i16
  %103 = add nuw nsw i16 %101, 1
  %104 = add nuw nsw i16 %103, %102
  %105 = lshr i16 %104, 1
  %106 = trunc i16 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %96, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %109 = lshr i64 %108, 8
  %110 = lshr i64 %108, 16
  %111 = lshr i64 %108, 24
  %112 = lshr i64 %108, 32
  %113 = lshr i64 %108, 40
  %114 = lshr i64 %108, 48
  %115 = lshr i64 %108, 56
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = bitcast i64* %2 to [8 x i8]*
  %125 = bitcast i64* %2 to i8*
  store i8 %116, i8* %125, align 1, !tbaa !868
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  store i8 %117, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  store i8 %118, i8* %127, align 1, !tbaa !868
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  store i8 %119, i8* %128, align 1, !tbaa !868
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  store i8 %120, i8* %129, align 1, !tbaa !868
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  store i8 %121, i8* %130, align 1, !tbaa !868
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  store i8 %122, i8* %131, align 1, !tbaa !868
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  store i8 %123, i8* %132, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i16
  %53 = and i16 %52, 255
  %54 = zext i8 %13 to i16
  %55 = add nuw nsw i16 %53, 1
  %56 = add nuw nsw i16 %55, %54
  %57 = lshr i16 %56, 1
  %58 = trunc i16 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %59 = bitcast i64* %6 to i8*
  store i8 %58, i8* %59, align 8, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %61 = lshr i64 %3, 8
  %62 = trunc i64 %61 to i16
  %63 = zext i8 %15 to i16
  %64 = and i16 %62, 255
  %65 = add nuw nsw i16 %64, 1
  %66 = add nuw nsw i16 %65, %63
  %67 = lshr i16 %66, 1
  %68 = trunc i16 %67 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %60, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %68, i8* %69, align 1, !tbaa !868
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %72 = load i8, i8* %71, align 2, !tbaa !868
  %73 = zext i8 %17 to i16
  %74 = zext i8 %72 to i16
  %75 = add nuw nsw i16 %74, 1
  %76 = add nuw nsw i16 %75, %73
  %77 = lshr i16 %76, 1
  %78 = trunc i16 %77 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %70, i64* %6, align 8
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %78, i8* %79, align 2, !tbaa !868
  %80 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %82 = load i8, i8* %81, align 1, !tbaa !868
  %83 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %84 = load i8, i8* %83, align 1, !tbaa !868
  %85 = zext i8 %82 to i16
  %86 = zext i8 %84 to i16
  %87 = add nuw nsw i16 %85, 1
  %88 = add nuw nsw i16 %87, %86
  %89 = lshr i16 %88, 1
  %90 = trunc i16 %89 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %80, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %90, i8* %91, align 1, !tbaa !868
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %94 = load i8, i8* %93, align 4, !tbaa !868
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %96 = load i8, i8* %95, align 4, !tbaa !868
  %97 = zext i8 %94 to i16
  %98 = zext i8 %96 to i16
  %99 = add nuw nsw i16 %97, 1
  %100 = add nuw nsw i16 %99, %98
  %101 = lshr i16 %100, 1
  %102 = trunc i16 %101 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %92, i64* %6, align 8
  %103 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %102, i8* %103, align 4, !tbaa !868
  %104 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %105 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %106 = load i8, i8* %105, align 1, !tbaa !868
  %107 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %108 = load i8, i8* %107, align 1, !tbaa !868
  %109 = zext i8 %106 to i16
  %110 = zext i8 %108 to i16
  %111 = add nuw nsw i16 %109, 1
  %112 = add nuw nsw i16 %111, %110
  %113 = lshr i16 %112, 1
  %114 = trunc i16 %113 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %104, i64* %6, align 8
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %117 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %118 = load i8, i8* %117, align 2, !tbaa !868
  %119 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %120 = load i8, i8* %119, align 2, !tbaa !868
  %121 = zext i8 %118 to i16
  %122 = zext i8 %120 to i16
  %123 = add nuw nsw i16 %121, 1
  %124 = add nuw nsw i16 %123, %122
  %125 = lshr i16 %124, 1
  %126 = trunc i16 %125 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %116, i64* %6, align 8
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %126, i8* %127, align 2, !tbaa !868
  %128 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %129 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %130 = load i8, i8* %129, align 1, !tbaa !868
  %131 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %132 = load i8, i8* %131, align 1, !tbaa !868
  %133 = zext i8 %130 to i16
  %134 = zext i8 %132 to i16
  %135 = add nuw nsw i16 %133, 1
  %136 = add nuw nsw i16 %135, %134
  %137 = lshr i16 %136, 1
  %138 = trunc i16 %137 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %128, i64* %6, align 8
  %139 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %138, i8* %139, align 1, !tbaa !868
  %140 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %141 = lshr i64 %140, 8
  %142 = lshr i64 %140, 16
  %143 = lshr i64 %140, 24
  %144 = lshr i64 %140, 32
  %145 = lshr i64 %140, 40
  %146 = lshr i64 %140, 48
  %147 = lshr i64 %140, 56
  %148 = trunc i64 %140 to i8
  %149 = trunc i64 %141 to i8
  %150 = trunc i64 %142 to i8
  %151 = trunc i64 %143 to i8
  %152 = trunc i64 %144 to i8
  %153 = trunc i64 %145 to i8
  %154 = trunc i64 %146 to i8
  %155 = trunc i64 %147 to i8
  %156 = bitcast i64* %2 to [8 x i8]*
  %157 = bitcast i64* %2 to i8*
  store i8 %148, i8* %157, align 1, !tbaa !868
  %158 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 1
  store i8 %149, i8* %158, align 1, !tbaa !868
  %159 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 2
  store i8 %150, i8* %159, align 1, !tbaa !868
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 3
  store i8 %151, i8* %160, align 1, !tbaa !868
  %161 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 4
  store i8 %152, i8* %161, align 1, !tbaa !868
  %162 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 5
  store i8 %153, i8* %162, align 1, !tbaa !868
  %163 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 6
  store i8 %154, i8* %163, align 1, !tbaa !868
  %164 = getelementptr inbounds [8 x i8], [8 x i8]* %156, i64 0, i64 7
  store i8 %155, i8* %164, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = and i16 %25, 255
  %29 = and i16 %27, 255
  %30 = add nuw nsw i16 %28, 1
  %31 = add nuw nsw i16 %30, %29
  %32 = lshr i16 %31, 1
  %33 = trunc i16 %32 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64>* %6 to i8*
  store i8 %33, i8* %34, align 16, !tbaa !868
  %35 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %36 = lshr i64 %24, 8
  %37 = trunc i64 %36 to i16
  %38 = lshr i64 %26, 8
  %39 = trunc i64 %38 to i16
  %40 = and i16 %37, 255
  %41 = and i16 %39, 255
  %42 = add nuw nsw i16 %40, 1
  %43 = add nuw nsw i16 %42, %41
  %44 = lshr i16 %43, 1
  %45 = trunc i16 %44 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %35, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %45, i8* %46, align 1, !tbaa !868
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 16
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 16
  %51 = trunc i64 %50 to i16
  %52 = and i16 %49, 255
  %53 = and i16 %51, 255
  %54 = add nuw nsw i16 %52, 1
  %55 = add nuw nsw i16 %54, %53
  %56 = lshr i16 %55, 1
  %57 = trunc i16 %56 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %57, i8* %58, align 2, !tbaa !868
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %61 = load i8, i8* %60, align 1, !tbaa !868
  %62 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %63 = load i8, i8* %62, align 1, !tbaa !868
  %64 = zext i8 %61 to i16
  %65 = zext i8 %63 to i16
  %66 = add nuw nsw i16 %64, 1
  %67 = add nuw nsw i16 %66, %65
  %68 = lshr i16 %67, 1
  %69 = trunc i16 %68 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %73 = load i8, i8* %72, align 4, !tbaa !868
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %75 = load i8, i8* %74, align 4, !tbaa !868
  %76 = zext i8 %73 to i16
  %77 = zext i8 %75 to i16
  %78 = add nuw nsw i16 %76, 1
  %79 = add nuw nsw i16 %78, %77
  %80 = lshr i16 %79, 1
  %81 = trunc i16 %80 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %81, i8* %82, align 4, !tbaa !868
  %83 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %85 = load i8, i8* %84, align 1, !tbaa !868
  %86 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %87 = load i8, i8* %86, align 1, !tbaa !868
  %88 = zext i8 %85 to i16
  %89 = zext i8 %87 to i16
  %90 = add nuw nsw i16 %88, 1
  %91 = add nuw nsw i16 %90, %89
  %92 = lshr i16 %91, 1
  %93 = trunc i16 %92 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %83, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %93, i8* %94, align 1, !tbaa !868
  %95 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %96 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %97 = load i8, i8* %96, align 2, !tbaa !868
  %98 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %99 = load i8, i8* %98, align 2, !tbaa !868
  %100 = zext i8 %97 to i16
  %101 = zext i8 %99 to i16
  %102 = add nuw nsw i16 %100, 1
  %103 = add nuw nsw i16 %102, %101
  %104 = lshr i16 %103, 1
  %105 = trunc i16 %104 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %95, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %106 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %105, i8* %106, align 2, !tbaa !868
  %107 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %109 = load i8, i8* %108, align 1, !tbaa !868
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %111 = load i8, i8* %110, align 1, !tbaa !868
  %112 = zext i8 %109 to i16
  %113 = zext i8 %111 to i16
  %114 = add nuw nsw i16 %112, 1
  %115 = add nuw nsw i16 %114, %113
  %116 = lshr i16 %115, 1
  %117 = trunc i16 %116 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %107, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %117, i8* %118, align 1, !tbaa !868
  %119 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %120 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8, !tbaa !868
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %124 = bitcast i64* %123 to i8*
  %125 = load i8, i8* %124, align 8, !tbaa !868
  %126 = zext i8 %122 to i16
  %127 = zext i8 %125 to i16
  %128 = add nuw nsw i16 %126, 1
  %129 = add nuw nsw i16 %128, %127
  %130 = lshr i16 %129, 1
  %131 = trunc i16 %130 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %133 = bitcast i64* %132 to i8*
  store i8 %131, i8* %133, align 8, !tbaa !868
  %134 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %136 = load i8, i8* %135, align 1, !tbaa !868
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %138 = load i8, i8* %137, align 1, !tbaa !868
  %139 = zext i8 %136 to i16
  %140 = zext i8 %138 to i16
  %141 = add nuw nsw i16 %139, 1
  %142 = add nuw nsw i16 %141, %140
  %143 = lshr i16 %142, 1
  %144 = trunc i16 %143 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %134, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %144, i8* %145, align 1, !tbaa !868
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %148 = load i8, i8* %147, align 2, !tbaa !868
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %150 = load i8, i8* %149, align 2, !tbaa !868
  %151 = zext i8 %148 to i16
  %152 = zext i8 %150 to i16
  %153 = add nuw nsw i16 %151, 1
  %154 = add nuw nsw i16 %153, %152
  %155 = lshr i16 %154, 1
  %156 = trunc i16 %155 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %156, i8* %157, align 2, !tbaa !868
  %158 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %160 = load i8, i8* %159, align 1, !tbaa !868
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %162 = load i8, i8* %161, align 1, !tbaa !868
  %163 = zext i8 %160 to i16
  %164 = zext i8 %162 to i16
  %165 = add nuw nsw i16 %163, 1
  %166 = add nuw nsw i16 %165, %164
  %167 = lshr i16 %166, 1
  %168 = trunc i16 %167 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %158, i64* %22, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %168, i8* %169, align 1, !tbaa !868
  %170 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %172 = load i8, i8* %171, align 4, !tbaa !868
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %174 = load i8, i8* %173, align 4, !tbaa !868
  %175 = zext i8 %172 to i16
  %176 = zext i8 %174 to i16
  %177 = add nuw nsw i16 %175, 1
  %178 = add nuw nsw i16 %177, %176
  %179 = lshr i16 %178, 1
  %180 = trunc i16 %179 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %170, i64* %22, align 8
  %181 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %180, i8* %181, align 4, !tbaa !868
  %182 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %183 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %184 = load i8, i8* %183, align 1, !tbaa !868
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %186 = load i8, i8* %185, align 1, !tbaa !868
  %187 = zext i8 %184 to i16
  %188 = zext i8 %186 to i16
  %189 = add nuw nsw i16 %187, 1
  %190 = add nuw nsw i16 %189, %188
  %191 = lshr i16 %190, 1
  %192 = trunc i16 %191 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %182, i64* %22, align 8
  %193 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %192, i8* %193, align 1, !tbaa !868
  %194 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %195 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %196 = load i8, i8* %195, align 2, !tbaa !868
  %197 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %198 = load i8, i8* %197, align 2, !tbaa !868
  %199 = zext i8 %196 to i16
  %200 = zext i8 %198 to i16
  %201 = add nuw nsw i16 %199, 1
  %202 = add nuw nsw i16 %201, %200
  %203 = lshr i16 %202, 1
  %204 = trunc i16 %203 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %194, i64* %22, align 8
  %205 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %204, i8* %205, align 2, !tbaa !868
  %206 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %207 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %208 = load i8, i8* %207, align 1, !tbaa !868
  %209 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %210 = load i8, i8* %209, align 1, !tbaa !868
  %211 = zext i8 %208 to i16
  %212 = zext i8 %210 to i16
  %213 = add nuw nsw i16 %211, 1
  %214 = add nuw nsw i16 %213, %212
  %215 = lshr i16 %214, 1
  %216 = trunc i16 %215 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %119, i64* %21, align 16
  store i64 %206, i64* %22, align 8
  %217 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %216, i8* %217, align 1, !tbaa !868
  %218 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %219 = lshr i64 %119, 8
  %220 = lshr i64 %119, 16
  %221 = lshr i64 %119, 24
  %222 = lshr i64 %119, 32
  %223 = lshr i64 %119, 40
  %224 = lshr i64 %119, 48
  %225 = lshr i64 %119, 56
  %226 = trunc i64 %119 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  %230 = trunc i64 %222 to i8
  %231 = trunc i64 %223 to i8
  %232 = trunc i64 %224 to i8
  %233 = trunc i64 %225 to i8
  store i8 %226, i8* %2, align 1, !tbaa !868
  %234 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %227, i8* %234, align 1, !tbaa !868
  %235 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %228, i8* %235, align 1, !tbaa !868
  %236 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %229, i8* %236, align 1, !tbaa !868
  %237 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %230, i8* %237, align 1, !tbaa !868
  %238 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %231, i8* %238, align 1, !tbaa !868
  %239 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %232, i8* %239, align 1, !tbaa !868
  %240 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %233, i8* %240, align 1, !tbaa !868
  %241 = trunc i64 %218 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %241, i8* %242, align 1, !tbaa !868
  %243 = lshr i64 %218, 8
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %244, i8* %245, align 1, !tbaa !868
  %246 = lshr i64 %218, 16
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %247, i8* %248, align 1, !tbaa !868
  %249 = lshr i64 %218, 24
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %250, i8* %251, align 1, !tbaa !868
  %252 = lshr i64 %218, 32
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %253, i8* %254, align 1, !tbaa !868
  %255 = lshr i64 %218, 40
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %256, i8* %257, align 1, !tbaa !868
  %258 = lshr i64 %218, 48
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %259, i8* %260, align 1, !tbaa !868
  %261 = lshr i64 %218, 56
  %262 = trunc i64 %261 to i8
  %263 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %262, i8* %263, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i16
  %93 = and i16 %92, 255
  %94 = zext i8 %18 to i16
  %95 = add nuw nsw i16 %93, 1
  %96 = add nuw nsw i16 %95, %94
  %97 = lshr i16 %96, 1
  %98 = trunc i16 %97 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %99 = bitcast <2 x i64>* %6 to i8*
  store i8 %98, i8* %99, align 16, !tbaa !868
  %100 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = zext i8 %20 to i16
  %104 = zext i8 %102 to i16
  %105 = add nuw nsw i16 %104, 1
  %106 = add nuw nsw i16 %105, %103
  %107 = lshr i16 %106, 1
  %108 = trunc i16 %107 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %100, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %108, i8* %109, align 1, !tbaa !868
  %110 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %112 = load i8, i8* %111, align 2, !tbaa !868
  %113 = zext i8 %22 to i16
  %114 = zext i8 %112 to i16
  %115 = add nuw nsw i16 %114, 1
  %116 = add nuw nsw i16 %115, %113
  %117 = lshr i16 %116, 1
  %118 = trunc i16 %117 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %110, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %118, i8* %119, align 2, !tbaa !868
  %120 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %121 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %122 = load i8, i8* %121, align 1, !tbaa !868
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %124 = load i8, i8* %123, align 1, !tbaa !868
  %125 = zext i8 %122 to i16
  %126 = zext i8 %124 to i16
  %127 = add nuw nsw i16 %125, 1
  %128 = add nuw nsw i16 %127, %126
  %129 = lshr i16 %128, 1
  %130 = trunc i16 %129 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %120, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %130, i8* %131, align 1, !tbaa !868
  %132 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %134 = load i8, i8* %133, align 4, !tbaa !868
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %136 = load i8, i8* %135, align 4, !tbaa !868
  %137 = zext i8 %134 to i16
  %138 = zext i8 %136 to i16
  %139 = add nuw nsw i16 %137, 1
  %140 = add nuw nsw i16 %139, %138
  %141 = lshr i16 %140, 1
  %142 = trunc i16 %141 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %132, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %142, i8* %143, align 4, !tbaa !868
  %144 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %145 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %146 = load i8, i8* %145, align 1, !tbaa !868
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %148 = load i8, i8* %147, align 1, !tbaa !868
  %149 = zext i8 %146 to i16
  %150 = zext i8 %148 to i16
  %151 = add nuw nsw i16 %149, 1
  %152 = add nuw nsw i16 %151, %150
  %153 = lshr i16 %152, 1
  %154 = trunc i16 %153 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %144, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %154, i8* %155, align 1, !tbaa !868
  %156 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %158 = load i8, i8* %157, align 2, !tbaa !868
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %160 = load i8, i8* %159, align 2, !tbaa !868
  %161 = zext i8 %158 to i16
  %162 = zext i8 %160 to i16
  %163 = add nuw nsw i16 %161, 1
  %164 = add nuw nsw i16 %163, %162
  %165 = lshr i16 %164, 1
  %166 = trunc i16 %165 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %156, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %167 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %166, i8* %167, align 2, !tbaa !868
  %168 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %170 = load i8, i8* %169, align 1, !tbaa !868
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %172 = load i8, i8* %171, align 1, !tbaa !868
  %173 = zext i8 %170 to i16
  %174 = zext i8 %172 to i16
  %175 = add nuw nsw i16 %173, 1
  %176 = add nuw nsw i16 %175, %174
  %177 = lshr i16 %176, 1
  %178 = trunc i16 %177 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %168, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %179 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %178, i8* %179, align 1, !tbaa !868
  %180 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %181 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %182 = bitcast i64* %181 to i8*
  %183 = load i8, i8* %182, align 8, !tbaa !868
  %184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %185 = bitcast i64* %184 to i8*
  %186 = load i8, i8* %185, align 8, !tbaa !868
  %187 = zext i8 %183 to i16
  %188 = zext i8 %186 to i16
  %189 = add nuw nsw i16 %187, 1
  %190 = add nuw nsw i16 %189, %188
  %191 = lshr i16 %190, 1
  %192 = trunc i16 %191 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %193 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %194 = bitcast i64* %193 to i8*
  store i8 %192, i8* %194, align 8, !tbaa !868
  %195 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %196 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %197 = load i8, i8* %196, align 1, !tbaa !868
  %198 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %199 = load i8, i8* %198, align 1, !tbaa !868
  %200 = zext i8 %197 to i16
  %201 = zext i8 %199 to i16
  %202 = add nuw nsw i16 %200, 1
  %203 = add nuw nsw i16 %202, %201
  %204 = lshr i16 %203, 1
  %205 = trunc i16 %204 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %195, i64* %89, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %205, i8* %206, align 1, !tbaa !868
  %207 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %209 = load i8, i8* %208, align 2, !tbaa !868
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %211 = load i8, i8* %210, align 2, !tbaa !868
  %212 = zext i8 %209 to i16
  %213 = zext i8 %211 to i16
  %214 = add nuw nsw i16 %212, 1
  %215 = add nuw nsw i16 %214, %213
  %216 = lshr i16 %215, 1
  %217 = trunc i16 %216 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %207, i64* %89, align 8
  %218 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %217, i8* %218, align 2, !tbaa !868
  %219 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %220 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %221 = load i8, i8* %220, align 1, !tbaa !868
  %222 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %223 = load i8, i8* %222, align 1, !tbaa !868
  %224 = zext i8 %221 to i16
  %225 = zext i8 %223 to i16
  %226 = add nuw nsw i16 %224, 1
  %227 = add nuw nsw i16 %226, %225
  %228 = lshr i16 %227, 1
  %229 = trunc i16 %228 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %219, i64* %89, align 8
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %229, i8* %230, align 1, !tbaa !868
  %231 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %232 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %233 = load i8, i8* %232, align 4, !tbaa !868
  %234 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %235 = load i8, i8* %234, align 4, !tbaa !868
  %236 = zext i8 %233 to i16
  %237 = zext i8 %235 to i16
  %238 = add nuw nsw i16 %236, 1
  %239 = add nuw nsw i16 %238, %237
  %240 = lshr i16 %239, 1
  %241 = trunc i16 %240 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %231, i64* %89, align 8
  %242 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %241, i8* %242, align 4, !tbaa !868
  %243 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %244 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %245 = load i8, i8* %244, align 1, !tbaa !868
  %246 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %247 = load i8, i8* %246, align 1, !tbaa !868
  %248 = zext i8 %245 to i16
  %249 = zext i8 %247 to i16
  %250 = add nuw nsw i16 %248, 1
  %251 = add nuw nsw i16 %250, %249
  %252 = lshr i16 %251, 1
  %253 = trunc i16 %252 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %243, i64* %89, align 8
  %254 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %253, i8* %254, align 1, !tbaa !868
  %255 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %256 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %257 = load i8, i8* %256, align 2, !tbaa !868
  %258 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %259 = load i8, i8* %258, align 2, !tbaa !868
  %260 = zext i8 %257 to i16
  %261 = zext i8 %259 to i16
  %262 = add nuw nsw i16 %260, 1
  %263 = add nuw nsw i16 %262, %261
  %264 = lshr i16 %263, 1
  %265 = trunc i16 %264 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %255, i64* %89, align 8
  %266 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %265, i8* %266, align 2, !tbaa !868
  %267 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %268 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %269 = load i8, i8* %268, align 1, !tbaa !868
  %270 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %271 = load i8, i8* %270, align 1, !tbaa !868
  %272 = zext i8 %269 to i16
  %273 = zext i8 %271 to i16
  %274 = add nuw nsw i16 %272, 1
  %275 = add nuw nsw i16 %274, %273
  %276 = lshr i16 %275, 1
  %277 = trunc i16 %276 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %180, i64* %88, align 16
  store i64 %267, i64* %89, align 8
  %278 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %277, i8* %278, align 1, !tbaa !868
  %279 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %280 = lshr i64 %180, 8
  %281 = lshr i64 %180, 16
  %282 = lshr i64 %180, 24
  %283 = lshr i64 %180, 32
  %284 = lshr i64 %180, 40
  %285 = lshr i64 %180, 48
  %286 = lshr i64 %180, 56
  %287 = trunc i64 %180 to i8
  %288 = trunc i64 %280 to i8
  %289 = trunc i64 %281 to i8
  %290 = trunc i64 %282 to i8
  %291 = trunc i64 %283 to i8
  %292 = trunc i64 %284 to i8
  %293 = trunc i64 %285 to i8
  %294 = trunc i64 %286 to i8
  store i8 %287, i8* %2, align 1, !tbaa !868
  %295 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %288, i8* %295, align 1, !tbaa !868
  %296 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %289, i8* %296, align 1, !tbaa !868
  %297 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %290, i8* %297, align 1, !tbaa !868
  %298 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %291, i8* %298, align 1, !tbaa !868
  %299 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %292, i8* %299, align 1, !tbaa !868
  %300 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %293, i8* %300, align 1, !tbaa !868
  %301 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %294, i8* %301, align 1, !tbaa !868
  %302 = trunc i64 %279 to i8
  %303 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %302, i8* %303, align 1, !tbaa !868
  %304 = lshr i64 %279, 8
  %305 = trunc i64 %304 to i8
  %306 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %305, i8* %306, align 1, !tbaa !868
  %307 = lshr i64 %279, 16
  %308 = trunc i64 %307 to i8
  %309 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %308, i8* %309, align 1, !tbaa !868
  %310 = lshr i64 %279, 24
  %311 = trunc i64 %310 to i8
  %312 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %311, i8* %312, align 1, !tbaa !868
  %313 = lshr i64 %279, 32
  %314 = trunc i64 %313 to i8
  %315 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %314, i8* %315, align 1, !tbaa !868
  %316 = lshr i64 %279, 40
  %317 = trunc i64 %316 to i8
  %318 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %317, i8* %318, align 1, !tbaa !868
  %319 = lshr i64 %279, 48
  %320 = trunc i64 %319 to i8
  %321 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %320, i8* %321, align 1, !tbaa !868
  %322 = lshr i64 %279, 56
  %323 = trunc i64 %322 to i8
  %324 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %323, i8* %324, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i32
  %10 = and i32 %9, 65535
  %11 = trunc i64 %4 to i32
  %12 = and i32 %11, 65535
  %13 = add nuw nsw i32 %10, 1
  %14 = add nuw nsw i32 %13, %12
  %15 = lshr i32 %14, 1
  %16 = trunc i32 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8, !tbaa !869
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %19 = lshr i64 %3, 16
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 65535
  %22 = lshr i64 %4, 16
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 65535
  %25 = add nuw nsw i32 %21, 1
  %26 = add nuw nsw i32 %25, %24
  %27 = lshr i32 %26, 1
  %28 = trunc i32 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %18, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %28, i16* %29, align 2, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 32
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 65535
  %34 = lshr i64 %4, 32
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 65535
  %37 = add nuw nsw i32 %33, 1
  %38 = add nuw nsw i32 %37, %36
  %39 = lshr i32 %38, 1
  %40 = trunc i32 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %40, i16* %41, align 4, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %43 = lshr i64 %3, 48
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %4, 48
  %46 = trunc i64 %45 to i32
  %47 = add nuw nsw i32 %44, 1
  %48 = add nuw nsw i32 %47, %46
  %49 = lshr i32 %48, 1
  %50 = trunc i32 %49 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %42, i64* %6, align 8
  %51 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %50, i16* %51, align 2, !tbaa !869
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %53 = lshr i64 %52, 16
  %54 = lshr i64 %52, 32
  %55 = lshr i64 %52, 48
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = trunc i64 %54 to i16
  %59 = trunc i64 %55 to i16
  %60 = bitcast i64* %2 to [4 x i16]*
  %61 = bitcast i64* %2 to i16*
  store i16 %56, i16* %61, align 1, !tbaa !869
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %60, i64 0, i64 1
  store i16 %57, i16* %62, align 1, !tbaa !869
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %60, i64 0, i64 2
  store i16 %58, i16* %63, align 1, !tbaa !869
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %60, i64 0, i64 3
  store i16 %59, i16* %64, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = bitcast i64* %6 to i8*
  %18 = bitcast i64* %6 to [4 x i16]*
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 65535
  %21 = zext i16 %10 to i32
  %22 = add nuw nsw i32 %20, 1
  %23 = add nuw nsw i32 %22, %21
  %24 = lshr i32 %23, 1
  %25 = trunc i32 %24 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %6, align 8
  %26 = bitcast i64* %6 to i16*
  store i16 %25, i16* %26, align 8, !tbaa !869
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %28 = lshr i64 %3, 16
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 65535
  %31 = zext i16 %12 to i32
  %32 = add nuw nsw i32 %30, 1
  %33 = add nuw nsw i32 %32, %31
  %34 = lshr i32 %33, 1
  %35 = trunc i32 %34 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %27, i64* %6, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %38 = lshr i64 %3, 32
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 65535
  %41 = zext i16 %14 to i32
  %42 = add nuw nsw i32 %40, 1
  %43 = add nuw nsw i32 %42, %41
  %44 = lshr i32 %43, 1
  %45 = trunc i32 %44 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %37, i64* %6, align 8
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %48 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %49 = load i16, i16* %48, align 2, !tbaa !869
  %50 = zext i16 %49 to i32
  %51 = zext i16 %16 to i32
  %52 = add nuw nsw i32 %50, 1
  %53 = add nuw nsw i32 %52, %51
  %54 = lshr i32 %53, 1
  %55 = trunc i32 %54 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %47, i64* %6, align 8
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %55, i16* %56, align 2, !tbaa !869
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %58 = lshr i64 %57, 16
  %59 = lshr i64 %57, 32
  %60 = lshr i64 %57, 48
  %61 = trunc i64 %57 to i16
  %62 = trunc i64 %58 to i16
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = bitcast i64* %2 to [4 x i16]*
  %66 = bitcast i64* %2 to i16*
  store i16 %61, i16* %66, align 1, !tbaa !869
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 1
  store i16 %62, i16* %67, align 1, !tbaa !869
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 2
  store i16 %63, i16* %68, align 1, !tbaa !869
  %69 = getelementptr inbounds [4 x i16], [4 x i16]* %65, i64 0, i64 3
  store i16 %64, i16* %69, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i32
  %26 = and i32 %25, 65535
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = trunc i64 %27 to i32
  %29 = and i32 %28, 65535
  %30 = add nuw nsw i32 %26, 1
  %31 = add nuw nsw i32 %30, %29
  %32 = lshr i32 %31, 1
  %33 = trunc i32 %32 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64>* %6 to i16*
  store i16 %33, i16* %34, align 16, !tbaa !869
  %35 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %36 = lshr i64 %24, 16
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 65535
  %39 = lshr i64 %27, 16
  %40 = trunc i64 %39 to i32
  %41 = and i32 %40, 65535
  %42 = add nuw nsw i32 %38, 1
  %43 = add nuw nsw i32 %42, %41
  %44 = lshr i32 %43, 1
  %45 = trunc i32 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %35, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %45, i16* %46, align 2, !tbaa !869
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 32
  %49 = trunc i64 %48 to i32
  %50 = and i32 %49, 65535
  %51 = lshr i64 %27, 32
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 65535
  %54 = add nuw nsw i32 %50, 1
  %55 = add nuw nsw i32 %54, %53
  %56 = lshr i32 %55, 1
  %57 = trunc i32 %56 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %57, i16* %58, align 4, !tbaa !869
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %61 = load i16, i16* %60, align 2, !tbaa !869
  %62 = zext i16 %61 to i32
  %63 = lshr i64 %27, 48
  %64 = trunc i64 %63 to i32
  %65 = add nuw nsw i32 %62, 1
  %66 = add nuw nsw i32 %65, %64
  %67 = lshr i32 %66, 1
  %68 = trunc i32 %67 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %69 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %68, i16* %69, align 2, !tbaa !869
  %70 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %72 = bitcast i64* %71 to i16*
  %73 = load i16, i16* %72, align 8, !tbaa !869
  %74 = zext i16 %73 to i32
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %76 = bitcast i64* %75 to i16*
  %77 = load i16, i16* %76, align 8, !tbaa !869
  %78 = zext i16 %77 to i32
  %79 = add nuw nsw i32 %74, 1
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 1
  %82 = trunc i32 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  store i16 %82, i16* %84, align 8, !tbaa !869
  %85 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %86 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %87 = load i16, i16* %86, align 2, !tbaa !869
  %88 = zext i16 %87 to i32
  %89 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %90 = load i16, i16* %89, align 2, !tbaa !869
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %88, 1
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 1
  %95 = trunc i32 %94 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 %85, i64* %22, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %95, i16* %96, align 2, !tbaa !869
  %97 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = zext i16 %99 to i32
  %101 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %102 = load i16, i16* %101, align 4, !tbaa !869
  %103 = zext i16 %102 to i32
  %104 = add nuw nsw i32 %100, 1
  %105 = add nuw nsw i32 %104, %103
  %106 = lshr i32 %105, 1
  %107 = trunc i32 %106 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 %97, i64* %22, align 8
  %108 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %107, i16* %108, align 4, !tbaa !869
  %109 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %110 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %111 = load i16, i16* %110, align 2, !tbaa !869
  %112 = zext i16 %111 to i32
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %114 = load i16, i16* %113, align 2, !tbaa !869
  %115 = zext i16 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = trunc i32 %118 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %70, i64* %21, align 16
  store i64 %109, i64* %22, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %119, i16* %120, align 2, !tbaa !869
  %121 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %122 = lshr i64 %70, 16
  %123 = lshr i64 %70, 32
  %124 = lshr i64 %70, 48
  %125 = trunc i64 %70 to i16
  %126 = trunc i64 %122 to i16
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = bitcast i8* %2 to i16*
  store i16 %125, i16* %129, align 1, !tbaa !869
  %130 = getelementptr inbounds i8, i8* %2, i64 2
  %131 = bitcast i8* %130 to i16*
  store i16 %126, i16* %131, align 1, !tbaa !869
  %132 = getelementptr inbounds i8, i8* %2, i64 4
  %133 = bitcast i8* %132 to i16*
  store i16 %127, i16* %133, align 1, !tbaa !869
  %134 = getelementptr inbounds i8, i8* %2, i64 6
  %135 = bitcast i8* %134 to i16*
  store i16 %128, i16* %135, align 1, !tbaa !869
  %136 = trunc i64 %121 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 8
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %121, 16
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 10
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  %143 = lshr i64 %121, 32
  %144 = trunc i64 %143 to i16
  %145 = getelementptr inbounds i8, i8* %2, i64 12
  %146 = bitcast i8* %145 to i16*
  store i16 %144, i16* %146, align 1, !tbaa !869
  %147 = lshr i64 %121, 48
  %148 = trunc i64 %147 to i16
  %149 = getelementptr inbounds i8, i8* %2, i64 14
  %150 = bitcast i8* %149 to i16*
  store i16 %148, i16* %150, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PAVGWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i32
  %57 = and i32 %56, 65535
  %58 = zext i16 %18 to i32
  %59 = add nuw nsw i32 %57, 1
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 1
  %62 = trunc i32 %61 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %63 = bitcast <2 x i64>* %6 to i16*
  store i16 %62, i16* %63, align 16, !tbaa !869
  %64 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %65 = lshr i64 %55, 16
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 65535
  %68 = zext i16 %20 to i32
  %69 = add nuw nsw i32 %67, 1
  %70 = add nuw nsw i32 %69, %68
  %71 = lshr i32 %70, 1
  %72 = trunc i32 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %64, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %76 = load i16, i16* %75, align 4, !tbaa !869
  %77 = zext i16 %76 to i32
  %78 = zext i16 %22 to i32
  %79 = add nuw nsw i32 %77, 1
  %80 = add nuw nsw i32 %79, %78
  %81 = lshr i32 %80, 1
  %82 = trunc i32 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %82, i16* %83, align 4, !tbaa !869
  %84 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = zext i16 %86 to i32
  %88 = zext i16 %24 to i32
  %89 = add nuw nsw i32 %87, 1
  %90 = add nuw nsw i32 %89, %88
  %91 = lshr i32 %90, 1
  %92 = trunc i32 %91 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %84, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %92, i16* %93, align 2, !tbaa !869
  %94 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  %97 = load i16, i16* %96, align 8, !tbaa !869
  %98 = zext i16 %97 to i32
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %100 = bitcast i64* %99 to i16*
  %101 = load i16, i16* %100, align 8, !tbaa !869
  %102 = zext i16 %101 to i32
  %103 = add nuw nsw i32 %98, 1
  %104 = add nuw nsw i32 %103, %102
  %105 = lshr i32 %104, 1
  %106 = trunc i32 %105 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %94, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %108 = bitcast i64* %107 to i16*
  store i16 %106, i16* %108, align 8, !tbaa !869
  %109 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %110 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %111 = load i16, i16* %110, align 2, !tbaa !869
  %112 = zext i16 %111 to i32
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %114 = load i16, i16* %113, align 2, !tbaa !869
  %115 = zext i16 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = trunc i32 %118 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %94, i64* %52, align 16
  store i64 %109, i64* %53, align 8
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %119, i16* %120, align 2, !tbaa !869
  %121 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %122 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %123 = load i16, i16* %122, align 4, !tbaa !869
  %124 = zext i16 %123 to i32
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %126 = load i16, i16* %125, align 4, !tbaa !869
  %127 = zext i16 %126 to i32
  %128 = add nuw nsw i32 %124, 1
  %129 = add nuw nsw i32 %128, %127
  %130 = lshr i32 %129, 1
  %131 = trunc i32 %130 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %94, i64* %52, align 16
  store i64 %121, i64* %53, align 8
  %132 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %131, i16* %132, align 4, !tbaa !869
  %133 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %134 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %135 = load i16, i16* %134, align 2, !tbaa !869
  %136 = zext i16 %135 to i32
  %137 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %138 = load i16, i16* %137, align 2, !tbaa !869
  %139 = zext i16 %138 to i32
  %140 = add nuw nsw i32 %136, 1
  %141 = add nuw nsw i32 %140, %139
  %142 = lshr i32 %141, 1
  %143 = trunc i32 %142 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %94, i64* %52, align 16
  store i64 %133, i64* %53, align 8
  %144 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %143, i16* %144, align 2, !tbaa !869
  %145 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %146 = lshr i64 %94, 16
  %147 = lshr i64 %94, 32
  %148 = lshr i64 %94, 48
  %149 = trunc i64 %94 to i16
  %150 = trunc i64 %146 to i16
  %151 = trunc i64 %147 to i16
  %152 = trunc i64 %148 to i16
  %153 = bitcast i8* %2 to i16*
  store i16 %149, i16* %153, align 1, !tbaa !869
  %154 = getelementptr inbounds i8, i8* %2, i64 2
  %155 = bitcast i8* %154 to i16*
  store i16 %150, i16* %155, align 1, !tbaa !869
  %156 = getelementptr inbounds i8, i8* %2, i64 4
  %157 = bitcast i8* %156 to i16*
  store i16 %151, i16* %157, align 1, !tbaa !869
  %158 = getelementptr inbounds i8, i8* %2, i64 6
  %159 = bitcast i8* %158 to i16*
  store i16 %152, i16* %159, align 1, !tbaa !869
  %160 = trunc i64 %145 to i16
  %161 = getelementptr inbounds i8, i8* %2, i64 8
  %162 = bitcast i8* %161 to i16*
  store i16 %160, i16* %162, align 1, !tbaa !869
  %163 = lshr i64 %145, 16
  %164 = trunc i64 %163 to i16
  %165 = getelementptr inbounds i8, i8* %2, i64 10
  %166 = bitcast i8* %165 to i16*
  store i16 %164, i16* %166, align 1, !tbaa !869
  %167 = lshr i64 %145, 32
  %168 = trunc i64 %167 to i16
  %169 = getelementptr inbounds i8, i8* %2, i64 12
  %170 = bitcast i8* %169 to i16*
  store i16 %168, i16* %170, align 1, !tbaa !869
  %171 = lshr i64 %145, 48
  %172 = trunc i64 %171 to i16
  %173 = getelementptr inbounds i8, i8* %2, i64 14
  %174 = bitcast i8* %173 to i16*
  store i16 %172, i16* %174, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = trunc i64 %3 to i16
  %11 = lshr i64 %3, 16
  %12 = trunc i64 %11 to i16
  %13 = sub i16 %10, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %14 = bitcast i64* %6 to i16*
  store i16 %13, i16* %14, align 8, !tbaa !869
  %15 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %16 = lshr i64 %3, 32
  %17 = trunc i64 %16 to i16
  %18 = lshr i64 %3, 48
  %19 = trunc i64 %18 to i16
  %20 = sub i16 %17, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %15, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %23 = bitcast i64* %7 to i8*
  %24 = bitcast i64* %7 to [4 x i16]*
  %25 = trunc i64 %4 to i16
  %26 = lshr i64 %4, 16
  %27 = trunc i64 %26 to i16
  %28 = sub i16 %25, %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %22, i64* %7, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = sub i16 %32, %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %23)
  store i64 %30, i64* %7, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %24, i64 0, i64 3
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1, !tbaa !869
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 2
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %9) #22
  %11 = add i64 %4, 4
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 6
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = bitcast i64* %6 to i8*
  %16 = bitcast i64* %6 to [4 x i16]*
  %17 = trunc i64 %3 to i16
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  %20 = sub i16 %17, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i16*
  store i16 %20, i16* %21, align 8, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %3, 48
  %26 = trunc i64 %25 to i16
  %27 = sub i16 %24, %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %22, i64* %6, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %16, i64 0, i64 1
  store i16 %27, i16* %28, align 2, !tbaa !869
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %30 = bitcast i64* %7 to i8*
  %31 = bitcast i64* %7 to [4 x i16]*
  %32 = sub i16 %8, %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %29, i64* %7, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %31, i64 0, i64 2
  store i16 %32, i16* %33, align 4, !tbaa !869
  %34 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %35 = sub i16 %12, %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %34, i64* %7, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %31, i64 0, i64 3
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1, !tbaa !869
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %9, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = trunc i64 %12 to i16
  %24 = lshr i64 %12, 16
  %25 = trunc i64 %24 to i16
  %26 = sub i16 %23, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16, !tbaa !869
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = lshr i64 %12, 32
  %30 = trunc i64 %29 to i16
  %31 = lshr i64 %12, 48
  %32 = trunc i64 %31 to i16
  %33 = sub i16 %30, %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 1
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %36 = trunc i64 %15 to i16
  %37 = lshr i64 %15, 16
  %38 = trunc i64 %37 to i16
  %39 = sub i16 %36, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %35, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %39, i16* %40, align 4, !tbaa !869
  %41 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %42 = lshr i64 %15, 32
  %43 = trunc i64 %42 to i16
  %44 = lshr i64 %15, 48
  %45 = trunc i64 %44 to i16
  %46 = sub i16 %43, %45
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %41, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 3
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %49 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %50 = bitcast { i64, i64 }* %8 to i8*
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %53 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %54 = bitcast <2 x i64>* %9 to i16*
  %55 = load i16, i16* %54, align 16, !tbaa !869
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 1
  %57 = load i16, i16* %56, align 2, !tbaa !869
  %58 = sub i16 %55, %57
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 0, i64* %52, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  store i16 %58, i16* %60, align 8, !tbaa !869
  %61 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 2
  %63 = load i16, i16* %62, align 4, !tbaa !869
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 3
  %65 = load i16, i16* %64, align 2, !tbaa !869
  %66 = sub i16 %63, %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %61, i64* %52, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 5
  store i16 %66, i16* %67, align 2, !tbaa !869
  %68 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8, !tbaa !869
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 5
  %73 = load i16, i16* %72, align 2, !tbaa !869
  %74 = sub i16 %71, %73
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %68, i64* %52, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 6
  store i16 %74, i16* %75, align 4, !tbaa !869
  %76 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4, !tbaa !869
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %49, i64 0, i32 0, i64 7
  %80 = load i16, i16* %79, align 2, !tbaa !869
  %81 = sub i16 %78, %80
  call void @llvm.lifetime.start(i64 16, i8* nonnull %50)
  store i64 %48, i64* %51, align 8
  store i64 %76, i64* %52, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %53, i64 0, i64 7
  store i16 %81, i16* %82, align 2, !tbaa !869
  %83 = load i64, i64* %52, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %50)
  %84 = lshr i64 %48, 16
  %85 = lshr i64 %48, 32
  %86 = lshr i64 %48, 48
  %87 = trunc i64 %48 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = trunc i64 %86 to i16
  %91 = bitcast i8* %2 to i16*
  store i16 %87, i16* %91, align 1, !tbaa !869
  %92 = getelementptr inbounds i8, i8* %2, i64 2
  %93 = bitcast i8* %92 to i16*
  store i16 %88, i16* %93, align 1, !tbaa !869
  %94 = getelementptr inbounds i8, i8* %2, i64 4
  %95 = bitcast i8* %94 to i16*
  store i16 %89, i16* %95, align 1, !tbaa !869
  %96 = getelementptr inbounds i8, i8* %2, i64 6
  %97 = bitcast i8* %96 to i16*
  store i16 %90, i16* %97, align 1, !tbaa !869
  %98 = trunc i64 %83 to i16
  %99 = getelementptr inbounds i8, i8* %2, i64 8
  %100 = bitcast i8* %99 to i16*
  store i16 %98, i16* %100, align 1, !tbaa !869
  %101 = lshr i64 %83, 16
  %102 = trunc i64 %101 to i16
  %103 = getelementptr inbounds i8, i8* %2, i64 10
  %104 = bitcast i8* %103 to i16*
  store i16 %102, i16* %104, align 1, !tbaa !869
  %105 = lshr i64 %83, 32
  %106 = trunc i64 %105 to i16
  %107 = getelementptr inbounds i8, i8* %2, i64 12
  %108 = bitcast i8* %107 to i16*
  store i16 %106, i16* %108, align 1, !tbaa !869
  %109 = lshr i64 %83, 48
  %110 = trunc i64 %109 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 14
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %3, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %15, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %18, i64* %20, align 8
  %21 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21) #23
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %23 = add i64 %4, 2
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 6
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 8
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 10
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 12
  %34 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 14
  %36 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %35) #22
  %37 = insertelement <2 x i16> undef, i16 %28, i32 0
  %38 = insertelement <2 x i16> %37, i16 %36, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw <2 x i64> %39, <i64 48, i64 48>
  %41 = insertelement <2 x i16> undef, i16 %26, i32 0
  %42 = insertelement <2 x i16> %41, i16 %34, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 32, i64 32>
  %45 = insertelement <2 x i16> undef, i16 %24, i32 0
  %46 = insertelement <2 x i16> %45, i16 %32, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = shl nuw nsw <2 x i64> %47, <i64 16, i64 16>
  %49 = insertelement <2 x i16> undef, i16 %22, i32 0
  %50 = insertelement <2 x i16> %49, i16 %30, i32 1
  %51 = zext <2 x i16> %50 to <2 x i64>
  %52 = or <2 x i64> %48, %51
  %53 = or <2 x i64> %52, %44
  %54 = or <2 x i64> %53, %40
  store <2 x i64> %54, <2 x i64>* %11, align 16
  %55 = bitcast <2 x i64>* %6 to i8*
  %56 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %58 = bitcast <2 x i64>* %6 to [8 x i16]*
  %59 = trunc i64 %15 to i16
  %60 = lshr i64 %15, 16
  %61 = trunc i64 %60 to i16
  %62 = sub i16 %59, %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %63 = bitcast <2 x i64>* %6 to i16*
  store i16 %62, i16* %63, align 16, !tbaa !869
  %64 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %65 = lshr i64 %15, 32
  %66 = trunc i64 %65 to i16
  %67 = lshr i64 %15, 48
  %68 = trunc i64 %67 to i16
  %69 = sub i16 %66, %68
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store i64 %64, i64* %56, align 16
  store i64 0, i64* %57, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %58, i64 0, i64 1
  store i16 %69, i16* %70, align 2, !tbaa !869
  %71 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %72 = trunc i64 %18 to i16
  %73 = lshr i64 %18, 16
  %74 = trunc i64 %73 to i16
  %75 = sub i16 %72, %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store i64 %71, i64* %56, align 16
  store i64 0, i64* %57, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %58, i64 0, i64 2
  store i16 %75, i16* %76, align 4, !tbaa !869
  %77 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %79 = load i16, i16* %78, align 4, !tbaa !869
  %80 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %81 = load i16, i16* %80, align 2, !tbaa !869
  %82 = sub i16 %79, %81
  call void @llvm.lifetime.start(i64 16, i8* nonnull %55)
  store i64 %77, i64* %56, align 16
  store i64 0, i64* %57, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %58, i64 0, i64 3
  store i16 %82, i16* %83, align 2, !tbaa !869
  %84 = load i64, i64* %56, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %55)
  %85 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %86 = bitcast { i64, i64 }* %8 to i8*
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %89 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %90 = bitcast <2 x i64>* %11 to i16*
  %91 = load i16, i16* %90, align 16, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 1
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = sub i16 %91, %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 0, i64* %88, align 8
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %96 = bitcast i64* %95 to i16*
  store i16 %94, i16* %96, align 8, !tbaa !869
  %97 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 2
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 3
  %101 = load i16, i16* %100, align 2, !tbaa !869
  %102 = sub i16 %99, %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 %97, i64* %88, align 8
  %103 = getelementptr inbounds [8 x i16], [8 x i16]* %89, i64 0, i64 5
  store i16 %102, i16* %103, align 2, !tbaa !869
  %104 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %106 = bitcast i64* %105 to i16*
  %107 = load i16, i16* %106, align 8, !tbaa !869
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 5
  %109 = load i16, i16* %108, align 2, !tbaa !869
  %110 = sub i16 %107, %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 %104, i64* %88, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %89, i64 0, i64 6
  store i16 %110, i16* %111, align 4, !tbaa !869
  %112 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %113 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 6
  %114 = load i16, i16* %113, align 4, !tbaa !869
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %85, i64 0, i32 0, i64 7
  %116 = load i16, i16* %115, align 2, !tbaa !869
  %117 = sub i16 %114, %116
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %84, i64* %87, align 8
  store i64 %112, i64* %88, align 8
  %118 = getelementptr inbounds [8 x i16], [8 x i16]* %89, i64 0, i64 7
  store i16 %117, i16* %118, align 2, !tbaa !869
  %119 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %120 = lshr i64 %84, 16
  %121 = lshr i64 %84, 32
  %122 = lshr i64 %84, 48
  %123 = trunc i64 %84 to i16
  %124 = trunc i64 %120 to i16
  %125 = trunc i64 %121 to i16
  %126 = trunc i64 %122 to i16
  %127 = bitcast i8* %2 to i16*
  store i16 %123, i16* %127, align 1, !tbaa !869
  %128 = getelementptr inbounds i8, i8* %2, i64 2
  %129 = bitcast i8* %128 to i16*
  store i16 %124, i16* %129, align 1, !tbaa !869
  %130 = getelementptr inbounds i8, i8* %2, i64 4
  %131 = bitcast i8* %130 to i16*
  store i16 %125, i16* %131, align 1, !tbaa !869
  %132 = getelementptr inbounds i8, i8* %2, i64 6
  %133 = bitcast i8* %132 to i16*
  store i16 %126, i16* %133, align 1, !tbaa !869
  %134 = trunc i64 %119 to i16
  %135 = getelementptr inbounds i8, i8* %2, i64 8
  %136 = bitcast i8* %135 to i16*
  store i16 %134, i16* %136, align 1, !tbaa !869
  %137 = lshr i64 %119, 16
  %138 = trunc i64 %137 to i16
  %139 = getelementptr inbounds i8, i8* %2, i64 10
  %140 = bitcast i8* %139 to i16*
  store i16 %138, i16* %140, align 1, !tbaa !869
  %141 = lshr i64 %119, 32
  %142 = trunc i64 %141 to i16
  %143 = getelementptr inbounds i8, i8* %2, i64 12
  %144 = bitcast i8* %143 to i16*
  store i16 %142, i16* %144, align 1, !tbaa !869
  %145 = lshr i64 %119, 48
  %146 = trunc i64 %145 to i16
  %147 = getelementptr inbounds i8, i8* %2, i64 14
  %148 = bitcast i8* %147 to i16*
  store i16 %146, i16* %148, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = trunc i64 %3 to i32
  %10 = lshr i64 %3, 32
  %11 = trunc i64 %10 to i32
  %12 = sub i32 %9, %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %15 = bitcast i64* %7 to i8*
  %16 = bitcast i64* %7 to [2 x i32]*
  %17 = trunc i64 %4 to i32
  %18 = lshr i64 %4, 32
  %19 = trunc i64 %18 to i32
  %20 = sub i32 %17, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %15)
  store i64 %14, i64* %7, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 4
  %10 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %9) #22
  %11 = bitcast i64* %6 to i8*
  %12 = trunc i64 %3 to i32
  %13 = lshr i64 %3, 32
  %14 = trunc i64 %13 to i32
  %15 = sub i32 %12, %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8, !tbaa !877
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %18 = bitcast i64* %7 to i8*
  %19 = bitcast i64* %7 to [2 x i32]*
  %20 = sub i32 %8, %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %18)
  store i64 %17, i64* %7, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [4 x i32]*
  %23 = trunc i64 %10 to i32
  %24 = lshr i64 %10, 32
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %23, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16, !tbaa !877
  %28 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %29 = trunc i64 %13 to i32
  %30 = lshr i64 %13, 32
  %31 = trunc i64 %30 to i32
  %32 = sub i32 %29, %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %28, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %35 = bitcast { i64, i64 }* %8 to i8*
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %38 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %39 = trunc i64 %15 to i32
  %40 = lshr i64 %15, 32
  %41 = trunc i64 %40 to i32
  %42 = sub i32 %39, %41
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 0, i64* %37, align 8
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %44 = bitcast i64* %43 to i32*
  store i32 %42, i32* %44, align 8, !tbaa !877
  %45 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %46 = trunc i64 %18 to i32
  %47 = lshr i64 %18, 32
  %48 = trunc i64 %47 to i32
  %49 = sub i32 %46, %48
  call void @llvm.lifetime.start(i64 16, i8* nonnull %35)
  store i64 %34, i64* %36, align 8
  store i64 %45, i64* %37, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 3
  store i32 %49, i32* %50, align 4, !tbaa !877
  %51 = load i64, i64* %37, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %35)
  %52 = lshr i64 %34, 32
  %53 = trunc i64 %34 to i32
  %54 = trunc i64 %52 to i32
  %55 = bitcast i8* %2 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = getelementptr inbounds i8, i8* %2, i64 4
  %57 = bitcast i8* %56 to i32*
  store i32 %54, i32* %57, align 1, !tbaa !877
  %58 = trunc i64 %51 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 8
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1, !tbaa !877
  %61 = lshr i64 %51, 32
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 12
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PHSUBDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [4 x i32]*
  %25 = trunc i64 %10 to i32
  %26 = lshr i64 %10, 32
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %25, %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i32*
  store i32 %28, i32* %29, align 16, !tbaa !877
  %30 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %31 = trunc i64 %13 to i32
  %32 = lshr i64 %13, 32
  %33 = trunc i64 %32 to i32
  %34 = sub i32 %31, %33
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %30, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %24, i64 0, i64 1
  store i32 %34, i32* %35, align 4, !tbaa !877
  %36 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %37 = bitcast { i64, i64 }* %8 to i8*
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %40 = bitcast { i64, i64 }* %8 to [4 x i32]*
  %41 = sub i32 %14, %16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %36, i64* %38, align 8
  store i64 0, i64* %39, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8, !tbaa !877
  %44 = load i64, i64* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %45 = sub i32 %18, %20
  call void @llvm.lifetime.start(i64 16, i8* nonnull %37)
  store i64 %36, i64* %38, align 8
  store i64 %44, i64* %39, align 8
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 3
  store i32 %45, i32* %46, align 4, !tbaa !877
  %47 = load i64, i64* %39, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %37)
  %48 = lshr i64 %36, 32
  %49 = trunc i64 %36 to i32
  %50 = trunc i64 %48 to i32
  %51 = bitcast i8* %2 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !877
  %52 = getelementptr inbounds i8, i8* %2, i64 4
  %53 = bitcast i8* %52 to i32*
  store i32 %50, i32* %53, align 1, !tbaa !877
  %54 = trunc i64 %47 to i32
  %55 = getelementptr inbounds i8, i8* %2, i64 8
  %56 = bitcast i8* %55 to i32*
  store i32 %54, i32* %56, align 1, !tbaa !877
  %57 = lshr i64 %47, 32
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds i8, i8* %2, i64 12
  %60 = bitcast i8* %59 to i32*
  store i32 %58, i32* %60, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp sgt i16 %9, %10
  %12 = select i1 %11, i16 %9, i16 %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8, !tbaa !869
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp sgt i16 %16, %18
  %20 = select i1 %19, i16 %16, i16 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp sgt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp sgt i16 %32, %34
  %36 = select i1 %35, i16 %32, i16 %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = trunc i64 %3 to i16
  %17 = icmp sgt i16 %16, %7
  %18 = select i1 %17, i16 %16, i16 %7
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %21 = lshr i64 %3, 16
  %22 = trunc i64 %21 to i16
  %23 = icmp sgt i16 %22, %9
  %24 = select i1 %23, i16 %22, i16 %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %20, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %24, i16* %25, align 2, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %27 = lshr i64 %3, 32
  %28 = trunc i64 %27 to i16
  %29 = icmp sgt i16 %28, %11
  %30 = select i1 %29, i16 %28, i16 %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %26, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %30, i16* %31, align 4, !tbaa !869
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %33 = lshr i64 %3, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp sgt i16 %34, %13
  %36 = select i1 %35, i16 %34, i16 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %32, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp sgt i16 %25, %27
  %29 = select i1 %28, i16 %25, i16 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16, !tbaa !869
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp sgt i16 %33, %35
  %37 = select i1 %36, i16 %33, i16 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp sgt i16 %41, %43
  %45 = select i1 %44, i16 %41, i16 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp sgt i16 %49, %51
  %53 = select i1 %52, i16 %49, i16 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2, !tbaa !869
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8, !tbaa !869
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8, !tbaa !869
  %62 = icmp sgt i16 %58, %61
  %63 = select i1 %62, i16 %58, i16 %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8, !tbaa !869
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2, !tbaa !869
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2, !tbaa !869
  %71 = icmp sgt i16 %68, %70
  %72 = select i1 %71, i16 %68, i16 %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4, !tbaa !869
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4, !tbaa !869
  %79 = icmp sgt i16 %76, %78
  %80 = select i1 %79, i16 %76, i16 %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4, !tbaa !869
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2, !tbaa !869
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = icmp sgt i16 %84, %86
  %88 = select i1 %87, i16 %84, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1, !tbaa !869
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1, !tbaa !869
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1, !tbaa !869
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1, !tbaa !869
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1, !tbaa !869
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1, !tbaa !869
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1, !tbaa !869
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = icmp sgt i16 %56, %18
  %58 = select i1 %57, i16 %56, i16 %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %59 = bitcast <2 x i64>* %6 to i16*
  store i16 %58, i16* %59, align 16, !tbaa !869
  %60 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %61 = lshr i64 %55, 16
  %62 = trunc i64 %61 to i16
  %63 = icmp sgt i16 %62, %20
  %64 = select i1 %63, i16 %62, i16 %20
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %60, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %64, i16* %65, align 2, !tbaa !869
  %66 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %67 = lshr i64 %55, 32
  %68 = trunc i64 %67 to i16
  %69 = icmp sgt i16 %68, %22
  %70 = select i1 %69, i16 %68, i16 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %66, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %70, i16* %71, align 4, !tbaa !869
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %74 = load i16, i16* %73, align 2, !tbaa !869
  %75 = icmp sgt i16 %74, %24
  %76 = select i1 %75, i16 %74, i16 %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %76, i16* %77, align 2, !tbaa !869
  %78 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %80 = bitcast i64* %79 to i16*
  %81 = load i16, i16* %80, align 8, !tbaa !869
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %83 = bitcast i64* %82 to i16*
  %84 = load i16, i16* %83, align 8, !tbaa !869
  %85 = icmp sgt i16 %81, %84
  %86 = select i1 %85, i16 %81, i16 %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  store i16 %86, i16* %88, align 8, !tbaa !869
  %89 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %91 = load i16, i16* %90, align 2, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = icmp sgt i16 %91, %93
  %95 = select i1 %94, i16 %91, i16 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %89, i64* %53, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %95, i16* %96, align 2, !tbaa !869
  %97 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %101 = load i16, i16* %100, align 4, !tbaa !869
  %102 = icmp sgt i16 %99, %101
  %103 = select i1 %102, i16 %99, i16 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %97, i64* %53, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %103, i16* %104, align 4, !tbaa !869
  %105 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %107 = load i16, i16* %106, align 2, !tbaa !869
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %109 = load i16, i16* %108, align 2, !tbaa !869
  %110 = icmp sgt i16 %107, %109
  %111 = select i1 %110, i16 %107, i16 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %105, i64* %53, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %111, i16* %112, align 2, !tbaa !869
  %113 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %114 = lshr i64 %78, 16
  %115 = lshr i64 %78, 32
  %116 = lshr i64 %78, 48
  %117 = trunc i64 %78 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = bitcast i8* %2 to i16*
  store i16 %117, i16* %121, align 1, !tbaa !869
  %122 = getelementptr inbounds i8, i8* %2, i64 2
  %123 = bitcast i8* %122 to i16*
  store i16 %118, i16* %123, align 1, !tbaa !869
  %124 = getelementptr inbounds i8, i8* %2, i64 4
  %125 = bitcast i8* %124 to i16*
  store i16 %119, i16* %125, align 1, !tbaa !869
  %126 = getelementptr inbounds i8, i8* %2, i64 6
  %127 = bitcast i8* %126 to i16*
  store i16 %120, i16* %127, align 1, !tbaa !869
  %128 = trunc i64 %113 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 8
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1, !tbaa !869
  %131 = lshr i64 %113, 16
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 10
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1, !tbaa !869
  %135 = lshr i64 %113, 32
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 12
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %113, 48
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 14
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp ugt i8 %15, %16
  %18 = select i1 %17, i8 %15, i8 %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8, !tbaa !868
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp ugt i8 %22, %24
  %26 = select i1 %25, i8 %22, i8 %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1, !tbaa !868
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp ugt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2, !tbaa !868
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1, !tbaa !868
  %41 = icmp ugt i8 %38, %40
  %42 = select i1 %41, i8 %38, i8 %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1, !tbaa !868
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4, !tbaa !868
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4, !tbaa !868
  %49 = icmp ugt i8 %46, %48
  %50 = select i1 %49, i8 %46, i8 %48
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4, !tbaa !868
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1, !tbaa !868
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1, !tbaa !868
  %57 = icmp ugt i8 %54, %56
  %58 = select i1 %57, i8 %54, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2, !tbaa !868
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp ugt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp ugt i8 %70, %72
  %74 = select i1 %73, i8 %70, i8 %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1, !tbaa !868
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1, !tbaa !868
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1, !tbaa !868
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1, !tbaa !868
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1, !tbaa !868
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1, !tbaa !868
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1, !tbaa !868
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i8
  %53 = icmp ugt i8 %52, %13
  %54 = select i1 %53, i8 %52, i8 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %55 = bitcast i64* %6 to i8*
  store i8 %54, i8* %55, align 8, !tbaa !868
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %57 = lshr i64 %3, 8
  %58 = trunc i64 %57 to i8
  %59 = icmp ugt i8 %58, %15
  %60 = select i1 %59, i8 %58, i8 %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %56, i64* %6, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %60, i8* %61, align 1, !tbaa !868
  %62 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp ugt i8 %64, %17
  %66 = select i1 %65, i8 %64, i8 %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %62, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp ugt i8 %70, %72
  %74 = select i1 %73, i8 %70, i8 %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %78 = load i8, i8* %77, align 4, !tbaa !868
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4, !tbaa !868
  %81 = icmp ugt i8 %78, %80
  %82 = select i1 %81, i8 %78, i8 %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %82, i8* %83, align 4, !tbaa !868
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %86 = load i8, i8* %85, align 1, !tbaa !868
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %88 = load i8, i8* %87, align 1, !tbaa !868
  %89 = icmp ugt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %90, i8* %91, align 1, !tbaa !868
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %94 = load i8, i8* %93, align 2, !tbaa !868
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %96 = load i8, i8* %95, align 2, !tbaa !868
  %97 = icmp ugt i8 %94, %96
  %98 = select i1 %97, i8 %94, i8 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %98, i8* %99, align 2, !tbaa !868
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %104 = load i8, i8* %103, align 1, !tbaa !868
  %105 = icmp ugt i8 %102, %104
  %106 = select i1 %105, i8 %102, i8 %104
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %109 = lshr i64 %108, 8
  %110 = lshr i64 %108, 16
  %111 = lshr i64 %108, 24
  %112 = lshr i64 %108, 32
  %113 = lshr i64 %108, 40
  %114 = lshr i64 %108, 48
  %115 = lshr i64 %108, 56
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = bitcast i64* %2 to [8 x i8]*
  %125 = bitcast i64* %2 to i8*
  store i8 %116, i8* %125, align 1, !tbaa !868
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  store i8 %117, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  store i8 %118, i8* %127, align 1, !tbaa !868
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  store i8 %119, i8* %128, align 1, !tbaa !868
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  store i8 %120, i8* %129, align 1, !tbaa !868
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  store i8 %121, i8* %130, align 1, !tbaa !868
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  store i8 %122, i8* %131, align 1, !tbaa !868
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  store i8 %123, i8* %132, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp ugt i8 %25, %27
  %29 = select i1 %28, i8 %25, i8 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16, !tbaa !868
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp ugt i8 %33, %35
  %37 = select i1 %36, i8 %33, i8 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp ugt i8 %41, %43
  %45 = select i1 %44, i8 %41, i8 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2, !tbaa !868
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1, !tbaa !868
  %52 = icmp ugt i8 %49, %51
  %53 = select i1 %52, i8 %49, i8 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1, !tbaa !868
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4, !tbaa !868
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4, !tbaa !868
  %60 = icmp ugt i8 %57, %59
  %61 = select i1 %60, i8 %57, i8 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4, !tbaa !868
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1, !tbaa !868
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1, !tbaa !868
  %68 = icmp ugt i8 %65, %67
  %69 = select i1 %68, i8 %65, i8 %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2, !tbaa !868
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2, !tbaa !868
  %76 = icmp ugt i8 %73, %75
  %77 = select i1 %76, i8 %73, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2, !tbaa !868
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1, !tbaa !868
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1, !tbaa !868
  %84 = icmp ugt i8 %81, %83
  %85 = select i1 %84, i8 %81, i8 %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1, !tbaa !868
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8, !tbaa !868
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8, !tbaa !868
  %94 = icmp ugt i8 %90, %93
  %95 = select i1 %94, i8 %90, i8 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8, !tbaa !868
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1, !tbaa !868
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = icmp ugt i8 %100, %102
  %104 = select i1 %103, i8 %100, i8 %102
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1, !tbaa !868
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2, !tbaa !868
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2, !tbaa !868
  %111 = icmp ugt i8 %108, %110
  %112 = select i1 %111, i8 %108, i8 %110
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2, !tbaa !868
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1, !tbaa !868
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1, !tbaa !868
  %119 = icmp ugt i8 %116, %118
  %120 = select i1 %119, i8 %116, i8 %118
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1, !tbaa !868
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4, !tbaa !868
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4, !tbaa !868
  %127 = icmp ugt i8 %124, %126
  %128 = select i1 %127, i8 %124, i8 %126
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4, !tbaa !868
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1, !tbaa !868
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1, !tbaa !868
  %135 = icmp ugt i8 %132, %134
  %136 = select i1 %135, i8 %132, i8 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2, !tbaa !868
  %143 = icmp ugt i8 %140, %142
  %144 = select i1 %143, i8 %140, i8 %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2, !tbaa !868
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1, !tbaa !868
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1, !tbaa !868
  %151 = icmp ugt i8 %148, %150
  %152 = select i1 %151, i8 %148, i8 %150
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1, !tbaa !868
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1, !tbaa !868
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1, !tbaa !868
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1, !tbaa !868
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1, !tbaa !868
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1, !tbaa !868
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1, !tbaa !868
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1, !tbaa !868
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1, !tbaa !868
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1, !tbaa !868
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1, !tbaa !868
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1, !tbaa !868
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1, !tbaa !868
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1, !tbaa !868
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1, !tbaa !868
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMAXUBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i8
  %93 = icmp ugt i8 %92, %18
  %94 = select i1 %93, i8 %92, i8 %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %95 = bitcast <2 x i64>* %6 to i8*
  store i8 %94, i8* %95, align 16, !tbaa !868
  %96 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %97 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %98 = load i8, i8* %97, align 1, !tbaa !868
  %99 = icmp ugt i8 %98, %20
  %100 = select i1 %99, i8 %98, i8 %20
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %96, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %100, i8* %101, align 1, !tbaa !868
  %102 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %104 = load i8, i8* %103, align 2, !tbaa !868
  %105 = icmp ugt i8 %104, %22
  %106 = select i1 %105, i8 %104, i8 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %102, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %106, i8* %107, align 2, !tbaa !868
  %108 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %112 = load i8, i8* %111, align 1, !tbaa !868
  %113 = icmp ugt i8 %110, %112
  %114 = select i1 %113, i8 %110, i8 %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %108, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %118 = load i8, i8* %117, align 4, !tbaa !868
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %120 = load i8, i8* %119, align 4, !tbaa !868
  %121 = icmp ugt i8 %118, %120
  %122 = select i1 %121, i8 %118, i8 %120
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %116, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %122, i8* %123, align 4, !tbaa !868
  %124 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %126 = load i8, i8* %125, align 1, !tbaa !868
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = icmp ugt i8 %126, %128
  %130 = select i1 %129, i8 %126, i8 %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %124, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %130, i8* %131, align 1, !tbaa !868
  %132 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %134 = load i8, i8* %133, align 2, !tbaa !868
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %136 = load i8, i8* %135, align 2, !tbaa !868
  %137 = icmp ugt i8 %134, %136
  %138 = select i1 %137, i8 %134, i8 %136
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %132, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %138, i8* %139, align 2, !tbaa !868
  %140 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %142 = load i8, i8* %141, align 1, !tbaa !868
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %144 = load i8, i8* %143, align 1, !tbaa !868
  %145 = icmp ugt i8 %142, %144
  %146 = select i1 %145, i8 %142, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %140, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %146, i8* %147, align 1, !tbaa !868
  %148 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %150 = bitcast i64* %149 to i8*
  %151 = load i8, i8* %150, align 8, !tbaa !868
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %153 = bitcast i64* %152 to i8*
  %154 = load i8, i8* %153, align 8, !tbaa !868
  %155 = icmp ugt i8 %151, %154
  %156 = select i1 %155, i8 %151, i8 %154
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  store i8 %156, i8* %158, align 8, !tbaa !868
  %159 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %160 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %161 = load i8, i8* %160, align 1, !tbaa !868
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %163 = load i8, i8* %162, align 1, !tbaa !868
  %164 = icmp ugt i8 %161, %163
  %165 = select i1 %164, i8 %161, i8 %163
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %159, i64* %89, align 8
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %165, i8* %166, align 1, !tbaa !868
  %167 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %169 = load i8, i8* %168, align 2, !tbaa !868
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %171 = load i8, i8* %170, align 2, !tbaa !868
  %172 = icmp ugt i8 %169, %171
  %173 = select i1 %172, i8 %169, i8 %171
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %167, i64* %89, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %173, i8* %174, align 2, !tbaa !868
  %175 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %179 = load i8, i8* %178, align 1, !tbaa !868
  %180 = icmp ugt i8 %177, %179
  %181 = select i1 %180, i8 %177, i8 %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %175, i64* %89, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %181, i8* %182, align 1, !tbaa !868
  %183 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %185 = load i8, i8* %184, align 4, !tbaa !868
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %187 = load i8, i8* %186, align 4, !tbaa !868
  %188 = icmp ugt i8 %185, %187
  %189 = select i1 %188, i8 %185, i8 %187
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %183, i64* %89, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %189, i8* %190, align 4, !tbaa !868
  %191 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %193 = load i8, i8* %192, align 1, !tbaa !868
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp ugt i8 %193, %195
  %197 = select i1 %196, i8 %193, i8 %195
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %191, i64* %89, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %197, i8* %198, align 1, !tbaa !868
  %199 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %201 = load i8, i8* %200, align 2, !tbaa !868
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %203 = load i8, i8* %202, align 2, !tbaa !868
  %204 = icmp ugt i8 %201, %203
  %205 = select i1 %204, i8 %201, i8 %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %199, i64* %89, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %205, i8* %206, align 2, !tbaa !868
  %207 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %209 = load i8, i8* %208, align 1, !tbaa !868
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %211 = load i8, i8* %210, align 1, !tbaa !868
  %212 = icmp ugt i8 %209, %211
  %213 = select i1 %212, i8 %209, i8 %211
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %207, i64* %89, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %213, i8* %214, align 1, !tbaa !868
  %215 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %216 = lshr i64 %148, 8
  %217 = lshr i64 %148, 16
  %218 = lshr i64 %148, 24
  %219 = lshr i64 %148, 32
  %220 = lshr i64 %148, 40
  %221 = lshr i64 %148, 48
  %222 = lshr i64 %148, 56
  %223 = trunc i64 %148 to i8
  %224 = trunc i64 %216 to i8
  %225 = trunc i64 %217 to i8
  %226 = trunc i64 %218 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  %230 = trunc i64 %222 to i8
  store i8 %223, i8* %2, align 1, !tbaa !868
  %231 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %224, i8* %231, align 1, !tbaa !868
  %232 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %225, i8* %232, align 1, !tbaa !868
  %233 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %226, i8* %233, align 1, !tbaa !868
  %234 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %227, i8* %234, align 1, !tbaa !868
  %235 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %228, i8* %235, align 1, !tbaa !868
  %236 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %229, i8* %236, align 1, !tbaa !868
  %237 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %230, i8* %237, align 1, !tbaa !868
  %238 = trunc i64 %215 to i8
  %239 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %238, i8* %239, align 1, !tbaa !868
  %240 = lshr i64 %215, 8
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %241, i8* %242, align 1, !tbaa !868
  %243 = lshr i64 %215, 16
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %244, i8* %245, align 1, !tbaa !868
  %246 = lshr i64 %215, 24
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %247, i8* %248, align 1, !tbaa !868
  %249 = lshr i64 %215, 32
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %250, i8* %251, align 1, !tbaa !868
  %252 = lshr i64 %215, 40
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %253, i8* %254, align 1, !tbaa !868
  %255 = lshr i64 %215, 48
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %256, i8* %257, align 1, !tbaa !868
  %258 = lshr i64 %215, 56
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %259, i8* %260, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp slt i16 %9, %10
  %12 = select i1 %11, i16 %9, i16 %10
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8, !tbaa !869
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp slt i16 %16, %18
  %20 = select i1 %19, i16 %16, i16 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp slt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %32, %34
  %36 = select i1 %35, i16 %32, i16 %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = trunc i64 %3 to i16
  %17 = icmp slt i16 %16, %7
  %18 = select i1 %17, i16 %16, i16 %7
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %21 = lshr i64 %3, 16
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, %9
  %24 = select i1 %23, i16 %22, i16 %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %20, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %24, i16* %25, align 2, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %27 = lshr i64 %3, 32
  %28 = trunc i64 %27 to i16
  %29 = icmp slt i16 %28, %11
  %30 = select i1 %29, i16 %28, i16 %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %26, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %30, i16* %31, align 4, !tbaa !869
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %33 = lshr i64 %3, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %34, %13
  %36 = select i1 %35, i16 %34, i16 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %32, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp slt i16 %25, %27
  %29 = select i1 %28, i16 %25, i16 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16, !tbaa !869
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp slt i16 %33, %35
  %37 = select i1 %36, i16 %33, i16 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp slt i16 %41, %43
  %45 = select i1 %44, i16 %41, i16 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp slt i16 %49, %51
  %53 = select i1 %52, i16 %49, i16 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2, !tbaa !869
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8, !tbaa !869
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8, !tbaa !869
  %62 = icmp slt i16 %58, %61
  %63 = select i1 %62, i16 %58, i16 %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8, !tbaa !869
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2, !tbaa !869
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2, !tbaa !869
  %71 = icmp slt i16 %68, %70
  %72 = select i1 %71, i16 %68, i16 %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4, !tbaa !869
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4, !tbaa !869
  %79 = icmp slt i16 %76, %78
  %80 = select i1 %79, i16 %76, i16 %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4, !tbaa !869
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2, !tbaa !869
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = icmp slt i16 %84, %86
  %88 = select i1 %87, i16 %84, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1, !tbaa !869
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1, !tbaa !869
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1, !tbaa !869
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1, !tbaa !869
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1, !tbaa !869
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1, !tbaa !869
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1, !tbaa !869
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = icmp slt i16 %56, %18
  %58 = select i1 %57, i16 %56, i16 %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %59 = bitcast <2 x i64>* %6 to i16*
  store i16 %58, i16* %59, align 16, !tbaa !869
  %60 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %61 = lshr i64 %55, 16
  %62 = trunc i64 %61 to i16
  %63 = icmp slt i16 %62, %20
  %64 = select i1 %63, i16 %62, i16 %20
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %60, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %64, i16* %65, align 2, !tbaa !869
  %66 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %67 = lshr i64 %55, 32
  %68 = trunc i64 %67 to i16
  %69 = icmp slt i16 %68, %22
  %70 = select i1 %69, i16 %68, i16 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %66, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %70, i16* %71, align 4, !tbaa !869
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %74 = load i16, i16* %73, align 2, !tbaa !869
  %75 = icmp slt i16 %74, %24
  %76 = select i1 %75, i16 %74, i16 %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %76, i16* %77, align 2, !tbaa !869
  %78 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %80 = bitcast i64* %79 to i16*
  %81 = load i16, i16* %80, align 8, !tbaa !869
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %83 = bitcast i64* %82 to i16*
  %84 = load i16, i16* %83, align 8, !tbaa !869
  %85 = icmp slt i16 %81, %84
  %86 = select i1 %85, i16 %81, i16 %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  store i16 %86, i16* %88, align 8, !tbaa !869
  %89 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %91 = load i16, i16* %90, align 2, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = icmp slt i16 %91, %93
  %95 = select i1 %94, i16 %91, i16 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %89, i64* %53, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %95, i16* %96, align 2, !tbaa !869
  %97 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %101 = load i16, i16* %100, align 4, !tbaa !869
  %102 = icmp slt i16 %99, %101
  %103 = select i1 %102, i16 %99, i16 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %97, i64* %53, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %103, i16* %104, align 4, !tbaa !869
  %105 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %107 = load i16, i16* %106, align 2, !tbaa !869
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %109 = load i16, i16* %108, align 2, !tbaa !869
  %110 = icmp slt i16 %107, %109
  %111 = select i1 %110, i16 %107, i16 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %105, i64* %53, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %111, i16* %112, align 2, !tbaa !869
  %113 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %114 = lshr i64 %78, 16
  %115 = lshr i64 %78, 32
  %116 = lshr i64 %78, 48
  %117 = trunc i64 %78 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = bitcast i8* %2 to i16*
  store i16 %117, i16* %121, align 1, !tbaa !869
  %122 = getelementptr inbounds i8, i8* %2, i64 2
  %123 = bitcast i8* %122 to i16*
  store i16 %118, i16* %123, align 1, !tbaa !869
  %124 = getelementptr inbounds i8, i8* %2, i64 4
  %125 = bitcast i8* %124 to i16*
  store i16 %119, i16* %125, align 1, !tbaa !869
  %126 = getelementptr inbounds i8, i8* %2, i64 6
  %127 = bitcast i8* %126 to i16*
  store i16 %120, i16* %127, align 1, !tbaa !869
  %128 = trunc i64 %113 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 8
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1, !tbaa !869
  %131 = lshr i64 %113, 16
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 10
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1, !tbaa !869
  %135 = lshr i64 %113, 32
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 12
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %113, 48
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 14
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp ult i8 %15, %16
  %18 = select i1 %17, i8 %15, i8 %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8, !tbaa !868
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp ult i8 %22, %24
  %26 = select i1 %25, i8 %22, i8 %24
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1, !tbaa !868
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp ult i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2, !tbaa !868
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1, !tbaa !868
  %41 = icmp ult i8 %38, %40
  %42 = select i1 %41, i8 %38, i8 %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1, !tbaa !868
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4, !tbaa !868
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4, !tbaa !868
  %49 = icmp ult i8 %46, %48
  %50 = select i1 %49, i8 %46, i8 %48
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4, !tbaa !868
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1, !tbaa !868
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1, !tbaa !868
  %57 = icmp ult i8 %54, %56
  %58 = select i1 %57, i8 %54, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2, !tbaa !868
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp ult i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp ult i8 %70, %72
  %74 = select i1 %73, i8 %70, i8 %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1, !tbaa !868
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1, !tbaa !868
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1, !tbaa !868
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1, !tbaa !868
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1, !tbaa !868
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1, !tbaa !868
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1, !tbaa !868
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i8
  %53 = icmp ult i8 %52, %13
  %54 = select i1 %53, i8 %52, i8 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %55 = bitcast i64* %6 to i8*
  store i8 %54, i8* %55, align 8, !tbaa !868
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %57 = lshr i64 %3, 8
  %58 = trunc i64 %57 to i8
  %59 = icmp ult i8 %58, %15
  %60 = select i1 %59, i8 %58, i8 %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %56, i64* %6, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %60, i8* %61, align 1, !tbaa !868
  %62 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp ult i8 %64, %17
  %66 = select i1 %65, i8 %64, i8 %17
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %62, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp ult i8 %70, %72
  %74 = select i1 %73, i8 %70, i8 %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %78 = load i8, i8* %77, align 4, !tbaa !868
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4, !tbaa !868
  %81 = icmp ult i8 %78, %80
  %82 = select i1 %81, i8 %78, i8 %80
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %82, i8* %83, align 4, !tbaa !868
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %86 = load i8, i8* %85, align 1, !tbaa !868
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %88 = load i8, i8* %87, align 1, !tbaa !868
  %89 = icmp ult i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %90, i8* %91, align 1, !tbaa !868
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %94 = load i8, i8* %93, align 2, !tbaa !868
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %96 = load i8, i8* %95, align 2, !tbaa !868
  %97 = icmp ult i8 %94, %96
  %98 = select i1 %97, i8 %94, i8 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %98, i8* %99, align 2, !tbaa !868
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %104 = load i8, i8* %103, align 1, !tbaa !868
  %105 = icmp ult i8 %102, %104
  %106 = select i1 %105, i8 %102, i8 %104
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %109 = lshr i64 %108, 8
  %110 = lshr i64 %108, 16
  %111 = lshr i64 %108, 24
  %112 = lshr i64 %108, 32
  %113 = lshr i64 %108, 40
  %114 = lshr i64 %108, 48
  %115 = lshr i64 %108, 56
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = bitcast i64* %2 to [8 x i8]*
  %125 = bitcast i64* %2 to i8*
  store i8 %116, i8* %125, align 1, !tbaa !868
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  store i8 %117, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  store i8 %118, i8* %127, align 1, !tbaa !868
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  store i8 %119, i8* %128, align 1, !tbaa !868
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  store i8 %120, i8* %129, align 1, !tbaa !868
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  store i8 %121, i8* %130, align 1, !tbaa !868
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  store i8 %122, i8* %131, align 1, !tbaa !868
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  store i8 %123, i8* %132, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp ult i8 %25, %27
  %29 = select i1 %28, i8 %25, i8 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16, !tbaa !868
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp ult i8 %33, %35
  %37 = select i1 %36, i8 %33, i8 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp ult i8 %41, %43
  %45 = select i1 %44, i8 %41, i8 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2, !tbaa !868
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1, !tbaa !868
  %52 = icmp ult i8 %49, %51
  %53 = select i1 %52, i8 %49, i8 %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1, !tbaa !868
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4, !tbaa !868
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4, !tbaa !868
  %60 = icmp ult i8 %57, %59
  %61 = select i1 %60, i8 %57, i8 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4, !tbaa !868
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1, !tbaa !868
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1, !tbaa !868
  %68 = icmp ult i8 %65, %67
  %69 = select i1 %68, i8 %65, i8 %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2, !tbaa !868
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2, !tbaa !868
  %76 = icmp ult i8 %73, %75
  %77 = select i1 %76, i8 %73, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2, !tbaa !868
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1, !tbaa !868
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1, !tbaa !868
  %84 = icmp ult i8 %81, %83
  %85 = select i1 %84, i8 %81, i8 %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1, !tbaa !868
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8, !tbaa !868
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8, !tbaa !868
  %94 = icmp ult i8 %90, %93
  %95 = select i1 %94, i8 %90, i8 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8, !tbaa !868
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1, !tbaa !868
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = icmp ult i8 %100, %102
  %104 = select i1 %103, i8 %100, i8 %102
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1, !tbaa !868
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2, !tbaa !868
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2, !tbaa !868
  %111 = icmp ult i8 %108, %110
  %112 = select i1 %111, i8 %108, i8 %110
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2, !tbaa !868
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1, !tbaa !868
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1, !tbaa !868
  %119 = icmp ult i8 %116, %118
  %120 = select i1 %119, i8 %116, i8 %118
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1, !tbaa !868
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4, !tbaa !868
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4, !tbaa !868
  %127 = icmp ult i8 %124, %126
  %128 = select i1 %127, i8 %124, i8 %126
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4, !tbaa !868
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1, !tbaa !868
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1, !tbaa !868
  %135 = icmp ult i8 %132, %134
  %136 = select i1 %135, i8 %132, i8 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2, !tbaa !868
  %143 = icmp ult i8 %140, %142
  %144 = select i1 %143, i8 %140, i8 %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2, !tbaa !868
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1, !tbaa !868
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1, !tbaa !868
  %151 = icmp ult i8 %148, %150
  %152 = select i1 %151, i8 %148, i8 %150
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1, !tbaa !868
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1, !tbaa !868
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1, !tbaa !868
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1, !tbaa !868
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1, !tbaa !868
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1, !tbaa !868
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1, !tbaa !868
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1, !tbaa !868
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1, !tbaa !868
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1, !tbaa !868
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1, !tbaa !868
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1, !tbaa !868
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1, !tbaa !868
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1, !tbaa !868
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1, !tbaa !868
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMINUBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i8
  %93 = icmp ult i8 %92, %18
  %94 = select i1 %93, i8 %92, i8 %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %95 = bitcast <2 x i64>* %6 to i8*
  store i8 %94, i8* %95, align 16, !tbaa !868
  %96 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %97 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %98 = load i8, i8* %97, align 1, !tbaa !868
  %99 = icmp ult i8 %98, %20
  %100 = select i1 %99, i8 %98, i8 %20
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %96, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %100, i8* %101, align 1, !tbaa !868
  %102 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %104 = load i8, i8* %103, align 2, !tbaa !868
  %105 = icmp ult i8 %104, %22
  %106 = select i1 %105, i8 %104, i8 %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %102, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %106, i8* %107, align 2, !tbaa !868
  %108 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %112 = load i8, i8* %111, align 1, !tbaa !868
  %113 = icmp ult i8 %110, %112
  %114 = select i1 %113, i8 %110, i8 %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %108, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %118 = load i8, i8* %117, align 4, !tbaa !868
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %120 = load i8, i8* %119, align 4, !tbaa !868
  %121 = icmp ult i8 %118, %120
  %122 = select i1 %121, i8 %118, i8 %120
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %116, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %122, i8* %123, align 4, !tbaa !868
  %124 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %126 = load i8, i8* %125, align 1, !tbaa !868
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = icmp ult i8 %126, %128
  %130 = select i1 %129, i8 %126, i8 %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %124, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %130, i8* %131, align 1, !tbaa !868
  %132 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %134 = load i8, i8* %133, align 2, !tbaa !868
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %136 = load i8, i8* %135, align 2, !tbaa !868
  %137 = icmp ult i8 %134, %136
  %138 = select i1 %137, i8 %134, i8 %136
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %132, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %138, i8* %139, align 2, !tbaa !868
  %140 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %142 = load i8, i8* %141, align 1, !tbaa !868
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %144 = load i8, i8* %143, align 1, !tbaa !868
  %145 = icmp ult i8 %142, %144
  %146 = select i1 %145, i8 %142, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %140, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %146, i8* %147, align 1, !tbaa !868
  %148 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %150 = bitcast i64* %149 to i8*
  %151 = load i8, i8* %150, align 8, !tbaa !868
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %153 = bitcast i64* %152 to i8*
  %154 = load i8, i8* %153, align 8, !tbaa !868
  %155 = icmp ult i8 %151, %154
  %156 = select i1 %155, i8 %151, i8 %154
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  store i8 %156, i8* %158, align 8, !tbaa !868
  %159 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %160 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %161 = load i8, i8* %160, align 1, !tbaa !868
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %163 = load i8, i8* %162, align 1, !tbaa !868
  %164 = icmp ult i8 %161, %163
  %165 = select i1 %164, i8 %161, i8 %163
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %159, i64* %89, align 8
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %165, i8* %166, align 1, !tbaa !868
  %167 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %169 = load i8, i8* %168, align 2, !tbaa !868
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %171 = load i8, i8* %170, align 2, !tbaa !868
  %172 = icmp ult i8 %169, %171
  %173 = select i1 %172, i8 %169, i8 %171
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %167, i64* %89, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %173, i8* %174, align 2, !tbaa !868
  %175 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %179 = load i8, i8* %178, align 1, !tbaa !868
  %180 = icmp ult i8 %177, %179
  %181 = select i1 %180, i8 %177, i8 %179
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %175, i64* %89, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %181, i8* %182, align 1, !tbaa !868
  %183 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %185 = load i8, i8* %184, align 4, !tbaa !868
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %187 = load i8, i8* %186, align 4, !tbaa !868
  %188 = icmp ult i8 %185, %187
  %189 = select i1 %188, i8 %185, i8 %187
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %183, i64* %89, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %189, i8* %190, align 4, !tbaa !868
  %191 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %193 = load i8, i8* %192, align 1, !tbaa !868
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp ult i8 %193, %195
  %197 = select i1 %196, i8 %193, i8 %195
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %191, i64* %89, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %197, i8* %198, align 1, !tbaa !868
  %199 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %201 = load i8, i8* %200, align 2, !tbaa !868
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %203 = load i8, i8* %202, align 2, !tbaa !868
  %204 = icmp ult i8 %201, %203
  %205 = select i1 %204, i8 %201, i8 %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %199, i64* %89, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %205, i8* %206, align 2, !tbaa !868
  %207 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %209 = load i8, i8* %208, align 1, !tbaa !868
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %211 = load i8, i8* %210, align 1, !tbaa !868
  %212 = icmp ult i8 %209, %211
  %213 = select i1 %212, i8 %209, i8 %211
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %207, i64* %89, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %213, i8* %214, align 1, !tbaa !868
  %215 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %216 = lshr i64 %148, 8
  %217 = lshr i64 %148, 16
  %218 = lshr i64 %148, 24
  %219 = lshr i64 %148, 32
  %220 = lshr i64 %148, 40
  %221 = lshr i64 %148, 48
  %222 = lshr i64 %148, 56
  %223 = trunc i64 %148 to i8
  %224 = trunc i64 %216 to i8
  %225 = trunc i64 %217 to i8
  %226 = trunc i64 %218 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  %230 = trunc i64 %222 to i8
  store i8 %223, i8* %2, align 1, !tbaa !868
  %231 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %224, i8* %231, align 1, !tbaa !868
  %232 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %225, i8* %232, align 1, !tbaa !868
  %233 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %226, i8* %233, align 1, !tbaa !868
  %234 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %227, i8* %234, align 1, !tbaa !868
  %235 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %228, i8* %235, align 1, !tbaa !868
  %236 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %229, i8* %236, align 1, !tbaa !868
  %237 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %230, i8* %237, align 1, !tbaa !868
  %238 = trunc i64 %215 to i8
  %239 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %238, i8* %239, align 1, !tbaa !868
  %240 = lshr i64 %215, 8
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %241, i8* %242, align 1, !tbaa !868
  %243 = lshr i64 %215, 16
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %244, i8* %245, align 1, !tbaa !868
  %246 = lshr i64 %215, 24
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %247, i8* %248, align 1, !tbaa !868
  %249 = lshr i64 %215, 32
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %250, i8* %251, align 1, !tbaa !868
  %252 = lshr i64 %215, 40
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %253, i8* %254, align 1, !tbaa !868
  %255 = lshr i64 %215, 48
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %256, i8* %257, align 1, !tbaa !868
  %258 = lshr i64 %215, 56
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %259, i8* %260, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = shl i64 %3, 48
  %10 = ashr exact i64 %9, 48
  %11 = shl i64 %4, 48
  %12 = ashr exact i64 %11, 48
  %13 = mul nsw i64 %12, %10
  %14 = lshr i64 %13, 14
  %15 = add nuw nsw i64 %14, 1
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8, !tbaa !869
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %20 = shl i64 %3, 32
  %21 = ashr i64 %20, 48
  %22 = shl i64 %4, 32
  %23 = ashr i64 %22, 48
  %24 = mul nsw i64 %23, %21
  %25 = lshr i64 %24, 14
  %26 = add nuw nsw i64 %25, 1
  %27 = lshr i64 %26, 1
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %19, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %28, i16* %29, align 2, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = shl i64 %3, 16
  %32 = ashr i64 %31, 48
  %33 = shl i64 %4, 16
  %34 = ashr i64 %33, 48
  %35 = mul nsw i64 %34, %32
  %36 = lshr i64 %35, 14
  %37 = add nuw nsw i64 %36, 1
  %38 = lshr i64 %37, 1
  %39 = trunc i64 %38 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %39, i16* %40, align 4, !tbaa !869
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %42 = ashr i64 %3, 48
  %43 = ashr i64 %4, 48
  %44 = mul nsw i64 %43, %42
  %45 = lshr i64 %44, 14
  %46 = add nuw nsw i64 %45, 1
  %47 = lshr i64 %46, 1
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %41, i64* %6, align 8
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %48, i16* %49, align 2, !tbaa !869
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %51 = lshr i64 %50, 16
  %52 = lshr i64 %50, 32
  %53 = lshr i64 %50, 48
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = bitcast i64* %2 to [4 x i16]*
  %59 = bitcast i64* %2 to i16*
  store i16 %54, i16* %59, align 1, !tbaa !869
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 1
  store i16 %55, i16* %60, align 1, !tbaa !869
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 2
  store i16 %56, i16* %61, align 1, !tbaa !869
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 3
  store i16 %57, i16* %62, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = bitcast i64* %6 to i8*
  %18 = bitcast i64* %6 to [4 x i16]*
  %19 = shl i64 %3, 48
  %20 = ashr exact i64 %19, 48
  %21 = sext i16 %10 to i64
  %22 = mul nsw i64 %21, %20
  %23 = lshr i64 %22, 14
  %24 = add nuw nsw i64 %23, 1
  %25 = lshr i64 %24, 1
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %6, align 8
  %27 = bitcast i64* %6 to i16*
  store i16 %26, i16* %27, align 8, !tbaa !869
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %29 = shl i64 %3, 32
  %30 = ashr i64 %29, 48
  %31 = sext i16 %12 to i64
  %32 = mul nsw i64 %31, %30
  %33 = lshr i64 %32, 14
  %34 = add nuw nsw i64 %33, 1
  %35 = lshr i64 %34, 1
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %28, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %39 = shl i64 %3, 16
  %40 = ashr i64 %39, 48
  %41 = sext i16 %14 to i64
  %42 = mul nsw i64 %41, %40
  %43 = lshr i64 %42, 14
  %44 = add nuw nsw i64 %43, 1
  %45 = lshr i64 %44, 1
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %38, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %46, i16* %47, align 4, !tbaa !869
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %49 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %50 = load i16, i16* %49, align 2, !tbaa !869
  %51 = sext i16 %50 to i64
  %52 = sext i16 %16 to i64
  %53 = mul nsw i64 %52, %51
  %54 = lshr i64 %53, 14
  %55 = add nuw nsw i64 %54, 1
  %56 = lshr i64 %55, 1
  %57 = trunc i64 %56 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %48, i64* %6, align 8
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %57, i16* %58, align 2, !tbaa !869
  %59 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %60 = lshr i64 %59, 16
  %61 = lshr i64 %59, 32
  %62 = lshr i64 %59, 48
  %63 = trunc i64 %59 to i16
  %64 = trunc i64 %60 to i16
  %65 = trunc i64 %61 to i16
  %66 = trunc i64 %62 to i16
  %67 = bitcast i64* %2 to [4 x i16]*
  %68 = bitcast i64* %2 to i16*
  store i16 %63, i16* %68, align 1, !tbaa !869
  %69 = getelementptr inbounds [4 x i16], [4 x i16]* %67, i64 0, i64 1
  store i16 %64, i16* %69, align 1, !tbaa !869
  %70 = getelementptr inbounds [4 x i16], [4 x i16]* %67, i64 0, i64 2
  store i16 %65, i16* %70, align 1, !tbaa !869
  %71 = getelementptr inbounds [4 x i16], [4 x i16]* %67, i64 0, i64 3
  store i16 %66, i16* %71, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = shl i64 %24, 48
  %26 = ashr exact i64 %25, 48
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = shl i64 %27, 48
  %29 = ashr exact i64 %28, 48
  %30 = mul nsw i64 %29, %26
  %31 = lshr i64 %30, 14
  %32 = add nuw nsw i64 %31, 1
  %33 = lshr i64 %32, 1
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %35 = bitcast <2 x i64>* %6 to i16*
  store i16 %34, i16* %35, align 16, !tbaa !869
  %36 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %37 = shl i64 %24, 32
  %38 = ashr i64 %37, 48
  %39 = shl i64 %27, 32
  %40 = ashr i64 %39, 48
  %41 = mul nsw i64 %40, %38
  %42 = lshr i64 %41, 14
  %43 = add nuw nsw i64 %42, 1
  %44 = lshr i64 %43, 1
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %36, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %45, i16* %46, align 2, !tbaa !869
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = shl i64 %24, 16
  %49 = ashr i64 %48, 48
  %50 = shl i64 %27, 16
  %51 = ashr i64 %50, 48
  %52 = mul nsw i64 %51, %49
  %53 = lshr i64 %52, 14
  %54 = add nuw nsw i64 %53, 1
  %55 = lshr i64 %54, 1
  %56 = trunc i64 %55 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %56, i16* %57, align 4, !tbaa !869
  %58 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %59 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %60 = load i16, i16* %59, align 2, !tbaa !869
  %61 = sext i16 %60 to i64
  %62 = ashr i64 %27, 48
  %63 = mul nsw i64 %62, %61
  %64 = lshr i64 %63, 14
  %65 = add nuw nsw i64 %64, 1
  %66 = lshr i64 %65, 1
  %67 = trunc i64 %66 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %58, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %67, i16* %68, align 2, !tbaa !869
  %69 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %71 = bitcast i64* %70 to i16*
  %72 = load i16, i16* %71, align 8, !tbaa !869
  %73 = sext i16 %72 to i64
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %75 = bitcast i64* %74 to i16*
  %76 = load i16, i16* %75, align 8, !tbaa !869
  %77 = sext i16 %76 to i64
  %78 = mul nsw i64 %77, %73
  %79 = lshr i64 %78, 14
  %80 = add nuw nsw i64 %79, 1
  %81 = lshr i64 %80, 1
  %82 = trunc i64 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  store i16 %82, i16* %84, align 8, !tbaa !869
  %85 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %86 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %87 = load i16, i16* %86, align 2, !tbaa !869
  %88 = sext i16 %87 to i64
  %89 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %90 = load i16, i16* %89, align 2, !tbaa !869
  %91 = sext i16 %90 to i64
  %92 = mul nsw i64 %91, %88
  %93 = lshr i64 %92, 14
  %94 = add nuw nsw i64 %93, 1
  %95 = lshr i64 %94, 1
  %96 = trunc i64 %95 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 %85, i64* %22, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %96, i16* %97, align 2, !tbaa !869
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %100 = load i16, i16* %99, align 4, !tbaa !869
  %101 = sext i16 %100 to i64
  %102 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %103 = load i16, i16* %102, align 4, !tbaa !869
  %104 = sext i16 %103 to i64
  %105 = mul nsw i64 %104, %101
  %106 = lshr i64 %105, 14
  %107 = add nuw nsw i64 %106, 1
  %108 = lshr i64 %107, 1
  %109 = trunc i64 %108 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %110 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %109, i16* %110, align 4, !tbaa !869
  %111 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %112 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %113 = load i16, i16* %112, align 2, !tbaa !869
  %114 = sext i16 %113 to i64
  %115 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %116 = load i16, i16* %115, align 2, !tbaa !869
  %117 = sext i16 %116 to i64
  %118 = mul nsw i64 %117, %114
  %119 = lshr i64 %118, 14
  %120 = add nuw nsw i64 %119, 1
  %121 = lshr i64 %120, 1
  %122 = trunc i64 %121 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 %111, i64* %22, align 8
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %122, i16* %123, align 2, !tbaa !869
  %124 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %125 = lshr i64 %69, 16
  %126 = lshr i64 %69, 32
  %127 = lshr i64 %69, 48
  %128 = trunc i64 %69 to i16
  %129 = trunc i64 %125 to i16
  %130 = trunc i64 %126 to i16
  %131 = trunc i64 %127 to i16
  %132 = bitcast i8* %2 to i16*
  store i16 %128, i16* %132, align 1, !tbaa !869
  %133 = getelementptr inbounds i8, i8* %2, i64 2
  %134 = bitcast i8* %133 to i16*
  store i16 %129, i16* %134, align 1, !tbaa !869
  %135 = getelementptr inbounds i8, i8* %2, i64 4
  %136 = bitcast i8* %135 to i16*
  store i16 %130, i16* %136, align 1, !tbaa !869
  %137 = getelementptr inbounds i8, i8* %2, i64 6
  %138 = bitcast i8* %137 to i16*
  store i16 %131, i16* %138, align 1, !tbaa !869
  %139 = trunc i64 %124 to i16
  %140 = getelementptr inbounds i8, i8* %2, i64 8
  %141 = bitcast i8* %140 to i16*
  store i16 %139, i16* %141, align 1, !tbaa !869
  %142 = lshr i64 %124, 16
  %143 = trunc i64 %142 to i16
  %144 = getelementptr inbounds i8, i8* %2, i64 10
  %145 = bitcast i8* %144 to i16*
  store i16 %143, i16* %145, align 1, !tbaa !869
  %146 = lshr i64 %124, 32
  %147 = trunc i64 %146 to i16
  %148 = getelementptr inbounds i8, i8* %2, i64 12
  %149 = bitcast i8* %148 to i16*
  store i16 %147, i16* %149, align 1, !tbaa !869
  %150 = lshr i64 %124, 48
  %151 = trunc i64 %150 to i16
  %152 = getelementptr inbounds i8, i8* %2, i64 14
  %153 = bitcast i8* %152 to i16*
  store i16 %151, i16* %153, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMULHRSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = shl i64 %55, 48
  %57 = ashr exact i64 %56, 48
  %58 = sext i16 %18 to i64
  %59 = mul nsw i64 %58, %57
  %60 = lshr i64 %59, 14
  %61 = add nuw nsw i64 %60, 1
  %62 = lshr i64 %61, 1
  %63 = trunc i64 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %64 = bitcast <2 x i64>* %6 to i16*
  store i16 %63, i16* %64, align 16, !tbaa !869
  %65 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %66 = shl i64 %55, 32
  %67 = ashr i64 %66, 48
  %68 = sext i16 %20 to i64
  %69 = mul nsw i64 %68, %67
  %70 = lshr i64 %69, 14
  %71 = add nuw nsw i64 %70, 1
  %72 = lshr i64 %71, 1
  %73 = trunc i64 %72 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %65, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %73, i16* %74, align 2, !tbaa !869
  %75 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 2
  %77 = load i16, i16* %76, align 4, !tbaa !869
  %78 = sext i16 %77 to i64
  %79 = sext i16 %22 to i64
  %80 = mul nsw i64 %79, %78
  %81 = lshr i64 %80, 14
  %82 = add nuw nsw i64 %81, 1
  %83 = lshr i64 %82, 1
  %84 = trunc i64 %83 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %75, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %84, i16* %85, align 4, !tbaa !869
  %86 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %88 = load i16, i16* %87, align 2, !tbaa !869
  %89 = sext i16 %88 to i64
  %90 = sext i16 %24 to i64
  %91 = mul nsw i64 %90, %89
  %92 = lshr i64 %91, 14
  %93 = add nuw nsw i64 %92, 1
  %94 = lshr i64 %93, 1
  %95 = trunc i64 %94 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %86, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %95, i16* %96, align 2, !tbaa !869
  %97 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %99 = bitcast i64* %98 to i16*
  %100 = load i16, i16* %99, align 8, !tbaa !869
  %101 = sext i16 %100 to i64
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %103 = bitcast i64* %102 to i16*
  %104 = load i16, i16* %103, align 8, !tbaa !869
  %105 = sext i16 %104 to i64
  %106 = mul nsw i64 %105, %101
  %107 = lshr i64 %106, 14
  %108 = add nuw nsw i64 %107, 1
  %109 = lshr i64 %108, 1
  %110 = trunc i64 %109 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %97, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %112 = bitcast i64* %111 to i16*
  store i16 %110, i16* %112, align 8, !tbaa !869
  %113 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %115 = load i16, i16* %114, align 2, !tbaa !869
  %116 = sext i16 %115 to i64
  %117 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %118 = load i16, i16* %117, align 2, !tbaa !869
  %119 = sext i16 %118 to i64
  %120 = mul nsw i64 %119, %116
  %121 = lshr i64 %120, 14
  %122 = add nuw nsw i64 %121, 1
  %123 = lshr i64 %122, 1
  %124 = trunc i64 %123 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %97, i64* %52, align 16
  store i64 %113, i64* %53, align 8
  %125 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %124, i16* %125, align 2, !tbaa !869
  %126 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %128 = load i16, i16* %127, align 4, !tbaa !869
  %129 = sext i16 %128 to i64
  %130 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %131 = load i16, i16* %130, align 4, !tbaa !869
  %132 = sext i16 %131 to i64
  %133 = mul nsw i64 %132, %129
  %134 = lshr i64 %133, 14
  %135 = add nuw nsw i64 %134, 1
  %136 = lshr i64 %135, 1
  %137 = trunc i64 %136 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %97, i64* %52, align 16
  store i64 %126, i64* %53, align 8
  %138 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %137, i16* %138, align 4, !tbaa !869
  %139 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %140 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %141 = load i16, i16* %140, align 2, !tbaa !869
  %142 = sext i16 %141 to i64
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %144 = load i16, i16* %143, align 2, !tbaa !869
  %145 = sext i16 %144 to i64
  %146 = mul nsw i64 %145, %142
  %147 = lshr i64 %146, 14
  %148 = add nuw nsw i64 %147, 1
  %149 = lshr i64 %148, 1
  %150 = trunc i64 %149 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %97, i64* %52, align 16
  store i64 %139, i64* %53, align 8
  %151 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %150, i16* %151, align 2, !tbaa !869
  %152 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %153 = lshr i64 %97, 16
  %154 = lshr i64 %97, 32
  %155 = lshr i64 %97, 48
  %156 = trunc i64 %97 to i16
  %157 = trunc i64 %153 to i16
  %158 = trunc i64 %154 to i16
  %159 = trunc i64 %155 to i16
  %160 = bitcast i8* %2 to i16*
  store i16 %156, i16* %160, align 1, !tbaa !869
  %161 = getelementptr inbounds i8, i8* %2, i64 2
  %162 = bitcast i8* %161 to i16*
  store i16 %157, i16* %162, align 1, !tbaa !869
  %163 = getelementptr inbounds i8, i8* %2, i64 4
  %164 = bitcast i8* %163 to i16*
  store i16 %158, i16* %164, align 1, !tbaa !869
  %165 = getelementptr inbounds i8, i8* %2, i64 6
  %166 = bitcast i8* %165 to i16*
  store i16 %159, i16* %166, align 1, !tbaa !869
  %167 = trunc i64 %152 to i16
  %168 = getelementptr inbounds i8, i8* %2, i64 8
  %169 = bitcast i8* %168 to i16*
  store i16 %167, i16* %169, align 1, !tbaa !869
  %170 = lshr i64 %152, 16
  %171 = trunc i64 %170 to i16
  %172 = getelementptr inbounds i8, i8* %2, i64 10
  %173 = bitcast i8* %172 to i16*
  store i16 %171, i16* %173, align 1, !tbaa !869
  %174 = lshr i64 %152, 32
  %175 = trunc i64 %174 to i16
  %176 = getelementptr inbounds i8, i8* %2, i64 12
  %177 = bitcast i8* %176 to i16*
  store i16 %175, i16* %177, align 1, !tbaa !869
  %178 = lshr i64 %152, 48
  %179 = trunc i64 %178 to i16
  %180 = getelementptr inbounds i8, i8* %2, i64 14
  %181 = bitcast i8* %180 to i16*
  store i16 %179, i16* %181, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = shl i32 %9, 16
  %11 = ashr exact i32 %10, 16
  %12 = trunc i64 %4 to i32
  %13 = shl i32 %12, 16
  %14 = ashr exact i32 %13, 16
  %15 = mul nsw i32 %14, %11
  %16 = trunc i64 %3 to i32
  %17 = ashr i32 %16, 16
  %18 = trunc i64 %4 to i32
  %19 = ashr i32 %18, 16
  %20 = mul nsw i32 %19, %17
  %21 = add i32 %20, %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %22 = bitcast i64* %6 to i32*
  store i32 %21, i32* %22, align 8, !tbaa !877
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %24 = lshr i64 %3, 32
  %25 = shl nuw nsw i64 %24, 16
  %26 = trunc i64 %25 to i32
  %27 = ashr exact i32 %26, 16
  %28 = lshr i64 %4, 32
  %29 = shl nuw nsw i64 %28, 16
  %30 = trunc i64 %29 to i32
  %31 = ashr exact i32 %30, 16
  %32 = mul nsw i32 %31, %27
  %33 = lshr i64 %3, 48
  %34 = shl nuw nsw i64 %33, 16
  %35 = trunc i64 %34 to i32
  %36 = ashr exact i32 %35, 16
  %37 = lshr i64 %4, 48
  %38 = shl nuw nsw i64 %37, 16
  %39 = trunc i64 %38 to i32
  %40 = ashr exact i32 %39, 16
  %41 = mul nsw i32 %40, %36
  %42 = add i32 %41, %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %23, i64* %6, align 8
  %43 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %42, i32* %43, align 4, !tbaa !877
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %45 = lshr i64 %44, 32
  %46 = trunc i64 %44 to i32
  %47 = trunc i64 %45 to i32
  %48 = bitcast i64* %2 to [2 x i32]*
  %49 = bitcast i64* %2 to i32*
  store i32 %46, i32* %49, align 1, !tbaa !877
  %50 = getelementptr inbounds [2 x i32], [2 x i32]* %48, i64 0, i64 1
  store i32 %47, i32* %50, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [2 x i32]*
  %16 = trunc i64 %3 to i32
  %17 = shl i32 %16, 16
  %18 = ashr exact i32 %17, 16
  %19 = sext i16 %7 to i32
  %20 = mul nsw i32 %19, %18
  %21 = trunc i64 %3 to i32
  %22 = ashr i32 %21, 16
  %23 = sext i16 %9 to i32
  %24 = mul nsw i32 %23, %22
  %25 = add i32 %24, %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %26 = bitcast i64* %6 to i32*
  store i32 %25, i32* %26, align 8, !tbaa !877
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %28 = lshr i64 %3, 32
  %29 = shl nuw nsw i64 %28, 16
  %30 = trunc i64 %29 to i32
  %31 = ashr exact i32 %30, 16
  %32 = sext i16 %11 to i32
  %33 = mul nsw i32 %32, %31
  %34 = lshr i64 %3, 48
  %35 = shl nuw nsw i64 %34, 16
  %36 = trunc i64 %35 to i32
  %37 = ashr exact i32 %36, 16
  %38 = sext i16 %13 to i32
  %39 = mul nsw i32 %38, %37
  %40 = add i32 %39, %33
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %27, i64* %6, align 8
  %41 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 1
  store i32 %40, i32* %41, align 4, !tbaa !877
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %43 = lshr i64 %42, 32
  %44 = trunc i64 %42 to i32
  %45 = trunc i64 %43 to i32
  %46 = bitcast i64* %2 to [2 x i32]*
  %47 = bitcast i64* %2 to i32*
  store i32 %44, i32* %47, align 1, !tbaa !877
  %48 = getelementptr inbounds [2 x i32], [2 x i32]* %46, i64 0, i64 1
  store i32 %45, i32* %48, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %struct.uint16v8_t*
  %12 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #23
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %3, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %14, i64* %18, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %17, i64* %19, align 8
  %20 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20) #23
  %21 = bitcast i8* %4 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %4, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  store i64 %22, i64* %26, align 8
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  store i64 %25, i64* %27, align 8
  %28 = bitcast <2 x i64>* %6 to i8*
  %29 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %31 = bitcast <2 x i64>* %6 to [4 x i32]*
  %32 = trunc i64 %14 to i32
  %33 = shl i32 %32, 16
  %34 = ashr exact i32 %33, 16
  %35 = trunc i64 %22 to i32
  %36 = shl i32 %35, 16
  %37 = ashr exact i32 %36, 16
  %38 = mul nsw i32 %37, %34
  %39 = trunc i64 %14 to i32
  %40 = ashr i32 %39, 16
  %41 = trunc i64 %22 to i32
  %42 = ashr i32 %41, 16
  %43 = mul nsw i32 %42, %40
  %44 = add i32 %43, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %45 = bitcast <2 x i64>* %6 to i32*
  store i32 %44, i32* %45, align 16, !tbaa !877
  %46 = load i64, i64* %29, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %47 = lshr i64 %14, 32
  %48 = shl nuw nsw i64 %47, 16
  %49 = trunc i64 %48 to i32
  %50 = ashr exact i32 %49, 16
  %51 = lshr i64 %22, 32
  %52 = shl nuw nsw i64 %51, 16
  %53 = trunc i64 %52 to i32
  %54 = ashr exact i32 %53, 16
  %55 = mul nsw i32 %54, %50
  %56 = lshr i64 %14, 48
  %57 = shl nuw nsw i64 %56, 16
  %58 = trunc i64 %57 to i32
  %59 = ashr exact i32 %58, 16
  %60 = lshr i64 %22, 48
  %61 = shl nuw nsw i64 %60, 16
  %62 = trunc i64 %61 to i32
  %63 = ashr exact i32 %62, 16
  %64 = mul nsw i32 %63, %59
  %65 = add i32 %64, %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store i64 %46, i64* %29, align 16
  store i64 0, i64* %30, align 8
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* %31, i64 0, i64 1
  store i32 %65, i32* %66, align 4, !tbaa !877
  %67 = load i64, i64* %29, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %68 = trunc i64 %17 to i32
  %69 = shl i32 %68, 16
  %70 = ashr exact i32 %69, 16
  %71 = trunc i64 %25 to i32
  %72 = shl i32 %71, 16
  %73 = ashr exact i32 %72, 16
  %74 = mul nsw i32 %73, %70
  %75 = trunc i64 %17 to i32
  %76 = ashr i32 %75, 16
  %77 = trunc i64 %25 to i32
  %78 = ashr i32 %77, 16
  %79 = mul nsw i32 %78, %76
  %80 = add i32 %79, %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store i64 %67, i64* %29, align 16
  store i64 0, i64* %30, align 8
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %82 = bitcast i64* %81 to i32*
  store i32 %80, i32* %82, align 8, !tbaa !877
  %83 = load i64, i64* %30, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %85 = load i16, i16* %84, align 4, !tbaa !869
  %86 = sext i16 %85 to i32
  %87 = lshr i64 %25, 32
  %88 = shl nuw nsw i64 %87, 16
  %89 = trunc i64 %88 to i32
  %90 = ashr exact i32 %89, 16
  %91 = mul nsw i32 %90, %86
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = sext i16 %93 to i32
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %96 = load i16, i16* %95, align 2, !tbaa !869
  %97 = sext i16 %96 to i32
  %98 = mul nsw i32 %97, %94
  %99 = add i32 %98, %91
  call void @llvm.lifetime.start(i64 16, i8* nonnull %28)
  store i64 %67, i64* %29, align 16
  store i64 %83, i64* %30, align 8
  %100 = getelementptr inbounds [4 x i32], [4 x i32]* %31, i64 0, i64 3
  store i32 %99, i32* %100, align 4, !tbaa !877
  %101 = load i64, i64* %30, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %28)
  %102 = lshr i64 %67, 32
  %103 = trunc i64 %67 to i32
  %104 = trunc i64 %102 to i32
  %105 = bitcast i8* %2 to i32*
  store i32 %103, i32* %105, align 1, !tbaa !877
  %106 = getelementptr inbounds i8, i8* %2, i64 4
  %107 = bitcast i8* %106 to i32*
  store i32 %104, i32* %107, align 1, !tbaa !877
  %108 = trunc i64 %101 to i32
  %109 = getelementptr inbounds i8, i8* %2, i64 8
  %110 = bitcast i8* %109 to i32*
  store i32 %108, i32* %110, align 1, !tbaa !877
  %111 = lshr i64 %101, 32
  %112 = trunc i64 %111 to i32
  %113 = getelementptr inbounds i8, i8* %2, i64 12
  %114 = bitcast i8* %113 to i32*
  store i32 %112, i32* %114, align 1, !tbaa !877
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMADDWDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #23
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 2
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 4
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 6
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 8
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 10
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 12
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 14
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = bitcast <2 x i64>* %6 to i8*
  %30 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %32 = bitcast <2 x i64>* %6 to [4 x i32]*
  %33 = extractelement <2 x i64> %13, i32 0
  %34 = trunc i64 %33 to i32
  %35 = shl i32 %34, 16
  %36 = ashr exact i32 %35, 16
  %37 = sext i16 %14 to i32
  %38 = mul nsw i32 %37, %36
  %39 = trunc i64 %33 to i32
  %40 = ashr i32 %39, 16
  %41 = sext i16 %16 to i32
  %42 = mul nsw i32 %41, %40
  %43 = add i32 %42, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %29)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %44 = bitcast <2 x i64>* %6 to i32*
  store i32 %43, i32* %44, align 16, !tbaa !877
  %45 = load i64, i64* %30, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %29)
  %46 = lshr i64 %33, 32
  %47 = shl nuw nsw i64 %46, 16
  %48 = trunc i64 %47 to i32
  %49 = ashr exact i32 %48, 16
  %50 = sext i16 %18 to i32
  %51 = mul nsw i32 %50, %49
  %52 = lshr i64 %33, 48
  %53 = shl nuw nsw i64 %52, 16
  %54 = trunc i64 %53 to i32
  %55 = ashr exact i32 %54, 16
  %56 = sext i16 %20 to i32
  %57 = mul nsw i32 %56, %55
  %58 = add i32 %57, %51
  call void @llvm.lifetime.start(i64 16, i8* nonnull %29)
  store i64 %45, i64* %30, align 16
  store i64 0, i64* %31, align 8
  %59 = getelementptr inbounds [4 x i32], [4 x i32]* %32, i64 0, i64 1
  store i32 %58, i32* %59, align 4, !tbaa !877
  %60 = load i64, i64* %30, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %29)
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %62 = bitcast i64* %61 to i16*
  %63 = load i16, i16* %62, align 8, !tbaa !869
  %64 = sext i16 %63 to i32
  %65 = sext i16 %22 to i32
  %66 = mul nsw i32 %65, %64
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2, !tbaa !869
  %69 = sext i16 %68 to i32
  %70 = sext i16 %24 to i32
  %71 = mul nsw i32 %70, %69
  %72 = add i32 %71, %66
  call void @llvm.lifetime.start(i64 16, i8* nonnull %29)
  store i64 %60, i64* %30, align 16
  store i64 0, i64* %31, align 8
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %74 = bitcast i64* %73 to i32*
  store i32 %72, i32* %74, align 8, !tbaa !877
  %75 = load i64, i64* %31, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %29)
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %77 = load i16, i16* %76, align 4, !tbaa !869
  %78 = sext i16 %77 to i32
  %79 = sext i16 %26 to i32
  %80 = mul nsw i32 %79, %78
  %81 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %82 = load i16, i16* %81, align 2, !tbaa !869
  %83 = sext i16 %82 to i32
  %84 = sext i16 %28 to i32
  %85 = mul nsw i32 %84, %83
  %86 = add i32 %85, %80
  call void @llvm.lifetime.start(i64 16, i8* nonnull %29)
  store i64 %60, i64* %30, align 16
  store i64 %75, i64* %31, align 8
  %87 = getelementptr inbounds [4 x i32], [4 x i32]* %32, i64 0, i64 3
  store i32 %86, i32* %87, align 4, !tbaa !877
  %88 = load i64, i64* %31, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %29)
  %89 = lshr i64 %60, 32
  %90 = trunc i64 %60 to i32
  %91 = trunc i64 %89 to i32
  %92 = bitcast i8* %2 to i32*
  store i32 %90, i32* %92, align 1, !tbaa !877
  %93 = getelementptr inbounds i8, i8* %2, i64 4
  %94 = bitcast i8* %93 to i32*
  store i32 %91, i32* %94, align 1, !tbaa !877
  %95 = trunc i64 %88 to i32
  %96 = getelementptr inbounds i8, i8* %2, i64 8
  %97 = bitcast i8* %96 to i32*
  store i32 %95, i32* %97, align 1, !tbaa !877
  %98 = lshr i64 %88, 32
  %99 = trunc i64 %98 to i32
  %100 = getelementptr inbounds i8, i8* %2, i64 12
  %101 = bitcast i8* %100 to i32*
  store i32 %99, i32* %101, align 1, !tbaa !877
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [4 x i16]*
  %15 = trunc i64 %3 to i16
  %16 = and i16 %15, 255
  %17 = trunc i64 %4 to i16
  %18 = shl i16 %17, 8
  %19 = ashr exact i16 %18, 8
  %20 = mul nsw i16 %19, %16
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i16
  %23 = and i16 %22, 255
  %24 = trunc i64 %4 to i16
  %25 = ashr i16 %24, 8
  %26 = mul nsw i16 %25, %23
  %27 = add i16 %26, %20
  %28 = or i16 %26, %20
  %29 = and i16 %26, %20
  %30 = xor i16 %28, -32768
  %31 = and i16 %30, %27
  %32 = icmp slt i16 %31, 0
  %33 = select i1 %32, i16 32767, i16 %27
  %34 = xor i16 %27, -32768
  %35 = and i16 %29, %34
  %36 = icmp slt i16 %35, 0
  %37 = select i1 %36, i16 -32768, i16 %33
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %38 = bitcast i64* %6 to i16*
  store i16 %37, i16* %38, align 8, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %40 = lshr i64 %3, 16
  %41 = trunc i64 %40 to i16
  %42 = and i16 %41, 255
  %43 = lshr i64 %4, 16
  %44 = shl nuw nsw i64 %43, 8
  %45 = trunc i64 %44 to i16
  %46 = ashr exact i16 %45, 8
  %47 = mul nsw i16 %46, %42
  %48 = lshr i64 %3, 24
  %49 = trunc i64 %48 to i16
  %50 = and i16 %49, 255
  %51 = lshr i64 %4, 24
  %52 = shl nuw nsw i64 %51, 8
  %53 = trunc i64 %52 to i16
  %54 = ashr exact i16 %53, 8
  %55 = mul nsw i16 %54, %50
  %56 = add i16 %55, %47
  %57 = or i16 %55, %47
  %58 = and i16 %55, %47
  %59 = xor i16 %57, -32768
  %60 = and i16 %59, %56
  %61 = icmp slt i16 %60, 0
  %62 = select i1 %61, i16 32767, i16 %56
  %63 = xor i16 %56, -32768
  %64 = and i16 %58, %63
  %65 = icmp slt i16 %64, 0
  %66 = select i1 %65, i16 -32768, i16 %62
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %39, i64* %6, align 8
  %67 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  store i16 %66, i16* %67, align 2, !tbaa !869
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = lshr i64 %3, 32
  %70 = trunc i64 %69 to i16
  %71 = and i16 %70, 255
  %72 = lshr i64 %4, 32
  %73 = shl nuw nsw i64 %72, 8
  %74 = trunc i64 %73 to i16
  %75 = ashr exact i16 %74, 8
  %76 = mul nsw i16 %75, %71
  %77 = lshr i64 %3, 40
  %78 = trunc i64 %77 to i16
  %79 = and i16 %78, 255
  %80 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %81 = load i8, i8* %80, align 1, !tbaa !868
  %82 = sext i8 %81 to i16
  %83 = mul nsw i16 %82, %79
  %84 = add i16 %83, %76
  %85 = or i16 %83, %76
  %86 = and i16 %83, %76
  %87 = xor i16 %85, -32768
  %88 = and i16 %87, %84
  %89 = icmp slt i16 %88, 0
  %90 = select i1 %89, i16 32767, i16 %84
  %91 = xor i16 %84, -32768
  %92 = and i16 %86, %91
  %93 = icmp slt i16 %92, 0
  %94 = select i1 %93, i16 -32768, i16 %90
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %95 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  store i16 %94, i16* %95, align 4, !tbaa !869
  %96 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %98 = load i8, i8* %97, align 2, !tbaa !868
  %99 = zext i8 %98 to i16
  %100 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %101 = load i8, i8* %100, align 2, !tbaa !868
  %102 = sext i8 %101 to i16
  %103 = mul nsw i16 %102, %99
  %104 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %105 = load i8, i8* %104, align 1, !tbaa !868
  %106 = zext i8 %105 to i16
  %107 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %108 = load i8, i8* %107, align 1, !tbaa !868
  %109 = sext i8 %108 to i16
  %110 = mul nsw i16 %109, %106
  %111 = add i16 %110, %103
  %112 = or i16 %110, %103
  %113 = and i16 %110, %103
  %114 = xor i16 %112, -32768
  %115 = and i16 %114, %111
  %116 = icmp slt i16 %115, 0
  %117 = select i1 %116, i16 32767, i16 %111
  %118 = xor i16 %111, -32768
  %119 = and i16 %113, %118
  %120 = icmp slt i16 %119, 0
  %121 = select i1 %120, i16 -32768, i16 %117
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %96, i64* %6, align 8
  %122 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  store i16 %121, i16* %122, align 2, !tbaa !869
  %123 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %124 = lshr i64 %123, 16
  %125 = lshr i64 %123, 32
  %126 = lshr i64 %123, 48
  %127 = trunc i64 %123 to i16
  %128 = trunc i64 %124 to i16
  %129 = trunc i64 %125 to i16
  %130 = trunc i64 %126 to i16
  %131 = bitcast i64* %2 to [4 x i16]*
  %132 = bitcast i64* %2 to i16*
  store i16 %127, i16* %132, align 1, !tbaa !869
  %133 = getelementptr inbounds [4 x i16], [4 x i16]* %131, i64 0, i64 1
  store i16 %128, i16* %133, align 1, !tbaa !869
  %134 = getelementptr inbounds [4 x i16], [4 x i16]* %131, i64 0, i64 2
  store i16 %129, i16* %134, align 1, !tbaa !869
  %135 = getelementptr inbounds [4 x i16], [4 x i16]* %131, i64 0, i64 3
  store i16 %130, i16* %135, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [4 x i16]*
  %52 = trunc i64 %3 to i16
  %53 = and i16 %52, 255
  %54 = sext i8 %13 to i16
  %55 = mul nsw i16 %54, %53
  %56 = lshr i64 %3, 8
  %57 = trunc i64 %56 to i16
  %58 = and i16 %57, 255
  %59 = sext i8 %15 to i16
  %60 = mul nsw i16 %59, %58
  %61 = add i16 %60, %55
  %62 = or i16 %60, %55
  %63 = and i16 %60, %55
  %64 = xor i16 %62, -32768
  %65 = and i16 %64, %61
  %66 = icmp slt i16 %65, 0
  %67 = select i1 %66, i16 32767, i16 %61
  %68 = xor i16 %61, -32768
  %69 = and i16 %63, %68
  %70 = icmp slt i16 %69, 0
  %71 = select i1 %70, i16 -32768, i16 %67
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %72 = bitcast i64* %6 to i16*
  store i16 %71, i16* %72, align 8, !tbaa !869
  %73 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %74 = lshr i64 %3, 16
  %75 = trunc i64 %74 to i16
  %76 = and i16 %75, 255
  %77 = sext i8 %17 to i16
  %78 = mul nsw i16 %77, %76
  %79 = lshr i64 %3, 24
  %80 = trunc i64 %79 to i16
  %81 = and i16 %80, 255
  %82 = sext i8 %19 to i16
  %83 = mul nsw i16 %82, %81
  %84 = add i16 %83, %78
  %85 = or i16 %83, %78
  %86 = and i16 %83, %78
  %87 = xor i16 %85, -32768
  %88 = and i16 %87, %84
  %89 = icmp slt i16 %88, 0
  %90 = select i1 %89, i16 32767, i16 %84
  %91 = xor i16 %84, -32768
  %92 = and i16 %86, %91
  %93 = icmp slt i16 %92, 0
  %94 = select i1 %93, i16 -32768, i16 %90
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %73, i64* %6, align 8
  %95 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 1
  store i16 %94, i16* %95, align 2, !tbaa !869
  %96 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %97 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %98 = load i8, i8* %97, align 4, !tbaa !868
  %99 = zext i8 %98 to i16
  %100 = lshr i64 %46, 32
  %101 = shl nuw nsw i64 %100, 8
  %102 = trunc i64 %101 to i16
  %103 = ashr exact i16 %102, 8
  %104 = mul nsw i16 %103, %99
  %105 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %106 = load i8, i8* %105, align 1, !tbaa !868
  %107 = zext i8 %106 to i16
  %108 = lshr i64 %47, 40
  %109 = shl nuw nsw i64 %108, 8
  %110 = trunc i64 %109 to i16
  %111 = ashr exact i16 %110, 8
  %112 = mul nsw i16 %111, %107
  %113 = add i16 %112, %104
  %114 = or i16 %112, %104
  %115 = and i16 %112, %104
  %116 = xor i16 %114, -32768
  %117 = and i16 %116, %113
  %118 = icmp slt i16 %117, 0
  %119 = select i1 %118, i16 32767, i16 %113
  %120 = xor i16 %113, -32768
  %121 = and i16 %115, %120
  %122 = icmp slt i16 %121, 0
  %123 = select i1 %122, i16 -32768, i16 %119
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %96, i64* %6, align 8
  %124 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 2
  store i16 %123, i16* %124, align 4, !tbaa !869
  %125 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %126 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %127 = load i8, i8* %126, align 2, !tbaa !868
  %128 = zext i8 %127 to i16
  %129 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %130 = load i8, i8* %129, align 2, !tbaa !868
  %131 = sext i8 %130 to i16
  %132 = mul nsw i16 %131, %128
  %133 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %134 = load i8, i8* %133, align 1, !tbaa !868
  %135 = zext i8 %134 to i16
  %136 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %137 = load i8, i8* %136, align 1, !tbaa !868
  %138 = sext i8 %137 to i16
  %139 = mul nsw i16 %138, %135
  %140 = add i16 %139, %132
  %141 = or i16 %139, %132
  %142 = and i16 %139, %132
  %143 = xor i16 %141, -32768
  %144 = and i16 %143, %140
  %145 = icmp slt i16 %144, 0
  %146 = select i1 %145, i16 32767, i16 %140
  %147 = xor i16 %140, -32768
  %148 = and i16 %142, %147
  %149 = icmp slt i16 %148, 0
  %150 = select i1 %149, i16 -32768, i16 %146
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %125, i64* %6, align 8
  %151 = getelementptr inbounds [4 x i16], [4 x i16]* %51, i64 0, i64 3
  store i16 %150, i16* %151, align 2, !tbaa !869
  %152 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %153 = lshr i64 %152, 16
  %154 = lshr i64 %152, 32
  %155 = lshr i64 %152, 48
  %156 = trunc i64 %152 to i16
  %157 = trunc i64 %153 to i16
  %158 = trunc i64 %154 to i16
  %159 = trunc i64 %155 to i16
  %160 = bitcast i64* %2 to [4 x i16]*
  %161 = bitcast i64* %2 to i16*
  store i16 %156, i16* %161, align 1, !tbaa !869
  %162 = getelementptr inbounds [4 x i16], [4 x i16]* %160, i64 0, i64 1
  store i16 %157, i16* %162, align 1, !tbaa !869
  %163 = getelementptr inbounds [4 x i16], [4 x i16]* %160, i64 0, i64 2
  store i16 %158, i16* %163, align 1, !tbaa !869
  %164 = getelementptr inbounds [4 x i16], [4 x i16]* %160, i64 0, i64 3
  store i16 %159, i16* %164, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = and i16 %25, 255
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = trunc i64 %27 to i16
  %29 = shl i16 %28, 8
  %30 = ashr exact i16 %29, 8
  %31 = mul nsw i16 %30, %26
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i16
  %34 = and i16 %33, 255
  %35 = trunc i64 %27 to i16
  %36 = ashr i16 %35, 8
  %37 = mul nsw i16 %36, %34
  %38 = add i16 %37, %31
  %39 = or i16 %37, %31
  %40 = and i16 %37, %31
  %41 = xor i16 %39, -32768
  %42 = and i16 %41, %38
  %43 = icmp slt i16 %42, 0
  %44 = select i1 %43, i16 32767, i16 %38
  %45 = xor i16 %38, -32768
  %46 = and i16 %40, %45
  %47 = icmp slt i16 %46, 0
  %48 = select i1 %47, i16 -32768, i16 %44
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %49 = bitcast <2 x i64>* %6 to i16*
  store i16 %48, i16* %49, align 16, !tbaa !869
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = lshr i64 %24, 16
  %52 = trunc i64 %51 to i16
  %53 = and i16 %52, 255
  %54 = lshr i64 %27, 16
  %55 = shl nuw nsw i64 %54, 8
  %56 = trunc i64 %55 to i16
  %57 = ashr exact i16 %56, 8
  %58 = mul nsw i16 %57, %53
  %59 = lshr i64 %24, 24
  %60 = trunc i64 %59 to i16
  %61 = and i16 %60, 255
  %62 = lshr i64 %27, 24
  %63 = shl nuw nsw i64 %62, 8
  %64 = trunc i64 %63 to i16
  %65 = ashr exact i16 %64, 8
  %66 = mul nsw i16 %65, %61
  %67 = add i16 %66, %58
  %68 = or i16 %66, %58
  %69 = and i16 %66, %58
  %70 = xor i16 %68, -32768
  %71 = and i16 %70, %67
  %72 = icmp slt i16 %71, 0
  %73 = select i1 %72, i16 32767, i16 %67
  %74 = xor i16 %67, -32768
  %75 = and i16 %69, %74
  %76 = icmp slt i16 %75, 0
  %77 = select i1 %76, i16 -32768, i16 %73
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %77, i16* %78, align 2, !tbaa !869
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %81 = load i8, i8* %80, align 4, !tbaa !868
  %82 = zext i8 %81 to i16
  %83 = lshr i64 %27, 32
  %84 = shl nuw nsw i64 %83, 8
  %85 = trunc i64 %84 to i16
  %86 = ashr exact i16 %85, 8
  %87 = mul nsw i16 %86, %82
  %88 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %89 = load i8, i8* %88, align 1, !tbaa !868
  %90 = zext i8 %89 to i16
  %91 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %92 = load i8, i8* %91, align 1, !tbaa !868
  %93 = sext i8 %92 to i16
  %94 = mul nsw i16 %93, %90
  %95 = add i16 %94, %87
  %96 = or i16 %94, %87
  %97 = and i16 %94, %87
  %98 = xor i16 %96, -32768
  %99 = and i16 %98, %95
  %100 = icmp slt i16 %99, 0
  %101 = select i1 %100, i16 32767, i16 %95
  %102 = xor i16 %95, -32768
  %103 = and i16 %97, %102
  %104 = icmp slt i16 %103, 0
  %105 = select i1 %104, i16 -32768, i16 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %106 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %105, i16* %106, align 4, !tbaa !869
  %107 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %109 = load i8, i8* %108, align 2, !tbaa !868
  %110 = zext i8 %109 to i16
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %112 = load i8, i8* %111, align 2, !tbaa !868
  %113 = sext i8 %112 to i16
  %114 = mul nsw i16 %113, %110
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %116 = load i8, i8* %115, align 1, !tbaa !868
  %117 = zext i8 %116 to i16
  %118 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %119 = load i8, i8* %118, align 1, !tbaa !868
  %120 = sext i8 %119 to i16
  %121 = mul nsw i16 %120, %117
  %122 = add i16 %121, %114
  %123 = or i16 %121, %114
  %124 = and i16 %121, %114
  %125 = xor i16 %123, -32768
  %126 = and i16 %125, %122
  %127 = icmp slt i16 %126, 0
  %128 = select i1 %127, i16 32767, i16 %122
  %129 = xor i16 %122, -32768
  %130 = and i16 %124, %129
  %131 = icmp slt i16 %130, 0
  %132 = select i1 %131, i16 -32768, i16 %128
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %107, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %132, i16* %133, align 2, !tbaa !869
  %134 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %135 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %136 = bitcast i64* %135 to i8*
  %137 = load i8, i8* %136, align 8, !tbaa !868
  %138 = zext i8 %137 to i16
  %139 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %140 = bitcast i64* %139 to i8*
  %141 = load i8, i8* %140, align 8, !tbaa !868
  %142 = sext i8 %141 to i16
  %143 = mul nsw i16 %142, %138
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %145 = load i8, i8* %144, align 1, !tbaa !868
  %146 = zext i8 %145 to i16
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %148 = load i8, i8* %147, align 1, !tbaa !868
  %149 = sext i8 %148 to i16
  %150 = mul nsw i16 %149, %146
  %151 = add i16 %150, %143
  %152 = or i16 %150, %143
  %153 = and i16 %150, %143
  %154 = xor i16 %152, -32768
  %155 = and i16 %154, %151
  %156 = icmp slt i16 %155, 0
  %157 = select i1 %156, i16 32767, i16 %151
  %158 = xor i16 %151, -32768
  %159 = and i16 %153, %158
  %160 = icmp slt i16 %159, 0
  %161 = select i1 %160, i16 -32768, i16 %157
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %163 = bitcast i64* %162 to i16*
  store i16 %161, i16* %163, align 8, !tbaa !869
  %164 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %165 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %166 = load i8, i8* %165, align 2, !tbaa !868
  %167 = zext i8 %166 to i16
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %169 = load i8, i8* %168, align 2, !tbaa !868
  %170 = sext i8 %169 to i16
  %171 = mul nsw i16 %170, %167
  %172 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %173 = load i8, i8* %172, align 1, !tbaa !868
  %174 = zext i8 %173 to i16
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %176 = load i8, i8* %175, align 1, !tbaa !868
  %177 = sext i8 %176 to i16
  %178 = mul nsw i16 %177, %174
  %179 = add i16 %178, %171
  %180 = or i16 %178, %171
  %181 = and i16 %178, %171
  %182 = xor i16 %180, -32768
  %183 = and i16 %182, %179
  %184 = icmp slt i16 %183, 0
  %185 = select i1 %184, i16 32767, i16 %179
  %186 = xor i16 %179, -32768
  %187 = and i16 %181, %186
  %188 = icmp slt i16 %187, 0
  %189 = select i1 %188, i16 -32768, i16 %185
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 %164, i64* %22, align 8
  %190 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %189, i16* %190, align 2, !tbaa !869
  %191 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %193 = load i8, i8* %192, align 4, !tbaa !868
  %194 = zext i8 %193 to i16
  %195 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %196 = load i8, i8* %195, align 4, !tbaa !868
  %197 = sext i8 %196 to i16
  %198 = mul nsw i16 %197, %194
  %199 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %200 = load i8, i8* %199, align 1, !tbaa !868
  %201 = zext i8 %200 to i16
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %203 = load i8, i8* %202, align 1, !tbaa !868
  %204 = sext i8 %203 to i16
  %205 = mul nsw i16 %204, %201
  %206 = add i16 %205, %198
  %207 = or i16 %205, %198
  %208 = and i16 %205, %198
  %209 = xor i16 %207, -32768
  %210 = and i16 %209, %206
  %211 = icmp slt i16 %210, 0
  %212 = select i1 %211, i16 32767, i16 %206
  %213 = xor i16 %206, -32768
  %214 = and i16 %208, %213
  %215 = icmp slt i16 %214, 0
  %216 = select i1 %215, i16 -32768, i16 %212
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 %191, i64* %22, align 8
  %217 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %216, i16* %217, align 4, !tbaa !869
  %218 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %219 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %220 = load i8, i8* %219, align 2, !tbaa !868
  %221 = zext i8 %220 to i16
  %222 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %223 = load i8, i8* %222, align 2, !tbaa !868
  %224 = sext i8 %223 to i16
  %225 = mul nsw i16 %224, %221
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %227 = load i8, i8* %226, align 1, !tbaa !868
  %228 = zext i8 %227 to i16
  %229 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %230 = load i8, i8* %229, align 1, !tbaa !868
  %231 = sext i8 %230 to i16
  %232 = mul nsw i16 %231, %228
  %233 = add i16 %232, %225
  %234 = or i16 %232, %225
  %235 = and i16 %232, %225
  %236 = xor i16 %234, -32768
  %237 = and i16 %236, %233
  %238 = icmp slt i16 %237, 0
  %239 = select i1 %238, i16 32767, i16 %233
  %240 = xor i16 %233, -32768
  %241 = and i16 %235, %240
  %242 = icmp slt i16 %241, 0
  %243 = select i1 %242, i16 -32768, i16 %239
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %134, i64* %21, align 16
  store i64 %218, i64* %22, align 8
  %244 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %243, i16* %244, align 2, !tbaa !869
  %245 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %246 = lshr i64 %134, 16
  %247 = lshr i64 %134, 32
  %248 = lshr i64 %134, 48
  %249 = trunc i64 %134 to i16
  %250 = trunc i64 %246 to i16
  %251 = trunc i64 %247 to i16
  %252 = trunc i64 %248 to i16
  %253 = bitcast i8* %2 to i16*
  store i16 %249, i16* %253, align 1, !tbaa !869
  %254 = getelementptr inbounds i8, i8* %2, i64 2
  %255 = bitcast i8* %254 to i16*
  store i16 %250, i16* %255, align 1, !tbaa !869
  %256 = getelementptr inbounds i8, i8* %2, i64 4
  %257 = bitcast i8* %256 to i16*
  store i16 %251, i16* %257, align 1, !tbaa !869
  %258 = getelementptr inbounds i8, i8* %2, i64 6
  %259 = bitcast i8* %258 to i16*
  store i16 %252, i16* %259, align 1, !tbaa !869
  %260 = trunc i64 %245 to i16
  %261 = getelementptr inbounds i8, i8* %2, i64 8
  %262 = bitcast i8* %261 to i16*
  store i16 %260, i16* %262, align 1, !tbaa !869
  %263 = lshr i64 %245, 16
  %264 = trunc i64 %263 to i16
  %265 = getelementptr inbounds i8, i8* %2, i64 10
  %266 = bitcast i8* %265 to i16*
  store i16 %264, i16* %266, align 1, !tbaa !869
  %267 = lshr i64 %245, 32
  %268 = trunc i64 %267 to i16
  %269 = getelementptr inbounds i8, i8* %2, i64 12
  %270 = bitcast i8* %269 to i16*
  store i16 %268, i16* %270, align 1, !tbaa !869
  %271 = lshr i64 %245, 48
  %272 = trunc i64 %271 to i16
  %273 = getelementptr inbounds i8, i8* %2, i64 14
  %274 = bitcast i8* %273 to i16*
  store i16 %272, i16* %274, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PMADDUBSWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [8 x i16]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i16
  %93 = and i16 %92, 255
  %94 = sext i8 %18 to i16
  %95 = mul nsw i16 %94, %93
  %96 = lshr i64 %91, 8
  %97 = trunc i64 %96 to i16
  %98 = and i16 %97, 255
  %99 = sext i8 %20 to i16
  %100 = mul nsw i16 %99, %98
  %101 = add i16 %100, %95
  %102 = or i16 %100, %95
  %103 = and i16 %100, %95
  %104 = xor i16 %102, -32768
  %105 = and i16 %104, %101
  %106 = icmp slt i16 %105, 0
  %107 = select i1 %106, i16 32767, i16 %101
  %108 = xor i16 %101, -32768
  %109 = and i16 %103, %108
  %110 = icmp slt i16 %109, 0
  %111 = select i1 %110, i16 -32768, i16 %107
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %112 = bitcast <2 x i64>* %6 to i16*
  store i16 %111, i16* %112, align 16, !tbaa !869
  %113 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %115 = load i8, i8* %114, align 2, !tbaa !868
  %116 = zext i8 %115 to i16
  %117 = sext i8 %22 to i16
  %118 = mul nsw i16 %117, %116
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %120 = load i8, i8* %119, align 1, !tbaa !868
  %121 = zext i8 %120 to i16
  %122 = sext i8 %24 to i16
  %123 = mul nsw i16 %122, %121
  %124 = add i16 %123, %118
  %125 = or i16 %123, %118
  %126 = and i16 %123, %118
  %127 = xor i16 %125, -32768
  %128 = and i16 %127, %124
  %129 = icmp slt i16 %128, 0
  %130 = select i1 %129, i16 32767, i16 %124
  %131 = xor i16 %124, -32768
  %132 = and i16 %126, %131
  %133 = icmp slt i16 %132, 0
  %134 = select i1 %133, i16 -32768, i16 %130
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %113, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %135 = getelementptr inbounds [8 x i16], [8 x i16]* %90, i64 0, i64 1
  store i16 %134, i16* %135, align 2, !tbaa !869
  %136 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %138 = load i8, i8* %137, align 4, !tbaa !868
  %139 = zext i8 %138 to i16
  %140 = extractelement <2 x i64> %83, i32 0
  %141 = lshr i64 %140, 32
  %142 = shl nuw nsw i64 %141, 8
  %143 = trunc i64 %142 to i16
  %144 = ashr exact i16 %143, 8
  %145 = mul nsw i16 %144, %139
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %147 = load i8, i8* %146, align 1, !tbaa !868
  %148 = zext i8 %147 to i16
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %150 = load i8, i8* %149, align 1, !tbaa !868
  %151 = sext i8 %150 to i16
  %152 = mul nsw i16 %151, %148
  %153 = add i16 %152, %145
  %154 = or i16 %152, %145
  %155 = and i16 %152, %145
  %156 = xor i16 %154, -32768
  %157 = and i16 %156, %153
  %158 = icmp slt i16 %157, 0
  %159 = select i1 %158, i16 32767, i16 %153
  %160 = xor i16 %153, -32768
  %161 = and i16 %155, %160
  %162 = icmp slt i16 %161, 0
  %163 = select i1 %162, i16 -32768, i16 %159
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %136, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %164 = getelementptr inbounds [8 x i16], [8 x i16]* %90, i64 0, i64 2
  store i16 %163, i16* %164, align 4, !tbaa !869
  %165 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %167 = load i8, i8* %166, align 2, !tbaa !868
  %168 = zext i8 %167 to i16
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %170 = load i8, i8* %169, align 2, !tbaa !868
  %171 = sext i8 %170 to i16
  %172 = mul nsw i16 %171, %168
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %174 = load i8, i8* %173, align 1, !tbaa !868
  %175 = zext i8 %174 to i16
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = sext i8 %177 to i16
  %179 = mul nsw i16 %178, %175
  %180 = add i16 %179, %172
  %181 = or i16 %179, %172
  %182 = and i16 %179, %172
  %183 = xor i16 %181, -32768
  %184 = and i16 %183, %180
  %185 = icmp slt i16 %184, 0
  %186 = select i1 %185, i16 32767, i16 %180
  %187 = xor i16 %180, -32768
  %188 = and i16 %182, %187
  %189 = icmp slt i16 %188, 0
  %190 = select i1 %189, i16 -32768, i16 %186
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %165, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %191 = getelementptr inbounds [8 x i16], [8 x i16]* %90, i64 0, i64 3
  store i16 %190, i16* %191, align 2, !tbaa !869
  %192 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %193 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %194 = bitcast i64* %193 to i8*
  %195 = load i8, i8* %194, align 8, !tbaa !868
  %196 = zext i8 %195 to i16
  %197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %198 = bitcast i64* %197 to i8*
  %199 = load i8, i8* %198, align 8, !tbaa !868
  %200 = sext i8 %199 to i16
  %201 = mul nsw i16 %200, %196
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %203 = load i8, i8* %202, align 1, !tbaa !868
  %204 = zext i8 %203 to i16
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %206 = load i8, i8* %205, align 1, !tbaa !868
  %207 = sext i8 %206 to i16
  %208 = mul nsw i16 %207, %204
  %209 = add i16 %208, %201
  %210 = or i16 %208, %201
  %211 = and i16 %208, %201
  %212 = xor i16 %210, -32768
  %213 = and i16 %212, %209
  %214 = icmp slt i16 %213, 0
  %215 = select i1 %214, i16 32767, i16 %209
  %216 = xor i16 %209, -32768
  %217 = and i16 %211, %216
  %218 = icmp slt i16 %217, 0
  %219 = select i1 %218, i16 -32768, i16 %215
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %192, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %220 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %221 = bitcast i64* %220 to i16*
  store i16 %219, i16* %221, align 8, !tbaa !869
  %222 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %224 = load i8, i8* %223, align 2, !tbaa !868
  %225 = zext i8 %224 to i16
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %227 = load i8, i8* %226, align 2, !tbaa !868
  %228 = sext i8 %227 to i16
  %229 = mul nsw i16 %228, %225
  %230 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %231 = load i8, i8* %230, align 1, !tbaa !868
  %232 = zext i8 %231 to i16
  %233 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %234 = load i8, i8* %233, align 1, !tbaa !868
  %235 = sext i8 %234 to i16
  %236 = mul nsw i16 %235, %232
  %237 = add i16 %236, %229
  %238 = or i16 %236, %229
  %239 = and i16 %236, %229
  %240 = xor i16 %238, -32768
  %241 = and i16 %240, %237
  %242 = icmp slt i16 %241, 0
  %243 = select i1 %242, i16 32767, i16 %237
  %244 = xor i16 %237, -32768
  %245 = and i16 %239, %244
  %246 = icmp slt i16 %245, 0
  %247 = select i1 %246, i16 -32768, i16 %243
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %192, i64* %88, align 16
  store i64 %222, i64* %89, align 8
  %248 = getelementptr inbounds [8 x i16], [8 x i16]* %90, i64 0, i64 5
  store i16 %247, i16* %248, align 2, !tbaa !869
  %249 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %250 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %251 = load i8, i8* %250, align 4, !tbaa !868
  %252 = zext i8 %251 to i16
  %253 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %254 = load i8, i8* %253, align 4, !tbaa !868
  %255 = sext i8 %254 to i16
  %256 = mul nsw i16 %255, %252
  %257 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %258 = load i8, i8* %257, align 1, !tbaa !868
  %259 = zext i8 %258 to i16
  %260 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %261 = load i8, i8* %260, align 1, !tbaa !868
  %262 = sext i8 %261 to i16
  %263 = mul nsw i16 %262, %259
  %264 = add i16 %263, %256
  %265 = or i16 %263, %256
  %266 = and i16 %263, %256
  %267 = xor i16 %265, -32768
  %268 = and i16 %267, %264
  %269 = icmp slt i16 %268, 0
  %270 = select i1 %269, i16 32767, i16 %264
  %271 = xor i16 %264, -32768
  %272 = and i16 %266, %271
  %273 = icmp slt i16 %272, 0
  %274 = select i1 %273, i16 -32768, i16 %270
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %192, i64* %88, align 16
  store i64 %249, i64* %89, align 8
  %275 = getelementptr inbounds [8 x i16], [8 x i16]* %90, i64 0, i64 6
  store i16 %274, i16* %275, align 4, !tbaa !869
  %276 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %277 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %278 = load i8, i8* %277, align 2, !tbaa !868
  %279 = zext i8 %278 to i16
  %280 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %281 = load i8, i8* %280, align 2, !tbaa !868
  %282 = sext i8 %281 to i16
  %283 = mul nsw i16 %282, %279
  %284 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %285 = load i8, i8* %284, align 1, !tbaa !868
  %286 = zext i8 %285 to i16
  %287 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %288 = load i8, i8* %287, align 1, !tbaa !868
  %289 = sext i8 %288 to i16
  %290 = mul nsw i16 %289, %286
  %291 = add i16 %290, %283
  %292 = or i16 %290, %283
  %293 = and i16 %290, %283
  %294 = xor i16 %292, -32768
  %295 = and i16 %294, %291
  %296 = icmp slt i16 %295, 0
  %297 = select i1 %296, i16 32767, i16 %291
  %298 = xor i16 %291, -32768
  %299 = and i16 %293, %298
  %300 = icmp slt i16 %299, 0
  %301 = select i1 %300, i16 -32768, i16 %297
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %192, i64* %88, align 16
  store i64 %276, i64* %89, align 8
  %302 = getelementptr inbounds [8 x i16], [8 x i16]* %90, i64 0, i64 7
  store i16 %301, i16* %302, align 2, !tbaa !869
  %303 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %304 = lshr i64 %192, 16
  %305 = lshr i64 %192, 32
  %306 = lshr i64 %192, 48
  %307 = trunc i64 %192 to i16
  %308 = trunc i64 %304 to i16
  %309 = trunc i64 %305 to i16
  %310 = trunc i64 %306 to i16
  %311 = bitcast i8* %2 to i16*
  store i16 %307, i16* %311, align 1, !tbaa !869
  %312 = getelementptr inbounds i8, i8* %2, i64 2
  %313 = bitcast i8* %312 to i16*
  store i16 %308, i16* %313, align 1, !tbaa !869
  %314 = getelementptr inbounds i8, i8* %2, i64 4
  %315 = bitcast i8* %314 to i16*
  store i16 %309, i16* %315, align 1, !tbaa !869
  %316 = getelementptr inbounds i8, i8* %2, i64 6
  %317 = bitcast i8* %316 to i16*
  store i16 %310, i16* %317, align 1, !tbaa !869
  %318 = trunc i64 %303 to i16
  %319 = getelementptr inbounds i8, i8* %2, i64 8
  %320 = bitcast i8* %319 to i16*
  store i16 %318, i16* %320, align 1, !tbaa !869
  %321 = lshr i64 %303, 16
  %322 = trunc i64 %321 to i16
  %323 = getelementptr inbounds i8, i8* %2, i64 10
  %324 = bitcast i8* %323 to i16*
  store i16 %322, i16* %324, align 1, !tbaa !869
  %325 = lshr i64 %303, 32
  %326 = trunc i64 %325 to i16
  %327 = getelementptr inbounds i8, i8* %2, i64 12
  %328 = bitcast i8* %327 to i16*
  store i16 %326, i16* %328, align 1, !tbaa !869
  %329 = lshr i64 %303, 48
  %330 = trunc i64 %329 to i16
  %331 = getelementptr inbounds i8, i8* %2, i64 14
  %332 = bitcast i8* %331 to i16*
  store i16 %330, i16* %332, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #23
  store i64 %3, i64* %6, align 8
  %9 = bitcast i64* %5 to i8*
  %10 = bitcast i64* %5 to [8 x i8]*
  %11 = trunc i64 %3 to i8
  %12 = ashr i8 %11, 7
  %13 = xor i8 %12, %11
  %14 = sub i8 %13, %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %5, align 8
  %15 = bitcast i64* %5 to i8*
  store i8 %14, i8* %15, align 8, !tbaa !868
  %16 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %17 = lshr i64 %3, 8
  %18 = trunc i64 %17 to i8
  %19 = ashr i8 %18, 7
  %20 = xor i8 %19, %18
  %21 = sub i8 %20, %19
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %16, i64* %5, align 8
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 1
  store i8 %21, i8* %22, align 1, !tbaa !868
  %23 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %24 = lshr i64 %3, 16
  %25 = trunc i64 %24 to i8
  %26 = ashr i8 %25, 7
  %27 = xor i8 %26, %25
  %28 = sub i8 %27, %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %23, i64* %5, align 8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 2
  store i8 %28, i8* %29, align 2, !tbaa !868
  %30 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %31 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 3
  %32 = load i8, i8* %31, align 1, !tbaa !868
  %33 = ashr i8 %32, 7
  %34 = xor i8 %33, %32
  %35 = sub i8 %34, %33
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %30, i64* %5, align 8
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 3
  store i8 %35, i8* %36, align 1, !tbaa !868
  %37 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %38 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 4
  %39 = load i8, i8* %38, align 4, !tbaa !868
  %40 = ashr i8 %39, 7
  %41 = xor i8 %40, %39
  %42 = sub i8 %41, %40
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %37, i64* %5, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 4
  store i8 %42, i8* %43, align 4, !tbaa !868
  %44 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 5
  %46 = load i8, i8* %45, align 1, !tbaa !868
  %47 = ashr i8 %46, 7
  %48 = xor i8 %47, %46
  %49 = sub i8 %48, %47
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %44, i64* %5, align 8
  %50 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 5
  store i8 %49, i8* %50, align 1, !tbaa !868
  %51 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %52 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %53 = load i8, i8* %52, align 2, !tbaa !868
  %54 = ashr i8 %53, 7
  %55 = xor i8 %54, %53
  %56 = sub i8 %55, %54
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %51, i64* %5, align 8
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 6
  store i8 %56, i8* %57, align 2, !tbaa !868
  %58 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %59 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %60 = load i8, i8* %59, align 1, !tbaa !868
  %61 = ashr i8 %60, 7
  %62 = xor i8 %61, %60
  %63 = sub i8 %62, %61
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %58, i64* %5, align 8
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %10, i64 0, i64 7
  store i8 %63, i8* %64, align 1, !tbaa !868
  %65 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %66 = lshr i64 %65, 8
  %67 = lshr i64 %65, 16
  %68 = lshr i64 %65, 24
  %69 = lshr i64 %65, 32
  %70 = lshr i64 %65, 40
  %71 = lshr i64 %65, 48
  %72 = lshr i64 %65, 56
  %73 = trunc i64 %65 to i8
  %74 = trunc i64 %66 to i8
  %75 = trunc i64 %67 to i8
  %76 = trunc i64 %68 to i8
  %77 = trunc i64 %69 to i8
  %78 = trunc i64 %70 to i8
  %79 = trunc i64 %71 to i8
  %80 = trunc i64 %72 to i8
  %81 = bitcast i64* %2 to [8 x i8]*
  %82 = bitcast i64* %2 to i8*
  store i8 %73, i8* %82, align 1, !tbaa !868
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 1
  store i8 %74, i8* %83, align 1, !tbaa !868
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 2
  store i8 %75, i8* %84, align 1, !tbaa !868
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 3
  store i8 %76, i8* %85, align 1, !tbaa !868
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 4
  store i8 %77, i8* %86, align 1, !tbaa !868
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 5
  store i8 %78, i8* %87, align 1, !tbaa !868
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 6
  store i8 %79, i8* %88, align 1, !tbaa !868
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %81, i64 0, i64 7
  store i8 %80, i8* %89, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #23
  %9 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %10 = add i64 %3, 1
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %3, 2
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %3, 3
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %3, 4
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %3, 5
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %3, 6
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %3, 7
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = zext i8 %23 to i64
  %25 = shl nuw i64 %24, 56
  %26 = zext i8 %21 to i64
  %27 = shl nuw nsw i64 %26, 48
  %28 = zext i8 %19 to i64
  %29 = shl nuw nsw i64 %28, 40
  %30 = zext i8 %17 to i64
  %31 = shl nuw nsw i64 %30, 32
  %32 = zext i8 %15 to i64
  %33 = shl nuw nsw i64 %32, 24
  %34 = zext i8 %13 to i64
  %35 = shl nuw nsw i64 %34, 16
  %36 = zext i8 %11 to i64
  %37 = shl nuw nsw i64 %36, 8
  %38 = zext i8 %9 to i64
  %39 = or i64 %37, %38
  %40 = or i64 %39, %35
  %41 = or i64 %40, %33
  %42 = or i64 %41, %31
  %43 = or i64 %42, %29
  %44 = or i64 %43, %27
  %45 = or i64 %44, %25
  store i64 %45, i64* %6, align 8
  %46 = bitcast i64* %5 to i8*
  %47 = bitcast i64* %5 to [8 x i8]*
  %48 = ashr i8 %9, 7
  %49 = xor i8 %48, %9
  %50 = sub i8 %49, %48
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 0, i64* %5, align 8
  %51 = bitcast i64* %5 to i8*
  store i8 %50, i8* %51, align 8, !tbaa !868
  %52 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %53 = ashr i8 %11, 7
  %54 = xor i8 %53, %11
  %55 = sub i8 %54, %53
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %52, i64* %5, align 8
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 1
  store i8 %55, i8* %56, align 1, !tbaa !868
  %57 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %58 = ashr i8 %13, 7
  %59 = xor i8 %58, %13
  %60 = sub i8 %59, %58
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %57, i64* %5, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 2
  store i8 %60, i8* %61, align 2, !tbaa !868
  %62 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 3
  %64 = load i8, i8* %63, align 1, !tbaa !868
  %65 = ashr i8 %64, 7
  %66 = xor i8 %65, %64
  %67 = sub i8 %66, %65
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %62, i64* %5, align 8
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 3
  store i8 %67, i8* %68, align 1, !tbaa !868
  %69 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %70 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 4
  %71 = load i8, i8* %70, align 4, !tbaa !868
  %72 = ashr i8 %71, 7
  %73 = xor i8 %72, %71
  %74 = sub i8 %73, %72
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %69, i64* %5, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 4
  store i8 %74, i8* %75, align 4, !tbaa !868
  %76 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 5
  %78 = load i8, i8* %77, align 1, !tbaa !868
  %79 = ashr i8 %78, 7
  %80 = xor i8 %79, %78
  %81 = sub i8 %80, %79
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %76, i64* %5, align 8
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 5
  store i8 %81, i8* %82, align 1, !tbaa !868
  %83 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %84 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %85 = load i8, i8* %84, align 2, !tbaa !868
  %86 = ashr i8 %85, 7
  %87 = xor i8 %86, %85
  %88 = sub i8 %87, %86
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %83, i64* %5, align 8
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 6
  store i8 %88, i8* %89, align 2, !tbaa !868
  %90 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %91 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %92 = load i8, i8* %91, align 1, !tbaa !868
  %93 = ashr i8 %92, 7
  %94 = xor i8 %93, %92
  %95 = sub i8 %94, %93
  call void @llvm.lifetime.start(i64 8, i8* nonnull %46)
  store i64 %90, i64* %5, align 8
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %47, i64 0, i64 7
  store i8 %95, i8* %96, align 1, !tbaa !868
  %97 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %46)
  %98 = lshr i64 %97, 8
  %99 = lshr i64 %97, 16
  %100 = lshr i64 %97, 24
  %101 = lshr i64 %97, 32
  %102 = lshr i64 %97, 40
  %103 = lshr i64 %97, 48
  %104 = lshr i64 %97, 56
  %105 = trunc i64 %97 to i8
  %106 = trunc i64 %98 to i8
  %107 = trunc i64 %99 to i8
  %108 = trunc i64 %100 to i8
  %109 = trunc i64 %101 to i8
  %110 = trunc i64 %102 to i8
  %111 = trunc i64 %103 to i8
  %112 = trunc i64 %104 to i8
  %113 = bitcast i64* %2 to [8 x i8]*
  %114 = bitcast i64* %2 to i8*
  store i8 %105, i8* %114, align 1, !tbaa !868
  %115 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 1
  store i8 %106, i8* %115, align 1, !tbaa !868
  %116 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 2
  store i8 %107, i8* %116, align 1, !tbaa !868
  %117 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 3
  store i8 %108, i8* %117, align 1, !tbaa !868
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 4
  store i8 %109, i8* %118, align 1, !tbaa !868
  %119 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 5
  store i8 %110, i8* %119, align 1, !tbaa !868
  %120 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 6
  store i8 %111, i8* %120, align 1, !tbaa !868
  %121 = getelementptr inbounds [8 x i8], [8 x i8]* %113, i64 0, i64 7
  store i8 %112, i8* %121, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast <2 x i64>* %7 to %struct.uint8v16_t*
  %10 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 1
  store <2 x i64> %12, <2 x i64>* %7, align 16
  %13 = bitcast <2 x i64>* %5 to i8*
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %16 = bitcast <2 x i64>* %5 to [16 x i8]*
  %17 = extractelement <2 x i64> %12, i32 0
  %18 = trunc i64 %17 to i8
  %19 = ashr i8 %18, 7
  %20 = xor i8 %19, %18
  %21 = sub i8 %20, %19
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %22 = bitcast <2 x i64>* %5 to i8*
  store i8 %21, i8* %22, align 16, !tbaa !868
  %23 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %24 = lshr i64 %17, 8
  %25 = trunc i64 %24 to i8
  %26 = ashr i8 %25, 7
  %27 = xor i8 %26, %25
  %28 = sub i8 %27, %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %23, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 1
  store i8 %28, i8* %29, align 1, !tbaa !868
  %30 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %31 = lshr i64 %17, 16
  %32 = trunc i64 %31 to i8
  %33 = ashr i8 %32, 7
  %34 = xor i8 %33, %32
  %35 = sub i8 %34, %33
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %30, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 2
  store i8 %35, i8* %36, align 2, !tbaa !868
  %37 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %38 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 3
  %39 = load i8, i8* %38, align 1, !tbaa !868
  %40 = ashr i8 %39, 7
  %41 = xor i8 %40, %39
  %42 = sub i8 %41, %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %37, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 3
  store i8 %42, i8* %43, align 1, !tbaa !868
  %44 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4, !tbaa !868
  %47 = ashr i8 %46, 7
  %48 = xor i8 %47, %46
  %49 = sub i8 %48, %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %44, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 4
  store i8 %49, i8* %50, align 4, !tbaa !868
  %51 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %52 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 5
  %53 = load i8, i8* %52, align 1, !tbaa !868
  %54 = ashr i8 %53, 7
  %55 = xor i8 %54, %53
  %56 = sub i8 %55, %54
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %51, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 5
  store i8 %56, i8* %57, align 1, !tbaa !868
  %58 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 6
  %60 = load i8, i8* %59, align 2, !tbaa !868
  %61 = ashr i8 %60, 7
  %62 = xor i8 %61, %60
  %63 = sub i8 %62, %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %58, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 6
  store i8 %63, i8* %64, align 2, !tbaa !868
  %65 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 7
  %67 = load i8, i8* %66, align 1, !tbaa !868
  %68 = ashr i8 %67, 7
  %69 = xor i8 %68, %67
  %70 = sub i8 %69, %68
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %65, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 7
  store i8 %70, i8* %71, align 1, !tbaa !868
  %72 = load i64, i64* %14, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %74 = bitcast i64* %73 to i8*
  %75 = load i8, i8* %74, align 8, !tbaa !868
  %76 = ashr i8 %75, 7
  %77 = xor i8 %76, %75
  %78 = sub i8 %77, %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 0, i64* %15, align 8
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %80 = bitcast i64* %79 to i8*
  store i8 %78, i8* %80, align 8, !tbaa !868
  %81 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 9
  %83 = load i8, i8* %82, align 1, !tbaa !868
  %84 = ashr i8 %83, 7
  %85 = xor i8 %84, %83
  %86 = sub i8 %85, %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %81, i64* %15, align 8
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 9
  store i8 %86, i8* %87, align 1, !tbaa !868
  %88 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %89 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 10
  %90 = load i8, i8* %89, align 2, !tbaa !868
  %91 = ashr i8 %90, 7
  %92 = xor i8 %91, %90
  %93 = sub i8 %92, %91
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %88, i64* %15, align 8
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 10
  store i8 %93, i8* %94, align 2, !tbaa !868
  %95 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %96 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 11
  %97 = load i8, i8* %96, align 1, !tbaa !868
  %98 = ashr i8 %97, 7
  %99 = xor i8 %98, %97
  %100 = sub i8 %99, %98
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %95, i64* %15, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 11
  store i8 %100, i8* %101, align 1, !tbaa !868
  %102 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 12
  %104 = load i8, i8* %103, align 4, !tbaa !868
  %105 = ashr i8 %104, 7
  %106 = xor i8 %105, %104
  %107 = sub i8 %106, %105
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %102, i64* %15, align 8
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 12
  store i8 %107, i8* %108, align 4, !tbaa !868
  %109 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %110 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 13
  %111 = load i8, i8* %110, align 1, !tbaa !868
  %112 = ashr i8 %111, 7
  %113 = xor i8 %112, %111
  %114 = sub i8 %113, %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %109, i64* %15, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 13
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 14
  %118 = load i8, i8* %117, align 2, !tbaa !868
  %119 = ashr i8 %118, 7
  %120 = xor i8 %119, %118
  %121 = sub i8 %120, %119
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %116, i64* %15, align 8
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 14
  store i8 %121, i8* %122, align 2, !tbaa !868
  %123 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %124 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 15
  %125 = load i8, i8* %124, align 1, !tbaa !868
  %126 = ashr i8 %125, 7
  %127 = xor i8 %126, %125
  %128 = sub i8 %127, %126
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  store i64 %72, i64* %14, align 16
  store i64 %123, i64* %15, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %16, i64 0, i64 15
  store i8 %128, i8* %129, align 1, !tbaa !868
  %130 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %131 = lshr i64 %72, 8
  %132 = lshr i64 %72, 16
  %133 = lshr i64 %72, 24
  %134 = lshr i64 %72, 32
  %135 = lshr i64 %72, 40
  %136 = lshr i64 %72, 48
  %137 = lshr i64 %72, 56
  %138 = trunc i64 %72 to i8
  %139 = trunc i64 %131 to i8
  %140 = trunc i64 %132 to i8
  %141 = trunc i64 %133 to i8
  %142 = trunc i64 %134 to i8
  %143 = trunc i64 %135 to i8
  %144 = trunc i64 %136 to i8
  %145 = trunc i64 %137 to i8
  store i8 %138, i8* %2, align 1, !tbaa !868
  %146 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %139, i8* %146, align 1, !tbaa !868
  %147 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %140, i8* %147, align 1, !tbaa !868
  %148 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %141, i8* %148, align 1, !tbaa !868
  %149 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %142, i8* %149, align 1, !tbaa !868
  %150 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %143, i8* %150, align 1, !tbaa !868
  %151 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %144, i8* %151, align 1, !tbaa !868
  %152 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %145, i8* %152, align 1, !tbaa !868
  %153 = trunc i64 %130 to i8
  %154 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %153, i8* %154, align 1, !tbaa !868
  %155 = lshr i64 %130, 8
  %156 = trunc i64 %155 to i8
  %157 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %156, i8* %157, align 1, !tbaa !868
  %158 = lshr i64 %130, 16
  %159 = trunc i64 %158 to i8
  %160 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %159, i8* %160, align 1, !tbaa !868
  %161 = lshr i64 %130, 24
  %162 = trunc i64 %161 to i8
  %163 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %162, i8* %163, align 1, !tbaa !868
  %164 = lshr i64 %130, 32
  %165 = trunc i64 %164 to i8
  %166 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %165, i8* %166, align 1, !tbaa !868
  %167 = lshr i64 %130, 40
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %168, i8* %169, align 1, !tbaa !868
  %170 = lshr i64 %130, 48
  %171 = trunc i64 %170 to i8
  %172 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %171, i8* %172, align 1, !tbaa !868
  %173 = lshr i64 %130, 56
  %174 = trunc i64 %173 to i8
  %175 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %174, i8* %175, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSBI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast <2 x i64>* %7 to %struct.uint8v16_t*
  %10 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %12 = add i64 %3, 1
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %3, 2
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %3, 3
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %3, 4
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %3, 5
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %3, 6
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %3, 7
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %3, 8
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %3, 9
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %3, 10
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = add i64 %3, 11
  %33 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %32) #22
  %34 = add i64 %3, 12
  %35 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %34) #22
  %36 = add i64 %3, 13
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = add i64 %3, 14
  %39 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %38) #22
  %40 = add i64 %3, 15
  %41 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %40) #22
  %42 = insertelement <2 x i8> undef, i8 %25, i32 0
  %43 = insertelement <2 x i8> %42, i8 %41, i32 1
  %44 = zext <2 x i8> %43 to <2 x i64>
  %45 = shl nuw <2 x i64> %44, <i64 56, i64 56>
  %46 = insertelement <2 x i8> undef, i8 %23, i32 0
  %47 = insertelement <2 x i8> %46, i8 %39, i32 1
  %48 = zext <2 x i8> %47 to <2 x i64>
  %49 = shl nuw nsw <2 x i64> %48, <i64 48, i64 48>
  %50 = insertelement <2 x i8> undef, i8 %21, i32 0
  %51 = insertelement <2 x i8> %50, i8 %37, i32 1
  %52 = zext <2 x i8> %51 to <2 x i64>
  %53 = shl nuw nsw <2 x i64> %52, <i64 40, i64 40>
  %54 = insertelement <2 x i8> undef, i8 %19, i32 0
  %55 = insertelement <2 x i8> %54, i8 %35, i32 1
  %56 = zext <2 x i8> %55 to <2 x i64>
  %57 = shl nuw nsw <2 x i64> %56, <i64 32, i64 32>
  %58 = insertelement <2 x i8> undef, i8 %17, i32 0
  %59 = insertelement <2 x i8> %58, i8 %33, i32 1
  %60 = zext <2 x i8> %59 to <2 x i64>
  %61 = shl nuw nsw <2 x i64> %60, <i64 24, i64 24>
  %62 = insertelement <2 x i8> undef, i8 %15, i32 0
  %63 = insertelement <2 x i8> %62, i8 %31, i32 1
  %64 = zext <2 x i8> %63 to <2 x i64>
  %65 = shl nuw nsw <2 x i64> %64, <i64 16, i64 16>
  %66 = insertelement <2 x i8> undef, i8 %13, i32 0
  %67 = insertelement <2 x i8> %66, i8 %29, i32 1
  %68 = zext <2 x i8> %67 to <2 x i64>
  %69 = shl nuw nsw <2 x i64> %68, <i64 8, i64 8>
  %70 = insertelement <2 x i8> undef, i8 %11, i32 0
  %71 = insertelement <2 x i8> %70, i8 %27, i32 1
  %72 = zext <2 x i8> %71 to <2 x i64>
  %73 = or <2 x i64> %69, %72
  %74 = or <2 x i64> %73, %65
  %75 = or <2 x i64> %74, %61
  %76 = or <2 x i64> %75, %57
  %77 = or <2 x i64> %76, %53
  %78 = or <2 x i64> %77, %49
  %79 = or <2 x i64> %78, %45
  store <2 x i64> %79, <2 x i64>* %7, align 16
  %80 = bitcast <2 x i64>* %5 to i8*
  %81 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %83 = bitcast <2 x i64>* %5 to [16 x i8]*
  %84 = ashr i8 %11, 7
  %85 = xor i8 %84, %11
  %86 = sub i8 %85, %84
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %87 = bitcast <2 x i64>* %5 to i8*
  store i8 %86, i8* %87, align 16, !tbaa !868
  %88 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %89 = ashr i8 %13, 7
  %90 = xor i8 %89, %13
  %91 = sub i8 %90, %89
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %88, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %92 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 1
  store i8 %91, i8* %92, align 1, !tbaa !868
  %93 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %94 = ashr i8 %15, 7
  %95 = xor i8 %94, %15
  %96 = sub i8 %95, %94
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %93, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 2
  store i8 %96, i8* %97, align 2, !tbaa !868
  %98 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 3
  %100 = load i8, i8* %99, align 1, !tbaa !868
  %101 = ashr i8 %100, 7
  %102 = xor i8 %101, %100
  %103 = sub i8 %102, %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %98, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 3
  store i8 %103, i8* %104, align 1, !tbaa !868
  %105 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %106 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 4
  %107 = load i8, i8* %106, align 4, !tbaa !868
  %108 = ashr i8 %107, 7
  %109 = xor i8 %108, %107
  %110 = sub i8 %109, %108
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %105, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %111 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 4
  store i8 %110, i8* %111, align 4, !tbaa !868
  %112 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %113 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 5
  %114 = load i8, i8* %113, align 1, !tbaa !868
  %115 = ashr i8 %114, 7
  %116 = xor i8 %115, %114
  %117 = sub i8 %116, %115
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %112, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 5
  store i8 %117, i8* %118, align 1, !tbaa !868
  %119 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %120 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 6
  %121 = load i8, i8* %120, align 2, !tbaa !868
  %122 = ashr i8 %121, 7
  %123 = xor i8 %122, %121
  %124 = sub i8 %123, %122
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %119, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 6
  store i8 %124, i8* %125, align 2, !tbaa !868
  %126 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 7
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = ashr i8 %128, 7
  %130 = xor i8 %129, %128
  %131 = sub i8 %130, %129
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %126, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 7
  store i8 %131, i8* %132, align 1, !tbaa !868
  %133 = load i64, i64* %81, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %134 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %135 = bitcast i64* %134 to i8*
  %136 = load i8, i8* %135, align 8, !tbaa !868
  %137 = ashr i8 %136, 7
  %138 = xor i8 %137, %136
  %139 = sub i8 %138, %137
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 0, i64* %82, align 8
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %141 = bitcast i64* %140 to i8*
  store i8 %139, i8* %141, align 8, !tbaa !868
  %142 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 9
  %144 = load i8, i8* %143, align 1, !tbaa !868
  %145 = ashr i8 %144, 7
  %146 = xor i8 %145, %144
  %147 = sub i8 %146, %145
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %142, i64* %82, align 8
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 9
  store i8 %147, i8* %148, align 1, !tbaa !868
  %149 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 10
  %151 = load i8, i8* %150, align 2, !tbaa !868
  %152 = ashr i8 %151, 7
  %153 = xor i8 %152, %151
  %154 = sub i8 %153, %152
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %149, i64* %82, align 8
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 10
  store i8 %154, i8* %155, align 2, !tbaa !868
  %156 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %157 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 11
  %158 = load i8, i8* %157, align 1, !tbaa !868
  %159 = ashr i8 %158, 7
  %160 = xor i8 %159, %158
  %161 = sub i8 %160, %159
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %156, i64* %82, align 8
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 11
  store i8 %161, i8* %162, align 1, !tbaa !868
  %163 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 12
  %165 = load i8, i8* %164, align 4, !tbaa !868
  %166 = ashr i8 %165, 7
  %167 = xor i8 %166, %165
  %168 = sub i8 %167, %166
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %163, i64* %82, align 8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 12
  store i8 %168, i8* %169, align 4, !tbaa !868
  %170 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 13
  %172 = load i8, i8* %171, align 1, !tbaa !868
  %173 = ashr i8 %172, 7
  %174 = xor i8 %173, %172
  %175 = sub i8 %174, %173
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %170, i64* %82, align 8
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 13
  store i8 %175, i8* %176, align 1, !tbaa !868
  %177 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 14
  %179 = load i8, i8* %178, align 2, !tbaa !868
  %180 = ashr i8 %179, 7
  %181 = xor i8 %180, %179
  %182 = sub i8 %181, %180
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %177, i64* %82, align 8
  %183 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 14
  store i8 %182, i8* %183, align 2, !tbaa !868
  %184 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 15
  %186 = load i8, i8* %185, align 1, !tbaa !868
  %187 = ashr i8 %186, 7
  %188 = xor i8 %187, %186
  %189 = sub i8 %188, %187
  call void @llvm.lifetime.start(i64 16, i8* nonnull %80)
  store i64 %133, i64* %81, align 16
  store i64 %184, i64* %82, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %83, i64 0, i64 15
  store i8 %189, i8* %190, align 1, !tbaa !868
  %191 = load i64, i64* %82, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %80)
  %192 = lshr i64 %133, 8
  %193 = lshr i64 %133, 16
  %194 = lshr i64 %133, 24
  %195 = lshr i64 %133, 32
  %196 = lshr i64 %133, 40
  %197 = lshr i64 %133, 48
  %198 = lshr i64 %133, 56
  %199 = trunc i64 %133 to i8
  %200 = trunc i64 %192 to i8
  %201 = trunc i64 %193 to i8
  %202 = trunc i64 %194 to i8
  %203 = trunc i64 %195 to i8
  %204 = trunc i64 %196 to i8
  %205 = trunc i64 %197 to i8
  %206 = trunc i64 %198 to i8
  store i8 %199, i8* %2, align 1, !tbaa !868
  %207 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %200, i8* %207, align 1, !tbaa !868
  %208 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %201, i8* %208, align 1, !tbaa !868
  %209 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %202, i8* %209, align 1, !tbaa !868
  %210 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %203, i8* %210, align 1, !tbaa !868
  %211 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %204, i8* %211, align 1, !tbaa !868
  %212 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %205, i8* %212, align 1, !tbaa !868
  %213 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %206, i8* %213, align 1, !tbaa !868
  %214 = trunc i64 %191 to i8
  %215 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %214, i8* %215, align 1, !tbaa !868
  %216 = lshr i64 %191, 8
  %217 = trunc i64 %216 to i8
  %218 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %217, i8* %218, align 1, !tbaa !868
  %219 = lshr i64 %191, 16
  %220 = trunc i64 %219 to i8
  %221 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %220, i8* %221, align 1, !tbaa !868
  %222 = lshr i64 %191, 24
  %223 = trunc i64 %222 to i8
  %224 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %223, i8* %224, align 1, !tbaa !868
  %225 = lshr i64 %191, 32
  %226 = trunc i64 %225 to i8
  %227 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %226, i8* %227, align 1, !tbaa !868
  %228 = lshr i64 %191, 40
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %229, i8* %230, align 1, !tbaa !868
  %231 = lshr i64 %191, 48
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %232, i8* %233, align 1, !tbaa !868
  %234 = lshr i64 %191, 56
  %235 = trunc i64 %234 to i8
  %236 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %235, i8* %236, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = bitcast i64* %5 to [4 x i16]*
  %8 = trunc i64 %3 to i16
  %9 = ashr i16 %8, 15
  %10 = xor i16 %9, %8
  %11 = sub i16 %10, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 0, i64* %5, align 8
  %12 = bitcast i64* %5 to i16*
  store i16 %11, i16* %12, align 8, !tbaa !869
  %13 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %14 = lshr i64 %3, 16
  %15 = trunc i64 %14 to i16
  %16 = ashr i16 %15, 15
  %17 = xor i16 %16, %15
  %18 = sub i16 %17, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %13, i64* %5, align 8
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  store i16 %18, i16* %19, align 2, !tbaa !869
  %20 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %21 = lshr i64 %3, 32
  %22 = trunc i64 %21 to i16
  %23 = ashr i16 %22, 15
  %24 = xor i16 %23, %22
  %25 = sub i16 %24, %23
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %20, i64* %5, align 8
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  store i16 %25, i16* %26, align 4, !tbaa !869
  %27 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %28 = lshr i64 %3, 48
  %29 = trunc i64 %28 to i16
  %30 = ashr i16 %29, 15
  %31 = xor i16 %30, %29
  %32 = sub i16 %31, %30
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %27, i64* %5, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1, !tbaa !869
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1, !tbaa !869
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1, !tbaa !869
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = alloca i64, align 8
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = add i64 %3, 2
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %7) #22
  %9 = add i64 %3, 4
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %9) #22
  %11 = add i64 %3, 6
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = bitcast i64* %5 to i8*
  %14 = bitcast i64* %5 to [4 x i16]*
  %15 = ashr i16 %6, 15
  %16 = xor i16 %15, %6
  %17 = sub i16 %16, %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %5, align 8
  %18 = bitcast i64* %5 to i16*
  store i16 %17, i16* %18, align 8, !tbaa !869
  %19 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %20 = ashr i16 %8, 15
  %21 = xor i16 %20, %8
  %22 = sub i16 %21, %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %19, i64* %5, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %25 = ashr i16 %10, 15
  %26 = xor i16 %25, %10
  %27 = sub i16 %26, %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %24, i64* %5, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  store i16 %27, i16* %28, align 4, !tbaa !869
  %29 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %30 = ashr i16 %12, 15
  %31 = xor i16 %30, %12
  %32 = sub i16 %31, %30
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %29, i64* %5, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1, !tbaa !869
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1, !tbaa !869
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1, !tbaa !869
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %struct.uint16v8_t*
  %9 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) #23
  %10 = bitcast i8* %3 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds i8, i8* %3, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %11, i64* %15, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %14, i64* %16, align 8
  %17 = bitcast <2 x i64>* %5 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %20 = bitcast <2 x i64>* %5 to [8 x i16]*
  %21 = trunc i64 %11 to i16
  %22 = ashr i16 %21, 15
  %23 = xor i16 %22, %21
  %24 = sub i16 %23, %22
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %25 = bitcast <2 x i64>* %5 to i16*
  store i16 %24, i16* %25, align 16, !tbaa !869
  %26 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %27 = lshr i64 %11, 16
  %28 = trunc i64 %27 to i16
  %29 = ashr i16 %28, 15
  %30 = xor i16 %29, %28
  %31 = sub i16 %30, %29
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %26, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 1
  store i16 %31, i16* %32, align 2, !tbaa !869
  %33 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %34 = lshr i64 %11, 32
  %35 = trunc i64 %34 to i16
  %36 = ashr i16 %35, 15
  %37 = xor i16 %36, %35
  %38 = sub i16 %37, %36
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %33, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 2
  store i16 %38, i16* %39, align 4, !tbaa !869
  %40 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %41 = lshr i64 %11, 48
  %42 = trunc i64 %41 to i16
  %43 = ashr i16 %42, 15
  %44 = xor i16 %43, %42
  %45 = sub i16 %44, %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %40, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 3
  store i16 %45, i16* %46, align 2, !tbaa !869
  %47 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %48 = trunc i64 %14 to i16
  %49 = ashr i16 %48, 15
  %50 = xor i16 %49, %48
  %51 = sub i16 %50, %49
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  store i16 %51, i16* %53, align 8, !tbaa !869
  %54 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %55 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 5
  %56 = load i16, i16* %55, align 2, !tbaa !869
  %57 = ashr i16 %56, 15
  %58 = xor i16 %57, %56
  %59 = sub i16 %58, %57
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %54, i64* %19, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 5
  store i16 %59, i16* %60, align 2, !tbaa !869
  %61 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 6
  %63 = load i16, i16* %62, align 4, !tbaa !869
  %64 = ashr i16 %63, 15
  %65 = xor i16 %64, %63
  %66 = sub i16 %65, %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %61, i64* %19, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 6
  store i16 %66, i16* %67, align 4, !tbaa !869
  %68 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i16, i16* %69, align 2, !tbaa !869
  %71 = ashr i16 %70, 15
  %72 = xor i16 %71, %70
  %73 = sub i16 %72, %71
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %68, i64* %19, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 7
  store i16 %73, i16* %74, align 2, !tbaa !869
  %75 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %76 = lshr i64 %47, 16
  %77 = lshr i64 %47, 32
  %78 = lshr i64 %47, 48
  %79 = trunc i64 %47 to i16
  %80 = trunc i64 %76 to i16
  %81 = trunc i64 %77 to i16
  %82 = trunc i64 %78 to i16
  %83 = bitcast i8* %2 to i16*
  store i16 %79, i16* %83, align 1, !tbaa !869
  %84 = getelementptr inbounds i8, i8* %2, i64 2
  %85 = bitcast i8* %84 to i16*
  store i16 %80, i16* %85, align 1, !tbaa !869
  %86 = getelementptr inbounds i8, i8* %2, i64 4
  %87 = bitcast i8* %86 to i16*
  store i16 %81, i16* %87, align 1, !tbaa !869
  %88 = getelementptr inbounds i8, i8* %2, i64 6
  %89 = bitcast i8* %88 to i16*
  store i16 %82, i16* %89, align 1, !tbaa !869
  %90 = trunc i64 %75 to i16
  %91 = getelementptr inbounds i8, i8* %2, i64 8
  %92 = bitcast i8* %91 to i16*
  store i16 %90, i16* %92, align 1, !tbaa !869
  %93 = lshr i64 %75, 16
  %94 = trunc i64 %93 to i16
  %95 = getelementptr inbounds i8, i8* %2, i64 10
  %96 = bitcast i8* %95 to i16*
  store i16 %94, i16* %96, align 1, !tbaa !869
  %97 = lshr i64 %75, 32
  %98 = trunc i64 %97 to i16
  %99 = getelementptr inbounds i8, i8* %2, i64 12
  %100 = bitcast i8* %99 to i16*
  store i16 %98, i16* %100, align 1, !tbaa !869
  %101 = lshr i64 %75, 48
  %102 = trunc i64 %101 to i16
  %103 = getelementptr inbounds i8, i8* %2, i64 14
  %104 = bitcast i8* %103 to i16*
  store i16 %102, i16* %104, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSWI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %struct.uint16v8_t*
  %9 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) #23
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %11 = add i64 %3, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %3, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %3, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %3, 8
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %3, 10
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %3, 12
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %3, 14
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = insertelement <2 x i16> undef, i16 %16, i32 0
  %26 = insertelement <2 x i16> %25, i16 %24, i32 1
  %27 = zext <2 x i16> %26 to <2 x i64>
  %28 = shl nuw <2 x i64> %27, <i64 48, i64 48>
  %29 = insertelement <2 x i16> undef, i16 %14, i32 0
  %30 = insertelement <2 x i16> %29, i16 %22, i32 1
  %31 = zext <2 x i16> %30 to <2 x i64>
  %32 = shl nuw nsw <2 x i64> %31, <i64 32, i64 32>
  %33 = insertelement <2 x i16> undef, i16 %12, i32 0
  %34 = insertelement <2 x i16> %33, i16 %20, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw nsw <2 x i64> %35, <i64 16, i64 16>
  %37 = insertelement <2 x i16> undef, i16 %10, i32 0
  %38 = insertelement <2 x i16> %37, i16 %18, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = or <2 x i64> %36, %39
  %41 = or <2 x i64> %40, %32
  %42 = or <2 x i64> %41, %28
  store <2 x i64> %42, <2 x i64>* %7, align 16
  %43 = bitcast <2 x i64>* %5 to i8*
  %44 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %46 = bitcast <2 x i64>* %5 to [8 x i16]*
  %47 = ashr i16 %10, 15
  %48 = xor i16 %47, %10
  %49 = sub i16 %48, %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %50 = bitcast <2 x i64>* %5 to i16*
  store i16 %49, i16* %50, align 16, !tbaa !869
  %51 = load i64, i64* %44, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %52 = ashr i16 %12, 15
  %53 = xor i16 %52, %12
  %54 = sub i16 %53, %52
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %51, i64* %44, align 16
  store i64 0, i64* %45, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 1
  store i16 %54, i16* %55, align 2, !tbaa !869
  %56 = load i64, i64* %44, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %57 = ashr i16 %14, 15
  %58 = xor i16 %57, %14
  %59 = sub i16 %58, %57
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %56, i64* %44, align 16
  store i64 0, i64* %45, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 2
  store i16 %59, i16* %60, align 4, !tbaa !869
  %61 = load i64, i64* %44, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %62 = ashr i16 %16, 15
  %63 = xor i16 %62, %16
  %64 = sub i16 %63, %62
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %61, i64* %44, align 16
  store i64 0, i64* %45, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 3
  store i16 %64, i16* %65, align 2, !tbaa !869
  %66 = load i64, i64* %44, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %67 = ashr i16 %18, 15
  %68 = xor i16 %67, %18
  %69 = sub i16 %68, %67
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %66, i64* %44, align 16
  store i64 0, i64* %45, align 8
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %71 = bitcast i64* %70 to i16*
  store i16 %69, i16* %71, align 8, !tbaa !869
  %72 = load i64, i64* %45, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 5
  %74 = load i16, i16* %73, align 2, !tbaa !869
  %75 = ashr i16 %74, 15
  %76 = xor i16 %75, %74
  %77 = sub i16 %76, %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %66, i64* %44, align 16
  store i64 %72, i64* %45, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 5
  store i16 %77, i16* %78, align 2, !tbaa !869
  %79 = load i64, i64* %45, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %80 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 6
  %81 = load i16, i16* %80, align 4, !tbaa !869
  %82 = ashr i16 %81, 15
  %83 = xor i16 %82, %81
  %84 = sub i16 %83, %82
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %66, i64* %44, align 16
  store i64 %79, i64* %45, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 6
  store i16 %84, i16* %85, align 4, !tbaa !869
  %86 = load i64, i64* %45, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %8, i64 0, i32 0, i64 7
  %88 = load i16, i16* %87, align 2, !tbaa !869
  %89 = ashr i16 %88, 15
  %90 = xor i16 %89, %88
  %91 = sub i16 %90, %89
  call void @llvm.lifetime.start(i64 16, i8* nonnull %43)
  store i64 %66, i64* %44, align 16
  store i64 %86, i64* %45, align 8
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 7
  store i16 %91, i16* %92, align 2, !tbaa !869
  %93 = load i64, i64* %45, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %43)
  %94 = lshr i64 %66, 16
  %95 = lshr i64 %66, 32
  %96 = lshr i64 %66, 48
  %97 = trunc i64 %66 to i16
  %98 = trunc i64 %94 to i16
  %99 = trunc i64 %95 to i16
  %100 = trunc i64 %96 to i16
  %101 = bitcast i8* %2 to i16*
  store i16 %97, i16* %101, align 1, !tbaa !869
  %102 = getelementptr inbounds i8, i8* %2, i64 2
  %103 = bitcast i8* %102 to i16*
  store i16 %98, i16* %103, align 1, !tbaa !869
  %104 = getelementptr inbounds i8, i8* %2, i64 4
  %105 = bitcast i8* %104 to i16*
  store i16 %99, i16* %105, align 1, !tbaa !869
  %106 = getelementptr inbounds i8, i8* %2, i64 6
  %107 = bitcast i8* %106 to i16*
  store i16 %100, i16* %107, align 1, !tbaa !869
  %108 = trunc i64 %93 to i16
  %109 = getelementptr inbounds i8, i8* %2, i64 8
  %110 = bitcast i8* %109 to i16*
  store i16 %108, i16* %110, align 1, !tbaa !869
  %111 = lshr i64 %93, 16
  %112 = trunc i64 %111 to i16
  %113 = getelementptr inbounds i8, i8* %2, i64 10
  %114 = bitcast i8* %113 to i16*
  store i16 %112, i16* %114, align 1, !tbaa !869
  %115 = lshr i64 %93, 32
  %116 = trunc i64 %115 to i16
  %117 = getelementptr inbounds i8, i8* %2, i64 12
  %118 = bitcast i8* %117 to i16*
  store i16 %116, i16* %118, align 1, !tbaa !869
  %119 = lshr i64 %93, 48
  %120 = trunc i64 %119 to i16
  %121 = getelementptr inbounds i8, i8* %2, i64 14
  %122 = bitcast i8* %121 to i16*
  store i16 %120, i16* %122, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = bitcast i64* %5 to [2 x i32]*
  %8 = trunc i64 %3 to i32
  %9 = ashr i32 %8, 31
  %10 = xor i32 %9, %8
  %11 = sub i32 %10, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 0, i64* %5, align 8
  %12 = bitcast i64* %5 to i32*
  store i32 %11, i32* %12, align 8, !tbaa !877
  %13 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %14 = lshr i64 %3, 32
  %15 = trunc i64 %14 to i32
  %16 = ashr i32 %15, 31
  %17 = xor i32 %16, %15
  %18 = sub i32 %17, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %6)
  store i64 %13, i64* %5, align 8
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 %18, i32* %19, align 4, !tbaa !877
  %20 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %6)
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %20 to i32
  %23 = trunc i64 %21 to i32
  %24 = bitcast i64* %2 to [2 x i32]*
  %25 = bitcast i64* %2 to i32*
  store i32 %22, i32* %25, align 1, !tbaa !877
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 0, i64 1
  store i32 %23, i32* %26, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = alloca i64, align 8
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = add i64 %3, 4
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %7) #22
  %9 = bitcast i64* %5 to i8*
  %10 = bitcast i64* %5 to [2 x i32]*
  %11 = ashr i32 %6, 31
  %12 = xor i32 %11, %6
  %13 = sub i32 %12, %11
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %5, align 8
  %14 = bitcast i64* %5 to i32*
  store i32 %13, i32* %14, align 8, !tbaa !877
  %15 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %16 = ashr i32 %8, 31
  %17 = xor i32 %16, %8
  %18 = sub i32 %17, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %15, i64* %5, align 8
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %18, i32* %19, align 4, !tbaa !877
  %20 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %20 to i32
  %23 = trunc i64 %21 to i32
  %24 = bitcast i64* %2 to [2 x i32]*
  %25 = bitcast i64* %2 to i32*
  store i32 %22, i32* %25, align 1, !tbaa !877
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 0, i64 1
  store i32 %23, i32* %26, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast <2 x i64>* %5 to i8*
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %15 = bitcast <2 x i64>* %5 to [4 x i32]*
  %16 = trunc i64 %8 to i32
  %17 = ashr i32 %16, 31
  %18 = xor i32 %17, %16
  %19 = sub i32 %18, %17
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %20 = bitcast <2 x i64>* %5 to i32*
  store i32 %19, i32* %20, align 16, !tbaa !877
  %21 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %22 = lshr i64 %8, 32
  %23 = trunc i64 %22 to i32
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = sub i32 %25, %24
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %21, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  store i32 %26, i32* %27, align 4, !tbaa !877
  %28 = load i64, i64* %13, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %29 = trunc i64 %11 to i32
  %30 = ashr i32 %29, 31
  %31 = xor i32 %30, %29
  %32 = sub i32 %31, %30
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %28, i64* %13, align 16
  store i64 0, i64* %14, align 8
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %34 = bitcast i64* %33 to i32*
  store i32 %32, i32* %34, align 8, !tbaa !877
  %35 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %36 = lshr i64 %11, 32
  %37 = trunc i64 %36 to i32
  %38 = ashr i32 %37, 31
  %39 = xor i32 %38, %37
  %40 = sub i32 %39, %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12)
  store i64 %28, i64* %13, align 16
  store i64 %35, i64* %14, align 8
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  store i32 %40, i32* %41, align 4, !tbaa !877
  %42 = load i64, i64* %14, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12)
  %43 = lshr i64 %28, 32
  %44 = trunc i64 %28 to i32
  %45 = trunc i64 %43 to i32
  %46 = bitcast i8* %2 to i32*
  store i32 %44, i32* %46, align 1, !tbaa !877
  %47 = getelementptr inbounds i8, i8* %2, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 %45, i32* %48, align 1, !tbaa !877
  %49 = trunc i64 %42 to i32
  %50 = getelementptr inbounds i8, i8* %2, i64 8
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !877
  %52 = lshr i64 %42, 32
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 12
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PABSDI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to { i64, i64 }*
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = add i64 %3, 4
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %3, 8
  %11 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %3, 12
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast <2 x i64>* %5 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %5, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %17 = bitcast <2 x i64>* %5 to [4 x i32]*
  %18 = ashr i32 %7, 31
  %19 = xor i32 %18, %7
  %20 = sub i32 %19, %18
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %5, align 16
  %21 = bitcast <2 x i64>* %5 to i32*
  store i32 %20, i32* %21, align 16, !tbaa !877
  %22 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %23 = ashr i32 %9, 31
  %24 = xor i32 %23, %9
  %25 = sub i32 %24, %23
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %22, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 1
  store i32 %25, i32* %26, align 4, !tbaa !877
  %27 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %28 = ashr i32 %11, 31
  %29 = xor i32 %28, %11
  %30 = sub i32 %29, %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %27, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %32 = bitcast i64* %31 to i32*
  store i32 %30, i32* %32, align 8, !tbaa !877
  %33 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %34 = ashr i32 %13, 31
  %35 = xor i32 %34, %13
  %36 = sub i32 %35, %34
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %27, i64* %15, align 16
  store i64 %33, i64* %16, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 3
  store i32 %36, i32* %37, align 4, !tbaa !877
  %38 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %39 = lshr i64 %27, 32
  %40 = trunc i64 %27 to i32
  %41 = trunc i64 %39 to i32
  %42 = bitcast i8* %2 to i32*
  store i32 %40, i32* %42, align 1, !tbaa !877
  %43 = getelementptr inbounds i8, i8* %2, i64 4
  %44 = bitcast i8* %43 to i32*
  store i32 %41, i32* %44, align 1, !tbaa !877
  %45 = trunc i64 %38 to i32
  %46 = getelementptr inbounds i8, i8* %2, i64 8
  %47 = bitcast i8* %46 to i32*
  store i32 %45, i32* %47, align 1, !tbaa !877
  %48 = lshr i64 %38, 32
  %49 = trunc i64 %48 to i32
  %50 = getelementptr inbounds i8, i8* %2, i64 12
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.int16v4_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %8, align 8
  %12 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %10, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i16
  %16 = icmp slt i16 %15, 127
  %17 = select i1 %16, i16 %15, i16 127
  %18 = trunc i16 %17 to i8
  %19 = icmp slt i16 %15, -128
  %20 = select i1 %19, i8 -128, i8 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i8*
  store i8 %20, i8* %21, align 8, !tbaa !868
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %23 = lshr i64 %3, 16
  %24 = trunc i64 %23 to i16
  %25 = icmp slt i16 %24, 127
  %26 = select i1 %25, i16 %24, i16 127
  %27 = trunc i16 %26 to i8
  %28 = icmp slt i16 %24, -128
  %29 = select i1 %28, i8 -128, i8 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %22, i64* %6, align 8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %29, i8* %30, align 1, !tbaa !868
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %32 = lshr i64 %3, 32
  %33 = trunc i64 %32 to i16
  %34 = icmp slt i16 %33, 127
  %35 = select i1 %34, i16 %33, i16 127
  %36 = trunc i16 %35 to i8
  %37 = icmp slt i16 %33, -128
  %38 = select i1 %37, i8 -128, i8 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %31, i64* %6, align 8
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %38, i8* %39, align 2, !tbaa !868
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %41 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %9, i64 0, i32 0, i64 3
  %42 = load i16, i16* %41, align 2, !tbaa !869
  %43 = icmp slt i16 %42, 127
  %44 = select i1 %43, i16 %42, i16 127
  %45 = trunc i16 %44 to i8
  %46 = icmp slt i16 %42, -128
  %47 = select i1 %46, i8 -128, i8 %45
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %40, i64* %6, align 8
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %47, i8* %48, align 1, !tbaa !868
  %49 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %50 = bitcast i64* %10 to %struct.int16v4_t*
  %51 = bitcast i64* %7 to i8*
  %52 = bitcast i64* %7 to [8 x i8]*
  %53 = bitcast i64* %10 to i16*
  %54 = load i16, i16* %53, align 8, !tbaa !869
  %55 = icmp slt i16 %54, 127
  %56 = select i1 %55, i16 %54, i16 127
  %57 = trunc i16 %56 to i8
  %58 = icmp slt i16 %54, -128
  %59 = select i1 %58, i8 -128, i8 %57
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %49, i64* %7, align 8
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 4
  store i8 %59, i8* %60, align 4, !tbaa !868
  %61 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %62 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %50, i64 0, i32 0, i64 1
  %63 = load i16, i16* %62, align 2, !tbaa !869
  %64 = icmp slt i16 %63, 127
  %65 = select i1 %64, i16 %63, i16 127
  %66 = trunc i16 %65 to i8
  %67 = icmp slt i16 %63, -128
  %68 = select i1 %67, i8 -128, i8 %66
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %61, i64* %7, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 5
  store i8 %68, i8* %69, align 1, !tbaa !868
  %70 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %71 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %50, i64 0, i32 0, i64 2
  %72 = load i16, i16* %71, align 4, !tbaa !869
  %73 = icmp slt i16 %72, 127
  %74 = select i1 %73, i16 %72, i16 127
  %75 = trunc i16 %74 to i8
  %76 = icmp slt i16 %72, -128
  %77 = select i1 %76, i8 -128, i8 %75
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %70, i64* %7, align 8
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 6
  store i8 %77, i8* %78, align 2, !tbaa !868
  %79 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %80 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %50, i64 0, i32 0, i64 3
  %81 = load i16, i16* %80, align 2, !tbaa !869
  %82 = icmp slt i16 %81, 127
  %83 = select i1 %82, i16 %81, i16 127
  %84 = trunc i16 %83 to i8
  %85 = icmp slt i16 %81, -128
  %86 = select i1 %85, i8 -128, i8 %84
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %79, i64* %7, align 8
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 7
  store i8 %86, i8* %87, align 1, !tbaa !868
  %88 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %89 = lshr i64 %88, 8
  %90 = lshr i64 %88, 16
  %91 = lshr i64 %88, 24
  %92 = lshr i64 %88, 32
  %93 = lshr i64 %88, 40
  %94 = lshr i64 %88, 48
  %95 = lshr i64 %88, 56
  %96 = trunc i64 %88 to i8
  %97 = trunc i64 %89 to i8
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = bitcast i64* %2 to [8 x i8]*
  %105 = bitcast i64* %2 to i8*
  store i8 %96, i8* %105, align 1, !tbaa !868
  %106 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 1
  store i8 %97, i8* %106, align 1, !tbaa !868
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 2
  store i8 %98, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 3
  store i8 %99, i8* %108, align 1, !tbaa !868
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 4
  store i8 %100, i8* %109, align 1, !tbaa !868
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 5
  store i8 %101, i8* %110, align 1, !tbaa !868
  %111 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 6
  store i8 %102, i8* %111, align 1, !tbaa !868
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %104, i64 0, i64 7
  store i8 %103, i8* %112, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.int16v4_t*
  %10 = alloca i64, align 8
  %11 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %8, align 8
  %12 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 2
  %15 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 4
  %17 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 6
  %19 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %18) #22
  %20 = zext i16 %19 to i64
  %21 = shl nuw i64 %20, 48
  %22 = zext i16 %17 to i64
  %23 = shl nuw nsw i64 %22, 32
  %24 = zext i16 %15 to i64
  %25 = shl nuw nsw i64 %24, 16
  %26 = zext i16 %13 to i64
  %27 = or i64 %25, %26
  %28 = or i64 %27, %23
  %29 = or i64 %28, %21
  store i64 %29, i64* %10, align 8
  %30 = bitcast i64* %6 to i8*
  %31 = bitcast i64* %6 to [8 x i8]*
  %32 = trunc i64 %3 to i16
  %33 = icmp slt i16 %32, 127
  %34 = select i1 %33, i16 %32, i16 127
  %35 = trunc i16 %34 to i8
  %36 = icmp slt i16 %32, -128
  %37 = select i1 %36, i8 -128, i8 %35
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 0, i64* %6, align 8
  %38 = bitcast i64* %6 to i8*
  store i8 %37, i8* %38, align 8, !tbaa !868
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %40 = lshr i64 %3, 16
  %41 = trunc i64 %40 to i16
  %42 = icmp slt i16 %41, 127
  %43 = select i1 %42, i16 %41, i16 127
  %44 = trunc i16 %43 to i8
  %45 = icmp slt i16 %41, -128
  %46 = select i1 %45, i8 -128, i8 %44
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %31, i64 0, i64 1
  store i8 %46, i8* %47, align 1, !tbaa !868
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %49 = lshr i64 %3, 32
  %50 = trunc i64 %49 to i16
  %51 = icmp slt i16 %50, 127
  %52 = select i1 %51, i16 %50, i16 127
  %53 = trunc i16 %52 to i8
  %54 = icmp slt i16 %50, -128
  %55 = select i1 %54, i8 -128, i8 %53
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %48, i64* %6, align 8
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %31, i64 0, i64 2
  store i8 %55, i8* %56, align 2, !tbaa !868
  %57 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %58 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %9, i64 0, i32 0, i64 3
  %59 = load i16, i16* %58, align 2, !tbaa !869
  %60 = icmp slt i16 %59, 127
  %61 = select i1 %60, i16 %59, i16 127
  %62 = trunc i16 %61 to i8
  %63 = icmp slt i16 %59, -128
  %64 = select i1 %63, i8 -128, i8 %62
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %57, i64* %6, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %31, i64 0, i64 3
  store i8 %64, i8* %65, align 1, !tbaa !868
  %66 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %67 = bitcast i64* %10 to %struct.int16v4_t*
  %68 = bitcast i64* %7 to i8*
  %69 = bitcast i64* %7 to [8 x i8]*
  %70 = bitcast i64* %10 to i16*
  %71 = load i16, i16* %70, align 8, !tbaa !869
  %72 = icmp slt i16 %71, 127
  %73 = select i1 %72, i16 %71, i16 127
  %74 = trunc i16 %73 to i8
  %75 = icmp slt i16 %71, -128
  %76 = select i1 %75, i8 -128, i8 %74
  call void @llvm.lifetime.start(i64 8, i8* nonnull %68)
  store i64 %66, i64* %7, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %69, i64 0, i64 4
  store i8 %76, i8* %77, align 4, !tbaa !868
  %78 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %68)
  %79 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %67, i64 0, i32 0, i64 1
  %80 = load i16, i16* %79, align 2, !tbaa !869
  %81 = icmp slt i16 %80, 127
  %82 = select i1 %81, i16 %80, i16 127
  %83 = trunc i16 %82 to i8
  %84 = icmp slt i16 %80, -128
  %85 = select i1 %84, i8 -128, i8 %83
  call void @llvm.lifetime.start(i64 8, i8* nonnull %68)
  store i64 %78, i64* %7, align 8
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %69, i64 0, i64 5
  store i8 %85, i8* %86, align 1, !tbaa !868
  %87 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %68)
  %88 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %67, i64 0, i32 0, i64 2
  %89 = load i16, i16* %88, align 4, !tbaa !869
  %90 = icmp slt i16 %89, 127
  %91 = select i1 %90, i16 %89, i16 127
  %92 = trunc i16 %91 to i8
  %93 = icmp slt i16 %89, -128
  %94 = select i1 %93, i8 -128, i8 %92
  call void @llvm.lifetime.start(i64 8, i8* nonnull %68)
  store i64 %87, i64* %7, align 8
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %69, i64 0, i64 6
  store i8 %94, i8* %95, align 2, !tbaa !868
  %96 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %68)
  %97 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %67, i64 0, i32 0, i64 3
  %98 = load i16, i16* %97, align 2, !tbaa !869
  %99 = icmp slt i16 %98, 127
  %100 = select i1 %99, i16 %98, i16 127
  %101 = trunc i16 %100 to i8
  %102 = icmp slt i16 %98, -128
  %103 = select i1 %102, i8 -128, i8 %101
  call void @llvm.lifetime.start(i64 8, i8* nonnull %68)
  store i64 %96, i64* %7, align 8
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %69, i64 0, i64 7
  store i8 %103, i8* %104, align 1, !tbaa !868
  %105 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %68)
  %106 = lshr i64 %105, 8
  %107 = lshr i64 %105, 16
  %108 = lshr i64 %105, 24
  %109 = lshr i64 %105, 32
  %110 = lshr i64 %105, 40
  %111 = lshr i64 %105, 48
  %112 = lshr i64 %105, 56
  %113 = trunc i64 %105 to i8
  %114 = trunc i64 %106 to i8
  %115 = trunc i64 %107 to i8
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = bitcast i64* %2 to [8 x i8]*
  %122 = bitcast i64* %2 to i8*
  store i8 %113, i8* %122, align 1, !tbaa !868
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 1
  store i8 %114, i8* %123, align 1, !tbaa !868
  %124 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 2
  store i8 %115, i8* %124, align 1, !tbaa !868
  %125 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 3
  store i8 %116, i8* %125, align 1, !tbaa !868
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 4
  store i8 %117, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 5
  store i8 %118, i8* %127, align 1, !tbaa !868
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 6
  store i8 %119, i8* %128, align 1, !tbaa !868
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %121, i64 0, i64 7
  store i8 %120, i8* %129, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %9, align 16
  %17 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = icmp slt i16 %25, 127
  %27 = select i1 %26, i16 %25, i16 127
  %28 = trunc i16 %27 to i8
  %29 = icmp slt i16 %25, -128
  %30 = select i1 %29, i8 -128, i8 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i8*
  store i8 %30, i8* %31, align 16, !tbaa !868
  %32 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %33 = lshr i64 %24, 16
  %34 = trunc i64 %33 to i16
  %35 = icmp slt i16 %34, 127
  %36 = select i1 %35, i16 %34, i16 127
  %37 = trunc i16 %36 to i8
  %38 = icmp slt i16 %34, -128
  %39 = select i1 %38, i8 -128, i8 %37
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %32, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %39, i8* %40, align 1, !tbaa !868
  %41 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %42 = lshr i64 %24, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp slt i16 %43, 127
  %45 = select i1 %44, i16 %43, i16 127
  %46 = trunc i16 %45 to i8
  %47 = icmp slt i16 %43, -128
  %48 = select i1 %47, i8 -128, i8 %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %41, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %48, i8* %49, align 2, !tbaa !868
  %50 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %51 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 3
  %52 = load i16, i16* %51, align 2, !tbaa !869
  %53 = icmp slt i16 %52, 127
  %54 = select i1 %53, i16 %52, i16 127
  %55 = trunc i16 %54 to i8
  %56 = icmp slt i16 %52, -128
  %57 = select i1 %56, i8 -128, i8 %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %50, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %57, i8* %58, align 1, !tbaa !868
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8, !tbaa !869
  %63 = icmp slt i16 %62, 127
  %64 = select i1 %63, i16 %62, i16 127
  %65 = trunc i16 %64 to i8
  %66 = icmp slt i16 %62, -128
  %67 = select i1 %66, i8 -128, i8 %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %67, i8* %68, align 4, !tbaa !868
  %69 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %70 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %71 = load i16, i16* %70, align 2, !tbaa !869
  %72 = icmp slt i16 %71, 127
  %73 = select i1 %72, i16 %71, i16 127
  %74 = trunc i16 %73 to i8
  %75 = icmp slt i16 %71, -128
  %76 = select i1 %75, i8 -128, i8 %74
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %69, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %76, i8* %77, align 1, !tbaa !868
  %78 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %79 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %80 = load i16, i16* %79, align 4, !tbaa !869
  %81 = icmp slt i16 %80, 127
  %82 = select i1 %81, i16 %80, i16 127
  %83 = trunc i16 %82 to i8
  %84 = icmp slt i16 %80, -128
  %85 = select i1 %84, i8 -128, i8 %83
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %78, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %85, i8* %86, align 2, !tbaa !868
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %89 = load i16, i16* %88, align 2, !tbaa !869
  %90 = icmp slt i16 %89, 127
  %91 = select i1 %90, i16 %89, i16 127
  %92 = trunc i16 %91 to i8
  %93 = icmp slt i16 %89, -128
  %94 = select i1 %93, i8 -128, i8 %92
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %94, i8* %95, align 1, !tbaa !868
  %96 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %97 = bitcast <2 x i64>* %12 to %struct.uint16v8_t*
  %98 = bitcast { i64, i64 }* %8 to i8*
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %101 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %102 = bitcast <2 x i64>* %12 to i16*
  %103 = load i16, i16* %102, align 16, !tbaa !869
  %104 = icmp slt i16 %103, 127
  %105 = select i1 %104, i16 %103, i16 127
  %106 = trunc i16 %105 to i8
  %107 = icmp slt i16 %103, -128
  %108 = select i1 %107, i8 -128, i8 %106
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 0, i64* %100, align 8
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %110 = bitcast i64* %109 to i8*
  store i8 %108, i8* %110, align 8, !tbaa !868
  %111 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %112 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 1
  %113 = load i16, i16* %112, align 2, !tbaa !869
  %114 = icmp slt i16 %113, 127
  %115 = select i1 %114, i16 %113, i16 127
  %116 = trunc i16 %115 to i8
  %117 = icmp slt i16 %113, -128
  %118 = select i1 %117, i8 -128, i8 %116
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %111, i64* %100, align 8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 9
  store i8 %118, i8* %119, align 1, !tbaa !868
  %120 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %121 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 2
  %122 = load i16, i16* %121, align 4, !tbaa !869
  %123 = icmp slt i16 %122, 127
  %124 = select i1 %123, i16 %122, i16 127
  %125 = trunc i16 %124 to i8
  %126 = icmp slt i16 %122, -128
  %127 = select i1 %126, i8 -128, i8 %125
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %120, i64* %100, align 8
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 10
  store i8 %127, i8* %128, align 2, !tbaa !868
  %129 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %130 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 3
  %131 = load i16, i16* %130, align 2, !tbaa !869
  %132 = icmp slt i16 %131, 127
  %133 = select i1 %132, i16 %131, i16 127
  %134 = trunc i16 %133 to i8
  %135 = icmp slt i16 %131, -128
  %136 = select i1 %135, i8 -128, i8 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %129, i64* %100, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 11
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %139 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %140 = bitcast i64* %139 to i16*
  %141 = load i16, i16* %140, align 8, !tbaa !869
  %142 = icmp slt i16 %141, 127
  %143 = select i1 %142, i16 %141, i16 127
  %144 = trunc i16 %143 to i8
  %145 = icmp slt i16 %141, -128
  %146 = select i1 %145, i8 -128, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %138, i64* %100, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 12
  store i8 %146, i8* %147, align 4, !tbaa !868
  %148 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %149 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 5
  %150 = load i16, i16* %149, align 2, !tbaa !869
  %151 = icmp slt i16 %150, 127
  %152 = select i1 %151, i16 %150, i16 127
  %153 = trunc i16 %152 to i8
  %154 = icmp slt i16 %150, -128
  %155 = select i1 %154, i8 -128, i8 %153
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %148, i64* %100, align 8
  %156 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 13
  store i8 %155, i8* %156, align 1, !tbaa !868
  %157 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %158 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 6
  %159 = load i16, i16* %158, align 4, !tbaa !869
  %160 = icmp slt i16 %159, 127
  %161 = select i1 %160, i16 %159, i16 127
  %162 = trunc i16 %161 to i8
  %163 = icmp slt i16 %159, -128
  %164 = select i1 %163, i8 -128, i8 %162
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %157, i64* %100, align 8
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 14
  store i8 %164, i8* %165, align 2, !tbaa !868
  %166 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %167 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %97, i64 0, i32 0, i64 7
  %168 = load i16, i16* %167, align 2, !tbaa !869
  %169 = icmp slt i16 %168, 127
  %170 = select i1 %169, i16 %168, i16 127
  %171 = trunc i16 %170 to i8
  %172 = icmp slt i16 %168, -128
  %173 = select i1 %172, i8 -128, i8 %171
  call void @llvm.lifetime.start(i64 16, i8* nonnull %98)
  store i64 %96, i64* %99, align 8
  store i64 %166, i64* %100, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %101, i64 0, i64 15
  store i8 %173, i8* %174, align 1, !tbaa !868
  %175 = load i64, i64* %100, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %98)
  %176 = lshr i64 %96, 8
  %177 = lshr i64 %96, 16
  %178 = lshr i64 %96, 24
  %179 = lshr i64 %96, 32
  %180 = lshr i64 %96, 40
  %181 = lshr i64 %96, 48
  %182 = lshr i64 %96, 56
  %183 = trunc i64 %96 to i8
  %184 = trunc i64 %176 to i8
  %185 = trunc i64 %177 to i8
  %186 = trunc i64 %178 to i8
  %187 = trunc i64 %179 to i8
  %188 = trunc i64 %180 to i8
  %189 = trunc i64 %181 to i8
  %190 = trunc i64 %182 to i8
  store i8 %183, i8* %2, align 1, !tbaa !868
  %191 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %184, i8* %191, align 1, !tbaa !868
  %192 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %185, i8* %192, align 1, !tbaa !868
  %193 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %186, i8* %193, align 1, !tbaa !868
  %194 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %187, i8* %194, align 1, !tbaa !868
  %195 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %188, i8* %195, align 1, !tbaa !868
  %196 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %189, i8* %196, align 1, !tbaa !868
  %197 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %190, i8* %197, align 1, !tbaa !868
  %198 = trunc i64 %175 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %198, i8* %199, align 1, !tbaa !868
  %200 = lshr i64 %175, 8
  %201 = trunc i64 %200 to i8
  %202 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %201, i8* %202, align 1, !tbaa !868
  %203 = lshr i64 %175, 16
  %204 = trunc i64 %203 to i8
  %205 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %204, i8* %205, align 1, !tbaa !868
  %206 = lshr i64 %175, 24
  %207 = trunc i64 %206 to i8
  %208 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %207, i8* %208, align 1, !tbaa !868
  %209 = lshr i64 %175, 32
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %210, i8* %211, align 1, !tbaa !868
  %212 = lshr i64 %175, 40
  %213 = trunc i64 %212 to i8
  %214 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %213, i8* %214, align 1, !tbaa !868
  %215 = lshr i64 %175, 48
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %216, i8* %217, align 1, !tbaa !868
  %218 = lshr i64 %175, 56
  %219 = trunc i64 %218 to i8
  %220 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %219, i8* %220, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSWBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint16v8_t*
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to { i64, i64 }*
  %14 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %9, align 16
  %17 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %12, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [16 x i8]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = icmp slt i16 %56, 127
  %58 = select i1 %57, i16 %56, i16 127
  %59 = trunc i16 %58 to i8
  %60 = icmp slt i16 %56, -128
  %61 = select i1 %60, i8 -128, i8 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %62 = bitcast <2 x i64>* %6 to i8*
  store i8 %61, i8* %62, align 16, !tbaa !868
  %63 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %64 = lshr i64 %55, 16
  %65 = trunc i64 %64 to i16
  %66 = icmp slt i16 %65, 127
  %67 = select i1 %66, i16 %65, i16 127
  %68 = trunc i16 %67 to i8
  %69 = icmp slt i16 %65, -128
  %70 = select i1 %69, i8 -128, i8 %68
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %63, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 1
  store i8 %70, i8* %71, align 1, !tbaa !868
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 2
  %74 = load i16, i16* %73, align 4, !tbaa !869
  %75 = icmp slt i16 %74, 127
  %76 = select i1 %75, i16 %74, i16 127
  %77 = trunc i16 %76 to i8
  %78 = icmp slt i16 %74, -128
  %79 = select i1 %78, i8 -128, i8 %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 2
  store i8 %79, i8* %80, align 2, !tbaa !868
  %81 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 3
  %83 = load i16, i16* %82, align 2, !tbaa !869
  %84 = icmp slt i16 %83, 127
  %85 = select i1 %84, i16 %83, i16 127
  %86 = trunc i16 %85 to i8
  %87 = icmp slt i16 %83, -128
  %88 = select i1 %87, i8 -128, i8 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %81, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 3
  store i8 %88, i8* %89, align 1, !tbaa !868
  %90 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %92 = bitcast i64* %91 to i16*
  %93 = load i16, i16* %92, align 8, !tbaa !869
  %94 = icmp slt i16 %93, 127
  %95 = select i1 %94, i16 %93, i16 127
  %96 = trunc i16 %95 to i8
  %97 = icmp slt i16 %93, -128
  %98 = select i1 %97, i8 -128, i8 %96
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 4
  store i8 %98, i8* %99, align 4, !tbaa !868
  %100 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %101 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 5
  %102 = load i16, i16* %101, align 2, !tbaa !869
  %103 = icmp slt i16 %102, 127
  %104 = select i1 %103, i16 %102, i16 127
  %105 = trunc i16 %104 to i8
  %106 = icmp slt i16 %102, -128
  %107 = select i1 %106, i8 -128, i8 %105
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %100, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 5
  store i8 %107, i8* %108, align 1, !tbaa !868
  %109 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %110 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 6
  %111 = load i16, i16* %110, align 4, !tbaa !869
  %112 = icmp slt i16 %111, 127
  %113 = select i1 %112, i16 %111, i16 127
  %114 = trunc i16 %113 to i8
  %115 = icmp slt i16 %111, -128
  %116 = select i1 %115, i8 -128, i8 %114
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %109, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 6
  store i8 %116, i8* %117, align 2, !tbaa !868
  %118 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %119 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %11, i64 0, i32 0, i64 7
  %120 = load i16, i16* %119, align 2, !tbaa !869
  %121 = icmp slt i16 %120, 127
  %122 = select i1 %121, i16 %120, i16 127
  %123 = trunc i16 %122 to i8
  %124 = icmp slt i16 %120, -128
  %125 = select i1 %124, i8 -128, i8 %123
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %118, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %54, i64 0, i64 7
  store i8 %125, i8* %126, align 1, !tbaa !868
  %127 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %128 = bitcast <2 x i64>* %12 to %struct.uint16v8_t*
  %129 = bitcast { i64, i64 }* %8 to i8*
  %130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %131 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %132 = bitcast { i64, i64 }* %8 to [16 x i8]*
  %133 = bitcast <2 x i64>* %12 to i16*
  %134 = load i16, i16* %133, align 16, !tbaa !869
  %135 = icmp slt i16 %134, 127
  %136 = select i1 %135, i16 %134, i16 127
  %137 = trunc i16 %136 to i8
  %138 = icmp slt i16 %134, -128
  %139 = select i1 %138, i8 -128, i8 %137
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 0, i64* %131, align 8
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %141 = bitcast i64* %140 to i8*
  store i8 %139, i8* %141, align 8, !tbaa !868
  %142 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %143 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 1
  %144 = load i16, i16* %143, align 2, !tbaa !869
  %145 = icmp slt i16 %144, 127
  %146 = select i1 %145, i16 %144, i16 127
  %147 = trunc i16 %146 to i8
  %148 = icmp slt i16 %144, -128
  %149 = select i1 %148, i8 -128, i8 %147
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %142, i64* %131, align 8
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 9
  store i8 %149, i8* %150, align 1, !tbaa !868
  %151 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %152 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 2
  %153 = load i16, i16* %152, align 4, !tbaa !869
  %154 = icmp slt i16 %153, 127
  %155 = select i1 %154, i16 %153, i16 127
  %156 = trunc i16 %155 to i8
  %157 = icmp slt i16 %153, -128
  %158 = select i1 %157, i8 -128, i8 %156
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %151, i64* %131, align 8
  %159 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 10
  store i8 %158, i8* %159, align 2, !tbaa !868
  %160 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %161 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 3
  %162 = load i16, i16* %161, align 2, !tbaa !869
  %163 = icmp slt i16 %162, 127
  %164 = select i1 %163, i16 %162, i16 127
  %165 = trunc i16 %164 to i8
  %166 = icmp slt i16 %162, -128
  %167 = select i1 %166, i8 -128, i8 %165
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %160, i64* %131, align 8
  %168 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 11
  store i8 %167, i8* %168, align 1, !tbaa !868
  %169 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %170 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %171 = bitcast i64* %170 to i16*
  %172 = load i16, i16* %171, align 8, !tbaa !869
  %173 = icmp slt i16 %172, 127
  %174 = select i1 %173, i16 %172, i16 127
  %175 = trunc i16 %174 to i8
  %176 = icmp slt i16 %172, -128
  %177 = select i1 %176, i8 -128, i8 %175
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %169, i64* %131, align 8
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 12
  store i8 %177, i8* %178, align 4, !tbaa !868
  %179 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %180 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 5
  %181 = load i16, i16* %180, align 2, !tbaa !869
  %182 = icmp slt i16 %181, 127
  %183 = select i1 %182, i16 %181, i16 127
  %184 = trunc i16 %183 to i8
  %185 = icmp slt i16 %181, -128
  %186 = select i1 %185, i8 -128, i8 %184
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %179, i64* %131, align 8
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 13
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %189 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 6
  %190 = load i16, i16* %189, align 4, !tbaa !869
  %191 = icmp slt i16 %190, 127
  %192 = select i1 %191, i16 %190, i16 127
  %193 = trunc i16 %192 to i8
  %194 = icmp slt i16 %190, -128
  %195 = select i1 %194, i8 -128, i8 %193
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %188, i64* %131, align 8
  %196 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 14
  store i8 %195, i8* %196, align 2, !tbaa !868
  %197 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %198 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %128, i64 0, i32 0, i64 7
  %199 = load i16, i16* %198, align 2, !tbaa !869
  %200 = icmp slt i16 %199, 127
  %201 = select i1 %200, i16 %199, i16 127
  %202 = trunc i16 %201 to i8
  %203 = icmp slt i16 %199, -128
  %204 = select i1 %203, i8 -128, i8 %202
  call void @llvm.lifetime.start(i64 16, i8* nonnull %129)
  store i64 %127, i64* %130, align 8
  store i64 %197, i64* %131, align 8
  %205 = getelementptr inbounds [16 x i8], [16 x i8]* %132, i64 0, i64 15
  store i8 %204, i8* %205, align 1, !tbaa !868
  %206 = load i64, i64* %131, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %129)
  %207 = lshr i64 %127, 8
  %208 = lshr i64 %127, 16
  %209 = lshr i64 %127, 24
  %210 = lshr i64 %127, 32
  %211 = lshr i64 %127, 40
  %212 = lshr i64 %127, 48
  %213 = lshr i64 %127, 56
  %214 = trunc i64 %127 to i8
  %215 = trunc i64 %207 to i8
  %216 = trunc i64 %208 to i8
  %217 = trunc i64 %209 to i8
  %218 = trunc i64 %210 to i8
  %219 = trunc i64 %211 to i8
  %220 = trunc i64 %212 to i8
  %221 = trunc i64 %213 to i8
  store i8 %214, i8* %2, align 1, !tbaa !868
  %222 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %215, i8* %222, align 1, !tbaa !868
  %223 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %216, i8* %223, align 1, !tbaa !868
  %224 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %217, i8* %224, align 1, !tbaa !868
  %225 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %218, i8* %225, align 1, !tbaa !868
  %226 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %219, i8* %226, align 1, !tbaa !868
  %227 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %220, i8* %227, align 1, !tbaa !868
  %228 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %221, i8* %228, align 1, !tbaa !868
  %229 = trunc i64 %206 to i8
  %230 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %229, i8* %230, align 1, !tbaa !868
  %231 = lshr i64 %206, 8
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %232, i8* %233, align 1, !tbaa !868
  %234 = lshr i64 %206, 16
  %235 = trunc i64 %234 to i8
  %236 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %235, i8* %236, align 1, !tbaa !868
  %237 = lshr i64 %206, 24
  %238 = trunc i64 %237 to i8
  %239 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %238, i8* %239, align 1, !tbaa !868
  %240 = lshr i64 %206, 32
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %241, i8* %242, align 1, !tbaa !868
  %243 = lshr i64 %206, 40
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %244, i8* %245, align 1, !tbaa !868
  %246 = lshr i64 %206, 48
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %247, i8* %248, align 1, !tbaa !868
  %249 = lshr i64 %206, 56
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %250, i8* %251, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = trunc i64 %3 to i32
  %11 = icmp slt i32 %10, 32767
  %12 = select i1 %11, i32 %10, i32 32767
  %13 = trunc i32 %12 to i16
  %14 = icmp slt i32 %10, -32768
  %15 = select i1 %14, i16 -32768, i16 %13
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %18 = lshr i64 %3, 32
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = trunc i32 %21 to i16
  %23 = icmp slt i32 %19, -32768
  %24 = select i1 %23, i16 -32768, i16 %22
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %17, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %24, i16* %25, align 2, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %27 = bitcast i64* %7 to i8*
  %28 = bitcast i64* %7 to [4 x i16]*
  %29 = trunc i64 %4 to i32
  %30 = icmp slt i32 %29, 32767
  %31 = select i1 %30, i32 %29, i32 32767
  %32 = trunc i32 %31 to i16
  %33 = icmp slt i32 %29, -32768
  %34 = select i1 %33, i16 -32768, i16 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %26, i64* %7, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 2
  store i16 %34, i16* %35, align 4, !tbaa !869
  %36 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %37 = lshr i64 %4, 32
  %38 = trunc i64 %37 to i32
  %39 = icmp slt i32 %38, 32767
  %40 = select i1 %39, i32 %38, i32 32767
  %41 = trunc i32 %40 to i16
  %42 = icmp slt i32 %38, -32768
  %43 = select i1 %42, i16 -32768, i16 %41
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %36, i64* %7, align 8
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 3
  store i16 %43, i16* %44, align 2, !tbaa !869
  %45 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %46 = lshr i64 %45, 16
  %47 = lshr i64 %45, 32
  %48 = lshr i64 %45, 48
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = bitcast i64* %2 to [4 x i16]*
  %54 = bitcast i64* %2 to i16*
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 1
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 2
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 3
  store i16 %52, i16* %57, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 4
  %10 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %9) #22
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [4 x i16]*
  %13 = trunc i64 %3 to i32
  %14 = icmp slt i32 %13, 32767
  %15 = select i1 %14, i32 %13, i32 32767
  %16 = trunc i32 %15 to i16
  %17 = icmp slt i32 %13, -32768
  %18 = select i1 %17, i16 -32768, i16 %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %21 = lshr i64 %3, 32
  %22 = trunc i64 %21 to i32
  %23 = icmp slt i32 %22, 32767
  %24 = select i1 %23, i32 %22, i32 32767
  %25 = trunc i32 %24 to i16
  %26 = icmp slt i32 %22, -32768
  %27 = select i1 %26, i16 -32768, i16 %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %20, i64* %6, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 1
  store i16 %27, i16* %28, align 2, !tbaa !869
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %30 = bitcast i64* %7 to i8*
  %31 = bitcast i64* %7 to [4 x i16]*
  %32 = icmp slt i32 %8, 32767
  %33 = select i1 %32, i32 %8, i32 32767
  %34 = trunc i32 %33 to i16
  %35 = icmp slt i32 %8, -32768
  %36 = select i1 %35, i16 -32768, i16 %34
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %29, i64* %7, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %31, i64 0, i64 2
  store i16 %36, i16* %37, align 4, !tbaa !869
  %38 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %39 = icmp slt i32 %10, 32767
  %40 = select i1 %39, i32 %10, i32 32767
  %41 = trunc i32 %40 to i16
  %42 = icmp slt i32 %10, -32768
  %43 = select i1 %42, i16 -32768, i16 %41
  call void @llvm.lifetime.start(i64 8, i8* nonnull %30)
  store i64 %38, i64* %7, align 8
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %31, i64 0, i64 3
  store i16 %43, i16* %44, align 2, !tbaa !869
  %45 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %30)
  %46 = lshr i64 %45, 16
  %47 = lshr i64 %45, 32
  %48 = lshr i64 %45, 48
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = bitcast i64* %2 to [4 x i16]*
  %54 = bitcast i64* %2 to i16*
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 1
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 2
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 3
  store i16 %52, i16* %57, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %9, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [8 x i16]*
  %23 = trunc i64 %12 to i32
  %24 = icmp slt i32 %23, 32767
  %25 = select i1 %24, i32 %23, i32 32767
  %26 = trunc i32 %25 to i16
  %27 = icmp slt i32 %23, -32768
  %28 = select i1 %27, i16 -32768, i16 %26
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i16*
  store i16 %28, i16* %29, align 16, !tbaa !869
  %30 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %31 = lshr i64 %12, 32
  %32 = trunc i64 %31 to i32
  %33 = icmp slt i32 %32, 32767
  %34 = select i1 %33, i32 %32, i32 32767
  %35 = trunc i32 %34 to i16
  %36 = icmp slt i32 %32, -32768
  %37 = select i1 %36, i16 -32768, i16 %35
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %30, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %40 = trunc i64 %15 to i32
  %41 = icmp slt i32 %40, 32767
  %42 = select i1 %41, i32 %40, i32 32767
  %43 = trunc i32 %42 to i16
  %44 = icmp slt i32 %40, -32768
  %45 = select i1 %44, i16 -32768, i16 %43
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %39, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %48 = lshr i64 %15, 32
  %49 = trunc i64 %48 to i32
  %50 = icmp slt i32 %49, 32767
  %51 = select i1 %50, i32 %49, i32 32767
  %52 = trunc i32 %51 to i16
  %53 = icmp slt i32 %49, -32768
  %54 = select i1 %53, i16 -32768, i16 %52
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %47, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %22, i64 0, i64 3
  store i16 %54, i16* %55, align 2, !tbaa !869
  %56 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %57 = bitcast <2 x i64>* %9 to %struct.int32v4_t*
  %58 = bitcast { i64, i64 }* %8 to i8*
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %61 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %62 = bitcast <2 x i64>* %9 to i32*
  %63 = load i32, i32* %62, align 16, !tbaa !877
  %64 = icmp slt i32 %63, 32767
  %65 = select i1 %64, i32 %63, i32 32767
  %66 = trunc i32 %65 to i16
  %67 = icmp slt i32 %63, -32768
  %68 = select i1 %67, i16 -32768, i16 %66
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 0, i64* %60, align 8
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  store i16 %68, i16* %70, align 8, !tbaa !869
  %71 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %72 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %57, i64 0, i32 0, i64 1
  %73 = load i32, i32* %72, align 4, !tbaa !877
  %74 = icmp slt i32 %73, 32767
  %75 = select i1 %74, i32 %73, i32 32767
  %76 = trunc i32 %75 to i16
  %77 = icmp slt i32 %73, -32768
  %78 = select i1 %77, i16 -32768, i16 %76
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 %71, i64* %60, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 5
  store i16 %78, i16* %79, align 2, !tbaa !869
  %80 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %82 = bitcast i64* %81 to i32*
  %83 = load i32, i32* %82, align 8, !tbaa !877
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = trunc i32 %85 to i16
  %87 = icmp slt i32 %83, -32768
  %88 = select i1 %87, i16 -32768, i16 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 %80, i64* %60, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 6
  store i16 %88, i16* %89, align 4, !tbaa !869
  %90 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %91 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %57, i64 0, i32 0, i64 3
  %92 = load i32, i32* %91, align 4, !tbaa !877
  %93 = icmp slt i32 %92, 32767
  %94 = select i1 %93, i32 %92, i32 32767
  %95 = trunc i32 %94 to i16
  %96 = icmp slt i32 %92, -32768
  %97 = select i1 %96, i16 -32768, i16 %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %58)
  store i64 %56, i64* %59, align 8
  store i64 %90, i64* %60, align 8
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 7
  store i16 %97, i16* %98, align 2, !tbaa !869
  %99 = load i64, i64* %60, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %58)
  %100 = lshr i64 %56, 16
  %101 = lshr i64 %56, 32
  %102 = lshr i64 %56, 48
  %103 = trunc i64 %56 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = trunc i64 %102 to i16
  %107 = bitcast i8* %2 to i16*
  store i16 %103, i16* %107, align 1, !tbaa !869
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  %109 = bitcast i8* %108 to i16*
  store i16 %104, i16* %109, align 1, !tbaa !869
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  %111 = bitcast i8* %110 to i16*
  store i16 %105, i16* %111, align 1, !tbaa !869
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  %113 = bitcast i8* %112 to i16*
  store i16 %106, i16* %113, align 1, !tbaa !869
  %114 = trunc i64 %99 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1, !tbaa !869
  %117 = lshr i64 %99, 16
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 10
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1, !tbaa !869
  %121 = lshr i64 %99, 32
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 12
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1, !tbaa !869
  %125 = lshr i64 %99, 48
  %126 = trunc i64 %125 to i16
  %127 = getelementptr inbounds i8, i8* %2, i64 14
  %128 = bitcast i8* %127 to i16*
  store i16 %126, i16* %128, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PACKSSDWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = bitcast i8* %3 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds i8, i8* %3, i64 8
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) #23
  %16 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %17 = add i64 %4, 4
  %18 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 8
  %20 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %21 = zext i32 %20 to i64
  %22 = add i64 %4, 12
  %23 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %22) #22
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 %24, 32
  %26 = or i64 %25, %21
  %27 = zext i32 %18 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %16 to i64
  %30 = or i64 %28, %29
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %26, i64* %32, align 8
  %33 = bitcast <2 x i64>* %6 to i8*
  %34 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %36 = bitcast <2 x i64>* %6 to [8 x i16]*
  %37 = trunc i64 %11 to i32
  %38 = icmp slt i32 %37, 32767
  %39 = select i1 %38, i32 %37, i32 32767
  %40 = trunc i32 %39 to i16
  %41 = icmp slt i32 %37, -32768
  %42 = select i1 %41, i16 -32768, i16 %40
  call void @llvm.lifetime.start(i64 16, i8* nonnull %33)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %43 = bitcast <2 x i64>* %6 to i16*
  store i16 %42, i16* %43, align 16, !tbaa !869
  %44 = load i64, i64* %34, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %33)
  %45 = lshr i64 %11, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp slt i32 %46, 32767
  %48 = select i1 %47, i32 %46, i32 32767
  %49 = trunc i32 %48 to i16
  %50 = icmp slt i32 %46, -32768
  %51 = select i1 %50, i16 -32768, i16 %49
  call void @llvm.lifetime.start(i64 16, i8* nonnull %33)
  store i64 %44, i64* %34, align 16
  store i64 0, i64* %35, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %36, i64 0, i64 1
  store i16 %51, i16* %52, align 2, !tbaa !869
  %53 = load i64, i64* %34, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %33)
  %54 = trunc i64 %14 to i32
  %55 = icmp slt i32 %54, 32767
  %56 = select i1 %55, i32 %54, i32 32767
  %57 = trunc i32 %56 to i16
  %58 = icmp slt i32 %54, -32768
  %59 = select i1 %58, i16 -32768, i16 %57
  call void @llvm.lifetime.start(i64 16, i8* nonnull %33)
  store i64 %53, i64* %34, align 16
  store i64 0, i64* %35, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %36, i64 0, i64 2
  store i16 %59, i16* %60, align 4, !tbaa !869
  %61 = load i64, i64* %34, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %33)
  %62 = lshr i64 %14, 32
  %63 = trunc i64 %62 to i32
  %64 = icmp slt i32 %63, 32767
  %65 = select i1 %64, i32 %63, i32 32767
  %66 = trunc i32 %65 to i16
  %67 = icmp slt i32 %63, -32768
  %68 = select i1 %67, i16 -32768, i16 %66
  call void @llvm.lifetime.start(i64 16, i8* nonnull %33)
  store i64 %61, i64* %34, align 16
  store i64 0, i64* %35, align 8
  %69 = getelementptr inbounds [8 x i16], [8 x i16]* %36, i64 0, i64 3
  store i16 %68, i16* %69, align 2, !tbaa !869
  %70 = load i64, i64* %34, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %33)
  %71 = bitcast { i64, i64 }* %9 to %struct.int32v4_t*
  %72 = bitcast { i64, i64 }* %8 to i8*
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %75 = bitcast { i64, i64 }* %8 to [8 x i16]*
  %76 = bitcast { i64, i64 }* %9 to i32*
  %77 = load i32, i32* %76, align 8, !tbaa !877
  %78 = icmp slt i32 %77, 32767
  %79 = select i1 %78, i32 %77, i32 32767
  %80 = trunc i32 %79 to i16
  %81 = icmp slt i32 %77, -32768
  %82 = select i1 %81, i16 -32768, i16 %80
  call void @llvm.lifetime.start(i64 16, i8* nonnull %72)
  store i64 %70, i64* %73, align 8
  store i64 0, i64* %74, align 8
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %84 = bitcast i64* %83 to i16*
  store i16 %82, i16* %84, align 8, !tbaa !869
  %85 = load i64, i64* %74, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %72)
  %86 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %71, i64 0, i32 0, i64 1
  %87 = load i32, i32* %86, align 4, !tbaa !877
  %88 = icmp slt i32 %87, 32767
  %89 = select i1 %88, i32 %87, i32 32767
  %90 = trunc i32 %89 to i16
  %91 = icmp slt i32 %87, -32768
  %92 = select i1 %91, i16 -32768, i16 %90
  call void @llvm.lifetime.start(i64 16, i8* nonnull %72)
  store i64 %70, i64* %73, align 8
  store i64 %85, i64* %74, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %75, i64 0, i64 5
  store i16 %92, i16* %93, align 2, !tbaa !869
  %94 = load i64, i64* %74, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %72)
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %96 = bitcast i64* %95 to i32*
  %97 = load i32, i32* %96, align 8, !tbaa !877
  %98 = icmp slt i32 %97, 32767
  %99 = select i1 %98, i32 %97, i32 32767
  %100 = trunc i32 %99 to i16
  %101 = icmp slt i32 %97, -32768
  %102 = select i1 %101, i16 -32768, i16 %100
  call void @llvm.lifetime.start(i64 16, i8* nonnull %72)
  store i64 %70, i64* %73, align 8
  store i64 %94, i64* %74, align 8
  %103 = getelementptr inbounds [8 x i16], [8 x i16]* %75, i64 0, i64 6
  store i16 %102, i16* %103, align 4, !tbaa !869
  %104 = load i64, i64* %74, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %72)
  %105 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %71, i64 0, i32 0, i64 3
  %106 = load i32, i32* %105, align 4, !tbaa !877
  %107 = icmp slt i32 %106, 32767
  %108 = select i1 %107, i32 %106, i32 32767
  %109 = trunc i32 %108 to i16
  %110 = icmp slt i32 %106, -32768
  %111 = select i1 %110, i16 -32768, i16 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %72)
  store i64 %70, i64* %73, align 8
  store i64 %104, i64* %74, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %75, i64 0, i64 7
  store i16 %111, i16* %112, align 2, !tbaa !869
  %113 = load i64, i64* %74, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %72)
  %114 = lshr i64 %70, 16
  %115 = lshr i64 %70, 32
  %116 = lshr i64 %70, 48
  %117 = trunc i64 %70 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = bitcast i8* %2 to i16*
  store i16 %117, i16* %121, align 1, !tbaa !869
  %122 = getelementptr inbounds i8, i8* %2, i64 2
  %123 = bitcast i8* %122 to i16*
  store i16 %118, i16* %123, align 1, !tbaa !869
  %124 = getelementptr inbounds i8, i8* %2, i64 4
  %125 = bitcast i8* %124 to i16*
  store i16 %119, i16* %125, align 1, !tbaa !869
  %126 = getelementptr inbounds i8, i8* %2, i64 6
  %127 = bitcast i8* %126 to i16*
  store i16 %120, i16* %127, align 1, !tbaa !869
  %128 = trunc i64 %113 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 8
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1, !tbaa !869
  %131 = lshr i64 %113, 16
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 10
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1, !tbaa !869
  %135 = lshr i64 %113, 32
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 12
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %113, 48
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 14
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRBI3MnWIhE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly, i64) #6 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 15
  %12 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %7, i64 0, i32 0, i64 %11
  %13 = load i8, i8* %12, align 1, !tbaa !868
  %14 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %13) #22
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRBI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 15
  %12 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %7, i64 0, i32 0, i64 %11
  %13 = load i8, i8* %12, align 1, !tbaa !868
  %14 = zext i8 %13 to i64
  store i64 %14, i64* %2, align 8, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRWI3RnWImE3RVnI7vec64_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.int16v4_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #23
  store i64 %3, i64* %6, align 8
  %9 = and i64 %4, 3
  %10 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %7, i64 0, i32 0, i64 %9
  %11 = load i16, i16* %10, align 2, !tbaa !869
  %12 = zext i16 %11 to i64
  store i64 %12, i64* %2, align 8, !tbaa !870
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRWI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint16v8_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 7
  %12 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %11
  %13 = load i16, i16* %12, align 2, !tbaa !869
  %14 = zext i16 %13 to i64
  store i64 %14, i64* %2, align 8, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRWI3MnWItE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly, i64) #6 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint16v8_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 7
  %12 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %7, i64 0, i32 0, i64 %11
  %13 = load i16, i16* %12, align 2, !tbaa !869
  %14 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %13) #22
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRDI3MnWIjE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly, i64) #6 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.int32v4_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 3
  %12 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %7, i64 0, i32 0, i64 %11
  %13 = load i32, i32* %12, align 4, !tbaa !877
  %14 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %13) #22
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRDI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.int32v4_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 3
  %12 = getelementptr inbounds %struct.int32v4_t, %struct.int32v4_t* %7, i64 0, i32 0, i64 %11
  %13 = load i32, i32* %12, align 4, !tbaa !877
  %14 = zext i32 %13 to i64
  store i64 %14, i64* %2, align 8, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRQI3MnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i8* nocapture readonly, i64) #6 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint64v2_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 1
  %12 = getelementptr inbounds %struct.uint64v2_t, %struct.uint64v2_t* %7, i64 0, i32 0, i64 %11
  %13 = load i64, i64* %12, align 8, !tbaa !870
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %13) #22
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %14
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PEXTRQI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to %struct.uint64v2_t*
  %8 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %8) #23
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  store <2 x i64> %10, <2 x i64>* %6, align 16
  %11 = and i64 %4, 1
  %12 = getelementptr inbounds %struct.uint64v2_t, %struct.uint64v2_t* %7, i64 0, i32 0, i64 %11
  %13 = load i64, i64* %12, align 8, !tbaa !870
  store i64 %13, i64* %2, align 8, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PALIGNR_64I3RVnI7vec64_tEEEP6MemoryS5_R5State4RVnWIS2_ES3_T_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = shl i64 %5, 3
  %8 = and i64 %7, 248
  %9 = urem i64 %8, 65
  %10 = icmp eq i64 %9, 0
  %11 = icmp eq i64 %9, 64
  %12 = sub nsw i64 64, %9
  %13 = shl i64 %3, %12
  %14 = select i1 %10, i64 0, i64 %13
  %15 = lshr i64 %4, %9
  %16 = select i1 %11, i64 %3, i64 %15
  %17 = or i64 %14, %16
  store i64 %17, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10PALIGNR_64I3MVnI7vec64_tEEEP6MemoryS5_R5State4RVnWIS2_E3RVnIS2_ET_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = shl i64 %5, 3
  %9 = and i64 %8, 248
  %10 = urem i64 %9, 65
  %11 = icmp eq i64 %10, 0
  %12 = icmp eq i64 %10, 64
  %13 = sub nsw i64 64, %10
  %14 = shl i64 %3, %13
  %15 = select i1 %11, i64 0, i64 %14
  %16 = lshr i64 %7, %10
  %17 = select i1 %12, i64 %3, i64 %16
  %18 = or i64 %17, %15
  store i64 %18, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11PALIGNR_128I2VnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_ES3_T_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64) #0 {
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %4 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = shl i64 %5, 3
  %18 = and i64 %17, 248
  %19 = urem i64 %18, 129
  %20 = zext i64 %19 to i128
  %21 = icmp eq i64 %19, 0
  %22 = icmp eq i64 %19, 128
  %23 = sub nsw i128 128, %20
  %24 = zext i64 %11 to i128
  %25 = shl nuw i128 %24, 64
  %26 = zext i64 %8 to i128
  %27 = or i128 %25, %26
  %28 = shl i128 %27, %23
  %29 = select i1 %21, i128 0, i128 %28
  %30 = zext i64 %16 to i128
  %31 = shl nuw i128 %30, 64
  %32 = zext i64 %13 to i128
  %33 = or i128 %31, %32
  %34 = lshr i128 %33, %20
  %35 = select i1 %22, i128 %27, i128 %34
  %36 = or i128 %35, %29
  %37 = bitcast i8* %2 to i128*
  store i128 %36, i128* %37, align 1, !tbaa !879
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11PALIGNR_128I3MVnI8vec128_tEEEP6MemoryS5_R5State3VnWIS2_E2VnIS2_ET_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %13 = add i64 %4, 8
  %14 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %13) #22
  %15 = shl i64 %5, 3
  %16 = and i64 %15, 248
  %17 = urem i64 %16, 129
  %18 = zext i64 %17 to i128
  %19 = icmp eq i64 %17, 0
  %20 = icmp eq i64 %17, 128
  %21 = sub nsw i128 128, %18
  %22 = zext i64 %11 to i128
  %23 = shl nuw i128 %22, 64
  %24 = zext i64 %8 to i128
  %25 = or i128 %23, %24
  %26 = shl i128 %25, %21
  %27 = select i1 %19, i128 0, i128 %26
  %28 = zext i64 %14 to i128
  %29 = shl nuw i128 %28, 64
  %30 = zext i64 %12 to i128
  %31 = or i128 %29, %30
  %32 = lshr i128 %31, %18
  %33 = select i1 %20, i128 %25, i128 %32
  %34 = or i128 %33, %27
  %35 = bitcast i8* %2 to i128*
  store i128 %34, i128* %35, align 1, !tbaa !879
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 15
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %8, label %35, label %12

; <label>:12:                                     ; preds = %5
  %13 = lshr i64 %3, 48
  %14 = lshr i64 %3, 32
  %15 = lshr i64 %3, 16
  %16 = and i64 %3, 65535
  %17 = lshr i64 %16, %9
  %18 = trunc i64 %17 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %21 = and i64 %15, 65535
  %22 = lshr i64 %21, %9
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %20, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %23, i16* %24, align 2, !tbaa !869
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %26 = and i64 %14, 65535
  %27 = lshr i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %25, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = lshr i64 %13, %9
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %44

; <label>:35:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %36 = bitcast i64* %6 to i16*
  store i16 0, i16* %36, align 8, !tbaa !869
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %37, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %39, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %40, align 4, !tbaa !869
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %41, i64* %6, align 8
  %42 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %42, align 2, !tbaa !869
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %44

; <label>:44:                                     ; preds = %35, %12
  %45 = phi i64 [ %43, %35 ], [ %34, %12 ]
  %46 = lshr i64 %45, 16
  %47 = lshr i64 %45, 32
  %48 = lshr i64 %45, 48
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = bitcast i64* %2 to [4 x i16]*
  %54 = bitcast i64* %2 to i16*
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 1
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 2
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 3
  store i16 %52, i16* %57, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 15
  %8 = and i64 %4, 65535
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %6 to [4 x i16]*
  br i1 %7, label %34, label %11

; <label>:11:                                     ; preds = %5
  %12 = lshr i64 %3, 48
  %13 = lshr i64 %3, 32
  %14 = lshr i64 %3, 16
  %15 = and i64 %3, 65535
  %16 = lshr i64 %15, %8
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8, !tbaa !869
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %20 = and i64 %14, 65535
  %21 = lshr i64 %20, %8
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %19, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %25 = and i64 %13, 65535
  %26 = lshr i64 %25, %8
  %27 = trunc i64 %26 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %24, i64* %6, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  store i16 %27, i16* %28, align 4, !tbaa !869
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %30 = lshr i64 %12, %8
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %29, i64* %6, align 8
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  store i16 %31, i16* %32, align 2, !tbaa !869
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %43

; <label>:34:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %35 = bitcast i64* %6 to i16*
  store i16 0, i16* %35, align 8, !tbaa !869
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %36, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  store i16 0, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  store i16 0, i16* %39, align 4, !tbaa !869
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  store i16 0, i16* %41, align 2, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %43

; <label>:43:                                     ; preds = %34, %11
  %44 = phi i64 [ %42, %34 ], [ %33, %11 ]
  %45 = lshr i64 %44, 16
  %46 = lshr i64 %44, 32
  %47 = lshr i64 %44, 48
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = bitcast i64* %2 to [4 x i16]*
  %53 = bitcast i64* %2 to i16*
  store i16 %48, i16* %53, align 1, !tbaa !869
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 1
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 2
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 3
  store i16 %51, i16* %56, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = icmp ugt i64 %7, 15
  %9 = and i64 %7, 65535
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %8, label %35, label %12

; <label>:12:                                     ; preds = %5
  %13 = lshr i64 %3, 48
  %14 = lshr i64 %3, 32
  %15 = lshr i64 %3, 16
  %16 = and i64 %3, 65535
  %17 = lshr i64 %16, %9
  %18 = trunc i64 %17 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %21 = and i64 %15, 65535
  %22 = lshr i64 %21, %9
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %20, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %23, i16* %24, align 2, !tbaa !869
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %26 = and i64 %14, 65535
  %27 = lshr i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %25, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = lshr i64 %13, %9
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %44

; <label>:35:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %36 = bitcast i64* %6 to i16*
  store i16 0, i16* %36, align 8, !tbaa !869
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %37, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %39, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %40, align 4, !tbaa !869
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %41, i64* %6, align 8
  %42 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %42, align 2, !tbaa !869
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %44

; <label>:44:                                     ; preds = %35, %12
  %45 = phi i64 [ %43, %35 ], [ %34, %12 ]
  %46 = lshr i64 %45, 16
  %47 = lshr i64 %45, 32
  %48 = lshr i64 %45, 48
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = bitcast i64* %2 to [4 x i16]*
  %54 = bitcast i64* %2 to i16*
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 1
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 2
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %53, i64 0, i64 3
  store i16 %52, i16* %57, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLWI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = trunc i64 %4 to i8
  %19 = icmp ugt i8 %18, 15
  %20 = and i64 %4, 255
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %19, label %75, label %25

; <label>:25:                                     ; preds = %5
  %26 = lshr i64 %12, 48
  %27 = lshr i64 %12, 32
  %28 = lshr i64 %12, 16
  %29 = and i64 %12, 65535
  %30 = lshr i64 %29, %20
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = bitcast <2 x i64>* %6 to i16*
  store i16 %31, i16* %32, align 16, !tbaa !869
  %33 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = and i64 %28, 65535
  %35 = lshr i64 %34, %20
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %33, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %39 = and i64 %27, 65535
  %40 = lshr i64 %39, %20
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %38, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %41, i16* %42, align 4, !tbaa !869
  %43 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %44 = lshr i64 %26, %20
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %43, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 %45, i16* %46, align 2, !tbaa !869
  %47 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %48 = and i64 %15, 65535
  %49 = lshr i64 %48, %20
  %50 = trunc i64 %49 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i16*
  store i16 %50, i16* %52, align 8, !tbaa !869
  %53 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %54 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %55 = load i16, i16* %54, align 2, !tbaa !869
  %56 = zext i16 %55 to i64
  %57 = lshr i64 %56, %20
  %58 = trunc i64 %57 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %53, i64* %23, align 8
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 %58, i16* %59, align 2, !tbaa !869
  %60 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %61 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %62 = load i16, i16* %61, align 4, !tbaa !869
  %63 = zext i16 %62 to i64
  %64 = lshr i64 %63, %20
  %65 = trunc i64 %64 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %60, i64* %23, align 8
  %66 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %65, i16* %66, align 4, !tbaa !869
  %67 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %68 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %69 = load i16, i16* %68, align 2, !tbaa !869
  %70 = zext i16 %69 to i64
  %71 = lshr i64 %70, %20
  %72 = trunc i64 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %67, i64* %23, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %93

; <label>:75:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %76 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %76, align 16, !tbaa !869
  %77 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %77, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 0, i16* %78, align 2, !tbaa !869
  %79 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 0, i16* %80, align 4, !tbaa !869
  %81 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %81, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 0, i16* %82, align 2, !tbaa !869
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %85 = bitcast i64* %84 to i16*
  store i16 0, i16* %85, align 8, !tbaa !869
  %86 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %86, i64* %23, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 0, i16* %87, align 2, !tbaa !869
  %88 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %88, i64* %23, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 0, i16* %89, align 4, !tbaa !869
  %90 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %90, i64* %23, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 0, i16* %91, align 2, !tbaa !869
  %92 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %93

; <label>:93:                                     ; preds = %75, %25
  %94 = phi i64 [ %83, %75 ], [ %47, %25 ]
  %95 = phi i64 [ %92, %75 ], [ %74, %25 ]
  %96 = lshr i64 %94, 16
  %97 = lshr i64 %94, 32
  %98 = lshr i64 %94, 48
  %99 = trunc i64 %94 to i16
  %100 = trunc i64 %96 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = bitcast i8* %2 to i16*
  store i16 %99, i16* %103, align 1, !tbaa !869
  %104 = getelementptr inbounds i8, i8* %2, i64 2
  %105 = bitcast i8* %104 to i16*
  store i16 %100, i16* %105, align 1, !tbaa !869
  %106 = getelementptr inbounds i8, i8* %2, i64 4
  %107 = bitcast i8* %106 to i16*
  store i16 %101, i16* %107, align 1, !tbaa !869
  %108 = getelementptr inbounds i8, i8* %2, i64 6
  %109 = bitcast i8* %108 to i16*
  store i16 %102, i16* %109, align 1, !tbaa !869
  %110 = trunc i64 %95 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 8
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1, !tbaa !869
  %113 = lshr i64 %95, 16
  %114 = trunc i64 %113 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 10
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1, !tbaa !869
  %117 = lshr i64 %95, 32
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 12
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1, !tbaa !869
  %121 = lshr i64 %95, 48
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 14
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLW_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = bitcast i8* %4 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = icmp ugt i64 %19, 15
  %21 = and i64 %19, 65535
  %22 = bitcast <2 x i64>* %6 to i8*
  %23 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %25 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %20, label %76, label %26

; <label>:26:                                     ; preds = %5
  %27 = lshr i64 %12, 48
  %28 = lshr i64 %12, 32
  %29 = lshr i64 %12, 16
  %30 = and i64 %12, 65535
  %31 = lshr i64 %30, %21
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16, !tbaa !869
  %34 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %35 = and i64 %29, 65535
  %36 = lshr i64 %35, %21
  %37 = trunc i64 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %34, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %40 = and i64 %28, 65535
  %41 = lshr i64 %40, %21
  %42 = trunc i64 %41 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %39, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 %42, i16* %43, align 4, !tbaa !869
  %44 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %45 = lshr i64 %27, %21
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %44, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %49 = and i64 %15, 65535
  %50 = lshr i64 %49, %21
  %51 = trunc i64 %50 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  store i16 %51, i16* %53, align 8, !tbaa !869
  %54 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %55 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %56 = load i16, i16* %55, align 2, !tbaa !869
  %57 = zext i16 %56 to i64
  %58 = lshr i64 %57, %21
  %59 = trunc i64 %58 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %54, i64* %24, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 %59, i16* %60, align 2, !tbaa !869
  %61 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %63 = load i16, i16* %62, align 4, !tbaa !869
  %64 = zext i16 %63 to i64
  %65 = lshr i64 %64, %21
  %66 = trunc i64 %65 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %61, i64* %24, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 %66, i16* %67, align 4, !tbaa !869
  %68 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %70 = load i16, i16* %69, align 2, !tbaa !869
  %71 = zext i16 %70 to i64
  %72 = lshr i64 %71, %21
  %73 = trunc i64 %72 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %48, i64* %23, align 16
  store i64 %68, i64* %24, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 %73, i16* %74, align 2, !tbaa !869
  %75 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %94

; <label>:76:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %77 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %77, align 16, !tbaa !869
  %78 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %78, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 0, i16* %79, align 2, !tbaa !869
  %80 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %80, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 0, i16* %81, align 4, !tbaa !869
  %82 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %82, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 0, i16* %83, align 2, !tbaa !869
  %84 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %86 = bitcast i64* %85 to i16*
  store i16 0, i16* %86, align 8, !tbaa !869
  %87 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %87, i64* %24, align 8
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 0, i16* %88, align 2, !tbaa !869
  %89 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %89, i64* %24, align 8
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 0, i16* %90, align 4, !tbaa !869
  %91 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 %91, i64* %24, align 8
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 0, i16* %92, align 2, !tbaa !869
  %93 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %94

; <label>:94:                                     ; preds = %76, %26
  %95 = phi i64 [ %84, %76 ], [ %48, %26 ]
  %96 = phi i64 [ %93, %76 ], [ %75, %26 ]
  %97 = lshr i64 %95, 16
  %98 = lshr i64 %95, 32
  %99 = lshr i64 %95, 48
  %100 = trunc i64 %95 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = bitcast i8* %2 to i16*
  store i16 %100, i16* %104, align 1, !tbaa !869
  %105 = getelementptr inbounds i8, i8* %2, i64 2
  %106 = bitcast i8* %105 to i16*
  store i16 %101, i16* %106, align 1, !tbaa !869
  %107 = getelementptr inbounds i8, i8* %2, i64 4
  %108 = bitcast i8* %107 to i16*
  store i16 %102, i16* %108, align 1, !tbaa !869
  %109 = getelementptr inbounds i8, i8* %2, i64 6
  %110 = bitcast i8* %109 to i16*
  store i16 %103, i16* %110, align 1, !tbaa !869
  %111 = trunc i64 %96 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 8
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1, !tbaa !869
  %114 = lshr i64 %96, 16
  %115 = trunc i64 %114 to i16
  %116 = getelementptr inbounds i8, i8* %2, i64 10
  %117 = bitcast i8* %116 to i16*
  store i16 %115, i16* %117, align 1, !tbaa !869
  %118 = lshr i64 %96, 32
  %119 = trunc i64 %118 to i16
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  %121 = bitcast i8* %120 to i16*
  store i16 %119, i16* %121, align 1, !tbaa !869
  %122 = lshr i64 %96, 48
  %123 = trunc i64 %122 to i16
  %124 = getelementptr inbounds i8, i8* %2, i64 14
  %125 = bitcast i8* %124 to i16*
  store i16 %123, i16* %125, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLW_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %19 = icmp ugt i64 %18, 15
  %20 = and i64 %18, 65535
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %19, label %75, label %25

; <label>:25:                                     ; preds = %5
  %26 = lshr i64 %12, 48
  %27 = lshr i64 %12, 32
  %28 = lshr i64 %12, 16
  %29 = and i64 %12, 65535
  %30 = lshr i64 %29, %20
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = bitcast <2 x i64>* %6 to i16*
  store i16 %31, i16* %32, align 16, !tbaa !869
  %33 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %34 = and i64 %28, 65535
  %35 = lshr i64 %34, %20
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %33, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %39 = and i64 %27, 65535
  %40 = lshr i64 %39, %20
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %38, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %41, i16* %42, align 4, !tbaa !869
  %43 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %44 = lshr i64 %26, %20
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %43, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 %45, i16* %46, align 2, !tbaa !869
  %47 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %48 = and i64 %15, 65535
  %49 = lshr i64 %48, %20
  %50 = trunc i64 %49 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i16*
  store i16 %50, i16* %52, align 8, !tbaa !869
  %53 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %54 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %55 = load i16, i16* %54, align 2, !tbaa !869
  %56 = zext i16 %55 to i64
  %57 = lshr i64 %56, %20
  %58 = trunc i64 %57 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %53, i64* %23, align 8
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 %58, i16* %59, align 2, !tbaa !869
  %60 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %61 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %62 = load i16, i16* %61, align 4, !tbaa !869
  %63 = zext i16 %62 to i64
  %64 = lshr i64 %63, %20
  %65 = trunc i64 %64 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %60, i64* %23, align 8
  %66 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %65, i16* %66, align 4, !tbaa !869
  %67 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %68 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %69 = load i16, i16* %68, align 2, !tbaa !869
  %70 = zext i16 %69 to i64
  %71 = lshr i64 %70, %20
  %72 = trunc i64 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %47, i64* %22, align 16
  store i64 %67, i64* %23, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %93

; <label>:75:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %76 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %76, align 16, !tbaa !869
  %77 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %77, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 0, i16* %78, align 2, !tbaa !869
  %79 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 0, i16* %80, align 4, !tbaa !869
  %81 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %81, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 0, i16* %82, align 2, !tbaa !869
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %85 = bitcast i64* %84 to i16*
  store i16 0, i16* %85, align 8, !tbaa !869
  %86 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %86, i64* %23, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 0, i16* %87, align 2, !tbaa !869
  %88 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %88, i64* %23, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 0, i16* %89, align 4, !tbaa !869
  %90 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 %90, i64* %23, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 0, i16* %91, align 2, !tbaa !869
  %92 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %93

; <label>:93:                                     ; preds = %75, %25
  %94 = phi i64 [ %83, %75 ], [ %47, %25 ]
  %95 = phi i64 [ %92, %75 ], [ %74, %25 ]
  %96 = lshr i64 %94, 16
  %97 = lshr i64 %94, 32
  %98 = lshr i64 %94, 48
  %99 = trunc i64 %94 to i16
  %100 = trunc i64 %96 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = bitcast i8* %2 to i16*
  store i16 %99, i16* %103, align 1, !tbaa !869
  %104 = getelementptr inbounds i8, i8* %2, i64 2
  %105 = bitcast i8* %104 to i16*
  store i16 %100, i16* %105, align 1, !tbaa !869
  %106 = getelementptr inbounds i8, i8* %2, i64 4
  %107 = bitcast i8* %106 to i16*
  store i16 %101, i16* %107, align 1, !tbaa !869
  %108 = getelementptr inbounds i8, i8* %2, i64 6
  %109 = bitcast i8* %108 to i16*
  store i16 %102, i16* %109, align 1, !tbaa !869
  %110 = trunc i64 %95 to i16
  %111 = getelementptr inbounds i8, i8* %2, i64 8
  %112 = bitcast i8* %111 to i16*
  store i16 %110, i16* %112, align 1, !tbaa !869
  %113 = lshr i64 %95, 16
  %114 = trunc i64 %113 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 10
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1, !tbaa !869
  %117 = lshr i64 %95, 32
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 12
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1, !tbaa !869
  %121 = lshr i64 %95, 48
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 14
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 31
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %8, label %23, label %12

; <label>:12:                                     ; preds = %5
  %13 = lshr i64 %3, 32
  %14 = and i64 %3, 4294967295
  %15 = lshr i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = lshr i64 %13, %9
  %20 = trunc i64 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %28

; <label>:23:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %24 = bitcast i64* %6 to i32*
  store i32 0, i32* %24, align 8, !tbaa !877
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %25, i64* %6, align 8
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %26, align 4, !tbaa !877
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %28

; <label>:28:                                     ; preds = %23, %12
  %29 = phi i64 [ %27, %23 ], [ %22, %12 ]
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i64* %2 to [2 x i32]*
  %34 = bitcast i64* %2 to i32*
  store i32 %31, i32* %34, align 1, !tbaa !877
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* %33, i64 0, i64 1
  store i32 %32, i32* %35, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 31
  %8 = and i64 %4, 4294967295
  %9 = bitcast i64* %6 to i8*
  %10 = bitcast i64* %6 to [2 x i32]*
  br i1 %7, label %22, label %11

; <label>:11:                                     ; preds = %5
  %12 = lshr i64 %3, 32
  %13 = and i64 %3, 4294967295
  %14 = lshr i64 %13, %8
  %15 = trunc i64 %14 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8, !tbaa !877
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  %18 = lshr i64 %12, %8
  %19 = trunc i64 %18 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %17, i64* %6, align 8
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %19, i32* %20, align 4, !tbaa !877
  %21 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %27

; <label>:22:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 0, i64* %6, align 8
  %23 = bitcast i64* %6 to i32*
  store i32 0, i32* %23, align 8, !tbaa !877
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9)
  store i64 %24, i64* %6, align 8
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 0, i32* %25, align 4, !tbaa !877
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9)
  br label %27

; <label>:27:                                     ; preds = %22, %11
  %28 = phi i64 [ %26, %22 ], [ %21, %11 ]
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %28 to i32
  %31 = trunc i64 %29 to i32
  %32 = bitcast i64* %2 to [2 x i32]*
  %33 = bitcast i64* %2 to i32*
  store i32 %30, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 0, i64 1
  store i32 %31, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = icmp ugt i64 %7, 31
  %9 = and i64 %7, 4294967295
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %8, label %23, label %12

; <label>:12:                                     ; preds = %5
  %13 = lshr i64 %3, 32
  %14 = and i64 %3, 4294967295
  %15 = lshr i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = lshr i64 %13, %9
  %20 = trunc i64 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %28

; <label>:23:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %24 = bitcast i64* %6 to i32*
  store i32 0, i32* %24, align 8, !tbaa !877
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %25, i64* %6, align 8
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %26, align 4, !tbaa !877
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %28

; <label>:28:                                     ; preds = %23, %12
  %29 = phi i64 [ %27, %23 ], [ %22, %12 ]
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %29 to i32
  %32 = trunc i64 %30 to i32
  %33 = bitcast i64* %2 to [2 x i32]*
  %34 = bitcast i64* %2 to i32*
  store i32 %31, i32* %34, align 1, !tbaa !877
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* %33, i64 0, i64 1
  store i32 %32, i32* %35, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLDI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %4 to i8
  %14 = icmp ugt i8 %13, 31
  %15 = and i64 %4, 255
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %14, label %42, label %20

; <label>:20:                                     ; preds = %5
  %21 = lshr i64 %12, 32
  %22 = lshr i64 %9, 32
  %23 = and i64 %9, 4294967295
  %24 = lshr i64 %23, %15
  %25 = trunc i64 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16, !tbaa !877
  %27 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %28 = lshr i64 %22, %15
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %27, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %29, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %32 = and i64 %12, 4294967295
  %33 = lshr i64 %32, %15
  %34 = trunc i64 %33 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %36 = bitcast i64* %35 to i32*
  store i32 %34, i32* %36, align 8, !tbaa !877
  %37 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %38 = lshr i64 %21, %15
  %39 = trunc i64 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 %37, i64* %18, align 8
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %39, i32* %40, align 4, !tbaa !877
  %41 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %52

; <label>:42:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %43 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %43, align 16, !tbaa !877
  %44 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %44, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 0, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %48 = bitcast i64* %47 to i32*
  store i32 0, i32* %48, align 8, !tbaa !877
  %49 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 %49, i64* %18, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 0, i32* %50, align 4, !tbaa !877
  %51 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %52

; <label>:52:                                     ; preds = %42, %20
  %53 = phi i64 [ %46, %42 ], [ %31, %20 ]
  %54 = phi i64 [ %51, %42 ], [ %41, %20 ]
  %55 = lshr i64 %53, 32
  %56 = trunc i64 %53 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1, !tbaa !877
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1, !tbaa !877
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !877
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLD_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = icmp ugt i64 %14, 31
  %16 = and i64 %14, 4294967295
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %15, label %43, label %21

; <label>:21:                                     ; preds = %5
  %22 = lshr i64 %12, 32
  %23 = lshr i64 %9, 32
  %24 = and i64 %9, 4294967295
  %25 = lshr i64 %24, %16
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16, !tbaa !877
  %28 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %29 = lshr i64 %23, %16
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %28, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %30, i32* %31, align 4, !tbaa !877
  %32 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %33 = and i64 %12, 4294967295
  %34 = lshr i64 %33, %16
  %35 = trunc i64 %34 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %37 = bitcast i64* %36 to i32*
  store i32 %35, i32* %37, align 8, !tbaa !877
  %38 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %39 = lshr i64 %22, %16
  %40 = trunc i64 %39 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 %38, i64* %19, align 8
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 %40, i32* %41, align 4, !tbaa !877
  %42 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %53

; <label>:43:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %44 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %44, align 16, !tbaa !877
  %45 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %45, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 0, i32* %46, align 4, !tbaa !877
  %47 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %49 = bitcast i64* %48 to i32*
  store i32 0, i32* %49, align 8, !tbaa !877
  %50 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 %50, i64* %19, align 8
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 0, i32* %51, align 4, !tbaa !877
  %52 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %53

; <label>:53:                                     ; preds = %43, %21
  %54 = phi i64 [ %47, %43 ], [ %32, %21 ]
  %55 = phi i64 [ %52, %43 ], [ %42, %21 ]
  %56 = lshr i64 %54, 32
  %57 = trunc i64 %54 to i32
  %58 = trunc i64 %56 to i32
  %59 = bitcast i8* %2 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  %60 = getelementptr inbounds i8, i8* %2, i64 4
  %61 = bitcast i8* %60 to i32*
  store i32 %58, i32* %61, align 1, !tbaa !877
  %62 = trunc i64 %55 to i32
  %63 = getelementptr inbounds i8, i8* %2, i64 8
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1, !tbaa !877
  %65 = lshr i64 %55, 32
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds i8, i8* %2, i64 12
  %68 = bitcast i8* %67 to i32*
  store i32 %66, i32* %68, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLD_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %14 = icmp ugt i64 %13, 31
  %15 = and i64 %13, 4294967295
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %14, label %42, label %20

; <label>:20:                                     ; preds = %5
  %21 = lshr i64 %12, 32
  %22 = lshr i64 %9, 32
  %23 = and i64 %9, 4294967295
  %24 = lshr i64 %23, %15
  %25 = trunc i64 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16, !tbaa !877
  %27 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %28 = lshr i64 %22, %15
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %27, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %29, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %32 = and i64 %12, 4294967295
  %33 = lshr i64 %32, %15
  %34 = trunc i64 %33 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %36 = bitcast i64* %35 to i32*
  store i32 %34, i32* %36, align 8, !tbaa !877
  %37 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %38 = lshr i64 %21, %15
  %39 = trunc i64 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 %37, i64* %18, align 8
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %39, i32* %40, align 4, !tbaa !877
  %41 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %52

; <label>:42:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %43 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %43, align 16, !tbaa !877
  %44 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %44, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 0, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %48 = bitcast i64* %47 to i32*
  store i32 0, i32* %48, align 8, !tbaa !877
  %49 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 %49, i64* %18, align 8
  %50 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 0, i32* %50, align 4, !tbaa !877
  %51 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %52

; <label>:52:                                     ; preds = %42, %20
  %53 = phi i64 [ %46, %42 ], [ %31, %20 ]
  %54 = phi i64 [ %51, %42 ], [ %41, %20 ]
  %55 = lshr i64 %53, 32
  %56 = trunc i64 %53 to i32
  %57 = trunc i64 %55 to i32
  %58 = bitcast i8* %2 to i32*
  store i32 %56, i32* %58, align 1, !tbaa !877
  %59 = getelementptr inbounds i8, i8* %2, i64 4
  %60 = bitcast i8* %59 to i32*
  store i32 %57, i32* %60, align 1, !tbaa !877
  %61 = trunc i64 %54 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 8
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !877
  %64 = lshr i64 %54, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 12
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  %9 = lshr i64 %3, %8
  %10 = select i1 %7, i64 0, i64 %9
  store i64 %10, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = icmp ugt i64 %4, 63
  %7 = lshr i64 %3, %4
  %8 = select i1 %6, i64 0, i64 %7
  store i64 %8, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = icmp ugt i64 %6, 63
  %8 = lshr i64 %3, %6
  %9 = select i1 %7, i64 0, i64 %8
  store i64 %9, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRLQI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  br i1 %7, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = lshr i64 %14, %8
  %16 = lshr i64 %12, %8
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1, !tbaa !870
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLQ_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %4 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = icmp ugt i64 %7, 63
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = lshr i64 %14, %7
  %16 = lshr i64 %12, %7
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1, !tbaa !870
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRLQ_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = icmp ugt i64 %6, 63
  br i1 %7, label %16, label %8

; <label>:8:                                      ; preds = %5
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %3 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = lshr i64 %13, %6
  %15 = lshr i64 %11, %6
  br label %16

; <label>:16:                                     ; preds = %8, %5
  %17 = phi i64 [ %15, %8 ], [ 0, %5 ]
  %18 = phi i64 [ %14, %8 ], [ 0, %5 ]
  %19 = bitcast i8* %2 to i64*
  store i64 %18, i64* %19, align 1, !tbaa !870
  %20 = getelementptr inbounds i8, i8* %2, i64 8
  %21 = bitcast i8* %20 to i64*
  store i64 %17, i64* %21, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = icmp ult i8 %7, 16
  %11 = shl i64 %3, 48
  %12 = ashr exact i64 %11, 48
  %13 = icmp ult i8 %7, 16
  %14 = and i64 %4, 255
  %15 = select i1 %13, i64 %14, i64 16
  %16 = ashr i64 %12, %15
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8, !tbaa !869
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %20 = shl i64 %3, 32
  %21 = ashr i64 %20, 48
  %22 = icmp ult i8 %7, 16
  %23 = and i64 %4, 255
  %24 = select i1 %22, i64 %23, i64 16
  %25 = ashr i64 %21, %24
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %19, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %26, i16* %27, align 2, !tbaa !869
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %29 = shl i64 %3, 16
  %30 = ashr i64 %29, 48
  %31 = and i64 %4, 255
  %32 = select i1 %10, i64 %31, i64 16
  %33 = ashr i64 %30, %32
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  store i16 %34, i16* %35, align 4, !tbaa !869
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %37 = ashr i64 %3, 48
  %38 = icmp ult i8 %7, 16
  %39 = and i64 %4, 255
  %40 = select i1 %38, i64 %39, i64 16
  %41 = ashr i64 %37, %40
  %42 = trunc i64 %41 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  store i16 %42, i16* %43, align 2, !tbaa !869
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %45 = lshr i64 %44, 16
  %46 = lshr i64 %44, 32
  %47 = lshr i64 %44, 48
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = bitcast i64* %2 to [4 x i16]*
  %53 = bitcast i64* %2 to i16*
  store i16 %48, i16* %53, align 1, !tbaa !869
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 1
  store i16 %49, i16* %54, align 1, !tbaa !869
  %55 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 2
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %52, i64 0, i64 3
  store i16 %51, i16* %56, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = icmp ult i64 %4, 16
  %10 = select i1 %9, i64 %4, i64 16
  %11 = shl i64 %3, 48
  %12 = ashr exact i64 %11, 48
  %13 = ashr i64 %12, %10
  %14 = trunc i64 %13 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i16*
  store i16 %14, i16* %15, align 8, !tbaa !869
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %17 = select i1 %9, i64 %4, i64 16
  %18 = shl i64 %3, 32
  %19 = ashr i64 %18, 48
  %20 = ashr i64 %19, %17
  %21 = trunc i64 %20 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %16, i64* %6, align 8
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %21, i16* %22, align 2, !tbaa !869
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %24 = select i1 %9, i64 %4, i64 16
  %25 = shl i64 %3, 16
  %26 = ashr i64 %25, 48
  %27 = ashr i64 %26, %24
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %23, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = select i1 %9, i64 %4, i64 16
  %32 = ashr i64 %3, 48
  %33 = ashr i64 %32, %31
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %34, i16* %35, align 2, !tbaa !869
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %37 = lshr i64 %36, 16
  %38 = lshr i64 %36, 32
  %39 = lshr i64 %36, 48
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = bitcast i64* %2 to [4 x i16]*
  %45 = bitcast i64* %2 to i16*
  store i16 %40, i16* %45, align 1, !tbaa !869
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %44, i64 0, i64 1
  store i16 %41, i16* %46, align 1, !tbaa !869
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %44, i64 0, i64 2
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %44, i64 0, i64 3
  store i16 %43, i16* %48, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [4 x i16]*
  %10 = icmp ult i64 %7, 16
  %11 = select i1 %10, i64 %7, i64 16
  %12 = shl i64 %3, 48
  %13 = ashr exact i64 %12, 48
  %14 = ashr i64 %13, %11
  %15 = trunc i64 %14 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %18 = select i1 %10, i64 %7, i64 16
  %19 = shl i64 %3, 32
  %20 = ashr i64 %19, 48
  %21 = ashr i64 %20, %18
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %17, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %25 = select i1 %10, i64 %7, i64 16
  %26 = shl i64 %3, 16
  %27 = ashr i64 %26, 48
  %28 = ashr i64 %27, %25
  %29 = trunc i64 %28 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %24, i64* %6, align 8
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  store i16 %29, i16* %30, align 4, !tbaa !869
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %32 = select i1 %10, i64 %7, i64 16
  %33 = ashr i64 %3, 48
  %34 = ashr i64 %33, %32
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %31, i64* %6, align 8
  %36 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %38 = lshr i64 %37, 16
  %39 = lshr i64 %37, 32
  %40 = lshr i64 %37, 48
  %41 = trunc i64 %37 to i16
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = bitcast i64* %2 to [4 x i16]*
  %46 = bitcast i64* %2 to i16*
  store i16 %41, i16* %46, align 1, !tbaa !869
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 1
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 2
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %45, i64 0, i64 3
  store i16 %44, i16* %49, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRAWI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #23
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = trunc i64 %4 to i8
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [8 x i16]*
  %19 = icmp ult i8 %14, 16
  %20 = extractelement <2 x i64> %13, i32 0
  %21 = shl i64 %20, 48
  %22 = ashr exact i64 %21, 48
  %23 = icmp ult i8 %14, 16
  %24 = and i64 %4, 255
  %25 = select i1 %23, i64 %24, i64 16
  %26 = ashr i64 %22, %25
  %27 = trunc i64 %26 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %28 = bitcast <2 x i64>* %6 to i16*
  store i16 %27, i16* %28, align 16, !tbaa !869
  %29 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %30 = shl i64 %20, 32
  %31 = ashr i64 %30, 48
  %32 = icmp ult i8 %14, 16
  %33 = and i64 %4, 255
  %34 = select i1 %32, i64 %33, i64 16
  %35 = ashr i64 %31, %34
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %29, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 1
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %39 = shl i64 %20, 16
  %40 = ashr i64 %39, 48
  %41 = icmp ult i8 %14, 16
  %42 = and i64 %4, 255
  %43 = select i1 %41, i64 %42, i64 16
  %44 = ashr i64 %40, %43
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %38, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %48 = ashr i64 %20, 48
  %49 = icmp ult i8 %14, 16
  %50 = and i64 %4, 255
  %51 = select i1 %49, i64 %50, i64 16
  %52 = ashr i64 %48, %51
  %53 = trunc i64 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %47, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 3
  store i16 %53, i16* %54, align 2, !tbaa !869
  %55 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8, !tbaa !869
  %59 = sext i16 %58 to i64
  %60 = icmp ult i8 %14, 16
  %61 = and i64 %4, 255
  %62 = select i1 %60, i64 %61, i64 16
  %63 = ashr i64 %59, %62
  %64 = trunc i64 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %66 = bitcast i64* %65 to i16*
  store i16 %64, i16* %66, align 8, !tbaa !869
  %67 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %68 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %69 = load i16, i16* %68, align 2, !tbaa !869
  %70 = sext i16 %69 to i64
  %71 = icmp ult i8 %14, 16
  %72 = and i64 %4, 255
  %73 = select i1 %71, i64 %72, i64 16
  %74 = ashr i64 %70, %73
  %75 = trunc i64 %74 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 %67, i64* %17, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 5
  store i16 %75, i16* %76, align 2, !tbaa !869
  %77 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %79 = load i16, i16* %78, align 4, !tbaa !869
  %80 = sext i16 %79 to i64
  %81 = and i64 %4, 255
  %82 = select i1 %19, i64 %81, i64 16
  %83 = ashr i64 %80, %82
  %84 = trunc i64 %83 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 %77, i64* %17, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 6
  store i16 %84, i16* %85, align 4, !tbaa !869
  %86 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %88 = load i16, i16* %87, align 2, !tbaa !869
  %89 = sext i16 %88 to i64
  %90 = icmp ult i8 %14, 16
  %91 = and i64 %4, 255
  %92 = select i1 %90, i64 %91, i64 16
  %93 = ashr i64 %89, %92
  %94 = trunc i64 %93 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %55, i64* %16, align 16
  store i64 %86, i64* %17, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 7
  store i16 %94, i16* %95, align 2, !tbaa !869
  %96 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %97 = lshr i64 %55, 16
  %98 = lshr i64 %55, 32
  %99 = lshr i64 %55, 48
  %100 = trunc i64 %55 to i16
  %101 = trunc i64 %97 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = bitcast i8* %2 to i16*
  store i16 %100, i16* %104, align 1, !tbaa !869
  %105 = getelementptr inbounds i8, i8* %2, i64 2
  %106 = bitcast i8* %105 to i16*
  store i16 %101, i16* %106, align 1, !tbaa !869
  %107 = getelementptr inbounds i8, i8* %2, i64 4
  %108 = bitcast i8* %107 to i16*
  store i16 %102, i16* %108, align 1, !tbaa !869
  %109 = getelementptr inbounds i8, i8* %2, i64 6
  %110 = bitcast i8* %109 to i16*
  store i16 %103, i16* %110, align 1, !tbaa !869
  %111 = trunc i64 %96 to i16
  %112 = getelementptr inbounds i8, i8* %2, i64 8
  %113 = bitcast i8* %112 to i16*
  store i16 %111, i16* %113, align 1, !tbaa !869
  %114 = lshr i64 %96, 16
  %115 = trunc i64 %114 to i16
  %116 = getelementptr inbounds i8, i8* %2, i64 10
  %117 = bitcast i8* %116 to i16*
  store i16 %115, i16* %117, align 1, !tbaa !869
  %118 = lshr i64 %96, 32
  %119 = trunc i64 %118 to i16
  %120 = getelementptr inbounds i8, i8* %2, i64 12
  %121 = bitcast i8* %120 to i16*
  store i16 %119, i16* %121, align 1, !tbaa !869
  %122 = lshr i64 %96, 48
  %123 = trunc i64 %122 to i16
  %124 = getelementptr inbounds i8, i8* %2, i64 14
  %125 = bitcast i8* %124 to i16*
  store i16 %123, i16* %125, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAW_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #23
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [8 x i16]*
  %20 = icmp ult i64 %15, 16
  %21 = select i1 %20, i64 %15, i64 16
  %22 = extractelement <2 x i64> %13, i32 0
  %23 = shl i64 %22, 48
  %24 = ashr exact i64 %23, 48
  %25 = ashr i64 %24, %21
  %26 = trunc i64 %25 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i16*
  store i16 %26, i16* %27, align 16, !tbaa !869
  %28 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %29 = select i1 %20, i64 %15, i64 16
  %30 = shl i64 %22, 32
  %31 = ashr i64 %30, 48
  %32 = ashr i64 %31, %29
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %28, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %36 = select i1 %20, i64 %15, i64 16
  %37 = shl i64 %22, 16
  %38 = ashr i64 %37, 48
  %39 = ashr i64 %38, %36
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %35, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  store i16 %40, i16* %41, align 4, !tbaa !869
  %42 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %43 = select i1 %20, i64 %15, i64 16
  %44 = ashr i64 %22, 48
  %45 = ashr i64 %44, %43
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %42, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8, !tbaa !869
  %52 = select i1 %20, i64 %15, i64 16
  %53 = sext i16 %51 to i64
  %54 = ashr i64 %53, %52
  %55 = trunc i64 %54 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  store i16 %55, i16* %57, align 8, !tbaa !869
  %58 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %59 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %60 = load i16, i16* %59, align 2, !tbaa !869
  %61 = select i1 %20, i64 %15, i64 16
  %62 = sext i16 %60 to i64
  %63 = ashr i64 %62, %61
  %64 = trunc i64 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %58, i64* %18, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  store i16 %64, i16* %65, align 2, !tbaa !869
  %66 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %68 = load i16, i16* %67, align 4, !tbaa !869
  %69 = select i1 %20, i64 %15, i64 16
  %70 = sext i16 %68 to i64
  %71 = ashr i64 %70, %69
  %72 = trunc i64 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %66, i64* %18, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  store i16 %72, i16* %73, align 4, !tbaa !869
  %74 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %76 = load i16, i16* %75, align 2, !tbaa !869
  %77 = select i1 %20, i64 %15, i64 16
  %78 = sext i16 %76 to i64
  %79 = ashr i64 %78, %77
  %80 = trunc i64 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %74, i64* %18, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  store i16 %80, i16* %81, align 2, !tbaa !869
  %82 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %83 = lshr i64 %48, 16
  %84 = lshr i64 %48, 32
  %85 = lshr i64 %48, 48
  %86 = trunc i64 %48 to i16
  %87 = trunc i64 %83 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = bitcast i8* %2 to i16*
  store i16 %86, i16* %90, align 1, !tbaa !869
  %91 = getelementptr inbounds i8, i8* %2, i64 2
  %92 = bitcast i8* %91 to i16*
  store i16 %87, i16* %92, align 1, !tbaa !869
  %93 = getelementptr inbounds i8, i8* %2, i64 4
  %94 = bitcast i8* %93 to i16*
  store i16 %88, i16* %94, align 1, !tbaa !869
  %95 = getelementptr inbounds i8, i8* %2, i64 6
  %96 = bitcast i8* %95 to i16*
  store i16 %89, i16* %96, align 1, !tbaa !869
  %97 = trunc i64 %82 to i16
  %98 = getelementptr inbounds i8, i8* %2, i64 8
  %99 = bitcast i8* %98 to i16*
  store i16 %97, i16* %99, align 1, !tbaa !869
  %100 = lshr i64 %82, 16
  %101 = trunc i64 %100 to i16
  %102 = getelementptr inbounds i8, i8* %2, i64 10
  %103 = bitcast i8* %102 to i16*
  store i16 %101, i16* %103, align 1, !tbaa !869
  %104 = lshr i64 %82, 32
  %105 = trunc i64 %104 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 12
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1, !tbaa !869
  %108 = lshr i64 %82, 48
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 14
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAW_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %11) #23
  %12 = bitcast i8* %3 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  store <2 x i64> %13, <2 x i64>* %8, align 16
  %14 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [8 x i16]*
  %19 = icmp ult i64 %14, 16
  %20 = select i1 %19, i64 %14, i64 16
  %21 = extractelement <2 x i64> %13, i32 0
  %22 = shl i64 %21, 48
  %23 = ashr exact i64 %22, 48
  %24 = ashr i64 %23, %20
  %25 = trunc i64 %24 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i16*
  store i16 %25, i16* %26, align 16, !tbaa !869
  %27 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %28 = select i1 %19, i64 %14, i64 16
  %29 = shl i64 %21, 32
  %30 = ashr i64 %29, 48
  %31 = ashr i64 %30, %28
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %27, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 1
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %35 = select i1 %19, i64 %14, i64 16
  %36 = shl i64 %21, 16
  %37 = ashr i64 %36, 48
  %38 = ashr i64 %37, %35
  %39 = trunc i64 %38 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %34, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 2
  store i16 %39, i16* %40, align 4, !tbaa !869
  %41 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %42 = select i1 %19, i64 %14, i64 16
  %43 = ashr i64 %21, 48
  %44 = ashr i64 %43, %42
  %45 = trunc i64 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %41, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 3
  store i16 %45, i16* %46, align 2, !tbaa !869
  %47 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %49 = bitcast i64* %48 to i16*
  %50 = load i16, i16* %49, align 8, !tbaa !869
  %51 = select i1 %19, i64 %14, i64 16
  %52 = sext i16 %50 to i64
  %53 = ashr i64 %52, %51
  %54 = trunc i64 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %47, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %56 = bitcast i64* %55 to i16*
  store i16 %54, i16* %56, align 8, !tbaa !869
  %57 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %58 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %59 = load i16, i16* %58, align 2, !tbaa !869
  %60 = select i1 %19, i64 %14, i64 16
  %61 = sext i16 %59 to i64
  %62 = ashr i64 %61, %60
  %63 = trunc i64 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %47, i64* %16, align 16
  store i64 %57, i64* %17, align 8
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 5
  store i16 %63, i16* %64, align 2, !tbaa !869
  %65 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %66 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %67 = load i16, i16* %66, align 4, !tbaa !869
  %68 = select i1 %19, i64 %14, i64 16
  %69 = sext i16 %67 to i64
  %70 = ashr i64 %69, %68
  %71 = trunc i64 %70 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %47, i64* %16, align 16
  store i64 %65, i64* %17, align 8
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 6
  store i16 %71, i16* %72, align 4, !tbaa !869
  %73 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %75 = load i16, i16* %74, align 2, !tbaa !869
  %76 = select i1 %19, i64 %14, i64 16
  %77 = sext i16 %75 to i64
  %78 = ashr i64 %77, %76
  %79 = trunc i64 %78 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %47, i64* %16, align 16
  store i64 %73, i64* %17, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %18, i64 0, i64 7
  store i16 %79, i16* %80, align 2, !tbaa !869
  %81 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %82 = lshr i64 %47, 16
  %83 = lshr i64 %47, 32
  %84 = lshr i64 %47, 48
  %85 = trunc i64 %47 to i16
  %86 = trunc i64 %82 to i16
  %87 = trunc i64 %83 to i16
  %88 = trunc i64 %84 to i16
  %89 = bitcast i8* %2 to i16*
  store i16 %85, i16* %89, align 1, !tbaa !869
  %90 = getelementptr inbounds i8, i8* %2, i64 2
  %91 = bitcast i8* %90 to i16*
  store i16 %86, i16* %91, align 1, !tbaa !869
  %92 = getelementptr inbounds i8, i8* %2, i64 4
  %93 = bitcast i8* %92 to i16*
  store i16 %87, i16* %93, align 1, !tbaa !869
  %94 = getelementptr inbounds i8, i8* %2, i64 6
  %95 = bitcast i8* %94 to i16*
  store i16 %88, i16* %95, align 1, !tbaa !869
  %96 = trunc i64 %81 to i16
  %97 = getelementptr inbounds i8, i8* %2, i64 8
  %98 = bitcast i8* %97 to i16*
  store i16 %96, i16* %98, align 1, !tbaa !869
  %99 = lshr i64 %81, 16
  %100 = trunc i64 %99 to i16
  %101 = getelementptr inbounds i8, i8* %2, i64 10
  %102 = bitcast i8* %101 to i16*
  store i16 %100, i16* %102, align 1, !tbaa !869
  %103 = lshr i64 %81, 32
  %104 = trunc i64 %103 to i16
  %105 = getelementptr inbounds i8, i8* %2, i64 12
  %106 = bitcast i8* %105 to i16*
  store i16 %104, i16* %106, align 1, !tbaa !869
  %107 = lshr i64 %81, 48
  %108 = trunc i64 %107 to i16
  %109 = getelementptr inbounds i8, i8* %2, i64 14
  %110 = bitcast i8* %109 to i16*
  store i16 %108, i16* %110, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [2 x i32]*
  %10 = icmp ult i8 %7, 32
  %11 = shl i64 %3, 32
  %12 = ashr exact i64 %11, 32
  %13 = and i64 %4, 255
  %14 = select i1 %10, i64 %13, i64 32
  %15 = ashr i64 %12, %14
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %19 = ashr i64 %3, 32
  %20 = icmp ult i8 %7, 32
  %21 = and i64 %4, 255
  %22 = select i1 %20, i64 %21, i64 32
  %23 = ashr i64 %19, %22
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %18, i64* %6, align 8
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %24, i32* %25, align 4, !tbaa !877
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %27 = lshr i64 %26, 32
  %28 = trunc i64 %26 to i32
  %29 = trunc i64 %27 to i32
  %30 = bitcast i64* %2 to [2 x i32]*
  %31 = bitcast i64* %2 to i32*
  store i32 %28, i32* %31, align 1, !tbaa !877
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0, i64 1
  store i32 %29, i32* %32, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = icmp ult i64 %4, 32
  %10 = select i1 %9, i64 %4, i64 32
  %11 = shl i64 %3, 32
  %12 = ashr exact i64 %11, 32
  %13 = ashr i64 %12, %10
  %14 = trunc i64 %13 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i32*
  store i32 %14, i32* %15, align 8, !tbaa !877
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %17 = select i1 %9, i64 %4, i64 32
  %18 = ashr i64 %3, 32
  %19 = ashr i64 %18, %17
  %20 = trunc i64 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %16, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %6 to [2 x i32]*
  %10 = icmp ult i64 %7, 32
  %11 = select i1 %10, i64 %7, i64 32
  %12 = shl i64 %3, 32
  %13 = ashr exact i64 %12, 32
  %14 = ashr i64 %13, %11
  %15 = trunc i64 %14 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8, !tbaa !877
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %18 = select i1 %10, i64 %7, i64 32
  %19 = ashr i64 %3, 32
  %20 = ashr i64 %19, %18
  %21 = trunc i64 %20 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8)
  store i64 %17, i64* %6, align 8
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %21, i32* %22, align 4, !tbaa !877
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8)
  %24 = lshr i64 %23, 32
  %25 = trunc i64 %23 to i32
  %26 = trunc i64 %24 to i32
  %27 = bitcast i64* %2 to [2 x i32]*
  %28 = bitcast i64* %2 to i32*
  store i32 %25, i32* %28, align 1, !tbaa !877
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i64 0, i64 1
  store i32 %26, i32* %29, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSRADI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %4 to i8
  %14 = bitcast <2 x i64>* %6 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %17 = bitcast <2 x i64>* %6 to [4 x i32]*
  %18 = icmp ult i8 %13, 32
  %19 = shl i64 %9, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp ult i8 %13, 32
  %22 = and i64 %4, 255
  %23 = select i1 %21, i64 %22, i64 32
  %24 = ashr i64 %20, %23
  %25 = trunc i64 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16, !tbaa !877
  %27 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %28 = ashr i64 %9, 32
  %29 = icmp ult i8 %13, 32
  %30 = and i64 %4, 255
  %31 = select i1 %29, i64 %30, i64 32
  %32 = ashr i64 %28, %31
  %33 = trunc i64 %32 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %27, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 1
  store i32 %33, i32* %34, align 4, !tbaa !877
  %35 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %36 = shl i64 %12, 32
  %37 = ashr exact i64 %36, 32
  %38 = and i64 %4, 255
  %39 = select i1 %18, i64 %38, i64 32
  %40 = ashr i64 %37, %39
  %41 = trunc i64 %40 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %35, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %43 = bitcast i64* %42 to i32*
  store i32 %41, i32* %43, align 8, !tbaa !877
  %44 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %45 = ashr i64 %12, 32
  %46 = icmp ult i8 %13, 32
  %47 = and i64 %4, 255
  %48 = select i1 %46, i64 %47, i64 32
  %49 = ashr i64 %45, %48
  %50 = trunc i64 %49 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %35, i64* %15, align 16
  store i64 %44, i64* %16, align 8
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 3
  store i32 %50, i32* %51, align 4, !tbaa !877
  %52 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %53 = lshr i64 %35, 32
  %54 = trunc i64 %35 to i32
  %55 = trunc i64 %53 to i32
  %56 = bitcast i8* %2 to i32*
  store i32 %54, i32* %56, align 1, !tbaa !877
  %57 = getelementptr inbounds i8, i8* %2, i64 4
  %58 = bitcast i8* %57 to i32*
  store i32 %55, i32* %58, align 1, !tbaa !877
  %59 = trunc i64 %52 to i32
  %60 = getelementptr inbounds i8, i8* %2, i64 8
  %61 = bitcast i8* %60 to i32*
  store i32 %59, i32* %61, align 1, !tbaa !877
  %62 = lshr i64 %52, 32
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds i8, i8* %2, i64 12
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAD_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = bitcast <2 x i64>* %6 to i8*
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %18 = bitcast <2 x i64>* %6 to [4 x i32]*
  %19 = icmp ult i64 %14, 32
  %20 = select i1 %19, i64 %14, i64 32
  %21 = shl i64 %9, 32
  %22 = ashr exact i64 %21, 32
  %23 = ashr i64 %22, %20
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %25 = bitcast <2 x i64>* %6 to i32*
  store i32 %24, i32* %25, align 16, !tbaa !877
  %26 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %27 = select i1 %19, i64 %14, i64 32
  %28 = ashr i64 %9, 32
  %29 = ashr i64 %28, %27
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %26, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 1
  store i32 %30, i32* %31, align 4, !tbaa !877
  %32 = load i64, i64* %16, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %33 = select i1 %19, i64 %14, i64 32
  %34 = shl i64 %12, 32
  %35 = ashr exact i64 %34, 32
  %36 = ashr i64 %35, %33
  %37 = trunc i64 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %32, i64* %16, align 16
  store i64 0, i64* %17, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8, !tbaa !877
  %40 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %41 = select i1 %19, i64 %14, i64 32
  %42 = ashr i64 %12, 32
  %43 = ashr i64 %42, %41
  %44 = trunc i64 %43 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %32, i64* %16, align 16
  store i64 %40, i64* %17, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i64 0, i64 3
  store i32 %44, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %47 = lshr i64 %32, 32
  %48 = trunc i64 %32 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1, !tbaa !877
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1, !tbaa !877
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSRAD_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %14 = bitcast <2 x i64>* %6 to i8*
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %17 = bitcast <2 x i64>* %6 to [4 x i32]*
  %18 = icmp ult i64 %13, 32
  %19 = select i1 %18, i64 %13, i64 32
  %20 = shl i64 %9, 32
  %21 = ashr exact i64 %20, 32
  %22 = ashr i64 %21, %19
  %23 = trunc i64 %22 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %24 = bitcast <2 x i64>* %6 to i32*
  store i32 %23, i32* %24, align 16, !tbaa !877
  %25 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %26 = select i1 %18, i64 %13, i64 32
  %27 = ashr i64 %9, 32
  %28 = ashr i64 %27, %26
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %25, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 1
  store i32 %29, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %15, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %32 = select i1 %18, i64 %13, i64 32
  %33 = shl i64 %12, 32
  %34 = ashr exact i64 %33, 32
  %35 = ashr i64 %34, %32
  %36 = trunc i64 %35 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %31, i64* %15, align 16
  store i64 0, i64* %16, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %38 = bitcast i64* %37 to i32*
  store i32 %36, i32* %38, align 8, !tbaa !877
  %39 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %40 = select i1 %18, i64 %13, i64 32
  %41 = ashr i64 %12, 32
  %42 = ashr i64 %41, %40
  %43 = trunc i64 %42 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14)
  store i64 %31, i64* %15, align 16
  store i64 %39, i64* %16, align 8
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 3
  store i32 %43, i32* %44, align 4, !tbaa !877
  %45 = load i64, i64* %16, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14)
  %46 = lshr i64 %31, 32
  %47 = trunc i64 %31 to i32
  %48 = trunc i64 %46 to i32
  %49 = bitcast i8* %2 to i32*
  store i32 %47, i32* %49, align 1, !tbaa !877
  %50 = getelementptr inbounds i8, i8* %2, i64 4
  %51 = bitcast i8* %50 to i32*
  store i32 %48, i32* %51, align 1, !tbaa !877
  %52 = trunc i64 %45 to i32
  %53 = getelementptr inbounds i8, i8* %2, i64 8
  %54 = bitcast i8* %53 to i32*
  store i32 %52, i32* %54, align 1, !tbaa !877
  %55 = lshr i64 %45, 32
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds i8, i8* %2, i64 12
  %58 = bitcast i8* %57 to i32*
  store i32 %56, i32* %58, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 15
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %8, label %36, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 48
  %14 = ashr exact i64 %13, 48
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8, !tbaa !869
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = shl i64 %3, 32
  %20 = ashr i64 %19, 48
  %21 = shl i64 %20, %9
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %25 = shl i64 %3, 16
  %26 = ashr i64 %25, 48
  %27 = shl i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = ashr i64 %3, 48
  %32 = shl i64 %31, %9
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:36:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %37 = bitcast i64* %6 to i16*
  store i16 0, i16* %37, align 8, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %39, align 2, !tbaa !869
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %41, align 4, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %42, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %43, align 2, !tbaa !869
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:45:                                     ; preds = %36, %12
  %46 = phi i64 [ %44, %36 ], [ %35, %12 ]
  %47 = lshr i64 %46, 16
  %48 = lshr i64 %46, 32
  %49 = lshr i64 %46, 48
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = bitcast i64* %2 to [4 x i16]*
  %55 = bitcast i64* %2 to i16*
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 1
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 2
  store i16 %52, i16* %57, align 1, !tbaa !869
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 3
  store i16 %53, i16* %58, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 15
  %8 = shl i64 %4, 48
  %9 = ashr exact i64 %8, 48
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  br i1 %7, label %36, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 48
  %14 = ashr exact i64 %13, 48
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i16*
  store i16 %16, i16* %17, align 8, !tbaa !869
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = shl i64 %3, 32
  %20 = ashr i64 %19, 48
  %21 = shl i64 %20, %9
  %22 = trunc i64 %21 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %25 = shl i64 %3, 16
  %26 = ashr i64 %25, 48
  %27 = shl i64 %26, %9
  %28 = trunc i64 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %24, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %31 = ashr i64 %3, 48
  %32 = shl i64 %31, %9
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %30, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:36:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %37 = bitcast i64* %6 to i16*
  store i16 0, i16* %37, align 8, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %38, i64* %6, align 8
  %39 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %39, align 2, !tbaa !869
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %40, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 0, i16* %41, align 4, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %42, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 0, i16* %43, align 2, !tbaa !869
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %45

; <label>:45:                                     ; preds = %36, %12
  %46 = phi i64 [ %44, %36 ], [ %35, %12 ]
  %47 = lshr i64 %46, 16
  %48 = lshr i64 %46, 32
  %49 = lshr i64 %46, 48
  %50 = trunc i64 %46 to i16
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = bitcast i64* %2 to [4 x i16]*
  %55 = bitcast i64* %2 to i16*
  store i16 %50, i16* %55, align 1, !tbaa !869
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 1
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 2
  store i16 %52, i16* %57, align 1, !tbaa !869
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %54, i64 0, i64 3
  store i16 %53, i16* %58, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = icmp ugt i64 %7, 15
  %9 = shl i64 %7, 48
  %10 = ashr exact i64 %9, 48
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [4 x i16]*
  br i1 %8, label %37, label %13

; <label>:13:                                     ; preds = %5
  %14 = shl i64 %3, 48
  %15 = ashr exact i64 %14, 48
  %16 = shl i64 %15, %10
  %17 = trunc i64 %16 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8, !tbaa !869
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %20 = shl i64 %3, 32
  %21 = ashr i64 %20, 48
  %22 = shl i64 %21, %10
  %23 = trunc i64 %22 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %19, i64* %6, align 8
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 1
  store i16 %23, i16* %24, align 2, !tbaa !869
  %25 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %26 = shl i64 %3, 16
  %27 = ashr i64 %26, 48
  %28 = shl i64 %27, %10
  %29 = trunc i64 %28 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %25, i64* %6, align 8
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 2
  store i16 %29, i16* %30, align 4, !tbaa !869
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %32 = ashr i64 %3, 48
  %33 = shl i64 %32, %10
  %34 = trunc i64 %33 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %31, i64* %6, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 3
  store i16 %34, i16* %35, align 2, !tbaa !869
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %46

; <label>:37:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %38 = bitcast i64* %6 to i16*
  store i16 0, i16* %38, align 8, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %39, i64* %6, align 8
  %40 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 1
  store i16 0, i16* %40, align 2, !tbaa !869
  %41 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %41, i64* %6, align 8
  %42 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 2
  store i16 0, i16* %42, align 4, !tbaa !869
  %43 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %43, i64* %6, align 8
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %12, i64 0, i64 3
  store i16 0, i16* %44, align 2, !tbaa !869
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %46

; <label>:46:                                     ; preds = %37, %13
  %47 = phi i64 [ %45, %37 ], [ %36, %13 ]
  %48 = lshr i64 %47, 16
  %49 = lshr i64 %47, 32
  %50 = lshr i64 %47, 48
  %51 = trunc i64 %47 to i16
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = trunc i64 %50 to i16
  %55 = bitcast i64* %2 to [4 x i16]*
  %56 = bitcast i64* %2 to i16*
  store i16 %51, i16* %56, align 1, !tbaa !869
  %57 = getelementptr inbounds [4 x i16], [4 x i16]* %55, i64 0, i64 1
  store i16 %52, i16* %57, align 1, !tbaa !869
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %55, i64 0, i64 2
  store i16 %53, i16* %58, align 1, !tbaa !869
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %55, i64 0, i64 3
  store i16 %54, i16* %59, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLWI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = trunc i64 %4 to i8
  %19 = icmp ugt i8 %18, 15
  %20 = and i64 %4, 255
  %21 = bitcast <2 x i64>* %6 to i8*
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %24 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %19, label %77, label %25

; <label>:25:                                     ; preds = %5
  %26 = shl i64 %12, 48
  %27 = ashr exact i64 %26, 48
  %28 = shl i64 %27, %20
  %29 = trunc i64 %28 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16, !tbaa !869
  %31 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %32 = shl i64 %12, 32
  %33 = ashr i64 %32, 48
  %34 = shl i64 %33, %20
  %35 = trunc i64 %34 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %31, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %38 = shl i64 %12, 16
  %39 = ashr i64 %38, 48
  %40 = shl i64 %39, %20
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %37, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 %41, i16* %42, align 4, !tbaa !869
  %43 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %44 = ashr i64 %12, 48
  %45 = shl i64 %44, %20
  %46 = trunc i64 %45 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %43, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %49 = shl i64 %15, 48
  %50 = ashr exact i64 %49, 48
  %51 = shl i64 %50, %20
  %52 = trunc i64 %51 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast i64* %53 to i16*
  store i16 %52, i16* %54, align 8, !tbaa !869
  %55 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %56 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %57 = load i16, i16* %56, align 2, !tbaa !869
  %58 = sext i16 %57 to i64
  %59 = shl i64 %58, %20
  %60 = trunc i64 %59 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 %55, i64* %23, align 8
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 %60, i16* %61, align 2, !tbaa !869
  %62 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %63 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %64 = load i16, i16* %63, align 4, !tbaa !869
  %65 = sext i16 %64 to i64
  %66 = shl i64 %65, %20
  %67 = trunc i64 %66 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 %62, i64* %23, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 %67, i16* %68, align 4, !tbaa !869
  %69 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  %70 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %71 = load i16, i16* %70, align 2, !tbaa !869
  %72 = sext i16 %71 to i64
  %73 = shl i64 %72, %20
  %74 = trunc i64 %73 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %48, i64* %22, align 16
  store i64 %69, i64* %23, align 8
  %75 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 %74, i16* %75, align 2, !tbaa !869
  %76 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %95

; <label>:77:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %78 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %78, align 16, !tbaa !869
  %79 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %79, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 1
  store i16 0, i16* %80, align 2, !tbaa !869
  %81 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %81, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 2
  store i16 0, i16* %82, align 4, !tbaa !869
  %83 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %83, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 3
  store i16 0, i16* %84, align 2, !tbaa !869
  %85 = load i64, i64* %22, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 0, i64* %23, align 8
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %87 = bitcast i64* %86 to i16*
  store i16 0, i16* %87, align 8, !tbaa !869
  %88 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 %88, i64* %23, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 5
  store i16 0, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 %90, i64* %23, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 6
  store i16 0, i16* %91, align 4, !tbaa !869
  %92 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %21)
  store i64 %85, i64* %22, align 16
  store i64 %92, i64* %23, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %24, i64 0, i64 7
  store i16 0, i16* %93, align 2, !tbaa !869
  %94 = load i64, i64* %23, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %21)
  br label %95

; <label>:95:                                     ; preds = %77, %25
  %96 = phi i64 [ %85, %77 ], [ %48, %25 ]
  %97 = phi i64 [ %94, %77 ], [ %76, %25 ]
  %98 = lshr i64 %96, 16
  %99 = lshr i64 %96, 32
  %100 = lshr i64 %96, 48
  %101 = trunc i64 %96 to i16
  %102 = trunc i64 %98 to i16
  %103 = trunc i64 %99 to i16
  %104 = trunc i64 %100 to i16
  %105 = bitcast i8* %2 to i16*
  store i16 %101, i16* %105, align 1, !tbaa !869
  %106 = getelementptr inbounds i8, i8* %2, i64 2
  %107 = bitcast i8* %106 to i16*
  store i16 %102, i16* %107, align 1, !tbaa !869
  %108 = getelementptr inbounds i8, i8* %2, i64 4
  %109 = bitcast i8* %108 to i16*
  store i16 %103, i16* %109, align 1, !tbaa !869
  %110 = getelementptr inbounds i8, i8* %2, i64 6
  %111 = bitcast i8* %110 to i16*
  store i16 %104, i16* %111, align 1, !tbaa !869
  %112 = trunc i64 %97 to i16
  %113 = getelementptr inbounds i8, i8* %2, i64 8
  %114 = bitcast i8* %113 to i16*
  store i16 %112, i16* %114, align 1, !tbaa !869
  %115 = lshr i64 %97, 16
  %116 = trunc i64 %115 to i16
  %117 = getelementptr inbounds i8, i8* %2, i64 10
  %118 = bitcast i8* %117 to i16*
  store i16 %116, i16* %118, align 1, !tbaa !869
  %119 = lshr i64 %97, 32
  %120 = trunc i64 %119 to i16
  %121 = getelementptr inbounds i8, i8* %2, i64 12
  %122 = bitcast i8* %121 to i16*
  store i16 %120, i16* %122, align 1, !tbaa !869
  %123 = lshr i64 %97, 48
  %124 = trunc i64 %123 to i16
  %125 = getelementptr inbounds i8, i8* %2, i64 14
  %126 = bitcast i8* %125 to i16*
  store i16 %124, i16* %126, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLW_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = bitcast i8* %4 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = icmp ugt i64 %19, 15
  %21 = shl i64 %19, 48
  %22 = ashr exact i64 %21, 48
  %23 = bitcast <2 x i64>* %6 to i8*
  %24 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %26 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %20, label %79, label %27

; <label>:27:                                     ; preds = %5
  %28 = shl i64 %12, 48
  %29 = ashr exact i64 %28, 48
  %30 = shl i64 %29, %22
  %31 = trunc i64 %30 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %32 = bitcast <2 x i64>* %6 to i16*
  store i16 %31, i16* %32, align 16, !tbaa !869
  %33 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %34 = shl i64 %12, 32
  %35 = ashr i64 %34, 48
  %36 = shl i64 %35, %22
  %37 = trunc i64 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %33, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %40 = shl i64 %12, 16
  %41 = ashr i64 %40, 48
  %42 = shl i64 %41, %22
  %43 = trunc i64 %42 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %39, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 2
  store i16 %43, i16* %44, align 4, !tbaa !869
  %45 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %46 = ashr i64 %12, 48
  %47 = shl i64 %46, %22
  %48 = trunc i64 %47 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %45, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 %48, i16* %49, align 2, !tbaa !869
  %50 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %51 = shl i64 %15, 48
  %52 = ashr exact i64 %51, 48
  %53 = shl i64 %52, %22
  %54 = trunc i64 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %56 = bitcast i64* %55 to i16*
  store i16 %54, i16* %56, align 8, !tbaa !869
  %57 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %58 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %59 = load i16, i16* %58, align 2, !tbaa !869
  %60 = sext i16 %59 to i64
  %61 = shl i64 %60, %22
  %62 = trunc i64 %61 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %57, i64* %25, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 %62, i16* %63, align 2, !tbaa !869
  %64 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %65 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %66 = load i16, i16* %65, align 4, !tbaa !869
  %67 = sext i16 %66 to i64
  %68 = shl i64 %67, %22
  %69 = trunc i64 %68 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %64, i64* %25, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 6
  store i16 %69, i16* %70, align 4, !tbaa !869
  %71 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  %72 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %73 = load i16, i16* %72, align 2, !tbaa !869
  %74 = sext i16 %73 to i64
  %75 = shl i64 %74, %22
  %76 = trunc i64 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %50, i64* %24, align 16
  store i64 %71, i64* %25, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 %76, i16* %77, align 2, !tbaa !869
  %78 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  br label %97

; <label>:79:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %80 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %80, align 16, !tbaa !869
  %81 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %81, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 1
  store i16 0, i16* %82, align 2, !tbaa !869
  %83 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %83, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 2
  store i16 0, i16* %84, align 4, !tbaa !869
  %85 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %85, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  store i16 0, i16* %86, align 2, !tbaa !869
  %87 = load i64, i64* %24, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 0, i64* %25, align 8
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %89 = bitcast i64* %88 to i16*
  store i16 0, i16* %89, align 8, !tbaa !869
  %90 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %90, i64* %25, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 5
  store i16 0, i16* %91, align 2, !tbaa !869
  %92 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %92, i64* %25, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 6
  store i16 0, i16* %93, align 4, !tbaa !869
  %94 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %23)
  store i64 %87, i64* %24, align 16
  store i64 %94, i64* %25, align 8
  %95 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 7
  store i16 0, i16* %95, align 2, !tbaa !869
  %96 = load i64, i64* %25, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %23)
  br label %97

; <label>:97:                                     ; preds = %79, %27
  %98 = phi i64 [ %87, %79 ], [ %50, %27 ]
  %99 = phi i64 [ %96, %79 ], [ %78, %27 ]
  %100 = lshr i64 %98, 16
  %101 = lshr i64 %98, 32
  %102 = lshr i64 %98, 48
  %103 = trunc i64 %98 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = trunc i64 %102 to i16
  %107 = bitcast i8* %2 to i16*
  store i16 %103, i16* %107, align 1, !tbaa !869
  %108 = getelementptr inbounds i8, i8* %2, i64 2
  %109 = bitcast i8* %108 to i16*
  store i16 %104, i16* %109, align 1, !tbaa !869
  %110 = getelementptr inbounds i8, i8* %2, i64 4
  %111 = bitcast i8* %110 to i16*
  store i16 %105, i16* %111, align 1, !tbaa !869
  %112 = getelementptr inbounds i8, i8* %2, i64 6
  %113 = bitcast i8* %112 to i16*
  store i16 %106, i16* %113, align 1, !tbaa !869
  %114 = trunc i64 %99 to i16
  %115 = getelementptr inbounds i8, i8* %2, i64 8
  %116 = bitcast i8* %115 to i16*
  store i16 %114, i16* %116, align 1, !tbaa !869
  %117 = lshr i64 %99, 16
  %118 = trunc i64 %117 to i16
  %119 = getelementptr inbounds i8, i8* %2, i64 10
  %120 = bitcast i8* %119 to i16*
  store i16 %118, i16* %120, align 1, !tbaa !869
  %121 = lshr i64 %99, 32
  %122 = trunc i64 %121 to i16
  %123 = getelementptr inbounds i8, i8* %2, i64 12
  %124 = bitcast i8* %123 to i16*
  store i16 %122, i16* %124, align 1, !tbaa !869
  %125 = lshr i64 %99, 48
  %126 = trunc i64 %125 to i16
  %127 = getelementptr inbounds i8, i8* %2, i64 14
  %128 = bitcast i8* %127 to i16*
  store i16 %126, i16* %128, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLW_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.uint16v8_t*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10) #23
  %11 = bitcast i8* %3 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %3, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 %12, i64* %16, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %19 = icmp ugt i64 %18, 15
  %20 = shl i64 %18, 48
  %21 = ashr exact i64 %20, 48
  %22 = bitcast <2 x i64>* %6 to i8*
  %23 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %25 = bitcast <2 x i64>* %6 to [8 x i16]*
  br i1 %19, label %78, label %26

; <label>:26:                                     ; preds = %5
  %27 = shl i64 %12, 48
  %28 = ashr exact i64 %27, 48
  %29 = shl i64 %28, %21
  %30 = trunc i64 %29 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %31 = bitcast <2 x i64>* %6 to i16*
  store i16 %30, i16* %31, align 16, !tbaa !869
  %32 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %33 = shl i64 %12, 32
  %34 = ashr i64 %33, 48
  %35 = shl i64 %34, %21
  %36 = trunc i64 %35 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %32, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %39 = shl i64 %12, 16
  %40 = ashr i64 %39, 48
  %41 = shl i64 %40, %21
  %42 = trunc i64 %41 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %38, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 %42, i16* %43, align 4, !tbaa !869
  %44 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %45 = ashr i64 %12, 48
  %46 = shl i64 %45, %21
  %47 = trunc i64 %46 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %44, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 %47, i16* %48, align 2, !tbaa !869
  %49 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %50 = shl i64 %15, 48
  %51 = ashr exact i64 %50, 48
  %52 = shl i64 %51, %21
  %53 = trunc i64 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %49, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %55 = bitcast i64* %54 to i16*
  store i16 %53, i16* %55, align 8, !tbaa !869
  %56 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %57 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 5
  %58 = load i16, i16* %57, align 2, !tbaa !869
  %59 = sext i16 %58 to i64
  %60 = shl i64 %59, %21
  %61 = trunc i64 %60 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %49, i64* %23, align 16
  store i64 %56, i64* %24, align 8
  %62 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 %61, i16* %62, align 2, !tbaa !869
  %63 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 6
  %65 = load i16, i16* %64, align 4, !tbaa !869
  %66 = sext i16 %65 to i64
  %67 = shl i64 %66, %21
  %68 = trunc i64 %67 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %49, i64* %23, align 16
  store i64 %63, i64* %24, align 8
  %69 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 %68, i16* %69, align 4, !tbaa !869
  %70 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  %71 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %9, i64 0, i32 0, i64 7
  %72 = load i16, i16* %71, align 2, !tbaa !869
  %73 = sext i16 %72 to i64
  %74 = shl i64 %73, %21
  %75 = trunc i64 %74 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %49, i64* %23, align 16
  store i64 %70, i64* %24, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 %75, i16* %76, align 2, !tbaa !869
  %77 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %96

; <label>:78:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %79 = bitcast <2 x i64>* %6 to i16*
  store i16 0, i16* %79, align 16, !tbaa !869
  %80 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %80, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 0, i16* %81, align 2, !tbaa !869
  %82 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %82, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 0, i16* %83, align 4, !tbaa !869
  %84 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %84, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 0, i16* %85, align 2, !tbaa !869
  %86 = load i64, i64* %23, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %86, i64* %23, align 16
  store i64 0, i64* %24, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  store i16 0, i16* %88, align 8, !tbaa !869
  %89 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %86, i64* %23, align 16
  store i64 %89, i64* %24, align 8
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 0, i16* %90, align 2, !tbaa !869
  %91 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %86, i64* %23, align 16
  store i64 %91, i64* %24, align 8
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 0, i16* %92, align 4, !tbaa !869
  %93 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %22)
  store i64 %86, i64* %23, align 16
  store i64 %93, i64* %24, align 8
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 0, i16* %94, align 2, !tbaa !869
  %95 = load i64, i64* %24, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %22)
  br label %96

; <label>:96:                                     ; preds = %78, %26
  %97 = phi i64 [ %86, %78 ], [ %49, %26 ]
  %98 = phi i64 [ %95, %78 ], [ %77, %26 ]
  %99 = lshr i64 %97, 16
  %100 = lshr i64 %97, 32
  %101 = lshr i64 %97, 48
  %102 = trunc i64 %97 to i16
  %103 = trunc i64 %99 to i16
  %104 = trunc i64 %100 to i16
  %105 = trunc i64 %101 to i16
  %106 = bitcast i8* %2 to i16*
  store i16 %102, i16* %106, align 1, !tbaa !869
  %107 = getelementptr inbounds i8, i8* %2, i64 2
  %108 = bitcast i8* %107 to i16*
  store i16 %103, i16* %108, align 1, !tbaa !869
  %109 = getelementptr inbounds i8, i8* %2, i64 4
  %110 = bitcast i8* %109 to i16*
  store i16 %104, i16* %110, align 1, !tbaa !869
  %111 = getelementptr inbounds i8, i8* %2, i64 6
  %112 = bitcast i8* %111 to i16*
  store i16 %105, i16* %112, align 1, !tbaa !869
  %113 = trunc i64 %98 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 8
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1, !tbaa !869
  %116 = lshr i64 %98, 16
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 10
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1, !tbaa !869
  %120 = lshr i64 %98, 32
  %121 = trunc i64 %120 to i16
  %122 = getelementptr inbounds i8, i8* %2, i64 12
  %123 = bitcast i8* %122 to i16*
  store i16 %121, i16* %123, align 1, !tbaa !869
  %124 = lshr i64 %98, 48
  %125 = trunc i64 %124 to i16
  %126 = getelementptr inbounds i8, i8* %2, i64 14
  %127 = bitcast i8* %126 to i16*
  store i16 %125, i16* %127, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = trunc i64 %4 to i8
  %8 = icmp ugt i8 %7, 31
  %9 = and i64 %4, 255
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %8, label %24, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = ashr i64 %3, 32
  %20 = shl i64 %19, %9
  %21 = trunc i64 %20 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %21, i32* %22, align 4, !tbaa !877
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:24:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i32*
  store i32 0, i32* %25, align 8, !tbaa !877
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %26, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %27, align 4, !tbaa !877
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:29:                                     ; preds = %24, %12
  %30 = phi i64 [ %28, %24 ], [ %23, %12 ]
  %31 = lshr i64 %30, 32
  %32 = trunc i64 %30 to i32
  %33 = trunc i64 %31 to i32
  %34 = bitcast i64* %2 to [2 x i32]*
  %35 = bitcast i64* %2 to i32*
  store i32 %32, i32* %35, align 1, !tbaa !877
  %36 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 1
  store i32 %33, i32* %36, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = icmp ugt i64 %4, 31
  %8 = shl i64 %4, 32
  %9 = ashr exact i64 %8, 32
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  br i1 %7, label %24, label %12

; <label>:12:                                     ; preds = %5
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = shl i64 %14, %9
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %17 = bitcast i64* %6 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !877
  %18 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %19 = ashr i64 %3, 32
  %20 = shl i64 %19, %9
  %21 = trunc i64 %20 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %18, i64* %6, align 8
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %21, i32* %22, align 4, !tbaa !877
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:24:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i32*
  store i32 0, i32* %25, align 8, !tbaa !877
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %26, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 0, i32* %27, align 4, !tbaa !877
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  br label %29

; <label>:29:                                     ; preds = %24, %12
  %30 = phi i64 [ %28, %24 ], [ %23, %12 ]
  %31 = lshr i64 %30, 32
  %32 = trunc i64 %30 to i32
  %33 = trunc i64 %31 to i32
  %34 = bitcast i64* %2 to [2 x i32]*
  %35 = bitcast i64* %2 to i32*
  store i32 %32, i32* %35, align 1, !tbaa !877
  %36 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 1
  store i32 %33, i32* %36, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = icmp ugt i64 %7, 31
  %9 = shl i64 %7, 32
  %10 = ashr exact i64 %9, 32
  %11 = bitcast i64* %6 to i8*
  %12 = bitcast i64* %6 to [2 x i32]*
  br i1 %8, label %25, label %13

; <label>:13:                                     ; preds = %5
  %14 = shl i64 %3, 32
  %15 = ashr exact i64 %14, 32
  %16 = shl i64 %15, %10
  %17 = trunc i64 %16 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i32*
  store i32 %17, i32* %18, align 8, !tbaa !877
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  %20 = ashr i64 %3, 32
  %21 = shl i64 %20, %10
  %22 = trunc i64 %21 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %19, i64* %6, align 8
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 %22, i32* %23, align 4, !tbaa !877
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %30

; <label>:25:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 0, i64* %6, align 8
  %26 = bitcast i64* %6 to i32*
  store i32 0, i32* %26, align 8, !tbaa !877
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11)
  store i64 %27, i64* %6, align 8
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 1
  store i32 0, i32* %28, align 4, !tbaa !877
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11)
  br label %30

; <label>:30:                                     ; preds = %25, %13
  %31 = phi i64 [ %29, %25 ], [ %24, %13 ]
  %32 = lshr i64 %31, 32
  %33 = trunc i64 %31 to i32
  %34 = trunc i64 %32 to i32
  %35 = bitcast i64* %2 to [2 x i32]*
  %36 = bitcast i64* %2 to i32*
  store i32 %33, i32* %36, align 1, !tbaa !877
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %35, i64 0, i64 1
  store i32 %34, i32* %37, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLDI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %4 to i8
  %14 = icmp ugt i8 %13, 31
  %15 = and i64 %4, 255
  %16 = bitcast <2 x i64>* %6 to i8*
  %17 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %19 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %14, label %44, label %20

; <label>:20:                                     ; preds = %5
  %21 = shl i64 %9, 32
  %22 = ashr exact i64 %21, 32
  %23 = shl i64 %22, %15
  %24 = trunc i64 %23 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %25 = bitcast <2 x i64>* %6 to i32*
  store i32 %24, i32* %25, align 16, !tbaa !877
  %26 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %27 = ashr i64 %9, 32
  %28 = shl i64 %27, %15
  %29 = trunc i64 %28 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %26, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %29, i32* %30, align 4, !tbaa !877
  %31 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %32 = shl i64 %12, 32
  %33 = ashr exact i64 %32, 32
  %34 = shl i64 %33, %15
  %35 = trunc i64 %34 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %37 = bitcast i64* %36 to i32*
  store i32 %35, i32* %37, align 8, !tbaa !877
  %38 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  %39 = ashr i64 %12, 32
  %40 = shl i64 %39, %15
  %41 = trunc i64 %40 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %31, i64* %17, align 16
  store i64 %38, i64* %18, align 8
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %41, i32* %42, align 4, !tbaa !877
  %43 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %54

; <label>:44:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %45 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %45, align 16, !tbaa !877
  %46 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %46, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 0, i32* %47, align 4, !tbaa !877
  %48 = load i64, i64* %17, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 0, i64* %18, align 8
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %50 = bitcast i64* %49 to i32*
  store i32 0, i32* %50, align 8, !tbaa !877
  %51 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16)
  store i64 %48, i64* %17, align 16
  store i64 %51, i64* %18, align 8
  %52 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 0, i32* %52, align 4, !tbaa !877
  %53 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16)
  br label %54

; <label>:54:                                     ; preds = %44, %20
  %55 = phi i64 [ %48, %44 ], [ %31, %20 ]
  %56 = phi i64 [ %53, %44 ], [ %43, %20 ]
  %57 = lshr i64 %55, 32
  %58 = trunc i64 %55 to i32
  %59 = trunc i64 %57 to i32
  %60 = bitcast i8* %2 to i32*
  store i32 %58, i32* %60, align 1, !tbaa !877
  %61 = getelementptr inbounds i8, i8* %2, i64 4
  %62 = bitcast i8* %61 to i32*
  store i32 %59, i32* %62, align 1, !tbaa !877
  %63 = trunc i64 %56 to i32
  %64 = getelementptr inbounds i8, i8* %2, i64 8
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 1, !tbaa !877
  %66 = lshr i64 %56, 32
  %67 = trunc i64 %66 to i32
  %68 = getelementptr inbounds i8, i8* %2, i64 12
  %69 = bitcast i8* %68 to i32*
  store i32 %67, i32* %69, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLD_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = icmp ugt i64 %14, 31
  %16 = shl i64 %14, 32
  %17 = ashr exact i64 %16, 32
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %15, label %46, label %22

; <label>:22:                                     ; preds = %5
  %23 = shl i64 %9, 32
  %24 = ashr exact i64 %23, 32
  %25 = shl i64 %24, %17
  %26 = trunc i64 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16, !tbaa !877
  %28 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %29 = ashr i64 %9, 32
  %30 = shl i64 %29, %17
  %31 = trunc i64 %30 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %28, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %31, i32* %32, align 4, !tbaa !877
  %33 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %34 = shl i64 %12, 32
  %35 = ashr exact i64 %34, 32
  %36 = shl i64 %35, %17
  %37 = trunc i64 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %33, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8, !tbaa !877
  %40 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %41 = ashr i64 %12, 32
  %42 = shl i64 %41, %17
  %43 = trunc i64 %42 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %33, i64* %19, align 16
  store i64 %40, i64* %20, align 8
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %43, i32* %44, align 4, !tbaa !877
  %45 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  br label %56

; <label>:46:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %47 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %47, align 16, !tbaa !877
  %48 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %48, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 0, i32* %49, align 4, !tbaa !877
  %50 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %50, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %52 = bitcast i64* %51 to i32*
  store i32 0, i32* %52, align 8, !tbaa !877
  %53 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %50, i64* %19, align 16
  store i64 %53, i64* %20, align 8
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 0, i32* %54, align 4, !tbaa !877
  %55 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  br label %56

; <label>:56:                                     ; preds = %46, %22
  %57 = phi i64 [ %50, %46 ], [ %33, %22 ]
  %58 = phi i64 [ %55, %46 ], [ %45, %22 ]
  %59 = lshr i64 %57, 32
  %60 = trunc i64 %57 to i32
  %61 = trunc i64 %59 to i32
  %62 = bitcast i8* %2 to i32*
  store i32 %60, i32* %62, align 1, !tbaa !877
  %63 = getelementptr inbounds i8, i8* %2, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %61, i32* %64, align 1, !tbaa !877
  %65 = trunc i64 %58 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 8
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1, !tbaa !877
  %68 = lshr i64 %58, 32
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 12
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLD_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %14 = icmp ugt i64 %13, 31
  %15 = shl i64 %13, 32
  %16 = ashr exact i64 %15, 32
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [4 x i32]*
  br i1 %14, label %45, label %21

; <label>:21:                                     ; preds = %5
  %22 = shl i64 %9, 32
  %23 = ashr exact i64 %22, 32
  %24 = shl i64 %23, %16
  %25 = trunc i64 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16, !tbaa !877
  %27 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %28 = ashr i64 %9, 32
  %29 = shl i64 %28, %16
  %30 = trunc i64 %29 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %27, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %30, i32* %31, align 4, !tbaa !877
  %32 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %33 = shl i64 %12, 32
  %34 = ashr exact i64 %33, 32
  %35 = shl i64 %34, %16
  %36 = trunc i64 %35 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %38 = bitcast i64* %37 to i32*
  store i32 %36, i32* %38, align 8, !tbaa !877
  %39 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %40 = ashr i64 %12, 32
  %41 = shl i64 %40, %16
  %42 = trunc i64 %41 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %32, i64* %18, align 16
  store i64 %39, i64* %19, align 8
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 %42, i32* %43, align 4, !tbaa !877
  %44 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %55

; <label>:45:                                     ; preds = %5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %46 = bitcast <2 x i64>* %6 to i32*
  store i32 0, i32* %46, align 16, !tbaa !877
  %47 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %47, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %48 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 0, i32* %48, align 4, !tbaa !877
  %49 = load i64, i64* %18, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %49, i64* %18, align 16
  store i64 0, i64* %19, align 8
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %51 = bitcast i64* %50 to i32*
  store i32 0, i32* %51, align 8, !tbaa !877
  %52 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %49, i64* %18, align 16
  store i64 %52, i64* %19, align 8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 0, i32* %53, align 4, !tbaa !877
  %54 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  br label %55

; <label>:55:                                     ; preds = %45, %21
  %56 = phi i64 [ %49, %45 ], [ %32, %21 ]
  %57 = phi i64 [ %54, %45 ], [ %44, %21 ]
  %58 = lshr i64 %56, 32
  %59 = trunc i64 %56 to i32
  %60 = trunc i64 %58 to i32
  %61 = bitcast i8* %2 to i32*
  store i32 %59, i32* %61, align 1, !tbaa !877
  %62 = getelementptr inbounds i8, i8* %2, i64 4
  %63 = bitcast i8* %62 to i32*
  store i32 %60, i32* %63, align 1, !tbaa !877
  %64 = trunc i64 %57 to i32
  %65 = getelementptr inbounds i8, i8* %2, i64 8
  %66 = bitcast i8* %65 to i32*
  store i32 %64, i32* %66, align 1, !tbaa !877
  %67 = lshr i64 %57, 32
  %68 = trunc i64 %67 to i32
  %69 = getelementptr inbounds i8, i8* %2, i64 12
  %70 = bitcast i8* %69 to i32*
  store i32 %68, i32* %70, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI4RVnWI7vec64_tE3RVnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  %9 = shl i64 %3, %8
  %10 = select i1 %7, i64 0, i64 %9
  store i64 %10, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI4RVnWI7vec64_tE3RVnIS2_E2RnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = icmp ugt i64 %4, 63
  %7 = shl i64 %3, %4
  %8 = select i1 %6, i64 0, i64 %7
  store i64 %8, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI4RVnWI7vec64_tE3RVnIS2_E2MnImEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = icmp ugt i64 %6, 63
  %8 = shl i64 %3, %6
  %9 = select i1 %7, i64 0, i64 %8
  store i64 %9, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5PSLLQI3VnWI8vec128_tE2VnIS2_E2InIhEEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = trunc i64 %4 to i8
  %7 = icmp ugt i8 %6, 63
  %8 = and i64 %4, 255
  br i1 %7, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = shl i64 %14, %8
  %16 = shl i64 %12, %8
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1, !tbaa !870
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLQ_VI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %4 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = icmp ugt i64 %7, 63
  br i1 %8, label %17, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = shl i64 %14, %7
  %16 = shl i64 %12, %7
  br label %17

; <label>:17:                                     ; preds = %9, %5
  %18 = phi i64 [ %16, %9 ], [ 0, %5 ]
  %19 = phi i64 [ %15, %9 ], [ 0, %5 ]
  %20 = bitcast i8* %2 to i64*
  store i64 %19, i64* %20, align 1, !tbaa !870
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %18, i64* %22, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PSLLQ_VI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %7 = icmp ugt i64 %6, 63
  br i1 %7, label %16, label %8

; <label>:8:                                      ; preds = %5
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %3 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = shl i64 %13, %6
  %15 = shl i64 %11, %6
  br label %16

; <label>:16:                                     ; preds = %8, %5
  %17 = phi i64 [ %15, %8 ], [ 0, %5 ]
  %18 = phi i64 [ %14, %8 ], [ 0, %5 ]
  %19 = bitcast i8* %2 to i64*
  store i64 %18, i64* %19, align 1, !tbaa !870
  %20 = getelementptr inbounds i8, i8* %2, i64 8
  %21 = bitcast i8* %20 to i64*
  store i64 %17, i64* %21, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp slt i8 %16, 0
  %18 = icmp eq i8 %16, 0
  %19 = sub i8 0, %15
  %20 = select i1 %17, i8 %19, i8 %15
  %21 = select i1 %18, i8 0, i8 %20
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %22 = bitcast i64* %6 to i8*
  store i8 %21, i8* %22, align 8, !tbaa !868
  %23 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %24 = lshr i64 %3, 8
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %4, 8
  %27 = trunc i64 %26 to i8
  %28 = icmp slt i8 %27, 0
  %29 = icmp eq i8 %27, 0
  %30 = sub i8 0, %25
  %31 = select i1 %28, i8 %30, i8 %25
  %32 = select i1 %29, i8 0, i8 %31
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %23, i64* %6, align 8
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %32, i8* %33, align 1, !tbaa !868
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %35 = lshr i64 %3, 16
  %36 = trunc i64 %35 to i8
  %37 = lshr i64 %4, 16
  %38 = trunc i64 %37 to i8
  %39 = icmp slt i8 %38, 0
  %40 = icmp eq i8 %38, 0
  %41 = sub i8 0, %36
  %42 = select i1 %39, i8 %41, i8 %36
  %43 = select i1 %40, i8 0, i8 %42
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %34, i64* %6, align 8
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %43, i8* %44, align 2, !tbaa !868
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %46 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %47 = load i8, i8* %46, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1, !tbaa !868
  %50 = icmp slt i8 %49, 0
  %51 = icmp eq i8 %49, 0
  %52 = sub i8 0, %47
  %53 = select i1 %50, i8 %52, i8 %47
  %54 = select i1 %51, i8 0, i8 %53
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %45, i64* %6, align 8
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %54, i8* %55, align 1, !tbaa !868
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %57 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %58 = load i8, i8* %57, align 4, !tbaa !868
  %59 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %60 = load i8, i8* %59, align 4, !tbaa !868
  %61 = icmp slt i8 %60, 0
  %62 = icmp eq i8 %60, 0
  %63 = sub i8 0, %58
  %64 = select i1 %61, i8 %63, i8 %58
  %65 = select i1 %62, i8 0, i8 %64
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %56, i64* %6, align 8
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %65, i8* %66, align 4, !tbaa !868
  %67 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %68 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %69 = load i8, i8* %68, align 1, !tbaa !868
  %70 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %71 = load i8, i8* %70, align 1, !tbaa !868
  %72 = icmp slt i8 %71, 0
  %73 = icmp eq i8 %71, 0
  %74 = sub i8 0, %69
  %75 = select i1 %72, i8 %74, i8 %69
  %76 = select i1 %73, i8 0, i8 %75
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %67, i64* %6, align 8
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %76, i8* %77, align 1, !tbaa !868
  %78 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %80 = load i8, i8* %79, align 2, !tbaa !868
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %82 = load i8, i8* %81, align 2, !tbaa !868
  %83 = icmp slt i8 %82, 0
  %84 = icmp eq i8 %82, 0
  %85 = sub i8 0, %80
  %86 = select i1 %83, i8 %85, i8 %80
  %87 = select i1 %84, i8 0, i8 %86
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %78, i64* %6, align 8
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %87, i8* %88, align 2, !tbaa !868
  %89 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %90 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %91 = load i8, i8* %90, align 1, !tbaa !868
  %92 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %93 = load i8, i8* %92, align 1, !tbaa !868
  %94 = icmp slt i8 %93, 0
  %95 = icmp eq i8 %93, 0
  %96 = sub i8 0, %91
  %97 = select i1 %94, i8 %96, i8 %91
  %98 = select i1 %95, i8 0, i8 %97
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %89, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %98, i8* %99, align 1, !tbaa !868
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %101 = lshr i64 %100, 8
  %102 = lshr i64 %100, 16
  %103 = lshr i64 %100, 24
  %104 = lshr i64 %100, 32
  %105 = lshr i64 %100, 40
  %106 = lshr i64 %100, 48
  %107 = lshr i64 %100, 56
  %108 = trunc i64 %100 to i8
  %109 = trunc i64 %101 to i8
  %110 = trunc i64 %102 to i8
  %111 = trunc i64 %103 to i8
  %112 = trunc i64 %104 to i8
  %113 = trunc i64 %105 to i8
  %114 = trunc i64 %106 to i8
  %115 = trunc i64 %107 to i8
  %116 = bitcast i64* %2 to [8 x i8]*
  %117 = bitcast i64* %2 to i8*
  store i8 %108, i8* %117, align 1, !tbaa !868
  %118 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 1
  store i8 %109, i8* %118, align 1, !tbaa !868
  %119 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 2
  store i8 %110, i8* %119, align 1, !tbaa !868
  %120 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 3
  store i8 %111, i8* %120, align 1, !tbaa !868
  %121 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 4
  store i8 %112, i8* %121, align 1, !tbaa !868
  %122 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 5
  store i8 %113, i8* %122, align 1, !tbaa !868
  %123 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 6
  store i8 %114, i8* %123, align 1, !tbaa !868
  %124 = getelementptr inbounds [8 x i8], [8 x i8]* %116, i64 0, i64 7
  store i8 %115, i8* %124, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i8
  %53 = icmp slt i8 %13, 0
  %54 = icmp eq i8 %13, 0
  %55 = sub i8 0, %52
  %56 = select i1 %53, i8 %55, i8 %52
  %57 = select i1 %54, i8 0, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %58 = bitcast i64* %6 to i8*
  store i8 %57, i8* %58, align 8, !tbaa !868
  %59 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %60 = lshr i64 %3, 8
  %61 = trunc i64 %60 to i8
  %62 = icmp slt i8 %15, 0
  %63 = icmp eq i8 %15, 0
  %64 = sub i8 0, %61
  %65 = select i1 %62, i8 %64, i8 %61
  %66 = select i1 %63, i8 0, i8 %65
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %59, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %66, i8* %67, align 1, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %70 = load i8, i8* %69, align 2, !tbaa !868
  %71 = icmp slt i8 %17, 0
  %72 = icmp eq i8 %17, 0
  %73 = sub i8 0, %70
  %74 = select i1 %71, i8 %73, i8 %70
  %75 = select i1 %72, i8 0, i8 %74
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %68, i64* %6, align 8
  %76 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %75, i8* %76, align 2, !tbaa !868
  %77 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %78 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %79 = load i8, i8* %78, align 1, !tbaa !868
  %80 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %81 = load i8, i8* %80, align 1, !tbaa !868
  %82 = icmp slt i8 %81, 0
  %83 = icmp eq i8 %81, 0
  %84 = sub i8 0, %79
  %85 = select i1 %82, i8 %84, i8 %79
  %86 = select i1 %83, i8 0, i8 %85
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %77, i64* %6, align 8
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %86, i8* %87, align 1, !tbaa !868
  %88 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %89 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %90 = load i8, i8* %89, align 4, !tbaa !868
  %91 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %92 = load i8, i8* %91, align 4, !tbaa !868
  %93 = icmp slt i8 %92, 0
  %94 = icmp eq i8 %92, 0
  %95 = sub i8 0, %90
  %96 = select i1 %93, i8 %95, i8 %90
  %97 = select i1 %94, i8 0, i8 %96
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %88, i64* %6, align 8
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %97, i8* %98, align 4, !tbaa !868
  %99 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %100 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %101 = load i8, i8* %100, align 1, !tbaa !868
  %102 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %103 = load i8, i8* %102, align 1, !tbaa !868
  %104 = icmp slt i8 %103, 0
  %105 = icmp eq i8 %103, 0
  %106 = sub i8 0, %101
  %107 = select i1 %104, i8 %106, i8 %101
  %108 = select i1 %105, i8 0, i8 %107
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %99, i64* %6, align 8
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %108, i8* %109, align 1, !tbaa !868
  %110 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %112 = load i8, i8* %111, align 2, !tbaa !868
  %113 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %114 = load i8, i8* %113, align 2, !tbaa !868
  %115 = icmp slt i8 %114, 0
  %116 = icmp eq i8 %114, 0
  %117 = sub i8 0, %112
  %118 = select i1 %115, i8 %117, i8 %112
  %119 = select i1 %116, i8 0, i8 %118
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %110, i64* %6, align 8
  %120 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %119, i8* %120, align 2, !tbaa !868
  %121 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %122 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %123 = load i8, i8* %122, align 1, !tbaa !868
  %124 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %125 = load i8, i8* %124, align 1, !tbaa !868
  %126 = icmp slt i8 %125, 0
  %127 = icmp eq i8 %125, 0
  %128 = sub i8 0, %123
  %129 = select i1 %126, i8 %128, i8 %123
  %130 = select i1 %127, i8 0, i8 %129
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %121, i64* %6, align 8
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %130, i8* %131, align 1, !tbaa !868
  %132 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %133 = lshr i64 %132, 8
  %134 = lshr i64 %132, 16
  %135 = lshr i64 %132, 24
  %136 = lshr i64 %132, 32
  %137 = lshr i64 %132, 40
  %138 = lshr i64 %132, 48
  %139 = lshr i64 %132, 56
  %140 = trunc i64 %132 to i8
  %141 = trunc i64 %133 to i8
  %142 = trunc i64 %134 to i8
  %143 = trunc i64 %135 to i8
  %144 = trunc i64 %136 to i8
  %145 = trunc i64 %137 to i8
  %146 = trunc i64 %138 to i8
  %147 = trunc i64 %139 to i8
  %148 = bitcast i64* %2 to [8 x i8]*
  %149 = bitcast i64* %2 to i8*
  store i8 %140, i8* %149, align 1, !tbaa !868
  %150 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 1
  store i8 %141, i8* %150, align 1, !tbaa !868
  %151 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 2
  store i8 %142, i8* %151, align 1, !tbaa !868
  %152 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 3
  store i8 %143, i8* %152, align 1, !tbaa !868
  %153 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 4
  store i8 %144, i8* %153, align 1, !tbaa !868
  %154 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 5
  store i8 %145, i8* %154, align 1, !tbaa !868
  %155 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 6
  store i8 %146, i8* %155, align 1, !tbaa !868
  %156 = getelementptr inbounds [8 x i8], [8 x i8]* %148, i64 0, i64 7
  store i8 %147, i8* %156, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp slt i8 %27, 0
  %29 = icmp eq i8 %27, 0
  %30 = sub i8 0, %25
  %31 = select i1 %28, i8 %30, i8 %25
  %32 = select i1 %29, i8 0, i8 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i8*
  store i8 %32, i8* %33, align 16, !tbaa !868
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %24, 8
  %36 = trunc i64 %35 to i8
  %37 = lshr i64 %26, 8
  %38 = trunc i64 %37 to i8
  %39 = icmp slt i8 %38, 0
  %40 = icmp eq i8 %38, 0
  %41 = sub i8 0, %36
  %42 = select i1 %39, i8 %41, i8 %36
  %43 = select i1 %40, i8 0, i8 %42
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %43, i8* %44, align 1, !tbaa !868
  %45 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %46 = lshr i64 %24, 16
  %47 = trunc i64 %46 to i8
  %48 = lshr i64 %26, 16
  %49 = trunc i64 %48 to i8
  %50 = icmp slt i8 %49, 0
  %51 = icmp eq i8 %49, 0
  %52 = sub i8 0, %47
  %53 = select i1 %50, i8 %52, i8 %47
  %54 = select i1 %51, i8 0, i8 %53
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %45, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %54, i8* %55, align 2, !tbaa !868
  %56 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %57 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %58 = load i8, i8* %57, align 1, !tbaa !868
  %59 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %60 = load i8, i8* %59, align 1, !tbaa !868
  %61 = icmp slt i8 %60, 0
  %62 = icmp eq i8 %60, 0
  %63 = sub i8 0, %58
  %64 = select i1 %61, i8 %63, i8 %58
  %65 = select i1 %62, i8 0, i8 %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %56, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %65, i8* %66, align 1, !tbaa !868
  %67 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %68 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %69 = load i8, i8* %68, align 4, !tbaa !868
  %70 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %71 = load i8, i8* %70, align 4, !tbaa !868
  %72 = icmp slt i8 %71, 0
  %73 = icmp eq i8 %71, 0
  %74 = sub i8 0, %69
  %75 = select i1 %72, i8 %74, i8 %69
  %76 = select i1 %73, i8 0, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %76, i8* %77, align 4, !tbaa !868
  %78 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %79 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %80 = load i8, i8* %79, align 1, !tbaa !868
  %81 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %82 = load i8, i8* %81, align 1, !tbaa !868
  %83 = icmp slt i8 %82, 0
  %84 = icmp eq i8 %82, 0
  %85 = sub i8 0, %80
  %86 = select i1 %83, i8 %85, i8 %80
  %87 = select i1 %84, i8 0, i8 %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %78, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %87, i8* %88, align 1, !tbaa !868
  %89 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %90 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %91 = load i8, i8* %90, align 2, !tbaa !868
  %92 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %93 = load i8, i8* %92, align 2, !tbaa !868
  %94 = icmp slt i8 %93, 0
  %95 = icmp eq i8 %93, 0
  %96 = sub i8 0, %91
  %97 = select i1 %94, i8 %96, i8 %91
  %98 = select i1 %95, i8 0, i8 %97
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %89, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %98, i8* %99, align 2, !tbaa !868
  %100 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %104 = load i8, i8* %103, align 1, !tbaa !868
  %105 = icmp slt i8 %104, 0
  %106 = icmp eq i8 %104, 0
  %107 = sub i8 0, %102
  %108 = select i1 %105, i8 %107, i8 %102
  %109 = select i1 %106, i8 0, i8 %108
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %100, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %109, i8* %110, align 1, !tbaa !868
  %111 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %113 = bitcast i64* %112 to i8*
  %114 = load i8, i8* %113, align 8, !tbaa !868
  %115 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %116 = bitcast i64* %115 to i8*
  %117 = load i8, i8* %116, align 8, !tbaa !868
  %118 = icmp slt i8 %117, 0
  %119 = icmp eq i8 %117, 0
  %120 = sub i8 0, %114
  %121 = select i1 %118, i8 %120, i8 %114
  %122 = select i1 %119, i8 0, i8 %121
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %124 = bitcast i64* %123 to i8*
  store i8 %122, i8* %124, align 8, !tbaa !868
  %125 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %127 = load i8, i8* %126, align 1, !tbaa !868
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %129 = load i8, i8* %128, align 1, !tbaa !868
  %130 = icmp slt i8 %129, 0
  %131 = icmp eq i8 %129, 0
  %132 = sub i8 0, %127
  %133 = select i1 %130, i8 %132, i8 %127
  %134 = select i1 %131, i8 0, i8 %133
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %125, i64* %22, align 8
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %134, i8* %135, align 1, !tbaa !868
  %136 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %137 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %138 = load i8, i8* %137, align 2, !tbaa !868
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = icmp slt i8 %140, 0
  %142 = icmp eq i8 %140, 0
  %143 = sub i8 0, %138
  %144 = select i1 %141, i8 %143, i8 %138
  %145 = select i1 %142, i8 0, i8 %144
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %136, i64* %22, align 8
  %146 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %145, i8* %146, align 2, !tbaa !868
  %147 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %148 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %149 = load i8, i8* %148, align 1, !tbaa !868
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %151 = load i8, i8* %150, align 1, !tbaa !868
  %152 = icmp slt i8 %151, 0
  %153 = icmp eq i8 %151, 0
  %154 = sub i8 0, %149
  %155 = select i1 %152, i8 %154, i8 %149
  %156 = select i1 %153, i8 0, i8 %155
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %147, i64* %22, align 8
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %156, i8* %157, align 1, !tbaa !868
  %158 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %160 = load i8, i8* %159, align 4, !tbaa !868
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %162 = load i8, i8* %161, align 4, !tbaa !868
  %163 = icmp slt i8 %162, 0
  %164 = icmp eq i8 %162, 0
  %165 = sub i8 0, %160
  %166 = select i1 %163, i8 %165, i8 %160
  %167 = select i1 %164, i8 0, i8 %166
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %158, i64* %22, align 8
  %168 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %167, i8* %168, align 4, !tbaa !868
  %169 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %171 = load i8, i8* %170, align 1, !tbaa !868
  %172 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %173 = load i8, i8* %172, align 1, !tbaa !868
  %174 = icmp slt i8 %173, 0
  %175 = icmp eq i8 %173, 0
  %176 = sub i8 0, %171
  %177 = select i1 %174, i8 %176, i8 %171
  %178 = select i1 %175, i8 0, i8 %177
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %169, i64* %22, align 8
  %179 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %178, i8* %179, align 1, !tbaa !868
  %180 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %181 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %182 = load i8, i8* %181, align 2, !tbaa !868
  %183 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %184 = load i8, i8* %183, align 2, !tbaa !868
  %185 = icmp slt i8 %184, 0
  %186 = icmp eq i8 %184, 0
  %187 = sub i8 0, %182
  %188 = select i1 %185, i8 %187, i8 %182
  %189 = select i1 %186, i8 0, i8 %188
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %180, i64* %22, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %189, i8* %190, align 2, !tbaa !868
  %191 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %193 = load i8, i8* %192, align 1, !tbaa !868
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp slt i8 %195, 0
  %197 = icmp eq i8 %195, 0
  %198 = sub i8 0, %193
  %199 = select i1 %196, i8 %198, i8 %193
  %200 = select i1 %197, i8 0, i8 %199
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %111, i64* %21, align 16
  store i64 %191, i64* %22, align 8
  %201 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %200, i8* %201, align 1, !tbaa !868
  %202 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %203 = lshr i64 %111, 8
  %204 = lshr i64 %111, 16
  %205 = lshr i64 %111, 24
  %206 = lshr i64 %111, 32
  %207 = lshr i64 %111, 40
  %208 = lshr i64 %111, 48
  %209 = lshr i64 %111, 56
  %210 = trunc i64 %111 to i8
  %211 = trunc i64 %203 to i8
  %212 = trunc i64 %204 to i8
  %213 = trunc i64 %205 to i8
  %214 = trunc i64 %206 to i8
  %215 = trunc i64 %207 to i8
  %216 = trunc i64 %208 to i8
  %217 = trunc i64 %209 to i8
  store i8 %210, i8* %2, align 1, !tbaa !868
  %218 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %211, i8* %218, align 1, !tbaa !868
  %219 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %212, i8* %219, align 1, !tbaa !868
  %220 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %213, i8* %220, align 1, !tbaa !868
  %221 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %214, i8* %221, align 1, !tbaa !868
  %222 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %215, i8* %222, align 1, !tbaa !868
  %223 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %216, i8* %223, align 1, !tbaa !868
  %224 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %217, i8* %224, align 1, !tbaa !868
  %225 = trunc i64 %202 to i8
  %226 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %225, i8* %226, align 1, !tbaa !868
  %227 = lshr i64 %202, 8
  %228 = trunc i64 %227 to i8
  %229 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %228, i8* %229, align 1, !tbaa !868
  %230 = lshr i64 %202, 16
  %231 = trunc i64 %230 to i8
  %232 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %231, i8* %232, align 1, !tbaa !868
  %233 = lshr i64 %202, 24
  %234 = trunc i64 %233 to i8
  %235 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %234, i8* %235, align 1, !tbaa !868
  %236 = lshr i64 %202, 32
  %237 = trunc i64 %236 to i8
  %238 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %237, i8* %238, align 1, !tbaa !868
  %239 = lshr i64 %202, 40
  %240 = trunc i64 %239 to i8
  %241 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %240, i8* %241, align 1, !tbaa !868
  %242 = lshr i64 %202, 48
  %243 = trunc i64 %242 to i8
  %244 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %243, i8* %244, align 1, !tbaa !868
  %245 = lshr i64 %202, 56
  %246 = trunc i64 %245 to i8
  %247 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %246, i8* %247, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i8
  %93 = icmp slt i8 %18, 0
  %94 = icmp eq i8 %18, 0
  %95 = sub i8 0, %92
  %96 = select i1 %93, i8 %95, i8 %92
  %97 = select i1 %94, i8 0, i8 %96
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %98 = bitcast <2 x i64>* %6 to i8*
  store i8 %97, i8* %98, align 16, !tbaa !868
  %99 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %100 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %101 = load i8, i8* %100, align 1, !tbaa !868
  %102 = icmp slt i8 %20, 0
  %103 = icmp eq i8 %20, 0
  %104 = sub i8 0, %101
  %105 = select i1 %102, i8 %104, i8 %101
  %106 = select i1 %103, i8 0, i8 %105
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %99, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %110 = load i8, i8* %109, align 2, !tbaa !868
  %111 = icmp slt i8 %22, 0
  %112 = icmp eq i8 %22, 0
  %113 = sub i8 0, %110
  %114 = select i1 %111, i8 %113, i8 %110
  %115 = select i1 %112, i8 0, i8 %114
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %108, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %115, i8* %116, align 2, !tbaa !868
  %117 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %118 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %119 = load i8, i8* %118, align 1, !tbaa !868
  %120 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %121 = load i8, i8* %120, align 1, !tbaa !868
  %122 = icmp slt i8 %121, 0
  %123 = icmp eq i8 %121, 0
  %124 = sub i8 0, %119
  %125 = select i1 %122, i8 %124, i8 %119
  %126 = select i1 %123, i8 0, i8 %125
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %117, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %126, i8* %127, align 1, !tbaa !868
  %128 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %129 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %130 = load i8, i8* %129, align 4, !tbaa !868
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %132 = load i8, i8* %131, align 4, !tbaa !868
  %133 = icmp slt i8 %132, 0
  %134 = icmp eq i8 %132, 0
  %135 = sub i8 0, %130
  %136 = select i1 %133, i8 %135, i8 %130
  %137 = select i1 %134, i8 0, i8 %136
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %128, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %138 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %137, i8* %138, align 4, !tbaa !868
  %139 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %140 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %141 = load i8, i8* %140, align 1, !tbaa !868
  %142 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %143 = load i8, i8* %142, align 1, !tbaa !868
  %144 = icmp slt i8 %143, 0
  %145 = icmp eq i8 %143, 0
  %146 = sub i8 0, %141
  %147 = select i1 %144, i8 %146, i8 %141
  %148 = select i1 %145, i8 0, i8 %147
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %139, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %148, i8* %149, align 1, !tbaa !868
  %150 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %152 = load i8, i8* %151, align 2, !tbaa !868
  %153 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %154 = load i8, i8* %153, align 2, !tbaa !868
  %155 = icmp slt i8 %154, 0
  %156 = icmp eq i8 %154, 0
  %157 = sub i8 0, %152
  %158 = select i1 %155, i8 %157, i8 %152
  %159 = select i1 %156, i8 0, i8 %158
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %150, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %159, i8* %160, align 2, !tbaa !868
  %161 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %163 = load i8, i8* %162, align 1, !tbaa !868
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %165 = load i8, i8* %164, align 1, !tbaa !868
  %166 = icmp slt i8 %165, 0
  %167 = icmp eq i8 %165, 0
  %168 = sub i8 0, %163
  %169 = select i1 %166, i8 %168, i8 %163
  %170 = select i1 %167, i8 0, i8 %169
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %161, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %171 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %170, i8* %171, align 1, !tbaa !868
  %172 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  %175 = load i8, i8* %174, align 8, !tbaa !868
  %176 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %177 = bitcast i64* %176 to i8*
  %178 = load i8, i8* %177, align 8, !tbaa !868
  %179 = icmp slt i8 %178, 0
  %180 = icmp eq i8 %178, 0
  %181 = sub i8 0, %175
  %182 = select i1 %179, i8 %181, i8 %175
  %183 = select i1 %180, i8 0, i8 %182
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %185 = bitcast i64* %184 to i8*
  store i8 %183, i8* %185, align 8, !tbaa !868
  %186 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %187 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %188 = load i8, i8* %187, align 1, !tbaa !868
  %189 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %190 = load i8, i8* %189, align 1, !tbaa !868
  %191 = icmp slt i8 %190, 0
  %192 = icmp eq i8 %190, 0
  %193 = sub i8 0, %188
  %194 = select i1 %191, i8 %193, i8 %188
  %195 = select i1 %192, i8 0, i8 %194
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %186, i64* %89, align 8
  %196 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %195, i8* %196, align 1, !tbaa !868
  %197 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %198 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %199 = load i8, i8* %198, align 2, !tbaa !868
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %201 = load i8, i8* %200, align 2, !tbaa !868
  %202 = icmp slt i8 %201, 0
  %203 = icmp eq i8 %201, 0
  %204 = sub i8 0, %199
  %205 = select i1 %202, i8 %204, i8 %199
  %206 = select i1 %203, i8 0, i8 %205
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %197, i64* %89, align 8
  %207 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %206, i8* %207, align 2, !tbaa !868
  %208 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %209 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %210 = load i8, i8* %209, align 1, !tbaa !868
  %211 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %212 = load i8, i8* %211, align 1, !tbaa !868
  %213 = icmp slt i8 %212, 0
  %214 = icmp eq i8 %212, 0
  %215 = sub i8 0, %210
  %216 = select i1 %213, i8 %215, i8 %210
  %217 = select i1 %214, i8 0, i8 %216
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %208, i64* %89, align 8
  %218 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %217, i8* %218, align 1, !tbaa !868
  %219 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %220 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %221 = load i8, i8* %220, align 4, !tbaa !868
  %222 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %223 = load i8, i8* %222, align 4, !tbaa !868
  %224 = icmp slt i8 %223, 0
  %225 = icmp eq i8 %223, 0
  %226 = sub i8 0, %221
  %227 = select i1 %224, i8 %226, i8 %221
  %228 = select i1 %225, i8 0, i8 %227
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %219, i64* %89, align 8
  %229 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %228, i8* %229, align 4, !tbaa !868
  %230 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %231 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %232 = load i8, i8* %231, align 1, !tbaa !868
  %233 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %234 = load i8, i8* %233, align 1, !tbaa !868
  %235 = icmp slt i8 %234, 0
  %236 = icmp eq i8 %234, 0
  %237 = sub i8 0, %232
  %238 = select i1 %235, i8 %237, i8 %232
  %239 = select i1 %236, i8 0, i8 %238
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %230, i64* %89, align 8
  %240 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %239, i8* %240, align 1, !tbaa !868
  %241 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %242 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %243 = load i8, i8* %242, align 2, !tbaa !868
  %244 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %245 = load i8, i8* %244, align 2, !tbaa !868
  %246 = icmp slt i8 %245, 0
  %247 = icmp eq i8 %245, 0
  %248 = sub i8 0, %243
  %249 = select i1 %246, i8 %248, i8 %243
  %250 = select i1 %247, i8 0, i8 %249
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %241, i64* %89, align 8
  %251 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %250, i8* %251, align 2, !tbaa !868
  %252 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %253 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %254 = load i8, i8* %253, align 1, !tbaa !868
  %255 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %256 = load i8, i8* %255, align 1, !tbaa !868
  %257 = icmp slt i8 %256, 0
  %258 = icmp eq i8 %256, 0
  %259 = sub i8 0, %254
  %260 = select i1 %257, i8 %259, i8 %254
  %261 = select i1 %258, i8 0, i8 %260
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %172, i64* %88, align 16
  store i64 %252, i64* %89, align 8
  %262 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %261, i8* %262, align 1, !tbaa !868
  %263 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %264 = lshr i64 %172, 8
  %265 = lshr i64 %172, 16
  %266 = lshr i64 %172, 24
  %267 = lshr i64 %172, 32
  %268 = lshr i64 %172, 40
  %269 = lshr i64 %172, 48
  %270 = lshr i64 %172, 56
  %271 = trunc i64 %172 to i8
  %272 = trunc i64 %264 to i8
  %273 = trunc i64 %265 to i8
  %274 = trunc i64 %266 to i8
  %275 = trunc i64 %267 to i8
  %276 = trunc i64 %268 to i8
  %277 = trunc i64 %269 to i8
  %278 = trunc i64 %270 to i8
  store i8 %271, i8* %2, align 1, !tbaa !868
  %279 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %272, i8* %279, align 1, !tbaa !868
  %280 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %273, i8* %280, align 1, !tbaa !868
  %281 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %274, i8* %281, align 1, !tbaa !868
  %282 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %275, i8* %282, align 1, !tbaa !868
  %283 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %276, i8* %283, align 1, !tbaa !868
  %284 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %277, i8* %284, align 1, !tbaa !868
  %285 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %278, i8* %285, align 1, !tbaa !868
  %286 = trunc i64 %263 to i8
  %287 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %286, i8* %287, align 1, !tbaa !868
  %288 = lshr i64 %263, 8
  %289 = trunc i64 %288 to i8
  %290 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %289, i8* %290, align 1, !tbaa !868
  %291 = lshr i64 %263, 16
  %292 = trunc i64 %291 to i8
  %293 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %292, i8* %293, align 1, !tbaa !868
  %294 = lshr i64 %263, 24
  %295 = trunc i64 %294 to i8
  %296 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %295, i8* %296, align 1, !tbaa !868
  %297 = lshr i64 %263, 32
  %298 = trunc i64 %297 to i8
  %299 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %298, i8* %299, align 1, !tbaa !868
  %300 = lshr i64 %263, 40
  %301 = trunc i64 %300 to i8
  %302 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %301, i8* %302, align 1, !tbaa !868
  %303 = lshr i64 %263, 48
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %304, i8* %305, align 1, !tbaa !868
  %306 = lshr i64 %263, 56
  %307 = trunc i64 %306 to i8
  %308 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %307, i8* %308, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp slt i16 %10, 0
  %12 = icmp eq i16 %10, 0
  %13 = sub i16 0, %9
  %14 = select i1 %11, i16 %13, i16 %9
  %15 = select i1 %12, i16 0, i16 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i16
  %20 = lshr i64 %4, 16
  %21 = trunc i64 %20 to i16
  %22 = icmp slt i16 %21, 0
  %23 = icmp eq i16 %21, 0
  %24 = sub i16 0, %19
  %25 = select i1 %22, i16 %24, i16 %19
  %26 = select i1 %23, i16 0, i16 %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %26, i16* %27, align 2, !tbaa !869
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %29 = lshr i64 %3, 32
  %30 = trunc i64 %29 to i16
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i16
  %33 = icmp slt i16 %32, 0
  %34 = icmp eq i16 %32, 0
  %35 = sub i16 0, %30
  %36 = select i1 %33, i16 %35, i16 %30
  %37 = select i1 %34, i16 0, i16 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %28, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %37, i16* %38, align 4, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %40 = lshr i64 %3, 48
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %4, 48
  %43 = trunc i64 %42 to i16
  %44 = icmp slt i16 %43, 0
  %45 = icmp eq i16 %43, 0
  %46 = sub i16 0, %41
  %47 = select i1 %44, i16 %46, i16 %41
  %48 = select i1 %45, i16 0, i16 %47
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %39, i64* %6, align 8
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %48, i16* %49, align 2, !tbaa !869
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %51 = lshr i64 %50, 16
  %52 = lshr i64 %50, 32
  %53 = lshr i64 %50, 48
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = bitcast i64* %2 to [4 x i16]*
  %59 = bitcast i64* %2 to i16*
  store i16 %54, i16* %59, align 1, !tbaa !869
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 1
  store i16 %55, i16* %60, align 1, !tbaa !869
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 2
  store i16 %56, i16* %61, align 1, !tbaa !869
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %58, i64 0, i64 3
  store i16 %57, i16* %62, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = bitcast i64* %6 to i8*
  %18 = bitcast i64* %6 to [4 x i16]*
  %19 = trunc i64 %3 to i16
  %20 = icmp slt i16 %10, 0
  %21 = icmp eq i16 %10, 0
  %22 = sub i16 0, %19
  %23 = select i1 %20, i16 %22, i16 %19
  %24 = select i1 %21, i16 0, i16 %23
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i16*
  store i16 %24, i16* %25, align 8, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %27 = lshr i64 %3, 16
  %28 = trunc i64 %27 to i16
  %29 = icmp slt i16 %12, 0
  %30 = icmp eq i16 %12, 0
  %31 = sub i16 0, %28
  %32 = select i1 %29, i16 %31, i16 %28
  %33 = select i1 %30, i16 0, i16 %32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %26, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %36 = lshr i64 %3, 32
  %37 = trunc i64 %36 to i16
  %38 = icmp slt i16 %14, 0
  %39 = icmp eq i16 %14, 0
  %40 = sub i16 0, %37
  %41 = select i1 %38, i16 %40, i16 %37
  %42 = select i1 %39, i16 0, i16 %41
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %35, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %42, i16* %43, align 4, !tbaa !869
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %45 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %46 = load i16, i16* %45, align 2, !tbaa !869
  %47 = icmp slt i16 %16, 0
  %48 = icmp eq i16 %16, 0
  %49 = sub i16 0, %46
  %50 = select i1 %47, i16 %49, i16 %46
  %51 = select i1 %48, i16 0, i16 %50
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %44, i64* %6, align 8
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %51, i16* %52, align 2, !tbaa !869
  %53 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %54 = lshr i64 %53, 16
  %55 = lshr i64 %53, 32
  %56 = lshr i64 %53, 48
  %57 = trunc i64 %53 to i16
  %58 = trunc i64 %54 to i16
  %59 = trunc i64 %55 to i16
  %60 = trunc i64 %56 to i16
  %61 = bitcast i64* %2 to [4 x i16]*
  %62 = bitcast i64* %2 to i16*
  store i16 %57, i16* %62, align 1, !tbaa !869
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %61, i64 0, i64 1
  store i16 %58, i16* %63, align 1, !tbaa !869
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %61, i64 0, i64 2
  store i16 %59, i16* %64, align 1, !tbaa !869
  %65 = getelementptr inbounds [4 x i16], [4 x i16]* %61, i64 0, i64 3
  store i16 %60, i16* %65, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp slt i16 %27, 0
  %29 = icmp eq i16 %27, 0
  %30 = sub i16 0, %25
  %31 = select i1 %28, i16 %30, i16 %25
  %32 = select i1 %29, i16 0, i16 %31
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16, !tbaa !869
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %24, 16
  %36 = trunc i64 %35 to i16
  %37 = lshr i64 %26, 16
  %38 = trunc i64 %37 to i16
  %39 = icmp slt i16 %38, 0
  %40 = icmp eq i16 %38, 0
  %41 = sub i16 0, %36
  %42 = select i1 %39, i16 %41, i16 %36
  %43 = select i1 %40, i16 0, i16 %42
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %43, i16* %44, align 2, !tbaa !869
  %45 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %46 = lshr i64 %24, 32
  %47 = trunc i64 %46 to i16
  %48 = lshr i64 %26, 32
  %49 = trunc i64 %48 to i16
  %50 = icmp slt i16 %49, 0
  %51 = icmp eq i16 %49, 0
  %52 = sub i16 0, %47
  %53 = select i1 %50, i16 %52, i16 %47
  %54 = select i1 %51, i16 0, i16 %53
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %45, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %54, i16* %55, align 4, !tbaa !869
  %56 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %57 = lshr i64 %24, 48
  %58 = trunc i64 %57 to i16
  %59 = lshr i64 %26, 48
  %60 = trunc i64 %59 to i16
  %61 = icmp slt i16 %60, 0
  %62 = icmp eq i16 %60, 0
  %63 = sub i16 0, %58
  %64 = select i1 %61, i16 %63, i16 %58
  %65 = select i1 %62, i16 0, i16 %64
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %56, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %66 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %65, i16* %66, align 2, !tbaa !869
  %67 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %68 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %69 = bitcast i64* %68 to i16*
  %70 = load i16, i16* %69, align 8, !tbaa !869
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %72 = bitcast i64* %71 to i16*
  %73 = load i16, i16* %72, align 8, !tbaa !869
  %74 = icmp slt i16 %73, 0
  %75 = icmp eq i16 %73, 0
  %76 = sub i16 0, %70
  %77 = select i1 %74, i16 %76, i16 %70
  %78 = select i1 %75, i16 0, i16 %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %80 = bitcast i64* %79 to i16*
  store i16 %78, i16* %80, align 8, !tbaa !869
  %81 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %83 = load i16, i16* %82, align 2, !tbaa !869
  %84 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %85 = load i16, i16* %84, align 2, !tbaa !869
  %86 = icmp slt i16 %85, 0
  %87 = icmp eq i16 %85, 0
  %88 = sub i16 0, %83
  %89 = select i1 %86, i16 %88, i16 %83
  %90 = select i1 %87, i16 0, i16 %89
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 %81, i64* %22, align 8
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %90, i16* %91, align 2, !tbaa !869
  %92 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %93 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %94 = load i16, i16* %93, align 4, !tbaa !869
  %95 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %96 = load i16, i16* %95, align 4, !tbaa !869
  %97 = icmp slt i16 %96, 0
  %98 = icmp eq i16 %96, 0
  %99 = sub i16 0, %94
  %100 = select i1 %97, i16 %99, i16 %94
  %101 = select i1 %98, i16 0, i16 %100
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 %92, i64* %22, align 8
  %102 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %101, i16* %102, align 4, !tbaa !869
  %103 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %104 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %105 = load i16, i16* %104, align 2, !tbaa !869
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %107 = load i16, i16* %106, align 2, !tbaa !869
  %108 = icmp slt i16 %107, 0
  %109 = icmp eq i16 %107, 0
  %110 = sub i16 0, %105
  %111 = select i1 %108, i16 %110, i16 %105
  %112 = select i1 %109, i16 0, i16 %111
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %67, i64* %21, align 16
  store i64 %103, i64* %22, align 8
  %113 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %112, i16* %113, align 2, !tbaa !869
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = lshr i64 %67, 16
  %116 = lshr i64 %67, 32
  %117 = lshr i64 %67, 48
  %118 = trunc i64 %67 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = trunc i64 %117 to i16
  %122 = bitcast i8* %2 to i16*
  store i16 %118, i16* %122, align 1, !tbaa !869
  %123 = getelementptr inbounds i8, i8* %2, i64 2
  %124 = bitcast i8* %123 to i16*
  store i16 %119, i16* %124, align 1, !tbaa !869
  %125 = getelementptr inbounds i8, i8* %2, i64 4
  %126 = bitcast i8* %125 to i16*
  store i16 %120, i16* %126, align 1, !tbaa !869
  %127 = getelementptr inbounds i8, i8* %2, i64 6
  %128 = bitcast i8* %127 to i16*
  store i16 %121, i16* %128, align 1, !tbaa !869
  %129 = trunc i64 %114 to i16
  %130 = getelementptr inbounds i8, i8* %2, i64 8
  %131 = bitcast i8* %130 to i16*
  store i16 %129, i16* %131, align 1, !tbaa !869
  %132 = lshr i64 %114, 16
  %133 = trunc i64 %132 to i16
  %134 = getelementptr inbounds i8, i8* %2, i64 10
  %135 = bitcast i8* %134 to i16*
  store i16 %133, i16* %135, align 1, !tbaa !869
  %136 = lshr i64 %114, 32
  %137 = trunc i64 %136 to i16
  %138 = getelementptr inbounds i8, i8* %2, i64 12
  %139 = bitcast i8* %138 to i16*
  store i16 %137, i16* %139, align 1, !tbaa !869
  %140 = lshr i64 %114, 48
  %141 = trunc i64 %140 to i16
  %142 = getelementptr inbounds i8, i8* %2, i64 14
  %143 = bitcast i8* %142 to i16*
  store i16 %141, i16* %143, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = icmp slt i16 %18, 0
  %58 = icmp eq i16 %18, 0
  %59 = sub i16 0, %56
  %60 = select i1 %57, i16 %59, i16 %56
  %61 = select i1 %58, i16 0, i16 %60
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %62 = bitcast <2 x i64>* %6 to i16*
  store i16 %61, i16* %62, align 16, !tbaa !869
  %63 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %64 = lshr i64 %55, 16
  %65 = trunc i64 %64 to i16
  %66 = icmp slt i16 %20, 0
  %67 = icmp eq i16 %20, 0
  %68 = sub i16 0, %65
  %69 = select i1 %66, i16 %68, i16 %65
  %70 = select i1 %67, i16 0, i16 %69
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %63, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %70, i16* %71, align 2, !tbaa !869
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = lshr i64 %55, 32
  %74 = trunc i64 %73 to i16
  %75 = icmp slt i16 %22, 0
  %76 = icmp eq i16 %22, 0
  %77 = sub i16 0, %74
  %78 = select i1 %75, i16 %77, i16 %74
  %79 = select i1 %76, i16 0, i16 %78
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %79, i16* %80, align 4, !tbaa !869
  %81 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %83 = load i16, i16* %82, align 2, !tbaa !869
  %84 = icmp slt i16 %24, 0
  %85 = icmp eq i16 %24, 0
  %86 = sub i16 0, %83
  %87 = select i1 %84, i16 %86, i16 %83
  %88 = select i1 %85, i16 0, i16 %87
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %81, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %92 = bitcast i64* %91 to i16*
  %93 = load i16, i16* %92, align 8, !tbaa !869
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %95 = bitcast i64* %94 to i16*
  %96 = load i16, i16* %95, align 8, !tbaa !869
  %97 = icmp slt i16 %96, 0
  %98 = icmp eq i16 %96, 0
  %99 = sub i16 0, %93
  %100 = select i1 %97, i16 %99, i16 %93
  %101 = select i1 %98, i16 0, i16 %100
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %103 = bitcast i64* %102 to i16*
  store i16 %101, i16* %103, align 8, !tbaa !869
  %104 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %105 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %106 = load i16, i16* %105, align 2, !tbaa !869
  %107 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %108 = load i16, i16* %107, align 2, !tbaa !869
  %109 = icmp slt i16 %108, 0
  %110 = icmp eq i16 %108, 0
  %111 = sub i16 0, %106
  %112 = select i1 %109, i16 %111, i16 %106
  %113 = select i1 %110, i16 0, i16 %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 %104, i64* %53, align 8
  %114 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %113, i16* %114, align 2, !tbaa !869
  %115 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %117 = load i16, i16* %116, align 4, !tbaa !869
  %118 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %119 = load i16, i16* %118, align 4, !tbaa !869
  %120 = icmp slt i16 %119, 0
  %121 = icmp eq i16 %119, 0
  %122 = sub i16 0, %117
  %123 = select i1 %120, i16 %122, i16 %117
  %124 = select i1 %121, i16 0, i16 %123
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 %115, i64* %53, align 8
  %125 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %124, i16* %125, align 4, !tbaa !869
  %126 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %128 = load i16, i16* %127, align 2, !tbaa !869
  %129 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %130 = load i16, i16* %129, align 2, !tbaa !869
  %131 = icmp slt i16 %130, 0
  %132 = icmp eq i16 %130, 0
  %133 = sub i16 0, %128
  %134 = select i1 %131, i16 %133, i16 %128
  %135 = select i1 %132, i16 0, i16 %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 %126, i64* %53, align 8
  %136 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %135, i16* %136, align 2, !tbaa !869
  %137 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %138 = lshr i64 %90, 16
  %139 = lshr i64 %90, 32
  %140 = lshr i64 %90, 48
  %141 = trunc i64 %90 to i16
  %142 = trunc i64 %138 to i16
  %143 = trunc i64 %139 to i16
  %144 = trunc i64 %140 to i16
  %145 = bitcast i8* %2 to i16*
  store i16 %141, i16* %145, align 1, !tbaa !869
  %146 = getelementptr inbounds i8, i8* %2, i64 2
  %147 = bitcast i8* %146 to i16*
  store i16 %142, i16* %147, align 1, !tbaa !869
  %148 = getelementptr inbounds i8, i8* %2, i64 4
  %149 = bitcast i8* %148 to i16*
  store i16 %143, i16* %149, align 1, !tbaa !869
  %150 = getelementptr inbounds i8, i8* %2, i64 6
  %151 = bitcast i8* %150 to i16*
  store i16 %144, i16* %151, align 1, !tbaa !869
  %152 = trunc i64 %137 to i16
  %153 = getelementptr inbounds i8, i8* %2, i64 8
  %154 = bitcast i8* %153 to i16*
  store i16 %152, i16* %154, align 1, !tbaa !869
  %155 = lshr i64 %137, 16
  %156 = trunc i64 %155 to i16
  %157 = getelementptr inbounds i8, i8* %2, i64 10
  %158 = bitcast i8* %157 to i16*
  store i16 %156, i16* %158, align 1, !tbaa !869
  %159 = lshr i64 %137, 32
  %160 = trunc i64 %159 to i16
  %161 = getelementptr inbounds i8, i8* %2, i64 12
  %162 = bitcast i8* %161 to i16*
  store i16 %160, i16* %162, align 1, !tbaa !869
  %163 = lshr i64 %137, 48
  %164 = trunc i64 %163 to i16
  %165 = getelementptr inbounds i8, i8* %2, i64 14
  %166 = bitcast i8* %165 to i16*
  store i16 %164, i16* %166, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = icmp slt i32 %10, 0
  %12 = icmp eq i32 %10, 0
  %13 = sub i32 0, %9
  %14 = select i1 %11, i32 %13, i32 %9
  %15 = select i1 %12, i32 0, i32 %14
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i32*
  store i32 %15, i32* %16, align 8, !tbaa !877
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = lshr i64 %3, 32
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %4, 32
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %21, 0
  %23 = icmp eq i32 %21, 0
  %24 = sub i32 0, %19
  %25 = select i1 %22, i32 %24, i32 %19
  %26 = select i1 %23, i32 0, i32 %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %26, i32* %27, align 4, !tbaa !877
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %28 to i32
  %31 = trunc i64 %29 to i32
  %32 = bitcast i64* %2 to [2 x i32]*
  %33 = bitcast i64* %2 to i32*
  store i32 %30, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 0, i64 1
  store i32 %31, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 4
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %8) #22
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  %12 = trunc i64 %3 to i32
  %13 = icmp slt i32 %7, 0
  %14 = icmp eq i32 %7, 0
  %15 = sub i32 0, %12
  %16 = select i1 %13, i32 %15, i32 %12
  %17 = select i1 %14, i32 0, i32 %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i32*
  store i32 %17, i32* %18, align 8, !tbaa !877
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %20 = lshr i64 %3, 32
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %9, 0
  %23 = icmp eq i32 %9, 0
  %24 = sub i32 0, %21
  %25 = select i1 %22, i32 %24, i32 %21
  %26 = select i1 %23, i32 0, i32 %25
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %19, i64* %6, align 8
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %26, i32* %27, align 4, !tbaa !877
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %29 = lshr i64 %28, 32
  %30 = trunc i64 %28 to i32
  %31 = trunc i64 %29 to i32
  %32 = bitcast i64* %2 to [2 x i32]*
  %33 = bitcast i64* %2 to i32*
  store i32 %30, i32* %33, align 1, !tbaa !877
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 0, i64 1
  store i32 %31, i32* %34, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = trunc i64 %9 to i32
  %23 = trunc i64 %14 to i32
  %24 = icmp slt i32 %23, 0
  %25 = icmp eq i32 %23, 0
  %26 = sub i32 0, %22
  %27 = select i1 %24, i32 %26, i32 %22
  %28 = select i1 %25, i32 0, i32 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i32*
  store i32 %28, i32* %29, align 16, !tbaa !877
  %30 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %31 = lshr i64 %9, 32
  %32 = trunc i64 %31 to i32
  %33 = lshr i64 %14, 32
  %34 = trunc i64 %33 to i32
  %35 = icmp slt i32 %34, 0
  %36 = icmp eq i32 %34, 0
  %37 = sub i32 0, %32
  %38 = select i1 %35, i32 %37, i32 %32
  %39 = select i1 %36, i32 0, i32 %38
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %30, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %39, i32* %40, align 4, !tbaa !877
  %41 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %42 = trunc i64 %12 to i32
  %43 = trunc i64 %17 to i32
  %44 = icmp slt i32 %43, 0
  %45 = icmp eq i32 %43, 0
  %46 = sub i32 0, %42
  %47 = select i1 %44, i32 %46, i32 %42
  %48 = select i1 %45, i32 0, i32 %47
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %41, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %50 = bitcast i64* %49 to i32*
  store i32 %48, i32* %50, align 8, !tbaa !877
  %51 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %52 = lshr i64 %12, 32
  %53 = trunc i64 %52 to i32
  %54 = lshr i64 %17, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp slt i32 %55, 0
  %57 = icmp eq i32 %55, 0
  %58 = sub i32 0, %53
  %59 = select i1 %56, i32 %58, i32 %53
  %60 = select i1 %57, i32 0, i32 %59
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %41, i64* %19, align 16
  store i64 %51, i64* %20, align 8
  %61 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %60, i32* %61, align 4, !tbaa !877
  %62 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %63 = lshr i64 %41, 32
  %64 = trunc i64 %41 to i32
  %65 = trunc i64 %63 to i32
  %66 = bitcast i8* %2 to i32*
  store i32 %64, i32* %66, align 1, !tbaa !877
  %67 = getelementptr inbounds i8, i8* %2, i64 4
  %68 = bitcast i8* %67 to i32*
  store i32 %65, i32* %68, align 1, !tbaa !877
  %69 = trunc i64 %62 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 8
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1, !tbaa !877
  %72 = lshr i64 %62, 32
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds i8, i8* %2, i64 12
  %75 = bitcast i8* %74 to i32*
  store i32 %73, i32* %75, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSIGNDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 4
  %15 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 8
  %17 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 12
  %19 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %18) #22
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [4 x i32]*
  %24 = trunc i64 %9 to i32
  %25 = icmp slt i32 %13, 0
  %26 = icmp eq i32 %13, 0
  %27 = sub i32 0, %24
  %28 = select i1 %25, i32 %27, i32 %24
  %29 = select i1 %26, i32 0, i32 %28
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i32*
  store i32 %29, i32* %30, align 16, !tbaa !877
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %9, 32
  %33 = trunc i64 %32 to i32
  %34 = icmp slt i32 %15, 0
  %35 = icmp eq i32 %15, 0
  %36 = sub i32 0, %33
  %37 = select i1 %34, i32 %36, i32 %33
  %38 = select i1 %35, i32 0, i32 %37
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 1
  store i32 %38, i32* %39, align 4, !tbaa !877
  %40 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %41 = trunc i64 %12 to i32
  %42 = icmp slt i32 %17, 0
  %43 = icmp eq i32 %17, 0
  %44 = sub i32 0, %41
  %45 = select i1 %42, i32 %44, i32 %41
  %46 = select i1 %43, i32 0, i32 %45
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %40, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %48 = bitcast i64* %47 to i32*
  store i32 %46, i32* %48, align 8, !tbaa !877
  %49 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %50 = lshr i64 %12, 32
  %51 = trunc i64 %50 to i32
  %52 = icmp slt i32 %19, 0
  %53 = icmp eq i32 %19, 0
  %54 = sub i32 0, %51
  %55 = select i1 %52, i32 %54, i32 %51
  %56 = select i1 %53, i32 0, i32 %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %40, i64* %21, align 16
  store i64 %49, i64* %22, align 8
  %57 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 3
  store i32 %56, i32* %57, align 4, !tbaa !877
  %58 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %59 = lshr i64 %40, 32
  %60 = trunc i64 %40 to i32
  %61 = trunc i64 %59 to i32
  %62 = bitcast i8* %2 to i32*
  store i32 %60, i32* %62, align 1, !tbaa !877
  %63 = getelementptr inbounds i8, i8* %2, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %61, i32* %64, align 1, !tbaa !877
  %65 = trunc i64 %58 to i32
  %66 = getelementptr inbounds i8, i8* %2, i64 8
  %67 = bitcast i8* %66 to i32*
  store i32 %65, i32* %67, align 1, !tbaa !877
  %68 = lshr i64 %58, 32
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds i8, i8* %2, i64 12
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %4 to i8
  %16 = and i64 %4, 7
  %17 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %16
  %18 = load i8, i8* %17, align 1, !tbaa !868
  %19 = icmp slt i8 %15, 0
  %20 = select i1 %19, i8 0, i8 %18
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %21 = bitcast i64* %6 to i8*
  store i8 %20, i8* %21, align 8, !tbaa !868
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = and i64 %23, 7
  %26 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %25
  %27 = load i8, i8* %26, align 1, !tbaa !868
  %28 = icmp slt i8 %24, 0
  %29 = select i1 %28, i8 0, i8 %27
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %22, i64* %6, align 8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %29, i8* %30, align 1, !tbaa !868
  %31 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %32 = lshr i64 %4, 16
  %33 = trunc i64 %32 to i8
  %34 = and i64 %32, 7
  %35 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %34
  %36 = load i8, i8* %35, align 1, !tbaa !868
  %37 = icmp slt i8 %33, 0
  %38 = select i1 %37, i8 0, i8 %36
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %31, i64* %6, align 8
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %38, i8* %39, align 2, !tbaa !868
  %40 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %41 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %42 = load i8, i8* %41, align 1, !tbaa !868
  %43 = and i8 %42, 7
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %44
  %46 = load i8, i8* %45, align 1, !tbaa !868
  %47 = icmp slt i8 %42, 0
  %48 = select i1 %47, i8 0, i8 %46
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %40, i64* %6, align 8
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %48, i8* %49, align 1, !tbaa !868
  %50 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %51 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %52 = load i8, i8* %51, align 4, !tbaa !868
  %53 = and i8 %52, 7
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %54
  %56 = load i8, i8* %55, align 1, !tbaa !868
  %57 = icmp slt i8 %52, 0
  %58 = select i1 %57, i8 0, i8 %56
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %50, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %58, i8* %59, align 4, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %62 = load i8, i8* %61, align 1, !tbaa !868
  %63 = and i8 %62, 7
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %64
  %66 = load i8, i8* %65, align 1, !tbaa !868
  %67 = icmp slt i8 %62, 0
  %68 = select i1 %67, i8 0, i8 %66
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %68, i8* %69, align 1, !tbaa !868
  %70 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %72 = load i8, i8* %71, align 2, !tbaa !868
  %73 = and i8 %72, 7
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %74
  %76 = load i8, i8* %75, align 1, !tbaa !868
  %77 = icmp slt i8 %72, 0
  %78 = select i1 %77, i8 0, i8 %76
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %70, i64* %6, align 8
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %78, i8* %79, align 2, !tbaa !868
  %80 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %81 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %82 = load i8, i8* %81, align 1, !tbaa !868
  %83 = and i8 %82, 7
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %84
  %86 = load i8, i8* %85, align 1, !tbaa !868
  %87 = icmp slt i8 %82, 0
  %88 = select i1 %87, i8 0, i8 %86
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %80, i64* %6, align 8
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %88, i8* %89, align 1, !tbaa !868
  %90 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %91 = lshr i64 %90, 8
  %92 = lshr i64 %90, 16
  %93 = lshr i64 %90, 24
  %94 = lshr i64 %90, 32
  %95 = lshr i64 %90, 40
  %96 = lshr i64 %90, 48
  %97 = lshr i64 %90, 56
  %98 = trunc i64 %90 to i8
  %99 = trunc i64 %91 to i8
  %100 = trunc i64 %92 to i8
  %101 = trunc i64 %93 to i8
  %102 = trunc i64 %94 to i8
  %103 = trunc i64 %95 to i8
  %104 = trunc i64 %96 to i8
  %105 = trunc i64 %97 to i8
  %106 = bitcast i64* %2 to [8 x i8]*
  %107 = bitcast i64* %2 to i8*
  store i8 %98, i8* %107, align 1, !tbaa !868
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 1
  store i8 %99, i8* %108, align 1, !tbaa !868
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 2
  store i8 %100, i8* %109, align 1, !tbaa !868
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 3
  store i8 %101, i8* %110, align 1, !tbaa !868
  %111 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 4
  store i8 %102, i8* %111, align 1, !tbaa !868
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 5
  store i8 %103, i8* %112, align 1, !tbaa !868
  %113 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 6
  store i8 %104, i8* %113, align 1, !tbaa !868
  %114 = getelementptr inbounds [8 x i8], [8 x i8]* %106, i64 0, i64 7
  store i8 %105, i8* %114, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = and i8 %13, 7
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %53
  %55 = load i8, i8* %54, align 1, !tbaa !868
  %56 = icmp slt i8 %13, 0
  %57 = select i1 %56, i8 0, i8 %55
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %58 = bitcast i64* %6 to i8*
  store i8 %57, i8* %58, align 8, !tbaa !868
  %59 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %60 = and i64 %40, 7
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %60
  %62 = load i8, i8* %61, align 1, !tbaa !868
  %63 = icmp slt i8 %15, 0
  %64 = select i1 %63, i8 0, i8 %62
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %59, i64* %6, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %64, i8* %65, align 1, !tbaa !868
  %66 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %67 = and i64 %38, 7
  %68 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %67
  %69 = load i8, i8* %68, align 1, !tbaa !868
  %70 = icmp slt i8 %17, 0
  %71 = select i1 %70, i8 0, i8 %69
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %66, i64* %6, align 8
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %71, i8* %72, align 2, !tbaa !868
  %73 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %74 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %75 = load i8, i8* %74, align 1, !tbaa !868
  %76 = and i8 %75, 7
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %77
  %79 = load i8, i8* %78, align 1, !tbaa !868
  %80 = icmp slt i8 %75, 0
  %81 = select i1 %80, i8 0, i8 %79
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %73, i64* %6, align 8
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %81, i8* %82, align 1, !tbaa !868
  %83 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %84 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %85 = load i8, i8* %84, align 4, !tbaa !868
  %86 = and i8 %85, 7
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %87
  %89 = load i8, i8* %88, align 1, !tbaa !868
  %90 = icmp slt i8 %85, 0
  %91 = select i1 %90, i8 0, i8 %89
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %83, i64* %6, align 8
  %92 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %91, i8* %92, align 4, !tbaa !868
  %93 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %94 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %95 = load i8, i8* %94, align 1, !tbaa !868
  %96 = and i8 %95, 7
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %97
  %99 = load i8, i8* %98, align 1, !tbaa !868
  %100 = icmp slt i8 %95, 0
  %101 = select i1 %100, i8 0, i8 %99
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %93, i64* %6, align 8
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %101, i8* %102, align 1, !tbaa !868
  %103 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %104 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %105 = load i8, i8* %104, align 2, !tbaa !868
  %106 = and i8 %105, 7
  %107 = zext i8 %106 to i64
  %108 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !868
  %110 = icmp slt i8 %105, 0
  %111 = select i1 %110, i8 0, i8 %109
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %103, i64* %6, align 8
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %111, i8* %112, align 2, !tbaa !868
  %113 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %114 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %115 = load i8, i8* %114, align 1, !tbaa !868
  %116 = and i8 %115, 7
  %117 = zext i8 %116 to i64
  %118 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 %117
  %119 = load i8, i8* %118, align 1, !tbaa !868
  %120 = icmp slt i8 %115, 0
  %121 = select i1 %120, i8 0, i8 %119
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %113, i64* %6, align 8
  %122 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %121, i8* %122, align 1, !tbaa !868
  %123 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %124 = lshr i64 %123, 8
  %125 = lshr i64 %123, 16
  %126 = lshr i64 %123, 24
  %127 = lshr i64 %123, 32
  %128 = lshr i64 %123, 40
  %129 = lshr i64 %123, 48
  %130 = lshr i64 %123, 56
  %131 = trunc i64 %123 to i8
  %132 = trunc i64 %124 to i8
  %133 = trunc i64 %125 to i8
  %134 = trunc i64 %126 to i8
  %135 = trunc i64 %127 to i8
  %136 = trunc i64 %128 to i8
  %137 = trunc i64 %129 to i8
  %138 = trunc i64 %130 to i8
  %139 = bitcast i64* %2 to [8 x i8]*
  %140 = bitcast i64* %2 to i8*
  store i8 %131, i8* %140, align 1, !tbaa !868
  %141 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 1
  store i8 %132, i8* %141, align 1, !tbaa !868
  %142 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 2
  store i8 %133, i8* %142, align 1, !tbaa !868
  %143 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 3
  store i8 %134, i8* %143, align 1, !tbaa !868
  %144 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 4
  store i8 %135, i8* %144, align 1, !tbaa !868
  %145 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 5
  store i8 %136, i8* %145, align 1, !tbaa !868
  %146 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 6
  store i8 %137, i8* %146, align 1, !tbaa !868
  %147 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 7
  store i8 %138, i8* %147, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %8, align 16
  %16 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = bitcast i8* %4 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  store <2 x i64> %18, <2 x i64>* %10, align 16
  %19 = bitcast <2 x i64>* %6 to i8*
  %20 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %22 = bitcast <2 x i64>* %6 to [16 x i8]*
  %23 = extractelement <2 x i64> %18, i32 0
  %24 = trunc i64 %23 to i8
  %25 = and i64 %23, 7
  %26 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %25
  %27 = load i8, i8* %26, align 1, !tbaa !868
  %28 = icmp slt i8 %24, 0
  %29 = select i1 %28, i8 0, i8 %27
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16, !tbaa !868
  %31 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %32 = lshr i64 %23, 8
  %33 = trunc i64 %32 to i8
  %34 = and i64 %32, 7
  %35 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %34
  %36 = load i8, i8* %35, align 1, !tbaa !868
  %37 = icmp slt i8 %33, 0
  %38 = select i1 %37, i8 0, i8 %36
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %31, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 1
  store i8 %38, i8* %39, align 1, !tbaa !868
  %40 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %41 = lshr i64 %23, 16
  %42 = trunc i64 %41 to i8
  %43 = and i64 %41, 7
  %44 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %43
  %45 = load i8, i8* %44, align 1, !tbaa !868
  %46 = icmp slt i8 %42, 0
  %47 = select i1 %46, i8 0, i8 %45
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %40, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 2
  store i8 %47, i8* %48, align 2, !tbaa !868
  %49 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1, !tbaa !868
  %52 = and i8 %51, 7
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %53
  %55 = load i8, i8* %54, align 1, !tbaa !868
  %56 = icmp slt i8 %51, 0
  %57 = select i1 %56, i8 0, i8 %55
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %49, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 3
  store i8 %57, i8* %58, align 1, !tbaa !868
  %59 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %60 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %61 = load i8, i8* %60, align 4, !tbaa !868
  %62 = and i8 %61, 7
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %63
  %65 = load i8, i8* %64, align 1, !tbaa !868
  %66 = icmp slt i8 %61, 0
  %67 = select i1 %66, i8 0, i8 %65
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %59, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 4
  store i8 %67, i8* %68, align 4, !tbaa !868
  %69 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %70 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %71 = load i8, i8* %70, align 1, !tbaa !868
  %72 = and i8 %71, 7
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %73
  %75 = load i8, i8* %74, align 1, !tbaa !868
  %76 = icmp slt i8 %71, 0
  %77 = select i1 %76, i8 0, i8 %75
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %69, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 5
  store i8 %77, i8* %78, align 1, !tbaa !868
  %79 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %81 = load i8, i8* %80, align 2, !tbaa !868
  %82 = and i8 %81, 7
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %83
  %85 = load i8, i8* %84, align 1, !tbaa !868
  %86 = icmp slt i8 %81, 0
  %87 = select i1 %86, i8 0, i8 %85
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %79, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 6
  store i8 %87, i8* %88, align 2, !tbaa !868
  %89 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %90 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %91 = load i8, i8* %90, align 1, !tbaa !868
  %92 = and i8 %91, 7
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %93
  %95 = load i8, i8* %94, align 1, !tbaa !868
  %96 = icmp slt i8 %91, 0
  %97 = select i1 %96, i8 0, i8 %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %89, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %98 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 7
  store i8 %97, i8* %98, align 1, !tbaa !868
  %99 = load i64, i64* %20, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %101 = bitcast i64* %100 to i8*
  %102 = load i8, i8* %101, align 8, !tbaa !868
  %103 = and i8 %102, 7
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %104
  %106 = load i8, i8* %105, align 1, !tbaa !868
  %107 = icmp slt i8 %102, 0
  %108 = select i1 %107, i8 0, i8 %106
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 0, i64* %21, align 8
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %110 = bitcast i64* %109 to i8*
  store i8 %108, i8* %110, align 8, !tbaa !868
  %111 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %112 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 9
  %113 = load i8, i8* %112, align 1, !tbaa !868
  %114 = and i8 %113, 7
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %115
  %117 = load i8, i8* %116, align 1, !tbaa !868
  %118 = icmp slt i8 %113, 0
  %119 = select i1 %118, i8 0, i8 %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %111, i64* %21, align 8
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 9
  store i8 %119, i8* %120, align 1, !tbaa !868
  %121 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 10
  %123 = load i8, i8* %122, align 2, !tbaa !868
  %124 = and i8 %123, 7
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %125
  %127 = load i8, i8* %126, align 1, !tbaa !868
  %128 = icmp slt i8 %123, 0
  %129 = select i1 %128, i8 0, i8 %127
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %121, i64* %21, align 8
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 10
  store i8 %129, i8* %130, align 2, !tbaa !868
  %131 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %132 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 11
  %133 = load i8, i8* %132, align 1, !tbaa !868
  %134 = and i8 %133, 7
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %135
  %137 = load i8, i8* %136, align 1, !tbaa !868
  %138 = icmp slt i8 %133, 0
  %139 = select i1 %138, i8 0, i8 %137
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %131, i64* %21, align 8
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 11
  store i8 %139, i8* %140, align 1, !tbaa !868
  %141 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %142 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 12
  %143 = load i8, i8* %142, align 4, !tbaa !868
  %144 = and i8 %143, 7
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %145
  %147 = load i8, i8* %146, align 1, !tbaa !868
  %148 = icmp slt i8 %143, 0
  %149 = select i1 %148, i8 0, i8 %147
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %141, i64* %21, align 8
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 12
  store i8 %149, i8* %150, align 4, !tbaa !868
  %151 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %152 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 13
  %153 = load i8, i8* %152, align 1, !tbaa !868
  %154 = and i8 %153, 7
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %155
  %157 = load i8, i8* %156, align 1, !tbaa !868
  %158 = icmp slt i8 %153, 0
  %159 = select i1 %158, i8 0, i8 %157
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %151, i64* %21, align 8
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 13
  store i8 %159, i8* %160, align 1, !tbaa !868
  %161 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 14
  %163 = load i8, i8* %162, align 2, !tbaa !868
  %164 = and i8 %163, 7
  %165 = zext i8 %164 to i64
  %166 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %165
  %167 = load i8, i8* %166, align 1, !tbaa !868
  %168 = icmp slt i8 %163, 0
  %169 = select i1 %168, i8 0, i8 %167
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %161, i64* %21, align 8
  %170 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 14
  store i8 %169, i8* %170, align 2, !tbaa !868
  %171 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %172 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 15
  %173 = load i8, i8* %172, align 1, !tbaa !868
  %174 = and i8 %173, 7
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %175
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = icmp slt i8 %173, 0
  %179 = select i1 %178, i8 0, i8 %177
  call void @llvm.lifetime.start(i64 16, i8* nonnull %19)
  store i64 %99, i64* %20, align 16
  store i64 %171, i64* %21, align 8
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %22, i64 0, i64 15
  store i8 %179, i8* %180, align 1, !tbaa !868
  %181 = load i64, i64* %21, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %19)
  %182 = lshr i64 %99, 8
  %183 = lshr i64 %99, 16
  %184 = lshr i64 %99, 24
  %185 = lshr i64 %99, 32
  %186 = lshr i64 %99, 40
  %187 = lshr i64 %99, 48
  %188 = lshr i64 %99, 56
  %189 = trunc i64 %99 to i8
  %190 = trunc i64 %182 to i8
  %191 = trunc i64 %183 to i8
  %192 = trunc i64 %184 to i8
  %193 = trunc i64 %185 to i8
  %194 = trunc i64 %186 to i8
  %195 = trunc i64 %187 to i8
  %196 = trunc i64 %188 to i8
  store i8 %189, i8* %2, align 1, !tbaa !868
  %197 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %190, i8* %197, align 1, !tbaa !868
  %198 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %191, i8* %198, align 1, !tbaa !868
  %199 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %192, i8* %199, align 1, !tbaa !868
  %200 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %193, i8* %200, align 1, !tbaa !868
  %201 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %194, i8* %201, align 1, !tbaa !868
  %202 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %195, i8* %202, align 1, !tbaa !868
  %203 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %196, i8* %203, align 1, !tbaa !868
  %204 = trunc i64 %181 to i8
  %205 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %204, i8* %205, align 1, !tbaa !868
  %206 = lshr i64 %181, 8
  %207 = trunc i64 %206 to i8
  %208 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %207, i8* %208, align 1, !tbaa !868
  %209 = lshr i64 %181, 16
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %210, i8* %211, align 1, !tbaa !868
  %212 = lshr i64 %181, 24
  %213 = trunc i64 %212 to i8
  %214 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %213, i8* %214, align 1, !tbaa !868
  %215 = lshr i64 %181, 32
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %216, i8* %217, align 1, !tbaa !868
  %218 = lshr i64 %181, 40
  %219 = trunc i64 %218 to i8
  %220 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %219, i8* %220, align 1, !tbaa !868
  %221 = lshr i64 %181, 48
  %222 = trunc i64 %221 to i8
  %223 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %222, i8* %223, align 1, !tbaa !868
  %224 = lshr i64 %181, 56
  %225 = trunc i64 %224 to i8
  %226 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %225, i8* %226, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %10 = alloca <2 x i64>, align 16
  %11 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %12 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %13 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13) #23
  %14 = bitcast i8* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  store <2 x i64> %15, <2 x i64>* %8, align 16
  %16 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %16) #23
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %18 = add i64 %4, 1
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 2
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 3
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 4
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 5
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %4, 6
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %4, 7
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = add i64 %4, 8
  %33 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %32) #22
  %34 = add i64 %4, 9
  %35 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %34) #22
  %36 = add i64 %4, 10
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = add i64 %4, 11
  %39 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %38) #22
  %40 = add i64 %4, 12
  %41 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %40) #22
  %42 = add i64 %4, 13
  %43 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %42) #22
  %44 = add i64 %4, 14
  %45 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %44) #22
  %46 = add i64 %4, 15
  %47 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %46) #22
  %48 = insertelement <2 x i8> undef, i8 %31, i32 0
  %49 = insertelement <2 x i8> %48, i8 %47, i32 1
  %50 = zext <2 x i8> %49 to <2 x i64>
  %51 = shl nuw <2 x i64> %50, <i64 56, i64 56>
  %52 = insertelement <2 x i8> undef, i8 %29, i32 0
  %53 = insertelement <2 x i8> %52, i8 %45, i32 1
  %54 = zext <2 x i8> %53 to <2 x i64>
  %55 = shl nuw nsw <2 x i64> %54, <i64 48, i64 48>
  %56 = insertelement <2 x i8> undef, i8 %27, i32 0
  %57 = insertelement <2 x i8> %56, i8 %43, i32 1
  %58 = zext <2 x i8> %57 to <2 x i64>
  %59 = shl nuw nsw <2 x i64> %58, <i64 40, i64 40>
  %60 = insertelement <2 x i8> undef, i8 %25, i32 0
  %61 = insertelement <2 x i8> %60, i8 %41, i32 1
  %62 = zext <2 x i8> %61 to <2 x i64>
  %63 = shl nuw nsw <2 x i64> %62, <i64 32, i64 32>
  %64 = insertelement <2 x i8> undef, i8 %23, i32 0
  %65 = insertelement <2 x i8> %64, i8 %39, i32 1
  %66 = zext <2 x i8> %65 to <2 x i64>
  %67 = shl nuw nsw <2 x i64> %66, <i64 24, i64 24>
  %68 = insertelement <2 x i8> undef, i8 %21, i32 0
  %69 = insertelement <2 x i8> %68, i8 %37, i32 1
  %70 = zext <2 x i8> %69 to <2 x i64>
  %71 = shl nuw nsw <2 x i64> %70, <i64 16, i64 16>
  %72 = insertelement <2 x i8> undef, i8 %19, i32 0
  %73 = insertelement <2 x i8> %72, i8 %35, i32 1
  %74 = zext <2 x i8> %73 to <2 x i64>
  %75 = shl nuw nsw <2 x i64> %74, <i64 8, i64 8>
  %76 = insertelement <2 x i8> undef, i8 %17, i32 0
  %77 = insertelement <2 x i8> %76, i8 %33, i32 1
  %78 = zext <2 x i8> %77 to <2 x i64>
  %79 = or <2 x i64> %75, %78
  %80 = or <2 x i64> %79, %71
  %81 = or <2 x i64> %80, %67
  %82 = or <2 x i64> %81, %63
  %83 = or <2 x i64> %82, %59
  %84 = or <2 x i64> %83, %55
  %85 = or <2 x i64> %84, %51
  store <2 x i64> %85, <2 x i64>* %10, align 16
  %86 = bitcast <2 x i64>* %6 to i8*
  %87 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %89 = bitcast <2 x i64>* %6 to [16 x i8]*
  %90 = and i8 %17, 7
  %91 = zext i8 %90 to i64
  %92 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %91
  %93 = load i8, i8* %92, align 1, !tbaa !868
  %94 = icmp slt i8 %17, 0
  %95 = select i1 %94, i8 0, i8 %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %96 = bitcast <2 x i64>* %6 to i8*
  store i8 %95, i8* %96, align 16, !tbaa !868
  %97 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %98 = extractelement <2 x i64> %74, i32 0
  %99 = and i64 %98, 7
  %100 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %99
  %101 = load i8, i8* %100, align 1, !tbaa !868
  %102 = icmp slt i8 %19, 0
  %103 = select i1 %102, i8 0, i8 %101
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %97, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 1
  store i8 %103, i8* %104, align 1, !tbaa !868
  %105 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %106 = extractelement <2 x i64> %70, i32 0
  %107 = and i64 %106, 7
  %108 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !868
  %110 = icmp slt i8 %21, 0
  %111 = select i1 %110, i8 0, i8 %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %105, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %112 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 2
  store i8 %111, i8* %112, align 2, !tbaa !868
  %113 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 3
  %115 = load i8, i8* %114, align 1, !tbaa !868
  %116 = and i8 %115, 7
  %117 = zext i8 %116 to i64
  %118 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %117
  %119 = load i8, i8* %118, align 1, !tbaa !868
  %120 = icmp slt i8 %115, 0
  %121 = select i1 %120, i8 0, i8 %119
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %113, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 3
  store i8 %121, i8* %122, align 1, !tbaa !868
  %123 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %124 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 4
  %125 = load i8, i8* %124, align 4, !tbaa !868
  %126 = and i8 %125, 7
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %127
  %129 = load i8, i8* %128, align 1, !tbaa !868
  %130 = icmp slt i8 %125, 0
  %131 = select i1 %130, i8 0, i8 %129
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %123, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 4
  store i8 %131, i8* %132, align 4, !tbaa !868
  %133 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 5
  %135 = load i8, i8* %134, align 1, !tbaa !868
  %136 = and i8 %135, 7
  %137 = zext i8 %136 to i64
  %138 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %137
  %139 = load i8, i8* %138, align 1, !tbaa !868
  %140 = icmp slt i8 %135, 0
  %141 = select i1 %140, i8 0, i8 %139
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %133, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 5
  store i8 %141, i8* %142, align 1, !tbaa !868
  %143 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 6
  %145 = load i8, i8* %144, align 2, !tbaa !868
  %146 = and i8 %145, 7
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %147
  %149 = load i8, i8* %148, align 1, !tbaa !868
  %150 = icmp slt i8 %145, 0
  %151 = select i1 %150, i8 0, i8 %149
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %143, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 6
  store i8 %151, i8* %152, align 2, !tbaa !868
  %153 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %154 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 7
  %155 = load i8, i8* %154, align 1, !tbaa !868
  %156 = and i8 %155, 7
  %157 = zext i8 %156 to i64
  %158 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %157
  %159 = load i8, i8* %158, align 1, !tbaa !868
  %160 = icmp slt i8 %155, 0
  %161 = select i1 %160, i8 0, i8 %159
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %153, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 7
  store i8 %161, i8* %162, align 1, !tbaa !868
  %163 = load i64, i64* %87, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %164 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %165 = bitcast i64* %164 to i8*
  %166 = load i8, i8* %165, align 8, !tbaa !868
  %167 = and i8 %166, 7
  %168 = zext i8 %167 to i64
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %168
  %170 = load i8, i8* %169, align 1, !tbaa !868
  %171 = icmp slt i8 %166, 0
  %172 = select i1 %171, i8 0, i8 %170
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 0, i64* %88, align 8
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %174 = bitcast i64* %173 to i8*
  store i8 %172, i8* %174, align 8, !tbaa !868
  %175 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 9
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = and i8 %177, 7
  %179 = zext i8 %178 to i64
  %180 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %179
  %181 = load i8, i8* %180, align 1, !tbaa !868
  %182 = icmp slt i8 %177, 0
  %183 = select i1 %182, i8 0, i8 %181
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %175, i64* %88, align 8
  %184 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 9
  store i8 %183, i8* %184, align 1, !tbaa !868
  %185 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 10
  %187 = load i8, i8* %186, align 2, !tbaa !868
  %188 = and i8 %187, 7
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %189
  %191 = load i8, i8* %190, align 1, !tbaa !868
  %192 = icmp slt i8 %187, 0
  %193 = select i1 %192, i8 0, i8 %191
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %185, i64* %88, align 8
  %194 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 10
  store i8 %193, i8* %194, align 2, !tbaa !868
  %195 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %196 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 11
  %197 = load i8, i8* %196, align 1, !tbaa !868
  %198 = and i8 %197, 7
  %199 = zext i8 %198 to i64
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %199
  %201 = load i8, i8* %200, align 1, !tbaa !868
  %202 = icmp slt i8 %197, 0
  %203 = select i1 %202, i8 0, i8 %201
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %195, i64* %88, align 8
  %204 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 11
  store i8 %203, i8* %204, align 1, !tbaa !868
  %205 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %206 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 12
  %207 = load i8, i8* %206, align 4, !tbaa !868
  %208 = and i8 %207, 7
  %209 = zext i8 %208 to i64
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %209
  %211 = load i8, i8* %210, align 1, !tbaa !868
  %212 = icmp slt i8 %207, 0
  %213 = select i1 %212, i8 0, i8 %211
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %205, i64* %88, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 12
  store i8 %213, i8* %214, align 4, !tbaa !868
  %215 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %216 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 13
  %217 = load i8, i8* %216, align 1, !tbaa !868
  %218 = and i8 %217, 7
  %219 = zext i8 %218 to i64
  %220 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %219
  %221 = load i8, i8* %220, align 1, !tbaa !868
  %222 = icmp slt i8 %217, 0
  %223 = select i1 %222, i8 0, i8 %221
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %215, i64* %88, align 8
  %224 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 13
  store i8 %223, i8* %224, align 1, !tbaa !868
  %225 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %226 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 14
  %227 = load i8, i8* %226, align 2, !tbaa !868
  %228 = and i8 %227, 7
  %229 = zext i8 %228 to i64
  %230 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %229
  %231 = load i8, i8* %230, align 1, !tbaa !868
  %232 = icmp slt i8 %227, 0
  %233 = select i1 %232, i8 0, i8 %231
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %225, i64* %88, align 8
  %234 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 14
  store i8 %233, i8* %234, align 2, !tbaa !868
  %235 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %236 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %12, i64 0, i32 0, i64 15
  %237 = load i8, i8* %236, align 1, !tbaa !868
  %238 = and i8 %237, 7
  %239 = zext i8 %238 to i64
  %240 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %9, i64 0, i32 0, i64 %239
  %241 = load i8, i8* %240, align 1, !tbaa !868
  %242 = icmp slt i8 %237, 0
  %243 = select i1 %242, i8 0, i8 %241
  call void @llvm.lifetime.start(i64 16, i8* nonnull %86)
  store i64 %163, i64* %87, align 16
  store i64 %235, i64* %88, align 8
  %244 = getelementptr inbounds [16 x i8], [16 x i8]* %89, i64 0, i64 15
  store i8 %243, i8* %244, align 1, !tbaa !868
  %245 = load i64, i64* %88, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %86)
  %246 = lshr i64 %163, 8
  %247 = lshr i64 %163, 16
  %248 = lshr i64 %163, 24
  %249 = lshr i64 %163, 32
  %250 = lshr i64 %163, 40
  %251 = lshr i64 %163, 48
  %252 = lshr i64 %163, 56
  %253 = trunc i64 %163 to i8
  %254 = trunc i64 %246 to i8
  %255 = trunc i64 %247 to i8
  %256 = trunc i64 %248 to i8
  %257 = trunc i64 %249 to i8
  %258 = trunc i64 %250 to i8
  %259 = trunc i64 %251 to i8
  %260 = trunc i64 %252 to i8
  store i8 %253, i8* %2, align 1, !tbaa !868
  %261 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %254, i8* %261, align 1, !tbaa !868
  %262 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %255, i8* %262, align 1, !tbaa !868
  %263 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %256, i8* %263, align 1, !tbaa !868
  %264 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %257, i8* %264, align 1, !tbaa !868
  %265 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %258, i8* %265, align 1, !tbaa !868
  %266 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %259, i8* %266, align 1, !tbaa !868
  %267 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %260, i8* %267, align 1, !tbaa !868
  %268 = trunc i64 %245 to i8
  %269 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %268, i8* %269, align 1, !tbaa !868
  %270 = lshr i64 %245, 8
  %271 = trunc i64 %270 to i8
  %272 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %271, i8* %272, align 1, !tbaa !868
  %273 = lshr i64 %245, 16
  %274 = trunc i64 %273 to i8
  %275 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %274, i8* %275, align 1, !tbaa !868
  %276 = lshr i64 %245, 24
  %277 = trunc i64 %276 to i8
  %278 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %277, i8* %278, align 1, !tbaa !868
  %279 = lshr i64 %245, 32
  %280 = trunc i64 %279 to i8
  %281 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %280, i8* %281, align 1, !tbaa !868
  %282 = lshr i64 %245, 40
  %283 = trunc i64 %282 to i8
  %284 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %283, i8* %284, align 1, !tbaa !868
  %285 = lshr i64 %245, 48
  %286 = trunc i64 %285 to i8
  %287 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %286, i8* %287, align 1, !tbaa !868
  %288 = lshr i64 %245, 56
  %289 = trunc i64 %288 to i8
  %290 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %289, i8* %290, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %16) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFWI4RVnWI7vec64_tE3RVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [4 x i16]*
  %12 = and i64 %4, 3
  %13 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %12
  %14 = load i16, i16* %13, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i16*
  store i16 %14, i16* %15, align 8, !tbaa !869
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %17 = lshr i64 %4, 1
  %18 = and i64 %17, 3
  %19 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %18
  %20 = load i16, i16* %19, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %16, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %23 = lshr i64 %4, 2
  %24 = and i64 %23, 3
  %25 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %24
  %26 = load i16, i16* %25, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %22, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 2
  store i16 %26, i16* %27, align 4, !tbaa !869
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %29 = lshr i64 %4, 3
  %30 = and i64 %29, 3
  %31 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %30
  %32 = load i16, i16* %31, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %28, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1, !tbaa !869
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1, !tbaa !869
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1, !tbaa !869
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFWI4RVnWI7vec64_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %11 = add i64 %3, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %3, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %3, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = zext i16 %16 to i64
  %18 = shl nuw i64 %17, 48
  %19 = zext i16 %14 to i64
  %20 = shl nuw nsw i64 %19, 32
  %21 = zext i16 %12 to i64
  %22 = shl nuw nsw i64 %21, 16
  %23 = zext i16 %10 to i64
  %24 = or i64 %22, %23
  %25 = or i64 %24, %20
  %26 = or i64 %25, %18
  store i64 %26, i64* %7, align 8
  %27 = bitcast i64* %6 to i8*
  %28 = bitcast i64* %6 to [4 x i16]*
  %29 = and i64 %4, 3
  %30 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %29
  %31 = load i16, i16* %30, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 0, i64* %6, align 8
  %32 = bitcast i64* %6 to i16*
  store i16 %31, i16* %32, align 8, !tbaa !869
  %33 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %34 = lshr i64 %4, 1
  %35 = and i64 %34, 3
  %36 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %35
  %37 = load i16, i16* %36, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %33, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %40 = lshr i64 %4, 2
  %41 = and i64 %40, 3
  %42 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %41
  %43 = load i16, i16* %42, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %39, i64* %6, align 8
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 2
  store i16 %43, i16* %44, align 4, !tbaa !869
  %45 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %46 = lshr i64 %4, 3
  %47 = and i64 %46, 3
  %48 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 %47
  %49 = load i16, i16* %48, align 2, !tbaa !869
  call void @llvm.lifetime.start(i64 8, i8* nonnull %27)
  store i64 %45, i64* %6, align 8
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %28, i64 0, i64 3
  store i16 %49, i16* %50, align 2, !tbaa !869
  %51 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %27)
  %52 = lshr i64 %51, 16
  %53 = lshr i64 %51, 32
  %54 = lshr i64 %51, 48
  %55 = trunc i64 %51 to i16
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = trunc i64 %54 to i16
  %59 = bitcast i64* %2 to [4 x i16]*
  %60 = bitcast i64* %2 to i16*
  store i16 %55, i16* %60, align 1, !tbaa !869
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 1
  store i16 %56, i16* %61, align 1, !tbaa !869
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 2
  store i16 %57, i16* %62, align 1, !tbaa !869
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 3
  store i16 %58, i16* %63, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = icmp uge i8 %6, %7
  %9 = sub i64 %3, %4
  %10 = sub i64 %4, %3
  %11 = select i1 %8, i64 %9, i64 %10
  %12 = and i64 %11, 255
  %13 = lshr i64 %3, 8
  %14 = trunc i64 %13 to i8
  %15 = lshr i64 %4, 8
  %16 = trunc i64 %15 to i8
  %17 = icmp uge i8 %14, %16
  %18 = sub nsw i64 %13, %15
  %19 = sub nsw i64 %15, %13
  %20 = select i1 %17, i64 %18, i64 %19
  %21 = and i64 %20, 255
  %22 = add nuw nsw i64 %21, %12
  %23 = lshr i64 %3, 16
  %24 = trunc i64 %23 to i8
  %25 = lshr i64 %4, 16
  %26 = trunc i64 %25 to i8
  %27 = icmp uge i8 %24, %26
  %28 = sub nsw i64 %23, %25
  %29 = sub nsw i64 %25, %23
  %30 = select i1 %27, i64 %28, i64 %29
  %31 = and i64 %30, 255
  %32 = add nuw nsw i64 %31, %22
  %33 = lshr i64 %3, 24
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %4, 24
  %36 = trunc i64 %35 to i8
  %37 = icmp uge i8 %34, %36
  %38 = sub nsw i64 %33, %35
  %39 = sub nsw i64 %35, %33
  %40 = select i1 %37, i64 %38, i64 %39
  %41 = and i64 %40, 255
  %42 = add nuw nsw i64 %41, %32
  %43 = lshr i64 %3, 32
  %44 = trunc i64 %43 to i8
  %45 = lshr i64 %4, 32
  %46 = trunc i64 %45 to i8
  %47 = icmp uge i8 %44, %46
  %48 = sub nsw i64 %43, %45
  %49 = sub nsw i64 %45, %43
  %50 = select i1 %47, i64 %48, i64 %49
  %51 = and i64 %50, 255
  %52 = add nuw nsw i64 %51, %42
  %53 = lshr i64 %3, 40
  %54 = trunc i64 %53 to i8
  %55 = lshr i64 %4, 40
  %56 = trunc i64 %55 to i8
  %57 = icmp uge i8 %54, %56
  %58 = sub nsw i64 %53, %55
  %59 = sub nsw i64 %55, %53
  %60 = select i1 %57, i64 %58, i64 %59
  %61 = and i64 %60, 255
  %62 = add nuw nsw i64 %61, %52
  %63 = lshr i64 %3, 48
  %64 = trunc i64 %63 to i8
  %65 = lshr i64 %4, 48
  %66 = trunc i64 %65 to i8
  %67 = icmp uge i8 %64, %66
  %68 = sub nsw i64 %63, %65
  %69 = sub nsw i64 %65, %63
  %70 = select i1 %67, i64 %68, i64 %69
  %71 = and i64 %70, 255
  %72 = add nuw nsw i64 %71, %62
  %73 = lshr i64 %3, 56
  %74 = trunc i64 %73 to i8
  %75 = lshr i64 %4, 56
  %76 = trunc i64 %75 to i8
  %77 = icmp uge i8 %74, %76
  %78 = sub nsw i64 %73, %75
  %79 = sub nsw i64 %75, %73
  %80 = select i1 %77, i64 %78, i64 %79
  %81 = and i64 %80, 255
  %82 = add i64 %81, %72
  %83 = and i64 %82, 65535
  store i64 %83, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %8) #23
  store i64 %3, i64* %6, align 8
  %9 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %10 = add i64 %4, 1
  %11 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 2
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %12) #22
  %14 = add i64 %4, 3
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 4
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 5
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 6
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 7
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = zext i8 %19 to i64
  %25 = zext i8 %17 to i64
  %26 = zext i8 %15 to i64
  %27 = zext i8 %13 to i64
  %28 = zext i8 %11 to i64
  %29 = trunc i64 %3 to i8
  %30 = icmp uge i8 %29, %9
  %31 = sub i8 %29, %9
  %32 = sub i8 %9, %29
  %33 = select i1 %30, i8 %31, i8 %32
  %34 = zext i8 %33 to i64
  %35 = lshr i64 %3, 8
  %36 = trunc i64 %35 to i8
  %37 = icmp uge i8 %36, %11
  %38 = sub nsw i64 %35, %28
  %39 = sub nsw i64 %28, %35
  %40 = select i1 %37, i64 %38, i64 %39
  %41 = and i64 %40, 255
  %42 = add nuw nsw i64 %41, %34
  %43 = lshr i64 %3, 16
  %44 = trunc i64 %43 to i8
  %45 = icmp uge i8 %44, %13
  %46 = sub nsw i64 %43, %27
  %47 = sub nsw i64 %27, %43
  %48 = select i1 %45, i64 %46, i64 %47
  %49 = and i64 %48, 255
  %50 = add nuw nsw i64 %49, %42
  %51 = lshr i64 %3, 24
  %52 = trunc i64 %51 to i8
  %53 = icmp uge i8 %52, %15
  %54 = sub nsw i64 %51, %26
  %55 = sub nsw i64 %26, %51
  %56 = select i1 %53, i64 %54, i64 %55
  %57 = and i64 %56, 255
  %58 = add nuw nsw i64 %57, %50
  %59 = lshr i64 %3, 32
  %60 = trunc i64 %59 to i8
  %61 = icmp uge i8 %60, %17
  %62 = sub nsw i64 %59, %25
  %63 = sub nsw i64 %25, %59
  %64 = select i1 %61, i64 %62, i64 %63
  %65 = and i64 %64, 255
  %66 = add nuw nsw i64 %65, %58
  %67 = lshr i64 %3, 40
  %68 = trunc i64 %67 to i8
  %69 = icmp uge i8 %68, %19
  %70 = sub nsw i64 %67, %24
  %71 = sub nsw i64 %24, %67
  %72 = select i1 %69, i64 %70, i64 %71
  %73 = and i64 %72, 255
  %74 = add nuw nsw i64 %73, %66
  %75 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %76 = load i8, i8* %75, align 2, !tbaa !868
  %77 = icmp uge i8 %76, %21
  %78 = sub i8 %76, %21
  %79 = sub i8 %21, %76
  %80 = select i1 %77, i8 %78, i8 %79
  %81 = zext i8 %80 to i64
  %82 = add nuw nsw i64 %81, %74
  %83 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %84 = load i8, i8* %83, align 1, !tbaa !868
  %85 = icmp uge i8 %84, %23
  %86 = sub i8 %84, %23
  %87 = sub i8 %23, %84
  %88 = select i1 %85, i8 %86, i8 %87
  %89 = zext i8 %88 to i64
  %90 = add i64 %89, %82
  %91 = and i64 %90, 65535
  store i64 %91, i64* %2, align 1, !tbaa !870
  call void @llvm.lifetime.end(i64 8, i8* nonnull %8) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #23
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %6, align 16
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) #23
  %16 = bitcast i8* %4 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  store <2 x i64> %17, <2 x i64>* %9, align 16
  %18 = extractelement <2 x i64> %14, i32 0
  %19 = trunc i64 %18 to i8
  %20 = extractelement <2 x i64> %17, i32 0
  %21 = trunc i64 %20 to i8
  %22 = icmp uge i8 %19, %21
  %23 = sub i64 %18, %20
  %24 = sub i64 %20, %18
  %25 = select i1 %22, i64 %23, i64 %24
  %26 = and i64 %25, 255
  %27 = lshr i64 %18, 8
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %20, 8
  %30 = trunc i64 %29 to i8
  %31 = icmp uge i8 %28, %30
  %32 = sub nsw i64 %27, %29
  %33 = sub nsw i64 %29, %27
  %34 = select i1 %31, i64 %32, i64 %33
  %35 = and i64 %34, 255
  %36 = add nuw nsw i64 %35, %26
  %37 = lshr i64 %18, 16
  %38 = trunc i64 %37 to i8
  %39 = lshr i64 %20, 16
  %40 = trunc i64 %39 to i8
  %41 = icmp uge i8 %38, %40
  %42 = sub nsw i64 %37, %39
  %43 = sub nsw i64 %39, %37
  %44 = select i1 %41, i64 %42, i64 %43
  %45 = and i64 %44, 255
  %46 = add nuw nsw i64 %45, %36
  %47 = lshr i64 %18, 24
  %48 = trunc i64 %47 to i8
  %49 = lshr i64 %20, 24
  %50 = trunc i64 %49 to i8
  %51 = icmp uge i8 %48, %50
  %52 = sub nsw i64 %47, %49
  %53 = sub nsw i64 %49, %47
  %54 = select i1 %51, i64 %52, i64 %53
  %55 = and i64 %54, 255
  %56 = add nuw nsw i64 %55, %46
  %57 = lshr i64 %18, 32
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %20, 32
  %60 = trunc i64 %59 to i8
  %61 = icmp uge i8 %58, %60
  %62 = sub nsw i64 %57, %59
  %63 = sub nsw i64 %59, %57
  %64 = select i1 %61, i64 %62, i64 %63
  %65 = and i64 %64, 255
  %66 = add nuw nsw i64 %65, %56
  %67 = lshr i64 %18, 40
  %68 = trunc i64 %67 to i8
  %69 = lshr i64 %20, 40
  %70 = trunc i64 %69 to i8
  %71 = icmp uge i8 %68, %70
  %72 = sub nsw i64 %67, %69
  %73 = sub nsw i64 %69, %67
  %74 = select i1 %71, i64 %72, i64 %73
  %75 = and i64 %74, 255
  %76 = add nuw nsw i64 %75, %66
  %77 = lshr i64 %18, 48
  %78 = trunc i64 %77 to i8
  %79 = lshr i64 %20, 48
  %80 = trunc i64 %79 to i8
  %81 = icmp uge i8 %78, %80
  %82 = sub nsw i64 %77, %79
  %83 = sub nsw i64 %79, %77
  %84 = select i1 %81, i64 %82, i64 %83
  %85 = and i64 %84, 255
  %86 = add nuw nsw i64 %85, %76
  %87 = lshr i64 %18, 56
  %88 = trunc i64 %87 to i8
  %89 = lshr i64 %20, 56
  %90 = trunc i64 %89 to i8
  %91 = icmp uge i8 %88, %90
  %92 = sub nsw i64 %87, %89
  %93 = sub nsw i64 %89, %87
  %94 = select i1 %91, i64 %92, i64 %93
  %95 = and i64 %94, 255
  %96 = add i64 %95, %86
  %97 = and i64 %96, 65535
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %99 = bitcast i64* %98 to i8*
  %100 = load i8, i8* %99, align 8, !tbaa !868
  %101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %102 = bitcast i64* %101 to i8*
  %103 = load i8, i8* %102, align 8, !tbaa !868
  %104 = icmp uge i8 %100, %103
  %105 = sub i8 %100, %103
  %106 = sub i8 %103, %100
  %107 = select i1 %104, i8 %105, i8 %106
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 9
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %112 = load i8, i8* %111, align 1, !tbaa !868
  %113 = icmp uge i8 %110, %112
  %114 = sub i8 %110, %112
  %115 = sub i8 %112, %110
  %116 = select i1 %113, i8 %114, i8 %115
  %117 = zext i8 %116 to i64
  %118 = add nuw nsw i64 %117, %108
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 10
  %120 = load i8, i8* %119, align 2, !tbaa !868
  %121 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %122 = load i8, i8* %121, align 2, !tbaa !868
  %123 = icmp uge i8 %120, %122
  %124 = sub i8 %120, %122
  %125 = sub i8 %122, %120
  %126 = select i1 %123, i8 %124, i8 %125
  %127 = zext i8 %126 to i64
  %128 = add nuw nsw i64 %127, %118
  %129 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 11
  %130 = load i8, i8* %129, align 1, !tbaa !868
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %132 = load i8, i8* %131, align 1, !tbaa !868
  %133 = icmp uge i8 %130, %132
  %134 = sub i8 %130, %132
  %135 = sub i8 %132, %130
  %136 = select i1 %133, i8 %134, i8 %135
  %137 = zext i8 %136 to i64
  %138 = add nuw nsw i64 %137, %128
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 12
  %140 = load i8, i8* %139, align 4, !tbaa !868
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %142 = load i8, i8* %141, align 4, !tbaa !868
  %143 = icmp uge i8 %140, %142
  %144 = sub i8 %140, %142
  %145 = sub i8 %142, %140
  %146 = select i1 %143, i8 %144, i8 %145
  %147 = zext i8 %146 to i64
  %148 = add nuw nsw i64 %147, %138
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 13
  %150 = load i8, i8* %149, align 1, !tbaa !868
  %151 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  %152 = load i8, i8* %151, align 1, !tbaa !868
  %153 = icmp uge i8 %150, %152
  %154 = sub i8 %150, %152
  %155 = sub i8 %152, %150
  %156 = select i1 %153, i8 %154, i8 %155
  %157 = zext i8 %156 to i64
  %158 = add nuw nsw i64 %157, %148
  %159 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 14
  %160 = load i8, i8* %159, align 2, !tbaa !868
  %161 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  %162 = load i8, i8* %161, align 2, !tbaa !868
  %163 = icmp uge i8 %160, %162
  %164 = sub i8 %160, %162
  %165 = sub i8 %162, %160
  %166 = select i1 %163, i8 %164, i8 %165
  %167 = zext i8 %166 to i64
  %168 = add nuw nsw i64 %167, %158
  %169 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 15
  %170 = load i8, i8* %169, align 1, !tbaa !868
  %171 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  %172 = load i8, i8* %171, align 1, !tbaa !868
  %173 = icmp uge i8 %170, %172
  %174 = sub i8 %170, %172
  %175 = sub i8 %172, %170
  %176 = select i1 %173, i8 %174, i8 %175
  %177 = zext i8 %176 to i64
  %178 = add i64 %177, %168
  %179 = and i64 %178, 65535
  %180 = bitcast i8* %2 to i64*
  store i64 %97, i64* %180, align 1, !tbaa !870
  %181 = getelementptr inbounds i8, i8* %2, i64 8
  %182 = bitcast i8* %181 to i64*
  store i64 %179, i64* %182, align 1, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSADBWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast <2 x i64>* %6 to %struct.uint8v16_t*
  %9 = alloca <2 x i64>, align 16
  %10 = bitcast <2 x i64>* %9 to { i64, i64 }*
  %11 = bitcast <2 x i64>* %9 to %struct.uint8v16_t*
  %12 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %12) #23
  %13 = bitcast i8* %3 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  store <2 x i64> %14, <2 x i64>* %6, align 16
  %15 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15) #23
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %17 = add i64 %4, 1
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 3
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 4
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 5
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 6
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 7
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 8
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 9
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 10
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 11
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 12
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 13
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 14
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 15
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = insertelement <2 x i8> undef, i8 %30, i32 0
  %48 = insertelement <2 x i8> %47, i8 %46, i32 1
  %49 = zext <2 x i8> %48 to <2 x i64>
  %50 = shl nuw <2 x i64> %49, <i64 56, i64 56>
  %51 = insertelement <2 x i8> undef, i8 %28, i32 0
  %52 = insertelement <2 x i8> %51, i8 %44, i32 1
  %53 = zext <2 x i8> %52 to <2 x i64>
  %54 = shl nuw nsw <2 x i64> %53, <i64 48, i64 48>
  %55 = insertelement <2 x i8> undef, i8 %26, i32 0
  %56 = insertelement <2 x i8> %55, i8 %42, i32 1
  %57 = zext <2 x i8> %56 to <2 x i64>
  %58 = shl nuw nsw <2 x i64> %57, <i64 40, i64 40>
  %59 = insertelement <2 x i8> undef, i8 %24, i32 0
  %60 = insertelement <2 x i8> %59, i8 %40, i32 1
  %61 = zext <2 x i8> %60 to <2 x i64>
  %62 = shl nuw nsw <2 x i64> %61, <i64 32, i64 32>
  %63 = insertelement <2 x i8> undef, i8 %22, i32 0
  %64 = insertelement <2 x i8> %63, i8 %38, i32 1
  %65 = zext <2 x i8> %64 to <2 x i64>
  %66 = shl nuw nsw <2 x i64> %65, <i64 24, i64 24>
  %67 = insertelement <2 x i8> undef, i8 %20, i32 0
  %68 = insertelement <2 x i8> %67, i8 %36, i32 1
  %69 = zext <2 x i8> %68 to <2 x i64>
  %70 = shl nuw nsw <2 x i64> %69, <i64 16, i64 16>
  %71 = insertelement <2 x i8> undef, i8 %18, i32 0
  %72 = insertelement <2 x i8> %71, i8 %34, i32 1
  %73 = zext <2 x i8> %72 to <2 x i64>
  %74 = shl nuw nsw <2 x i64> %73, <i64 8, i64 8>
  %75 = insertelement <2 x i8> undef, i8 %16, i32 0
  %76 = insertelement <2 x i8> %75, i8 %32, i32 1
  %77 = zext <2 x i8> %76 to <2 x i64>
  %78 = or <2 x i64> %74, %77
  %79 = or <2 x i64> %78, %70
  %80 = or <2 x i64> %79, %66
  %81 = or <2 x i64> %80, %62
  %82 = or <2 x i64> %81, %58
  %83 = or <2 x i64> %82, %54
  %84 = or <2 x i64> %83, %50
  store <2 x i64> %84, <2 x i64>* %9, align 16
  %85 = extractelement <2 x i64> %14, i32 0
  %86 = trunc i64 %85 to i8
  %87 = icmp uge i8 %86, %16
  %88 = sub i8 %86, %16
  %89 = sub i8 %16, %86
  %90 = select i1 %87, i8 %88, i8 %89
  %91 = zext i8 %90 to i64
  %92 = lshr i64 %85, 8
  %93 = trunc i64 %92 to i8
  %94 = icmp uge i8 %93, %18
  %95 = extractelement <2 x i64> %73, i32 0
  %96 = sub nsw i64 %92, %95
  %97 = sub nsw i64 %95, %92
  %98 = select i1 %94, i64 %96, i64 %97
  %99 = and i64 %98, 255
  %100 = add nuw nsw i64 %99, %91
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 2
  %102 = load i8, i8* %101, align 2, !tbaa !868
  %103 = icmp uge i8 %102, %20
  %104 = sub i8 %102, %20
  %105 = sub i8 %20, %102
  %106 = select i1 %103, i8 %104, i8 %105
  %107 = zext i8 %106 to i64
  %108 = add nuw nsw i64 %107, %100
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 3
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = icmp uge i8 %110, %22
  %112 = sub i8 %110, %22
  %113 = sub i8 %22, %110
  %114 = select i1 %111, i8 %112, i8 %113
  %115 = zext i8 %114 to i64
  %116 = add nuw nsw i64 %115, %108
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 4
  %118 = load i8, i8* %117, align 4, !tbaa !868
  %119 = extractelement <2 x i64> %81, i32 0
  %120 = lshr i64 %119, 32
  %121 = trunc i64 %120 to i8
  %122 = icmp uge i8 %118, %121
  %123 = sub i8 %118, %121
  %124 = sub i8 %121, %118
  %125 = select i1 %122, i8 %123, i8 %124
  %126 = zext i8 %125 to i64
  %127 = add nuw nsw i64 %126, %116
  %128 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 5
  %129 = load i8, i8* %128, align 1, !tbaa !868
  %130 = extractelement <2 x i64> %82, i32 0
  %131 = lshr i64 %130, 40
  %132 = trunc i64 %131 to i8
  %133 = icmp uge i8 %129, %132
  %134 = sub i8 %129, %132
  %135 = sub i8 %132, %129
  %136 = select i1 %133, i8 %134, i8 %135
  %137 = zext i8 %136 to i64
  %138 = add nuw nsw i64 %137, %127
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 6
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = extractelement <2 x i64> %83, i32 0
  %142 = lshr i64 %141, 48
  %143 = trunc i64 %142 to i8
  %144 = icmp uge i8 %140, %143
  %145 = sub i8 %140, %143
  %146 = sub i8 %143, %140
  %147 = select i1 %144, i8 %145, i8 %146
  %148 = zext i8 %147 to i64
  %149 = add nuw nsw i64 %148, %138
  %150 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 7
  %151 = load i8, i8* %150, align 1, !tbaa !868
  %152 = extractelement <2 x i64> %84, i32 0
  %153 = lshr i64 %152, 56
  %154 = trunc i64 %153 to i8
  %155 = icmp uge i8 %151, %154
  %156 = sub i8 %151, %154
  %157 = sub i8 %154, %151
  %158 = select i1 %155, i8 %156, i8 %157
  %159 = zext i8 %158 to i64
  %160 = add i64 %159, %149
  %161 = and i64 %160, 65535
  %162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %163 = bitcast i64* %162 to i8*
  %164 = load i8, i8* %163, align 8, !tbaa !868
  %165 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %166 = bitcast i64* %165 to i8*
  %167 = load i8, i8* %166, align 8, !tbaa !868
  %168 = icmp uge i8 %164, %167
  %169 = sub i8 %164, %167
  %170 = sub i8 %167, %164
  %171 = select i1 %168, i8 %169, i8 %170
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 9
  %174 = load i8, i8* %173, align 1, !tbaa !868
  %175 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 9
  %176 = load i8, i8* %175, align 1, !tbaa !868
  %177 = icmp uge i8 %174, %176
  %178 = sub i8 %174, %176
  %179 = sub i8 %176, %174
  %180 = select i1 %177, i8 %178, i8 %179
  %181 = zext i8 %180 to i64
  %182 = add nuw nsw i64 %181, %172
  %183 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 10
  %184 = load i8, i8* %183, align 2, !tbaa !868
  %185 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 10
  %186 = load i8, i8* %185, align 2, !tbaa !868
  %187 = icmp uge i8 %184, %186
  %188 = sub i8 %184, %186
  %189 = sub i8 %186, %184
  %190 = select i1 %187, i8 %188, i8 %189
  %191 = zext i8 %190 to i64
  %192 = add nuw nsw i64 %191, %182
  %193 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 11
  %194 = load i8, i8* %193, align 1, !tbaa !868
  %195 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 11
  %196 = load i8, i8* %195, align 1, !tbaa !868
  %197 = icmp uge i8 %194, %196
  %198 = sub i8 %194, %196
  %199 = sub i8 %196, %194
  %200 = select i1 %197, i8 %198, i8 %199
  %201 = zext i8 %200 to i64
  %202 = add nuw nsw i64 %201, %192
  %203 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 12
  %204 = load i8, i8* %203, align 4, !tbaa !868
  %205 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 12
  %206 = load i8, i8* %205, align 4, !tbaa !868
  %207 = icmp uge i8 %204, %206
  %208 = sub i8 %204, %206
  %209 = sub i8 %206, %204
  %210 = select i1 %207, i8 %208, i8 %209
  %211 = zext i8 %210 to i64
  %212 = add nuw nsw i64 %211, %202
  %213 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 13
  %214 = load i8, i8* %213, align 1, !tbaa !868
  %215 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 13
  %216 = load i8, i8* %215, align 1, !tbaa !868
  %217 = icmp uge i8 %214, %216
  %218 = sub i8 %214, %216
  %219 = sub i8 %216, %214
  %220 = select i1 %217, i8 %218, i8 %219
  %221 = zext i8 %220 to i64
  %222 = add nuw nsw i64 %221, %212
  %223 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 14
  %224 = load i8, i8* %223, align 2, !tbaa !868
  %225 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 14
  %226 = load i8, i8* %225, align 2, !tbaa !868
  %227 = icmp uge i8 %224, %226
  %228 = sub i8 %224, %226
  %229 = sub i8 %226, %224
  %230 = select i1 %227, i8 %228, i8 %229
  %231 = zext i8 %230 to i64
  %232 = add nuw nsw i64 %231, %222
  %233 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 15
  %234 = load i8, i8* %233, align 1, !tbaa !868
  %235 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %11, i64 0, i32 0, i64 15
  %236 = load i8, i8* %235, align 1, !tbaa !868
  %237 = icmp uge i8 %234, %236
  %238 = sub i8 %234, %236
  %239 = sub i8 %236, %234
  %240 = select i1 %237, i8 %238, i8 %239
  %241 = zext i8 %240 to i64
  %242 = add i64 %241, %232
  %243 = and i64 %242, 65535
  %244 = bitcast i8* %2 to i64*
  store i64 %161, i64* %244, align 1, !tbaa !870
  %245 = getelementptr inbounds i8, i8* %2, i64 8
  %246 = bitcast i8* %245 to i64*
  store i64 %243, i64* %246, align 1, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %12) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = and i64 %3, 4294967295
  %7 = and i64 %4, 4294967295
  %8 = mul nuw i64 %7, %6
  store i64 %8, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = and i64 %3, 4294967295
  %8 = zext i32 %6 to i64
  %9 = mul nuw i64 %8, %7
  store i64 %9, i64* %2, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %4 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = and i64 %7, 4294967295
  %11 = and i64 %9, 4294967295
  %12 = mul nuw i64 %11, %10
  %13 = bitcast i8* %2 to i64*
  store i64 %12, i64* %13, align 1, !tbaa !870
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULUDQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %9 = and i64 %7, 4294967295
  %10 = zext i32 %8 to i64
  %11 = mul nuw i64 %10, %9
  %12 = bitcast i8* %2 to i64*
  store i64 %11, i64* %12, align 1, !tbaa !870
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = mul i16 %10, %9
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %12 = bitcast i64* %6 to i16*
  store i16 %11, i16* %12, align 8, !tbaa !869
  %13 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %14 = lshr i64 %3, 16
  %15 = trunc i64 %14 to i16
  %16 = lshr i64 %4, 16
  %17 = trunc i64 %16 to i16
  %18 = mul i16 %17, %15
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %13, i64* %6, align 8
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %18, i16* %19, align 2, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %21 = lshr i64 %3, 32
  %22 = trunc i64 %21 to i16
  %23 = lshr i64 %4, 32
  %24 = trunc i64 %23 to i16
  %25 = mul i16 %24, %22
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %20, i64* %6, align 8
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %25, i16* %26, align 4, !tbaa !869
  %27 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %28 = lshr i64 %3, 48
  %29 = trunc i64 %28 to i16
  %30 = lshr i64 %4, 48
  %31 = trunc i64 %30 to i16
  %32 = mul i16 %31, %29
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %27, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1, !tbaa !869
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1, !tbaa !869
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1, !tbaa !869
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = trunc i64 %3 to i16
  %17 = mul i16 %7, %16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %18 = bitcast i64* %6 to i16*
  store i16 %17, i16* %18, align 8, !tbaa !869
  %19 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %20 = lshr i64 %3, 16
  %21 = trunc i64 %20 to i16
  %22 = mul i16 %9, %21
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %19, i64* %6, align 8
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %22, i16* %23, align 2, !tbaa !869
  %24 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %25 = lshr i64 %3, 32
  %26 = trunc i64 %25 to i16
  %27 = mul i16 %11, %26
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %24, i64* %6, align 8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %27, i16* %28, align 4, !tbaa !869
  %29 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %30 = lshr i64 %3, 48
  %31 = trunc i64 %30 to i16
  %32 = mul i16 %13, %31
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %29, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %35 = lshr i64 %34, 16
  %36 = lshr i64 %34, 32
  %37 = lshr i64 %34, 48
  %38 = trunc i64 %34 to i16
  %39 = trunc i64 %35 to i16
  %40 = trunc i64 %36 to i16
  %41 = trunc i64 %37 to i16
  %42 = bitcast i64* %2 to [4 x i16]*
  %43 = bitcast i64* %2 to i16*
  store i16 %38, i16* %43, align 1, !tbaa !869
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 1
  store i16 %39, i16* %44, align 1, !tbaa !869
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 2
  store i16 %40, i16* %45, align 1, !tbaa !869
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %42, i64 0, i64 3
  store i16 %41, i16* %46, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = mul i16 %27, %25
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i16*
  store i16 %28, i16* %29, align 16, !tbaa !869
  %30 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %31 = lshr i64 %24, 16
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %26, 16
  %34 = trunc i64 %33 to i16
  %35 = mul i16 %34, %32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %30, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %36 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %35, i16* %36, align 2, !tbaa !869
  %37 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %38 = lshr i64 %24, 32
  %39 = trunc i64 %38 to i16
  %40 = lshr i64 %26, 32
  %41 = trunc i64 %40 to i16
  %42 = mul i16 %41, %39
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %37, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %42, i16* %43, align 4, !tbaa !869
  %44 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %45 = lshr i64 %24, 48
  %46 = trunc i64 %45 to i16
  %47 = lshr i64 %26, 48
  %48 = trunc i64 %47 to i16
  %49 = mul i16 %48, %46
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %44, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %49, i16* %50, align 2, !tbaa !869
  %51 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %53 = bitcast i64* %52 to i16*
  %54 = load i16, i16* %53, align 8, !tbaa !869
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %56 = bitcast i64* %55 to i16*
  %57 = load i16, i16* %56, align 8, !tbaa !869
  %58 = mul i16 %57, %54
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  store i16 %58, i16* %60, align 8, !tbaa !869
  %61 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %62 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %63 = load i16, i16* %62, align 2, !tbaa !869
  %64 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %65 = load i16, i16* %64, align 2, !tbaa !869
  %66 = mul i16 %65, %63
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 %61, i64* %22, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %66, i16* %67, align 2, !tbaa !869
  %68 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %70 = load i16, i16* %69, align 4, !tbaa !869
  %71 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %72 = load i16, i16* %71, align 4, !tbaa !869
  %73 = mul i16 %72, %70
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 %68, i64* %22, align 8
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %73, i16* %74, align 4, !tbaa !869
  %75 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %77 = load i16, i16* %76, align 2, !tbaa !869
  %78 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %79 = load i16, i16* %78, align 2, !tbaa !869
  %80 = mul i16 %79, %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %51, i64* %21, align 16
  store i64 %75, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %80, i16* %81, align 2, !tbaa !869
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = lshr i64 %51, 16
  %84 = lshr i64 %51, 32
  %85 = lshr i64 %51, 48
  %86 = trunc i64 %51 to i16
  %87 = trunc i64 %83 to i16
  %88 = trunc i64 %84 to i16
  %89 = trunc i64 %85 to i16
  %90 = bitcast i8* %2 to i16*
  store i16 %86, i16* %90, align 1, !tbaa !869
  %91 = getelementptr inbounds i8, i8* %2, i64 2
  %92 = bitcast i8* %91 to i16*
  store i16 %87, i16* %92, align 1, !tbaa !869
  %93 = getelementptr inbounds i8, i8* %2, i64 4
  %94 = bitcast i8* %93 to i16*
  store i16 %88, i16* %94, align 1, !tbaa !869
  %95 = getelementptr inbounds i8, i8* %2, i64 6
  %96 = bitcast i8* %95 to i16*
  store i16 %89, i16* %96, align 1, !tbaa !869
  %97 = trunc i64 %82 to i16
  %98 = getelementptr inbounds i8, i8* %2, i64 8
  %99 = bitcast i8* %98 to i16*
  store i16 %97, i16* %99, align 1, !tbaa !869
  %100 = lshr i64 %82, 16
  %101 = trunc i64 %100 to i16
  %102 = getelementptr inbounds i8, i8* %2, i64 10
  %103 = bitcast i8* %102 to i16*
  store i16 %101, i16* %103, align 1, !tbaa !869
  %104 = lshr i64 %82, 32
  %105 = trunc i64 %104 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 12
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1, !tbaa !869
  %108 = lshr i64 %82, 48
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 14
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULLWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = mul i16 %18, %56
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %58 = bitcast <2 x i64>* %6 to i16*
  store i16 %57, i16* %58, align 16, !tbaa !869
  %59 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %60 = lshr i64 %55, 16
  %61 = trunc i64 %60 to i16
  %62 = mul i16 %20, %61
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %59, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %62, i16* %63, align 2, !tbaa !869
  %64 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %65 = lshr i64 %55, 32
  %66 = trunc i64 %65 to i16
  %67 = mul i16 %22, %66
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %64, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %67, i16* %68, align 4, !tbaa !869
  %69 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %70 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %71 = load i16, i16* %70, align 2, !tbaa !869
  %72 = mul i16 %24, %71
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %69, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %76 = bitcast i64* %75 to i16*
  %77 = load i16, i16* %76, align 8, !tbaa !869
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %79 = bitcast i64* %78 to i16*
  %80 = load i16, i16* %79, align 8, !tbaa !869
  %81 = mul i16 %80, %77
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %83 = bitcast i64* %82 to i16*
  store i16 %81, i16* %83, align 8, !tbaa !869
  %84 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %88 = load i16, i16* %87, align 2, !tbaa !869
  %89 = mul i16 %88, %86
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 %84, i64* %53, align 8
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %89, i16* %90, align 2, !tbaa !869
  %91 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %93 = load i16, i16* %92, align 4, !tbaa !869
  %94 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %95 = load i16, i16* %94, align 4, !tbaa !869
  %96 = mul i16 %95, %93
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 %91, i64* %53, align 8
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %96, i16* %97, align 4, !tbaa !869
  %98 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %99 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %100 = load i16, i16* %99, align 2, !tbaa !869
  %101 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %102 = load i16, i16* %101, align 2, !tbaa !869
  %103 = mul i16 %102, %100
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %74, i64* %52, align 16
  store i64 %98, i64* %53, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %103, i16* %104, align 2, !tbaa !869
  %105 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %106 = lshr i64 %74, 16
  %107 = lshr i64 %74, 32
  %108 = lshr i64 %74, 48
  %109 = trunc i64 %74 to i16
  %110 = trunc i64 %106 to i16
  %111 = trunc i64 %107 to i16
  %112 = trunc i64 %108 to i16
  %113 = bitcast i8* %2 to i16*
  store i16 %109, i16* %113, align 1, !tbaa !869
  %114 = getelementptr inbounds i8, i8* %2, i64 2
  %115 = bitcast i8* %114 to i16*
  store i16 %110, i16* %115, align 1, !tbaa !869
  %116 = getelementptr inbounds i8, i8* %2, i64 4
  %117 = bitcast i8* %116 to i16*
  store i16 %111, i16* %117, align 1, !tbaa !869
  %118 = getelementptr inbounds i8, i8* %2, i64 6
  %119 = bitcast i8* %118 to i16*
  store i16 %112, i16* %119, align 1, !tbaa !869
  %120 = trunc i64 %105 to i16
  %121 = getelementptr inbounds i8, i8* %2, i64 8
  %122 = bitcast i8* %121 to i16*
  store i16 %120, i16* %122, align 1, !tbaa !869
  %123 = lshr i64 %105, 16
  %124 = trunc i64 %123 to i16
  %125 = getelementptr inbounds i8, i8* %2, i64 10
  %126 = bitcast i8* %125 to i16*
  store i16 %124, i16* %126, align 1, !tbaa !869
  %127 = lshr i64 %105, 32
  %128 = trunc i64 %127 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 12
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1, !tbaa !869
  %131 = lshr i64 %105, 48
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 14
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = shl i64 %3, 48
  %10 = ashr exact i64 %9, 48
  %11 = shl i64 %4, 48
  %12 = ashr exact i64 %11, 48
  %13 = mul nsw i64 %12, %10
  %14 = lshr i64 %13, 16
  %15 = trunc i64 %14 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = shl i64 %3, 32
  %19 = ashr i64 %18, 48
  %20 = shl i64 %4, 32
  %21 = ashr i64 %20, 48
  %22 = mul nsw i64 %21, %19
  %23 = lshr i64 %22, 16
  %24 = trunc i64 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %24, i16* %25, align 2, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %27 = shl i64 %3, 16
  %28 = ashr i64 %27, 48
  %29 = shl i64 %4, 16
  %30 = ashr i64 %29, 48
  %31 = mul nsw i64 %30, %28
  %32 = lshr i64 %31, 16
  %33 = trunc i64 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %26, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %33, i16* %34, align 4, !tbaa !869
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %36 = ashr i64 %3, 48
  %37 = ashr i64 %4, 48
  %38 = mul nsw i64 %37, %36
  %39 = lshr i64 %38, 16
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %35, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %40, i16* %41, align 2, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %43 = lshr i64 %42, 16
  %44 = lshr i64 %42, 32
  %45 = lshr i64 %42, 48
  %46 = trunc i64 %42 to i16
  %47 = trunc i64 %43 to i16
  %48 = trunc i64 %44 to i16
  %49 = trunc i64 %45 to i16
  %50 = bitcast i64* %2 to [4 x i16]*
  %51 = bitcast i64* %2 to i16*
  store i16 %46, i16* %51, align 1, !tbaa !869
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 1
  store i16 %47, i16* %52, align 1, !tbaa !869
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 2
  store i16 %48, i16* %53, align 1, !tbaa !869
  %54 = getelementptr inbounds [4 x i16], [4 x i16]* %50, i64 0, i64 3
  store i16 %49, i16* %54, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = bitcast i64* %6 to i8*
  %18 = bitcast i64* %6 to [4 x i16]*
  %19 = shl i64 %3, 48
  %20 = ashr exact i64 %19, 48
  %21 = sext i16 %10 to i64
  %22 = mul nsw i64 %21, %20
  %23 = lshr i64 %22, 16
  %24 = trunc i64 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i16*
  store i16 %24, i16* %25, align 8, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %27 = shl i64 %3, 32
  %28 = ashr i64 %27, 48
  %29 = sext i16 %12 to i64
  %30 = mul nsw i64 %29, %28
  %31 = lshr i64 %30, 16
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %26, i64* %6, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %32, i16* %33, align 2, !tbaa !869
  %34 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %35 = shl i64 %3, 16
  %36 = ashr i64 %35, 48
  %37 = sext i16 %14 to i64
  %38 = mul nsw i64 %37, %36
  %39 = lshr i64 %38, 16
  %40 = trunc i64 %39 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %34, i64* %6, align 8
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %40, i16* %41, align 4, !tbaa !869
  %42 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %43 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %44 = load i16, i16* %43, align 2, !tbaa !869
  %45 = sext i16 %44 to i64
  %46 = sext i16 %16 to i64
  %47 = mul nsw i64 %46, %45
  %48 = lshr i64 %47, 16
  %49 = trunc i64 %48 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %42, i64* %6, align 8
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %49, i16* %50, align 2, !tbaa !869
  %51 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %52 = lshr i64 %51, 16
  %53 = lshr i64 %51, 32
  %54 = lshr i64 %51, 48
  %55 = trunc i64 %51 to i16
  %56 = trunc i64 %52 to i16
  %57 = trunc i64 %53 to i16
  %58 = trunc i64 %54 to i16
  %59 = bitcast i64* %2 to [4 x i16]*
  %60 = bitcast i64* %2 to i16*
  store i16 %55, i16* %60, align 1, !tbaa !869
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 1
  store i16 %56, i16* %61, align 1, !tbaa !869
  %62 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 2
  store i16 %57, i16* %62, align 1, !tbaa !869
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %59, i64 0, i64 3
  store i16 %58, i16* %63, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = shl i64 %24, 48
  %26 = ashr exact i64 %25, 48
  %27 = extractelement <2 x i64> %19, i32 0
  %28 = shl i64 %27, 48
  %29 = ashr exact i64 %28, 48
  %30 = mul nsw i64 %29, %26
  %31 = lshr i64 %30, 16
  %32 = trunc i64 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16, !tbaa !869
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = shl i64 %24, 32
  %36 = ashr i64 %35, 48
  %37 = shl i64 %27, 32
  %38 = ashr i64 %37, 48
  %39 = mul nsw i64 %38, %36
  %40 = lshr i64 %39, 16
  %41 = trunc i64 %40 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %41, i16* %42, align 2, !tbaa !869
  %43 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %44 = shl i64 %24, 16
  %45 = ashr i64 %44, 48
  %46 = shl i64 %27, 16
  %47 = ashr i64 %46, 48
  %48 = mul nsw i64 %47, %45
  %49 = lshr i64 %48, 16
  %50 = trunc i64 %49 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %43, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %50, i16* %51, align 4, !tbaa !869
  %52 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %53 = ashr i64 %24, 48
  %54 = ashr i64 %27, 48
  %55 = mul nsw i64 %54, %53
  %56 = lshr i64 %55, 16
  %57 = trunc i64 %56 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %52, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %57, i16* %58, align 2, !tbaa !869
  %59 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8, !tbaa !869
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %64 = bitcast i64* %63 to i16*
  %65 = load i16, i16* %64, align 8, !tbaa !869
  %66 = sext i16 %62 to i64
  %67 = sext i16 %65 to i64
  %68 = mul nsw i64 %67, %66
  %69 = lshr i64 %68, 16
  %70 = trunc i64 %69 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %72 = bitcast i64* %71 to i16*
  store i16 %70, i16* %72, align 8, !tbaa !869
  %73 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %74 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %75 = load i16, i16* %74, align 2, !tbaa !869
  %76 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %77 = load i16, i16* %76, align 2, !tbaa !869
  %78 = sext i16 %75 to i64
  %79 = sext i16 %77 to i64
  %80 = mul nsw i64 %79, %78
  %81 = lshr i64 %80, 16
  %82 = trunc i64 %81 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %73, i64* %22, align 8
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %82, i16* %83, align 2, !tbaa !869
  %84 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %86 = load i16, i16* %85, align 4, !tbaa !869
  %87 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %88 = load i16, i16* %87, align 4, !tbaa !869
  %89 = sext i16 %86 to i64
  %90 = sext i16 %88 to i64
  %91 = mul nsw i64 %90, %89
  %92 = lshr i64 %91, 16
  %93 = trunc i64 %92 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %84, i64* %22, align 8
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %93, i16* %94, align 4, !tbaa !869
  %95 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %96 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %97 = load i16, i16* %96, align 2, !tbaa !869
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %99 = load i16, i16* %98, align 2, !tbaa !869
  %100 = sext i16 %97 to i64
  %101 = sext i16 %99 to i64
  %102 = mul nsw i64 %101, %100
  %103 = lshr i64 %102, 16
  %104 = trunc i64 %103 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %59, i64* %21, align 16
  store i64 %95, i64* %22, align 8
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %104, i16* %105, align 2, !tbaa !869
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = lshr i64 %59, 16
  %108 = lshr i64 %59, 32
  %109 = lshr i64 %59, 48
  %110 = trunc i64 %59 to i16
  %111 = trunc i64 %107 to i16
  %112 = trunc i64 %108 to i16
  %113 = trunc i64 %109 to i16
  %114 = bitcast i8* %2 to i16*
  store i16 %110, i16* %114, align 1, !tbaa !869
  %115 = getelementptr inbounds i8, i8* %2, i64 2
  %116 = bitcast i8* %115 to i16*
  store i16 %111, i16* %116, align 1, !tbaa !869
  %117 = getelementptr inbounds i8, i8* %2, i64 4
  %118 = bitcast i8* %117 to i16*
  store i16 %112, i16* %118, align 1, !tbaa !869
  %119 = getelementptr inbounds i8, i8* %2, i64 6
  %120 = bitcast i8* %119 to i16*
  store i16 %113, i16* %120, align 1, !tbaa !869
  %121 = trunc i64 %106 to i16
  %122 = getelementptr inbounds i8, i8* %2, i64 8
  %123 = bitcast i8* %122 to i16*
  store i16 %121, i16* %123, align 1, !tbaa !869
  %124 = lshr i64 %106, 16
  %125 = trunc i64 %124 to i16
  %126 = getelementptr inbounds i8, i8* %2, i64 10
  %127 = bitcast i8* %126 to i16*
  store i16 %125, i16* %127, align 1, !tbaa !869
  %128 = lshr i64 %106, 32
  %129 = trunc i64 %128 to i16
  %130 = getelementptr inbounds i8, i8* %2, i64 12
  %131 = bitcast i8* %130 to i16*
  store i16 %129, i16* %131, align 1, !tbaa !869
  %132 = lshr i64 %106, 48
  %133 = trunc i64 %132 to i16
  %134 = getelementptr inbounds i8, i8* %2, i64 14
  %135 = bitcast i8* %134 to i16*
  store i16 %133, i16* %135, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PMULHWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = shl i64 %55, 48
  %57 = ashr exact i64 %56, 48
  %58 = sext i16 %18 to i64
  %59 = mul nsw i64 %58, %57
  %60 = lshr i64 %59, 16
  %61 = trunc i64 %60 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %62 = bitcast <2 x i64>* %6 to i16*
  store i16 %61, i16* %62, align 16, !tbaa !869
  %63 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %64 = shl i64 %55, 32
  %65 = ashr i64 %64, 48
  %66 = sext i16 %20 to i64
  %67 = mul nsw i64 %66, %65
  %68 = lshr i64 %67, 16
  %69 = trunc i64 %68 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %63, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %69, i16* %70, align 2, !tbaa !869
  %71 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %72 = shl i64 %55, 16
  %73 = ashr i64 %72, 48
  %74 = sext i16 %22 to i64
  %75 = mul nsw i64 %74, %73
  %76 = lshr i64 %75, 16
  %77 = trunc i64 %76 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %71, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %77, i16* %78, align 4, !tbaa !869
  %79 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %80 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %81 = load i16, i16* %80, align 2, !tbaa !869
  %82 = sext i16 %81 to i64
  %83 = sext i16 %24 to i64
  %84 = mul nsw i64 %83, %82
  %85 = lshr i64 %84, 16
  %86 = trunc i64 %85 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %79, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %86, i16* %87, align 2, !tbaa !869
  %88 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %90 = bitcast i64* %89 to i16*
  %91 = load i16, i16* %90, align 8, !tbaa !869
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %93 = bitcast i64* %92 to i16*
  %94 = load i16, i16* %93, align 8, !tbaa !869
  %95 = sext i16 %91 to i64
  %96 = sext i16 %94 to i64
  %97 = mul nsw i64 %96, %95
  %98 = lshr i64 %97, 16
  %99 = trunc i64 %98 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %88, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %101 = bitcast i64* %100 to i16*
  store i16 %99, i16* %101, align 8, !tbaa !869
  %102 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %103 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %104 = load i16, i16* %103, align 2, !tbaa !869
  %105 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %106 = load i16, i16* %105, align 2, !tbaa !869
  %107 = sext i16 %104 to i64
  %108 = sext i16 %106 to i64
  %109 = mul nsw i64 %108, %107
  %110 = lshr i64 %109, 16
  %111 = trunc i64 %110 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %88, i64* %52, align 16
  store i64 %102, i64* %53, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %111, i16* %112, align 2, !tbaa !869
  %113 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %114 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %115 = load i16, i16* %114, align 4, !tbaa !869
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %117 = load i16, i16* %116, align 4, !tbaa !869
  %118 = sext i16 %115 to i64
  %119 = sext i16 %117 to i64
  %120 = mul nsw i64 %119, %118
  %121 = lshr i64 %120, 16
  %122 = trunc i64 %121 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %88, i64* %52, align 16
  store i64 %113, i64* %53, align 8
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %122, i16* %123, align 4, !tbaa !869
  %124 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %125 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %126 = load i16, i16* %125, align 2, !tbaa !869
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %128 = load i16, i16* %127, align 2, !tbaa !869
  %129 = sext i16 %126 to i64
  %130 = sext i16 %128 to i64
  %131 = mul nsw i64 %130, %129
  %132 = lshr i64 %131, 16
  %133 = trunc i64 %132 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %88, i64* %52, align 16
  store i64 %124, i64* %53, align 8
  %134 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %133, i16* %134, align 2, !tbaa !869
  %135 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %136 = lshr i64 %88, 16
  %137 = lshr i64 %88, 32
  %138 = lshr i64 %88, 48
  %139 = trunc i64 %88 to i16
  %140 = trunc i64 %136 to i16
  %141 = trunc i64 %137 to i16
  %142 = trunc i64 %138 to i16
  %143 = bitcast i8* %2 to i16*
  store i16 %139, i16* %143, align 1, !tbaa !869
  %144 = getelementptr inbounds i8, i8* %2, i64 2
  %145 = bitcast i8* %144 to i16*
  store i16 %140, i16* %145, align 1, !tbaa !869
  %146 = getelementptr inbounds i8, i8* %2, i64 4
  %147 = bitcast i8* %146 to i16*
  store i16 %141, i16* %147, align 1, !tbaa !869
  %148 = getelementptr inbounds i8, i8* %2, i64 6
  %149 = bitcast i8* %148 to i16*
  store i16 %142, i16* %149, align 1, !tbaa !869
  %150 = trunc i64 %135 to i16
  %151 = getelementptr inbounds i8, i8* %2, i64 8
  %152 = bitcast i8* %151 to i16*
  store i16 %150, i16* %152, align 1, !tbaa !869
  %153 = lshr i64 %135, 16
  %154 = trunc i64 %153 to i16
  %155 = getelementptr inbounds i8, i8* %2, i64 10
  %156 = bitcast i8* %155 to i16*
  store i16 %154, i16* %156, align 1, !tbaa !869
  %157 = lshr i64 %135, 32
  %158 = trunc i64 %157 to i16
  %159 = getelementptr inbounds i8, i8* %2, i64 12
  %160 = bitcast i8* %159 to i16*
  store i16 %158, i16* %160, align 1, !tbaa !869
  %161 = lshr i64 %135, 48
  %162 = trunc i64 %161 to i16
  %163 = getelementptr inbounds i8, i8* %2, i64 14
  %164 = bitcast i8* %163 to i16*
  store i16 %162, i16* %164, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = and i32 %9, 65535
  %12 = and i32 %10, 65535
  %13 = mul nuw i32 %12, %11
  %14 = lshr i32 %13, 16
  %15 = trunc i32 %14 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %16 = bitcast i64* %6 to i16*
  store i16 %15, i16* %16, align 8, !tbaa !869
  %17 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %18 = lshr i64 %3, 16
  %19 = trunc i64 %18 to i32
  %20 = lshr i64 %4, 16
  %21 = trunc i64 %20 to i32
  %22 = and i32 %19, 65535
  %23 = and i32 %21, 65535
  %24 = mul nuw i32 %23, %22
  %25 = lshr i32 %24, 16
  %26 = trunc i32 %25 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %17, i64* %6, align 8
  %27 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %26, i16* %27, align 2, !tbaa !869
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %29 = lshr i64 %3, 32
  %30 = trunc i64 %29 to i32
  %31 = lshr i64 %4, 32
  %32 = trunc i64 %31 to i32
  %33 = and i32 %30, 65535
  %34 = and i32 %32, 65535
  %35 = mul nuw i32 %34, %33
  %36 = lshr i32 %35, 16
  %37 = trunc i32 %36 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %28, i64* %6, align 8
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %37, i16* %38, align 4, !tbaa !869
  %39 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %40 = lshr i64 %3, 48
  %41 = trunc i64 %40 to i32
  %42 = lshr i64 %4, 48
  %43 = trunc i64 %42 to i32
  %44 = mul nuw i32 %43, %41
  %45 = lshr i32 %44, 16
  %46 = trunc i32 %45 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %39, i64* %6, align 8
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %46, i16* %47, align 2, !tbaa !869
  %48 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %49 = lshr i64 %48, 16
  %50 = lshr i64 %48, 32
  %51 = lshr i64 %48, 48
  %52 = trunc i64 %48 to i16
  %53 = trunc i64 %49 to i16
  %54 = trunc i64 %50 to i16
  %55 = trunc i64 %51 to i16
  %56 = bitcast i64* %2 to [4 x i16]*
  %57 = bitcast i64* %2 to i16*
  store i16 %52, i16* %57, align 1, !tbaa !869
  %58 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 1
  store i16 %53, i16* %58, align 1, !tbaa !869
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 2
  store i16 %54, i16* %59, align 1, !tbaa !869
  %60 = getelementptr inbounds [4 x i16], [4 x i16]* %56, i64 0, i64 3
  store i16 %55, i16* %60, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.int16v4_t*
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %9) #23
  store i64 %3, i64* %7, align 8
  %10 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %11 = add i64 %4, 2
  %12 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %4, 4
  %14 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %4, 6
  %16 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %15) #22
  %17 = bitcast i64* %6 to i8*
  %18 = bitcast i64* %6 to [4 x i16]*
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 65535
  %21 = zext i16 %10 to i32
  %22 = mul nuw i32 %21, %20
  %23 = lshr i32 %22, 16
  %24 = trunc i32 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %6 to i16*
  store i16 %24, i16* %25, align 8, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %27 = lshr i64 %3, 16
  %28 = trunc i64 %27 to i32
  %29 = zext i16 %12 to i32
  %30 = and i32 %28, 65535
  %31 = mul nuw i32 %29, %30
  %32 = lshr i32 %31, 16
  %33 = trunc i32 %32 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %26, i64* %6, align 8
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 1
  store i16 %33, i16* %34, align 2, !tbaa !869
  %35 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %36 = lshr i64 %3, 32
  %37 = trunc i64 %36 to i32
  %38 = zext i16 %14 to i32
  %39 = and i32 %37, 65535
  %40 = mul nuw i32 %38, %39
  %41 = lshr i32 %40, 16
  %42 = trunc i32 %41 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %35, i64* %6, align 8
  %43 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 2
  store i16 %42, i16* %43, align 4, !tbaa !869
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %45 = getelementptr inbounds %struct.int16v4_t, %struct.int16v4_t* %8, i64 0, i32 0, i64 3
  %46 = load i16, i16* %45, align 2, !tbaa !869
  %47 = zext i16 %46 to i32
  %48 = zext i16 %16 to i32
  %49 = mul nuw i32 %48, %47
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %17)
  store i64 %44, i64* %6, align 8
  %52 = getelementptr inbounds [4 x i16], [4 x i16]* %18, i64 0, i64 3
  store i16 %51, i16* %52, align 2, !tbaa !869
  %53 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17)
  %54 = lshr i64 %53, 16
  %55 = lshr i64 %53, 32
  %56 = lshr i64 %53, 48
  %57 = trunc i64 %53 to i16
  %58 = trunc i64 %54 to i16
  %59 = trunc i64 %55 to i16
  %60 = trunc i64 %56 to i16
  %61 = bitcast i64* %2 to [4 x i16]*
  %62 = bitcast i64* %2 to i16*
  store i16 %57, i16* %62, align 1, !tbaa !869
  %63 = getelementptr inbounds [4 x i16], [4 x i16]* %61, i64 0, i64 1
  store i16 %58, i16* %63, align 1, !tbaa !869
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %61, i64 0, i64 2
  store i16 %59, i16* %64, align 1, !tbaa !869
  %65 = getelementptr inbounds [4 x i16], [4 x i16]* %61, i64 0, i64 3
  store i16 %60, i16* %65, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 8, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i32
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i32
  %28 = and i32 %25, 65535
  %29 = and i32 %27, 65535
  %30 = mul nuw i32 %29, %28
  %31 = lshr i32 %30, 16
  %32 = trunc i32 %31 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %33 = bitcast <2 x i64>* %6 to i16*
  store i16 %32, i16* %33, align 16, !tbaa !869
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = lshr i64 %24, 16
  %36 = trunc i64 %35 to i32
  %37 = lshr i64 %26, 16
  %38 = trunc i64 %37 to i32
  %39 = and i32 %36, 65535
  %40 = and i32 %38, 65535
  %41 = mul nuw i32 %40, %39
  %42 = lshr i32 %41, 16
  %43 = trunc i32 %42 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %43, i16* %44, align 2, !tbaa !869
  %45 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %46 = lshr i64 %24, 32
  %47 = trunc i64 %46 to i32
  %48 = lshr i64 %26, 32
  %49 = trunc i64 %48 to i32
  %50 = and i32 %47, 65535
  %51 = and i32 %49, 65535
  %52 = mul nuw i32 %51, %50
  %53 = lshr i32 %52, 16
  %54 = trunc i32 %53 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %45, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %54, i16* %55, align 4, !tbaa !869
  %56 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %57 = lshr i64 %24, 48
  %58 = trunc i64 %57 to i32
  %59 = lshr i64 %26, 48
  %60 = trunc i64 %59 to i32
  %61 = mul nuw i32 %60, %58
  %62 = lshr i32 %61, 16
  %63 = trunc i32 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %56, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %63, i16* %64, align 2, !tbaa !869
  %65 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %67 = bitcast i64* %66 to i16*
  %68 = load i16, i16* %67, align 8, !tbaa !869
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %70 = bitcast i64* %69 to i16*
  %71 = load i16, i16* %70, align 8, !tbaa !869
  %72 = zext i16 %68 to i32
  %73 = zext i16 %71 to i32
  %74 = mul nuw i32 %73, %72
  %75 = lshr i32 %74, 16
  %76 = trunc i32 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %78 = bitcast i64* %77 to i16*
  store i16 %76, i16* %78, align 8, !tbaa !869
  %79 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %81 = load i16, i16* %80, align 2, !tbaa !869
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %83 = load i16, i16* %82, align 2, !tbaa !869
  %84 = zext i16 %81 to i32
  %85 = zext i16 %83 to i32
  %86 = mul nuw i32 %85, %84
  %87 = lshr i32 %86, 16
  %88 = trunc i32 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 %79, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %92 = load i16, i16* %91, align 4, !tbaa !869
  %93 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %94 = load i16, i16* %93, align 4, !tbaa !869
  %95 = zext i16 %92 to i32
  %96 = zext i16 %94 to i32
  %97 = mul nuw i32 %96, %95
  %98 = lshr i32 %97, 16
  %99 = trunc i32 %98 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 %90, i64* %22, align 8
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %99, i16* %100, align 4, !tbaa !869
  %101 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %102 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %103 = load i16, i16* %102, align 2, !tbaa !869
  %104 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %105 = load i16, i16* %104, align 2, !tbaa !869
  %106 = zext i16 %103 to i32
  %107 = zext i16 %105 to i32
  %108 = mul nuw i32 %107, %106
  %109 = lshr i32 %108, 16
  %110 = trunc i32 %109 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %65, i64* %21, align 16
  store i64 %101, i64* %22, align 8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %110, i16* %111, align 2, !tbaa !869
  %112 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %113 = lshr i64 %65, 16
  %114 = lshr i64 %65, 32
  %115 = lshr i64 %65, 48
  %116 = trunc i64 %65 to i16
  %117 = trunc i64 %113 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = bitcast i8* %2 to i16*
  store i16 %116, i16* %120, align 1, !tbaa !869
  %121 = getelementptr inbounds i8, i8* %2, i64 2
  %122 = bitcast i8* %121 to i16*
  store i16 %117, i16* %122, align 1, !tbaa !869
  %123 = getelementptr inbounds i8, i8* %2, i64 4
  %124 = bitcast i8* %123 to i16*
  store i16 %118, i16* %124, align 1, !tbaa !869
  %125 = getelementptr inbounds i8, i8* %2, i64 6
  %126 = bitcast i8* %125 to i16*
  store i16 %119, i16* %126, align 1, !tbaa !869
  %127 = trunc i64 %112 to i16
  %128 = getelementptr inbounds i8, i8* %2, i64 8
  %129 = bitcast i8* %128 to i16*
  store i16 %127, i16* %129, align 1, !tbaa !869
  %130 = lshr i64 %112, 16
  %131 = trunc i64 %130 to i16
  %132 = getelementptr inbounds i8, i8* %2, i64 10
  %133 = bitcast i8* %132 to i16*
  store i16 %131, i16* %133, align 1, !tbaa !869
  %134 = lshr i64 %112, 32
  %135 = trunc i64 %134 to i16
  %136 = getelementptr inbounds i8, i8* %2, i64 12
  %137 = bitcast i8* %136 to i16*
  store i16 %135, i16* %137, align 1, !tbaa !869
  %138 = lshr i64 %112, 48
  %139 = trunc i64 %138 to i16
  %140 = getelementptr inbounds i8, i8* %2, i64 14
  %141 = bitcast i8* %140 to i16*
  store i16 %139, i16* %141, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PMULHUWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i32
  %57 = and i32 %56, 65535
  %58 = zext i16 %18 to i32
  %59 = mul nuw i32 %58, %57
  %60 = lshr i32 %59, 16
  %61 = trunc i32 %60 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %62 = bitcast <2 x i64>* %6 to i16*
  store i16 %61, i16* %62, align 16, !tbaa !869
  %63 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %64 = lshr i64 %55, 16
  %65 = trunc i64 %64 to i32
  %66 = zext i16 %20 to i32
  %67 = and i32 %65, 65535
  %68 = mul nuw i32 %66, %67
  %69 = lshr i32 %68, 16
  %70 = trunc i32 %69 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %63, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %70, i16* %71, align 2, !tbaa !869
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = lshr i64 %55, 32
  %74 = trunc i64 %73 to i32
  %75 = zext i16 %22 to i32
  %76 = and i32 %74, 65535
  %77 = mul nuw i32 %75, %76
  %78 = lshr i32 %77, 16
  %79 = trunc i32 %78 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %79, i16* %80, align 4, !tbaa !869
  %81 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %82 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %83 = load i16, i16* %82, align 2, !tbaa !869
  %84 = zext i16 %83 to i32
  %85 = zext i16 %24 to i32
  %86 = mul nuw i32 %85, %84
  %87 = lshr i32 %86, 16
  %88 = trunc i32 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %81, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %92 = bitcast i64* %91 to i16*
  %93 = load i16, i16* %92, align 8, !tbaa !869
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %95 = bitcast i64* %94 to i16*
  %96 = load i16, i16* %95, align 8, !tbaa !869
  %97 = zext i16 %93 to i32
  %98 = zext i16 %96 to i32
  %99 = mul nuw i32 %98, %97
  %100 = lshr i32 %99, 16
  %101 = trunc i32 %100 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %103 = bitcast i64* %102 to i16*
  store i16 %101, i16* %103, align 8, !tbaa !869
  %104 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %105 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %106 = load i16, i16* %105, align 2, !tbaa !869
  %107 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %108 = load i16, i16* %107, align 2, !tbaa !869
  %109 = zext i16 %106 to i32
  %110 = zext i16 %108 to i32
  %111 = mul nuw i32 %110, %109
  %112 = lshr i32 %111, 16
  %113 = trunc i32 %112 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 %104, i64* %53, align 8
  %114 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %113, i16* %114, align 2, !tbaa !869
  %115 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %116 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %117 = load i16, i16* %116, align 4, !tbaa !869
  %118 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %119 = load i16, i16* %118, align 4, !tbaa !869
  %120 = zext i16 %117 to i32
  %121 = zext i16 %119 to i32
  %122 = mul nuw i32 %121, %120
  %123 = lshr i32 %122, 16
  %124 = trunc i32 %123 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 %115, i64* %53, align 8
  %125 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %124, i16* %125, align 4, !tbaa !869
  %126 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %127 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %128 = load i16, i16* %127, align 2, !tbaa !869
  %129 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %130 = load i16, i16* %129, align 2, !tbaa !869
  %131 = zext i16 %128 to i32
  %132 = zext i16 %130 to i32
  %133 = mul nuw i32 %132, %131
  %134 = lshr i32 %133, 16
  %135 = trunc i32 %134 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %90, i64* %52, align 16
  store i64 %126, i64* %53, align 8
  %136 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %135, i16* %136, align 2, !tbaa !869
  %137 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %138 = lshr i64 %90, 16
  %139 = lshr i64 %90, 32
  %140 = lshr i64 %90, 48
  %141 = trunc i64 %90 to i16
  %142 = trunc i64 %138 to i16
  %143 = trunc i64 %139 to i16
  %144 = trunc i64 %140 to i16
  %145 = bitcast i8* %2 to i16*
  store i16 %141, i16* %145, align 1, !tbaa !869
  %146 = getelementptr inbounds i8, i8* %2, i64 2
  %147 = bitcast i8* %146 to i16*
  store i16 %142, i16* %147, align 1, !tbaa !869
  %148 = getelementptr inbounds i8, i8* %2, i64 4
  %149 = bitcast i8* %148 to i16*
  store i16 %143, i16* %149, align 1, !tbaa !869
  %150 = getelementptr inbounds i8, i8* %2, i64 6
  %151 = bitcast i8* %150 to i16*
  store i16 %144, i16* %151, align 1, !tbaa !869
  %152 = trunc i64 %137 to i16
  %153 = getelementptr inbounds i8, i8* %2, i64 8
  %154 = bitcast i8* %153 to i16*
  store i16 %152, i16* %154, align 1, !tbaa !869
  %155 = lshr i64 %137, 16
  %156 = trunc i64 %155 to i16
  %157 = getelementptr inbounds i8, i8* %2, i64 10
  %158 = bitcast i8* %157 to i16*
  store i16 %156, i16* %158, align 1, !tbaa !869
  %159 = lshr i64 %137, 32
  %160 = trunc i64 %159 to i16
  %161 = getelementptr inbounds i8, i8* %2, i64 12
  %162 = bitcast i8* %161 to i16*
  store i16 %160, i16* %162, align 1, !tbaa !869
  %163 = lshr i64 %137, 48
  %164 = trunc i64 %163 to i16
  %165 = getelementptr inbounds i8, i8* %2, i64 14
  %166 = bitcast i8* %165 to i16*
  store i16 %164, i16* %166, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMOVMSKBI3RnWImE3RVnI7vec64_tEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64) #0 {
  %5 = lshr i64 %3, 55
  %6 = lshr i64 %3, 62
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2
  %9 = trunc i64 %5 to i32
  %10 = and i32 %9, 1
  %11 = or i32 %10, %8
  %12 = lshr i64 %3, 47
  %13 = shl nuw nsw i32 %11, 1
  %14 = trunc i64 %12 to i32
  %15 = and i32 %14, 1
  %16 = or i32 %15, %13
  %17 = lshr i64 %3, 39
  %18 = shl nuw nsw i32 %16, 1
  %19 = trunc i64 %17 to i32
  %20 = and i32 %19, 1
  %21 = or i32 %20, %18
  %22 = lshr i64 %3, 31
  %23 = shl nuw nsw i32 %21, 1
  %24 = trunc i64 %22 to i32
  %25 = and i32 %24, 1
  %26 = or i32 %25, %23
  %27 = lshr i64 %3, 23
  %28 = shl i32 %26, 1
  %29 = trunc i64 %27 to i32
  %30 = and i32 %29, 1
  %31 = or i32 %30, %28
  %32 = lshr i64 %3, 15
  %33 = shl i32 %31, 1
  %34 = trunc i64 %32 to i32
  %35 = and i32 %34, 1
  %36 = or i32 %35, %33
  %37 = trunc i64 %3 to i32
  %38 = shl i32 %36, 1
  %39 = lshr i32 %37, 7
  %40 = and i32 %39, 1
  %41 = or i32 %40, %38
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PMOVMSKBI3RnWImE2VnI8vec128_tEEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i8* nocapture readonly) #0 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %6) #23
  %7 = bitcast i8* %3 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %8, i64* %12, align 8
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  store i64 %11, i64* %13, align 8
  %14 = lshr i64 %11, 55
  %15 = lshr i64 %11, 62
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, 2
  %18 = trunc i64 %14 to i32
  %19 = and i32 %18, 1
  %20 = or i32 %19, %17
  %21 = lshr i64 %11, 47
  %22 = shl nuw nsw i32 %20, 1
  %23 = trunc i64 %21 to i32
  %24 = and i32 %23, 1
  %25 = or i32 %24, %22
  %26 = lshr i64 %11, 39
  %27 = shl nuw nsw i32 %25, 1
  %28 = trunc i64 %26 to i32
  %29 = and i32 %28, 1
  %30 = or i32 %29, %27
  %31 = lshr i64 %11, 31
  %32 = shl nuw nsw i32 %30, 1
  %33 = trunc i64 %31 to i32
  %34 = and i32 %33, 1
  %35 = or i32 %34, %32
  %36 = lshr i64 %11, 23
  %37 = shl i32 %35, 1
  %38 = trunc i64 %36 to i32
  %39 = and i32 %38, 1
  %40 = or i32 %39, %37
  %41 = lshr i64 %11, 15
  %42 = shl i32 %40, 1
  %43 = trunc i64 %41 to i32
  %44 = and i32 %43, 1
  %45 = or i32 %44, %42
  %46 = trunc i64 %11 to i32
  %47 = shl i32 %45, 1
  %48 = lshr i32 %46, 7
  %49 = and i32 %48, 1
  %50 = or i32 %49, %47
  %51 = lshr i64 %8, 63
  %52 = shl i32 %50, 1
  %53 = trunc i64 %51 to i32
  %54 = or i32 %53, %52
  %55 = lshr i64 %8, 55
  %56 = shl i32 %54, 1
  %57 = trunc i64 %55 to i32
  %58 = and i32 %57, 1
  %59 = or i32 %58, %56
  %60 = lshr i64 %8, 47
  %61 = shl i32 %59, 1
  %62 = trunc i64 %60 to i32
  %63 = and i32 %62, 1
  %64 = or i32 %63, %61
  %65 = lshr i64 %8, 39
  %66 = shl i32 %64, 1
  %67 = trunc i64 %65 to i32
  %68 = and i32 %67, 1
  %69 = or i32 %68, %66
  %70 = lshr i64 %8, 31
  %71 = shl i32 %69, 1
  %72 = trunc i64 %70 to i32
  %73 = and i32 %72, 1
  %74 = or i32 %73, %71
  %75 = lshr i64 %8, 23
  %76 = shl i32 %74, 1
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 1
  %79 = or i32 %78, %76
  %80 = lshr i64 %8, 15
  %81 = shl i32 %79, 1
  %82 = trunc i64 %80 to i32
  %83 = and i32 %82, 1
  %84 = or i32 %83, %81
  %85 = bitcast { i64, i64 }* %5 to i8*
  %86 = load i8, i8* %85, align 8, !tbaa !868
  %87 = shl i32 %84, 1
  %88 = lshr i8 %86, 7
  %89 = zext i8 %88 to i32
  %90 = or i32 %89, %87
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %2, align 8, !tbaa !870
  call void @llvm.lifetime.end(i64 16, i8* nonnull %6) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI4RVnWI7vec64_tE3RVnIS2_E2MnItEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = alloca i64, align 8
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %9 = and i64 %5, 3
  %10 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  %11 = bitcast i64* %7 to [4 x i16]*
  store i64 %3, i64* %7, align 8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 %9
  store i16 %8, i16* %12, align 2, !tbaa !869
  %13 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %14 = trunc i64 %13 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %13, 32
  %18 = trunc i64 %17 to i16
  %19 = lshr i64 %13, 48
  %20 = trunc i64 %19 to i16
  %21 = bitcast i64* %2 to [4 x i16]*
  %22 = bitcast i64* %2 to i16*
  store i16 %14, i16* %22, align 1, !tbaa !869
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 1
  store i16 %16, i16* %23, align 1, !tbaa !869
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 2
  store i16 %18, i16* %24, align 1, !tbaa !869
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 3
  store i16 %20, i16* %25, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI4RVnWI7vec64_tE3RVnIS2_E2RnIjEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = alloca i64, align 8
  %8 = trunc i64 %4 to i16
  %9 = and i64 %5, 3
  %10 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  %11 = bitcast i64* %7 to [4 x i16]*
  store i64 %3, i64* %7, align 8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %11, i64 0, i64 %9
  store i16 %8, i16* %12, align 2, !tbaa !869
  %13 = load i64, i64* %7, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %14 = trunc i64 %13 to i16
  %15 = lshr i64 %13, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %13, 32
  %18 = trunc i64 %17 to i16
  %19 = lshr i64 %13, 48
  %20 = trunc i64 %19 to i16
  %21 = bitcast i64* %2 to [4 x i16]*
  %22 = bitcast i64* %2 to i16*
  store i16 %14, i16* %22, align 1, !tbaa !869
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 1
  store i16 %16, i16* %23, align 1, !tbaa !869
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 2
  store i16 %18, i16* %24, align 1, !tbaa !869
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %21, i64 0, i64 3
  store i16 %20, i16* %25, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI3VnWI8vec128_tE2VnIS2_E2MnItEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %12 = and i64 %5, 7
  %13 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store <2 x i64> %10, <2 x i64>* %7, align 16
  %16 = bitcast <2 x i64>* %7 to [8 x i16]*
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 %12
  store i16 %11, i16* %17, align 2, !tbaa !869
  %18 = load i64, i64* %14, align 16
  %19 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %20 = trunc i64 %18 to i16
  %21 = lshr i64 %18, 16
  %22 = trunc i64 %21 to i16
  %23 = lshr i64 %18, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %18, 48
  %26 = trunc i64 %25 to i16
  %27 = bitcast i8* %2 to i16*
  store i16 %20, i16* %27, align 1, !tbaa !869
  %28 = getelementptr inbounds i8, i8* %2, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %22, i16* %29, align 1, !tbaa !869
  %30 = getelementptr inbounds i8, i8* %2, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %24, i16* %31, align 1, !tbaa !869
  %32 = getelementptr inbounds i8, i8* %2, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %26, i16* %33, align 1, !tbaa !869
  %34 = trunc i64 %19 to i16
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i16*
  store i16 %34, i16* %36, align 1, !tbaa !869
  %37 = lshr i64 %19, 16
  %38 = trunc i64 %37 to i16
  %39 = getelementptr inbounds i8, i8* %2, i64 10
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 1, !tbaa !869
  %41 = lshr i64 %19, 32
  %42 = trunc i64 %41 to i16
  %43 = getelementptr inbounds i8, i8* %2, i64 12
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 1, !tbaa !869
  %45 = lshr i64 %19, 48
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %2, i64 14
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PINSRWI3VnWI8vec128_tE2VnIS2_E2RnIjEEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  %11 = trunc i64 %4 to i16
  %12 = and i64 %5, 7
  %13 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %13)
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store <2 x i64> %10, <2 x i64>* %7, align 16
  %16 = bitcast <2 x i64>* %7 to [8 x i16]*
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %16, i64 0, i64 %12
  store i16 %11, i16* %17, align 2, !tbaa !869
  %18 = load i64, i64* %14, align 16
  %19 = load i64, i64* %15, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %13)
  %20 = trunc i64 %18 to i16
  %21 = lshr i64 %18, 16
  %22 = trunc i64 %21 to i16
  %23 = lshr i64 %18, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %18, 48
  %26 = trunc i64 %25 to i16
  %27 = bitcast i8* %2 to i16*
  store i16 %20, i16* %27, align 1, !tbaa !869
  %28 = getelementptr inbounds i8, i8* %2, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %22, i16* %29, align 1, !tbaa !869
  %30 = getelementptr inbounds i8, i8* %2, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %24, i16* %31, align 1, !tbaa !869
  %32 = getelementptr inbounds i8, i8* %2, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %26, i16* %33, align 1, !tbaa !869
  %34 = trunc i64 %19 to i16
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i16*
  store i16 %34, i16* %36, align 1, !tbaa !869
  %37 = lshr i64 %19, 16
  %38 = trunc i64 %37 to i16
  %39 = getelementptr inbounds i8, i8* %2, i64 10
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 1, !tbaa !869
  %41 = lshr i64 %19, 32
  %42 = trunc i64 %41 to i16
  %43 = getelementptr inbounds i8, i8* %2, i64 12
  %44 = bitcast i8* %43 to i16*
  store i16 %42, i16* %44, align 1, !tbaa !869
  %45 = lshr i64 %19, 48
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %2, i64 14
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L18DoMOVNTQ_MEMq_MMXqEP6MemoryR5State4MVnWI7vec64_tE3RVnIS5_E(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #8 {
  %5 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %3) #22
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L20DoMASKMOVQ_MMXq_MMXqEP6MemoryR5State3RVnI7vec64_tES6_(%struct.Memory*, %struct.State* nocapture readonly dereferenceable(2688), i64, i64) #6 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.uint8v8_t*
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.uint8v8_t*
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !870
  %12 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %11) #22
  %13 = add i64 %11, 1
  %14 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %13) #22
  %15 = add i64 %11, 2
  %16 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %11, 3
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %11, 4
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %11, 5
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %11, 6
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %11, 7
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = zext i8 %26 to i64
  %28 = shl nuw i64 %27, 56
  %29 = zext i8 %24 to i64
  %30 = shl nuw nsw i64 %29, 48
  %31 = zext i8 %22 to i64
  %32 = shl nuw nsw i64 %31, 40
  %33 = zext i8 %20 to i64
  %34 = shl nuw nsw i64 %33, 32
  %35 = zext i8 %18 to i64
  %36 = shl nuw nsw i64 %35, 24
  %37 = zext i8 %16 to i64
  %38 = shl nuw nsw i64 %37, 16
  %39 = zext i8 %14 to i64
  %40 = shl nuw nsw i64 %39, 8
  %41 = zext i8 %12 to i64
  %42 = or i64 %40, %41
  %43 = or i64 %42, %38
  %44 = or i64 %43, %36
  %45 = or i64 %44, %34
  %46 = or i64 %45, %32
  %47 = or i64 %46, %30
  %48 = or i64 %47, %28
  %49 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %49) #23
  store i64 %2, i64* %6, align 8
  %50 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50) #23
  store i64 %3, i64* %8, align 8
  %51 = bitcast i64* %5 to i8*
  %52 = bitcast i64* %5 to [8 x i8]*
  %53 = trunc i64 %2 to i8
  %54 = trunc i64 %3 to i8
  %55 = icmp slt i8 %54, 0
  %56 = select i1 %55, i8 %53, i8 %12
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %48, i64* %5, align 8
  %57 = bitcast i64* %5 to i8*
  store i8 %56, i8* %57, align 8, !tbaa !868
  %58 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %59 = lshr i64 %3, 8
  %60 = trunc i64 %59 to i8
  %61 = icmp slt i8 %60, 0
  %62 = select i1 %61, i64 %2, i64 %58
  %63 = lshr i64 %62, 8
  %64 = trunc i64 %63 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %58, i64* %5, align 8
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 1
  store i8 %64, i8* %65, align 1, !tbaa !868
  %66 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %67 = lshr i64 %3, 16
  %68 = trunc i64 %67 to i8
  %69 = icmp slt i8 %68, 0
  %70 = select i1 %69, i64 %2, i64 %66
  %71 = lshr i64 %70, 16
  %72 = trunc i64 %71 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %66, i64* %5, align 8
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 2
  store i8 %72, i8* %73, align 2, !tbaa !868
  %74 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %75 = lshr i64 %3, 24
  %76 = trunc i64 %75 to i8
  %77 = icmp slt i8 %76, 0
  %78 = select i1 %77, i64 %2, i64 %74
  %79 = lshr i64 %78, 24
  %80 = trunc i64 %79 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %74, i64* %5, align 8
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 3
  store i8 %80, i8* %81, align 1, !tbaa !868
  %82 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %83 = lshr i64 %3, 32
  %84 = trunc i64 %83 to i8
  %85 = icmp slt i8 %84, 0
  %86 = select i1 %85, i64 %2, i64 %82
  %87 = lshr i64 %86, 32
  %88 = trunc i64 %87 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %82, i64* %5, align 8
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 4
  store i8 %88, i8* %89, align 4, !tbaa !868
  %90 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %91 = lshr i64 %3, 40
  %92 = trunc i64 %91 to i8
  %93 = icmp slt i8 %92, 0
  %94 = select i1 %93, i64 %2, i64 %90
  %95 = lshr i64 %94, 40
  %96 = trunc i64 %95 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %90, i64* %5, align 8
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 5
  store i8 %96, i8* %97, align 1, !tbaa !868
  %98 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %99 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 6
  %100 = load i8, i8* %99, align 2, !tbaa !868
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 6
  %102 = load i8, i8* %101, align 2, !tbaa !868
  %103 = lshr i64 %98, 48
  %104 = trunc i64 %103 to i8
  %105 = icmp slt i8 %102, 0
  %106 = select i1 %105, i8 %100, i8 %104
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %98, i64* %5, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 6
  store i8 %106, i8* %107, align 2, !tbaa !868
  %108 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %109 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %7, i64 0, i32 0, i64 7
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %9, i64 0, i32 0, i64 7
  %112 = load i8, i8* %111, align 1, !tbaa !868
  %113 = lshr i64 %108, 56
  %114 = trunc i64 %113 to i8
  %115 = icmp slt i8 %112, 0
  %116 = select i1 %115, i8 %110, i8 %114
  call void @llvm.lifetime.start(i64 8, i8* nonnull %51)
  store i64 %108, i64* %5, align 8
  %117 = getelementptr inbounds [8 x i8], [8 x i8]* %52, i64 0, i64 7
  store i8 %116, i8* %117, align 1, !tbaa !868
  %118 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %51)
  %119 = trunc i64 %118 to i8
  %120 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %11, i8 zeroext %119) #22
  %121 = lshr i64 %118, 8
  %122 = trunc i64 %121 to i8
  %123 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %120, i64 %13, i8 zeroext %122) #22
  %124 = lshr i64 %118, 16
  %125 = trunc i64 %124 to i8
  %126 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %123, i64 %15, i8 zeroext %125) #22
  %127 = lshr i64 %118, 24
  %128 = trunc i64 %127 to i8
  %129 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %126, i64 %17, i8 zeroext %128) #22
  %130 = lshr i64 %118, 32
  %131 = trunc i64 %130 to i8
  %132 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %129, i64 %19, i8 zeroext %131) #22
  %133 = lshr i64 %118, 40
  %134 = trunc i64 %133 to i8
  %135 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %132, i64 %21, i8 zeroext %134) #22
  %136 = lshr i64 %118, 48
  %137 = trunc i64 %136 to i8
  %138 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %135, i64 %23, i8 zeroext %137) #22
  %139 = lshr i64 %118, 56
  %140 = trunc i64 %139 to i8
  %141 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %138, i64 %25, i8 zeroext %140) #22
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %49) #23
  ret %struct.Memory* %141
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoEMMSEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 0, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %3, align 8, !tbaa !870
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 1, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %4, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 2, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %5, align 8, !tbaa !870
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 3, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %6, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 4, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %7, align 8, !tbaa !870
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 5, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %8, align 8, !tbaa !870
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 6, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %9, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 8, i32 0, i64 7, i32 1, i32 0, i32 0, i64 0
  store i64 0, i64* %10, align 8, !tbaa !870
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  store double 0.000000e+00, double* %11, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  store double 0.000000e+00, double* %12, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  store double 0.000000e+00, double* %13, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  store double 0.000000e+00, double* %14, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  store double 0.000000e+00, double* %15, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  store double 0.000000e+00, double* %16, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  store double 0.000000e+00, double* %17, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  store double 0.000000e+00, double* %18, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #3

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIhEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnItEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIjEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnImEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIhES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnItES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIjES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnImES2_EEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIhEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnImEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIhE2RnIhEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnItE2RnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjE2RnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnImE2RnImEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJEEEP6MemoryS2_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688)) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIhE2MnIhEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnItE2MnItEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnIjE2MnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2RnImE2MnImEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64, i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = add i64 %5, 2
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  store i16 %7, i16* %2, align 2, !tbaa !869
  store i64 %6, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = add i64 %5, 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  store i64 %7, i64* %2, align 8, !tbaa !870
  store i64 %6, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3MnWItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = add i64 %5, 2
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %7) #22
  store i64 %6, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3MnWImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = add i64 %5, 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %7) #22
  store i64 %6, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoPOPFEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = add i64 %4, 2
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  store i64 %5, i64* %3, align 8, !tbaa !870
  %7 = lshr i16 %6, 4
  %8 = trunc i16 %7 to i8
  %9 = and i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %9, i8* %10, align 1, !tbaa !864
  %11 = trunc i16 %6 to i8
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = lshr i16 %6, 10
  %15 = trunc i16 %14 to i8
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 %16, i8* %17, align 1, !tbaa !882
  %18 = lshr i16 %6, 11
  %19 = trunc i16 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %21, align 1, !tbaa !867
  %22 = lshr i16 %6, 2
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !863
  %26 = lshr i16 %6, 7
  %27 = trunc i16 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1, !tbaa !866
  %30 = lshr i16 %6, 6
  %31 = trunc i16 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoPOPFQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = add i64 %4, 8
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  store i64 %5, i64* %3, align 8, !tbaa !870
  %7 = trunc i64 %6 to i32
  %8 = lshr i32 %7, 4
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %10, i8* %11, align 1, !tbaa !864
  %12 = trunc i64 %6 to i8
  %13 = and i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = lshr i32 %7, 10
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  store i8 %17, i8* %18, align 1, !tbaa !882
  %19 = lshr i32 %7, 11
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %21, i8* %22, align 1, !tbaa !867
  %23 = lshr i32 %7, 2
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !863
  %27 = lshr i32 %7, 7
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i32 %7, 6
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !865
  %35 = and i32 %7, 2097152
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %37 = bitcast %union.Flags* %36 to i32*
  %38 = load i32, i32* %37, align 16
  %39 = and i32 %38, -2097153
  %40 = or i32 %39, %35
  store i32 %40, i32* %37, align 16
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_ESItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = add i64 %5, 2
  store i64 %7, i64* %4, align 8, !tbaa !870
  %8 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 261) #21
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_ESImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !870
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 261) #21
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_SSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = add i64 %5, 2
  store i64 %7, i64* %4, align 8, !tbaa !870
  %8 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 262) #21
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_SSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !870
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 262) #21
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_DSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = add i64 %5, 2
  store i64 %7, i64* %4, align 8, !tbaa !870
  %8 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 263) #21
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_DSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !870
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 263) #21
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_FSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = add i64 %5, 2
  store i64 %7, i64* %4, align 8, !tbaa !870
  %8 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 264) #21
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_FSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !870
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 264) #21
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_GSItEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %5) #22
  store i16 %6, i16* %2, align 2, !tbaa !869
  %7 = add i64 %5, 2
  store i64 %7, i64* %4, align 8, !tbaa !870
  %8 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 265) #21
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6POP_GSImEEP6MemoryS2_R5State3RnWItE(%struct.Memory*, %struct.State* dereferenceable(2688), i16* nocapture) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %5) #22
  %7 = trunc i64 %6 to i16
  store i16 %7, i16* %2, align 2, !tbaa !869
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !870
  %9 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 265) #21
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PREFETCHIJEEEP6MemoryS2_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688)) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8PREFETCHIJ2MnIhEEEEP6MemoryS4_R5StateDpT_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2RnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = trunc i64 %2 to i16
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -2
  %8 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %7, i16 zeroext %4) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !870
  %6 = add i64 %5, -8
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %6, i64 %2) #22
  store i64 %6, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = trunc i64 %2 to i16
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -2
  %8 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %7, i16 zeroext %4) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2MnItEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -2
  %8 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %7, i16 zeroext %4) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = add i64 %6, -8
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %7, i64 %4) #22
  store i64 %7, i64* %5, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoPUSHAEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0
  %4 = bitcast %union.Flags* %3 to i16*
  %5 = load i16, i16* %4, align 8, !tbaa !869
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.Flags* %6 to i16*
  %8 = load i16, i16* %7, align 8, !tbaa !869
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !870
  %11 = add i64 %10, -2
  %12 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %11, i16 zeroext %8) #22
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %14 = bitcast %union.Flags* %13 to i16*
  %15 = load i16, i16* %14, align 8, !tbaa !869
  %16 = add i64 %10, -4
  %17 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %12, i64 %16, i16 zeroext %15) #22
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %19 = bitcast %union.Flags* %18 to i16*
  %20 = load i16, i16* %19, align 8, !tbaa !869
  %21 = add i64 %10, -6
  %22 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %17, i64 %21, i16 zeroext %20) #22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0
  %24 = bitcast %union.Flags* %23 to i16*
  %25 = load i16, i16* %24, align 8, !tbaa !869
  %26 = add i64 %10, -8
  %27 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %22, i64 %26, i16 zeroext %25) #22
  %28 = add i64 %10, -10
  %29 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %27, i64 %28, i16 zeroext %5) #22
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0
  %31 = bitcast %union.Flags* %30 to i16*
  %32 = load i16, i16* %31, align 8, !tbaa !869
  %33 = add i64 %10, -12
  %34 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %29, i64 %33, i16 zeroext %32) #22
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0
  %36 = bitcast %union.Flags* %35 to i16*
  %37 = load i16, i16* %36, align 8, !tbaa !869
  %38 = add i64 %10, -14
  %39 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %34, i64 %38, i16 zeroext %37) #22
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0
  %41 = bitcast %union.Flags* %40 to i16*
  %42 = load i16, i16* %41, align 8, !tbaa !869
  %43 = add i64 %10, -16
  %44 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %39, i64 %43, i16 zeroext %42) #22
  store i64 %43, i64* %9, align 8, !tbaa !870
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoPUSHADEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0
  %4 = bitcast %union.Flags* %3 to i32*
  %5 = load i32, i32* %4, align 8, !tbaa !877
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.Flags* %6 to i32*
  %8 = load i32, i32* %7, align 8, !tbaa !877
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !870
  %11 = add i64 %10, -4
  %12 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %11, i32 %8) #22
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %14 = bitcast %union.Flags* %13 to i32*
  %15 = load i32, i32* %14, align 8, !tbaa !877
  %16 = add i64 %10, -8
  %17 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %12, i64 %16, i32 %15) #22
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %19 = bitcast %union.Flags* %18 to i32*
  %20 = load i32, i32* %19, align 8, !tbaa !877
  %21 = add i64 %10, -12
  %22 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %17, i64 %21, i32 %20) #22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0
  %24 = bitcast %union.Flags* %23 to i32*
  %25 = load i32, i32* %24, align 8, !tbaa !877
  %26 = add i64 %10, -16
  %27 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %22, i64 %26, i32 %25) #22
  %28 = add i64 %10, -20
  %29 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %27, i64 %28, i32 %5) #22
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 15, i32 0
  %31 = bitcast %union.Flags* %30 to i32*
  %32 = load i32, i32* %31, align 8, !tbaa !877
  %33 = add i64 %10, -24
  %34 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %29, i64 %33, i32 %32) #22
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0
  %36 = bitcast %union.Flags* %35 to i32*
  %37 = load i32, i32* %36, align 8, !tbaa !877
  %38 = add i64 %10, -28
  %39 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %34, i64 %38, i32 %37) #22
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0
  %41 = bitcast %union.Flags* %40 to i32*
  %42 = load i32, i32* %41, align 8, !tbaa !877
  %43 = add i64 %10, -32
  %44 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %39, i64 %43, i32 %42) #22
  store i64 %43, i64* %9, align 8, !tbaa !870
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoPUSHFEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1, !tbaa !850
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %6 = bitcast %union.Flags* %5 to i32*
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, -3286
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %10 = load i8, i8* %9, align 1, !tbaa !863
  %11 = shl i8 %10, 2
  %12 = and i8 %11, 4
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %15 = load i8, i8* %14, align 1, !tbaa !864
  %16 = shl i8 %15, 4
  %17 = and i8 %4, 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %8, %18
  %20 = or i32 %19, %13
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %22 = load i8, i8* %21, align 1, !tbaa !865
  %23 = shl i8 %22, 6
  %24 = and i8 %16, 16
  %25 = zext i8 %24 to i32
  %26 = or i32 %20, %25
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %28 = load i8, i8* %27, align 1, !tbaa !866
  %29 = shl i8 %28, 7
  %30 = zext i8 %29 to i32
  %31 = and i8 %23, 64
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %34 = load i8, i8* %33, align 1, !tbaa !882
  %35 = and i8 %34, 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 10
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = load i8, i8* %38, align 1, !tbaa !867
  %40 = and i8 %39, 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 11
  %43 = or i32 %26, %32
  %44 = or i32 %43, %30
  %45 = or i32 %44, %37
  %46 = or i32 %45, %42
  store i32 %46, i32* %6, align 16
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3, i32 0
  %48 = load i64, i64* %47, align 16, !tbaa !870
  %49 = trunc i64 %48 to i16
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %51 = load i64, i64* %50, align 8, !tbaa !870
  %52 = add i64 %51, -2
  %53 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %52, i16 zeroext %49) #22
  store i64 %52, i64* %50, align 8, !tbaa !870
  ret %struct.Memory* %53
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoPUSHFQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %4 = load i8, i8* %3, align 1, !tbaa !850
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3
  %6 = bitcast %union.Flags* %5 to i32*
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, -3286
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %10 = load i8, i8* %9, align 1, !tbaa !863
  %11 = shl i8 %10, 2
  %12 = and i8 %11, 4
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %15 = load i8, i8* %14, align 1, !tbaa !864
  %16 = shl i8 %15, 4
  %17 = and i8 %4, 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %8, %18
  %20 = or i32 %19, %13
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %22 = load i8, i8* %21, align 1, !tbaa !865
  %23 = shl i8 %22, 6
  %24 = and i8 %16, 16
  %25 = zext i8 %24 to i32
  %26 = or i32 %20, %25
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %28 = load i8, i8* %27, align 1, !tbaa !866
  %29 = shl i8 %28, 7
  %30 = zext i8 %29 to i32
  %31 = and i8 %23, 64
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %34 = load i8, i8* %33, align 1, !tbaa !882
  %35 = and i8 %34, 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 10
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %39 = load i8, i8* %38, align 1, !tbaa !867
  %40 = and i8 %39, 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 11
  %43 = or i32 %26, %32
  %44 = or i32 %43, %30
  %45 = or i32 %44, %37
  %46 = or i32 %45, %42
  store i32 %46, i32* %6, align 16
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 3, i32 0
  %48 = load i64, i64* %47, align 16, !tbaa !870
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 13, i32 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !870
  %51 = add i64 %50, -8
  %52 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %51, i64 %48) #22
  store i64 %51, i64* %49, align 8, !tbaa !870
  ret %struct.Memory* %52
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 7
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i8 %6 to i64
  %12 = zext i8 %8 to i64
  %13 = shl i64 %11, %12
  %14 = sub nsw i8 8, %8
  %15 = zext i8 %14 to i64
  %16 = lshr i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i8
  %19 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = and i8 %18, 1
  store i8 %21, i8* %20, align 1, !tbaa !868
  %22 = icmp eq i8 %8, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %22, label %24, label %29

; <label>:24:                                     ; preds = %10
  %25 = icmp ne i8 %21, 0
  %26 = icmp slt i8 %18, 0
  %27 = xor i1 %26, %25
  %28 = zext i1 %27 to i8
  br label %29

; <label>:29:                                     ; preds = %24, %10
  %30 = phi i8 [ %28, %24 ], [ 0, %10 ]
  store i8 %30, i8* %23, align 1, !tbaa !868
  br label %33

; <label>:31:                                     ; preds = %5
  %32 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %33

; <label>:33:                                     ; preds = %31, %29
  %34 = phi %struct.Memory* [ %19, %29 ], [ %32, %31 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i8 %17, 1
  store i8 %19, i8* %18, align 1, !tbaa !868
  %20 = icmp eq i8 %7, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %20, label %22, label %27

; <label>:22:                                     ; preds = %9
  %23 = icmp ne i8 %19, 0
  %24 = icmp slt i8 %17, 0
  %25 = xor i1 %24, %23
  %26 = zext i1 %25 to i8
  br label %27

; <label>:27:                                     ; preds = %22, %9
  %28 = phi i8 [ %26, %22 ], [ 0, %9 ]
  store i8 %28, i8* %21, align 1, !tbaa !868
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = trunc i64 %3 to i8
  store i8 %30, i8* %2, align 1, !tbaa !868
  br label %31

; <label>:31:                                     ; preds = %29, %27
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 15
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %32, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i16 %6 to i64
  %12 = zext i16 %8 to i64
  %13 = shl i64 %11, %12
  %14 = sub nsw i16 16, %8
  %15 = zext i16 %14 to i64
  %16 = lshr i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i16
  %19 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = and i16 %18, 1
  %22 = trunc i16 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !868
  %23 = icmp eq i16 %8, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %23, label %25, label %30

; <label>:25:                                     ; preds = %10
  %26 = icmp ne i16 %21, 0
  %27 = icmp slt i16 %18, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %25, %10
  %31 = phi i8 [ %29, %25 ], [ 0, %10 ]
  store i8 %31, i8* %24, align 1, !tbaa !868
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %34

; <label>:34:                                     ; preds = %32, %30
  %35 = phi %struct.Memory* [ %19, %30 ], [ %33, %32 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %32, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %6 to i64
  %12 = zext i32 %8 to i64
  %13 = shl i64 %11, %12
  %14 = sub nsw i32 32, %8
  %15 = zext i32 %14 to i64
  %16 = lshr i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i32
  %19 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = and i32 %18, 1
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !868
  %23 = icmp eq i32 %8, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %23, label %25, label %30

; <label>:25:                                     ; preds = %10
  %26 = icmp ne i32 %21, 0
  %27 = icmp slt i32 %18, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %25, %10
  %31 = phi i8 [ %29, %25 ], [ 0, %10 ]
  store i8 %31, i8* %24, align 1, !tbaa !868
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %34

; <label>:34:                                     ; preds = %32, %30
  %35 = phi %struct.Memory* [ %19, %30 ], [ %33, %32 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %5
  %10 = shl i64 %6, %7
  %11 = sub nsw i64 64, %7
  %12 = lshr i64 %6, %11
  %13 = or i64 %12, %10
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = and i64 %13, 1
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %15, align 1, !tbaa !868
  %18 = icmp eq i64 %7, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %18, label %20, label %25

; <label>:20:                                     ; preds = %9
  %21 = icmp ne i64 %16, 0
  %22 = icmp slt i64 %13, 0
  %23 = xor i1 %22, %21
  %24 = zext i1 %23 to i8
  br label %25

; <label>:25:                                     ; preds = %20, %9
  %26 = phi i8 [ %24, %20 ], [ 0, %9 ]
  store i8 %26, i8* %19, align 1, !tbaa !868
  br label %29

; <label>:27:                                     ; preds = %5
  %28 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %29

; <label>:29:                                     ; preds = %27, %25
  %30 = phi %struct.Memory* [ %14, %25 ], [ %28, %27 ]
  ret %struct.Memory* %30
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2, !tbaa !869
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i16 %17, 1
  %20 = trunc i16 %19 to i8
  store i8 %20, i8* %18, align 1, !tbaa !868
  %21 = icmp eq i16 %7, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %21, label %23, label %28

; <label>:23:                                     ; preds = %9
  %24 = icmp ne i16 %19, 0
  %25 = icmp slt i16 %17, 0
  %26 = xor i1 %25, %24
  %27 = zext i1 %26 to i8
  br label %28

; <label>:28:                                     ; preds = %23, %9
  %29 = phi i8 [ %27, %23 ], [ 0, %9 ]
  store i8 %29, i8* %22, align 1, !tbaa !868
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = trunc i64 %3 to i16
  store i16 %31, i16* %2, align 2, !tbaa !869
  br label %32

; <label>:32:                                     ; preds = %30, %28
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = shl i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = lshr i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8, !tbaa !870
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = and i32 %17, 1
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %19, align 1, !tbaa !868
  %22 = icmp eq i32 %7, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %22, label %24, label %29

; <label>:24:                                     ; preds = %10
  %25 = icmp ne i32 %20, 0
  %26 = icmp slt i32 %17, 0
  %27 = xor i1 %26, %25
  %28 = zext i1 %27 to i8
  br label %29

; <label>:29:                                     ; preds = %24, %10
  %30 = phi i8 [ %28, %24 ], [ 0, %10 ]
  store i8 %30, i8* %23, align 1, !tbaa !868
  br label %32

; <label>:31:                                     ; preds = %5
  store i64 %9, i64* %2, align 8, !tbaa !870
  br label %32

; <label>:32:                                     ; preds = %31, %29
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %25, label %8

; <label>:8:                                      ; preds = %5
  %9 = shl i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = lshr i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i64 %12, 1
  %15 = trunc i64 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = icmp eq i64 %6, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %16, label %18, label %23

; <label>:18:                                     ; preds = %8
  %19 = icmp ne i64 %14, 0
  %20 = icmp slt i64 %12, 0
  %21 = xor i1 %20, %19
  %22 = zext i1 %21 to i8
  br label %23

; <label>:23:                                     ; preds = %18, %8
  %24 = phi i8 [ %22, %18 ], [ 0, %8 ]
  store i8 %24, i8* %17, align 1, !tbaa !868
  br label %26

; <label>:25:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %26

; <label>:26:                                     ; preds = %25, %23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 7
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i8 %6 to i64
  %12 = zext i8 %8 to i64
  %13 = shl i64 %11, %12
  %14 = sub nsw i8 8, %8
  %15 = zext i8 %14 to i64
  %16 = lshr i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i8
  %19 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = and i8 %18, 1
  store i8 %21, i8* %20, align 1, !tbaa !868
  %22 = icmp eq i8 %8, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %22, label %24, label %29

; <label>:24:                                     ; preds = %10
  %25 = icmp ne i8 %21, 0
  %26 = icmp slt i8 %18, 0
  %27 = xor i1 %26, %25
  %28 = zext i1 %27 to i8
  br label %29

; <label>:29:                                     ; preds = %24, %10
  %30 = phi i8 [ %28, %24 ], [ 0, %10 ]
  store i8 %30, i8* %23, align 1, !tbaa !868
  br label %33

; <label>:31:                                     ; preds = %5
  %32 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %33

; <label>:33:                                     ; preds = %31, %29
  %34 = phi %struct.Memory* [ %19, %29 ], [ %32, %31 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i8 %17, 1
  store i8 %19, i8* %18, align 1, !tbaa !868
  %20 = icmp eq i8 %7, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %20, label %22, label %27

; <label>:22:                                     ; preds = %9
  %23 = icmp ne i8 %19, 0
  %24 = icmp slt i8 %17, 0
  %25 = xor i1 %24, %23
  %26 = zext i1 %25 to i8
  br label %27

; <label>:27:                                     ; preds = %22, %9
  %28 = phi i8 [ %26, %22 ], [ 0, %9 ]
  store i8 %28, i8* %21, align 1, !tbaa !868
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = trunc i64 %3 to i8
  store i8 %30, i8* %2, align 1, !tbaa !868
  br label %31

; <label>:31:                                     ; preds = %29, %27
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 15
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %32, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i16 %6 to i64
  %12 = zext i16 %8 to i64
  %13 = shl i64 %11, %12
  %14 = sub nsw i16 16, %8
  %15 = zext i16 %14 to i64
  %16 = lshr i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i16
  %19 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = and i16 %18, 1
  %22 = trunc i16 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !868
  %23 = icmp eq i16 %8, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %23, label %25, label %30

; <label>:25:                                     ; preds = %10
  %26 = icmp ne i16 %21, 0
  %27 = icmp slt i16 %18, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %25, %10
  %31 = phi i8 [ %29, %25 ], [ 0, %10 ]
  store i8 %31, i8* %24, align 1, !tbaa !868
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %34

; <label>:34:                                     ; preds = %32, %30
  %35 = phi %struct.Memory* [ %19, %30 ], [ %33, %32 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %32, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %6 to i64
  %12 = zext i32 %8 to i64
  %13 = shl i64 %11, %12
  %14 = sub nsw i32 32, %8
  %15 = zext i32 %14 to i64
  %16 = lshr i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i32
  %19 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = and i32 %18, 1
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !868
  %23 = icmp eq i32 %8, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %23, label %25, label %30

; <label>:25:                                     ; preds = %10
  %26 = icmp ne i32 %21, 0
  %27 = icmp slt i32 %18, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %25, %10
  %31 = phi i8 [ %29, %25 ], [ 0, %10 ]
  store i8 %31, i8* %24, align 1, !tbaa !868
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %34

; <label>:34:                                     ; preds = %32, %30
  %35 = phi %struct.Memory* [ %19, %30 ], [ %33, %32 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %5
  %10 = shl i64 %6, %7
  %11 = sub nsw i64 64, %7
  %12 = lshr i64 %6, %11
  %13 = or i64 %12, %10
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = and i64 %13, 1
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %15, align 1, !tbaa !868
  %18 = icmp eq i64 %7, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %18, label %20, label %25

; <label>:20:                                     ; preds = %9
  %21 = icmp ne i64 %16, 0
  %22 = icmp slt i64 %13, 0
  %23 = xor i1 %22, %21
  %24 = zext i1 %23 to i8
  br label %25

; <label>:25:                                     ; preds = %20, %9
  %26 = phi i8 [ %24, %20 ], [ 0, %9 ]
  store i8 %26, i8* %19, align 1, !tbaa !868
  br label %29

; <label>:27:                                     ; preds = %5
  %28 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %29

; <label>:29:                                     ; preds = %27, %25
  %30 = phi %struct.Memory* [ %14, %25 ], [ %28, %27 ]
  ret %struct.Memory* %30
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = shl i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = lshr i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2, !tbaa !869
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = and i16 %17, 1
  %20 = trunc i16 %19 to i8
  store i8 %20, i8* %18, align 1, !tbaa !868
  %21 = icmp eq i16 %7, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %21, label %23, label %28

; <label>:23:                                     ; preds = %9
  %24 = icmp ne i16 %19, 0
  %25 = icmp slt i16 %17, 0
  %26 = xor i1 %25, %24
  %27 = zext i1 %26 to i8
  br label %28

; <label>:28:                                     ; preds = %23, %9
  %29 = phi i8 [ %27, %23 ], [ 0, %9 ]
  store i8 %29, i8* %22, align 1, !tbaa !868
  br label %32

; <label>:30:                                     ; preds = %5
  %31 = trunc i64 %3 to i16
  store i16 %31, i16* %2, align 2, !tbaa !869
  br label %32

; <label>:32:                                     ; preds = %30, %28
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = shl i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = lshr i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8, !tbaa !870
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = and i32 %17, 1
  %21 = trunc i32 %20 to i8
  store i8 %21, i8* %19, align 1, !tbaa !868
  %22 = icmp eq i32 %7, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %22, label %24, label %29

; <label>:24:                                     ; preds = %10
  %25 = icmp ne i32 %20, 0
  %26 = icmp slt i32 %17, 0
  %27 = xor i1 %26, %25
  %28 = zext i1 %27 to i8
  br label %29

; <label>:29:                                     ; preds = %24, %10
  %30 = phi i8 [ %28, %24 ], [ 0, %10 ]
  store i8 %30, i8* %23, align 1, !tbaa !868
  br label %32

; <label>:31:                                     ; preds = %5
  store i64 %9, i64* %2, align 8, !tbaa !870
  br label %32

; <label>:32:                                     ; preds = %31, %29
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3ROLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %25, label %8

; <label>:8:                                      ; preds = %5
  %9 = shl i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = lshr i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = and i64 %12, 1
  %15 = trunc i64 %14 to i8
  store i8 %15, i8* %13, align 1, !tbaa !868
  %16 = icmp eq i64 %6, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  br i1 %16, label %18, label %23

; <label>:18:                                     ; preds = %8
  %19 = icmp ne i64 %14, 0
  %20 = icmp slt i64 %12, 0
  %21 = xor i1 %20, %19
  %22 = zext i1 %21 to i8
  br label %23

; <label>:23:                                     ; preds = %18, %8
  %24 = phi i8 [ %22, %18 ], [ 0, %8 ]
  store i8 %24, i8* %17, align 1, !tbaa !868
  br label %26

; <label>:25:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %26

; <label>:26:                                     ; preds = %25, %23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 7
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i8 %6 to i64
  %12 = zext i8 %8 to i64
  %13 = lshr i64 %11, %12
  %14 = sub nsw i8 8, %8
  %15 = zext i8 %14 to i64
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i8
  %19 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = icmp slt i8 %18, 0
  %22 = lshr i8 %18, 7
  store i8 %22, i8* %20, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %24 = and i64 %17, 64
  %25 = icmp ne i64 %24, 0
  %26 = xor i1 %21, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1, !tbaa !868
  br label %30

; <label>:28:                                     ; preds = %5
  %29 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %30

; <label>:30:                                     ; preds = %28, %10
  %31 = phi %struct.Memory* [ %29, %28 ], [ %19, %10 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %26, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i8 %17, 0
  %20 = lshr i8 %17, 7
  store i8 %20, i8* %18, align 1, !tbaa !868
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %22 = and i64 %16, 64
  %23 = icmp ne i64 %22, 0
  %24 = xor i1 %19, %23
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %21, align 1, !tbaa !868
  br label %28

; <label>:26:                                     ; preds = %5
  %27 = trunc i64 %3 to i8
  store i8 %27, i8* %2, align 1, !tbaa !868
  br label %28

; <label>:28:                                     ; preds = %26, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 15
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %29, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i16 %6 to i64
  %12 = zext i16 %8 to i64
  %13 = lshr i64 %11, %12
  %14 = sub nsw i16 16, %8
  %15 = zext i16 %14 to i64
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i16
  %19 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = icmp slt i16 %18, 0
  %22 = lshr i16 %18, 15
  %23 = trunc i16 %22 to i8
  store i8 %23, i8* %20, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %17, 16384
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %21, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %24, align 1, !tbaa !868
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %31

; <label>:31:                                     ; preds = %29, %10
  %32 = phi %struct.Memory* [ %30, %29 ], [ %19, %10 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %29, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %6 to i64
  %12 = zext i32 %8 to i64
  %13 = lshr i64 %11, %12
  %14 = sub nsw i32 32, %8
  %15 = zext i32 %14 to i64
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i32
  %19 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = icmp slt i32 %18, 0
  %22 = lshr i32 %18, 31
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %20, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %17, 1073741824
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %21, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %24, align 1, !tbaa !868
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %31

; <label>:31:                                     ; preds = %29, %10
  %32 = phi %struct.Memory* [ %30, %29 ], [ %19, %10 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %24, label %9

; <label>:9:                                      ; preds = %5
  %10 = lshr i64 %6, %7
  %11 = sub nsw i64 64, %7
  %12 = shl i64 %6, %11
  %13 = or i64 %12, %10
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = icmp slt i64 %13, 0
  %17 = lshr i64 %13, 63
  %18 = trunc i64 %17 to i8
  store i8 %18, i8* %15, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %20 = and i64 %13, 4611686018427387904
  %21 = icmp ne i64 %20, 0
  %22 = xor i1 %16, %21
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %19, align 1, !tbaa !868
  br label %26

; <label>:24:                                     ; preds = %5
  %25 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %26

; <label>:26:                                     ; preds = %24, %9
  %27 = phi %struct.Memory* [ %25, %24 ], [ %14, %9 ]
  ret %struct.Memory* %27
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2, !tbaa !869
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i16 %17, 0
  %20 = lshr i16 %17, 15
  %21 = trunc i16 %20 to i8
  store i8 %21, i8* %18, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %23 = and i64 %16, 16384
  %24 = icmp ne i64 %23, 0
  %25 = xor i1 %19, %24
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1, !tbaa !868
  br label %29

; <label>:27:                                     ; preds = %5
  %28 = trunc i64 %3 to i16
  store i16 %28, i16* %2, align 2, !tbaa !869
  br label %29

; <label>:29:                                     ; preds = %27, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = lshr i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = shl i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8, !tbaa !870
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = icmp slt i32 %17, 0
  %21 = lshr i32 %17, 31
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %19, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %24 = and i64 %16, 1073741824
  %25 = icmp ne i64 %24, 0
  %26 = xor i1 %20, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1, !tbaa !868
  br label %29

; <label>:28:                                     ; preds = %5
  store i64 %9, i64* %2, align 8, !tbaa !870
  br label %29

; <label>:29:                                     ; preds = %28, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %22, label %8

; <label>:8:                                      ; preds = %5
  %9 = lshr i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = shl i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = icmp slt i64 %12, 0
  %15 = lshr i64 %12, 63
  %16 = trunc i64 %15 to i8
  store i8 %16, i8* %13, align 1, !tbaa !868
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %18 = and i64 %12, 4611686018427387904
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %14, %19
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %17, align 1, !tbaa !868
  br label %23

; <label>:22:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %23

; <label>:23:                                     ; preds = %22, %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 7
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i8 %6 to i64
  %12 = zext i8 %8 to i64
  %13 = lshr i64 %11, %12
  %14 = sub nsw i8 8, %8
  %15 = zext i8 %14 to i64
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i8
  %19 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = icmp slt i8 %18, 0
  %22 = lshr i8 %18, 7
  store i8 %22, i8* %20, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %24 = and i64 %17, 64
  %25 = icmp ne i64 %24, 0
  %26 = xor i1 %21, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1, !tbaa !868
  br label %30

; <label>:28:                                     ; preds = %5
  %29 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %30

; <label>:30:                                     ; preds = %28, %10
  %31 = phi %struct.Memory* [ %29, %28 ], [ %19, %10 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 7
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %26, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 255
  %11 = zext i8 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i8 8, %7
  %14 = zext i8 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %2, align 1, !tbaa !868
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i8 %17, 0
  %20 = lshr i8 %17, 7
  store i8 %20, i8* %18, align 1, !tbaa !868
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %22 = and i64 %16, 64
  %23 = icmp ne i64 %22, 0
  %24 = xor i1 %19, %23
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %21, align 1, !tbaa !868
  br label %28

; <label>:26:                                     ; preds = %5
  %27 = trunc i64 %3 to i8
  store i8 %27, i8* %2, align 1, !tbaa !868
  br label %28

; <label>:28:                                     ; preds = %26, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 15
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %29, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i16 %6 to i64
  %12 = zext i16 %8 to i64
  %13 = lshr i64 %11, %12
  %14 = sub nsw i16 16, %8
  %15 = zext i16 %14 to i64
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i16
  %19 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = icmp slt i16 %18, 0
  %22 = lshr i16 %18, 15
  %23 = trunc i16 %22 to i8
  store i8 %23, i8* %20, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %17, 16384
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %21, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %24, align 1, !tbaa !868
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %31

; <label>:31:                                     ; preds = %29, %10
  %32 = phi %struct.Memory* [ %30, %29 ], [ %19, %10 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %29, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %6 to i64
  %12 = zext i32 %8 to i64
  %13 = lshr i64 %11, %12
  %14 = sub nsw i32 32, %8
  %15 = zext i32 %14 to i64
  %16 = shl i64 %11, %15
  %17 = or i64 %16, %13
  %18 = trunc i64 %17 to i32
  %19 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %18) #22
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %21 = icmp slt i32 %18, 0
  %22 = lshr i32 %18, 31
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %20, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %17, 1073741824
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %21, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %24, align 1, !tbaa !868
  br label %31

; <label>:29:                                     ; preds = %5
  %30 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %31

; <label>:31:                                     ; preds = %29, %10
  %32 = phi %struct.Memory* [ %30, %29 ], [ %19, %10 ]
  ret %struct.Memory* %32
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %24, label %9

; <label>:9:                                      ; preds = %5
  %10 = lshr i64 %6, %7
  %11 = sub nsw i64 64, %7
  %12 = shl i64 %6, %11
  %13 = or i64 %12, %10
  %14 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %13) #22
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %16 = icmp slt i64 %13, 0
  %17 = lshr i64 %13, 63
  %18 = trunc i64 %17 to i8
  store i8 %18, i8* %15, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %20 = and i64 %13, 4611686018427387904
  %21 = icmp ne i64 %20, 0
  %22 = xor i1 %16, %21
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %19, align 1, !tbaa !868
  br label %26

; <label>:24:                                     ; preds = %5
  %25 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %26

; <label>:26:                                     ; preds = %24, %9
  %27 = phi %struct.Memory* [ %25, %24 ], [ %14, %9 ]
  ret %struct.Memory* %27
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 15
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %27, label %9

; <label>:9:                                      ; preds = %5
  %10 = and i64 %3, 65535
  %11 = zext i16 %7 to i64
  %12 = lshr i64 %10, %11
  %13 = sub nsw i16 16, %7
  %14 = zext i16 %13 to i64
  %15 = shl i64 %10, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i16
  store i16 %17, i16* %2, align 2, !tbaa !869
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %19 = icmp slt i16 %17, 0
  %20 = lshr i16 %17, 15
  %21 = trunc i16 %20 to i8
  store i8 %21, i8* %18, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %23 = and i64 %16, 16384
  %24 = icmp ne i64 %23, 0
  %25 = xor i1 %19, %24
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1, !tbaa !868
  br label %29

; <label>:27:                                     ; preds = %5
  %28 = trunc i64 %3 to i16
  store i16 %28, i16* %2, align 2, !tbaa !869
  br label %29

; <label>:29:                                     ; preds = %27, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = icmp eq i32 %7, 0
  %9 = and i64 %3, 4294967295
  br i1 %8, label %28, label %10

; <label>:10:                                     ; preds = %5
  %11 = zext i32 %7 to i64
  %12 = lshr i64 %9, %11
  %13 = sub nsw i32 32, %7
  %14 = zext i32 %13 to i64
  %15 = shl i64 %9, %14
  %16 = or i64 %15, %12
  %17 = trunc i64 %16 to i32
  %18 = and i64 %16, 4294967295
  store i64 %18, i64* %2, align 8, !tbaa !870
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %20 = icmp slt i32 %17, 0
  %21 = lshr i32 %17, 31
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %19, align 1, !tbaa !868
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %24 = and i64 %16, 1073741824
  %25 = icmp ne i64 %24, 0
  %26 = xor i1 %20, %25
  %27 = zext i1 %26 to i8
  store i8 %27, i8* %23, align 1, !tbaa !868
  br label %29

; <label>:28:                                     ; preds = %5
  store i64 %9, i64* %2, align 8, !tbaa !870
  br label %29

; <label>:29:                                     ; preds = %28, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RORI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %22, label %8

; <label>:8:                                      ; preds = %5
  %9 = lshr i64 %3, %6
  %10 = sub nsw i64 64, %6
  %11 = shl i64 %3, %10
  %12 = or i64 %11, %9
  store i64 %12, i64* %2, align 8, !tbaa !870
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %14 = icmp slt i64 %12, 0
  %15 = lshr i64 %12, 63
  %16 = trunc i64 %15 to i8
  store i8 %16, i8* %13, align 1, !tbaa !868
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %18 = and i64 %12, 4611686018427387904
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %14, %19
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %17, align 1, !tbaa !868
  br label %23

; <label>:22:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %23

; <label>:23:                                     ; preds = %22, %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2RnIjE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = and i64 %3, 4294967295
  %9 = zext i32 %7 to i64
  %10 = lshr i64 %8, %9
  %11 = sub nsw i32 32, %7
  %12 = zext i32 %11 to i64
  %13 = shl i64 %8, %12
  %14 = and i64 %13, 4294967295
  %15 = or i64 %14, %10
  store i64 %15, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2MnIjE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = zext i32 %6 to i64
  %10 = zext i32 %8 to i64
  %11 = lshr i64 %9, %10
  %12 = sub nsw i32 32, %8
  %13 = zext i32 %12 to i64
  %14 = shl i64 %9, %13
  %15 = and i64 %14, 4294967295
  %16 = or i64 %15, %11
  store i64 %16, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2RnImE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = lshr i64 %3, %6
  %8 = sub nsw i64 64, %6
  %9 = shl i64 %3, %8
  %10 = or i64 %9, %7
  store i64 %10, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4RORXI3RnWImE2MnImE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = lshr i64 %6, %7
  %9 = sub nsw i64 64, %7
  %10 = shl i64 %6, %9
  %11 = or i64 %10, %8
  store i64 %11, i64* %2, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = urem i8 %8, 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i8 %9, 0
  br i1 %11, label %40, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = sub nsw i8 8, %9
  %16 = zext i8 %6 to i64
  %17 = zext i8 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = zext i8 %9 to i64
  %20 = shl i64 %16, %19
  %21 = add nsw i8 %9, -1
  %22 = zext i1 %14 to i64
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = or i64 %24, %20
  %26 = trunc i64 %25 to i8
  %27 = lshr i64 %18, 1
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 127
  %30 = or i8 %26, %29
  %31 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %30) #22
  %32 = shl i64 %16, %23
  %33 = trunc i64 %32 to i8
  %34 = icmp slt i8 %33, 0
  %35 = lshr i8 %33, 7
  store i8 %35, i8* %10, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp slt i8 %30, 0
  %38 = xor i1 %34, %37
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %36, align 1, !tbaa !868
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %42

; <label>:42:                                     ; preds = %40, %12
  %43 = phi %struct.Memory* [ %41, %40 ], [ %31, %12 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %38, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i8 8, %8
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i8 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i8 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i8 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 127
  %29 = or i8 %25, %28
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i8
  %32 = icmp slt i8 %31, 0
  %33 = lshr i8 %31, 7
  store i8 %33, i8* %9, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i8 %29, 0
  %36 = xor i1 %32, %35
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1, !tbaa !868
  br label %40

; <label>:38:                                     ; preds = %5
  %39 = trunc i64 %3 to i8
  store i8 %39, i8* %2, align 1, !tbaa !868
  br label %40

; <label>:40:                                     ; preds = %38, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = urem i16 %8, 17
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i16 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = sub nsw i16 16, %9
  %16 = zext i16 %6 to i64
  %17 = zext i16 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = zext i16 %9 to i64
  %20 = shl i64 %16, %19
  %21 = add nsw i16 %9, -1
  %22 = zext i1 %14 to i64
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = or i64 %24, %20
  %26 = trunc i64 %25 to i16
  %27 = lshr i64 %18, 1
  %28 = trunc i64 %27 to i16
  %29 = and i16 %28, 32767
  %30 = or i16 %26, %29
  %31 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %30) #22
  %32 = shl i64 %16, %23
  %33 = trunc i64 %32 to i16
  %34 = icmp slt i16 %33, 0
  %35 = lshr i16 %33, 15
  %36 = trunc i16 %35 to i8
  store i8 %36, i8* %10, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i16 %30, 0
  %39 = xor i1 %34, %38
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %42, %41 ], [ %31, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %40, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i32 32, %8
  %15 = zext i32 %6 to i64
  %16 = zext i32 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i32 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i32 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i32 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i32
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i32
  %28 = and i32 %27, 2147483647
  %29 = or i32 %25, %28
  %30 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %29) #22
  %31 = shl i64 %15, %22
  %32 = trunc i64 %31 to i32
  %33 = icmp slt i32 %32, 0
  %34 = lshr i32 %32, 31
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %9, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp slt i32 %29, 0
  %38 = xor i1 %33, %37
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %36, align 1, !tbaa !868
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %42

; <label>:42:                                     ; preds = %40, %11
  %43 = phi %struct.Memory* [ %41, %40 ], [ %30, %11 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = zext i1 %12 to i64
  %14 = sub nsw i64 64, %7
  %15 = lshr i64 %6, %14
  %16 = shl i64 %6, %7
  %17 = add nsw i64 %7, -1
  %18 = shl i64 %13, %17
  %19 = lshr i64 %15, 1
  %20 = or i64 %19, %16
  %21 = or i64 %20, %18
  %22 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %21) #22
  %23 = shl i64 %6, %17
  %24 = icmp slt i64 %23, 0
  %25 = lshr i64 %23, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %8, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %28 = icmp slt i64 %21, 0
  %29 = xor i1 %24, %28
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %27, align 1, !tbaa !868
  br label %33

; <label>:31:                                     ; preds = %5
  %32 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %33

; <label>:33:                                     ; preds = %31, %10
  %34 = phi %struct.Memory* [ %32, %31 ], [ %22, %10 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i16 16, %8
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i16 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i16 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i16 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i16
  %28 = and i16 %27, 32767
  %29 = or i16 %25, %28
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i16
  %32 = icmp slt i16 %31, 0
  %33 = lshr i16 %31, 15
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %9, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i16 %29, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2, !tbaa !869
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = sub nsw i32 32, %7
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = zext i32 %7 to i64
  %18 = shl i64 %14, %17
  %19 = add nsw i32 %7, -1
  %20 = zext i1 %12 to i64
  %21 = zext i32 %19 to i64
  %22 = shl i64 %20, %21
  %23 = or i64 %22, %18
  %24 = trunc i64 %23 to i32
  %25 = lshr i64 %16, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = or i32 %24, %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %2, align 8, !tbaa !870
  %30 = shl i64 %14, %21
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %31, 0
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %8, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i32 %28, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8, !tbaa !870
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1, !tbaa !850
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = sub nsw i64 64, %6
  %14 = lshr i64 %3, %13
  %15 = shl i64 %3, %6
  %16 = add nsw i64 %6, -1
  %17 = shl i64 %12, %16
  %18 = lshr i64 %14, 1
  %19 = or i64 %18, %15
  %20 = or i64 %19, %17
  store i64 %20, i64* %2, align 8, !tbaa !870
  %21 = shl i64 %3, %16
  %22 = icmp slt i64 %21, 0
  %23 = lshr i64 %21, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !868
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = icmp slt i64 %20, 0
  %27 = xor i1 %22, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %25, align 1, !tbaa !868
  br label %30

; <label>:29:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %30

; <label>:30:                                     ; preds = %29, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = urem i8 %8, 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i8 %9, 0
  br i1 %11, label %40, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = sub nsw i8 8, %9
  %16 = zext i8 %6 to i64
  %17 = zext i8 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = zext i8 %9 to i64
  %20 = shl i64 %16, %19
  %21 = add nsw i8 %9, -1
  %22 = zext i1 %14 to i64
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = or i64 %24, %20
  %26 = trunc i64 %25 to i8
  %27 = lshr i64 %18, 1
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 127
  %30 = or i8 %26, %29
  %31 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %30) #22
  %32 = shl i64 %16, %23
  %33 = trunc i64 %32 to i8
  %34 = icmp slt i8 %33, 0
  %35 = lshr i8 %33, 7
  store i8 %35, i8* %10, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp slt i8 %30, 0
  %38 = xor i1 %34, %37
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %36, align 1, !tbaa !868
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %42

; <label>:42:                                     ; preds = %40, %12
  %43 = phi %struct.Memory* [ %41, %40 ], [ %31, %12 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %38, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i8 8, %8
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i8 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i8 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i8 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 127
  %29 = or i8 %25, %28
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i8
  %32 = icmp slt i8 %31, 0
  %33 = lshr i8 %31, 7
  store i8 %33, i8* %9, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i8 %29, 0
  %36 = xor i1 %32, %35
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1, !tbaa !868
  br label %40

; <label>:38:                                     ; preds = %5
  %39 = trunc i64 %3 to i8
  store i8 %39, i8* %2, align 1, !tbaa !868
  br label %40

; <label>:40:                                     ; preds = %38, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = urem i16 %8, 17
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i16 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = sub nsw i16 16, %9
  %16 = zext i16 %6 to i64
  %17 = zext i16 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = zext i16 %9 to i64
  %20 = shl i64 %16, %19
  %21 = add nsw i16 %9, -1
  %22 = zext i1 %14 to i64
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = or i64 %24, %20
  %26 = trunc i64 %25 to i16
  %27 = lshr i64 %18, 1
  %28 = trunc i64 %27 to i16
  %29 = and i16 %28, 32767
  %30 = or i16 %26, %29
  %31 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %30) #22
  %32 = shl i64 %16, %23
  %33 = trunc i64 %32 to i16
  %34 = icmp slt i16 %33, 0
  %35 = lshr i16 %33, 15
  %36 = trunc i16 %35 to i8
  store i8 %36, i8* %10, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i16 %30, 0
  %39 = xor i1 %34, %38
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %42, %41 ], [ %31, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %40, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i32 32, %8
  %15 = zext i32 %6 to i64
  %16 = zext i32 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i32 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i32 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i32 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i32
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i32
  %28 = and i32 %27, 2147483647
  %29 = or i32 %25, %28
  %30 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %29) #22
  %31 = shl i64 %15, %22
  %32 = trunc i64 %31 to i32
  %33 = icmp slt i32 %32, 0
  %34 = lshr i32 %32, 31
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %9, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp slt i32 %29, 0
  %38 = xor i1 %33, %37
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %36, align 1, !tbaa !868
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %42

; <label>:42:                                     ; preds = %40, %11
  %43 = phi %struct.Memory* [ %41, %40 ], [ %30, %11 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %31, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = zext i1 %12 to i64
  %14 = sub nsw i64 64, %7
  %15 = lshr i64 %6, %14
  %16 = shl i64 %6, %7
  %17 = add nsw i64 %7, -1
  %18 = shl i64 %13, %17
  %19 = lshr i64 %15, 1
  %20 = or i64 %19, %16
  %21 = or i64 %20, %18
  %22 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %21) #22
  %23 = shl i64 %6, %17
  %24 = icmp slt i64 %23, 0
  %25 = lshr i64 %23, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %8, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %28 = icmp slt i64 %21, 0
  %29 = xor i1 %24, %28
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %27, align 1, !tbaa !868
  br label %33

; <label>:31:                                     ; preds = %5
  %32 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %33

; <label>:33:                                     ; preds = %31, %10
  %34 = phi %struct.Memory* [ %32, %31 ], [ %22, %10 ]
  ret %struct.Memory* %34
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = sub nsw i16 16, %8
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = zext i16 %8 to i64
  %19 = shl i64 %15, %18
  %20 = add nsw i16 %8, -1
  %21 = zext i1 %13 to i64
  %22 = zext i16 %20 to i64
  %23 = shl i64 %21, %22
  %24 = or i64 %23, %19
  %25 = trunc i64 %24 to i16
  %26 = lshr i64 %17, 1
  %27 = trunc i64 %26 to i16
  %28 = and i16 %27, 32767
  %29 = or i16 %25, %28
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = shl i64 %15, %22
  %31 = trunc i64 %30 to i16
  %32 = icmp slt i16 %31, 0
  %33 = lshr i16 %31, 15
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %9, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i16 %29, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2, !tbaa !869
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = sub nsw i32 32, %7
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = zext i32 %7 to i64
  %18 = shl i64 %14, %17
  %19 = add nsw i32 %7, -1
  %20 = zext i1 %12 to i64
  %21 = zext i32 %19 to i64
  %22 = shl i64 %20, %21
  %23 = or i64 %22, %18
  %24 = trunc i64 %23 to i32
  %25 = lshr i64 %16, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = or i32 %24, %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %2, align 8, !tbaa !870
  %30 = shl i64 %14, %21
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %31, 0
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %8, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i32 %28, 0
  %37 = xor i1 %32, %36
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8, !tbaa !870
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1, !tbaa !850
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = sub nsw i64 64, %6
  %14 = lshr i64 %3, %13
  %15 = shl i64 %3, %6
  %16 = add nsw i64 %6, -1
  %17 = shl i64 %12, %16
  %18 = lshr i64 %14, 1
  %19 = or i64 %18, %15
  %20 = or i64 %19, %17
  store i64 %20, i64* %2, align 8, !tbaa !870
  %21 = shl i64 %3, %16
  %22 = icmp slt i64 %21, 0
  %23 = lshr i64 %21, 63
  %24 = trunc i64 %23 to i8
  store i8 %24, i8* %7, align 1, !tbaa !868
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %26 = icmp slt i64 %20, 0
  %27 = xor i1 %22, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %25, align 1, !tbaa !868
  br label %30

; <label>:29:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %30

; <label>:30:                                     ; preds = %29, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = urem i8 %8, 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i8 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = add nsw i8 %9, -1
  %16 = zext i8 %6 to i64
  %17 = zext i8 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = sub nsw i8 8, %9
  %20 = zext i8 %19 to i64
  %21 = shl i64 %16, %20
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 127
  %25 = zext i1 %14 to i64
  %26 = shl i64 %25, %20
  %27 = trunc i64 %26 to i8
  %28 = trunc i64 %21 to i8
  %29 = shl i8 %28, 1
  %30 = or i8 %24, %29
  %31 = or i8 %30, %27
  %32 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %31) #22
  %33 = trunc i64 %18 to i8
  %34 = and i8 %33, 1
  store i8 %34, i8* %10, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = and i8 %31, 64
  %37 = icmp ne i8 %36, 0
  %38 = icmp slt i8 %31, 0
  %39 = xor i1 %38, %37
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %35, align 1, !tbaa !868
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %42, %41 ], [ %32, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i8 %8, -1
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i8 8, %8
  %19 = zext i8 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 127
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i8
  %27 = trunc i64 %20 to i8
  %28 = shl i8 %27, 1
  %29 = or i8 %23, %28
  %30 = or i8 %29, %26
  store i8 %30, i8* %2, align 1, !tbaa !868
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i8 %30, 64
  %35 = icmp ne i8 %34, 0
  %36 = icmp slt i8 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i8
  store i8 %40, i8* %2, align 1, !tbaa !868
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = urem i16 %8, 17
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i16 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = add nsw i16 %9, -1
  %16 = zext i16 %6 to i64
  %17 = zext i16 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = sub nsw i16 16, %9
  %20 = zext i16 %19 to i64
  %21 = shl i64 %16, %20
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i16
  %24 = and i16 %23, 32767
  %25 = zext i1 %14 to i64
  %26 = shl i64 %25, %20
  %27 = trunc i64 %26 to i16
  %28 = trunc i64 %21 to i16
  %29 = shl i16 %28, 1
  %30 = or i16 %24, %29
  %31 = or i16 %30, %27
  %32 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %31) #22
  %33 = trunc i64 %18 to i8
  %34 = and i8 %33, 1
  store i8 %34, i8* %10, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = and i16 %31, 16384
  %37 = icmp ne i16 %36, 0
  %38 = icmp slt i16 %31, 0
  %39 = xor i1 %38, %37
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %35, align 1, !tbaa !868
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %42, %41 ], [ %32, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %40, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i32 %8, -1
  %15 = zext i32 %6 to i64
  %16 = zext i32 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i32 32, %8
  %19 = zext i32 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2147483647
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i32
  %27 = trunc i64 %20 to i32
  %28 = shl i32 %27, 1
  %29 = or i32 %23, %28
  %30 = or i32 %29, %26
  %31 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %30) #22
  %32 = trunc i64 %17 to i8
  %33 = and i8 %32, 1
  store i8 %33, i8* %9, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = and i32 %30, 1073741824
  %36 = icmp ne i32 %35, 0
  %37 = icmp slt i32 %30, 0
  %38 = xor i1 %37, %36
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %34, align 1, !tbaa !868
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %42

; <label>:42:                                     ; preds = %40, %11
  %43 = phi %struct.Memory* [ %41, %40 ], [ %31, %11 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %32, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = zext i1 %12 to i64
  %14 = add nsw i64 %7, -1
  %15 = lshr i64 %6, %14
  %16 = sub nsw i64 64, %7
  %17 = shl i64 %6, %16
  %18 = lshr i64 %15, 1
  %19 = shl i64 %13, %16
  %20 = shl i64 %17, 1
  %21 = or i64 %20, %18
  %22 = or i64 %21, %19
  %23 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %22) #22
  %24 = trunc i64 %15 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %8, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %27 = and i64 %22, 4611686018427387904
  %28 = icmp ne i64 %27, 0
  %29 = icmp slt i64 %22, 0
  %30 = xor i1 %29, %28
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %26, align 1, !tbaa !868
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %34

; <label>:34:                                     ; preds = %32, %10
  %35 = phi %struct.Memory* [ %33, %32 ], [ %23, %10 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i16 %8, -1
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i16 16, %8
  %19 = zext i16 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i16
  %23 = and i16 %22, 32767
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i16
  %27 = trunc i64 %20 to i16
  %28 = shl i16 %27, 1
  %29 = or i16 %23, %28
  %30 = or i16 %29, %26
  store i16 %30, i16* %2, align 2, !tbaa !869
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i16 %30, 16384
  %35 = icmp ne i16 %34, 0
  %36 = icmp slt i16 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2, !tbaa !869
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = add nsw i32 %7, -1
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = sub nsw i32 32, %7
  %18 = zext i32 %17 to i64
  %19 = shl i64 %14, %18
  %20 = lshr i64 %16, 1
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2147483647
  %23 = zext i1 %12 to i64
  %24 = shl i64 %23, %18
  %25 = trunc i64 %24 to i32
  %26 = trunc i64 %19 to i32
  %27 = shl i32 %26, 1
  %28 = or i32 %22, %27
  %29 = or i32 %28, %25
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %2, align 8, !tbaa !870
  %31 = trunc i64 %16 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %8, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i32 %29, 1073741824
  %35 = icmp ne i32 %34, 0
  %36 = icmp slt i32 %29, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8, !tbaa !870
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1, !tbaa !850
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = add nsw i64 %6, -1
  %14 = lshr i64 %3, %13
  %15 = sub nsw i64 64, %6
  %16 = shl i64 %3, %15
  %17 = lshr i64 %14, 1
  %18 = shl i64 %12, %15
  %19 = shl i64 %16, 1
  %20 = or i64 %19, %17
  %21 = or i64 %20, %18
  store i64 %21, i64* %2, align 8, !tbaa !870
  %22 = trunc i64 %14 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* %7, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %21, 4611686018427387904
  %26 = icmp ne i64 %25, 0
  %27 = icmp slt i64 %21, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %24, align 1, !tbaa !868
  br label %31

; <label>:30:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %31

; <label>:31:                                     ; preds = %30, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = urem i8 %8, 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i8 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = add nsw i8 %9, -1
  %16 = zext i8 %6 to i64
  %17 = zext i8 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = sub nsw i8 8, %9
  %20 = zext i8 %19 to i64
  %21 = shl i64 %16, %20
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 127
  %25 = zext i1 %14 to i64
  %26 = shl i64 %25, %20
  %27 = trunc i64 %26 to i8
  %28 = trunc i64 %21 to i8
  %29 = shl i8 %28, 1
  %30 = or i8 %24, %29
  %31 = or i8 %30, %27
  %32 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %31) #22
  %33 = trunc i64 %18 to i8
  %34 = and i8 %33, 1
  store i8 %34, i8* %10, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = and i8 %31, 64
  %37 = icmp ne i8 %36, 0
  %38 = icmp slt i8 %31, 0
  %39 = xor i1 %38, %37
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %35, align 1, !tbaa !868
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %6) #22
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %42, %41 ], [ %32, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = urem i8 %7, 9
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i8 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i8 %8, -1
  %15 = and i64 %3, 255
  %16 = zext i8 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i8 8, %8
  %19 = zext i8 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 127
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i8
  %27 = trunc i64 %20 to i8
  %28 = shl i8 %27, 1
  %29 = or i8 %23, %28
  %30 = or i8 %29, %26
  store i8 %30, i8* %2, align 1, !tbaa !868
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i8 %30, 64
  %35 = icmp ne i8 %34, 0
  %36 = icmp slt i8 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i8
  store i8 %40, i8* %2, align 1, !tbaa !868
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = urem i16 %8, 17
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %11 = icmp eq i16 %9, 0
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %5
  %13 = load i8, i8* %10, align 1, !tbaa !850
  %14 = icmp ne i8 %13, 0
  %15 = add nsw i16 %9, -1
  %16 = zext i16 %6 to i64
  %17 = zext i16 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = sub nsw i16 16, %9
  %20 = zext i16 %19 to i64
  %21 = shl i64 %16, %20
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i16
  %24 = and i16 %23, 32767
  %25 = zext i1 %14 to i64
  %26 = shl i64 %25, %20
  %27 = trunc i64 %26 to i16
  %28 = trunc i64 %21 to i16
  %29 = shl i16 %28, 1
  %30 = or i16 %24, %29
  %31 = or i16 %30, %27
  %32 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %31) #22
  %33 = trunc i64 %18 to i8
  %34 = and i8 %33, 1
  store i8 %34, i8* %10, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = and i16 %31, 16384
  %37 = icmp ne i16 %36, 0
  %38 = icmp slt i16 %31, 0
  %39 = xor i1 %38, %37
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %35, align 1, !tbaa !868
  br label %43

; <label>:41:                                     ; preds = %5
  %42 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %6) #22
  br label %43

; <label>:43:                                     ; preds = %41, %12
  %44 = phi %struct.Memory* [ %42, %41 ], [ %32, %12 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = and i32 %7, 31
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %40, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i32 %8, -1
  %15 = zext i32 %6 to i64
  %16 = zext i32 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i32 32, %8
  %19 = zext i32 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2147483647
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i32
  %27 = trunc i64 %20 to i32
  %28 = shl i32 %27, 1
  %29 = or i32 %23, %28
  %30 = or i32 %29, %26
  %31 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %30) #22
  %32 = trunc i64 %17 to i8
  %33 = and i8 %32, 1
  store i8 %33, i8* %9, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = and i32 %30, 1073741824
  %36 = icmp ne i32 %35, 0
  %37 = icmp slt i32 %30, 0
  %38 = xor i1 %37, %36
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %34, align 1, !tbaa !868
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %6) #22
  br label %42

; <label>:42:                                     ; preds = %40, %11
  %43 = phi %struct.Memory* [ %41, %40 ], [ %31, %11 ]
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = and i64 %4, 63
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %32, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = zext i1 %12 to i64
  %14 = add nsw i64 %7, -1
  %15 = lshr i64 %6, %14
  %16 = sub nsw i64 64, %7
  %17 = shl i64 %6, %16
  %18 = lshr i64 %15, 1
  %19 = shl i64 %13, %16
  %20 = shl i64 %17, 1
  %21 = or i64 %20, %18
  %22 = or i64 %21, %19
  %23 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %22) #22
  %24 = trunc i64 %15 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %8, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %27 = and i64 %22, 4611686018427387904
  %28 = icmp ne i64 %27, 0
  %29 = icmp slt i64 %22, 0
  %30 = xor i1 %29, %28
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %26, align 1, !tbaa !868
  br label %34

; <label>:32:                                     ; preds = %5
  %33 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %6) #22
  br label %34

; <label>:34:                                     ; preds = %32, %10
  %35 = phi %struct.Memory* [ %33, %32 ], [ %23, %10 ]
  ret %struct.Memory* %35
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = urem i16 %7, 17
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = icmp eq i16 %8, 0
  br i1 %10, label %39, label %11

; <label>:11:                                     ; preds = %5
  %12 = load i8, i8* %9, align 1, !tbaa !850
  %13 = icmp ne i8 %12, 0
  %14 = add nsw i16 %8, -1
  %15 = and i64 %3, 65535
  %16 = zext i16 %14 to i64
  %17 = lshr i64 %15, %16
  %18 = sub nsw i16 16, %8
  %19 = zext i16 %18 to i64
  %20 = shl i64 %15, %19
  %21 = lshr i64 %17, 1
  %22 = trunc i64 %21 to i16
  %23 = and i16 %22, 32767
  %24 = zext i1 %13 to i64
  %25 = shl i64 %24, %19
  %26 = trunc i64 %25 to i16
  %27 = trunc i64 %20 to i16
  %28 = shl i16 %27, 1
  %29 = or i16 %23, %28
  %30 = or i16 %29, %26
  store i16 %30, i16* %2, align 2, !tbaa !869
  %31 = trunc i64 %17 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %9, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i16 %30, 16384
  %35 = icmp ne i16 %34, 0
  %36 = icmp slt i16 %30, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = trunc i64 %3 to i16
  store i16 %40, i16* %2, align 2, !tbaa !869
  br label %41

; <label>:41:                                     ; preds = %39, %11
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = trunc i64 %4 to i32
  %7 = and i32 %6, 31
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %39, label %10

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %8, align 1, !tbaa !850
  %12 = icmp ne i8 %11, 0
  %13 = add nsw i32 %7, -1
  %14 = and i64 %3, 4294967295
  %15 = zext i32 %13 to i64
  %16 = lshr i64 %14, %15
  %17 = sub nsw i32 32, %7
  %18 = zext i32 %17 to i64
  %19 = shl i64 %14, %18
  %20 = lshr i64 %16, 1
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2147483647
  %23 = zext i1 %12 to i64
  %24 = shl i64 %23, %18
  %25 = trunc i64 %24 to i32
  %26 = trunc i64 %19 to i32
  %27 = shl i32 %26, 1
  %28 = or i32 %22, %27
  %29 = or i32 %28, %25
  %30 = zext i32 %29 to i64
  store i64 %30, i64* %2, align 8, !tbaa !870
  %31 = trunc i64 %16 to i8
  %32 = and i8 %31, 1
  store i8 %32, i8* %8, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = and i32 %29, 1073741824
  %35 = icmp ne i32 %34, 0
  %36 = icmp slt i32 %29, 0
  %37 = xor i1 %36, %35
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %33, align 1, !tbaa !868
  br label %41

; <label>:39:                                     ; preds = %5
  %40 = and i64 %3, 4294967295
  store i64 %40, i64* %2, align 8, !tbaa !870
  br label %41

; <label>:41:                                     ; preds = %39, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3RCRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #2 {
  %6 = and i64 %4, 63
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %30, label %9

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %7, align 1, !tbaa !850
  %11 = icmp ne i8 %10, 0
  %12 = zext i1 %11 to i64
  %13 = add nsw i64 %6, -1
  %14 = lshr i64 %3, %13
  %15 = sub nsw i64 64, %6
  %16 = shl i64 %3, %15
  %17 = lshr i64 %14, 1
  %18 = shl i64 %12, %15
  %19 = shl i64 %16, 1
  %20 = or i64 %19, %17
  %21 = or i64 %20, %18
  store i64 %21, i64* %2, align 8, !tbaa !870
  %22 = trunc i64 %14 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* %7, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %25 = and i64 %21, 4611686018427387904
  %26 = icmp ne i64 %25, 0
  %27 = icmp slt i64 %21, 0
  %28 = xor i1 %27, %26
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %24, align 1, !tbaa !868
  br label %31

; <label>:30:                                     ; preds = %5
  store i64 %3, i64* %2, align 8, !tbaa !870
  br label %31

; <label>:31:                                     ; preds = %30, %9
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6XBEGINEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #2 {
  store i8 1, i8* %2, align 1, !tbaa !868
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3, i64* %6, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  store i64 8, i64* %7, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoXENDEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %4, %struct.Memory* %0) #21
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoXTESTEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %3, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6XABORTEP6MemoryR5State2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_ALI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i8*
  %10 = load i8, i8* %9, align 8, !tbaa !875
  %11 = sub i8 %10, %6
  %12 = icmp eq i8 %11, 0
  %13 = icmp ult i8 %10, %6
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i8 %10, %6
  %23 = xor i8 %22, %11
  %24 = lshr i8 %23, 4
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = zext i1 %12 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i8 %11, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i8 %10, 7
  %32 = lshr i8 %6, 7
  %33 = xor i8 %31, %32
  %34 = xor i8 %29, %31
  %35 = add nuw nsw i8 %34, %33
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  %39 = select i1 %12, i8 %7, i8 %6
  %40 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %39) #22
  %41 = select i1 %12, i8 %10, i8 %6
  store i8 %41, i8* %9, align 1, !tbaa !868
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_ALI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i8*
  %10 = load i8, i8* %9, align 8, !tbaa !875
  %11 = sub i8 %10, %6
  %12 = icmp eq i8 %11, 0
  %13 = icmp ult i8 %10, %6
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = zext i8 %11 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i8 %10, %6
  %23 = xor i8 %22, %11
  %24 = lshr i8 %23, 4
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = zext i1 %12 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i8 %11, 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i8 %10, 7
  %32 = lshr i8 %6, 7
  %33 = xor i8 %31, %32
  %34 = xor i8 %29, %31
  %35 = add nuw nsw i8 %34, %33
  %36 = icmp eq i8 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  %39 = select i1 %12, i8 %7, i8 %6
  store i8 %39, i8* %2, align 1, !tbaa !868
  %40 = select i1 %12, i8 %10, i8 %6
  store i8 %40, i8* %9, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_AXI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = sub i16 %10, %6
  %12 = icmp eq i16 %11, 0
  %13 = icmp ult i16 %10, %6
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = and i16 %11, 255
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i16 %10, %6
  %24 = xor i16 %23, %11
  %25 = lshr i16 %24, 4
  %26 = trunc i16 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !864
  %29 = zext i1 %12 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i16 %11, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i16 %10, 15
  %35 = lshr i16 %6, 15
  %36 = xor i16 %34, %35
  %37 = xor i16 %31, %34
  %38 = add nuw nsw i16 %37, %36
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  %42 = select i1 %12, i16 %7, i16 %6
  %43 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %42) #22
  %44 = select i1 %12, i16 %10, i16 %6
  store i16 %44, i16* %9, align 2, !tbaa !869
  ret %struct.Memory* %43
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10CMPXCHG_AXI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = sub i16 %10, %6
  %12 = icmp eq i16 %11, 0
  %13 = icmp ult i16 %10, %6
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = and i16 %11, 255
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i16 %10, %6
  %24 = xor i16 %23, %11
  %25 = lshr i16 %24, 4
  %26 = trunc i16 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !864
  %29 = zext i1 %12 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i16 %11, 15
  %32 = trunc i16 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i16 %10, 15
  %35 = lshr i16 %6, 15
  %36 = xor i16 %34, %35
  %37 = xor i16 %31, %34
  %38 = add nuw nsw i16 %37, %36
  %39 = icmp eq i16 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  %42 = select i1 %12, i16 %7, i16 %6
  store i16 %42, i16* %2, align 2, !tbaa !869
  %43 = select i1 %12, i16 %10, i16 %6
  store i16 %43, i16* %9, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_EAXI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i32
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = sub i32 %10, %6
  %12 = icmp eq i32 %11, 0
  %13 = icmp ult i32 %10, %6
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i32 %10, %6
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = zext i1 %12 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i32 %10, 31
  %34 = lshr i32 %6, 31
  %35 = xor i32 %33, %34
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  %41 = select i1 %12, i32 %7, i32 %6
  %42 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %41) #22
  %43 = select i1 %12, i32 %10, i32 %6
  store i32 %43, i32* %9, align 4, !tbaa !877
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_EAXI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i32
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.Flags* %7 to i32*
  %9 = load i32, i32* %8, align 8, !tbaa !877
  %10 = sub i32 %9, %6
  %11 = icmp eq i32 %10, 0
  %12 = icmp ult i32 %9, %6
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i32 %9, %6
  %22 = xor i32 %21, %10
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = zext i1 %11 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i32 %10, 31
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i32 %9, 31
  %33 = lshr i32 %6, 31
  %34 = xor i32 %32, %33
  %35 = xor i32 %29, %32
  %36 = add nuw nsw i32 %35, %34
  %37 = icmp eq i32 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  %40 = select i1 %11, i64 %4, i64 %3
  %41 = and i64 %40, 4294967295
  store i64 %41, i64* %2, align 8, !tbaa !870
  %42 = select i1 %11, i32 %9, i32 %6
  store i32 %42, i32* %8, align 4, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_RAXI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !870
  %9 = sub i64 %8, %6
  %10 = icmp eq i64 %9, 0
  %11 = icmp ult i64 %8, %6
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = trunc i64 %9 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %8, %6
  %22 = xor i64 %21, %9
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = zext i1 %10 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i64 %8, 63
  %33 = lshr i64 %6, 63
  %34 = xor i64 %32, %33
  %35 = xor i64 %29, %32
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  %40 = select i1 %10, i64 %4, i64 %6
  %41 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %40) #22
  %42 = select i1 %10, i64 %8, i64 %6
  store i64 %42, i64* %7, align 8, !tbaa !870
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11CMPXCHG_RAXI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !870
  %8 = sub i64 %7, %3
  %9 = icmp eq i64 %8, 0
  %10 = icmp ult i64 %7, %3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = trunc i64 %8 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i64 %7, %3
  %21 = xor i64 %20, %8
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = zext i1 %9 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i64 %8, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i64 %7, 63
  %32 = lshr i64 %3, 63
  %33 = xor i64 %31, %32
  %34 = xor i64 %28, %31
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  %39 = select i1 %9, i64 %4, i64 %3
  store i64 %39, i64* %2, align 8, !tbaa !870
  %40 = select i1 %9, i64 %7, i64 %3
  store i64 %40, i64* %6, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L16DoCMPXCHG8B_MEMqEP6MemoryR5State3MnWImE2MnImE(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0
  %7 = bitcast %union.Flags* %6 to i32*
  %8 = load i32, i32* %7, align 8, !tbaa !877
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %10 = bitcast %union.Flags* %9 to i32*
  %11 = load i32, i32* %10, align 8, !tbaa !877
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %13 = bitcast %union.Flags* %12 to i32*
  %14 = load i32, i32* %13, align 8, !tbaa !877
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0
  %16 = bitcast %union.Flags* %15 to i32*
  %17 = load i32, i32* %16, align 8, !tbaa !877
  %18 = zext i32 %14 to i64
  %19 = shl nuw i64 %18, 32
  %20 = zext i32 %17 to i64
  %21 = or i64 %20, %19
  %22 = zext i32 %8 to i64
  %23 = shl nuw i64 %22, 32
  %24 = zext i32 %11 to i64
  %25 = or i64 %24, %23
  %26 = icmp eq i64 %25, %5
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !868
  %29 = select i1 %26, i64 %21, i64 %5
  %30 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %29) #22
  %31 = lshr i64 %5, 32
  %32 = trunc i64 %31 to i32
  %33 = select i1 %26, i32 %8, i32 %32
  store i32 %33, i32* %7, align 4, !tbaa !877
  %34 = trunc i64 %5 to i32
  %35 = select i1 %26, i32 %11, i32 %34
  store i32 %35, i32* %10, align 4, !tbaa !877
  ret %struct.Memory* %30
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L18DoCMPXCHG16B_MEMdqEP6MemoryR5State3MnWIoE2MnIoE(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = add i64 %3, 8
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %6) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !870
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 3, i32 0, i32 0
  %15 = load i64, i64* %14, align 8, !tbaa !870
  %16 = zext i64 %9 to i128
  %17 = shl nuw i128 %16, 64
  %18 = zext i64 %11 to i128
  %19 = or i128 %17, %18
  %20 = zext i64 %7 to i128
  %21 = shl nuw i128 %20, 64
  %22 = zext i64 %5 to i128
  %23 = or i128 %21, %22
  %24 = icmp eq i128 %19, %23
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !868
  %27 = zext i64 %13 to i128
  %28 = shl nuw i128 %27, 64
  %29 = zext i64 %15 to i128
  %30 = or i128 %28, %29
  %31 = select i1 %24, i128 %30, i128 %23
  %32 = trunc i128 %31 to i64
  %33 = lshr i128 %31, 64
  %34 = trunc i128 %33 to i64
  %35 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %32) #22
  %36 = add i64 %2, 8
  %37 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %35, i64 %36, i64 %34) #22
  %38 = select i1 %24, i64 %9, i64 %7
  store i64 %38, i64* %8, align 8, !tbaa !870
  %39 = select i1 %24, i64 %11, i64 %5
  store i64 %39, i64* %10, align 8, !tbaa !870
  ret %struct.Memory* %37
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWIhE2MnIhE3RnWIhE2RnIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i8* nocapture, i64) #0 {
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i8
  %9 = add i8 %7, %8
  %10 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %9) #22
  store i8 %7, i8* %4, align 1, !tbaa !868
  %11 = icmp ult i8 %9, %7
  %12 = icmp ult i8 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = zext i8 %9 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i8 %7, %8
  %23 = xor i8 %22, %9
  %24 = lshr i8 %23, 4
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i8 %9, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i8 %9, 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i8 %7, 7
  %33 = lshr i8 %8, 7
  %34 = xor i8 %30, %32
  %35 = xor i8 %30, %33
  %36 = add nuw nsw i8 %34, %35
  %37 = icmp eq i8 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWIhE2RnIhES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i8* nocapture, i64) #0 {
  %7 = tail call %struct.Memory* @__remill_barrier_store_load(%struct.Memory* %0) #24
  %8 = trunc i64 %3 to i8
  %9 = trunc i64 %5 to i8
  %10 = add i8 %9, %8
  store i8 %10, i8* %2, align 1, !tbaa !868
  store i8 %8, i8* %4, align 1, !tbaa !868
  %11 = icmp ult i8 %10, %8
  %12 = icmp ult i8 %10, %9
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = zext i8 %10 to i32
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i64 %5, %3
  %23 = trunc i64 %22 to i8
  %24 = xor i8 %23, %10
  %25 = lshr i8 %24, 4
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i8 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i8 %10, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i8 %8, 7
  %34 = lshr i8 %9, 7
  %35 = xor i8 %31, %33
  %36 = xor i8 %31, %34
  %37 = add nuw nsw i8 %35, %36
  %38 = icmp eq i8 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWItE2MnItE3RnWItE2RnItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i16* nocapture, i64) #0 {
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i16
  %9 = add i16 %7, %8
  %10 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %9) #22
  store i16 %7, i16* %4, align 2, !tbaa !869
  %11 = icmp ult i16 %9, %7
  %12 = icmp ult i16 %9, %8
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = and i16 %9, 255
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i16 %7, %8
  %24 = xor i16 %23, %9
  %25 = lshr i16 %24, 4
  %26 = trunc i16 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !864
  %29 = icmp eq i16 %9, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !865
  %32 = lshr i16 %9, 15
  %33 = trunc i16 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !866
  %35 = lshr i16 %7, 15
  %36 = lshr i16 %8, 15
  %37 = xor i16 %32, %35
  %38 = xor i16 %32, %36
  %39 = add nuw nsw i16 %37, %38
  %40 = icmp eq i16 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !867
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWIjE2MnIjE3RnWImE2RnIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64* nocapture, i64) #0 {
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i32
  %9 = add i32 %7, %8
  %10 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %9) #22
  %11 = zext i32 %7 to i64
  store i64 %11, i64* %4, align 8, !tbaa !870
  %12 = icmp ult i32 %9, %7
  %13 = icmp ult i32 %9, %8
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !850
  %17 = and i32 %9, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i32 %7, %8
  %24 = xor i32 %23, %9
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !864
  %29 = icmp eq i32 %9, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !865
  %32 = lshr i32 %9, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !866
  %35 = lshr i32 %7, 31
  %36 = lshr i32 %8, 31
  %37 = xor i32 %32, %35
  %38 = xor i32 %32, %36
  %39 = add nuw nsw i32 %37, %38
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !867
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3MnWImE2MnImE3RnWImE2RnImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64* nocapture, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %8 = add i64 %7, %5
  %9 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %8) #22
  store i64 %7, i64* %4, align 8, !tbaa !870
  %10 = icmp ult i64 %8, %7
  %11 = icmp ult i64 %8, %5
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !850
  %15 = trunc i64 %8 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #23
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !863
  %22 = xor i64 %7, %5
  %23 = xor i64 %22, %8
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !864
  %28 = icmp eq i64 %8, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !865
  %31 = lshr i64 %8, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !866
  %34 = lshr i64 %7, 63
  %35 = lshr i64 %5, 63
  %36 = xor i64 %31, %34
  %37 = xor i64 %31, %35
  %38 = add nuw nsw i64 %36, %37
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !867
  ret %struct.Memory* %9
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWItE2RnItES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i16* nocapture, i64) #0 {
  %7 = tail call %struct.Memory* @__remill_barrier_store_load(%struct.Memory* %0) #24
  %8 = trunc i64 %3 to i16
  %9 = trunc i64 %5 to i16
  %10 = add i16 %9, %8
  store i16 %10, i16* %2, align 2, !tbaa !869
  store i16 %8, i16* %4, align 2, !tbaa !869
  %11 = icmp ult i16 %10, %8
  %12 = icmp ult i16 %10, %9
  %13 = or i1 %11, %12
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !850
  %16 = and i16 %10, 255
  %17 = zext i16 %16 to i32
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #23
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !863
  %23 = xor i64 %5, %3
  %24 = trunc i64 %23 to i16
  %25 = xor i16 %24, %10
  %26 = lshr i16 %25, 4
  %27 = trunc i16 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !864
  %30 = icmp eq i16 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !865
  %33 = lshr i16 %10, 15
  %34 = trunc i16 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !866
  %36 = lshr i16 %8, 15
  %37 = lshr i16 %9, 15
  %38 = xor i16 %33, %36
  %39 = xor i16 %33, %37
  %40 = add nuw nsw i16 %38, %39
  %41 = icmp eq i16 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWImE2RnIjES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64* nocapture, i64) #0 {
  %7 = tail call %struct.Memory* @__remill_barrier_store_load(%struct.Memory* %0) #24
  %8 = trunc i64 %3 to i32
  %9 = trunc i64 %5 to i32
  %10 = add i32 %9, %8
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %2, align 8, !tbaa !870
  %12 = and i64 %3, 4294967295
  store i64 %12, i64* %4, align 8, !tbaa !870
  %13 = icmp ult i32 %10, %8
  %14 = icmp ult i32 %10, %9
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !850
  %18 = and i32 %10, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #23
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !863
  %24 = xor i64 %5, %3
  %25 = trunc i64 %24 to i32
  %26 = xor i32 %25, %10
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !864
  %31 = icmp eq i32 %10, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !865
  %34 = lshr i32 %10, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !866
  %37 = lshr i32 %8, 31
  %38 = lshr i32 %9, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4XADDI3RnWImE2RnImES2_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64* nocapture, i64) #0 {
  %7 = tail call %struct.Memory* @__remill_barrier_store_load(%struct.Memory* %0) #24
  %8 = add i64 %5, %3
  store i64 %8, i64* %2, align 8, !tbaa !870
  store i64 %3, i64* %4, align 8, !tbaa !870
  %9 = icmp ult i64 %8, %3
  %10 = icmp ult i64 %8, %5
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !850
  %14 = trunc i64 %8 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #23
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !863
  %21 = xor i64 %5, %3
  %22 = xor i64 %21, %8
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !864
  %27 = icmp eq i64 %8, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !865
  %30 = lshr i64 %8, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !866
  %33 = lshr i64 %3, 63
  %34 = lshr i64 %5, 63
  %35 = xor i64 %30, %33
  %36 = xor i64 %30, %34
  %37 = add nuw nsw i64 %35, %36
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !867
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %14 [
    i5 0, label %50
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i8 %6, 7
  %12 = and i8 %6, 1
  %13 = lshr i8 %6, 1
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i8 %8, 8
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %14
  %17 = add nsw i8 %8, -1
  %18 = zext i8 %6 to i64
  %19 = zext i8 %17 to i64
  %20 = lshr i64 %18, %19
  %21 = trunc i64 %20 to i8
  %22 = icmp ne i8 0, 0
  %23 = zext i1 %22 to i8
  %24 = and i8 %21, 1
  %25 = lshr i64 %20, 1
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 127
  br label %31

; <label>:28:                                     ; preds = %14
  %29 = icmp ne i8 0, 0
  %30 = zext i1 %29 to i8
  br label %31

; <label>:31:                                     ; preds = %28, %16, %10
  %32 = phi i8 [ 0, %16 ], [ 0, %28 ], [ 0, %10 ]
  %33 = phi i8 [ %27, %16 ], [ 0, %28 ], [ %13, %10 ]
  %34 = phi i8 [ %23, %16 ], [ %30, %28 ], [ %11, %10 ]
  %35 = phi i8 [ %24, %16 ], [ %30, %28 ], [ %12, %10 ]
  %36 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %33) #22
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %35, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = zext i8 %33 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %38, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %33, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %48, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %49, align 1, !tbaa !868
  br label %50

; <label>:50:                                     ; preds = %31, %5
  %51 = phi %struct.Memory* [ %36, %31 ], [ %0, %5 ]
  ret %struct.Memory* %51
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %51
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i8 %6, 7
  %12 = and i8 %6, 1
  %13 = lshr i64 %3, 1
  %14 = trunc i64 %13 to i8
  %15 = and i8 %14, 127
  br label %33

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %8, 8
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i8 %8, -1
  %20 = and i64 %3, 255
  %21 = zext i8 %19 to i64
  %22 = lshr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 127
  br label %33

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  br label %33

; <label>:33:                                     ; preds = %30, %18, %10
  %34 = phi i8 [ 0, %18 ], [ 0, %30 ], [ 0, %10 ]
  %35 = phi i8 [ %29, %18 ], [ 0, %30 ], [ %15, %10 ]
  %36 = phi i8 [ %25, %18 ], [ %32, %30 ], [ %11, %10 ]
  %37 = phi i8 [ %26, %18 ], [ %32, %30 ], [ %12, %10 ]
  store i8 %35, i8* %2, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %50, align 1, !tbaa !868
  br label %51

; <label>:51:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %53
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i16 %6, 15
  %12 = trunc i16 %11 to i8
  %13 = trunc i16 %6 to i8
  %14 = and i8 %13, 1
  %15 = lshr i16 %6, 1
  br label %33

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %8, 16
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %8, -1
  %20 = zext i16 %6 to i64
  %21 = zext i16 %19 to i64
  %22 = lshr i64 %20, %21
  %23 = icmp ne i8 0, 0
  %24 = zext i1 %23 to i8
  %25 = trunc i64 %22 to i8
  %26 = and i8 %25, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i16
  %29 = and i16 %28, 32767
  br label %33

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  br label %33

; <label>:33:                                     ; preds = %30, %18, %10
  %34 = phi i8 [ 0, %18 ], [ 0, %30 ], [ 0, %10 ]
  %35 = phi i16 [ %29, %18 ], [ 0, %30 ], [ %15, %10 ]
  %36 = phi i8 [ %24, %18 ], [ %32, %30 ], [ %12, %10 ]
  %37 = phi i8 [ %26, %18 ], [ %32, %30 ], [ %14, %10 ]
  %38 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %35) #22
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %41 = and i16 %35, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #23
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  store i8 %46, i8* %40, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %47, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = icmp eq i16 %35, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %51, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %52, align 1, !tbaa !868
  br label %53

; <label>:53:                                     ; preds = %33, %5
  %54 = phi %struct.Memory* [ %38, %33 ], [ %0, %5 ]
  ret %struct.Memory* %54
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i5
  switch i5 %7, label %13 [
    i5 0, label %45
    i5 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = lshr i32 %6, 31
  %10 = trunc i32 %9 to i8
  %11 = trunc i32 %6 to i8
  %12 = lshr i32 %6, 1
  br label %25

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = zext i32 %6 to i64
  %17 = and i64 %15, 4294967295
  %18 = lshr i64 %16, %17
  %19 = icmp ne i8 0, 0
  %20 = zext i1 %19 to i8
  %21 = trunc i64 %18 to i8
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 2147483647
  br label %25

; <label>:25:                                     ; preds = %13, %8
  %26 = phi i8 [ 0, %13 ], [ 0, %8 ]
  %27 = phi i32 [ %24, %13 ], [ %12, %8 ]
  %28 = phi i8 [ %20, %13 ], [ %10, %8 ]
  %29 = phi i8 [ %21, %13 ], [ %11, %8 ]
  %30 = and i8 %29, 1
  %31 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %27) #22
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %30, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %34 = and i32 %27, 255
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #23
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %33, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i32 %27, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %44, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %25, %5
  %46 = phi %struct.Memory* [ %31, %25 ], [ %0, %5 ]
  ret %struct.Memory* %46
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i6
  switch i6 %7, label %11 [
    i6 0, label %39
    i6 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = lshr i64 %6, 63
  %10 = trunc i64 %9 to i8
  br label %17

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 63
  %13 = add nsw i64 %12, -1
  %14 = lshr i64 %6, %13
  %15 = icmp ne i8 0, 0
  %16 = zext i1 %15 to i8
  br label %17

; <label>:17:                                     ; preds = %11, %8
  %18 = phi i8 [ 0, %11 ], [ 0, %8 ]
  %19 = phi i64 [ %14, %11 ], [ %6, %8 ]
  %20 = phi i8 [ %16, %11 ], [ %10, %8 ]
  %21 = trunc i64 %19 to i8
  %22 = and i8 %21, 1
  %23 = lshr i64 %19, 1
  %24 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %23) #22
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %22, i8* %25, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #23
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %26, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i64 %23, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %38, align 1, !tbaa !868
  br label %39

; <label>:39:                                     ; preds = %17, %5
  %40 = phi %struct.Memory* [ %24, %17 ], [ %0, %5 ]
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %18 [
    i5 0, label %54
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = trunc i64 %3 to i8
  %14 = and i8 %13, 1
  %15 = lshr i64 %3, 1
  %16 = trunc i64 %15 to i16
  %17 = and i16 %16, 32767
  br label %35

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i16 %7, 16
  br i1 %19, label %20, label %32

; <label>:20:                                     ; preds = %18
  %21 = add nsw i16 %7, -1
  %22 = and i64 %3, 65535
  %23 = zext i16 %21 to i64
  %24 = lshr i64 %22, %23
  %25 = icmp ne i8 0, 0
  %26 = zext i1 %25 to i8
  %27 = trunc i64 %24 to i8
  %28 = and i8 %27, 1
  %29 = lshr i64 %24, 1
  %30 = trunc i64 %29 to i16
  %31 = and i16 %30, 32767
  br label %35

; <label>:32:                                     ; preds = %18
  %33 = icmp ne i8 0, 0
  %34 = zext i1 %33 to i8
  br label %35

; <label>:35:                                     ; preds = %32, %20, %9
  %36 = phi i8 [ 0, %20 ], [ 0, %32 ], [ 0, %9 ]
  %37 = phi i16 [ %31, %20 ], [ 0, %32 ], [ %17, %9 ]
  %38 = phi i8 [ %26, %20 ], [ %34, %32 ], [ %12, %9 ]
  %39 = phi i8 [ %28, %20 ], [ %34, %32 ], [ %14, %9 ]
  store i16 %37, i16* %2, align 2, !tbaa !869
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %42 = and i16 %37, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #23
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %41, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %36, i8* %48, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %50 = icmp eq i16 %37, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %52, align 1, !tbaa !868
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %53, align 1, !tbaa !868
  br label %54

; <label>:54:                                     ; preds = %35, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %11 [
    i5 0, label %42
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = lshr i32 %8, 31
  %10 = trunc i32 %9 to i8
  br label %19

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 31
  %13 = add nuw nsw i64 %12, 4294967295
  %14 = and i64 %3, 4294967295
  %15 = and i64 %13, 4294967295
  %16 = lshr i64 %14, %15
  %17 = icmp ne i8 0, 0
  %18 = zext i1 %17 to i8
  br label %19

; <label>:19:                                     ; preds = %11, %7
  %20 = phi i8 [ 0, %11 ], [ 0, %7 ]
  %21 = phi i64 [ %16, %11 ], [ %3, %7 ]
  %22 = phi i8 [ %18, %11 ], [ %10, %7 ]
  %23 = trunc i64 %21 to i8
  %24 = and i8 %23, 1
  %25 = lshr i64 %21, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = zext i32 %27 to i64
  store i64 %28, i64* %2, align 8, !tbaa !870
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %24, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #23
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %27, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %41, align 1, !tbaa !868
  br label %42

; <label>:42:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %10 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  br label %16

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 63
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %3, %12
  %14 = icmp ne i8 0, 0
  %15 = zext i1 %14 to i8
  br label %16

; <label>:16:                                     ; preds = %10, %7
  %17 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %18 = phi i64 [ %13, %10 ], [ %3, %7 ]
  %19 = phi i8 [ %15, %10 ], [ %9, %7 ]
  %20 = trunc i64 %18 to i8
  %21 = and i8 %20, 1
  %22 = lshr i64 %18, 1
  store i64 %22, i64* %2, align 8, !tbaa !870
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %25 = trunc i64 %22 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #23
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %24, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %31, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = icmp eq i64 %22, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %32, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %36, align 1, !tbaa !868
  br label %37

; <label>:37:                                     ; preds = %16, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %14 [
    i5 0, label %50
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i8 %6, 7
  %12 = and i8 %6, 1
  %13 = lshr i8 %6, 1
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i8 %8, 8
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %14
  %17 = add nsw i8 %8, -1
  %18 = zext i8 %6 to i64
  %19 = zext i8 %17 to i64
  %20 = lshr i64 %18, %19
  %21 = trunc i64 %20 to i8
  %22 = icmp ne i8 0, 0
  %23 = zext i1 %22 to i8
  %24 = and i8 %21, 1
  %25 = lshr i64 %20, 1
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 127
  br label %31

; <label>:28:                                     ; preds = %14
  %29 = icmp ne i8 0, 0
  %30 = zext i1 %29 to i8
  br label %31

; <label>:31:                                     ; preds = %28, %16, %10
  %32 = phi i8 [ 0, %16 ], [ 0, %28 ], [ 0, %10 ]
  %33 = phi i8 [ %27, %16 ], [ 0, %28 ], [ %13, %10 ]
  %34 = phi i8 [ %23, %16 ], [ %30, %28 ], [ %11, %10 ]
  %35 = phi i8 [ %24, %16 ], [ %30, %28 ], [ %12, %10 ]
  %36 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %33) #22
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %35, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = zext i8 %33 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %38, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %33, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %48, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %49, align 1, !tbaa !868
  br label %50

; <label>:50:                                     ; preds = %31, %5
  %51 = phi %struct.Memory* [ %36, %31 ], [ %0, %5 ]
  ret %struct.Memory* %51
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %51
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i8 %6, 7
  %12 = and i8 %6, 1
  %13 = lshr i64 %3, 1
  %14 = trunc i64 %13 to i8
  %15 = and i8 %14, 127
  br label %33

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i8 %8, 8
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i8 %8, -1
  %20 = and i64 %3, 255
  %21 = zext i8 %19 to i64
  %22 = lshr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 127
  br label %33

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  br label %33

; <label>:33:                                     ; preds = %30, %18, %10
  %34 = phi i8 [ 0, %18 ], [ 0, %30 ], [ 0, %10 ]
  %35 = phi i8 [ %29, %18 ], [ 0, %30 ], [ %15, %10 ]
  %36 = phi i8 [ %25, %18 ], [ %32, %30 ], [ %11, %10 ]
  %37 = phi i8 [ %26, %18 ], [ %32, %30 ], [ %12, %10 ]
  store i8 %35, i8* %2, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %49, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %50, align 1, !tbaa !868
  br label %51

; <label>:51:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %53
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = lshr i16 %6, 15
  %12 = trunc i16 %11 to i8
  %13 = trunc i16 %6 to i8
  %14 = and i8 %13, 1
  %15 = lshr i16 %6, 1
  br label %33

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %8, 16
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %8, -1
  %20 = zext i16 %6 to i64
  %21 = zext i16 %19 to i64
  %22 = lshr i64 %20, %21
  %23 = icmp ne i8 0, 0
  %24 = zext i1 %23 to i8
  %25 = trunc i64 %22 to i8
  %26 = and i8 %25, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i16
  %29 = and i16 %28, 32767
  br label %33

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  br label %33

; <label>:33:                                     ; preds = %30, %18, %10
  %34 = phi i8 [ 0, %18 ], [ 0, %30 ], [ 0, %10 ]
  %35 = phi i16 [ %29, %18 ], [ 0, %30 ], [ %15, %10 ]
  %36 = phi i8 [ %24, %18 ], [ %32, %30 ], [ %12, %10 ]
  %37 = phi i8 [ %26, %18 ], [ %32, %30 ], [ %14, %10 ]
  %38 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %35) #22
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %41 = and i16 %35, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #23
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  store i8 %46, i8* %40, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %47, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = icmp eq i16 %35, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %51, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %52, align 1, !tbaa !868
  br label %53

; <label>:53:                                     ; preds = %33, %5
  %54 = phi %struct.Memory* [ %38, %33 ], [ %0, %5 ]
  ret %struct.Memory* %54
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i5
  switch i5 %7, label %13 [
    i5 0, label %45
    i5 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = lshr i32 %6, 31
  %10 = trunc i32 %9 to i8
  %11 = trunc i32 %6 to i8
  %12 = lshr i32 %6, 1
  br label %25

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = zext i32 %6 to i64
  %17 = and i64 %15, 4294967295
  %18 = lshr i64 %16, %17
  %19 = icmp ne i8 0, 0
  %20 = zext i1 %19 to i8
  %21 = trunc i64 %18 to i8
  %22 = lshr i64 %18, 1
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 2147483647
  br label %25

; <label>:25:                                     ; preds = %13, %8
  %26 = phi i8 [ 0, %13 ], [ 0, %8 ]
  %27 = phi i32 [ %24, %13 ], [ %12, %8 ]
  %28 = phi i8 [ %20, %13 ], [ %10, %8 ]
  %29 = phi i8 [ %21, %13 ], [ %11, %8 ]
  %30 = and i8 %29, 1
  %31 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %27) #22
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %30, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %34 = and i32 %27, 255
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #23
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %33, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %26, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i32 %27, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %28, i8* %44, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %25, %5
  %46 = phi %struct.Memory* [ %31, %25 ], [ %0, %5 ]
  ret %struct.Memory* %46
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i6
  switch i6 %7, label %11 [
    i6 0, label %39
    i6 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = lshr i64 %6, 63
  %10 = trunc i64 %9 to i8
  br label %17

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 63
  %13 = add nsw i64 %12, -1
  %14 = lshr i64 %6, %13
  %15 = icmp ne i8 0, 0
  %16 = zext i1 %15 to i8
  br label %17

; <label>:17:                                     ; preds = %11, %8
  %18 = phi i8 [ 0, %11 ], [ 0, %8 ]
  %19 = phi i64 [ %14, %11 ], [ %6, %8 ]
  %20 = phi i8 [ %16, %11 ], [ %10, %8 ]
  %21 = trunc i64 %19 to i8
  %22 = and i8 %21, 1
  %23 = lshr i64 %19, 1
  %24 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %23) #22
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %22, i8* %25, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #23
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %26, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %18, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i64 %23, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %20, i8* %38, align 1, !tbaa !868
  br label %39

; <label>:39:                                     ; preds = %17, %5
  %40 = phi %struct.Memory* [ %24, %17 ], [ %0, %5 ]
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %18 [
    i5 0, label %54
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = trunc i64 %3 to i8
  %14 = and i8 %13, 1
  %15 = lshr i64 %3, 1
  %16 = trunc i64 %15 to i16
  %17 = and i16 %16, 32767
  br label %35

; <label>:18:                                     ; preds = %5
  %19 = icmp ult i16 %7, 16
  br i1 %19, label %20, label %32

; <label>:20:                                     ; preds = %18
  %21 = add nsw i16 %7, -1
  %22 = and i64 %3, 65535
  %23 = zext i16 %21 to i64
  %24 = lshr i64 %22, %23
  %25 = icmp ne i8 0, 0
  %26 = zext i1 %25 to i8
  %27 = trunc i64 %24 to i8
  %28 = and i8 %27, 1
  %29 = lshr i64 %24, 1
  %30 = trunc i64 %29 to i16
  %31 = and i16 %30, 32767
  br label %35

; <label>:32:                                     ; preds = %18
  %33 = icmp ne i8 0, 0
  %34 = zext i1 %33 to i8
  br label %35

; <label>:35:                                     ; preds = %32, %20, %9
  %36 = phi i8 [ 0, %20 ], [ 0, %32 ], [ 0, %9 ]
  %37 = phi i16 [ %31, %20 ], [ 0, %32 ], [ %17, %9 ]
  %38 = phi i8 [ %26, %20 ], [ %34, %32 ], [ %12, %9 ]
  %39 = phi i8 [ %28, %20 ], [ %34, %32 ], [ %14, %9 ]
  store i16 %37, i16* %2, align 2, !tbaa !869
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %42 = and i16 %37, 255
  %43 = zext i16 %42 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #23
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %41, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %36, i8* %48, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %50 = icmp eq i16 %37, 0
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %49, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %52, align 1, !tbaa !868
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %53, align 1, !tbaa !868
  br label %54

; <label>:54:                                     ; preds = %35, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %11 [
    i5 0, label %42
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = lshr i32 %8, 31
  %10 = trunc i32 %9 to i8
  br label %19

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 31
  %13 = add nuw nsw i64 %12, 4294967295
  %14 = and i64 %3, 4294967295
  %15 = and i64 %13, 4294967295
  %16 = lshr i64 %14, %15
  %17 = icmp ne i8 0, 0
  %18 = zext i1 %17 to i8
  br label %19

; <label>:19:                                     ; preds = %11, %7
  %20 = phi i8 [ 0, %11 ], [ 0, %7 ]
  %21 = phi i64 [ %16, %11 ], [ %3, %7 ]
  %22 = phi i8 [ %18, %11 ], [ %10, %7 ]
  %23 = trunc i64 %21 to i8
  %24 = and i8 %23, 1
  %25 = lshr i64 %21, 1
  %26 = trunc i64 %25 to i32
  %27 = and i32 %26, 2147483647
  %28 = zext i32 %27 to i64
  store i64 %28, i64* %2, align 8, !tbaa !870
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %24, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #23
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %27, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %41, align 1, !tbaa !868
  br label %42

; <label>:42:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %10 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  br label %16

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 63
  %12 = add nsw i64 %11, -1
  %13 = lshr i64 %3, %12
  %14 = icmp ne i8 0, 0
  %15 = zext i1 %14 to i8
  br label %16

; <label>:16:                                     ; preds = %10, %7
  %17 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %18 = phi i64 [ %13, %10 ], [ %3, %7 ]
  %19 = phi i8 [ %15, %10 ], [ %9, %7 ]
  %20 = trunc i64 %18 to i8
  %21 = and i8 %20, 1
  %22 = lshr i64 %18, 1
  store i64 %22, i64* %2, align 8, !tbaa !870
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %21, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %25 = trunc i64 %22 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #23
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %24, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %17, i8* %31, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = icmp eq i64 %22, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %32, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %19, i8* %36, align 1, !tbaa !868
  br label %37

; <label>:37:                                     ; preds = %16, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %13 [
    i5 0, label %50
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = and i8 %6, 1
  %12 = ashr i8 %6, 1
  br label %30

; <label>:13:                                     ; preds = %5
  %14 = icmp ult i8 %8, 8
  br i1 %14, label %15, label %26

; <label>:15:                                     ; preds = %13
  %16 = add nsw i8 %8, -1
  %17 = sext i8 %6 to i64
  %18 = sext i8 %16 to i64
  %19 = ashr i64 %17, %18
  %20 = trunc i64 %19 to i8
  %21 = icmp ne i8 0, 0
  %22 = zext i1 %21 to i8
  %23 = and i8 %20, 1
  %24 = lshr i64 %19, 1
  %25 = trunc i64 %24 to i8
  br label %30

; <label>:26:                                     ; preds = %13
  %27 = icmp ne i8 0, 0
  %28 = zext i1 %27 to i8
  %29 = ashr i8 %6, 7
  br label %30

; <label>:30:                                     ; preds = %26, %15, %10
  %31 = phi i8 [ 0, %26 ], [ 0, %15 ], [ 0, %10 ]
  %32 = phi i8 [ %29, %26 ], [ %25, %15 ], [ %12, %10 ]
  %33 = phi i8 [ %28, %26 ], [ %22, %15 ], [ 0, %10 ]
  %34 = phi i8 [ %28, %26 ], [ %23, %15 ], [ %11, %10 ]
  %35 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %32) #22
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %34, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = zext i8 %32 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %37, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %31, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %45 = icmp eq i8 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %48 = lshr i8 %32, 7
  store i8 %48, i8* %47, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %33, i8* %49, align 1, !tbaa !868
  br label %50

; <label>:50:                                     ; preds = %30, %5
  %51 = phi %struct.Memory* [ %35, %30 ], [ %0, %5 ]
  ret %struct.Memory* %51
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %52
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = and i8 %6, 1
  %12 = shl i64 %3, 56
  %13 = ashr i64 %12, 57
  %14 = trunc i64 %13 to i8
  br label %33

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %8, 8
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %8, -1
  %19 = shl i64 %3, 56
  %20 = ashr exact i64 %19, 56
  %21 = sext i8 %18 to i64
  %22 = ashr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  br label %33

; <label>:29:                                     ; preds = %15
  %30 = icmp ne i8 0, 0
  %31 = zext i1 %30 to i8
  %32 = ashr i8 %6, 7
  br label %33

; <label>:33:                                     ; preds = %29, %17, %10
  %34 = phi i8 [ 0, %29 ], [ 0, %17 ], [ 0, %10 ]
  %35 = phi i8 [ %32, %29 ], [ %28, %17 ], [ %14, %10 ]
  %36 = phi i8 [ %31, %29 ], [ %25, %17 ], [ 0, %10 ]
  %37 = phi i8 [ %31, %29 ], [ %26, %17 ], [ %11, %10 ]
  store i8 %35, i8* %2, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = lshr i8 %35, 7
  store i8 %50, i8* %49, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %51, align 1, !tbaa !868
  br label %52

; <label>:52:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %14 [
    i5 0, label %53
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = trunc i16 %6 to i8
  %12 = and i8 %11, 1
  %13 = ashr i16 %6, 1
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i16 %8, 16
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %14
  %17 = add nsw i16 %8, -1
  %18 = sext i16 %6 to i64
  %19 = sext i16 %17 to i64
  %20 = ashr i64 %18, %19
  %21 = icmp ne i8 0, 0
  %22 = zext i1 %21 to i8
  %23 = trunc i64 %20 to i8
  %24 = and i8 %23, 1
  %25 = lshr i64 %20, 1
  %26 = trunc i64 %25 to i16
  br label %31

; <label>:27:                                     ; preds = %14
  %28 = icmp ne i8 0, 0
  %29 = zext i1 %28 to i8
  %30 = ashr i16 %6, 15
  br label %31

; <label>:31:                                     ; preds = %27, %16, %10
  %32 = phi i8 [ 0, %27 ], [ 0, %16 ], [ 0, %10 ]
  %33 = phi i16 [ %30, %27 ], [ %26, %16 ], [ %13, %10 ]
  %34 = phi i8 [ %29, %27 ], [ %22, %16 ], [ 0, %10 ]
  %35 = phi i8 [ %29, %27 ], [ %24, %16 ], [ %12, %10 ]
  %36 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %33) #22
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %35, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = and i16 %33, 255
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %38, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i16 %33, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = lshr i16 %33, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %49, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %52, align 1, !tbaa !868
  br label %53

; <label>:53:                                     ; preds = %31, %5
  %54 = phi %struct.Memory* [ %36, %31 ], [ %0, %5 ]
  ret %struct.Memory* %54
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i5
  switch i5 %7, label %11 [
    i5 0, label %43
    i5 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = trunc i32 %6 to i8
  %10 = ashr i32 %6, 1
  br label %21

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 31
  %13 = add nsw i64 %12, -1
  %14 = sext i32 %6 to i64
  %15 = ashr i64 %14, %13
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i64 %15 to i8
  %19 = lshr i64 %15, 1
  %20 = trunc i64 %19 to i32
  br label %21

; <label>:21:                                     ; preds = %11, %8
  %22 = phi i8 [ 0, %11 ], [ 0, %8 ]
  %23 = phi i32 [ %20, %11 ], [ %10, %8 ]
  %24 = phi i8 [ %17, %11 ], [ 0, %8 ]
  %25 = phi i8 [ %18, %11 ], [ %9, %8 ]
  %26 = and i8 %25, 1
  %27 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %23) #22
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %26, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %23, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %23, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i32 %23, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %24, i8* %42, align 1, !tbaa !868
  br label %43

; <label>:43:                                     ; preds = %21, %5
  %44 = phi %struct.Memory* [ %27, %21 ], [ %0, %5 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i6
  switch i6 %7, label %9 [
    i6 0, label %39
    i6 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  br label %15

; <label>:9:                                      ; preds = %5
  %10 = and i64 %4, 63
  %11 = add nsw i64 %10, -1
  %12 = ashr i64 %6, %11
  %13 = icmp ne i8 0, 0
  %14 = zext i1 %13 to i8
  br label %15

; <label>:15:                                     ; preds = %9, %8
  %16 = phi i8 [ 0, %8 ], [ 0, %9 ]
  %17 = phi i64 [ %6, %8 ], [ %12, %9 ]
  %18 = phi i8 [ 0, %8 ], [ %14, %9 ]
  %19 = trunc i64 %17 to i8
  %20 = and i8 %19, 1
  %21 = ashr i64 %17, 1
  %22 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %21) #22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #23
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %24, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %31, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = icmp eq i64 %21, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %32, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %36 = lshr i64 %21, 63
  %37 = trunc i64 %36 to i8
  store i8 %37, i8* %35, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %38, align 1, !tbaa !868
  br label %39

; <label>:39:                                     ; preds = %15, %5
  %40 = phi %struct.Memory* [ %22, %15 ], [ %0, %5 ]
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %55
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = trunc i64 %3 to i8
  %12 = and i8 %11, 1
  %13 = shl i64 %3, 48
  %14 = ashr i64 %13, 49
  %15 = trunc i64 %14 to i16
  br label %34

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %8, 16
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %8, -1
  %20 = shl i64 %3, 48
  %21 = ashr exact i64 %20, 48
  %22 = sext i16 %19 to i64
  %23 = ashr i64 %21, %22
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i64 %23 to i8
  %27 = and i8 %26, 1
  %28 = lshr i64 %23, 1
  %29 = trunc i64 %28 to i16
  br label %34

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  %33 = ashr i16 %6, 15
  br label %34

; <label>:34:                                     ; preds = %30, %18, %10
  %35 = phi i8 [ 0, %30 ], [ 0, %18 ], [ 0, %10 ]
  %36 = phi i16 [ %33, %30 ], [ %29, %18 ], [ %15, %10 ]
  %37 = phi i8 [ %32, %30 ], [ %25, %18 ], [ 0, %10 ]
  %38 = phi i8 [ %32, %30 ], [ %27, %18 ], [ %12, %10 ]
  store i16 %36, i16* %2, align 2, !tbaa !869
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %41 = and i16 %36, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #23
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  store i8 %46, i8* %40, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %47, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = icmp eq i16 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %52 = lshr i16 %36, 15
  %53 = trunc i16 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !868
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %54, align 1, !tbaa !868
  br label %55

; <label>:55:                                     ; preds = %34, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %10 [
    i5 0, label %43
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 32
  %9 = ashr i64 %8, 33
  br label %19

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 31
  %12 = add nsw i64 %11, -1
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = ashr i64 %14, %12
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  %18 = lshr i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %10, %7
  %20 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %21 = phi i64 [ %18, %10 ], [ %9, %7 ]
  %22 = phi i8 [ %17, %10 ], [ 0, %7 ]
  %23 = phi i64 [ %15, %10 ], [ %3, %7 ]
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = trunc i64 %21 to i32
  %27 = and i64 %21, 4294967295
  store i64 %27, i64* %2, align 8, !tbaa !870
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %25, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %26, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %26, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i32 %26, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %42, align 1, !tbaa !868
  br label %43

; <label>:43:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %8 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  br label %14

; <label>:8:                                      ; preds = %5
  %9 = and i64 %4, 63
  %10 = add nsw i64 %9, -1
  %11 = ashr i64 %3, %10
  %12 = icmp ne i8 0, 0
  %13 = zext i1 %12 to i8
  br label %14

; <label>:14:                                     ; preds = %8, %7
  %15 = phi i8 [ 0, %7 ], [ 0, %8 ]
  %16 = phi i64 [ %3, %7 ], [ %11, %8 ]
  %17 = phi i8 [ 0, %7 ], [ %13, %8 ]
  %18 = trunc i64 %16 to i8
  %19 = and i8 %18, 1
  %20 = ashr i64 %16, 1
  store i64 %20, i64* %2, align 8, !tbaa !870
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %21, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %20 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %20, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = lshr i64 %20, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %33, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %36, align 1, !tbaa !868
  br label %37

; <label>:37:                                     ; preds = %14, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %13 [
    i5 0, label %50
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = and i8 %6, 1
  %12 = ashr i8 %6, 1
  br label %30

; <label>:13:                                     ; preds = %5
  %14 = icmp ult i8 %8, 8
  br i1 %14, label %15, label %26

; <label>:15:                                     ; preds = %13
  %16 = add nsw i8 %8, -1
  %17 = sext i8 %6 to i64
  %18 = sext i8 %16 to i64
  %19 = ashr i64 %17, %18
  %20 = trunc i64 %19 to i8
  %21 = icmp ne i8 0, 0
  %22 = zext i1 %21 to i8
  %23 = and i8 %20, 1
  %24 = lshr i64 %19, 1
  %25 = trunc i64 %24 to i8
  br label %30

; <label>:26:                                     ; preds = %13
  %27 = icmp ne i8 0, 0
  %28 = zext i1 %27 to i8
  %29 = ashr i8 %6, 7
  br label %30

; <label>:30:                                     ; preds = %26, %15, %10
  %31 = phi i8 [ 0, %26 ], [ 0, %15 ], [ 0, %10 ]
  %32 = phi i8 [ %29, %26 ], [ %25, %15 ], [ %12, %10 ]
  %33 = phi i8 [ %28, %26 ], [ %22, %15 ], [ 0, %10 ]
  %34 = phi i8 [ %28, %26 ], [ %23, %15 ], [ %11, %10 ]
  %35 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %32) #22
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %34, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = zext i8 %32 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %37, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %31, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %45 = icmp eq i8 %32, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %48 = lshr i8 %32, 7
  store i8 %48, i8* %47, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %33, i8* %49, align 1, !tbaa !868
  br label %50

; <label>:50:                                     ; preds = %30, %5
  %51 = phi %struct.Memory* [ %35, %30 ], [ %0, %5 ]
  ret %struct.Memory* %51
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i8
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %52
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = and i8 %6, 1
  %12 = shl i64 %3, 56
  %13 = ashr i64 %12, 57
  %14 = trunc i64 %13 to i8
  br label %33

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %8, 8
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %8, -1
  %19 = shl i64 %3, 56
  %20 = ashr exact i64 %19, 56
  %21 = sext i8 %18 to i64
  %22 = ashr i64 %20, %21
  %23 = trunc i64 %22 to i8
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = and i8 %23, 1
  %27 = lshr i64 %22, 1
  %28 = trunc i64 %27 to i8
  br label %33

; <label>:29:                                     ; preds = %15
  %30 = icmp ne i8 0, 0
  %31 = zext i1 %30 to i8
  %32 = ashr i8 %6, 7
  br label %33

; <label>:33:                                     ; preds = %29, %17, %10
  %34 = phi i8 [ 0, %29 ], [ 0, %17 ], [ 0, %10 ]
  %35 = phi i8 [ %32, %29 ], [ %28, %17 ], [ %14, %10 ]
  %36 = phi i8 [ %31, %29 ], [ %25, %17 ], [ 0, %10 ]
  %37 = phi i8 [ %31, %29 ], [ %26, %17 ], [ %11, %10 ]
  store i8 %35, i8* %2, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %40 = zext i8 %35 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %39, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %34, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %35, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = lshr i8 %35, 7
  store i8 %50, i8* %49, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %36, i8* %51, align 1, !tbaa !868
  br label %52

; <label>:52:                                     ; preds = %33, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %14 [
    i5 0, label %53
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = trunc i16 %6 to i8
  %12 = and i8 %11, 1
  %13 = ashr i16 %6, 1
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = icmp ult i16 %8, 16
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %14
  %17 = add nsw i16 %8, -1
  %18 = sext i16 %6 to i64
  %19 = sext i16 %17 to i64
  %20 = ashr i64 %18, %19
  %21 = icmp ne i8 0, 0
  %22 = zext i1 %21 to i8
  %23 = trunc i64 %20 to i8
  %24 = and i8 %23, 1
  %25 = lshr i64 %20, 1
  %26 = trunc i64 %25 to i16
  br label %31

; <label>:27:                                     ; preds = %14
  %28 = icmp ne i8 0, 0
  %29 = zext i1 %28 to i8
  %30 = ashr i16 %6, 15
  br label %31

; <label>:31:                                     ; preds = %27, %16, %10
  %32 = phi i8 [ 0, %27 ], [ 0, %16 ], [ 0, %10 ]
  %33 = phi i16 [ %30, %27 ], [ %26, %16 ], [ %13, %10 ]
  %34 = phi i8 [ %29, %27 ], [ %22, %16 ], [ 0, %10 ]
  %35 = phi i8 [ %29, %27 ], [ %24, %16 ], [ %12, %10 ]
  %36 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %33) #22
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %35, i8* %37, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = and i16 %33, 255
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %38, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %32, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i16 %33, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = lshr i16 %33, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %49, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %34, i8* %52, align 1, !tbaa !868
  br label %53

; <label>:53:                                     ; preds = %31, %5
  %54 = phi %struct.Memory* [ %36, %31 ], [ %0, %5 ]
  ret %struct.Memory* %54
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i5
  switch i5 %7, label %11 [
    i5 0, label %43
    i5 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = trunc i32 %6 to i8
  %10 = ashr i32 %6, 1
  br label %21

; <label>:11:                                     ; preds = %5
  %12 = and i64 %4, 31
  %13 = add nsw i64 %12, -1
  %14 = sext i32 %6 to i64
  %15 = ashr i64 %14, %13
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i64 %15 to i8
  %19 = lshr i64 %15, 1
  %20 = trunc i64 %19 to i32
  br label %21

; <label>:21:                                     ; preds = %11, %8
  %22 = phi i8 [ 0, %11 ], [ 0, %8 ]
  %23 = phi i32 [ %20, %11 ], [ %10, %8 ]
  %24 = phi i8 [ %17, %11 ], [ 0, %8 ]
  %25 = phi i8 [ %18, %11 ], [ %9, %8 ]
  %26 = and i8 %25, 1
  %27 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %23) #22
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %26, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %23, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %23, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i32 %23, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %24, i8* %42, align 1, !tbaa !868
  br label %43

; <label>:43:                                     ; preds = %21, %5
  %44 = phi %struct.Memory* [ %27, %21 ], [ %0, %5 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i6
  switch i6 %7, label %9 [
    i6 0, label %39
    i6 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  br label %15

; <label>:9:                                      ; preds = %5
  %10 = and i64 %4, 63
  %11 = add nsw i64 %10, -1
  %12 = ashr i64 %6, %11
  %13 = icmp ne i8 0, 0
  %14 = zext i1 %13 to i8
  br label %15

; <label>:15:                                     ; preds = %9, %8
  %16 = phi i8 [ 0, %8 ], [ 0, %9 ]
  %17 = phi i64 [ %6, %8 ], [ %12, %9 ]
  %18 = phi i8 [ 0, %8 ], [ %14, %9 ]
  %19 = trunc i64 %17 to i8
  %20 = and i8 %19, 1
  %21 = ashr i64 %17, 1
  %22 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %21) #22
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %20, i8* %23, align 1, !tbaa !868
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %25 = trunc i64 %21 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #23
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %24, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %16, i8* %31, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %33 = icmp eq i64 %21, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %32, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %36 = lshr i64 %21, 63
  %37 = trunc i64 %36 to i8
  store i8 %37, i8* %35, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %18, i8* %38, align 1, !tbaa !868
  br label %39

; <label>:39:                                     ; preds = %15, %5
  %40 = phi %struct.Memory* [ %22, %15 ], [ %0, %5 ]
  ret %struct.Memory* %40
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %3 to i16
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %16 [
    i5 0, label %55
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = trunc i64 %3 to i8
  %12 = and i8 %11, 1
  %13 = shl i64 %3, 48
  %14 = ashr i64 %13, 49
  %15 = trunc i64 %14 to i16
  br label %34

; <label>:16:                                     ; preds = %5
  %17 = icmp ult i16 %8, 16
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %16
  %19 = add nsw i16 %8, -1
  %20 = shl i64 %3, 48
  %21 = ashr exact i64 %20, 48
  %22 = sext i16 %19 to i64
  %23 = ashr i64 %21, %22
  %24 = icmp ne i8 0, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i64 %23 to i8
  %27 = and i8 %26, 1
  %28 = lshr i64 %23, 1
  %29 = trunc i64 %28 to i16
  br label %34

; <label>:30:                                     ; preds = %16
  %31 = icmp ne i8 0, 0
  %32 = zext i1 %31 to i8
  %33 = ashr i16 %6, 15
  br label %34

; <label>:34:                                     ; preds = %30, %18, %10
  %35 = phi i8 [ 0, %30 ], [ 0, %18 ], [ 0, %10 ]
  %36 = phi i16 [ %33, %30 ], [ %29, %18 ], [ %15, %10 ]
  %37 = phi i8 [ %32, %30 ], [ %25, %18 ], [ 0, %10 ]
  %38 = phi i8 [ %32, %30 ], [ %27, %18 ], [ %12, %10 ]
  store i16 %36, i16* %2, align 2, !tbaa !869
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %41 = and i16 %36, 255
  %42 = zext i16 %41 to i32
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #23
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  store i8 %46, i8* %40, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %35, i8* %47, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %49 = icmp eq i16 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %48, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %52 = lshr i16 %36, 15
  %53 = trunc i16 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !868
  %54 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %54, align 1, !tbaa !868
  br label %55

; <label>:55:                                     ; preds = %34, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %10 [
    i5 0, label %43
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 32
  %9 = ashr i64 %8, 33
  br label %19

; <label>:10:                                     ; preds = %5
  %11 = and i64 %4, 31
  %12 = add nsw i64 %11, -1
  %13 = shl i64 %3, 32
  %14 = ashr exact i64 %13, 32
  %15 = ashr i64 %14, %12
  %16 = icmp ne i8 0, 0
  %17 = zext i1 %16 to i8
  %18 = lshr i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %10, %7
  %20 = phi i8 [ 0, %10 ], [ 0, %7 ]
  %21 = phi i64 [ %18, %10 ], [ %9, %7 ]
  %22 = phi i8 [ %17, %10 ], [ 0, %7 ]
  %23 = phi i64 [ %15, %10 ], [ %3, %7 ]
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = trunc i64 %21 to i32
  %27 = and i64 %21, 4294967295
  store i64 %27, i64* %2, align 8, !tbaa !870
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %25, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %26, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %20, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %26, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = lshr i32 %26, 31
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %22, i8* %42, align 1, !tbaa !868
  br label %43

; <label>:43:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %8 [
    i6 0, label %37
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  br label %14

; <label>:8:                                      ; preds = %5
  %9 = and i64 %4, 63
  %10 = add nsw i64 %9, -1
  %11 = ashr i64 %3, %10
  %12 = icmp ne i8 0, 0
  %13 = zext i1 %12 to i8
  br label %14

; <label>:14:                                     ; preds = %8, %7
  %15 = phi i8 [ 0, %7 ], [ 0, %8 ]
  %16 = phi i64 [ %3, %7 ], [ %11, %8 ]
  %17 = phi i8 [ 0, %7 ], [ %13, %8 ]
  %18 = trunc i64 %16 to i8
  %19 = and i8 %18, 1
  %20 = ashr i64 %16, 1
  store i64 %20, i64* %2, align 8, !tbaa !870
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %19, i8* %21, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %20 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %15, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %20, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = lshr i64 %20, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %33, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %17, i8* %36, align 1, !tbaa !868
  br label %37

; <label>:37:                                     ; preds = %14, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIhE2MnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %47
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = shl i8 %6, 1
  %12 = icmp slt i8 %6, 0
  %13 = icmp slt i8 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %8, 8
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %8, -1
  %19 = zext i8 %6 to i64
  %20 = zext i8 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp slt i8 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i8 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %10
  %27 = phi i1 [ %12, %10 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %10 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i8 [ %11, %10 ], [ %25, %17 ], [ 0, %15 ]
  %30 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = zext i1 %27 to i8
  store i8 %32, i8* %31, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %34 = zext i8 %29 to i32
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #23
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %33, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i8 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %44 = lshr i8 %29, 7
  store i8 %44, i8* %43, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %46 = zext i1 %28 to i8
  store i8 %46, i8* %45, align 1, !tbaa !868
  br label %47

; <label>:47:                                     ; preds = %26, %5
  %48 = phi %struct.Memory* [ %30, %26 ], [ %0, %5 ]
  ret %struct.Memory* %48
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWIhE2RnIhE2InIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i8
  %11 = shl i8 %10, 1
  %12 = icmp slt i8 %10, 0
  %13 = icmp slt i8 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %7, 8
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %7, -1
  %19 = and i64 %3, 255
  %20 = zext i8 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp slt i8 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i8 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i8 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = zext i8 %29 to i32
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #23
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %40 = icmp eq i8 %29, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %43 = lshr i8 %29, 7
  store i8 %43, i8* %42, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = zext i1 %28 to i8
  store i8 %45, i8* %44, align 1, !tbaa !868
  br label %46

; <label>:46:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWItE2MnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %49
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = shl i16 %6, 1
  %12 = icmp slt i16 %6, 0
  %13 = icmp slt i16 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %8, 16
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %8, -1
  %19 = zext i16 %6 to i64
  %20 = zext i16 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i16 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %10
  %27 = phi i1 [ %12, %10 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %10 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i16 [ %11, %10 ], [ %25, %17 ], [ 0, %15 ]
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = zext i1 %27 to i8
  store i8 %32, i8* %31, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %34 = and i16 %29, 254
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #23
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %33, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %42 = icmp eq i16 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %41, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %45 = lshr i16 %29, 15
  %46 = trunc i16 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %48 = zext i1 %28 to i8
  store i8 %48, i8* %47, align 1, !tbaa !868
  br label %49

; <label>:49:                                     ; preds = %26, %5
  %50 = phi %struct.Memory* [ %30, %26 ], [ %0, %5 ]
  ret %struct.Memory* %50
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIjE2MnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i5
  switch i5 %7, label %13 [
    i5 0, label %45
    i5 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = shl i32 %6, 1
  %10 = icmp slt i32 %6, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = zext i32 %6 to i64
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %8
  %24 = phi i1 [ %10, %8 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %8 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %8 ], [ %22, %13 ]
  %27 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %26) #22
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #23
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %23, %5
  %46 = phi %struct.Memory* [ %27, %23 ], [ %0, %5 ]
  ret %struct.Memory* %46
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWImE2MnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i6
  switch i6 %7, label %13 [
    i6 0, label %43
    i6 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = shl i64 %6, 1
  %10 = icmp slt i64 %6, 0
  %11 = icmp slt i64 %9, 0
  %12 = xor i1 %10, %11
  br label %20

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 63
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %6, %15
  %17 = icmp slt i64 %16, 0
  %18 = icmp ne i8 0, 0
  %19 = shl i64 %16, 1
  br label %20

; <label>:20:                                     ; preds = %13, %8
  %21 = phi i1 [ %10, %8 ], [ %17, %13 ]
  %22 = phi i1 [ %12, %8 ], [ %18, %13 ]
  %23 = phi i64 [ %9, %8 ], [ %19, %13 ]
  %24 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %23) #22
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %26 = zext i1 %21 to i8
  store i8 %26, i8* %25, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = trunc i64 %23 to i32
  %29 = and i32 %28, 254
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) #23
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %27, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = icmp eq i64 %23, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %39 = lshr i64 %23, 63
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %38, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = zext i1 %22 to i8
  store i8 %42, i8* %41, align 1, !tbaa !868
  br label %43

; <label>:43:                                     ; preds = %20, %5
  %44 = phi %struct.Memory* [ %24, %20 ], [ %0, %5 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWItE2RnItE2InItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %48
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = shl i16 %10, 1
  %12 = icmp slt i16 %10, 0
  %13 = icmp slt i16 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %7, 16
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %7, -1
  %19 = and i64 %3, 65535
  %20 = zext i16 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i16 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i16 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = and i16 %29, 254
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #23
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %32, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i16 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %44 = lshr i16 %29, 15
  %45 = trunc i16 %44 to i8
  store i8 %45, i8* %43, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %47 = zext i1 %28 to i8
  store i8 %47, i8* %46, align 1, !tbaa !868
  br label %48

; <label>:48:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjE2InIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %13 [
    i5 0, label %45
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %8, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = and i64 %3, 4294967295
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %7
  %24 = phi i1 [ %10, %7 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %7 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %7 ], [ %22, %13 ]
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %2, align 8, !tbaa !870
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #23
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %23, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %12 [
    i6 0, label %41
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 1
  %9 = icmp slt i64 %3, 0
  %10 = icmp slt i64 %8, 0
  %11 = xor i1 %9, %10
  br label %19

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add nsw i64 %13, -1
  %15 = shl i64 %3, %14
  %16 = icmp slt i64 %15, 0
  %17 = icmp ne i8 0, 0
  %18 = shl i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %12, %7
  %20 = phi i1 [ %9, %7 ], [ %16, %12 ]
  %21 = phi i1 [ %11, %7 ], [ %17, %12 ]
  %22 = phi i64 [ %8, %7 ], [ %18, %12 ]
  store i64 %22, i64* %2, align 8, !tbaa !870
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = zext i1 %20 to i8
  store i8 %24, i8* %23, align 1, !tbaa !868
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 254
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #23
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = zext i1 %21 to i8
  store i8 %40, i8* %39, align 1, !tbaa !868
  br label %41

; <label>:41:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIhE2MnIhE2RnIhEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i8
  %8 = and i8 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %47
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = shl i8 %6, 1
  %12 = icmp slt i8 %6, 0
  %13 = icmp slt i8 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %8, 8
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %8, -1
  %19 = zext i8 %6 to i64
  %20 = zext i8 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp slt i8 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i8 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %10
  %27 = phi i1 [ %12, %10 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %10 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i8 [ %11, %10 ], [ %25, %17 ], [ 0, %15 ]
  %30 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = zext i1 %27 to i8
  store i8 %32, i8* %31, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %34 = zext i8 %29 to i32
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #23
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %33, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i8 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %44 = lshr i8 %29, 7
  store i8 %44, i8* %43, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %46 = zext i1 %28 to i8
  store i8 %46, i8* %45, align 1, !tbaa !868
  br label %47

; <label>:47:                                     ; preds = %26, %5
  %48 = phi %struct.Memory* [ %30, %26 ], [ %0, %5 ]
  ret %struct.Memory* %48
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWIhE2RnIhES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i8
  %7 = and i8 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %46
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i8
  %11 = shl i8 %10, 1
  %12 = icmp slt i8 %10, 0
  %13 = icmp slt i8 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i8 %7, 8
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i8 %7, -1
  %19 = and i64 %3, 255
  %20 = zext i8 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i8
  %23 = icmp slt i8 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i8 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i8 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = zext i8 %29 to i32
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #23
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %32, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %40 = icmp eq i8 %29, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %39, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %43 = lshr i8 %29, 7
  store i8 %43, i8* %42, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %45 = zext i1 %28 to i8
  store i8 %45, i8* %44, align 1, !tbaa !868
  br label %46

; <label>:46:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWItE2MnItE2RnItEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i16
  %8 = and i16 %7, 31
  %9 = trunc i64 %4 to i5
  switch i5 %9, label %15 [
    i5 0, label %49
    i5 1, label %10
  ]

; <label>:10:                                     ; preds = %5
  %11 = shl i16 %6, 1
  %12 = icmp slt i16 %6, 0
  %13 = icmp slt i16 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %8, 16
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %8, -1
  %19 = zext i16 %6 to i64
  %20 = zext i16 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i16 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %10
  %27 = phi i1 [ %12, %10 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %10 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i16 [ %11, %10 ], [ %25, %17 ], [ 0, %15 ]
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = zext i1 %27 to i8
  store i8 %32, i8* %31, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %34 = and i16 %29, 254
  %35 = zext i16 %34 to i32
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #23
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %33, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %42 = icmp eq i16 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %41, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %45 = lshr i16 %29, 15
  %46 = trunc i16 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %48 = zext i1 %28 to i8
  store i8 %48, i8* %47, align 1, !tbaa !868
  br label %49

; <label>:49:                                     ; preds = %26, %5
  %50 = phi %struct.Memory* [ %30, %26 ], [ %0, %5 ]
  ret %struct.Memory* %50
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWIjE2MnIjE2RnIjEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i5
  switch i5 %7, label %13 [
    i5 0, label %45
    i5 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = shl i32 %6, 1
  %10 = icmp slt i32 %6, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = zext i32 %6 to i64
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %8
  %24 = phi i1 [ %10, %8 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %8 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %8 ], [ %22, %13 ]
  %27 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %26) #22
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #23
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %23, %5
  %46 = phi %struct.Memory* [ %27, %23 ], [ %0, %5 ]
  ret %struct.Memory* %46
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3MnWImE2MnImE2RnImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64) #0 {
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %7 = trunc i64 %4 to i6
  switch i6 %7, label %13 [
    i6 0, label %43
    i6 1, label %8
  ]

; <label>:8:                                      ; preds = %5
  %9 = shl i64 %6, 1
  %10 = icmp slt i64 %6, 0
  %11 = icmp slt i64 %9, 0
  %12 = xor i1 %10, %11
  br label %20

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 63
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %6, %15
  %17 = icmp slt i64 %16, 0
  %18 = icmp ne i8 0, 0
  %19 = shl i64 %16, 1
  br label %20

; <label>:20:                                     ; preds = %13, %8
  %21 = phi i1 [ %10, %8 ], [ %17, %13 ]
  %22 = phi i1 [ %12, %8 ], [ %18, %13 ]
  %23 = phi i64 [ %9, %8 ], [ %19, %13 ]
  %24 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %23) #22
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %26 = zext i1 %21 to i8
  store i8 %26, i8* %25, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = trunc i64 %23 to i32
  %29 = and i32 %28, 254
  %30 = tail call i32 @llvm.ctpop.i32(i32 %29) #23
  %31 = trunc i32 %30 to i8
  %32 = and i8 %31, 1
  %33 = xor i8 %32, 1
  store i8 %33, i8* %27, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = icmp eq i64 %23, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %35, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %39 = lshr i64 %23, 63
  %40 = trunc i64 %39 to i8
  store i8 %40, i8* %38, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = zext i1 %22 to i8
  store i8 %42, i8* %41, align 1, !tbaa !868
  br label %43

; <label>:43:                                     ; preds = %20, %5
  %44 = phi %struct.Memory* [ %24, %20 ], [ %0, %5 ]
  ret %struct.Memory* %44
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWItE2RnItES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i16
  %7 = and i16 %6, 31
  %8 = trunc i64 %4 to i5
  switch i5 %8, label %15 [
    i5 0, label %48
    i5 1, label %9
  ]

; <label>:9:                                      ; preds = %5
  %10 = trunc i64 %3 to i16
  %11 = shl i16 %10, 1
  %12 = icmp slt i16 %10, 0
  %13 = icmp slt i16 %11, 0
  %14 = xor i1 %12, %13
  br label %26

; <label>:15:                                     ; preds = %5
  %16 = icmp ult i16 %7, 16
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = add nsw i16 %7, -1
  %19 = and i64 %3, 65535
  %20 = zext i16 %18 to i64
  %21 = shl i64 %19, %20
  %22 = trunc i64 %21 to i16
  %23 = icmp slt i16 %22, 0
  %24 = icmp ne i8 0, 0
  %25 = shl i16 %22, 1
  br label %26

; <label>:26:                                     ; preds = %17, %15, %9
  %27 = phi i1 [ %12, %9 ], [ %23, %17 ], [ false, %15 ]
  %28 = phi i1 [ %14, %9 ], [ %24, %17 ], [ true, %15 ]
  %29 = phi i16 [ %11, %9 ], [ %25, %17 ], [ 0, %15 ]
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = zext i1 %27 to i8
  store i8 %31, i8* %30, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %33 = and i16 %29, 254
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.ctpop.i32(i32 %34) #23
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 1
  %38 = xor i8 %37, 1
  store i8 %38, i8* %32, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %41 = icmp eq i16 %29, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %44 = lshr i16 %29, 15
  %45 = trunc i16 %44 to i8
  store i8 %45, i8* %43, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %47 = zext i1 %28 to i8
  store i8 %47, i8* %46, align 1, !tbaa !868
  br label %48

; <label>:48:                                     ; preds = %26, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i5
  switch i5 %6, label %13 [
    i5 0, label %45
    i5 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = trunc i64 %3 to i32
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %8, 0
  %11 = icmp slt i32 %9, 0
  %12 = xor i1 %10, %11
  br label %23

; <label>:13:                                     ; preds = %5
  %14 = and i64 %4, 31
  %15 = add nuw nsw i64 %14, 4294967295
  %16 = and i64 %3, 4294967295
  %17 = and i64 %15, 4294967295
  %18 = shl i64 %16, %17
  %19 = trunc i64 %18 to i32
  %20 = icmp slt i32 %19, 0
  %21 = icmp ne i8 0, 0
  %22 = shl i32 %19, 1
  br label %23

; <label>:23:                                     ; preds = %13, %7
  %24 = phi i1 [ %10, %7 ], [ %20, %13 ]
  %25 = phi i1 [ %12, %7 ], [ %21, %13 ]
  %26 = phi i32 [ %9, %7 ], [ %22, %13 ]
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %2, align 8, !tbaa !870
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %29 = zext i1 %24 to i8
  store i8 %29, i8* %28, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %31 = and i32 %26, 254
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #23
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %30, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %38 = icmp eq i32 %26, 0
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %37, align 1, !tbaa !868
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %41 = lshr i32 %26, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %40, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = zext i1 %25 to i8
  store i8 %44, i8* %43, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %23, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = trunc i64 %4 to i6
  switch i6 %6, label %12 [
    i6 0, label %41
    i6 1, label %7
  ]

; <label>:7:                                      ; preds = %5
  %8 = shl i64 %3, 1
  %9 = icmp slt i64 %3, 0
  %10 = icmp slt i64 %8, 0
  %11 = xor i1 %9, %10
  br label %19

; <label>:12:                                     ; preds = %5
  %13 = and i64 %4, 63
  %14 = add nsw i64 %13, -1
  %15 = shl i64 %3, %14
  %16 = icmp slt i64 %15, 0
  %17 = icmp ne i8 0, 0
  %18 = shl i64 %15, 1
  br label %19

; <label>:19:                                     ; preds = %12, %7
  %20 = phi i1 [ %9, %7 ], [ %16, %12 ]
  %21 = phi i1 [ %11, %7 ], [ %17, %12 ]
  %22 = phi i64 [ %8, %7 ], [ %18, %12 ]
  store i64 %22, i64* %2, align 8, !tbaa !870
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %24 = zext i1 %20 to i8
  store i8 %24, i8* %23, align 1, !tbaa !868
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %26 = trunc i64 %22 to i32
  %27 = and i32 %26, 254
  %28 = tail call i32 @llvm.ctpop.i32(i32 %27) #23
  %29 = trunc i32 %28 to i8
  %30 = and i8 %29, 1
  %31 = xor i8 %30, 1
  store i8 %31, i8* %25, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %34 = icmp eq i64 %22, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %33, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %37 = lshr i64 %22, 63
  %38 = trunc i64 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %40 = zext i1 %21 to i8
  store i8 %40, i8* %39, align 1, !tbaa !868
  br label %41

; <label>:41:                                     ; preds = %19, %5
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIhE2MnIhE2RnIhE2InIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %56, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %56

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i8 8, %9
  %22 = and i64 %4, 255
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = zext i8 %7 to i64
  %26 = zext i8 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %24
  %29 = trunc i64 %28 to i8
  %30 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = add nsw i8 %9, -1
  %33 = zext i8 %32 to i64
  %34 = shl i64 1, %33
  %35 = and i64 %25, %34
  %36 = icmp ne i64 %35, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %31, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = trunc i64 %28 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %38, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %29, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = icmp slt i8 %29, 0
  %51 = lshr i8 %29, 7
  store i8 %51, i8* %49, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i8 %7, 0
  %54 = xor i1 %53, %50
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1, !tbaa !868
  br label %56

; <label>:56:                                     ; preds = %20, %13, %6
  %57 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %57
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWItE2MnItE2RnItE2InItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %57, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %57

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i16 16, %9
  %22 = and i64 %4, 65535
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = zext i16 %7 to i64
  %26 = zext i16 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %24
  %29 = trunc i64 %28 to i16
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = add nsw i16 %9, -1
  %33 = zext i16 %32 to i64
  %34 = shl i64 1, %33
  %35 = and i64 %25, %34
  %36 = icmp ne i64 %35, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %31, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = and i16 %29, 255
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %38, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i16 %29, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = icmp slt i16 %29, 0
  %51 = lshr i16 %29, 15
  %52 = trunc i16 %51 to i8
  store i8 %52, i8* %49, align 1, !tbaa !868
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %54 = icmp slt i16 %7, 0
  %55 = xor i1 %54, %50
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %53, align 1, !tbaa !868
  br label %57

; <label>:57:                                     ; preds = %20, %13, %6
  %58 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %58
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIjE2MnIjE2RnIjE2InIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %47, label %11

; <label>:11:                                     ; preds = %6
  %12 = sub nsw i32 32, %9
  %13 = and i64 %4, 4294967295
  %14 = zext i32 %12 to i64
  %15 = shl i64 %13, %14
  %16 = zext i32 %7 to i64
  %17 = zext i32 %9 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %18, %15
  %20 = trunc i64 %19 to i32
  %21 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %20) #22
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = add nsw i32 %9, -1
  %24 = zext i32 %23 to i64
  %25 = shl i64 1, %24
  %26 = and i64 %16, %25
  %27 = icmp ne i64 %26, 0
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %20, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %20, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = icmp slt i32 %20, 0
  %41 = lshr i32 %20, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %39, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = icmp slt i32 %7, 0
  %45 = xor i1 %44, %40
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %43, align 1, !tbaa !868
  br label %47

; <label>:47:                                     ; preds = %11, %6
  %48 = phi %struct.Memory* [ %21, %11 ], [ %0, %6 ]
  ret %struct.Memory* %48
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWImE2MnImE2RnImE2InImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %8 = and i64 %5, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %41, label %10

; <label>:10:                                     ; preds = %6
  %11 = sub nsw i64 64, %8
  %12 = shl i64 %4, %11
  %13 = lshr i64 %7, %8
  %14 = or i64 %13, %12
  %15 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = add nsw i64 %8, -1
  %18 = shl i64 1, %17
  %19 = and i64 %7, %18
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %16, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %14 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %14, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = icmp slt i64 %14, 0
  %35 = lshr i64 %14, 63
  %36 = trunc i64 %35 to i8
  store i8 %36, i8* %33, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i64 %7, 0
  %39 = xor i1 %38, %34
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  br label %41

; <label>:41:                                     ; preds = %10, %6
  %42 = phi %struct.Memory* [ %15, %10 ], [ %0, %6 ]
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWIhE2RnIhES4_2InIhEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %55, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %55

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i8 8, %9
  %22 = and i64 %4, 255
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 255
  %26 = zext i8 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i8 %9, -1
  %32 = zext i8 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = trunc i64 %28 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i8 %29, 0
  %50 = lshr i8 %29, 7
  store i8 %50, i8* %48, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i8 %7, 0
  %53 = xor i1 %52, %49
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1, !tbaa !868
  br label %55

; <label>:55:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWItE2RnItES4_2InItEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %56, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %56

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i16 16, %9
  %22 = and i64 %4, 65535
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 65535
  %26 = zext i16 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i16 %9, -1
  %32 = zext i16 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = and i16 %29, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i16 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i16 %29, 0
  %50 = lshr i16 %29, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %48, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i16 %7, 0
  %54 = xor i1 %53, %49
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1, !tbaa !868
  br label %56

; <label>:56:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnIjES4_2InIjEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %47, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = sub nsw i32 32, %8
  %13 = and i64 %4, 4294967295
  %14 = zext i32 %12 to i64
  %15 = shl i64 %13, %14
  %16 = and i64 %3, 4294967295
  %17 = zext i32 %8 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %15, %18
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8, !tbaa !870
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = add nsw i32 %8, -1
  %24 = zext i32 %23 to i64
  %25 = shl i64 1, %24
  %26 = and i64 %25, %16
  %27 = icmp ne i64 %26, 0
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %20, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %20, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = icmp slt i32 %20, 0
  %41 = lshr i32 %20, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %39, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = icmp slt i32 %11, 0
  %45 = xor i1 %44, %40
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %43, align 1, !tbaa !868
  br label %47

; <label>:47:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnImES4_2InImEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %39, label %9

; <label>:9:                                      ; preds = %6
  %10 = sub nsw i64 64, %7
  %11 = shl i64 %4, %10
  %12 = lshr i64 %3, %7
  %13 = or i64 %11, %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = add nsw i64 %7, -1
  %16 = shl i64 1, %15
  %17 = and i64 %16, %3
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %14, align 1, !tbaa !868
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = trunc i64 %13 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !868
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %28, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %32 = icmp slt i64 %13, 0
  %33 = lshr i64 %13, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %31, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i64 %3, 0
  %37 = xor i1 %36, %32
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1, !tbaa !868
  br label %39

; <label>:39:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIhE2MnIhE2RnIhES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %56, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %56

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i8 8, %9
  %22 = and i64 %4, 255
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = zext i8 %7 to i64
  %26 = zext i8 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %24
  %29 = trunc i64 %28 to i8
  %30 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = add nsw i8 %9, -1
  %33 = zext i8 %32 to i64
  %34 = shl i64 1, %33
  %35 = and i64 %25, %34
  %36 = icmp ne i64 %35, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %31, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = trunc i64 %28 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %38, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i8 %29, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = icmp slt i8 %29, 0
  %51 = lshr i8 %29, 7
  store i8 %51, i8* %49, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i8 %7, 0
  %54 = xor i1 %53, %50
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1, !tbaa !868
  br label %56

; <label>:56:                                     ; preds = %20, %13, %6
  %57 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %57
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWItE2MnItE2RnItES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %57, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %57

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i16 16, %9
  %22 = and i64 %4, 65535
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = zext i16 %7 to i64
  %26 = zext i16 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %24
  %29 = trunc i64 %28 to i16
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = add nsw i16 %9, -1
  %33 = zext i16 %32 to i64
  %34 = shl i64 1, %33
  %35 = and i64 %25, %34
  %36 = icmp ne i64 %35, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %31, align 1, !tbaa !868
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %39 = and i16 %29, 255
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %38, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %45, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %47 = icmp eq i16 %29, 0
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %50 = icmp slt i16 %29, 0
  %51 = lshr i16 %29, 15
  %52 = trunc i16 %51 to i8
  store i8 %52, i8* %49, align 1, !tbaa !868
  %53 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %54 = icmp slt i16 %7, 0
  %55 = xor i1 %54, %50
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %53, align 1, !tbaa !868
  br label %57

; <label>:57:                                     ; preds = %20, %13, %6
  %58 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %58
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWIjE2MnIjE2RnIjES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %47, label %11

; <label>:11:                                     ; preds = %6
  %12 = sub nsw i32 32, %9
  %13 = and i64 %4, 4294967295
  %14 = zext i32 %12 to i64
  %15 = shl i64 %13, %14
  %16 = zext i32 %7 to i64
  %17 = zext i32 %9 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %18, %15
  %20 = trunc i64 %19 to i32
  %21 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %20) #22
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = add nsw i32 %9, -1
  %24 = zext i32 %23 to i64
  %25 = shl i64 1, %24
  %26 = and i64 %16, %25
  %27 = icmp ne i64 %26, 0
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %20, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %20, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = icmp slt i32 %20, 0
  %41 = lshr i32 %20, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %39, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = icmp slt i32 %7, 0
  %45 = xor i1 %44, %40
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %43, align 1, !tbaa !868
  br label %47

; <label>:47:                                     ; preds = %11, %6
  %48 = phi %struct.Memory* [ %21, %11 ], [ %0, %6 ]
  ret %struct.Memory* %48
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3MnWImE2MnImE2RnImES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %8 = and i64 %5, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %41, label %10

; <label>:10:                                     ; preds = %6
  %11 = sub nsw i64 64, %8
  %12 = shl i64 %4, %11
  %13 = lshr i64 %7, %8
  %14 = or i64 %13, %12
  %15 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = add nsw i64 %8, -1
  %18 = shl i64 1, %17
  %19 = and i64 %7, %18
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %16, align 1, !tbaa !868
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %23 = trunc i64 %14 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #23
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %31 = icmp eq i64 %14, 0
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %30, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = icmp slt i64 %14, 0
  %35 = lshr i64 %14, 63
  %36 = trunc i64 %35 to i8
  store i8 %36, i8* %33, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp slt i64 %7, 0
  %39 = xor i1 %38, %34
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  br label %41

; <label>:41:                                     ; preds = %10, %6
  %42 = phi %struct.Memory* [ %15, %10 ], [ %0, %6 ]
  ret %struct.Memory* %42
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWIhE2RnIhES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %55, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %55

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i8 8, %9
  %22 = and i64 %4, 255
  %23 = zext i8 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 255
  %26 = zext i8 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i8 %9, -1
  %32 = zext i8 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = trunc i64 %28 to i32
  %39 = and i32 %38, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i8 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i8 %29, 0
  %50 = lshr i8 %29, 7
  store i8 %50, i8* %48, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i8 %7, 0
  %53 = xor i1 %52, %49
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1, !tbaa !868
  br label %55

; <label>:55:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWItE2RnItES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %56, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %56

; <label>:20:                                     ; preds = %11
  %21 = sub nsw i16 16, %9
  %22 = and i64 %4, 65535
  %23 = zext i16 %21 to i64
  %24 = shl i64 %22, %23
  %25 = and i64 %3, 65535
  %26 = zext i16 %9 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %24, %27
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = add nsw i16 %9, -1
  %32 = zext i16 %31 to i64
  %33 = shl i64 1, %32
  %34 = and i64 %33, %25
  %35 = icmp ne i64 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %30, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %38 = and i16 %29, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  store i8 %43, i8* %37, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %46 = icmp eq i16 %29, 0
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %45, align 1, !tbaa !868
  %48 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %49 = icmp slt i16 %29, 0
  %50 = lshr i16 %29, 15
  %51 = trunc i16 %50 to i8
  store i8 %51, i8* %48, align 1, !tbaa !868
  %52 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %53 = icmp slt i16 %7, 0
  %54 = xor i1 %53, %49
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %52, align 1, !tbaa !868
  br label %56

; <label>:56:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnIjES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %47, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = sub nsw i32 32, %8
  %13 = and i64 %4, 4294967295
  %14 = zext i32 %12 to i64
  %15 = shl i64 %13, %14
  %16 = and i64 %3, 4294967295
  %17 = zext i32 %8 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %15, %18
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8, !tbaa !870
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = add nsw i32 %8, -1
  %24 = zext i32 %23 to i64
  %25 = shl i64 1, %24
  %26 = and i64 %25, %16
  %27 = icmp ne i64 %26, 0
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %22, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %30 = and i32 %20, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #23
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  store i8 %34, i8* %29, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = icmp eq i32 %20, 0
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %36, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %40 = icmp slt i32 %20, 0
  %41 = lshr i32 %20, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %39, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %44 = icmp slt i32 %11, 0
  %45 = xor i1 %44, %40
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %43, align 1, !tbaa !868
  br label %47

; <label>:47:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHRDI3RnWImE2RnImES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %39, label %9

; <label>:9:                                      ; preds = %6
  %10 = sub nsw i64 64, %7
  %11 = shl i64 %4, %10
  %12 = lshr i64 %3, %7
  %13 = or i64 %11, %12
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = add nsw i64 %7, -1
  %16 = shl i64 1, %15
  %17 = and i64 %16, %3
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %14, align 1, !tbaa !868
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %21 = trunc i64 %13 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #23
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  store i8 %26, i8* %20, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %27, align 1, !tbaa !868
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %28, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %32 = icmp slt i64 %13, 0
  %33 = lshr i64 %13, 63
  %34 = trunc i64 %33 to i8
  store i8 %34, i8* %31, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp slt i64 %3, 0
  %37 = xor i1 %36, %32
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %35, align 1, !tbaa !868
  br label %39

; <label>:39:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIhE2MnIhE2RnIhE2InIhEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %54, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %54

; <label>:20:                                     ; preds = %11
  %21 = zext i8 %7 to i64
  %22 = zext i8 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i8 8, %9
  %25 = and i64 %4, 255
  %26 = zext i8 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %23, %27
  %29 = trunc i64 %28 to i8
  %30 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = shl i64 1, %26
  %33 = and i64 %21, %32
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %31, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = trunc i64 %28 to i32
  %38 = and i32 %37, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %36, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %45 = icmp eq i8 %29, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %48 = icmp slt i8 %29, 0
  %49 = lshr i8 %29, 7
  store i8 %49, i8* %47, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %51 = icmp slt i8 %7, 0
  %52 = xor i1 %51, %48
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %50, align 1, !tbaa !868
  br label %54

; <label>:54:                                     ; preds = %20, %13, %6
  %55 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %55
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWItE2MnItE2RnItE2InItEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %55, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %55

; <label>:20:                                     ; preds = %11
  %21 = zext i16 %7 to i64
  %22 = zext i16 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i16 16, %9
  %25 = and i64 %4, 65535
  %26 = zext i16 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %23, %27
  %29 = trunc i64 %28 to i16
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = shl i64 1, %26
  %33 = and i64 %21, %32
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %31, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = and i16 %29, 255
  %38 = zext i16 %37 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %36, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %45 = icmp eq i16 %29, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %48 = icmp slt i16 %29, 0
  %49 = lshr i16 %29, 15
  %50 = trunc i16 %49 to i8
  store i8 %50, i8* %47, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i16 %7, 0
  %53 = xor i1 %52, %48
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1, !tbaa !868
  br label %55

; <label>:55:                                     ; preds = %20, %13, %6
  %56 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %56
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIjE2MnIjE2RnIjE2InIjEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %45, label %11

; <label>:11:                                     ; preds = %6
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %9
  %16 = and i64 %4, 4294967295
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %14, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %20) #22
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = shl i64 1, %17
  %24 = and i64 %12, %23
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = and i32 %20, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #23
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %27, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i32 %20, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %38 = icmp slt i32 %20, 0
  %39 = lshr i32 %20, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = icmp slt i32 %7, 0
  %43 = xor i1 %42, %38
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %11, %6
  %46 = phi %struct.Memory* [ %21, %11 ], [ %0, %6 ]
  ret %struct.Memory* %46
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWImE2MnImE2RnImE2InImEEEP6MemorySA_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %8 = and i64 %5, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %40, label %10

; <label>:10:                                     ; preds = %6
  %11 = shl i64 %7, %8
  %12 = sub nsw i64 64, %8
  %13 = lshr i64 %4, %12
  %14 = or i64 %11, %13
  %15 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = shl i64 1, %12
  %18 = and i64 %7, %17
  %19 = icmp ne i64 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %16, align 1, !tbaa !868
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %22 = trunc i64 %14 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #23
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  store i8 %27, i8* %21, align 1, !tbaa !868
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %30 = icmp eq i64 %14, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %29, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %33 = icmp slt i64 %14, 0
  %34 = lshr i64 %14, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %32, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp slt i64 %7, 0
  %38 = xor i1 %37, %33
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %36, align 1, !tbaa !868
  br label %40

; <label>:40:                                     ; preds = %10, %6
  %41 = phi %struct.Memory* [ %15, %10 ], [ %0, %6 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWIhE2RnIhES4_2InIhEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %53, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %53

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 255
  %22 = zext i8 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i8 8, %9
  %25 = and i64 %4, 255
  %26 = zext i8 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = trunc i64 %28 to i32
  %37 = and i32 %36, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i8 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i8 %29, 0
  %48 = lshr i8 %29, 7
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %50 = icmp slt i8 %7, 0
  %51 = xor i1 %50, %47
  %52 = zext i1 %51 to i8
  store i8 %52, i8* %49, align 1, !tbaa !868
  br label %53

; <label>:53:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWItE2RnItES4_2InItEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %54, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %54

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 65535
  %22 = zext i16 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i16 16, %9
  %25 = and i64 %4, 65535
  %26 = zext i16 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = and i16 %29, 255
  %37 = zext i16 %36 to i32
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i16 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i16 %29, 0
  %48 = lshr i16 %29, 15
  %49 = trunc i16 %48 to i8
  store i8 %49, i8* %46, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %51 = icmp slt i16 %7, 0
  %52 = xor i1 %51, %47
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %50, align 1, !tbaa !868
  br label %54

; <label>:54:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnIjES4_2InIjEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %45, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = and i64 %3, 4294967295
  %13 = zext i32 %8 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %8
  %16 = and i64 %4, 4294967295
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %18, %14
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8, !tbaa !870
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = shl i64 1, %17
  %24 = and i64 %23, %12
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = and i32 %20, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #23
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %27, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i32 %20, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %38 = icmp slt i32 %20, 0
  %39 = lshr i32 %20, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = icmp slt i32 %11, 0
  %43 = xor i1 %42, %38
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnImES4_2InImEEEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %38, label %9

; <label>:9:                                      ; preds = %6
  %10 = shl i64 %3, %7
  %11 = sub nsw i64 64, %7
  %12 = lshr i64 %4, %11
  %13 = or i64 %12, %10
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = shl i64 1, %11
  %16 = and i64 %15, %3
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %14, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %20 = trunc i64 %13 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %19, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %28 = icmp eq i64 %13, 0
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %27, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %31 = icmp slt i64 %13, 0
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %30, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i64 %3, 0
  %36 = xor i1 %35, %31
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1, !tbaa !868
  br label %38

; <label>:38:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIhE2MnIhE2RnIhES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %54, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %54

; <label>:20:                                     ; preds = %11
  %21 = zext i8 %7 to i64
  %22 = zext i8 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i8 8, %9
  %25 = and i64 %4, 255
  %26 = zext i8 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %23, %27
  %29 = trunc i64 %28 to i8
  %30 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %2, i8 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = shl i64 1, %26
  %33 = and i64 %21, %32
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %31, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = trunc i64 %28 to i32
  %38 = and i32 %37, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %36, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %45 = icmp eq i8 %29, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %48 = icmp slt i8 %29, 0
  %49 = lshr i8 %29, 7
  store i8 %49, i8* %47, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %51 = icmp slt i8 %7, 0
  %52 = xor i1 %51, %48
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %50, align 1, !tbaa !868
  br label %54

; <label>:54:                                     ; preds = %20, %13, %6
  %55 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %55
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWItE2MnItE2RnItES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %55, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %55

; <label>:20:                                     ; preds = %11
  %21 = zext i16 %7 to i64
  %22 = zext i16 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i16 16, %9
  %25 = and i64 %4, 65535
  %26 = zext i16 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %23, %27
  %29 = trunc i64 %28 to i16
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = shl i64 1, %26
  %33 = and i64 %21, %32
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i8
  store i8 %35, i8* %31, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %37 = and i16 %29, 255
  %38 = zext i16 %37 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  store i8 %42, i8* %36, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %45 = icmp eq i16 %29, 0
  %46 = zext i1 %45 to i8
  store i8 %46, i8* %44, align 1, !tbaa !868
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %48 = icmp slt i16 %29, 0
  %49 = lshr i16 %29, 15
  %50 = trunc i16 %49 to i8
  store i8 %50, i8* %47, align 1, !tbaa !868
  %51 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %52 = icmp slt i16 %7, 0
  %53 = xor i1 %52, %48
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %51, align 1, !tbaa !868
  br label %55

; <label>:55:                                     ; preds = %20, %13, %6
  %56 = phi %struct.Memory* [ %0, %13 ], [ %30, %20 ], [ %0, %6 ]
  ret %struct.Memory* %56
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWIjE2MnIjE2RnIjES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %8 = trunc i64 %5 to i32
  %9 = and i32 %8, 31
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %45, label %11

; <label>:11:                                     ; preds = %6
  %12 = zext i32 %7 to i64
  %13 = zext i32 %9 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %9
  %16 = and i64 %4, 4294967295
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %14, %18
  %20 = trunc i64 %19 to i32
  %21 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %20) #22
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = shl i64 1, %17
  %24 = and i64 %12, %23
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = and i32 %20, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #23
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %27, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i32 %20, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %38 = icmp slt i32 %20, 0
  %39 = lshr i32 %20, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = icmp slt i32 %7, 0
  %43 = xor i1 %42, %38
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %11, %6
  %46 = phi %struct.Memory* [ %21, %11 ], [ %0, %6 ]
  ret %struct.Memory* %46
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3MnWImE2MnImE2RnImES6_EEP6MemoryS8_R5StateT_T0_T1_T2_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, i64, i64, i64) #0 {
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %8 = and i64 %5, 63
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %40, label %10

; <label>:10:                                     ; preds = %6
  %11 = shl i64 %7, %8
  %12 = sub nsw i64 64, %8
  %13 = lshr i64 %4, %12
  %14 = or i64 %11, %13
  %15 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %14) #22
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %17 = shl i64 1, %12
  %18 = and i64 %7, %17
  %19 = icmp ne i64 %18, 0
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %16, align 1, !tbaa !868
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %22 = trunc i64 %14 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #23
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  store i8 %27, i8* %21, align 1, !tbaa !868
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %30 = icmp eq i64 %14, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %29, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %33 = icmp slt i64 %14, 0
  %34 = lshr i64 %14, 63
  %35 = trunc i64 %34 to i8
  store i8 %35, i8* %32, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp slt i64 %7, 0
  %38 = xor i1 %37, %33
  %39 = zext i1 %38 to i8
  store i8 %39, i8* %36, align 1, !tbaa !868
  br label %40

; <label>:40:                                     ; preds = %10, %6
  %41 = phi %struct.Memory* [ %15, %10 ], [ %0, %6 ]
  ret %struct.Memory* %41
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWIhE2RnIhES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i8* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i8
  %8 = trunc i64 %5 to i8
  %9 = and i8 %8, 31
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %53, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i8 %9, 8
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %53

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 255
  %22 = zext i8 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i8 8, %9
  %25 = and i64 %4, 255
  %26 = zext i8 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i8
  store i8 %29, i8* %2, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = trunc i64 %28 to i32
  %37 = and i32 %36, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i8 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i8 %29, 0
  %48 = lshr i8 %29, 7
  store i8 %48, i8* %46, align 1, !tbaa !868
  %49 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %50 = icmp slt i8 %7, 0
  %51 = xor i1 %50, %47
  %52 = zext i1 %51 to i8
  store i8 %52, i8* %49, align 1, !tbaa !868
  br label %53

; <label>:53:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWItE2RnItES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i16* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %3 to i16
  %8 = trunc i64 %5 to i16
  %9 = and i16 %8, 31
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %54, label %11

; <label>:11:                                     ; preds = %6
  %12 = icmp ugt i16 %9, 16
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 0, i8* %14, align 1, !tbaa !850
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %15, align 1, !tbaa !863
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1, !tbaa !864
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %17, align 1, !tbaa !865
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %18, align 1, !tbaa !866
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %19, align 1, !tbaa !867
  br label %54

; <label>:20:                                     ; preds = %11
  %21 = and i64 %3, 65535
  %22 = zext i16 %9 to i64
  %23 = shl i64 %21, %22
  %24 = sub nsw i16 16, %9
  %25 = and i64 %4, 65535
  %26 = zext i16 %24 to i64
  %27 = lshr i64 %25, %26
  %28 = or i64 %27, %23
  %29 = trunc i64 %28 to i16
  store i16 %29, i16* %2, align 2, !tbaa !869
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = shl i64 1, %26
  %32 = and i64 %31, %21
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %30, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = and i16 %29, 255
  %37 = zext i16 %36 to i32
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  store i8 %41, i8* %35, align 1, !tbaa !868
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %44 = icmp eq i16 %29, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %43, align 1, !tbaa !868
  %46 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %47 = icmp slt i16 %29, 0
  %48 = lshr i16 %29, 15
  %49 = trunc i16 %48 to i8
  store i8 %49, i8* %46, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %51 = icmp slt i16 %7, 0
  %52 = xor i1 %51, %47
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %50, align 1, !tbaa !868
  br label %54

; <label>:54:                                     ; preds = %20, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnIjES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %45, label %10

; <label>:10:                                     ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = and i64 %3, 4294967295
  %13 = zext i32 %8 to i64
  %14 = shl i64 %12, %13
  %15 = sub nsw i32 32, %8
  %16 = and i64 %4, 4294967295
  %17 = zext i32 %15 to i64
  %18 = lshr i64 %16, %17
  %19 = or i64 %18, %14
  %20 = trunc i64 %19 to i32
  %21 = and i64 %19, 4294967295
  store i64 %21, i64* %2, align 8, !tbaa !870
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %23 = shl i64 1, %17
  %24 = and i64 %23, %12
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  store i8 %26, i8* %22, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %28 = and i32 %20, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #23
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  store i8 %32, i8* %27, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %35 = icmp eq i32 %20, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %34, align 1, !tbaa !868
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %38 = icmp slt i32 %20, 0
  %39 = lshr i32 %20, 31
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1, !tbaa !868
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %42 = icmp slt i32 %11, 0
  %43 = xor i1 %42, %38
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %41, align 1, !tbaa !868
  br label %45

; <label>:45:                                     ; preds = %10, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4SHLDI3RnWImE2RnImES4_S4_EEP6MemoryS6_R5StateT_T0_T1_T2_(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64* nocapture, i64, i64, i64) #0 {
  %7 = and i64 %5, 63
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %38, label %9

; <label>:9:                                      ; preds = %6
  %10 = shl i64 %3, %7
  %11 = sub nsw i64 64, %7
  %12 = lshr i64 %4, %11
  %13 = or i64 %12, %10
  store i64 %13, i64* %2, align 8, !tbaa !870
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %15 = shl i64 1, %11
  %16 = and i64 %15, %3
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %14, align 1, !tbaa !868
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %20 = trunc i64 %13 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #23
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  store i8 %25, i8* %19, align 1, !tbaa !868
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1, !tbaa !868
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %28 = icmp eq i64 %13, 0
  %29 = zext i1 %28 to i8
  store i8 %29, i8* %27, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %31 = icmp slt i64 %13, 0
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %30, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp slt i64 %3, 0
  %36 = xor i1 %35, %31
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %34, align 1, !tbaa !868
  br label %38

; <label>:38:                                     ; preds = %9, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSLLDQI3VnWI8vec128_tEEEP6MemoryS5_R5StateT_2VnIS2_E2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = and i64 %4, 255
  %14 = icmp ult i64 %13, 16
  %15 = select i1 %14, i64 %13, i64 16
  %16 = sub nsw i64 16, %15
  %17 = bitcast <2 x i64>* %6 to i8*
  %18 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %20 = bitcast <2 x i64>* %6 to [16 x i8]*
  %21 = icmp eq i64 %16, 0
  %22 = lshr i64 %9, 8
  %23 = trunc i64 %22 to i8
  %24 = lshr i64 %9, 16
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %9, 24
  %27 = trunc i64 %26 to i8
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i8
  %30 = lshr i64 %9, 40
  %31 = trunc i64 %30 to i8
  %32 = lshr i64 %9, 48
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %9, 56
  %35 = trunc i64 %34 to i8
  %36 = trunc i64 %12 to i8
  %37 = lshr i64 %12, 8
  %38 = trunc i64 %37 to i8
  %39 = lshr i64 %12, 16
  %40 = trunc i64 %39 to i8
  %41 = lshr i64 %12, 24
  %42 = trunc i64 %41 to i8
  %43 = lshr i64 %12, 32
  %44 = trunc i64 %43 to i8
  %45 = lshr i64 %12, 40
  %46 = trunc i64 %45 to i8
  %47 = lshr i64 %12, 48
  %48 = trunc i64 %47 to i8
  %49 = lshr i64 %12, 56
  %50 = trunc i64 %49 to i8
  br i1 %21, label %348, label %51

; <label>:51:                                     ; preds = %5
  %52 = trunc i64 %9 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %15
  store i8 %52, i8* %53, align 1, !tbaa !868
  %54 = load i64, i64* %18, align 16
  %55 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %56 = trunc i64 %54 to i8
  %57 = lshr i64 %54, 8
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %54, 16
  %60 = trunc i64 %59 to i8
  %61 = lshr i64 %54, 24
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %54, 32
  %64 = trunc i64 %63 to i8
  %65 = lshr i64 %54, 40
  %66 = trunc i64 %65 to i8
  %67 = lshr i64 %54, 48
  %68 = trunc i64 %67 to i8
  %69 = lshr i64 %54, 56
  %70 = trunc i64 %69 to i8
  %71 = icmp eq i64 %16, 1
  br i1 %71, label %348, label %72

; <label>:72:                                     ; preds = %51
  %73 = shl nuw i64 %69, 56
  %74 = and i64 %54, 72057594037927935
  %75 = or i64 %74, %73
  %76 = add nuw nsw i64 %15, 1
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %75, i64* %18, align 16
  store i64 %55, i64* %19, align 8
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %76
  store i8 %23, i8* %77, align 1, !tbaa !868
  %78 = load i64, i64* %18, align 16
  %79 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %80 = trunc i64 %78 to i8
  %81 = lshr i64 %78, 8
  %82 = trunc i64 %81 to i8
  %83 = lshr i64 %78, 16
  %84 = trunc i64 %83 to i8
  %85 = lshr i64 %78, 24
  %86 = trunc i64 %85 to i8
  %87 = lshr i64 %78, 32
  %88 = trunc i64 %87 to i8
  %89 = lshr i64 %78, 40
  %90 = trunc i64 %89 to i8
  %91 = lshr i64 %78, 48
  %92 = trunc i64 %91 to i8
  %93 = lshr i64 %78, 56
  %94 = trunc i64 %93 to i8
  %95 = icmp ugt i64 %16, 2
  br i1 %95, label %96, label %348

; <label>:96:                                     ; preds = %72
  %97 = shl nuw i64 %93, 56
  %98 = and i64 %78, 72057594037927935
  %99 = or i64 %98, %97
  %100 = add nuw nsw i64 %15, 2
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %99, i64* %18, align 16
  store i64 %79, i64* %19, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %100
  store i8 %25, i8* %101, align 1, !tbaa !868
  %102 = load i64, i64* %18, align 16
  %103 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %104 = trunc i64 %102 to i8
  %105 = lshr i64 %102, 8
  %106 = trunc i64 %105 to i8
  %107 = lshr i64 %102, 16
  %108 = trunc i64 %107 to i8
  %109 = lshr i64 %102, 24
  %110 = trunc i64 %109 to i8
  %111 = lshr i64 %102, 32
  %112 = trunc i64 %111 to i8
  %113 = lshr i64 %102, 40
  %114 = trunc i64 %113 to i8
  %115 = lshr i64 %102, 48
  %116 = trunc i64 %115 to i8
  %117 = lshr i64 %102, 56
  %118 = trunc i64 %117 to i8
  %119 = icmp eq i64 %16, 3
  br i1 %119, label %348, label %120

; <label>:120:                                    ; preds = %96
  %121 = shl nuw i64 %117, 56
  %122 = and i64 %102, 72057594037927935
  %123 = or i64 %122, %121
  %124 = add nuw nsw i64 %15, 3
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %123, i64* %18, align 16
  store i64 %103, i64* %19, align 8
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %124
  store i8 %27, i8* %125, align 1, !tbaa !868
  %126 = load i64, i64* %18, align 16
  %127 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %128 = trunc i64 %126 to i8
  %129 = lshr i64 %126, 8
  %130 = trunc i64 %129 to i8
  %131 = lshr i64 %126, 16
  %132 = trunc i64 %131 to i8
  %133 = lshr i64 %126, 24
  %134 = trunc i64 %133 to i8
  %135 = lshr i64 %126, 32
  %136 = trunc i64 %135 to i8
  %137 = lshr i64 %126, 40
  %138 = trunc i64 %137 to i8
  %139 = lshr i64 %126, 48
  %140 = trunc i64 %139 to i8
  %141 = lshr i64 %126, 56
  %142 = trunc i64 %141 to i8
  %143 = icmp ugt i64 %16, 4
  br i1 %143, label %144, label %348

; <label>:144:                                    ; preds = %120
  %145 = shl nuw i64 %141, 56
  %146 = and i64 %126, 72057594037927935
  %147 = or i64 %146, %145
  %148 = add nuw nsw i64 %15, 4
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %147, i64* %18, align 16
  store i64 %127, i64* %19, align 8
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %148
  store i8 %29, i8* %149, align 1, !tbaa !868
  %150 = load i64, i64* %18, align 16
  %151 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %152 = trunc i64 %150 to i8
  %153 = lshr i64 %150, 8
  %154 = trunc i64 %153 to i8
  %155 = lshr i64 %150, 16
  %156 = trunc i64 %155 to i8
  %157 = lshr i64 %150, 24
  %158 = trunc i64 %157 to i8
  %159 = lshr i64 %150, 32
  %160 = trunc i64 %159 to i8
  %161 = lshr i64 %150, 40
  %162 = trunc i64 %161 to i8
  %163 = lshr i64 %150, 48
  %164 = trunc i64 %163 to i8
  %165 = lshr i64 %150, 56
  %166 = trunc i64 %165 to i8
  %167 = icmp eq i64 %16, 5
  br i1 %167, label %348, label %168

; <label>:168:                                    ; preds = %144
  %169 = shl nuw i64 %165, 56
  %170 = and i64 %150, 72057594037927935
  %171 = or i64 %170, %169
  %172 = add nuw nsw i64 %15, 5
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %171, i64* %18, align 16
  store i64 %151, i64* %19, align 8
  %173 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %172
  store i8 %31, i8* %173, align 1, !tbaa !868
  %174 = load i64, i64* %18, align 16
  %175 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %176 = trunc i64 %174 to i8
  %177 = lshr i64 %174, 8
  %178 = trunc i64 %177 to i8
  %179 = lshr i64 %174, 16
  %180 = trunc i64 %179 to i8
  %181 = lshr i64 %174, 24
  %182 = trunc i64 %181 to i8
  %183 = lshr i64 %174, 32
  %184 = trunc i64 %183 to i8
  %185 = lshr i64 %174, 40
  %186 = trunc i64 %185 to i8
  %187 = lshr i64 %174, 48
  %188 = trunc i64 %187 to i8
  %189 = lshr i64 %174, 56
  %190 = trunc i64 %189 to i8
  %191 = icmp ugt i64 %16, 6
  br i1 %191, label %192, label %348

; <label>:192:                                    ; preds = %168
  %193 = shl nuw i64 %189, 56
  %194 = and i64 %174, 72057594037927935
  %195 = or i64 %194, %193
  %196 = add nuw nsw i64 %15, 6
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %195, i64* %18, align 16
  store i64 %175, i64* %19, align 8
  %197 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %196
  store i8 %33, i8* %197, align 1, !tbaa !868
  %198 = load i64, i64* %18, align 16
  %199 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %200 = trunc i64 %198 to i8
  %201 = lshr i64 %198, 8
  %202 = trunc i64 %201 to i8
  %203 = lshr i64 %198, 16
  %204 = trunc i64 %203 to i8
  %205 = lshr i64 %198, 24
  %206 = trunc i64 %205 to i8
  %207 = lshr i64 %198, 32
  %208 = trunc i64 %207 to i8
  %209 = lshr i64 %198, 40
  %210 = trunc i64 %209 to i8
  %211 = lshr i64 %198, 48
  %212 = trunc i64 %211 to i8
  %213 = lshr i64 %198, 56
  %214 = trunc i64 %213 to i8
  %215 = icmp eq i64 %16, 7
  br i1 %215, label %348, label %216

; <label>:216:                                    ; preds = %192
  %217 = shl nuw i64 %213, 56
  %218 = and i64 %198, 72057594037927935
  %219 = or i64 %218, %217
  %220 = add nuw nsw i64 %15, 7
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %219, i64* %18, align 16
  store i64 %199, i64* %19, align 8
  %221 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %220
  store i8 %35, i8* %221, align 1, !tbaa !868
  %222 = load i64, i64* %18, align 16
  %223 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %224 = trunc i64 %222 to i8
  %225 = lshr i64 %222, 8
  %226 = trunc i64 %225 to i8
  %227 = lshr i64 %222, 16
  %228 = trunc i64 %227 to i8
  %229 = lshr i64 %222, 24
  %230 = trunc i64 %229 to i8
  %231 = lshr i64 %222, 32
  %232 = trunc i64 %231 to i8
  %233 = lshr i64 %222, 40
  %234 = trunc i64 %233 to i8
  %235 = lshr i64 %222, 48
  %236 = trunc i64 %235 to i8
  %237 = lshr i64 %222, 56
  %238 = trunc i64 %237 to i8
  %239 = icmp ugt i64 %16, 8
  br i1 %239, label %240, label %348

; <label>:240:                                    ; preds = %216
  %241 = shl nuw i64 %237, 56
  %242 = and i64 %222, 72057594037927935
  %243 = or i64 %242, %241
  %244 = add nuw nsw i64 %15, 8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %243, i64* %18, align 16
  store i64 %223, i64* %19, align 8
  %245 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %244
  store i8 %36, i8* %245, align 1, !tbaa !868
  %246 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %247 = trunc i64 %222 to i8
  %248 = lshr i64 %222, 8
  %249 = trunc i64 %248 to i8
  %250 = lshr i64 %222, 48
  %251 = trunc i64 %250 to i8
  %252 = trunc i64 %237 to i8
  %253 = icmp eq i64 %16, 9
  br i1 %253, label %348, label %254

; <label>:254:                                    ; preds = %240
  %255 = shl nuw i64 %237, 56
  %256 = and i64 %222, 72057594037927935
  %257 = or i64 %256, %255
  %258 = add nuw nsw i64 %15, 9
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %257, i64* %18, align 16
  store i64 %246, i64* %19, align 8
  %259 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %258
  store i8 %38, i8* %259, align 1, !tbaa !868
  %260 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %261 = trunc i64 %222 to i8
  %262 = lshr i64 %222, 8
  %263 = trunc i64 %262 to i8
  %264 = lshr i64 %222, 48
  %265 = trunc i64 %264 to i8
  %266 = trunc i64 %237 to i8
  %267 = icmp ugt i64 %16, 10
  br i1 %267, label %268, label %348

; <label>:268:                                    ; preds = %254
  %269 = shl nuw i64 %237, 56
  %270 = and i64 %222, 72057594037927935
  %271 = or i64 %270, %269
  %272 = add nuw nsw i64 %15, 10
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %271, i64* %18, align 16
  store i64 %260, i64* %19, align 8
  %273 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %272
  store i8 %40, i8* %273, align 1, !tbaa !868
  %274 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %275 = trunc i64 %222 to i8
  %276 = lshr i64 %222, 8
  %277 = trunc i64 %276 to i8
  %278 = lshr i64 %222, 48
  %279 = trunc i64 %278 to i8
  %280 = trunc i64 %237 to i8
  %281 = icmp eq i64 %16, 11
  br i1 %281, label %348, label %282

; <label>:282:                                    ; preds = %268
  %283 = shl nuw i64 %237, 56
  %284 = and i64 %222, 72057594037927935
  %285 = or i64 %284, %283
  %286 = add nuw nsw i64 %15, 11
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %285, i64* %18, align 16
  store i64 %274, i64* %19, align 8
  %287 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %286
  store i8 %42, i8* %287, align 1, !tbaa !868
  %288 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %289 = trunc i64 %222 to i8
  %290 = lshr i64 %222, 8
  %291 = trunc i64 %290 to i8
  %292 = lshr i64 %222, 48
  %293 = trunc i64 %292 to i8
  %294 = trunc i64 %237 to i8
  %295 = icmp ugt i64 %16, 12
  br i1 %295, label %296, label %348

; <label>:296:                                    ; preds = %282
  %297 = shl nuw i64 %237, 56
  %298 = and i64 %222, 72057594037927935
  %299 = or i64 %298, %297
  %300 = add nuw nsw i64 %15, 12
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %299, i64* %18, align 16
  store i64 %288, i64* %19, align 8
  %301 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %300
  store i8 %44, i8* %301, align 1, !tbaa !868
  %302 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %303 = trunc i64 %222 to i8
  %304 = lshr i64 %222, 8
  %305 = trunc i64 %304 to i8
  %306 = lshr i64 %222, 48
  %307 = trunc i64 %306 to i8
  %308 = trunc i64 %237 to i8
  %309 = icmp eq i64 %16, 13
  br i1 %309, label %348, label %310

; <label>:310:                                    ; preds = %296
  %311 = shl nuw i64 %237, 56
  %312 = and i64 %222, 72057594037927935
  %313 = or i64 %312, %311
  %314 = add nuw nsw i64 %15, 13
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %313, i64* %18, align 16
  store i64 %302, i64* %19, align 8
  %315 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %314
  store i8 %46, i8* %315, align 1, !tbaa !868
  %316 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %317 = trunc i64 %222 to i8
  %318 = lshr i64 %222, 8
  %319 = trunc i64 %318 to i8
  %320 = lshr i64 %222, 48
  %321 = trunc i64 %320 to i8
  %322 = trunc i64 %237 to i8
  %323 = icmp ugt i64 %16, 14
  br i1 %323, label %324, label %348

; <label>:324:                                    ; preds = %310
  %325 = shl nuw i64 %237, 56
  %326 = and i64 %222, 72057594037927935
  %327 = or i64 %326, %325
  %328 = add nuw nsw i64 %15, 14
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %327, i64* %18, align 16
  store i64 %316, i64* %19, align 8
  %329 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %328
  store i8 %48, i8* %329, align 1, !tbaa !868
  %330 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %331 = trunc i64 %222 to i8
  %332 = lshr i64 %222, 8
  %333 = trunc i64 %332 to i8
  %334 = lshr i64 %222, 48
  %335 = trunc i64 %334 to i8
  %336 = trunc i64 %237 to i8
  %337 = icmp eq i64 %16, 15
  br i1 %337, label %348, label %338

; <label>:338:                                    ; preds = %324
  %339 = add nuw nsw i64 %15, 15
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17)
  store i64 %327, i64* %18, align 16
  store i64 %330, i64* %19, align 8
  %340 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 %339
  store i8 %50, i8* %340, align 1, !tbaa !868
  %341 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17)
  %342 = trunc i64 %222 to i8
  %343 = lshr i64 %222, 8
  %344 = trunc i64 %343 to i8
  %345 = lshr i64 %222, 48
  %346 = trunc i64 %345 to i8
  %347 = trunc i64 %237 to i8
  br label %348

; <label>:348:                                    ; preds = %338, %324, %310, %296, %282, %268, %254, %240, %216, %192, %168, %144, %120, %96, %72, %51, %5
  %349 = phi i8 [ %234, %338 ], [ %234, %324 ], [ %234, %310 ], [ %234, %296 ], [ %234, %282 ], [ %234, %268 ], [ %234, %254 ], [ %234, %240 ], [ %234, %216 ], [ %210, %192 ], [ %186, %168 ], [ %162, %144 ], [ %138, %120 ], [ %114, %96 ], [ %90, %72 ], [ %66, %51 ], [ 0, %5 ]
  %350 = phi i8 [ %232, %338 ], [ %232, %324 ], [ %232, %310 ], [ %232, %296 ], [ %232, %282 ], [ %232, %268 ], [ %232, %254 ], [ %232, %240 ], [ %232, %216 ], [ %208, %192 ], [ %184, %168 ], [ %160, %144 ], [ %136, %120 ], [ %112, %96 ], [ %88, %72 ], [ %64, %51 ], [ 0, %5 ]
  %351 = phi i8 [ %230, %338 ], [ %230, %324 ], [ %230, %310 ], [ %230, %296 ], [ %230, %282 ], [ %230, %268 ], [ %230, %254 ], [ %230, %240 ], [ %230, %216 ], [ %206, %192 ], [ %182, %168 ], [ %158, %144 ], [ %134, %120 ], [ %110, %96 ], [ %86, %72 ], [ %62, %51 ], [ 0, %5 ]
  %352 = phi i8 [ %228, %338 ], [ %228, %324 ], [ %228, %310 ], [ %228, %296 ], [ %228, %282 ], [ %228, %268 ], [ %228, %254 ], [ %228, %240 ], [ %228, %216 ], [ %204, %192 ], [ %180, %168 ], [ %156, %144 ], [ %132, %120 ], [ %108, %96 ], [ %84, %72 ], [ %60, %51 ], [ 0, %5 ]
  %353 = phi i8 [ %344, %338 ], [ %333, %324 ], [ %319, %310 ], [ %305, %296 ], [ %291, %282 ], [ %277, %268 ], [ %263, %254 ], [ %249, %240 ], [ %226, %216 ], [ %202, %192 ], [ %178, %168 ], [ %154, %144 ], [ %130, %120 ], [ %106, %96 ], [ %82, %72 ], [ %58, %51 ], [ 0, %5 ]
  %354 = phi i8 [ %342, %338 ], [ %331, %324 ], [ %317, %310 ], [ %303, %296 ], [ %289, %282 ], [ %275, %268 ], [ %261, %254 ], [ %247, %240 ], [ %224, %216 ], [ %200, %192 ], [ %176, %168 ], [ %152, %144 ], [ %128, %120 ], [ %104, %96 ], [ %80, %72 ], [ %56, %51 ], [ 0, %5 ]
  %355 = phi i64 [ %341, %338 ], [ %330, %324 ], [ %316, %310 ], [ %302, %296 ], [ %288, %282 ], [ %274, %268 ], [ %260, %254 ], [ %246, %240 ], [ %223, %216 ], [ %199, %192 ], [ %175, %168 ], [ %151, %144 ], [ %127, %120 ], [ %103, %96 ], [ %79, %72 ], [ %55, %51 ], [ 0, %5 ]
  %356 = phi i8 [ %346, %338 ], [ %335, %324 ], [ %321, %310 ], [ %307, %296 ], [ %293, %282 ], [ %279, %268 ], [ %265, %254 ], [ %251, %240 ], [ %236, %216 ], [ %212, %192 ], [ %188, %168 ], [ %164, %144 ], [ %140, %120 ], [ %116, %96 ], [ %92, %72 ], [ %68, %51 ], [ 0, %5 ]
  %357 = phi i8 [ %347, %338 ], [ %336, %324 ], [ %322, %310 ], [ %308, %296 ], [ %294, %282 ], [ %280, %268 ], [ %266, %254 ], [ %252, %240 ], [ %238, %216 ], [ %214, %192 ], [ %190, %168 ], [ %166, %144 ], [ %142, %120 ], [ %118, %96 ], [ %94, %72 ], [ %70, %51 ], [ 0, %5 ]
  store i8 %354, i8* %2, align 1, !tbaa !868
  %358 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %353, i8* %358, align 1, !tbaa !868
  %359 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %352, i8* %359, align 1, !tbaa !868
  %360 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %351, i8* %360, align 1, !tbaa !868
  %361 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %350, i8* %361, align 1, !tbaa !868
  %362 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %349, i8* %362, align 1, !tbaa !868
  %363 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %356, i8* %363, align 1, !tbaa !868
  %364 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %357, i8* %364, align 1, !tbaa !868
  %365 = trunc i64 %355 to i8
  %366 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %365, i8* %366, align 1, !tbaa !868
  %367 = lshr i64 %355, 8
  %368 = trunc i64 %367 to i8
  %369 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %368, i8* %369, align 1, !tbaa !868
  %370 = lshr i64 %355, 16
  %371 = trunc i64 %370 to i8
  %372 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %371, i8* %372, align 1, !tbaa !868
  %373 = lshr i64 %355, 24
  %374 = trunc i64 %373 to i8
  %375 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %374, i8* %375, align 1, !tbaa !868
  %376 = lshr i64 %355, 32
  %377 = trunc i64 %376 to i8
  %378 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %377, i8* %378, align 1, !tbaa !868
  %379 = lshr i64 %355, 40
  %380 = trunc i64 %379 to i8
  %381 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %380, i8* %381, align 1, !tbaa !868
  %382 = lshr i64 %355, 48
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %383, i8* %384, align 1, !tbaa !868
  %385 = lshr i64 %355, 56
  %386 = trunc i64 %385 to i8
  %387 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %386, i8* %387, align 1, !tbaa !868
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %2 to double*
  %6 = load double, double* %5, align 1
  %7 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %8 = fcmp uno double %6, %7
  br i1 %8, label %9, label %17

; <label>:9:                                      ; preds = %4
  %10 = fadd double %6, %7
  %11 = tail call i32 @__issignaling(double %10) #24
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %15 = load i64, i64* %14, align 8, !tbaa !870
  %16 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %15, %struct.Memory* %0) #21
  br label %34

; <label>:17:                                     ; preds = %4
  %18 = fcmp ogt double %6, %7
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %17
  %20 = fcmp olt double %6, %7
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %19
  %22 = fcmp oeq double %6, %7
  br i1 %22, label %23, label %30

; <label>:23:                                     ; preds = %21, %19, %17, %9
  %24 = phi i8 [ 0, %17 ], [ 0, %19 ], [ 1, %21 ], [ 1, %9 ]
  %25 = phi i8 [ 0, %17 ], [ 0, %19 ], [ 0, %21 ], [ 1, %9 ]
  %26 = phi i8 [ 0, %17 ], [ 1, %19 ], [ 0, %21 ], [ 1, %9 ]
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %24, i8* %27, align 1, !tbaa !868
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %25, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %26, i8* %29, align 1, !tbaa !868
  br label %30

; <label>:30:                                     ; preds = %23, %21
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %31, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %33, align 1, !tbaa !868
  br label %34

; <label>:34:                                     ; preds = %30, %13
  %35 = phi %struct.Memory* [ %16, %13 ], [ %0, %30 ]
  ret %struct.Memory* %35
}

; Function Attrs: nounwind readnone
declare i32 @__issignaling(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture readonly, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %2 to double*
  %6 = load double, double* %5, align 1
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = fcmp uno double %6, %8
  br i1 %9, label %10, label %18

; <label>:10:                                     ; preds = %4
  %11 = fadd double %6, %8
  %12 = tail call i32 @__issignaling(double %11) #24
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %24, label %14

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !870
  %17 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %16, %struct.Memory* %0) #21
  br label %35

; <label>:18:                                     ; preds = %4
  %19 = fcmp ogt double %6, %8
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %18
  %21 = fcmp olt double %6, %8
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %20
  %23 = fcmp oeq double %6, %8
  br i1 %23, label %24, label %31

; <label>:24:                                     ; preds = %22, %20, %18, %10
  %25 = phi i8 [ 0, %18 ], [ 0, %20 ], [ 1, %22 ], [ 1, %10 ]
  %26 = phi i8 [ 0, %18 ], [ 0, %20 ], [ 0, %22 ], [ 1, %10 ]
  %27 = phi i8 [ 0, %18 ], [ 1, %20 ], [ 0, %22 ], [ 1, %10 ]
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %27, i8* %30, align 1, !tbaa !868
  br label %31

; <label>:31:                                     ; preds = %24, %22
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1, !tbaa !868
  br label %35

; <label>:35:                                     ; preds = %31, %14
  %36 = phi %struct.Memory* [ %17, %14 ], [ %0, %31 ]
  ret %struct.Memory* %36
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture readonly, i64) #0 {
  %5 = bitcast i8* %2 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %9 = fcmp uno float %7, %8
  br i1 %9, label %10, label %18

; <label>:10:                                     ; preds = %4
  %11 = fadd float %7, %8
  %12 = tail call i32 @__issignalingf(float %11) #24
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %24, label %14

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !870
  %17 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %16, %struct.Memory* %0) #21
  br label %35

; <label>:18:                                     ; preds = %4
  %19 = fcmp ogt float %7, %8
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %18
  %21 = fcmp olt float %7, %8
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %20
  %23 = fcmp oeq float %7, %8
  br i1 %23, label %24, label %31

; <label>:24:                                     ; preds = %22, %20, %18, %10
  %25 = phi i8 [ 0, %18 ], [ 0, %20 ], [ 1, %22 ], [ 1, %10 ]
  %26 = phi i8 [ 0, %18 ], [ 0, %20 ], [ 0, %22 ], [ 1, %10 ]
  %27 = phi i8 [ 0, %18 ], [ 1, %20 ], [ 0, %22 ], [ 1, %10 ]
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %28, align 1, !tbaa !868
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %26, i8* %29, align 1, !tbaa !868
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %27, i8* %30, align 1, !tbaa !868
  br label %31

; <label>:31:                                     ; preds = %24, %22
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %32, align 1, !tbaa !868
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %33, align 1, !tbaa !868
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %34, align 1, !tbaa !868
  br label %35

; <label>:35:                                     ; preds = %31, %14
  %36 = phi %struct.Memory* [ %17, %14 ], [ %0, %31 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind readnone
declare i32 @__issignalingf(float) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture readonly, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %2 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = bitcast i8* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = fcmp uno float %7, %10
  br i1 %11, label %12, label %20

; <label>:12:                                     ; preds = %4
  %13 = fadd float %7, %10
  %14 = tail call i32 @__issignalingf(float %13) #24
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %26, label %16

; <label>:16:                                     ; preds = %12
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !870
  %19 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %18, %struct.Memory* %0) #21
  br label %37

; <label>:20:                                     ; preds = %4
  %21 = fcmp ogt float %7, %10
  br i1 %21, label %26, label %22

; <label>:22:                                     ; preds = %20
  %23 = fcmp olt float %7, %10
  br i1 %23, label %26, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp oeq float %7, %10
  br i1 %25, label %26, label %33

; <label>:26:                                     ; preds = %24, %22, %20, %12
  %27 = phi i8 [ 0, %20 ], [ 0, %22 ], [ 1, %24 ], [ 1, %12 ]
  %28 = phi i8 [ 0, %20 ], [ 0, %22 ], [ 0, %24 ], [ 1, %12 ]
  %29 = phi i8 [ 0, %20 ], [ 1, %22 ], [ 0, %24 ], [ 1, %12 ]
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %30, align 1, !tbaa !868
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %28, i8* %31, align 1, !tbaa !868
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %29, i8* %32, align 1, !tbaa !868
  br label %33

; <label>:33:                                     ; preds = %26, %24
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %34, align 1, !tbaa !868
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %35, align 1, !tbaa !868
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1, !tbaa !868
  br label %37

; <label>:37:                                     ; preds = %33, %16
  %38 = phi %struct.Memory* [ %19, %16 ], [ %0, %33 ]
  ret %struct.Memory* %38
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFDI3VnWI8vec128_tE3MVnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca %struct.uint128v1_t, align 8
  %9 = bitcast %struct.uint128v1_t* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) #23
  %10 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %11 = add i64 %3, 8
  %12 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %11) #22
  %13 = bitcast %struct.uint128v1_t* %8 to { i64, i64 }*
  %14 = bitcast %struct.uint128v1_t* %8 to i64*
  store i64 %10, i64* %14, align 8
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  store i64 %12, i64* %15, align 8
  %16 = getelementptr inbounds %struct.uint128v1_t, %struct.uint128v1_t* %8, i64 0, i32 0, i64 0
  %17 = load i128, i128* %16, align 8, !tbaa !879
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = shl i64 %4, 5
  %23 = and i64 %22, 96
  %24 = lshr i64 %4, 2
  %25 = and i64 %24, 63
  %26 = zext i64 %23 to i128
  %27 = lshr i128 %17, %26
  %28 = trunc i128 %27 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %29 = bitcast <2 x i64>* %6 to i32*
  store i32 %28, i32* %29, align 16, !tbaa !877
  %30 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %31 = shl nuw nsw i64 %25, 5
  %32 = and i64 %31, 96
  %33 = zext i64 %32 to i128
  %34 = lshr i128 %17, %33
  %35 = trunc i128 %34 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %30, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %35, i32* %36, align 4, !tbaa !877
  %37 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %38 = shl nuw nsw i64 %25, 3
  %39 = and i64 %38, 96
  %40 = zext i64 %39 to i128
  %41 = lshr i128 %17, %40
  %42 = trunc i128 %41 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %37, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %44 = bitcast i64* %43 to i32*
  store i32 %42, i32* %44, align 8, !tbaa !877
  %45 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %46 = shl nuw nsw i64 %24, 1
  %47 = and i64 %46, 96
  %48 = zext i64 %47 to i128
  %49 = lshr i128 %17, %48
  %50 = trunc i128 %49 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %37, i64* %19, align 16
  store i64 %45, i64* %20, align 8
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %50, i32* %51, align 4, !tbaa !877
  %52 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %53 = trunc i64 %37 to i32
  %54 = lshr i64 %37, 32
  %55 = trunc i64 %54 to i32
  %56 = bitcast i8* %2 to i32*
  store i32 %53, i32* %56, align 1, !tbaa !877
  %57 = getelementptr inbounds i8, i8* %2, i64 4
  %58 = bitcast i8* %57 to i32*
  store i32 %55, i32* %58, align 1, !tbaa !877
  %59 = trunc i64 %52 to i32
  %60 = getelementptr inbounds i8, i8* %2, i64 8
  %61 = bitcast i8* %60 to i32*
  store i32 %59, i32* %61, align 1, !tbaa !877
  %62 = lshr i64 %52, 32
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds i8, i8* %2, i64 12
  %65 = bitcast i8* %64 to i32*
  store i32 %63, i32* %65, align 1, !tbaa !877
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSHUFDI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i128*
  %9 = load i128, i128* %8, align 1
  %10 = bitcast <2 x i64>* %6 to i8*
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %13 = bitcast <2 x i64>* %6 to [4 x i32]*
  %14 = shl i64 %4, 5
  %15 = and i64 %14, 96
  %16 = lshr i64 %4, 2
  %17 = and i64 %16, 63
  %18 = zext i64 %15 to i128
  %19 = lshr i128 %9, %18
  %20 = trunc i128 %19 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %21 = bitcast <2 x i64>* %6 to i32*
  store i32 %20, i32* %21, align 16, !tbaa !877
  %22 = load i64, i64* %11, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %23 = shl nuw nsw i64 %17, 5
  %24 = and i64 %23, 96
  %25 = zext i64 %24 to i128
  %26 = lshr i128 %9, %25
  %27 = trunc i128 %26 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store i64 %22, i64* %11, align 16
  store i64 0, i64* %12, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 1
  store i32 %27, i32* %28, align 4, !tbaa !877
  %29 = load i64, i64* %11, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %30 = shl nuw nsw i64 %17, 3
  %31 = and i64 %30, 96
  %32 = zext i64 %31 to i128
  %33 = lshr i128 %9, %32
  %34 = trunc i128 %33 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store i64 %29, i64* %11, align 16
  store i64 0, i64* %12, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %36 = bitcast i64* %35 to i32*
  store i32 %34, i32* %36, align 8, !tbaa !877
  %37 = load i64, i64* %12, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %38 = shl nuw nsw i64 %16, 1
  %39 = and i64 %38, 96
  %40 = zext i64 %39 to i128
  %41 = lshr i128 %9, %40
  %42 = trunc i128 %41 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %10)
  store i64 %29, i64* %11, align 16
  store i64 %37, i64* %12, align 8
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 3
  store i32 %42, i32* %43, align 4, !tbaa !877
  %44 = load i64, i64* %12, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %10)
  %45 = trunc i64 %29 to i32
  %46 = lshr i64 %29, 32
  %47 = trunc i64 %46 to i32
  %48 = bitcast i8* %2 to i32*
  store i32 %45, i32* %48, align 1, !tbaa !877
  %49 = getelementptr inbounds i8, i8* %2, i64 4
  %50 = bitcast i8* %49 to i32*
  store i32 %47, i32* %50, align 1, !tbaa !877
  %51 = trunc i64 %44 to i32
  %52 = getelementptr inbounds i8, i8* %2, i64 8
  %53 = bitcast i8* %52 to i32*
  store i32 %51, i32* %53, align 1, !tbaa !877
  %54 = lshr i64 %44, 32
  %55 = trunc i64 %54 to i32
  %56 = getelementptr inbounds i8, i8* %2, i64 12
  %57 = bitcast i8* %56 to i32*
  store i32 %55, i32* %57, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp sgt i8 %15, %16
  %18 = sext i1 %17 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8, !tbaa !868
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp sgt i8 %22, %24
  %26 = sext i1 %25 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1, !tbaa !868
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp sgt i8 %30, %32
  %34 = sext i1 %33 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2, !tbaa !868
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1, !tbaa !868
  %41 = icmp sgt i8 %38, %40
  %42 = sext i1 %41 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1, !tbaa !868
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4, !tbaa !868
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4, !tbaa !868
  %49 = icmp sgt i8 %46, %48
  %50 = sext i1 %49 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4, !tbaa !868
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1, !tbaa !868
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1, !tbaa !868
  %57 = icmp sgt i8 %54, %56
  %58 = sext i1 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2, !tbaa !868
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp sgt i8 %62, %64
  %66 = sext i1 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp sgt i8 %70, %72
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1, !tbaa !868
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1, !tbaa !868
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1, !tbaa !868
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1, !tbaa !868
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1, !tbaa !868
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1, !tbaa !868
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1, !tbaa !868
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i8
  %53 = icmp sgt i8 %52, %13
  %54 = sext i1 %53 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %55 = bitcast i64* %6 to i8*
  store i8 %54, i8* %55, align 8, !tbaa !868
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %57 = lshr i64 %3, 8
  %58 = trunc i64 %57 to i8
  %59 = icmp sgt i8 %58, %15
  %60 = sext i1 %59 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %56, i64* %6, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %60, i8* %61, align 1, !tbaa !868
  %62 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp sgt i8 %64, %17
  %66 = sext i1 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %62, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp sgt i8 %70, %72
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %78 = load i8, i8* %77, align 4, !tbaa !868
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4, !tbaa !868
  %81 = icmp sgt i8 %78, %80
  %82 = sext i1 %81 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %82, i8* %83, align 4, !tbaa !868
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %86 = load i8, i8* %85, align 1, !tbaa !868
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %88 = load i8, i8* %87, align 1, !tbaa !868
  %89 = icmp sgt i8 %86, %88
  %90 = sext i1 %89 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %90, i8* %91, align 1, !tbaa !868
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %94 = load i8, i8* %93, align 2, !tbaa !868
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %96 = load i8, i8* %95, align 2, !tbaa !868
  %97 = icmp sgt i8 %94, %96
  %98 = sext i1 %97 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %98, i8* %99, align 2, !tbaa !868
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %104 = load i8, i8* %103, align 1, !tbaa !868
  %105 = icmp sgt i8 %102, %104
  %106 = sext i1 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %109 = lshr i64 %108, 8
  %110 = lshr i64 %108, 16
  %111 = lshr i64 %108, 24
  %112 = lshr i64 %108, 32
  %113 = lshr i64 %108, 40
  %114 = lshr i64 %108, 48
  %115 = lshr i64 %108, 56
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = bitcast i64* %2 to [8 x i8]*
  %125 = bitcast i64* %2 to i8*
  store i8 %116, i8* %125, align 1, !tbaa !868
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  store i8 %117, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  store i8 %118, i8* %127, align 1, !tbaa !868
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  store i8 %119, i8* %128, align 1, !tbaa !868
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  store i8 %120, i8* %129, align 1, !tbaa !868
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  store i8 %121, i8* %130, align 1, !tbaa !868
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  store i8 %122, i8* %131, align 1, !tbaa !868
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  store i8 %123, i8* %132, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp sgt i16 %9, %10
  %12 = sext i1 %11 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8, !tbaa !869
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp sgt i16 %16, %18
  %20 = sext i1 %19 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp sgt i16 %24, %26
  %28 = sext i1 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp sgt i16 %32, %34
  %36 = sext i1 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = trunc i64 %3 to i16
  %17 = icmp sgt i16 %16, %7
  %18 = sext i1 %17 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %21 = lshr i64 %3, 16
  %22 = trunc i64 %21 to i16
  %23 = icmp sgt i16 %22, %9
  %24 = sext i1 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %20, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %24, i16* %25, align 2, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %27 = lshr i64 %3, 32
  %28 = trunc i64 %27 to i16
  %29 = icmp sgt i16 %28, %11
  %30 = sext i1 %29 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %26, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %30, i16* %31, align 4, !tbaa !869
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %33 = lshr i64 %3, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp sgt i16 %34, %13
  %36 = sext i1 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %32, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = icmp sgt i32 %9, %10
  %12 = sext i1 %11 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %4, 32
  %18 = trunc i64 %17 to i32
  %19 = icmp sgt i32 %16, %18
  %20 = sext i1 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 4
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %8) #22
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  %12 = trunc i64 %3 to i32
  %13 = icmp sgt i32 %12, %7
  %14 = sext i1 %13 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i32*
  store i32 %14, i32* %15, align 8, !tbaa !877
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %17 = lshr i64 %3, 32
  %18 = trunc i64 %17 to i32
  %19 = icmp sgt i32 %18, %9
  %20 = sext i1 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %16, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 8
  %13 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %12) #22
  %14 = icmp sgt i64 %7, %11
  %15 = sext i1 %14 to i64
  %16 = icmp sgt i64 %10, %13
  %17 = sext i1 %16 to i64
  %18 = bitcast i8* %2 to i64*
  store i64 %15, i64* %18, align 1, !tbaa !870
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  %20 = bitcast i8* %19 to i64*
  store i64 %17, i64* %20, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = icmp sgt i64 %7, %12
  %17 = sext i1 %16 to i64
  %18 = icmp sgt i64 %10, %15
  %19 = sext i1 %18 to i64
  %20 = bitcast i8* %2 to i64*
  store i64 %17, i64* %20, align 1, !tbaa !870
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %19, i64* %22, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = icmp sgt i16 %56, %18
  %58 = sext i1 %57 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %59 = bitcast <2 x i64>* %6 to i16*
  store i16 %58, i16* %59, align 16, !tbaa !869
  %60 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %61 = lshr i64 %55, 16
  %62 = trunc i64 %61 to i16
  %63 = icmp sgt i16 %62, %20
  %64 = sext i1 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %60, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %64, i16* %65, align 2, !tbaa !869
  %66 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %67 = lshr i64 %55, 32
  %68 = trunc i64 %67 to i16
  %69 = icmp sgt i16 %68, %22
  %70 = sext i1 %69 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %66, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %70, i16* %71, align 4, !tbaa !869
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %74 = load i16, i16* %73, align 2, !tbaa !869
  %75 = icmp sgt i16 %74, %24
  %76 = sext i1 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %76, i16* %77, align 2, !tbaa !869
  %78 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %80 = bitcast i64* %79 to i16*
  %81 = load i16, i16* %80, align 8, !tbaa !869
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %83 = bitcast i64* %82 to i16*
  %84 = load i16, i16* %83, align 8, !tbaa !869
  %85 = icmp sgt i16 %81, %84
  %86 = sext i1 %85 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  store i16 %86, i16* %88, align 8, !tbaa !869
  %89 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %91 = load i16, i16* %90, align 2, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = icmp sgt i16 %91, %93
  %95 = sext i1 %94 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %89, i64* %53, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %95, i16* %96, align 2, !tbaa !869
  %97 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %101 = load i16, i16* %100, align 4, !tbaa !869
  %102 = icmp sgt i16 %99, %101
  %103 = sext i1 %102 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %97, i64* %53, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %103, i16* %104, align 4, !tbaa !869
  %105 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %107 = load i16, i16* %106, align 2, !tbaa !869
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %109 = load i16, i16* %108, align 2, !tbaa !869
  %110 = icmp sgt i16 %107, %109
  %111 = sext i1 %110 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %105, i64* %53, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %111, i16* %112, align 2, !tbaa !869
  %113 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %114 = lshr i64 %78, 16
  %115 = lshr i64 %78, 32
  %116 = lshr i64 %78, 48
  %117 = trunc i64 %78 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = bitcast i8* %2 to i16*
  store i16 %117, i16* %121, align 1, !tbaa !869
  %122 = getelementptr inbounds i8, i8* %2, i64 2
  %123 = bitcast i8* %122 to i16*
  store i16 %118, i16* %123, align 1, !tbaa !869
  %124 = getelementptr inbounds i8, i8* %2, i64 4
  %125 = bitcast i8* %124 to i16*
  store i16 %119, i16* %125, align 1, !tbaa !869
  %126 = getelementptr inbounds i8, i8* %2, i64 6
  %127 = bitcast i8* %126 to i16*
  store i16 %120, i16* %127, align 1, !tbaa !869
  %128 = trunc i64 %113 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 8
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1, !tbaa !869
  %131 = lshr i64 %113, 16
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 10
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1, !tbaa !869
  %135 = lshr i64 %113, 32
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 12
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %113, 48
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 14
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp sgt i16 %25, %27
  %29 = sext i1 %28 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16, !tbaa !869
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp sgt i16 %33, %35
  %37 = sext i1 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp sgt i16 %41, %43
  %45 = sext i1 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp sgt i16 %49, %51
  %53 = sext i1 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2, !tbaa !869
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8, !tbaa !869
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8, !tbaa !869
  %62 = icmp sgt i16 %58, %61
  %63 = sext i1 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8, !tbaa !869
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2, !tbaa !869
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2, !tbaa !869
  %71 = icmp sgt i16 %68, %70
  %72 = sext i1 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4, !tbaa !869
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4, !tbaa !869
  %79 = icmp sgt i16 %76, %78
  %80 = sext i1 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4, !tbaa !869
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2, !tbaa !869
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = icmp sgt i16 %84, %86
  %88 = sext i1 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1, !tbaa !869
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1, !tbaa !869
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1, !tbaa !869
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1, !tbaa !869
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1, !tbaa !869
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1, !tbaa !869
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1, !tbaa !869
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i8
  %93 = icmp sgt i8 %92, %18
  %94 = sext i1 %93 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %95 = bitcast <2 x i64>* %6 to i8*
  store i8 %94, i8* %95, align 16, !tbaa !868
  %96 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %97 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %98 = load i8, i8* %97, align 1, !tbaa !868
  %99 = icmp sgt i8 %98, %20
  %100 = sext i1 %99 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %96, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %100, i8* %101, align 1, !tbaa !868
  %102 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %104 = load i8, i8* %103, align 2, !tbaa !868
  %105 = icmp sgt i8 %104, %22
  %106 = sext i1 %105 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %102, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %106, i8* %107, align 2, !tbaa !868
  %108 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %112 = load i8, i8* %111, align 1, !tbaa !868
  %113 = icmp sgt i8 %110, %112
  %114 = sext i1 %113 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %108, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %118 = load i8, i8* %117, align 4, !tbaa !868
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %120 = load i8, i8* %119, align 4, !tbaa !868
  %121 = icmp sgt i8 %118, %120
  %122 = sext i1 %121 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %116, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %122, i8* %123, align 4, !tbaa !868
  %124 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %126 = load i8, i8* %125, align 1, !tbaa !868
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = icmp sgt i8 %126, %128
  %130 = sext i1 %129 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %124, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %130, i8* %131, align 1, !tbaa !868
  %132 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %134 = load i8, i8* %133, align 2, !tbaa !868
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %136 = load i8, i8* %135, align 2, !tbaa !868
  %137 = icmp sgt i8 %134, %136
  %138 = sext i1 %137 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %132, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %138, i8* %139, align 2, !tbaa !868
  %140 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %142 = load i8, i8* %141, align 1, !tbaa !868
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %144 = load i8, i8* %143, align 1, !tbaa !868
  %145 = icmp sgt i8 %142, %144
  %146 = sext i1 %145 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %140, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %146, i8* %147, align 1, !tbaa !868
  %148 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %150 = bitcast i64* %149 to i8*
  %151 = load i8, i8* %150, align 8, !tbaa !868
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %153 = bitcast i64* %152 to i8*
  %154 = load i8, i8* %153, align 8, !tbaa !868
  %155 = icmp sgt i8 %151, %154
  %156 = sext i1 %155 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  store i8 %156, i8* %158, align 8, !tbaa !868
  %159 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %160 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %161 = load i8, i8* %160, align 1, !tbaa !868
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %163 = load i8, i8* %162, align 1, !tbaa !868
  %164 = icmp sgt i8 %161, %163
  %165 = sext i1 %164 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %159, i64* %89, align 8
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %165, i8* %166, align 1, !tbaa !868
  %167 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %169 = load i8, i8* %168, align 2, !tbaa !868
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %171 = load i8, i8* %170, align 2, !tbaa !868
  %172 = icmp sgt i8 %169, %171
  %173 = sext i1 %172 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %167, i64* %89, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %173, i8* %174, align 2, !tbaa !868
  %175 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %179 = load i8, i8* %178, align 1, !tbaa !868
  %180 = icmp sgt i8 %177, %179
  %181 = sext i1 %180 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %175, i64* %89, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %181, i8* %182, align 1, !tbaa !868
  %183 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %185 = load i8, i8* %184, align 4, !tbaa !868
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %187 = load i8, i8* %186, align 4, !tbaa !868
  %188 = icmp sgt i8 %185, %187
  %189 = sext i1 %188 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %183, i64* %89, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %189, i8* %190, align 4, !tbaa !868
  %191 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %193 = load i8, i8* %192, align 1, !tbaa !868
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp sgt i8 %193, %195
  %197 = sext i1 %196 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %191, i64* %89, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %197, i8* %198, align 1, !tbaa !868
  %199 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %201 = load i8, i8* %200, align 2, !tbaa !868
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %203 = load i8, i8* %202, align 2, !tbaa !868
  %204 = icmp sgt i8 %201, %203
  %205 = sext i1 %204 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %199, i64* %89, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %205, i8* %206, align 2, !tbaa !868
  %207 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %209 = load i8, i8* %208, align 1, !tbaa !868
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %211 = load i8, i8* %210, align 1, !tbaa !868
  %212 = icmp sgt i8 %209, %211
  %213 = sext i1 %212 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %207, i64* %89, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %213, i8* %214, align 1, !tbaa !868
  %215 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %216 = lshr i64 %148, 8
  %217 = lshr i64 %148, 16
  %218 = lshr i64 %148, 24
  %219 = lshr i64 %148, 32
  %220 = lshr i64 %148, 40
  %221 = lshr i64 %148, 48
  %222 = lshr i64 %148, 56
  %223 = trunc i64 %148 to i8
  %224 = trunc i64 %216 to i8
  %225 = trunc i64 %217 to i8
  %226 = trunc i64 %218 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  %230 = trunc i64 %222 to i8
  store i8 %223, i8* %2, align 1, !tbaa !868
  %231 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %224, i8* %231, align 1, !tbaa !868
  %232 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %225, i8* %232, align 1, !tbaa !868
  %233 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %226, i8* %233, align 1, !tbaa !868
  %234 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %227, i8* %234, align 1, !tbaa !868
  %235 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %228, i8* %235, align 1, !tbaa !868
  %236 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %229, i8* %236, align 1, !tbaa !868
  %237 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %230, i8* %237, align 1, !tbaa !868
  %238 = trunc i64 %215 to i8
  %239 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %238, i8* %239, align 1, !tbaa !868
  %240 = lshr i64 %215, 8
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %241, i8* %242, align 1, !tbaa !868
  %243 = lshr i64 %215, 16
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %244, i8* %245, align 1, !tbaa !868
  %246 = lshr i64 %215, 24
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %247, i8* %248, align 1, !tbaa !868
  %249 = lshr i64 %215, 32
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %250, i8* %251, align 1, !tbaa !868
  %252 = lshr i64 %215, 40
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %253, i8* %254, align 1, !tbaa !868
  %255 = lshr i64 %215, 48
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %256, i8* %257, align 1, !tbaa !868
  %258 = lshr i64 %215, 56
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %259, i8* %260, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp sgt i8 %25, %27
  %29 = sext i1 %28 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16, !tbaa !868
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp sgt i8 %33, %35
  %37 = sext i1 %36 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp sgt i8 %41, %43
  %45 = sext i1 %44 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2, !tbaa !868
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1, !tbaa !868
  %52 = icmp sgt i8 %49, %51
  %53 = sext i1 %52 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1, !tbaa !868
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4, !tbaa !868
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4, !tbaa !868
  %60 = icmp sgt i8 %57, %59
  %61 = sext i1 %60 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4, !tbaa !868
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1, !tbaa !868
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1, !tbaa !868
  %68 = icmp sgt i8 %65, %67
  %69 = sext i1 %68 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2, !tbaa !868
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2, !tbaa !868
  %76 = icmp sgt i8 %73, %75
  %77 = sext i1 %76 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2, !tbaa !868
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1, !tbaa !868
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1, !tbaa !868
  %84 = icmp sgt i8 %81, %83
  %85 = sext i1 %84 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1, !tbaa !868
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8, !tbaa !868
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8, !tbaa !868
  %94 = icmp sgt i8 %90, %93
  %95 = sext i1 %94 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8, !tbaa !868
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1, !tbaa !868
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = icmp sgt i8 %100, %102
  %104 = sext i1 %103 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1, !tbaa !868
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2, !tbaa !868
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2, !tbaa !868
  %111 = icmp sgt i8 %108, %110
  %112 = sext i1 %111 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2, !tbaa !868
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1, !tbaa !868
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1, !tbaa !868
  %119 = icmp sgt i8 %116, %118
  %120 = sext i1 %119 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1, !tbaa !868
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4, !tbaa !868
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4, !tbaa !868
  %127 = icmp sgt i8 %124, %126
  %128 = sext i1 %127 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4, !tbaa !868
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1, !tbaa !868
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1, !tbaa !868
  %135 = icmp sgt i8 %132, %134
  %136 = sext i1 %135 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2, !tbaa !868
  %143 = icmp sgt i8 %140, %142
  %144 = sext i1 %143 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2, !tbaa !868
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1, !tbaa !868
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1, !tbaa !868
  %151 = icmp sgt i8 %148, %150
  %152 = sext i1 %151 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1, !tbaa !868
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1, !tbaa !868
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1, !tbaa !868
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1, !tbaa !868
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1, !tbaa !868
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1, !tbaa !868
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1, !tbaa !868
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1, !tbaa !868
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1, !tbaa !868
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1, !tbaa !868
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1, !tbaa !868
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1, !tbaa !868
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1, !tbaa !868
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1, !tbaa !868
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1, !tbaa !868
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 4
  %15 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 8
  %17 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 12
  %19 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %18) #22
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [4 x i32]*
  %24 = trunc i64 %9 to i32
  %25 = icmp sgt i32 %24, %13
  %26 = sext i1 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16, !tbaa !877
  %28 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %29 = lshr i64 %9, 32
  %30 = trunc i64 %29 to i32
  %31 = icmp sgt i32 %30, %15
  %32 = sext i1 %31 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %28, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 1
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = trunc i64 %12 to i32
  %36 = icmp sgt i32 %35, %17
  %37 = sext i1 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8, !tbaa !877
  %40 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %41 = lshr i64 %12, 32
  %42 = trunc i64 %41 to i32
  %43 = icmp sgt i32 %42, %19
  %44 = sext i1 %43 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 %40, i64* %22, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 3
  store i32 %44, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %47 = lshr i64 %34, 32
  %48 = trunc i64 %34 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1, !tbaa !877
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1, !tbaa !877
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPGTDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = trunc i64 %9 to i32
  %23 = trunc i64 %14 to i32
  %24 = icmp sgt i32 %22, %23
  %25 = sext i1 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16, !tbaa !877
  %27 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %14, 32
  %31 = trunc i64 %30 to i32
  %32 = icmp sgt i32 %29, %31
  %33 = sext i1 %32 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %27, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %33, i32* %34, align 4, !tbaa !877
  %35 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %36 = trunc i64 %12 to i32
  %37 = trunc i64 %17 to i32
  %38 = icmp sgt i32 %36, %37
  %39 = sext i1 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %41 = bitcast i64* %40 to i32*
  store i32 %39, i32* %41, align 8, !tbaa !877
  %42 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %43 = lshr i64 %12, 32
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %17, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i32 %44, %46
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 %42, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %48, i32* %49, align 4, !tbaa !877
  %50 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %51 = lshr i64 %35, 32
  %52 = trunc i64 %35 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1, !tbaa !877
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1, !tbaa !877
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  store i64 %4, i64* %9, align 8
  %13 = bitcast i64* %6 to i8*
  %14 = bitcast i64* %6 to [8 x i8]*
  %15 = trunc i64 %3 to i8
  %16 = trunc i64 %4 to i8
  %17 = icmp eq i8 %15, %16
  %18 = sext i1 %17 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i8*
  store i8 %18, i8* %19, align 8, !tbaa !868
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %21 = lshr i64 %3, 8
  %22 = trunc i64 %21 to i8
  %23 = lshr i64 %4, 8
  %24 = trunc i64 %23 to i8
  %25 = icmp eq i8 %22, %24
  %26 = sext i1 %25 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %20, i64* %6, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 1
  store i8 %26, i8* %27, align 1, !tbaa !868
  %28 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %29 = lshr i64 %3, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %4, 16
  %32 = trunc i64 %31 to i8
  %33 = icmp eq i8 %30, %32
  %34 = sext i1 %33 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %28, i64* %6, align 8
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 2
  store i8 %34, i8* %35, align 2, !tbaa !868
  %36 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %37 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %38 = load i8, i8* %37, align 1, !tbaa !868
  %39 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %40 = load i8, i8* %39, align 1, !tbaa !868
  %41 = icmp eq i8 %38, %40
  %42 = sext i1 %41 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %36, i64* %6, align 8
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 3
  store i8 %42, i8* %43, align 1, !tbaa !868
  %44 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %45 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %46 = load i8, i8* %45, align 4, !tbaa !868
  %47 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %48 = load i8, i8* %47, align 4, !tbaa !868
  %49 = icmp eq i8 %46, %48
  %50 = sext i1 %49 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %44, i64* %6, align 8
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 4
  store i8 %50, i8* %51, align 4, !tbaa !868
  %52 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %53 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %54 = load i8, i8* %53, align 1, !tbaa !868
  %55 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %56 = load i8, i8* %55, align 1, !tbaa !868
  %57 = icmp eq i8 %54, %56
  %58 = sext i1 %57 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %52, i64* %6, align 8
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 5
  store i8 %58, i8* %59, align 1, !tbaa !868
  %60 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %61 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %62 = load i8, i8* %61, align 2, !tbaa !868
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp eq i8 %62, %64
  %66 = sext i1 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %60, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 6
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp eq i8 %70, %72
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %13)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 7
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %13)
  %77 = lshr i64 %76, 8
  %78 = lshr i64 %76, 16
  %79 = lshr i64 %76, 24
  %80 = lshr i64 %76, 32
  %81 = lshr i64 %76, 40
  %82 = lshr i64 %76, 48
  %83 = lshr i64 %76, 56
  %84 = trunc i64 %76 to i8
  %85 = trunc i64 %77 to i8
  %86 = trunc i64 %78 to i8
  %87 = trunc i64 %79 to i8
  %88 = trunc i64 %80 to i8
  %89 = trunc i64 %81 to i8
  %90 = trunc i64 %82 to i8
  %91 = trunc i64 %83 to i8
  %92 = bitcast i64* %2 to [8 x i8]*
  %93 = bitcast i64* %2 to i8*
  store i8 %84, i8* %93, align 1, !tbaa !868
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 1
  store i8 %85, i8* %94, align 1, !tbaa !868
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 2
  store i8 %86, i8* %95, align 1, !tbaa !868
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 3
  store i8 %87, i8* %96, align 1, !tbaa !868
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 4
  store i8 %88, i8* %97, align 1, !tbaa !868
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 5
  store i8 %89, i8* %98, align 1, !tbaa !868
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 6
  store i8 %90, i8* %99, align 1, !tbaa !868
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i64 0, i64 7
  store i8 %91, i8* %100, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct.uint8v8_t*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.uint8v8_t*
  %11 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %11) #23
  store i64 %3, i64* %7, align 8
  %12 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* nonnull %12) #23
  %13 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 1
  %15 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 2
  %17 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 3
  %19 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  %20 = add i64 %4, 4
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %22 = add i64 %4, 5
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %4, 6
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %4, 7
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = zext i8 %27 to i64
  %29 = shl nuw i64 %28, 56
  %30 = zext i8 %25 to i64
  %31 = shl nuw nsw i64 %30, 48
  %32 = zext i8 %23 to i64
  %33 = shl nuw nsw i64 %32, 40
  %34 = zext i8 %21 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i8 %19 to i64
  %37 = shl nuw nsw i64 %36, 24
  %38 = zext i8 %17 to i64
  %39 = shl nuw nsw i64 %38, 16
  %40 = zext i8 %15 to i64
  %41 = shl nuw nsw i64 %40, 8
  %42 = zext i8 %13 to i64
  %43 = or i64 %41, %42
  %44 = or i64 %43, %39
  %45 = or i64 %44, %37
  %46 = or i64 %45, %35
  %47 = or i64 %46, %33
  %48 = or i64 %47, %31
  %49 = or i64 %48, %29
  store i64 %49, i64* %9, align 8
  %50 = bitcast i64* %6 to i8*
  %51 = bitcast i64* %6 to [8 x i8]*
  %52 = trunc i64 %3 to i8
  %53 = icmp eq i8 %52, %13
  %54 = sext i1 %53 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 0, i64* %6, align 8
  %55 = bitcast i64* %6 to i8*
  store i8 %54, i8* %55, align 8, !tbaa !868
  %56 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %57 = lshr i64 %3, 8
  %58 = trunc i64 %57 to i8
  %59 = icmp eq i8 %58, %15
  %60 = sext i1 %59 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %56, i64* %6, align 8
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 1
  store i8 %60, i8* %61, align 1, !tbaa !868
  %62 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %63 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 2
  %64 = load i8, i8* %63, align 2, !tbaa !868
  %65 = icmp eq i8 %64, %17
  %66 = sext i1 %65 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %62, i64* %6, align 8
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 2
  store i8 %66, i8* %67, align 2, !tbaa !868
  %68 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %69 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 3
  %70 = load i8, i8* %69, align 1, !tbaa !868
  %71 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 3
  %72 = load i8, i8* %71, align 1, !tbaa !868
  %73 = icmp eq i8 %70, %72
  %74 = sext i1 %73 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %68, i64* %6, align 8
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 3
  store i8 %74, i8* %75, align 1, !tbaa !868
  %76 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %77 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 4
  %78 = load i8, i8* %77, align 4, !tbaa !868
  %79 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 4
  %80 = load i8, i8* %79, align 4, !tbaa !868
  %81 = icmp eq i8 %78, %80
  %82 = sext i1 %81 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %76, i64* %6, align 8
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 4
  store i8 %82, i8* %83, align 4, !tbaa !868
  %84 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %85 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 5
  %86 = load i8, i8* %85, align 1, !tbaa !868
  %87 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 5
  %88 = load i8, i8* %87, align 1, !tbaa !868
  %89 = icmp eq i8 %86, %88
  %90 = sext i1 %89 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %84, i64* %6, align 8
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 5
  store i8 %90, i8* %91, align 1, !tbaa !868
  %92 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %93 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 6
  %94 = load i8, i8* %93, align 2, !tbaa !868
  %95 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 6
  %96 = load i8, i8* %95, align 2, !tbaa !868
  %97 = icmp eq i8 %94, %96
  %98 = sext i1 %97 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %92, i64* %6, align 8
  %99 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 6
  store i8 %98, i8* %99, align 2, !tbaa !868
  %100 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %101 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %8, i64 0, i32 0, i64 7
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = getelementptr inbounds %struct.uint8v8_t, %struct.uint8v8_t* %10, i64 0, i32 0, i64 7
  %104 = load i8, i8* %103, align 1, !tbaa !868
  %105 = icmp eq i8 %102, %104
  %106 = sext i1 %105 to i8
  call void @llvm.lifetime.start(i64 8, i8* nonnull %50)
  store i64 %100, i64* %6, align 8
  %107 = getelementptr inbounds [8 x i8], [8 x i8]* %51, i64 0, i64 7
  store i8 %106, i8* %107, align 1, !tbaa !868
  %108 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %50)
  %109 = lshr i64 %108, 8
  %110 = lshr i64 %108, 16
  %111 = lshr i64 %108, 24
  %112 = lshr i64 %108, 32
  %113 = lshr i64 %108, 40
  %114 = lshr i64 %108, 48
  %115 = lshr i64 %108, 56
  %116 = trunc i64 %108 to i8
  %117 = trunc i64 %109 to i8
  %118 = trunc i64 %110 to i8
  %119 = trunc i64 %111 to i8
  %120 = trunc i64 %112 to i8
  %121 = trunc i64 %113 to i8
  %122 = trunc i64 %114 to i8
  %123 = trunc i64 %115 to i8
  %124 = bitcast i64* %2 to [8 x i8]*
  %125 = bitcast i64* %2 to i8*
  store i8 %116, i8* %125, align 1, !tbaa !868
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 1
  store i8 %117, i8* %126, align 1, !tbaa !868
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 2
  store i8 %118, i8* %127, align 1, !tbaa !868
  %128 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 3
  store i8 %119, i8* %128, align 1, !tbaa !868
  %129 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 4
  store i8 %120, i8* %129, align 1, !tbaa !868
  %130 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 5
  store i8 %121, i8* %130, align 1, !tbaa !868
  %131 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 6
  store i8 %122, i8* %131, align 1, !tbaa !868
  %132 = getelementptr inbounds [8 x i8], [8 x i8]* %124, i64 0, i64 7
  store i8 %123, i8* %132, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 8, i8* nonnull %12) #23
  call void @llvm.lifetime.end(i64 8, i8* nonnull %11) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [4 x i16]*
  %9 = trunc i64 %3 to i16
  %10 = trunc i64 %4 to i16
  %11 = icmp eq i16 %9, %10
  %12 = sext i1 %11 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i16*
  store i16 %12, i16* %13, align 8, !tbaa !869
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 16
  %16 = trunc i64 %15 to i16
  %17 = lshr i64 %4, 16
  %18 = trunc i64 %17 to i16
  %19 = icmp eq i16 %16, %18
  %20 = sext i1 %19 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  store i16 %20, i16* %21, align 2, !tbaa !869
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %3, 32
  %24 = trunc i64 %23 to i16
  %25 = lshr i64 %4, 32
  %26 = trunc i64 %25 to i16
  %27 = icmp eq i16 %24, %26
  %28 = sext i1 %27 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %22, i64* %6, align 8
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  store i16 %28, i16* %29, align 4, !tbaa !869
  %30 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %31 = lshr i64 %3, 48
  %32 = trunc i64 %31 to i16
  %33 = lshr i64 %4, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp eq i16 %32, %34
  %36 = sext i1 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %30, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 2
  %9 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %8) #22
  %10 = add i64 %4, 4
  %11 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %10) #22
  %12 = add i64 %4, 6
  %13 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %12) #22
  %14 = bitcast i64* %6 to i8*
  %15 = bitcast i64* %6 to [4 x i16]*
  %16 = trunc i64 %3 to i16
  %17 = icmp eq i16 %16, %7
  %18 = sext i1 %17 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 0, i64* %6, align 8
  %19 = bitcast i64* %6 to i16*
  store i16 %18, i16* %19, align 8, !tbaa !869
  %20 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %21 = lshr i64 %3, 16
  %22 = trunc i64 %21 to i16
  %23 = icmp eq i16 %22, %9
  %24 = sext i1 %23 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %20, i64* %6, align 8
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 1
  store i16 %24, i16* %25, align 2, !tbaa !869
  %26 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %27 = lshr i64 %3, 32
  %28 = trunc i64 %27 to i16
  %29 = icmp eq i16 %28, %11
  %30 = sext i1 %29 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %26, i64* %6, align 8
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 2
  store i16 %30, i16* %31, align 4, !tbaa !869
  %32 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %33 = lshr i64 %3, 48
  %34 = trunc i64 %33 to i16
  %35 = icmp eq i16 %34, %13
  %36 = sext i1 %35 to i16
  call void @llvm.lifetime.start(i64 8, i8* nonnull %14)
  store i64 %32, i64* %6, align 8
  %37 = getelementptr inbounds [4 x i16], [4 x i16]* %15, i64 0, i64 3
  store i16 %36, i16* %37, align 2, !tbaa !869
  %38 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14)
  %39 = lshr i64 %38, 16
  %40 = lshr i64 %38, 32
  %41 = lshr i64 %38, 48
  %42 = trunc i64 %38 to i16
  %43 = trunc i64 %39 to i16
  %44 = trunc i64 %40 to i16
  %45 = trunc i64 %41 to i16
  %46 = bitcast i64* %2 to [4 x i16]*
  %47 = bitcast i64* %2 to i16*
  store i16 %42, i16* %47, align 1, !tbaa !869
  %48 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 1
  store i16 %43, i16* %48, align 1, !tbaa !869
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 2
  store i16 %44, i16* %49, align 1, !tbaa !869
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %46, i64 0, i64 3
  store i16 %45, i16* %50, align 1, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI4RVnWI7vec64_tE3RVnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to i8*
  %8 = bitcast i64* %6 to [2 x i32]*
  %9 = trunc i64 %3 to i32
  %10 = trunc i64 %4 to i32
  %11 = icmp eq i32 %9, %10
  %12 = sext i1 %11 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %6 to i32*
  store i32 %12, i32* %13, align 8, !tbaa !877
  %14 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %15 = lshr i64 %3, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %4, 32
  %18 = trunc i64 %17 to i32
  %19 = icmp eq i32 %16, %18
  %20 = sext i1 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %7)
  store i64 %14, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %7)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI4RVnWI7vec64_tE3RVnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i64* nocapture, i64, i64) #0 {
  %6 = alloca i64, align 8
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = add i64 %4, 4
  %9 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %8) #22
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %6 to [2 x i32]*
  %12 = trunc i64 %3 to i32
  %13 = icmp eq i32 %12, %7
  %14 = sext i1 %13 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 0, i64* %6, align 8
  %15 = bitcast i64* %6 to i32*
  store i32 %14, i32* %15, align 8, !tbaa !877
  %16 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %17 = lshr i64 %3, 32
  %18 = trunc i64 %17 to i32
  %19 = icmp eq i32 %18, %9
  %20 = sext i1 %19 to i32
  call void @llvm.lifetime.start(i64 8, i8* nonnull %10)
  store i64 %16, i64* %6, align 8
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !877
  %22 = load i64, i64* %6, align 8
  call void @llvm.lifetime.end(i64 8, i8* nonnull %10)
  %23 = lshr i64 %22, 32
  %24 = trunc i64 %22 to i32
  %25 = trunc i64 %23 to i32
  %26 = bitcast i64* %2 to [2 x i32]*
  %27 = bitcast i64* %2 to i32*
  store i32 %24, i32* %27, align 1, !tbaa !877
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i64 0, i64 1
  store i32 %25, i32* %28, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQQI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %12 = add i64 %4, 8
  %13 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %12) #22
  %14 = icmp eq i64 %7, %11
  %15 = sext i1 %14 to i64
  %16 = icmp eq i64 %10, %13
  %17 = sext i1 %16 to i64
  %18 = bitcast i8* %2 to i64*
  store i64 %15, i64* %18, align 1, !tbaa !870
  %19 = getelementptr inbounds i8, i8* %2, i64 8
  %20 = bitcast i8* %19 to i64*
  store i64 %17, i64* %20, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQQI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = getelementptr inbounds i8, i8* %4, i64 8
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = icmp eq i64 %7, %12
  %17 = sext i1 %16 to i64
  %18 = icmp eq i64 %10, %15
  %19 = sext i1 %18 to i64
  %20 = bitcast i8* %2 to i64*
  store i64 %17, i64* %20, align 1, !tbaa !870
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 %19, i64* %22, align 1, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 2
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 4
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 6
  %24 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 8
  %26 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 10
  %28 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 12
  %30 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 14
  %32 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %31) #22
  %33 = insertelement <2 x i16> undef, i16 %24, i32 0
  %34 = insertelement <2 x i16> %33, i16 %32, i32 1
  %35 = zext <2 x i16> %34 to <2 x i64>
  %36 = shl nuw <2 x i64> %35, <i64 48, i64 48>
  %37 = insertelement <2 x i16> undef, i16 %22, i32 0
  %38 = insertelement <2 x i16> %37, i16 %30, i32 1
  %39 = zext <2 x i16> %38 to <2 x i64>
  %40 = shl nuw nsw <2 x i64> %39, <i64 32, i64 32>
  %41 = insertelement <2 x i16> undef, i16 %20, i32 0
  %42 = insertelement <2 x i16> %41, i16 %28, i32 1
  %43 = zext <2 x i16> %42 to <2 x i64>
  %44 = shl nuw nsw <2 x i64> %43, <i64 16, i64 16>
  %45 = insertelement <2 x i16> undef, i16 %18, i32 0
  %46 = insertelement <2 x i16> %45, i16 %26, i32 1
  %47 = zext <2 x i16> %46 to <2 x i64>
  %48 = or <2 x i64> %44, %47
  %49 = or <2 x i64> %48, %40
  %50 = or <2 x i64> %49, %36
  store <2 x i64> %50, <2 x i64>* %11, align 16
  %51 = bitcast <2 x i64>* %6 to i8*
  %52 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast <2 x i64>* %6 to [8 x i16]*
  %55 = extractelement <2 x i64> %16, i32 0
  %56 = trunc i64 %55 to i16
  %57 = icmp eq i16 %56, %18
  %58 = sext i1 %57 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %59 = bitcast <2 x i64>* %6 to i16*
  store i16 %58, i16* %59, align 16, !tbaa !869
  %60 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %61 = lshr i64 %55, 16
  %62 = trunc i64 %61 to i16
  %63 = icmp eq i16 %62, %20
  %64 = sext i1 %63 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %60, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 1
  store i16 %64, i16* %65, align 2, !tbaa !869
  %66 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %67 = lshr i64 %55, 32
  %68 = trunc i64 %67 to i16
  %69 = icmp eq i16 %68, %22
  %70 = sext i1 %69 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %66, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 2
  store i16 %70, i16* %71, align 4, !tbaa !869
  %72 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %73 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 3
  %74 = load i16, i16* %73, align 2, !tbaa !869
  %75 = icmp eq i16 %74, %24
  %76 = sext i1 %75 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %72, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 3
  store i16 %76, i16* %77, align 2, !tbaa !869
  %78 = load i64, i64* %52, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %80 = bitcast i64* %79 to i16*
  %81 = load i16, i16* %80, align 8, !tbaa !869
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %83 = bitcast i64* %82 to i16*
  %84 = load i16, i16* %83, align 8, !tbaa !869
  %85 = icmp eq i16 %81, %84
  %86 = sext i1 %85 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 0, i64* %53, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %88 = bitcast i64* %87 to i16*
  store i16 %86, i16* %88, align 8, !tbaa !869
  %89 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %90 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %91 = load i16, i16* %90, align 2, !tbaa !869
  %92 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %93 = load i16, i16* %92, align 2, !tbaa !869
  %94 = icmp eq i16 %91, %93
  %95 = sext i1 %94 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %89, i64* %53, align 8
  %96 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 5
  store i16 %95, i16* %96, align 2, !tbaa !869
  %97 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %98 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %99 = load i16, i16* %98, align 4, !tbaa !869
  %100 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %101 = load i16, i16* %100, align 4, !tbaa !869
  %102 = icmp eq i16 %99, %101
  %103 = sext i1 %102 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %97, i64* %53, align 8
  %104 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 6
  store i16 %103, i16* %104, align 4, !tbaa !869
  %105 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %106 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %107 = load i16, i16* %106, align 2, !tbaa !869
  %108 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %109 = load i16, i16* %108, align 2, !tbaa !869
  %110 = icmp eq i16 %107, %109
  %111 = sext i1 %110 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %51)
  store i64 %78, i64* %52, align 16
  store i64 %105, i64* %53, align 8
  %112 = getelementptr inbounds [8 x i16], [8 x i16]* %54, i64 0, i64 7
  store i16 %111, i16* %112, align 2, !tbaa !869
  %113 = load i64, i64* %53, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %51)
  %114 = lshr i64 %78, 16
  %115 = lshr i64 %78, 32
  %116 = lshr i64 %78, 48
  %117 = trunc i64 %78 to i16
  %118 = trunc i64 %114 to i16
  %119 = trunc i64 %115 to i16
  %120 = trunc i64 %116 to i16
  %121 = bitcast i8* %2 to i16*
  store i16 %117, i16* %121, align 1, !tbaa !869
  %122 = getelementptr inbounds i8, i8* %2, i64 2
  %123 = bitcast i8* %122 to i16*
  store i16 %118, i16* %123, align 1, !tbaa !869
  %124 = getelementptr inbounds i8, i8* %2, i64 4
  %125 = bitcast i8* %124 to i16*
  store i16 %119, i16* %125, align 1, !tbaa !869
  %126 = getelementptr inbounds i8, i8* %2, i64 6
  %127 = bitcast i8* %126 to i16*
  store i16 %120, i16* %127, align 1, !tbaa !869
  %128 = trunc i64 %113 to i16
  %129 = getelementptr inbounds i8, i8* %2, i64 8
  %130 = bitcast i8* %129 to i16*
  store i16 %128, i16* %130, align 1, !tbaa !869
  %131 = lshr i64 %113, 16
  %132 = trunc i64 %131 to i16
  %133 = getelementptr inbounds i8, i8* %2, i64 10
  %134 = bitcast i8* %133 to i16*
  store i16 %132, i16* %134, align 1, !tbaa !869
  %135 = lshr i64 %113, 32
  %136 = trunc i64 %135 to i16
  %137 = getelementptr inbounds i8, i8* %2, i64 12
  %138 = bitcast i8* %137 to i16*
  store i16 %136, i16* %138, align 1, !tbaa !869
  %139 = lshr i64 %113, 48
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds i8, i8* %2, i64 14
  %142 = bitcast i8* %141 to i16*
  store i16 %140, i16* %142, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQWI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint16v8_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint16v8_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [8 x i16]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i16
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i16
  %28 = icmp eq i16 %25, %27
  %29 = sext i1 %28 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i16*
  store i16 %29, i16* %30, align 16, !tbaa !869
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 16
  %33 = trunc i64 %32 to i16
  %34 = lshr i64 %26, 16
  %35 = trunc i64 %34 to i16
  %36 = icmp eq i16 %33, %35
  %37 = sext i1 %36 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 1
  store i16 %37, i16* %38, align 2, !tbaa !869
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 32
  %41 = trunc i64 %40 to i16
  %42 = lshr i64 %26, 32
  %43 = trunc i64 %42 to i16
  %44 = icmp eq i16 %41, %43
  %45 = sext i1 %44 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 2
  store i16 %45, i16* %46, align 4, !tbaa !869
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = lshr i64 %24, 48
  %49 = trunc i64 %48 to i16
  %50 = lshr i64 %26, 48
  %51 = trunc i64 %50 to i16
  %52 = icmp eq i16 %49, %51
  %53 = sext i1 %52 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 3
  store i16 %53, i16* %54, align 2, !tbaa !869
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %57 = bitcast i64* %56 to i16*
  %58 = load i16, i16* %57, align 8, !tbaa !869
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %60 = bitcast i64* %59 to i16*
  %61 = load i16, i16* %60, align 8, !tbaa !869
  %62 = icmp eq i16 %58, %61
  %63 = sext i1 %62 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %65 = bitcast i64* %64 to i16*
  store i16 %63, i16* %65, align 8, !tbaa !869
  %66 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %67 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 5
  %68 = load i16, i16* %67, align 2, !tbaa !869
  %69 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 5
  %70 = load i16, i16* %69, align 2, !tbaa !869
  %71 = icmp eq i16 %68, %70
  %72 = sext i1 %71 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %66, i64* %22, align 8
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 5
  store i16 %72, i16* %73, align 2, !tbaa !869
  %74 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %75 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 6
  %76 = load i16, i16* %75, align 4, !tbaa !869
  %77 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 6
  %78 = load i16, i16* %77, align 4, !tbaa !869
  %79 = icmp eq i16 %76, %78
  %80 = sext i1 %79 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %74, i64* %22, align 8
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 6
  store i16 %80, i16* %81, align 4, !tbaa !869
  %82 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %83 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %10, i64 0, i32 0, i64 7
  %84 = load i16, i16* %83, align 2, !tbaa !869
  %85 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %13, i64 0, i32 0, i64 7
  %86 = load i16, i16* %85, align 2, !tbaa !869
  %87 = icmp eq i16 %84, %86
  %88 = sext i1 %87 to i16
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 %82, i64* %22, align 8
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %23, i64 0, i64 7
  store i16 %88, i16* %89, align 2, !tbaa !869
  %90 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %91 = lshr i64 %55, 16
  %92 = lshr i64 %55, 32
  %93 = lshr i64 %55, 48
  %94 = trunc i64 %55 to i16
  %95 = trunc i64 %91 to i16
  %96 = trunc i64 %92 to i16
  %97 = trunc i64 %93 to i16
  %98 = bitcast i8* %2 to i16*
  store i16 %94, i16* %98, align 1, !tbaa !869
  %99 = getelementptr inbounds i8, i8* %2, i64 2
  %100 = bitcast i8* %99 to i16*
  store i16 %95, i16* %100, align 1, !tbaa !869
  %101 = getelementptr inbounds i8, i8* %2, i64 4
  %102 = bitcast i8* %101 to i16*
  store i16 %96, i16* %102, align 1, !tbaa !869
  %103 = getelementptr inbounds i8, i8* %2, i64 6
  %104 = bitcast i8* %103 to i16*
  store i16 %97, i16* %104, align 1, !tbaa !869
  %105 = trunc i64 %90 to i16
  %106 = getelementptr inbounds i8, i8* %2, i64 8
  %107 = bitcast i8* %106 to i16*
  store i16 %105, i16* %107, align 1, !tbaa !869
  %108 = lshr i64 %90, 16
  %109 = trunc i64 %108 to i16
  %110 = getelementptr inbounds i8, i8* %2, i64 10
  %111 = bitcast i8* %110 to i16*
  store i16 %109, i16* %111, align 1, !tbaa !869
  %112 = lshr i64 %90, 32
  %113 = trunc i64 %112 to i16
  %114 = getelementptr inbounds i8, i8* %2, i64 12
  %115 = bitcast i8* %114 to i16*
  store i16 %113, i16* %115, align 1, !tbaa !869
  %116 = lshr i64 %90, 48
  %117 = trunc i64 %116 to i16
  %118 = getelementptr inbounds i8, i8* %2, i64 14
  %119 = bitcast i8* %118 to i16*
  store i16 %117, i16* %119, align 1, !tbaa !869
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %19 = add i64 %4, 1
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %21 = add i64 %4, 2
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %21) #22
  %23 = add i64 %4, 3
  %24 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %23) #22
  %25 = add i64 %4, 4
  %26 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %25) #22
  %27 = add i64 %4, 5
  %28 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %27) #22
  %29 = add i64 %4, 6
  %30 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %29) #22
  %31 = add i64 %4, 7
  %32 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %31) #22
  %33 = add i64 %4, 8
  %34 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %33) #22
  %35 = add i64 %4, 9
  %36 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %35) #22
  %37 = add i64 %4, 10
  %38 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %37) #22
  %39 = add i64 %4, 11
  %40 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %39) #22
  %41 = add i64 %4, 12
  %42 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %41) #22
  %43 = add i64 %4, 13
  %44 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %43) #22
  %45 = add i64 %4, 14
  %46 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %45) #22
  %47 = add i64 %4, 15
  %48 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %47) #22
  %49 = insertelement <2 x i8> undef, i8 %32, i32 0
  %50 = insertelement <2 x i8> %49, i8 %48, i32 1
  %51 = zext <2 x i8> %50 to <2 x i64>
  %52 = shl nuw <2 x i64> %51, <i64 56, i64 56>
  %53 = insertelement <2 x i8> undef, i8 %30, i32 0
  %54 = insertelement <2 x i8> %53, i8 %46, i32 1
  %55 = zext <2 x i8> %54 to <2 x i64>
  %56 = shl nuw nsw <2 x i64> %55, <i64 48, i64 48>
  %57 = insertelement <2 x i8> undef, i8 %28, i32 0
  %58 = insertelement <2 x i8> %57, i8 %44, i32 1
  %59 = zext <2 x i8> %58 to <2 x i64>
  %60 = shl nuw nsw <2 x i64> %59, <i64 40, i64 40>
  %61 = insertelement <2 x i8> undef, i8 %26, i32 0
  %62 = insertelement <2 x i8> %61, i8 %42, i32 1
  %63 = zext <2 x i8> %62 to <2 x i64>
  %64 = shl nuw nsw <2 x i64> %63, <i64 32, i64 32>
  %65 = insertelement <2 x i8> undef, i8 %24, i32 0
  %66 = insertelement <2 x i8> %65, i8 %40, i32 1
  %67 = zext <2 x i8> %66 to <2 x i64>
  %68 = shl nuw nsw <2 x i64> %67, <i64 24, i64 24>
  %69 = insertelement <2 x i8> undef, i8 %22, i32 0
  %70 = insertelement <2 x i8> %69, i8 %38, i32 1
  %71 = zext <2 x i8> %70 to <2 x i64>
  %72 = shl nuw nsw <2 x i64> %71, <i64 16, i64 16>
  %73 = insertelement <2 x i8> undef, i8 %20, i32 0
  %74 = insertelement <2 x i8> %73, i8 %36, i32 1
  %75 = zext <2 x i8> %74 to <2 x i64>
  %76 = shl nuw nsw <2 x i64> %75, <i64 8, i64 8>
  %77 = insertelement <2 x i8> undef, i8 %18, i32 0
  %78 = insertelement <2 x i8> %77, i8 %34, i32 1
  %79 = zext <2 x i8> %78 to <2 x i64>
  %80 = or <2 x i64> %76, %79
  %81 = or <2 x i64> %80, %72
  %82 = or <2 x i64> %81, %68
  %83 = or <2 x i64> %82, %64
  %84 = or <2 x i64> %83, %60
  %85 = or <2 x i64> %84, %56
  %86 = or <2 x i64> %85, %52
  store <2 x i64> %86, <2 x i64>* %11, align 16
  %87 = bitcast <2 x i64>* %6 to i8*
  %88 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = bitcast <2 x i64>* %6 to [16 x i8]*
  %91 = extractelement <2 x i64> %16, i32 0
  %92 = trunc i64 %91 to i8
  %93 = icmp eq i8 %92, %18
  %94 = sext i1 %93 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %95 = bitcast <2 x i64>* %6 to i8*
  store i8 %94, i8* %95, align 16, !tbaa !868
  %96 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %97 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 1
  %98 = load i8, i8* %97, align 1, !tbaa !868
  %99 = icmp eq i8 %98, %20
  %100 = sext i1 %99 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %96, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 1
  store i8 %100, i8* %101, align 1, !tbaa !868
  %102 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %103 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 2
  %104 = load i8, i8* %103, align 2, !tbaa !868
  %105 = icmp eq i8 %104, %22
  %106 = sext i1 %105 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %102, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 2
  store i8 %106, i8* %107, align 2, !tbaa !868
  %108 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %110 = load i8, i8* %109, align 1, !tbaa !868
  %111 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %112 = load i8, i8* %111, align 1, !tbaa !868
  %113 = icmp eq i8 %110, %112
  %114 = sext i1 %113 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %108, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 3
  store i8 %114, i8* %115, align 1, !tbaa !868
  %116 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %118 = load i8, i8* %117, align 4, !tbaa !868
  %119 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %120 = load i8, i8* %119, align 4, !tbaa !868
  %121 = icmp eq i8 %118, %120
  %122 = sext i1 %121 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %116, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 4
  store i8 %122, i8* %123, align 4, !tbaa !868
  %124 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %126 = load i8, i8* %125, align 1, !tbaa !868
  %127 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %128 = load i8, i8* %127, align 1, !tbaa !868
  %129 = icmp eq i8 %126, %128
  %130 = sext i1 %129 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %124, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 5
  store i8 %130, i8* %131, align 1, !tbaa !868
  %132 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %134 = load i8, i8* %133, align 2, !tbaa !868
  %135 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %136 = load i8, i8* %135, align 2, !tbaa !868
  %137 = icmp eq i8 %134, %136
  %138 = sext i1 %137 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %132, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 6
  store i8 %138, i8* %139, align 2, !tbaa !868
  %140 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %142 = load i8, i8* %141, align 1, !tbaa !868
  %143 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %144 = load i8, i8* %143, align 1, !tbaa !868
  %145 = icmp eq i8 %142, %144
  %146 = sext i1 %145 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %140, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 7
  store i8 %146, i8* %147, align 1, !tbaa !868
  %148 = load i64, i64* %88, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %150 = bitcast i64* %149 to i8*
  %151 = load i8, i8* %150, align 8, !tbaa !868
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %153 = bitcast i64* %152 to i8*
  %154 = load i8, i8* %153, align 8, !tbaa !868
  %155 = icmp eq i8 %151, %154
  %156 = sext i1 %155 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 0, i64* %89, align 8
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %158 = bitcast i64* %157 to i8*
  store i8 %156, i8* %158, align 8, !tbaa !868
  %159 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %160 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %161 = load i8, i8* %160, align 1, !tbaa !868
  %162 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %163 = load i8, i8* %162, align 1, !tbaa !868
  %164 = icmp eq i8 %161, %163
  %165 = sext i1 %164 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %159, i64* %89, align 8
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 9
  store i8 %165, i8* %166, align 1, !tbaa !868
  %167 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %168 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %169 = load i8, i8* %168, align 2, !tbaa !868
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %171 = load i8, i8* %170, align 2, !tbaa !868
  %172 = icmp eq i8 %169, %171
  %173 = sext i1 %172 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %167, i64* %89, align 8
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 10
  store i8 %173, i8* %174, align 2, !tbaa !868
  %175 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %176 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %177 = load i8, i8* %176, align 1, !tbaa !868
  %178 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %179 = load i8, i8* %178, align 1, !tbaa !868
  %180 = icmp eq i8 %177, %179
  %181 = sext i1 %180 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %175, i64* %89, align 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 11
  store i8 %181, i8* %182, align 1, !tbaa !868
  %183 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %185 = load i8, i8* %184, align 4, !tbaa !868
  %186 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %187 = load i8, i8* %186, align 4, !tbaa !868
  %188 = icmp eq i8 %185, %187
  %189 = sext i1 %188 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %183, i64* %89, align 8
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 12
  store i8 %189, i8* %190, align 4, !tbaa !868
  %191 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %192 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %193 = load i8, i8* %192, align 1, !tbaa !868
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp eq i8 %193, %195
  %197 = sext i1 %196 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %191, i64* %89, align 8
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 13
  store i8 %197, i8* %198, align 1, !tbaa !868
  %199 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %200 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %201 = load i8, i8* %200, align 2, !tbaa !868
  %202 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %203 = load i8, i8* %202, align 2, !tbaa !868
  %204 = icmp eq i8 %201, %203
  %205 = sext i1 %204 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %199, i64* %89, align 8
  %206 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 14
  store i8 %205, i8* %206, align 2, !tbaa !868
  %207 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %208 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %209 = load i8, i8* %208, align 1, !tbaa !868
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %211 = load i8, i8* %210, align 1, !tbaa !868
  %212 = icmp eq i8 %209, %211
  %213 = sext i1 %212 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %87)
  store i64 %148, i64* %88, align 16
  store i64 %207, i64* %89, align 8
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %90, i64 0, i64 15
  store i8 %213, i8* %214, align 1, !tbaa !868
  %215 = load i64, i64* %89, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %87)
  %216 = lshr i64 %148, 8
  %217 = lshr i64 %148, 16
  %218 = lshr i64 %148, 24
  %219 = lshr i64 %148, 32
  %220 = lshr i64 %148, 40
  %221 = lshr i64 %148, 48
  %222 = lshr i64 %148, 56
  %223 = trunc i64 %148 to i8
  %224 = trunc i64 %216 to i8
  %225 = trunc i64 %217 to i8
  %226 = trunc i64 %218 to i8
  %227 = trunc i64 %219 to i8
  %228 = trunc i64 %220 to i8
  %229 = trunc i64 %221 to i8
  %230 = trunc i64 %222 to i8
  store i8 %223, i8* %2, align 1, !tbaa !868
  %231 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %224, i8* %231, align 1, !tbaa !868
  %232 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %225, i8* %232, align 1, !tbaa !868
  %233 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %226, i8* %233, align 1, !tbaa !868
  %234 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %227, i8* %234, align 1, !tbaa !868
  %235 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %228, i8* %235, align 1, !tbaa !868
  %236 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %229, i8* %236, align 1, !tbaa !868
  %237 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %230, i8* %237, align 1, !tbaa !868
  %238 = trunc i64 %215 to i8
  %239 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %238, i8* %239, align 1, !tbaa !868
  %240 = lshr i64 %215, 8
  %241 = trunc i64 %240 to i8
  %242 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %241, i8* %242, align 1, !tbaa !868
  %243 = lshr i64 %215, 16
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %244, i8* %245, align 1, !tbaa !868
  %246 = lshr i64 %215, 24
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %247, i8* %248, align 1, !tbaa !868
  %249 = lshr i64 %215, 32
  %250 = trunc i64 %249 to i8
  %251 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %250, i8* %251, align 1, !tbaa !868
  %252 = lshr i64 %215, 40
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %253, i8* %254, align 1, !tbaa !868
  %255 = lshr i64 %215, 48
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %256, i8* %257, align 1, !tbaa !868
  %258 = lshr i64 %215, 56
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %259, i8* %260, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQBI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca <2 x i64>, align 16
  %9 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %10 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %11 = alloca <2 x i64>, align 16
  %12 = bitcast <2 x i64>* %11 to { i64, i64 }*
  %13 = bitcast <2 x i64>* %11 to %struct.uint8v16_t*
  %14 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %14) #23
  %15 = bitcast i8* %3 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 1
  store <2 x i64> %16, <2 x i64>* %8, align 16
  %17 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  store <2 x i64> %19, <2 x i64>* %11, align 16
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [16 x i8]*
  %24 = extractelement <2 x i64> %16, i32 0
  %25 = trunc i64 %24 to i8
  %26 = extractelement <2 x i64> %19, i32 0
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  %29 = sext i1 %28 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %30 = bitcast <2 x i64>* %6 to i8*
  store i8 %29, i8* %30, align 16, !tbaa !868
  %31 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %32 = lshr i64 %24, 8
  %33 = trunc i64 %32 to i8
  %34 = lshr i64 %26, 8
  %35 = trunc i64 %34 to i8
  %36 = icmp eq i8 %33, %35
  %37 = sext i1 %36 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %31, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 1
  store i8 %37, i8* %38, align 1, !tbaa !868
  %39 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %40 = lshr i64 %24, 16
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %26, 16
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i8 %41, %43
  %45 = sext i1 %44 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %39, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 2
  store i8 %45, i8* %46, align 2, !tbaa !868
  %47 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %48 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 3
  %49 = load i8, i8* %48, align 1, !tbaa !868
  %50 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 3
  %51 = load i8, i8* %50, align 1, !tbaa !868
  %52 = icmp eq i8 %49, %51
  %53 = sext i1 %52 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %47, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 3
  store i8 %53, i8* %54, align 1, !tbaa !868
  %55 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %56 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 4
  %57 = load i8, i8* %56, align 4, !tbaa !868
  %58 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 4
  %59 = load i8, i8* %58, align 4, !tbaa !868
  %60 = icmp eq i8 %57, %59
  %61 = sext i1 %60 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %55, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 4
  store i8 %61, i8* %62, align 4, !tbaa !868
  %63 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %64 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 5
  %65 = load i8, i8* %64, align 1, !tbaa !868
  %66 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 5
  %67 = load i8, i8* %66, align 1, !tbaa !868
  %68 = icmp eq i8 %65, %67
  %69 = sext i1 %68 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %63, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 5
  store i8 %69, i8* %70, align 1, !tbaa !868
  %71 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %72 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 6
  %73 = load i8, i8* %72, align 2, !tbaa !868
  %74 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 6
  %75 = load i8, i8* %74, align 2, !tbaa !868
  %76 = icmp eq i8 %73, %75
  %77 = sext i1 %76 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %71, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 6
  store i8 %77, i8* %78, align 2, !tbaa !868
  %79 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %80 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 7
  %81 = load i8, i8* %80, align 1, !tbaa !868
  %82 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 7
  %83 = load i8, i8* %82, align 1, !tbaa !868
  %84 = icmp eq i8 %81, %83
  %85 = sext i1 %84 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %79, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 7
  store i8 %85, i8* %86, align 1, !tbaa !868
  %87 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  %89 = bitcast i64* %88 to i8*
  %90 = load i8, i8* %89, align 8, !tbaa !868
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i64 0, i32 1
  %92 = bitcast i64* %91 to i8*
  %93 = load i8, i8* %92, align 8, !tbaa !868
  %94 = icmp eq i8 %90, %93
  %95 = sext i1 %94 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %97 = bitcast i64* %96 to i8*
  store i8 %95, i8* %97, align 8, !tbaa !868
  %98 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %99 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 9
  %100 = load i8, i8* %99, align 1, !tbaa !868
  %101 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 9
  %102 = load i8, i8* %101, align 1, !tbaa !868
  %103 = icmp eq i8 %100, %102
  %104 = sext i1 %103 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %98, i64* %22, align 8
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 9
  store i8 %104, i8* %105, align 1, !tbaa !868
  %106 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %107 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 10
  %108 = load i8, i8* %107, align 2, !tbaa !868
  %109 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 10
  %110 = load i8, i8* %109, align 2, !tbaa !868
  %111 = icmp eq i8 %108, %110
  %112 = sext i1 %111 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %106, i64* %22, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 10
  store i8 %112, i8* %113, align 2, !tbaa !868
  %114 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %115 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 11
  %116 = load i8, i8* %115, align 1, !tbaa !868
  %117 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 11
  %118 = load i8, i8* %117, align 1, !tbaa !868
  %119 = icmp eq i8 %116, %118
  %120 = sext i1 %119 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %114, i64* %22, align 8
  %121 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 11
  store i8 %120, i8* %121, align 1, !tbaa !868
  %122 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %123 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 12
  %124 = load i8, i8* %123, align 4, !tbaa !868
  %125 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 12
  %126 = load i8, i8* %125, align 4, !tbaa !868
  %127 = icmp eq i8 %124, %126
  %128 = sext i1 %127 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %122, i64* %22, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 12
  store i8 %128, i8* %129, align 4, !tbaa !868
  %130 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %131 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 13
  %132 = load i8, i8* %131, align 1, !tbaa !868
  %133 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 13
  %134 = load i8, i8* %133, align 1, !tbaa !868
  %135 = icmp eq i8 %132, %134
  %136 = sext i1 %135 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %130, i64* %22, align 8
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 13
  store i8 %136, i8* %137, align 1, !tbaa !868
  %138 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %139 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 14
  %140 = load i8, i8* %139, align 2, !tbaa !868
  %141 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 14
  %142 = load i8, i8* %141, align 2, !tbaa !868
  %143 = icmp eq i8 %140, %142
  %144 = sext i1 %143 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %138, i64* %22, align 8
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 14
  store i8 %144, i8* %145, align 2, !tbaa !868
  %146 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %147 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %10, i64 0, i32 0, i64 15
  %148 = load i8, i8* %147, align 1, !tbaa !868
  %149 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %13, i64 0, i32 0, i64 15
  %150 = load i8, i8* %149, align 1, !tbaa !868
  %151 = icmp eq i8 %148, %150
  %152 = sext i1 %151 to i8
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %87, i64* %21, align 16
  store i64 %146, i64* %22, align 8
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %23, i64 0, i64 15
  store i8 %152, i8* %153, align 1, !tbaa !868
  %154 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %155 = lshr i64 %87, 8
  %156 = lshr i64 %87, 16
  %157 = lshr i64 %87, 24
  %158 = lshr i64 %87, 32
  %159 = lshr i64 %87, 40
  %160 = lshr i64 %87, 48
  %161 = lshr i64 %87, 56
  %162 = trunc i64 %87 to i8
  %163 = trunc i64 %155 to i8
  %164 = trunc i64 %156 to i8
  %165 = trunc i64 %157 to i8
  %166 = trunc i64 %158 to i8
  %167 = trunc i64 %159 to i8
  %168 = trunc i64 %160 to i8
  %169 = trunc i64 %161 to i8
  store i8 %162, i8* %2, align 1, !tbaa !868
  %170 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %163, i8* %170, align 1, !tbaa !868
  %171 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %164, i8* %171, align 1, !tbaa !868
  %172 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %165, i8* %172, align 1, !tbaa !868
  %173 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %166, i8* %173, align 1, !tbaa !868
  %174 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %167, i8* %174, align 1, !tbaa !868
  %175 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %168, i8* %175, align 1, !tbaa !868
  %176 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %169, i8* %176, align 1, !tbaa !868
  %177 = trunc i64 %154 to i8
  %178 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %177, i8* %178, align 1, !tbaa !868
  %179 = lshr i64 %154, 8
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %180, i8* %181, align 1, !tbaa !868
  %182 = lshr i64 %154, 16
  %183 = trunc i64 %182 to i8
  %184 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %183, i8* %184, align 1, !tbaa !868
  %185 = lshr i64 %154, 24
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %186, i8* %187, align 1, !tbaa !868
  %188 = lshr i64 %154, 32
  %189 = trunc i64 %188 to i8
  %190 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %189, i8* %190, align 1, !tbaa !868
  %191 = lshr i64 %154, 40
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %192, i8* %193, align 1, !tbaa !868
  %194 = lshr i64 %154, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %195, i8* %196, align 1, !tbaa !868
  %197 = lshr i64 %154, 56
  %198 = trunc i64 %197 to i8
  %199 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %198, i8* %199, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %14) #23
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %14 = add i64 %4, 4
  %15 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %14) #22
  %16 = add i64 %4, 8
  %17 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %16) #22
  %18 = add i64 %4, 12
  %19 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %18) #22
  %20 = bitcast <2 x i64>* %6 to i8*
  %21 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = bitcast <2 x i64>* %6 to [4 x i32]*
  %24 = trunc i64 %9 to i32
  %25 = icmp eq i32 %24, %13
  %26 = sext i1 %25 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %27 = bitcast <2 x i64>* %6 to i32*
  store i32 %26, i32* %27, align 16, !tbaa !877
  %28 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %29 = lshr i64 %9, 32
  %30 = trunc i64 %29 to i32
  %31 = icmp eq i32 %30, %15
  %32 = sext i1 %31 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %28, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 1
  store i32 %32, i32* %33, align 4, !tbaa !877
  %34 = load i64, i64* %21, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %35 = trunc i64 %12 to i32
  %36 = icmp eq i32 %35, %17
  %37 = sext i1 %36 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 0, i64* %22, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %39 = bitcast i64* %38 to i32*
  store i32 %37, i32* %39, align 8, !tbaa !877
  %40 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %41 = lshr i64 %12, 32
  %42 = trunc i64 %41 to i32
  %43 = icmp eq i32 %42, %19
  %44 = sext i1 %43 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %20)
  store i64 %34, i64* %21, align 16
  store i64 %40, i64* %22, align 8
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 3
  store i32 %44, i32* %45, align 4, !tbaa !877
  %46 = load i64, i64* %22, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %20)
  %47 = lshr i64 %34, 32
  %48 = trunc i64 %34 to i32
  %49 = trunc i64 %47 to i32
  %50 = bitcast i8* %2 to i32*
  store i32 %48, i32* %50, align 1, !tbaa !877
  %51 = getelementptr inbounds i8, i8* %2, i64 4
  %52 = bitcast i8* %51 to i32*
  store i32 %49, i32* %52, align 1, !tbaa !877
  %53 = trunc i64 %46 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !877
  %56 = lshr i64 %46, 32
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7PCMPEQDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = bitcast i8* %3 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = getelementptr inbounds i8, i8* %3, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = bitcast i8* %4 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = bitcast <2 x i64>* %6 to i8*
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %6, i64 0, i64 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %21 = bitcast <2 x i64>* %6 to [4 x i32]*
  %22 = trunc i64 %9 to i32
  %23 = trunc i64 %14 to i32
  %24 = icmp eq i32 %22, %23
  %25 = sext i1 %24 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store <2 x i64> zeroinitializer, <2 x i64>* %6, align 16
  %26 = bitcast <2 x i64>* %6 to i32*
  store i32 %25, i32* %26, align 16, !tbaa !877
  %27 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %28 = lshr i64 %9, 32
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %14, 32
  %31 = trunc i64 %30 to i32
  %32 = icmp eq i32 %29, %31
  %33 = sext i1 %32 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %27, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %33, i32* %34, align 4, !tbaa !877
  %35 = load i64, i64* %19, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %36 = trunc i64 %12 to i32
  %37 = trunc i64 %17 to i32
  %38 = icmp eq i32 %36, %37
  %39 = sext i1 %38 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 0, i64* %20, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %41 = bitcast i64* %40 to i32*
  store i32 %39, i32* %41, align 8, !tbaa !877
  %42 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %43 = lshr i64 %12, 32
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %17, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp eq i32 %44, %46
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %18)
  store i64 %35, i64* %19, align 16
  store i64 %42, i64* %20, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %48, i32* %49, align 4, !tbaa !877
  %50 = load i64, i64* %20, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %18)
  %51 = lshr i64 %35, 32
  %52 = trunc i64 %35 to i32
  %53 = trunc i64 %51 to i32
  %54 = bitcast i8* %2 to i32*
  store i32 %52, i32* %54, align 1, !tbaa !877
  %55 = getelementptr inbounds i8, i8* %2, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1, !tbaa !877
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %2, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !877
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %2, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !877
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %8 = trunc i64 %5 to i8
  %9 = icmp ugt i8 %8, 31
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !870
  %13 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %12, %struct.Memory* %0) #21
  br label %89

; <label>:14:                                     ; preds = %6
  %15 = bitcast i8* %3 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 1
  %17 = extractelement <2 x float> %16, i32 0
  %18 = fcmp uno float %17, %7
  %19 = xor i1 %18, true
  switch i8 %8, label %77 [
    i8 0, label %20
    i8 1, label %23
    i8 2, label %26
    i8 3, label %78
    i8 4, label %29
    i8 5, label %31
    i8 6, label %33
    i8 7, label %35
    i8 8, label %36
    i8 9, label %38
    i8 10, label %40
    i8 11, label %80
    i8 12, label %42
    i8 13, label %44
    i8 14, label %47
    i8 15, label %79
    i8 16, label %50
    i8 17, label %53
    i8 18, label %55
    i8 19, label %78
    i8 20, label %57
    i8 21, label %59
    i8 22, label %61
    i8 23, label %63
    i8 24, label %64
    i8 25, label %66
    i8 26, label %68
    i8 27, label %80
    i8 28, label %70
    i8 29, label %73
    i8 30, label %75
    i8 31, label %79
  ]

; <label>:20:                                     ; preds = %14
  %21 = fcmp ueq float %17, %7
  %22 = and i1 %21, %19
  br i1 %22, label %79, label %80

; <label>:23:                                     ; preds = %14
  %24 = fcmp olt float %17, %7
  %25 = and i1 %24, %19
  br i1 %25, label %79, label %80

; <label>:26:                                     ; preds = %14
  %27 = fcmp ole float %17, %7
  %28 = and i1 %27, %19
  br i1 %28, label %79, label %80

; <label>:29:                                     ; preds = %14
  %30 = fcmp une float %17, %7
  br i1 %30, label %79, label %80

; <label>:31:                                     ; preds = %14
  %32 = fcmp uge float %17, %7
  br i1 %32, label %79, label %80

; <label>:33:                                     ; preds = %14
  %34 = fcmp ugt float %17, %7
  br i1 %34, label %79, label %80

; <label>:35:                                     ; preds = %14
  br i1 %18, label %80, label %79

; <label>:36:                                     ; preds = %14
  %37 = fcmp ueq float %17, %7
  br i1 %37, label %79, label %80

; <label>:38:                                     ; preds = %14
  %39 = fcmp ult float %17, %7
  br i1 %39, label %79, label %80

; <label>:40:                                     ; preds = %14
  %41 = fcmp ule float %17, %7
  br i1 %41, label %79, label %80

; <label>:42:                                     ; preds = %14
  %43 = fcmp ueq float %17, %7
  br i1 %43, label %80, label %79

; <label>:44:                                     ; preds = %14
  %45 = fcmp oge float %17, %7
  %46 = and i1 %45, %19
  br i1 %46, label %79, label %80

; <label>:47:                                     ; preds = %14
  %48 = fcmp ogt float %17, %7
  %49 = and i1 %48, %19
  br i1 %49, label %79, label %80

; <label>:50:                                     ; preds = %14
  %51 = fcmp oeq float %17, %7
  %52 = and i1 %51, %19
  br i1 %52, label %79, label %80

; <label>:53:                                     ; preds = %14
  %54 = fcmp olt float %17, %7
  br i1 %54, label %79, label %80

; <label>:55:                                     ; preds = %14
  %56 = fcmp ugt float %17, %7
  br i1 %56, label %80, label %79

; <label>:57:                                     ; preds = %14
  %58 = fcmp une float %17, %7
  br i1 %58, label %79, label %80

; <label>:59:                                     ; preds = %14
  %60 = fcmp uge float %17, %7
  br i1 %60, label %79, label %80

; <label>:61:                                     ; preds = %14
  %62 = fcmp ugt float %17, %7
  br i1 %62, label %79, label %80

; <label>:63:                                     ; preds = %14
  br i1 %18, label %80, label %79

; <label>:64:                                     ; preds = %14
  %65 = fcmp ueq float %17, %7
  br i1 %65, label %79, label %80

; <label>:66:                                     ; preds = %14
  %67 = fcmp ult float %17, %7
  br i1 %67, label %79, label %80

; <label>:68:                                     ; preds = %14
  %69 = fcmp ule float %17, %7
  br i1 %69, label %79, label %80

; <label>:70:                                     ; preds = %14
  %71 = fcmp une float %17, %7
  %72 = and i1 %71, %19
  br i1 %72, label %79, label %80

; <label>:73:                                     ; preds = %14
  %74 = fcmp ult float %17, %7
  br i1 %74, label %80, label %79

; <label>:75:                                     ; preds = %14
  %76 = fcmp ogt float %17, %7
  br i1 %76, label %79, label %80

; <label>:77:                                     ; preds = %14
  unreachable

; <label>:78:                                     ; preds = %14, %14
  br i1 %18, label %79, label %80

; <label>:79:                                     ; preds = %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %14, %14
  br label %80

; <label>:80:                                     ; preds = %79, %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %14, %14
  %81 = phi i32 [ -1, %79 ], [ 0, %78 ], [ 0, %75 ], [ 0, %73 ], [ 0, %70 ], [ 0, %68 ], [ 0, %66 ], [ 0, %64 ], [ 0, %63 ], [ 0, %61 ], [ 0, %59 ], [ 0, %57 ], [ 0, %55 ], [ 0, %53 ], [ 0, %50 ], [ 0, %47 ], [ 0, %44 ], [ 0, %42 ], [ 0, %40 ], [ 0, %38 ], [ 0, %36 ], [ 0, %35 ], [ 0, %33 ], [ 0, %31 ], [ 0, %29 ], [ 0, %26 ], [ 0, %23 ], [ 0, %20 ], [ 0, %14 ], [ 0, %14 ]
  %82 = bitcast i8* %2 to i32*
  store i32 %81, i32* %82, align 1, !tbaa !877
  %83 = getelementptr inbounds i8, i8* %2, i64 4
  %84 = bitcast i8* %83 to i32*
  store i32 0, i32* %84, align 1, !tbaa !877
  %85 = getelementptr inbounds i8, i8* %2, i64 8
  %86 = bitcast i8* %85 to i32*
  store i32 0, i32* %86, align 1, !tbaa !877
  %87 = getelementptr inbounds i8, i8* %2, i64 12
  %88 = bitcast i8* %87 to i32*
  store i32 0, i32* %88, align 1, !tbaa !877
  br label %89

; <label>:89:                                     ; preds = %80, %10
  %90 = phi %struct.Memory* [ %13, %10 ], [ %0, %80 ]
  ret %struct.Memory* %90
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64) #0 {
  %7 = trunc i64 %5 to i8
  %8 = icmp ugt i8 %7, 31
  br i1 %8, label %9, label %13

; <label>:9:                                      ; preds = %6
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !870
  %12 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %11, %struct.Memory* %0) #21
  br label %91

; <label>:13:                                     ; preds = %6
  %14 = bitcast i8* %4 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 1
  %16 = bitcast i8* %3 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 1
  %18 = extractelement <2 x float> %17, i32 0
  %19 = extractelement <2 x float> %15, i32 0
  %20 = fcmp uno float %18, %19
  %21 = xor i1 %20, true
  switch i8 %7, label %79 [
    i8 0, label %22
    i8 1, label %25
    i8 2, label %28
    i8 3, label %80
    i8 4, label %31
    i8 5, label %33
    i8 6, label %35
    i8 7, label %37
    i8 8, label %38
    i8 9, label %40
    i8 10, label %42
    i8 11, label %82
    i8 12, label %44
    i8 13, label %46
    i8 14, label %49
    i8 15, label %81
    i8 16, label %52
    i8 17, label %55
    i8 18, label %57
    i8 19, label %80
    i8 20, label %59
    i8 21, label %61
    i8 22, label %63
    i8 23, label %65
    i8 24, label %66
    i8 25, label %68
    i8 26, label %70
    i8 27, label %82
    i8 28, label %72
    i8 29, label %75
    i8 30, label %77
    i8 31, label %81
  ]

; <label>:22:                                     ; preds = %13
  %23 = fcmp ueq float %18, %19
  %24 = and i1 %23, %21
  br i1 %24, label %81, label %82

; <label>:25:                                     ; preds = %13
  %26 = fcmp olt float %18, %19
  %27 = and i1 %26, %21
  br i1 %27, label %81, label %82

; <label>:28:                                     ; preds = %13
  %29 = fcmp ole float %18, %19
  %30 = and i1 %29, %21
  br i1 %30, label %81, label %82

; <label>:31:                                     ; preds = %13
  %32 = fcmp une float %18, %19
  br i1 %32, label %81, label %82

; <label>:33:                                     ; preds = %13
  %34 = fcmp uge float %18, %19
  br i1 %34, label %81, label %82

; <label>:35:                                     ; preds = %13
  %36 = fcmp ugt float %18, %19
  br i1 %36, label %81, label %82

; <label>:37:                                     ; preds = %13
  br i1 %20, label %82, label %81

; <label>:38:                                     ; preds = %13
  %39 = fcmp ueq float %18, %19
  br i1 %39, label %81, label %82

; <label>:40:                                     ; preds = %13
  %41 = fcmp ult float %18, %19
  br i1 %41, label %81, label %82

; <label>:42:                                     ; preds = %13
  %43 = fcmp ule float %18, %19
  br i1 %43, label %81, label %82

; <label>:44:                                     ; preds = %13
  %45 = fcmp ueq float %18, %19
  br i1 %45, label %82, label %81

; <label>:46:                                     ; preds = %13
  %47 = fcmp oge float %18, %19
  %48 = and i1 %47, %21
  br i1 %48, label %81, label %82

; <label>:49:                                     ; preds = %13
  %50 = fcmp ogt float %18, %19
  %51 = and i1 %50, %21
  br i1 %51, label %81, label %82

; <label>:52:                                     ; preds = %13
  %53 = fcmp oeq float %18, %19
  %54 = and i1 %53, %21
  br i1 %54, label %81, label %82

; <label>:55:                                     ; preds = %13
  %56 = fcmp olt float %18, %19
  br i1 %56, label %81, label %82

; <label>:57:                                     ; preds = %13
  %58 = fcmp ugt float %18, %19
  br i1 %58, label %82, label %81

; <label>:59:                                     ; preds = %13
  %60 = fcmp une float %18, %19
  br i1 %60, label %81, label %82

; <label>:61:                                     ; preds = %13
  %62 = fcmp uge float %18, %19
  br i1 %62, label %81, label %82

; <label>:63:                                     ; preds = %13
  %64 = fcmp ugt float %18, %19
  br i1 %64, label %81, label %82

; <label>:65:                                     ; preds = %13
  br i1 %20, label %82, label %81

; <label>:66:                                     ; preds = %13
  %67 = fcmp ueq float %18, %19
  br i1 %67, label %81, label %82

; <label>:68:                                     ; preds = %13
  %69 = fcmp ult float %18, %19
  br i1 %69, label %81, label %82

; <label>:70:                                     ; preds = %13
  %71 = fcmp ule float %18, %19
  br i1 %71, label %81, label %82

; <label>:72:                                     ; preds = %13
  %73 = fcmp une float %18, %19
  %74 = and i1 %73, %21
  br i1 %74, label %81, label %82

; <label>:75:                                     ; preds = %13
  %76 = fcmp ult float %18, %19
  br i1 %76, label %82, label %81

; <label>:77:                                     ; preds = %13
  %78 = fcmp ogt float %18, %19
  br i1 %78, label %81, label %82

; <label>:79:                                     ; preds = %13
  unreachable

; <label>:80:                                     ; preds = %13, %13
  br i1 %20, label %81, label %82

; <label>:81:                                     ; preds = %80, %77, %75, %72, %70, %68, %66, %65, %63, %61, %59, %57, %55, %52, %49, %46, %44, %42, %40, %38, %37, %35, %33, %31, %28, %25, %22, %13, %13
  br label %82

; <label>:82:                                     ; preds = %81, %80, %77, %75, %72, %70, %68, %66, %65, %63, %61, %59, %57, %55, %52, %49, %46, %44, %42, %40, %38, %37, %35, %33, %31, %28, %25, %22, %13, %13
  %83 = phi i32 [ -1, %81 ], [ 0, %80 ], [ 0, %77 ], [ 0, %75 ], [ 0, %72 ], [ 0, %70 ], [ 0, %68 ], [ 0, %66 ], [ 0, %65 ], [ 0, %63 ], [ 0, %61 ], [ 0, %59 ], [ 0, %57 ], [ 0, %55 ], [ 0, %52 ], [ 0, %49 ], [ 0, %46 ], [ 0, %44 ], [ 0, %42 ], [ 0, %40 ], [ 0, %38 ], [ 0, %37 ], [ 0, %35 ], [ 0, %33 ], [ 0, %31 ], [ 0, %28 ], [ 0, %25 ], [ 0, %22 ], [ 0, %13 ], [ 0, %13 ]
  %84 = bitcast i8* %2 to i32*
  store i32 %83, i32* %84, align 1, !tbaa !877
  %85 = getelementptr inbounds i8, i8* %2, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 0, i32* %86, align 1, !tbaa !877
  %87 = getelementptr inbounds i8, i8* %2, i64 8
  %88 = bitcast i8* %87 to i32*
  store i32 0, i32* %88, align 1, !tbaa !877
  %89 = getelementptr inbounds i8, i8* %2, i64 12
  %90 = bitcast i8* %89 to i32*
  store i32 0, i32* %90, align 1, !tbaa !877
  br label %91

; <label>:91:                                     ; preds = %82, %9
  %92 = phi %struct.Memory* [ %12, %9 ], [ %0, %82 ]
  ret %struct.Memory* %92
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %10 = trunc i64 %5 to i8
  %11 = icmp ugt i8 %10, 31
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %6
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %14 = load i64, i64* %13, align 8, !tbaa !870
  %15 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %14, %struct.Memory* %0) #21
  br label %84

; <label>:16:                                     ; preds = %6
  %17 = fcmp uno double %8, %9
  %18 = xor i1 %17, true
  switch i8 %10, label %76 [
    i8 0, label %19
    i8 1, label %22
    i8 2, label %25
    i8 3, label %77
    i8 4, label %28
    i8 5, label %30
    i8 6, label %32
    i8 7, label %34
    i8 8, label %35
    i8 9, label %37
    i8 10, label %39
    i8 11, label %79
    i8 12, label %41
    i8 13, label %43
    i8 14, label %46
    i8 15, label %78
    i8 16, label %49
    i8 17, label %52
    i8 18, label %54
    i8 19, label %77
    i8 20, label %56
    i8 21, label %58
    i8 22, label %60
    i8 23, label %62
    i8 24, label %63
    i8 25, label %65
    i8 26, label %67
    i8 27, label %79
    i8 28, label %69
    i8 29, label %72
    i8 30, label %74
    i8 31, label %78
  ]

; <label>:19:                                     ; preds = %16
  %20 = fcmp ueq double %8, %9
  %21 = and i1 %20, %18
  br i1 %21, label %78, label %79

; <label>:22:                                     ; preds = %16
  %23 = fcmp olt double %8, %9
  %24 = and i1 %23, %18
  br i1 %24, label %78, label %79

; <label>:25:                                     ; preds = %16
  %26 = fcmp ole double %8, %9
  %27 = and i1 %26, %18
  br i1 %27, label %78, label %79

; <label>:28:                                     ; preds = %16
  %29 = fcmp une double %8, %9
  br i1 %29, label %78, label %79

; <label>:30:                                     ; preds = %16
  %31 = fcmp uge double %8, %9
  br i1 %31, label %78, label %79

; <label>:32:                                     ; preds = %16
  %33 = fcmp ugt double %8, %9
  br i1 %33, label %78, label %79

; <label>:34:                                     ; preds = %16
  br i1 %17, label %79, label %78

; <label>:35:                                     ; preds = %16
  %36 = fcmp ueq double %8, %9
  br i1 %36, label %78, label %79

; <label>:37:                                     ; preds = %16
  %38 = fcmp ult double %8, %9
  br i1 %38, label %78, label %79

; <label>:39:                                     ; preds = %16
  %40 = fcmp ule double %8, %9
  br i1 %40, label %78, label %79

; <label>:41:                                     ; preds = %16
  %42 = fcmp ueq double %8, %9
  br i1 %42, label %79, label %78

; <label>:43:                                     ; preds = %16
  %44 = fcmp oge double %8, %9
  %45 = and i1 %44, %18
  br i1 %45, label %78, label %79

; <label>:46:                                     ; preds = %16
  %47 = fcmp ogt double %8, %9
  %48 = and i1 %47, %18
  br i1 %48, label %78, label %79

; <label>:49:                                     ; preds = %16
  %50 = fcmp oeq double %8, %9
  %51 = and i1 %50, %18
  br i1 %51, label %78, label %79

; <label>:52:                                     ; preds = %16
  %53 = fcmp olt double %8, %9
  br i1 %53, label %78, label %79

; <label>:54:                                     ; preds = %16
  %55 = fcmp ugt double %8, %9
  br i1 %55, label %79, label %78

; <label>:56:                                     ; preds = %16
  %57 = fcmp une double %8, %9
  br i1 %57, label %78, label %79

; <label>:58:                                     ; preds = %16
  %59 = fcmp uge double %8, %9
  br i1 %59, label %78, label %79

; <label>:60:                                     ; preds = %16
  %61 = fcmp ugt double %8, %9
  br i1 %61, label %78, label %79

; <label>:62:                                     ; preds = %16
  br i1 %17, label %79, label %78

; <label>:63:                                     ; preds = %16
  %64 = fcmp ueq double %8, %9
  br i1 %64, label %78, label %79

; <label>:65:                                     ; preds = %16
  %66 = fcmp ult double %8, %9
  br i1 %66, label %78, label %79

; <label>:67:                                     ; preds = %16
  %68 = fcmp ule double %8, %9
  br i1 %68, label %78, label %79

; <label>:69:                                     ; preds = %16
  %70 = fcmp une double %8, %9
  %71 = and i1 %70, %18
  br i1 %71, label %78, label %79

; <label>:72:                                     ; preds = %16
  %73 = fcmp ult double %8, %9
  br i1 %73, label %79, label %78

; <label>:74:                                     ; preds = %16
  %75 = fcmp ogt double %8, %9
  br i1 %75, label %78, label %79

; <label>:76:                                     ; preds = %16
  unreachable

; <label>:77:                                     ; preds = %16, %16
  br i1 %17, label %78, label %79

; <label>:78:                                     ; preds = %77, %74, %72, %69, %67, %65, %63, %62, %60, %58, %56, %54, %52, %49, %46, %43, %41, %39, %37, %35, %34, %32, %30, %28, %25, %22, %19, %16, %16
  br label %79

; <label>:79:                                     ; preds = %78, %77, %74, %72, %69, %67, %65, %63, %62, %60, %58, %56, %54, %52, %49, %46, %43, %41, %39, %37, %35, %34, %32, %30, %28, %25, %22, %19, %16, %16
  %80 = phi i64 [ -1, %78 ], [ 0, %77 ], [ 0, %74 ], [ 0, %72 ], [ 0, %69 ], [ 0, %67 ], [ 0, %65 ], [ 0, %63 ], [ 0, %62 ], [ 0, %60 ], [ 0, %58 ], [ 0, %56 ], [ 0, %54 ], [ 0, %52 ], [ 0, %49 ], [ 0, %46 ], [ 0, %43 ], [ 0, %41 ], [ 0, %39 ], [ 0, %37 ], [ 0, %35 ], [ 0, %34 ], [ 0, %32 ], [ 0, %30 ], [ 0, %28 ], [ 0, %25 ], [ 0, %22 ], [ 0, %19 ], [ 0, %16 ], [ 0, %16 ]
  %81 = bitcast i8* %2 to i64*
  store i64 %80, i64* %81, align 1, !tbaa !870
  %82 = getelementptr inbounds i8, i8* %2, i64 8
  %83 = bitcast i8* %82 to i64*
  store i64 0, i64* %83, align 1, !tbaa !870
  br label %84

; <label>:84:                                     ; preds = %79, %12
  %85 = phi %struct.Memory* [ %15, %12 ], [ %0, %79 ]
  ret %struct.Memory* %85
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64) #0 {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast i8* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = trunc i64 %5 to i8
  %12 = icmp ugt i8 %11, 31
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %15 = load i64, i64* %14, align 8, !tbaa !870
  %16 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %15, %struct.Memory* %0) #21
  br label %85

; <label>:17:                                     ; preds = %6
  %18 = fcmp uno double %8, %10
  %19 = xor i1 %18, true
  switch i8 %11, label %77 [
    i8 0, label %20
    i8 1, label %23
    i8 2, label %26
    i8 3, label %78
    i8 4, label %29
    i8 5, label %31
    i8 6, label %33
    i8 7, label %35
    i8 8, label %36
    i8 9, label %38
    i8 10, label %40
    i8 11, label %80
    i8 12, label %42
    i8 13, label %44
    i8 14, label %47
    i8 15, label %79
    i8 16, label %50
    i8 17, label %53
    i8 18, label %55
    i8 19, label %78
    i8 20, label %57
    i8 21, label %59
    i8 22, label %61
    i8 23, label %63
    i8 24, label %64
    i8 25, label %66
    i8 26, label %68
    i8 27, label %80
    i8 28, label %70
    i8 29, label %73
    i8 30, label %75
    i8 31, label %79
  ]

; <label>:20:                                     ; preds = %17
  %21 = fcmp ueq double %8, %10
  %22 = and i1 %21, %19
  br i1 %22, label %79, label %80

; <label>:23:                                     ; preds = %17
  %24 = fcmp olt double %8, %10
  %25 = and i1 %24, %19
  br i1 %25, label %79, label %80

; <label>:26:                                     ; preds = %17
  %27 = fcmp ole double %8, %10
  %28 = and i1 %27, %19
  br i1 %28, label %79, label %80

; <label>:29:                                     ; preds = %17
  %30 = fcmp une double %8, %10
  br i1 %30, label %79, label %80

; <label>:31:                                     ; preds = %17
  %32 = fcmp uge double %8, %10
  br i1 %32, label %79, label %80

; <label>:33:                                     ; preds = %17
  %34 = fcmp ugt double %8, %10
  br i1 %34, label %79, label %80

; <label>:35:                                     ; preds = %17
  br i1 %18, label %80, label %79

; <label>:36:                                     ; preds = %17
  %37 = fcmp ueq double %8, %10
  br i1 %37, label %79, label %80

; <label>:38:                                     ; preds = %17
  %39 = fcmp ult double %8, %10
  br i1 %39, label %79, label %80

; <label>:40:                                     ; preds = %17
  %41 = fcmp ule double %8, %10
  br i1 %41, label %79, label %80

; <label>:42:                                     ; preds = %17
  %43 = fcmp ueq double %8, %10
  br i1 %43, label %80, label %79

; <label>:44:                                     ; preds = %17
  %45 = fcmp oge double %8, %10
  %46 = and i1 %45, %19
  br i1 %46, label %79, label %80

; <label>:47:                                     ; preds = %17
  %48 = fcmp ogt double %8, %10
  %49 = and i1 %48, %19
  br i1 %49, label %79, label %80

; <label>:50:                                     ; preds = %17
  %51 = fcmp oeq double %8, %10
  %52 = and i1 %51, %19
  br i1 %52, label %79, label %80

; <label>:53:                                     ; preds = %17
  %54 = fcmp olt double %8, %10
  br i1 %54, label %79, label %80

; <label>:55:                                     ; preds = %17
  %56 = fcmp ugt double %8, %10
  br i1 %56, label %80, label %79

; <label>:57:                                     ; preds = %17
  %58 = fcmp une double %8, %10
  br i1 %58, label %79, label %80

; <label>:59:                                     ; preds = %17
  %60 = fcmp uge double %8, %10
  br i1 %60, label %79, label %80

; <label>:61:                                     ; preds = %17
  %62 = fcmp ugt double %8, %10
  br i1 %62, label %79, label %80

; <label>:63:                                     ; preds = %17
  br i1 %18, label %80, label %79

; <label>:64:                                     ; preds = %17
  %65 = fcmp ueq double %8, %10
  br i1 %65, label %79, label %80

; <label>:66:                                     ; preds = %17
  %67 = fcmp ult double %8, %10
  br i1 %67, label %79, label %80

; <label>:68:                                     ; preds = %17
  %69 = fcmp ule double %8, %10
  br i1 %69, label %79, label %80

; <label>:70:                                     ; preds = %17
  %71 = fcmp une double %8, %10
  %72 = and i1 %71, %19
  br i1 %72, label %79, label %80

; <label>:73:                                     ; preds = %17
  %74 = fcmp ult double %8, %10
  br i1 %74, label %80, label %79

; <label>:75:                                     ; preds = %17
  %76 = fcmp ogt double %8, %10
  br i1 %76, label %79, label %80

; <label>:77:                                     ; preds = %17
  unreachable

; <label>:78:                                     ; preds = %17, %17
  br i1 %18, label %79, label %80

; <label>:79:                                     ; preds = %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %17, %17
  br label %80

; <label>:80:                                     ; preds = %79, %78, %75, %73, %70, %68, %66, %64, %63, %61, %59, %57, %55, %53, %50, %47, %44, %42, %40, %38, %36, %35, %33, %31, %29, %26, %23, %20, %17, %17
  %81 = phi i64 [ -1, %79 ], [ 0, %78 ], [ 0, %75 ], [ 0, %73 ], [ 0, %70 ], [ 0, %68 ], [ 0, %66 ], [ 0, %64 ], [ 0, %63 ], [ 0, %61 ], [ 0, %59 ], [ 0, %57 ], [ 0, %55 ], [ 0, %53 ], [ 0, %50 ], [ 0, %47 ], [ 0, %44 ], [ 0, %42 ], [ 0, %40 ], [ 0, %38 ], [ 0, %36 ], [ 0, %35 ], [ 0, %33 ], [ 0, %31 ], [ 0, %29 ], [ 0, %26 ], [ 0, %23 ], [ 0, %20 ], [ 0, %17 ], [ 0, %17 ]
  %82 = bitcast i8* %2 to i64*
  store i64 %81, i64* %82, align 1, !tbaa !870
  %83 = getelementptr inbounds i8, i8* %2, i64 8
  %84 = bitcast i8* %83 to i64*
  store i64 0, i64* %84, align 1, !tbaa !870
  br label %85

; <label>:85:                                     ; preds = %80, %13
  %86 = phi %struct.Memory* [ %16, %13 ], [ %0, %80 ]
  ret %struct.Memory* %86
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPSI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %15 = add i64 %4, 4
  %16 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %15) #22
  %17 = add i64 %4, 8
  %18 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %17) #22
  %19 = add i64 %4, 12
  %20 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %19) #22
  %21 = trunc i64 %5 to i8
  %22 = icmp ugt i8 %21, 31
  %23 = trunc i64 %10 to i32
  %24 = bitcast i32 %23 to float
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = trunc i64 %13 to i32
  %29 = bitcast i32 %28 to float
  %30 = lshr i64 %13, 32
  %31 = trunc i64 %30 to i32
  %32 = bitcast i32 %31 to float
  br i1 %22, label %60, label %33

; <label>:33:                                     ; preds = %6
  %34 = bitcast <2 x i64>* %7 to i8*
  %35 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %37 = bitcast <2 x i64>* %7 to [4 x i32]*
  %38 = icmp eq i8 %21, 0
  br i1 %38, label %42, label %39

; <label>:39:                                     ; preds = %33
  %40 = fcmp uno float %24, %14
  %41 = xor i1 %40, true
  switch i8 %21, label %217 [
    i8 31, label %219
    i8 1, label %80
    i8 2, label %87
    i8 3, label %218
    i8 4, label %94
    i8 5, label %99
    i8 6, label %104
    i8 7, label %109
    i8 8, label %114
    i8 9, label %119
    i8 10, label %124
    i8 11, label %220
    i8 12, label %129
    i8 13, label %134
    i8 14, label %141
    i8 15, label %219
    i8 16, label %148
    i8 17, label %155
    i8 18, label %160
    i8 19, label %218
    i8 20, label %165
    i8 21, label %170
    i8 22, label %175
    i8 23, label %180
    i8 24, label %185
    i8 25, label %190
    i8 26, label %195
    i8 27, label %220
    i8 28, label %200
    i8 29, label %207
    i8 30, label %212
  ]

; <label>:42:                                     ; preds = %33
  %43 = fcmp oeq float %24, %14
  %44 = sext i1 %43 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %45 = bitcast <2 x i64>* %7 to i32*
  store i32 %44, i32* %45, align 16, !tbaa !877
  %46 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %47 = fcmp oeq float %27, %16
  %48 = sext i1 %47 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %46, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 %48, i32* %49, align 4, !tbaa !877
  %50 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %51 = fcmp oeq float %29, %18
  %52 = sext i1 %51 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %50, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %54 = bitcast i64* %53 to i32*
  store i32 %52, i32* %54, align 8, !tbaa !877
  %55 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %56 = fcmp oeq float %32, %20
  %57 = sext i1 %56 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %50, i64* %35, align 16
  store i64 %55, i64* %36, align 8
  %58 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 3
  store i32 %57, i32* %58, align 4, !tbaa !877
  %59 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %64

; <label>:60:                                     ; preds = %6
  %61 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !870
  %63 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %62, %struct.Memory* %0) #21
  br label %226

; <label>:64:                                     ; preds = %720, %42
  %65 = phi i64 [ %50, %42 ], [ %722, %720 ]
  %66 = phi i64 [ %59, %42 ], [ %725, %720 ]
  %67 = lshr i64 %65, 32
  %68 = trunc i64 %65 to i32
  %69 = trunc i64 %67 to i32
  %70 = bitcast i8* %2 to i32*
  store i32 %68, i32* %70, align 1, !tbaa !877
  %71 = getelementptr inbounds i8, i8* %2, i64 4
  %72 = bitcast i8* %71 to i32*
  store i32 %69, i32* %72, align 1, !tbaa !877
  %73 = trunc i64 %66 to i32
  %74 = getelementptr inbounds i8, i8* %2, i64 8
  %75 = bitcast i8* %74 to i32*
  store i32 %73, i32* %75, align 1, !tbaa !877
  %76 = lshr i64 %66, 32
  %77 = trunc i64 %76 to i32
  %78 = getelementptr inbounds i8, i8* %2, i64 12
  %79 = bitcast i8* %78 to i32*
  store i32 %77, i32* %79, align 1, !tbaa !877
  br label %226

; <label>:80:                                     ; preds = %39
  %81 = fcmp olt float %24, %14
  %82 = and i1 %81, %41
  br i1 %82, label %219, label %83

; <label>:83:                                     ; preds = %80
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %84 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %84, align 16, !tbaa !877
  %85 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %86 = fcmp ord float %27, %16
  br label %378

; <label>:87:                                     ; preds = %39
  %88 = fcmp ole float %24, %14
  %89 = and i1 %88, %41
  br i1 %89, label %219, label %90

; <label>:90:                                     ; preds = %87
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %91 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %91, align 16, !tbaa !877
  %92 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %93 = fcmp ord float %27, %16
  br label %369

; <label>:94:                                     ; preds = %39
  %95 = fcmp une float %24, %14
  br i1 %95, label %219, label %96

; <label>:96:                                     ; preds = %94
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %97 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %97, align 16, !tbaa !877
  %98 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %362

; <label>:99:                                     ; preds = %39
  %100 = fcmp uge float %24, %14
  br i1 %100, label %219, label %101

; <label>:101:                                    ; preds = %99
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %102 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %102, align 16, !tbaa !877
  %103 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %356

; <label>:104:                                    ; preds = %39
  %105 = fcmp ugt float %24, %14
  br i1 %105, label %219, label %106

; <label>:106:                                    ; preds = %104
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %107 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %107, align 16, !tbaa !877
  %108 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %350

; <label>:109:                                    ; preds = %39
  br i1 %40, label %110, label %219

; <label>:110:                                    ; preds = %109
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %111 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %111, align 16, !tbaa !877
  %112 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %113 = fcmp uno float %27, %16
  br i1 %113, label %389, label %387

; <label>:114:                                    ; preds = %39
  %115 = fcmp ueq float %24, %14
  br i1 %115, label %219, label %116

; <label>:116:                                    ; preds = %114
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %117 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %117, align 16, !tbaa !877
  %118 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %343

; <label>:119:                                    ; preds = %39
  %120 = fcmp ult float %24, %14
  br i1 %120, label %219, label %121

; <label>:121:                                    ; preds = %119
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %122 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %122, align 16, !tbaa !877
  %123 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %337

; <label>:124:                                    ; preds = %39
  %125 = fcmp ule float %24, %14
  br i1 %125, label %219, label %126

; <label>:126:                                    ; preds = %124
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %127 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %127, align 16, !tbaa !877
  %128 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %331

; <label>:129:                                    ; preds = %39
  %130 = fcmp ueq float %24, %14
  br i1 %130, label %131, label %219

; <label>:131:                                    ; preds = %129
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %132 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %132, align 16, !tbaa !877
  %133 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %325

; <label>:134:                                    ; preds = %39
  %135 = fcmp oge float %24, %14
  %136 = and i1 %135, %41
  br i1 %136, label %219, label %137

; <label>:137:                                    ; preds = %134
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %138 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %138, align 16, !tbaa !877
  %139 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %140 = fcmp ord float %27, %16
  br label %316

; <label>:141:                                    ; preds = %39
  %142 = fcmp ogt float %24, %14
  %143 = and i1 %142, %41
  br i1 %143, label %219, label %144

; <label>:144:                                    ; preds = %141
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %145 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %145, align 16, !tbaa !877
  %146 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %147 = fcmp ord float %27, %16
  br label %307

; <label>:148:                                    ; preds = %39
  %149 = fcmp oeq float %24, %14
  %150 = and i1 %149, %41
  br i1 %150, label %219, label %151

; <label>:151:                                    ; preds = %148
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %152 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %152, align 16, !tbaa !877
  %153 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %154 = fcmp ord float %27, %16
  br label %298

; <label>:155:                                    ; preds = %39
  %156 = fcmp olt float %24, %14
  br i1 %156, label %219, label %157

; <label>:157:                                    ; preds = %155
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %158 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %158, align 16, !tbaa !877
  %159 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %292

; <label>:160:                                    ; preds = %39
  %161 = fcmp ugt float %24, %14
  br i1 %161, label %162, label %219

; <label>:162:                                    ; preds = %160
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %163 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %163, align 16, !tbaa !877
  %164 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %286

; <label>:165:                                    ; preds = %39
  %166 = fcmp une float %24, %14
  br i1 %166, label %219, label %167

; <label>:167:                                    ; preds = %165
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %168 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %168, align 16, !tbaa !877
  %169 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %280

; <label>:170:                                    ; preds = %39
  %171 = fcmp uge float %24, %14
  br i1 %171, label %219, label %172

; <label>:172:                                    ; preds = %170
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %173 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %173, align 16, !tbaa !877
  %174 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %274

; <label>:175:                                    ; preds = %39
  %176 = fcmp ugt float %24, %14
  br i1 %176, label %219, label %177

; <label>:177:                                    ; preds = %175
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %178 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %178, align 16, !tbaa !877
  %179 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %268

; <label>:180:                                    ; preds = %39
  br i1 %40, label %181, label %219

; <label>:181:                                    ; preds = %180
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %182 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %182, align 16, !tbaa !877
  %183 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %184 = fcmp uno float %27, %16
  br i1 %184, label %394, label %387

; <label>:185:                                    ; preds = %39
  %186 = fcmp ueq float %24, %14
  br i1 %186, label %219, label %187

; <label>:187:                                    ; preds = %185
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %188 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %188, align 16, !tbaa !877
  %189 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %261

; <label>:190:                                    ; preds = %39
  %191 = fcmp ult float %24, %14
  br i1 %191, label %219, label %192

; <label>:192:                                    ; preds = %190
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %193 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %193, align 16, !tbaa !877
  %194 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %255

; <label>:195:                                    ; preds = %39
  %196 = fcmp ule float %24, %14
  br i1 %196, label %219, label %197

; <label>:197:                                    ; preds = %195
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %198 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %198, align 16, !tbaa !877
  %199 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %249

; <label>:200:                                    ; preds = %39
  %201 = fcmp une float %24, %14
  %202 = and i1 %201, %41
  br i1 %202, label %219, label %203

; <label>:203:                                    ; preds = %200
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %204 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %204, align 16, !tbaa !877
  %205 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %206 = fcmp ord float %27, %16
  br label %240

; <label>:207:                                    ; preds = %39
  %208 = fcmp ult float %24, %14
  br i1 %208, label %209, label %219

; <label>:209:                                    ; preds = %207
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %210 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %210, align 16, !tbaa !877
  %211 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %234

; <label>:212:                                    ; preds = %39
  %213 = fcmp ogt float %24, %14
  br i1 %213, label %219, label %214

; <label>:214:                                    ; preds = %212
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %215 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %215, align 16, !tbaa !877
  %216 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %228

; <label>:217:                                    ; preds = %602, %399, %220, %39
  unreachable

; <label>:218:                                    ; preds = %39, %39
  br i1 %40, label %219, label %220

; <label>:219:                                    ; preds = %218, %212, %207, %200, %195, %190, %185, %180, %175, %170, %165, %160, %155, %148, %141, %134, %129, %124, %119, %114, %109, %104, %99, %94, %87, %80, %39, %39
  br label %220

; <label>:220:                                    ; preds = %219, %218, %39, %39
  %221 = phi i32 [ -1, %219 ], [ 0, %218 ], [ 0, %39 ], [ 0, %39 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %222 = bitcast <2 x i64>* %7 to i32*
  store i32 %221, i32* %222, align 16, !tbaa !877
  %223 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %224 = fcmp uno float %27, %16
  %225 = xor i1 %224, true
  switch i8 %21, label %217 [
    i8 31, label %387
    i8 1, label %378
    i8 2, label %369
    i8 3, label %368
    i8 4, label %362
    i8 5, label %356
    i8 6, label %350
    i8 7, label %349
    i8 8, label %343
    i8 9, label %337
    i8 10, label %331
    i8 11, label %399
    i8 12, label %325
    i8 13, label %316
    i8 14, label %307
    i8 15, label %387
    i8 16, label %298
    i8 17, label %292
    i8 18, label %286
    i8 19, label %368
    i8 20, label %280
    i8 21, label %274
    i8 22, label %268
    i8 23, label %267
    i8 24, label %261
    i8 25, label %255
    i8 26, label %249
    i8 27, label %399
    i8 28, label %240
    i8 29, label %234
    i8 30, label %228
  ]

; <label>:226:                                    ; preds = %64, %60
  %227 = phi %struct.Memory* [ %63, %60 ], [ %0, %64 ]
  ret %struct.Memory* %227

; <label>:228:                                    ; preds = %220, %214
  %229 = phi i64 [ %216, %214 ], [ %223, %220 ]
  %230 = fcmp ogt float %27, %16
  br i1 %230, label %387, label %231

; <label>:231:                                    ; preds = %228
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %229, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %232 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %232, align 4, !tbaa !877
  %233 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %406

; <label>:234:                                    ; preds = %220, %209
  %235 = phi i64 [ %211, %209 ], [ %223, %220 ]
  %236 = fcmp ult float %27, %16
  br i1 %236, label %237, label %387

; <label>:237:                                    ; preds = %234
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %235, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %238 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %238, align 4, !tbaa !877
  %239 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %413

; <label>:240:                                    ; preds = %220, %203
  %241 = phi i1 [ %206, %203 ], [ %225, %220 ]
  %242 = phi i64 [ %205, %203 ], [ %223, %220 ]
  %243 = fcmp une float %27, %16
  %244 = and i1 %243, %241
  br i1 %244, label %387, label %245

; <label>:245:                                    ; preds = %240
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %242, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %246 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %246, align 4, !tbaa !877
  %247 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %248 = fcmp ord float %29, %18
  br label %420

; <label>:249:                                    ; preds = %220, %197
  %250 = phi i64 [ %199, %197 ], [ %223, %220 ]
  %251 = fcmp ule float %27, %16
  br i1 %251, label %387, label %252

; <label>:252:                                    ; preds = %249
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %250, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %253 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %253, align 4, !tbaa !877
  %254 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %430

; <label>:255:                                    ; preds = %220, %192
  %256 = phi i64 [ %194, %192 ], [ %223, %220 ]
  %257 = fcmp ult float %27, %16
  br i1 %257, label %387, label %258

; <label>:258:                                    ; preds = %255
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %256, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %259 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %259, align 4, !tbaa !877
  %260 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %437

; <label>:261:                                    ; preds = %220, %187
  %262 = phi i64 [ %189, %187 ], [ %223, %220 ]
  %263 = fcmp ueq float %27, %16
  br i1 %263, label %387, label %264

; <label>:264:                                    ; preds = %261
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %262, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %265 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %265, align 4, !tbaa !877
  %266 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %444

; <label>:267:                                    ; preds = %220
  br i1 %224, label %394, label %387

; <label>:268:                                    ; preds = %220, %177
  %269 = phi i64 [ %179, %177 ], [ %223, %220 ]
  %270 = fcmp ugt float %27, %16
  br i1 %270, label %387, label %271

; <label>:271:                                    ; preds = %268
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %269, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %272 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %272, align 4, !tbaa !877
  %273 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %452

; <label>:274:                                    ; preds = %220, %172
  %275 = phi i64 [ %174, %172 ], [ %223, %220 ]
  %276 = fcmp uge float %27, %16
  br i1 %276, label %387, label %277

; <label>:277:                                    ; preds = %274
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %275, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %278 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %278, align 4, !tbaa !877
  %279 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %459

; <label>:280:                                    ; preds = %220, %167
  %281 = phi i64 [ %169, %167 ], [ %223, %220 ]
  %282 = fcmp une float %27, %16
  br i1 %282, label %387, label %283

; <label>:283:                                    ; preds = %280
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %281, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %284 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %284, align 4, !tbaa !877
  %285 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %466

; <label>:286:                                    ; preds = %220, %162
  %287 = phi i64 [ %164, %162 ], [ %223, %220 ]
  %288 = fcmp ugt float %27, %16
  br i1 %288, label %289, label %387

; <label>:289:                                    ; preds = %286
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %287, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %290 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %290, align 4, !tbaa !877
  %291 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %473

; <label>:292:                                    ; preds = %220, %157
  %293 = phi i64 [ %159, %157 ], [ %223, %220 ]
  %294 = fcmp olt float %27, %16
  br i1 %294, label %387, label %295

; <label>:295:                                    ; preds = %292
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %293, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %296 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %296, align 4, !tbaa !877
  %297 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %480

; <label>:298:                                    ; preds = %220, %151
  %299 = phi i1 [ %154, %151 ], [ %225, %220 ]
  %300 = phi i64 [ %153, %151 ], [ %223, %220 ]
  %301 = fcmp oeq float %27, %16
  %302 = and i1 %301, %299
  br i1 %302, label %387, label %303

; <label>:303:                                    ; preds = %298
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %300, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %304 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %304, align 4, !tbaa !877
  %305 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %306 = fcmp ord float %29, %18
  br label %487

; <label>:307:                                    ; preds = %220, %144
  %308 = phi i1 [ %147, %144 ], [ %225, %220 ]
  %309 = phi i64 [ %146, %144 ], [ %223, %220 ]
  %310 = fcmp ogt float %27, %16
  %311 = and i1 %310, %308
  br i1 %311, label %387, label %312

; <label>:312:                                    ; preds = %307
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %309, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %313 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %313, align 4, !tbaa !877
  %314 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %315 = fcmp ord float %29, %18
  br label %497

; <label>:316:                                    ; preds = %220, %137
  %317 = phi i1 [ %140, %137 ], [ %225, %220 ]
  %318 = phi i64 [ %139, %137 ], [ %223, %220 ]
  %319 = fcmp oge float %27, %16
  %320 = and i1 %319, %317
  br i1 %320, label %387, label %321

; <label>:321:                                    ; preds = %316
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %318, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %322 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %322, align 4, !tbaa !877
  %323 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %324 = fcmp ord float %29, %18
  br label %507

; <label>:325:                                    ; preds = %220, %131
  %326 = phi i64 [ %133, %131 ], [ %223, %220 ]
  %327 = fcmp ueq float %27, %16
  br i1 %327, label %328, label %387

; <label>:328:                                    ; preds = %325
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %326, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %329 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %329, align 4, !tbaa !877
  %330 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %517

; <label>:331:                                    ; preds = %220, %126
  %332 = phi i64 [ %128, %126 ], [ %223, %220 ]
  %333 = fcmp ule float %27, %16
  br i1 %333, label %387, label %334

; <label>:334:                                    ; preds = %331
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %332, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %335 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %335, align 4, !tbaa !877
  %336 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %524

; <label>:337:                                    ; preds = %220, %121
  %338 = phi i64 [ %123, %121 ], [ %223, %220 ]
  %339 = fcmp ult float %27, %16
  br i1 %339, label %387, label %340

; <label>:340:                                    ; preds = %337
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %338, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %341 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %341, align 4, !tbaa !877
  %342 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %531

; <label>:343:                                    ; preds = %220, %116
  %344 = phi i64 [ %118, %116 ], [ %223, %220 ]
  %345 = fcmp ueq float %27, %16
  br i1 %345, label %387, label %346

; <label>:346:                                    ; preds = %343
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %344, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %347 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %347, align 4, !tbaa !877
  %348 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %538

; <label>:349:                                    ; preds = %220
  br i1 %224, label %389, label %387

; <label>:350:                                    ; preds = %220, %106
  %351 = phi i64 [ %108, %106 ], [ %223, %220 ]
  %352 = fcmp ugt float %27, %16
  br i1 %352, label %387, label %353

; <label>:353:                                    ; preds = %350
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %351, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %354 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %354, align 4, !tbaa !877
  %355 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %546

; <label>:356:                                    ; preds = %220, %101
  %357 = phi i64 [ %103, %101 ], [ %223, %220 ]
  %358 = fcmp uge float %27, %16
  br i1 %358, label %387, label %359

; <label>:359:                                    ; preds = %356
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %357, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %360 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %360, align 4, !tbaa !877
  %361 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %553

; <label>:362:                                    ; preds = %220, %96
  %363 = phi i64 [ %98, %96 ], [ %223, %220 ]
  %364 = fcmp une float %27, %16
  br i1 %364, label %387, label %365

; <label>:365:                                    ; preds = %362
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %363, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %366 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %366, align 4, !tbaa !877
  %367 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %560

; <label>:368:                                    ; preds = %220, %220
  br i1 %224, label %387, label %399

; <label>:369:                                    ; preds = %220, %90
  %370 = phi i1 [ %93, %90 ], [ %225, %220 ]
  %371 = phi i64 [ %92, %90 ], [ %223, %220 ]
  %372 = fcmp ole float %27, %16
  %373 = and i1 %372, %370
  br i1 %373, label %387, label %374

; <label>:374:                                    ; preds = %369
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %371, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %375 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %375, align 4, !tbaa !877
  %376 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %377 = fcmp ord float %29, %18
  br label %568

; <label>:378:                                    ; preds = %220, %83
  %379 = phi i1 [ %86, %83 ], [ %225, %220 ]
  %380 = phi i64 [ %85, %83 ], [ %223, %220 ]
  %381 = fcmp olt float %27, %16
  %382 = and i1 %381, %379
  br i1 %382, label %387, label %383

; <label>:383:                                    ; preds = %378
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %380, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %384 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %384, align 4, !tbaa !877
  %385 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %386 = fcmp ord float %29, %18
  br label %578

; <label>:387:                                    ; preds = %378, %369, %368, %362, %356, %350, %349, %343, %337, %331, %325, %316, %307, %298, %292, %286, %280, %274, %268, %267, %261, %255, %249, %240, %234, %228, %220, %220, %181, %110
  %388 = phi i64 [ %380, %378 ], [ %371, %369 ], [ %223, %368 ], [ %363, %362 ], [ %357, %356 ], [ %351, %350 ], [ %223, %349 ], [ %344, %343 ], [ %338, %337 ], [ %332, %331 ], [ %326, %325 ], [ %318, %316 ], [ %309, %307 ], [ %300, %298 ], [ %293, %292 ], [ %287, %286 ], [ %281, %280 ], [ %275, %274 ], [ %269, %268 ], [ %223, %267 ], [ %262, %261 ], [ %256, %255 ], [ %250, %249 ], [ %242, %240 ], [ %235, %234 ], [ %229, %228 ], [ %223, %220 ], [ %223, %220 ], [ %183, %181 ], [ %112, %110 ]
  br label %399

; <label>:389:                                    ; preds = %349, %110
  %390 = phi i64 [ %112, %110 ], [ %223, %349 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %390, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %391 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %391, align 4, !tbaa !877
  %392 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %393 = fcmp uno float %29, %18
  br i1 %393, label %590, label %588

; <label>:394:                                    ; preds = %267, %181
  %395 = phi i64 [ %183, %181 ], [ %223, %267 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %395, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %396 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 0, i32* %396, align 4, !tbaa !877
  %397 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %398 = fcmp uno float %29, %18
  br i1 %398, label %596, label %588

; <label>:399:                                    ; preds = %387, %368, %220, %220
  %400 = phi i64 [ %388, %387 ], [ %223, %368 ], [ %223, %220 ], [ %223, %220 ]
  %401 = phi i32 [ -1, %387 ], [ 0, %368 ], [ 0, %220 ], [ 0, %220 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %400, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %402 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 1
  store i32 %401, i32* %402, align 4, !tbaa !877
  %403 = load i64, i64* %35, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %404 = fcmp uno float %29, %18
  %405 = xor i1 %404, true
  switch i8 %21, label %217 [
    i8 31, label %588
    i8 1, label %578
    i8 2, label %568
    i8 3, label %567
    i8 4, label %560
    i8 5, label %553
    i8 6, label %546
    i8 7, label %545
    i8 8, label %538
    i8 9, label %531
    i8 10, label %524
    i8 11, label %602
    i8 12, label %517
    i8 13, label %507
    i8 14, label %497
    i8 15, label %588
    i8 16, label %487
    i8 17, label %480
    i8 18, label %473
    i8 19, label %567
    i8 20, label %466
    i8 21, label %459
    i8 22, label %452
    i8 23, label %451
    i8 24, label %444
    i8 25, label %437
    i8 26, label %430
    i8 27, label %602
    i8 28, label %420
    i8 29, label %413
    i8 30, label %406
  ]

; <label>:406:                                    ; preds = %399, %231
  %407 = phi i64 [ %233, %231 ], [ %403, %399 ]
  %408 = fcmp ogt float %29, %18
  br i1 %408, label %588, label %409

; <label>:409:                                    ; preds = %406
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %407, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %410 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %411 = bitcast i64* %410 to i32*
  store i32 0, i32* %411, align 8, !tbaa !877
  %412 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %610

; <label>:413:                                    ; preds = %399, %237
  %414 = phi i64 [ %239, %237 ], [ %403, %399 ]
  %415 = fcmp ult float %29, %18
  br i1 %415, label %416, label %588

; <label>:416:                                    ; preds = %413
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %414, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %417 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %418 = bitcast i64* %417 to i32*
  store i32 0, i32* %418, align 8, !tbaa !877
  %419 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %614

; <label>:420:                                    ; preds = %399, %245
  %421 = phi i1 [ %248, %245 ], [ %405, %399 ]
  %422 = phi i64 [ %247, %245 ], [ %403, %399 ]
  %423 = fcmp une float %29, %18
  %424 = and i1 %423, %421
  br i1 %424, label %588, label %425

; <label>:425:                                    ; preds = %420
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %422, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %426 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %427 = bitcast i64* %426 to i32*
  store i32 0, i32* %427, align 8, !tbaa !877
  %428 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %429 = fcmp ord float %32, %20
  br label %618

; <label>:430:                                    ; preds = %399, %252
  %431 = phi i64 [ %254, %252 ], [ %403, %399 ]
  %432 = fcmp ule float %29, %18
  br i1 %432, label %588, label %433

; <label>:433:                                    ; preds = %430
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %431, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %434 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %435 = bitcast i64* %434 to i32*
  store i32 0, i32* %435, align 8, !tbaa !877
  %436 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %624

; <label>:437:                                    ; preds = %399, %258
  %438 = phi i64 [ %260, %258 ], [ %403, %399 ]
  %439 = fcmp ult float %29, %18
  br i1 %439, label %588, label %440

; <label>:440:                                    ; preds = %437
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %438, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %441 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %442 = bitcast i64* %441 to i32*
  store i32 0, i32* %442, align 8, !tbaa !877
  %443 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %628

; <label>:444:                                    ; preds = %399, %264
  %445 = phi i64 [ %266, %264 ], [ %403, %399 ]
  %446 = fcmp ueq float %29, %18
  br i1 %446, label %588, label %447

; <label>:447:                                    ; preds = %444
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %445, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %448 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %449 = bitcast i64* %448 to i32*
  store i32 0, i32* %449, align 8, !tbaa !877
  %450 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %632

; <label>:451:                                    ; preds = %399
  br i1 %404, label %596, label %588

; <label>:452:                                    ; preds = %399, %271
  %453 = phi i64 [ %273, %271 ], [ %403, %399 ]
  %454 = fcmp ugt float %29, %18
  br i1 %454, label %588, label %455

; <label>:455:                                    ; preds = %452
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %453, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %456 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %457 = bitcast i64* %456 to i32*
  store i32 0, i32* %457, align 8, !tbaa !877
  %458 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %637

; <label>:459:                                    ; preds = %399, %277
  %460 = phi i64 [ %279, %277 ], [ %403, %399 ]
  %461 = fcmp uge float %29, %18
  br i1 %461, label %588, label %462

; <label>:462:                                    ; preds = %459
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %460, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %463 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %464 = bitcast i64* %463 to i32*
  store i32 0, i32* %464, align 8, !tbaa !877
  %465 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %641

; <label>:466:                                    ; preds = %399, %283
  %467 = phi i64 [ %285, %283 ], [ %403, %399 ]
  %468 = fcmp une float %29, %18
  br i1 %468, label %588, label %469

; <label>:469:                                    ; preds = %466
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %467, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %470 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %471 = bitcast i64* %470 to i32*
  store i32 0, i32* %471, align 8, !tbaa !877
  %472 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %645

; <label>:473:                                    ; preds = %399, %289
  %474 = phi i64 [ %291, %289 ], [ %403, %399 ]
  %475 = fcmp ugt float %29, %18
  br i1 %475, label %476, label %588

; <label>:476:                                    ; preds = %473
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %474, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %477 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %478 = bitcast i64* %477 to i32*
  store i32 0, i32* %478, align 8, !tbaa !877
  %479 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %649

; <label>:480:                                    ; preds = %399, %295
  %481 = phi i64 [ %297, %295 ], [ %403, %399 ]
  %482 = fcmp olt float %29, %18
  br i1 %482, label %588, label %483

; <label>:483:                                    ; preds = %480
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %481, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %484 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %485 = bitcast i64* %484 to i32*
  store i32 0, i32* %485, align 8, !tbaa !877
  %486 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %653

; <label>:487:                                    ; preds = %399, %303
  %488 = phi i1 [ %306, %303 ], [ %405, %399 ]
  %489 = phi i64 [ %305, %303 ], [ %403, %399 ]
  %490 = fcmp oeq float %29, %18
  %491 = and i1 %490, %488
  br i1 %491, label %588, label %492

; <label>:492:                                    ; preds = %487
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %489, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %493 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %494 = bitcast i64* %493 to i32*
  store i32 0, i32* %494, align 8, !tbaa !877
  %495 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %496 = fcmp ord float %32, %20
  br label %657

; <label>:497:                                    ; preds = %399, %312
  %498 = phi i1 [ %315, %312 ], [ %405, %399 ]
  %499 = phi i64 [ %314, %312 ], [ %403, %399 ]
  %500 = fcmp ogt float %29, %18
  %501 = and i1 %500, %498
  br i1 %501, label %588, label %502

; <label>:502:                                    ; preds = %497
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %499, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %503 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %504 = bitcast i64* %503 to i32*
  store i32 0, i32* %504, align 8, !tbaa !877
  %505 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %506 = fcmp ord float %32, %20
  br label %663

; <label>:507:                                    ; preds = %399, %321
  %508 = phi i1 [ %324, %321 ], [ %405, %399 ]
  %509 = phi i64 [ %323, %321 ], [ %403, %399 ]
  %510 = fcmp oge float %29, %18
  %511 = and i1 %510, %508
  br i1 %511, label %588, label %512

; <label>:512:                                    ; preds = %507
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %509, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %513 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %514 = bitcast i64* %513 to i32*
  store i32 0, i32* %514, align 8, !tbaa !877
  %515 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %516 = fcmp ord float %32, %20
  br label %669

; <label>:517:                                    ; preds = %399, %328
  %518 = phi i64 [ %330, %328 ], [ %403, %399 ]
  %519 = fcmp ueq float %29, %18
  br i1 %519, label %520, label %588

; <label>:520:                                    ; preds = %517
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %518, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %521 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %522 = bitcast i64* %521 to i32*
  store i32 0, i32* %522, align 8, !tbaa !877
  %523 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %675

; <label>:524:                                    ; preds = %399, %334
  %525 = phi i64 [ %336, %334 ], [ %403, %399 ]
  %526 = fcmp ule float %29, %18
  br i1 %526, label %588, label %527

; <label>:527:                                    ; preds = %524
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %525, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %528 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %529 = bitcast i64* %528 to i32*
  store i32 0, i32* %529, align 8, !tbaa !877
  %530 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %679

; <label>:531:                                    ; preds = %399, %340
  %532 = phi i64 [ %342, %340 ], [ %403, %399 ]
  %533 = fcmp ult float %29, %18
  br i1 %533, label %588, label %534

; <label>:534:                                    ; preds = %531
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %532, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %535 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %536 = bitcast i64* %535 to i32*
  store i32 0, i32* %536, align 8, !tbaa !877
  %537 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %683

; <label>:538:                                    ; preds = %399, %346
  %539 = phi i64 [ %348, %346 ], [ %403, %399 ]
  %540 = fcmp ueq float %29, %18
  br i1 %540, label %588, label %541

; <label>:541:                                    ; preds = %538
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %539, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %542 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %543 = bitcast i64* %542 to i32*
  store i32 0, i32* %543, align 8, !tbaa !877
  %544 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %687

; <label>:545:                                    ; preds = %399
  br i1 %404, label %590, label %588

; <label>:546:                                    ; preds = %399, %353
  %547 = phi i64 [ %355, %353 ], [ %403, %399 ]
  %548 = fcmp ugt float %29, %18
  br i1 %548, label %588, label %549

; <label>:549:                                    ; preds = %546
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %547, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %550 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %551 = bitcast i64* %550 to i32*
  store i32 0, i32* %551, align 8, !tbaa !877
  %552 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %692

; <label>:553:                                    ; preds = %399, %359
  %554 = phi i64 [ %361, %359 ], [ %403, %399 ]
  %555 = fcmp uge float %29, %18
  br i1 %555, label %588, label %556

; <label>:556:                                    ; preds = %553
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %554, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %557 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %558 = bitcast i64* %557 to i32*
  store i32 0, i32* %558, align 8, !tbaa !877
  %559 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %696

; <label>:560:                                    ; preds = %399, %365
  %561 = phi i64 [ %367, %365 ], [ %403, %399 ]
  %562 = fcmp une float %29, %18
  br i1 %562, label %588, label %563

; <label>:563:                                    ; preds = %560
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %561, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %564 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %565 = bitcast i64* %564 to i32*
  store i32 0, i32* %565, align 8, !tbaa !877
  %566 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %700

; <label>:567:                                    ; preds = %399, %399
  br i1 %404, label %588, label %602

; <label>:568:                                    ; preds = %399, %374
  %569 = phi i1 [ %377, %374 ], [ %405, %399 ]
  %570 = phi i64 [ %376, %374 ], [ %403, %399 ]
  %571 = fcmp ole float %29, %18
  %572 = and i1 %571, %569
  br i1 %572, label %588, label %573

; <label>:573:                                    ; preds = %568
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %570, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %574 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %575 = bitcast i64* %574 to i32*
  store i32 0, i32* %575, align 8, !tbaa !877
  %576 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %577 = fcmp ord float %32, %20
  br label %705

; <label>:578:                                    ; preds = %399, %383
  %579 = phi i1 [ %386, %383 ], [ %405, %399 ]
  %580 = phi i64 [ %385, %383 ], [ %403, %399 ]
  %581 = fcmp olt float %29, %18
  %582 = and i1 %581, %579
  br i1 %582, label %588, label %583

; <label>:583:                                    ; preds = %578
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %580, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %584 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %585 = bitcast i64* %584 to i32*
  store i32 0, i32* %585, align 8, !tbaa !877
  %586 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %587 = fcmp ord float %32, %20
  br label %711

; <label>:588:                                    ; preds = %578, %568, %567, %560, %553, %546, %545, %538, %531, %524, %517, %507, %497, %487, %480, %473, %466, %459, %452, %451, %444, %437, %430, %420, %413, %406, %399, %399, %394, %389
  %589 = phi i64 [ %580, %578 ], [ %570, %568 ], [ %403, %567 ], [ %561, %560 ], [ %554, %553 ], [ %547, %546 ], [ %403, %545 ], [ %539, %538 ], [ %532, %531 ], [ %525, %524 ], [ %518, %517 ], [ %509, %507 ], [ %499, %497 ], [ %489, %487 ], [ %481, %480 ], [ %474, %473 ], [ %467, %466 ], [ %460, %459 ], [ %453, %452 ], [ %403, %451 ], [ %445, %444 ], [ %438, %437 ], [ %431, %430 ], [ %422, %420 ], [ %414, %413 ], [ %407, %406 ], [ %403, %399 ], [ %403, %399 ], [ %397, %394 ], [ %392, %389 ]
  br label %602

; <label>:590:                                    ; preds = %545, %389
  %591 = phi i64 [ %392, %389 ], [ %403, %545 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %591, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %592 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %593 = bitcast i64* %592 to i32*
  store i32 0, i32* %593, align 8, !tbaa !877
  %594 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %595 = fcmp uno float %32, %20
  br i1 %595, label %720, label %717

; <label>:596:                                    ; preds = %451, %394
  %597 = phi i64 [ %397, %394 ], [ %403, %451 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %597, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %598 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %599 = bitcast i64* %598 to i32*
  store i32 0, i32* %599, align 8, !tbaa !877
  %600 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %601 = fcmp uno float %32, %20
  br i1 %601, label %720, label %717

; <label>:602:                                    ; preds = %588, %567, %399, %399
  %603 = phi i64 [ %589, %588 ], [ %403, %567 ], [ %403, %399 ], [ %403, %399 ]
  %604 = phi i32 [ -1, %588 ], [ 0, %567 ], [ 0, %399 ], [ 0, %399 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %603, i64* %35, align 16
  store i64 0, i64* %36, align 8
  %605 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %606 = bitcast i64* %605 to i32*
  store i32 %604, i32* %606, align 8, !tbaa !877
  %607 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  %608 = fcmp uno float %32, %20
  %609 = xor i1 %608, true
  switch i8 %21, label %217 [
    i8 31, label %717
    i8 1, label %711
    i8 2, label %705
    i8 3, label %704
    i8 4, label %700
    i8 5, label %696
    i8 6, label %692
    i8 7, label %691
    i8 8, label %687
    i8 9, label %683
    i8 10, label %679
    i8 11, label %720
    i8 12, label %675
    i8 13, label %669
    i8 14, label %663
    i8 15, label %717
    i8 16, label %657
    i8 17, label %653
    i8 18, label %649
    i8 19, label %704
    i8 20, label %645
    i8 21, label %641
    i8 22, label %637
    i8 23, label %636
    i8 24, label %632
    i8 25, label %628
    i8 26, label %624
    i8 27, label %720
    i8 28, label %618
    i8 29, label %614
    i8 30, label %610
  ]

; <label>:610:                                    ; preds = %602, %409
  %611 = phi i64 [ %412, %409 ], [ %607, %602 ]
  %612 = phi i64 [ %407, %409 ], [ %603, %602 ]
  %613 = fcmp ogt float %32, %20
  br i1 %613, label %717, label %720

; <label>:614:                                    ; preds = %602, %416
  %615 = phi i64 [ %419, %416 ], [ %607, %602 ]
  %616 = phi i64 [ %414, %416 ], [ %603, %602 ]
  %617 = fcmp ult float %32, %20
  br i1 %617, label %720, label %717

; <label>:618:                                    ; preds = %602, %425
  %619 = phi i1 [ %429, %425 ], [ %609, %602 ]
  %620 = phi i64 [ %428, %425 ], [ %607, %602 ]
  %621 = phi i64 [ %422, %425 ], [ %603, %602 ]
  %622 = fcmp une float %32, %20
  %623 = and i1 %622, %619
  br i1 %623, label %717, label %720

; <label>:624:                                    ; preds = %602, %433
  %625 = phi i64 [ %436, %433 ], [ %607, %602 ]
  %626 = phi i64 [ %431, %433 ], [ %603, %602 ]
  %627 = fcmp ule float %32, %20
  br i1 %627, label %717, label %720

; <label>:628:                                    ; preds = %602, %440
  %629 = phi i64 [ %443, %440 ], [ %607, %602 ]
  %630 = phi i64 [ %438, %440 ], [ %603, %602 ]
  %631 = fcmp ult float %32, %20
  br i1 %631, label %717, label %720

; <label>:632:                                    ; preds = %602, %447
  %633 = phi i64 [ %450, %447 ], [ %607, %602 ]
  %634 = phi i64 [ %445, %447 ], [ %603, %602 ]
  %635 = fcmp ueq float %32, %20
  br i1 %635, label %717, label %720

; <label>:636:                                    ; preds = %602
  br i1 %608, label %720, label %717

; <label>:637:                                    ; preds = %602, %455
  %638 = phi i64 [ %458, %455 ], [ %607, %602 ]
  %639 = phi i64 [ %453, %455 ], [ %603, %602 ]
  %640 = fcmp ugt float %32, %20
  br i1 %640, label %717, label %720

; <label>:641:                                    ; preds = %602, %462
  %642 = phi i64 [ %465, %462 ], [ %607, %602 ]
  %643 = phi i64 [ %460, %462 ], [ %603, %602 ]
  %644 = fcmp uge float %32, %20
  br i1 %644, label %717, label %720

; <label>:645:                                    ; preds = %602, %469
  %646 = phi i64 [ %472, %469 ], [ %607, %602 ]
  %647 = phi i64 [ %467, %469 ], [ %603, %602 ]
  %648 = fcmp une float %32, %20
  br i1 %648, label %717, label %720

; <label>:649:                                    ; preds = %602, %476
  %650 = phi i64 [ %479, %476 ], [ %607, %602 ]
  %651 = phi i64 [ %474, %476 ], [ %603, %602 ]
  %652 = fcmp ugt float %32, %20
  br i1 %652, label %720, label %717

; <label>:653:                                    ; preds = %602, %483
  %654 = phi i64 [ %486, %483 ], [ %607, %602 ]
  %655 = phi i64 [ %481, %483 ], [ %603, %602 ]
  %656 = fcmp olt float %32, %20
  br i1 %656, label %717, label %720

; <label>:657:                                    ; preds = %602, %492
  %658 = phi i1 [ %496, %492 ], [ %609, %602 ]
  %659 = phi i64 [ %495, %492 ], [ %607, %602 ]
  %660 = phi i64 [ %489, %492 ], [ %603, %602 ]
  %661 = fcmp oeq float %32, %20
  %662 = and i1 %661, %658
  br i1 %662, label %717, label %720

; <label>:663:                                    ; preds = %602, %502
  %664 = phi i1 [ %506, %502 ], [ %609, %602 ]
  %665 = phi i64 [ %505, %502 ], [ %607, %602 ]
  %666 = phi i64 [ %499, %502 ], [ %603, %602 ]
  %667 = fcmp ogt float %32, %20
  %668 = and i1 %667, %664
  br i1 %668, label %717, label %720

; <label>:669:                                    ; preds = %602, %512
  %670 = phi i1 [ %516, %512 ], [ %609, %602 ]
  %671 = phi i64 [ %515, %512 ], [ %607, %602 ]
  %672 = phi i64 [ %509, %512 ], [ %603, %602 ]
  %673 = fcmp oge float %32, %20
  %674 = and i1 %673, %670
  br i1 %674, label %717, label %720

; <label>:675:                                    ; preds = %602, %520
  %676 = phi i64 [ %523, %520 ], [ %607, %602 ]
  %677 = phi i64 [ %518, %520 ], [ %603, %602 ]
  %678 = fcmp ueq float %32, %20
  br i1 %678, label %720, label %717

; <label>:679:                                    ; preds = %602, %527
  %680 = phi i64 [ %530, %527 ], [ %607, %602 ]
  %681 = phi i64 [ %525, %527 ], [ %603, %602 ]
  %682 = fcmp ule float %32, %20
  br i1 %682, label %717, label %720

; <label>:683:                                    ; preds = %602, %534
  %684 = phi i64 [ %537, %534 ], [ %607, %602 ]
  %685 = phi i64 [ %532, %534 ], [ %603, %602 ]
  %686 = fcmp ult float %32, %20
  br i1 %686, label %717, label %720

; <label>:687:                                    ; preds = %602, %541
  %688 = phi i64 [ %544, %541 ], [ %607, %602 ]
  %689 = phi i64 [ %539, %541 ], [ %603, %602 ]
  %690 = fcmp ueq float %32, %20
  br i1 %690, label %717, label %720

; <label>:691:                                    ; preds = %602
  br i1 %608, label %720, label %717

; <label>:692:                                    ; preds = %602, %549
  %693 = phi i64 [ %552, %549 ], [ %607, %602 ]
  %694 = phi i64 [ %547, %549 ], [ %603, %602 ]
  %695 = fcmp ugt float %32, %20
  br i1 %695, label %717, label %720

; <label>:696:                                    ; preds = %602, %556
  %697 = phi i64 [ %559, %556 ], [ %607, %602 ]
  %698 = phi i64 [ %554, %556 ], [ %603, %602 ]
  %699 = fcmp uge float %32, %20
  br i1 %699, label %717, label %720

; <label>:700:                                    ; preds = %602, %563
  %701 = phi i64 [ %566, %563 ], [ %607, %602 ]
  %702 = phi i64 [ %561, %563 ], [ %603, %602 ]
  %703 = fcmp une float %32, %20
  br i1 %703, label %717, label %720

; <label>:704:                                    ; preds = %602, %602
  br i1 %608, label %717, label %720

; <label>:705:                                    ; preds = %602, %573
  %706 = phi i1 [ %577, %573 ], [ %609, %602 ]
  %707 = phi i64 [ %576, %573 ], [ %607, %602 ]
  %708 = phi i64 [ %570, %573 ], [ %603, %602 ]
  %709 = fcmp ole float %32, %20
  %710 = and i1 %709, %706
  br i1 %710, label %717, label %720

; <label>:711:                                    ; preds = %602, %583
  %712 = phi i1 [ %587, %583 ], [ %609, %602 ]
  %713 = phi i64 [ %586, %583 ], [ %607, %602 ]
  %714 = phi i64 [ %580, %583 ], [ %603, %602 ]
  %715 = fcmp olt float %32, %20
  %716 = and i1 %715, %712
  br i1 %716, label %717, label %720

; <label>:717:                                    ; preds = %711, %705, %704, %700, %696, %692, %691, %687, %683, %679, %675, %669, %663, %657, %653, %649, %645, %641, %637, %636, %632, %628, %624, %618, %614, %610, %602, %602, %596, %590
  %718 = phi i64 [ %713, %711 ], [ %707, %705 ], [ %607, %704 ], [ %701, %700 ], [ %697, %696 ], [ %693, %692 ], [ %607, %691 ], [ %688, %687 ], [ %684, %683 ], [ %680, %679 ], [ %676, %675 ], [ %671, %669 ], [ %665, %663 ], [ %659, %657 ], [ %654, %653 ], [ %650, %649 ], [ %646, %645 ], [ %642, %641 ], [ %638, %637 ], [ %607, %636 ], [ %633, %632 ], [ %629, %628 ], [ %625, %624 ], [ %620, %618 ], [ %615, %614 ], [ %611, %610 ], [ %607, %602 ], [ %607, %602 ], [ %600, %596 ], [ %594, %590 ]
  %719 = phi i64 [ %714, %711 ], [ %708, %705 ], [ %603, %704 ], [ %702, %700 ], [ %698, %696 ], [ %694, %692 ], [ %603, %691 ], [ %689, %687 ], [ %685, %683 ], [ %681, %679 ], [ %677, %675 ], [ %672, %669 ], [ %666, %663 ], [ %660, %657 ], [ %655, %653 ], [ %651, %649 ], [ %647, %645 ], [ %643, %641 ], [ %639, %637 ], [ %603, %636 ], [ %634, %632 ], [ %630, %628 ], [ %626, %624 ], [ %621, %618 ], [ %616, %614 ], [ %612, %610 ], [ %603, %602 ], [ %603, %602 ], [ %597, %596 ], [ %591, %590 ]
  br label %720

; <label>:720:                                    ; preds = %717, %711, %705, %704, %700, %696, %692, %691, %687, %683, %679, %675, %669, %663, %657, %653, %649, %645, %641, %637, %636, %632, %628, %624, %618, %614, %610, %602, %602, %596, %590
  %721 = phi i64 [ %718, %717 ], [ %607, %704 ], [ %611, %610 ], [ %615, %614 ], [ %620, %618 ], [ %625, %624 ], [ %629, %628 ], [ %633, %632 ], [ %607, %636 ], [ %638, %637 ], [ %642, %641 ], [ %646, %645 ], [ %650, %649 ], [ %654, %653 ], [ %659, %657 ], [ %665, %663 ], [ %671, %669 ], [ %676, %675 ], [ %680, %679 ], [ %684, %683 ], [ %688, %687 ], [ %607, %691 ], [ %693, %692 ], [ %697, %696 ], [ %701, %700 ], [ %707, %705 ], [ %713, %711 ], [ %607, %602 ], [ %607, %602 ], [ %600, %596 ], [ %594, %590 ]
  %722 = phi i64 [ %719, %717 ], [ %603, %704 ], [ %612, %610 ], [ %616, %614 ], [ %621, %618 ], [ %626, %624 ], [ %630, %628 ], [ %634, %632 ], [ %603, %636 ], [ %639, %637 ], [ %643, %641 ], [ %647, %645 ], [ %651, %649 ], [ %655, %653 ], [ %660, %657 ], [ %666, %663 ], [ %672, %669 ], [ %677, %675 ], [ %681, %679 ], [ %685, %683 ], [ %689, %687 ], [ %603, %691 ], [ %694, %692 ], [ %698, %696 ], [ %702, %700 ], [ %708, %705 ], [ %714, %711 ], [ %603, %602 ], [ %603, %602 ], [ %597, %596 ], [ %591, %590 ]
  %723 = phi i32 [ -1, %717 ], [ 0, %704 ], [ 0, %610 ], [ 0, %614 ], [ 0, %618 ], [ 0, %624 ], [ 0, %628 ], [ 0, %632 ], [ 0, %636 ], [ 0, %637 ], [ 0, %641 ], [ 0, %645 ], [ 0, %649 ], [ 0, %653 ], [ 0, %657 ], [ 0, %663 ], [ 0, %669 ], [ 0, %675 ], [ 0, %679 ], [ 0, %683 ], [ 0, %687 ], [ 0, %691 ], [ 0, %692 ], [ 0, %696 ], [ 0, %700 ], [ 0, %705 ], [ 0, %711 ], [ 0, %602 ], [ 0, %602 ], [ 0, %596 ], [ 0, %590 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %34)
  store i64 %722, i64* %35, align 16
  store i64 %721, i64* %36, align 8
  %724 = getelementptr inbounds [4 x i32], [4 x i32]* %37, i64 0, i64 3
  store i32 %723, i32* %724, align 4, !tbaa !877
  %725 = load i64, i64* %36, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %34)
  br label %64
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64) #0 {
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to { i64, i64 }*
  %9 = bitcast i8* %3 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr inbounds i8, i8* %3, i64 8
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = trunc i64 %5 to i8
  %20 = icmp ugt i8 %19, 31
  %21 = trunc i64 %10 to i32
  %22 = bitcast i32 %21 to float
  %23 = trunc i64 %15 to i32
  %24 = bitcast i32 %23 to float
  %25 = lshr i64 %10, 32
  %26 = trunc i64 %25 to i32
  %27 = bitcast i32 %26 to float
  %28 = lshr i64 %15, 32
  %29 = trunc i64 %28 to i32
  %30 = bitcast i32 %29 to float
  %31 = trunc i64 %13 to i32
  %32 = bitcast i32 %31 to float
  %33 = trunc i64 %18 to i32
  %34 = bitcast i32 %33 to float
  %35 = lshr i64 %13, 32
  %36 = trunc i64 %35 to i32
  %37 = bitcast i32 %36 to float
  %38 = lshr i64 %18, 32
  %39 = trunc i64 %38 to i32
  %40 = bitcast i32 %39 to float
  br i1 %20, label %68, label %41

; <label>:41:                                     ; preds = %6
  %42 = bitcast <2 x i64>* %7 to i8*
  %43 = getelementptr inbounds <2 x i64>, <2 x i64>* %7, i64 0, i64 0
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %45 = bitcast <2 x i64>* %7 to [4 x i32]*
  %46 = icmp eq i8 %19, 0
  br i1 %46, label %50, label %47

; <label>:47:                                     ; preds = %41
  %48 = fcmp uno float %22, %24
  %49 = xor i1 %48, true
  switch i8 %19, label %225 [
    i8 31, label %227
    i8 1, label %88
    i8 2, label %95
    i8 3, label %226
    i8 4, label %102
    i8 5, label %107
    i8 6, label %112
    i8 7, label %117
    i8 8, label %122
    i8 9, label %127
    i8 10, label %132
    i8 11, label %228
    i8 12, label %137
    i8 13, label %142
    i8 14, label %149
    i8 15, label %227
    i8 16, label %156
    i8 17, label %163
    i8 18, label %168
    i8 19, label %226
    i8 20, label %173
    i8 21, label %178
    i8 22, label %183
    i8 23, label %188
    i8 24, label %193
    i8 25, label %198
    i8 26, label %203
    i8 27, label %228
    i8 28, label %208
    i8 29, label %215
    i8 30, label %220
  ]

; <label>:50:                                     ; preds = %41
  %51 = fcmp oeq float %22, %24
  %52 = sext i1 %51 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %53 = bitcast <2 x i64>* %7 to i32*
  store i32 %52, i32* %53, align 16, !tbaa !877
  %54 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %55 = fcmp oeq float %27, %30
  %56 = sext i1 %55 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %54, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %57 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 %56, i32* %57, align 4, !tbaa !877
  %58 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %59 = fcmp oeq float %32, %34
  %60 = sext i1 %59 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %58, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %62 = bitcast i64* %61 to i32*
  store i32 %60, i32* %62, align 8, !tbaa !877
  %63 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %64 = fcmp oeq float %37, %40
  %65 = sext i1 %64 to i32
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %58, i64* %43, align 16
  store i64 %63, i64* %44, align 8
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 3
  store i32 %65, i32* %66, align 4, !tbaa !877
  %67 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %72

; <label>:68:                                     ; preds = %6
  %69 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %70 = load i64, i64* %69, align 8, !tbaa !870
  %71 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %70, %struct.Memory* %0) #21
  br label %234

; <label>:72:                                     ; preds = %728, %50
  %73 = phi i64 [ %58, %50 ], [ %730, %728 ]
  %74 = phi i64 [ %67, %50 ], [ %733, %728 ]
  %75 = lshr i64 %73, 32
  %76 = trunc i64 %73 to i32
  %77 = trunc i64 %75 to i32
  %78 = bitcast i8* %2 to i32*
  store i32 %76, i32* %78, align 1, !tbaa !877
  %79 = getelementptr inbounds i8, i8* %2, i64 4
  %80 = bitcast i8* %79 to i32*
  store i32 %77, i32* %80, align 1, !tbaa !877
  %81 = trunc i64 %74 to i32
  %82 = getelementptr inbounds i8, i8* %2, i64 8
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1, !tbaa !877
  %84 = lshr i64 %74, 32
  %85 = trunc i64 %84 to i32
  %86 = getelementptr inbounds i8, i8* %2, i64 12
  %87 = bitcast i8* %86 to i32*
  store i32 %85, i32* %87, align 1, !tbaa !877
  br label %234

; <label>:88:                                     ; preds = %47
  %89 = fcmp olt float %22, %24
  %90 = and i1 %89, %49
  br i1 %90, label %227, label %91

; <label>:91:                                     ; preds = %88
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %92 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %92, align 16, !tbaa !877
  %93 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %94 = fcmp ord float %27, %30
  br label %386

; <label>:95:                                     ; preds = %47
  %96 = fcmp ole float %22, %24
  %97 = and i1 %96, %49
  br i1 %97, label %227, label %98

; <label>:98:                                     ; preds = %95
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %99 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %99, align 16, !tbaa !877
  %100 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %101 = fcmp ord float %27, %30
  br label %377

; <label>:102:                                    ; preds = %47
  %103 = fcmp une float %22, %24
  br i1 %103, label %227, label %104

; <label>:104:                                    ; preds = %102
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %105 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %105, align 16, !tbaa !877
  %106 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %370

; <label>:107:                                    ; preds = %47
  %108 = fcmp uge float %22, %24
  br i1 %108, label %227, label %109

; <label>:109:                                    ; preds = %107
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %110 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %110, align 16, !tbaa !877
  %111 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %364

; <label>:112:                                    ; preds = %47
  %113 = fcmp ugt float %22, %24
  br i1 %113, label %227, label %114

; <label>:114:                                    ; preds = %112
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %115 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %115, align 16, !tbaa !877
  %116 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %358

; <label>:117:                                    ; preds = %47
  br i1 %48, label %118, label %227

; <label>:118:                                    ; preds = %117
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %119 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %119, align 16, !tbaa !877
  %120 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %121 = fcmp uno float %27, %30
  br i1 %121, label %397, label %395

; <label>:122:                                    ; preds = %47
  %123 = fcmp ueq float %22, %24
  br i1 %123, label %227, label %124

; <label>:124:                                    ; preds = %122
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %125 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %125, align 16, !tbaa !877
  %126 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %351

; <label>:127:                                    ; preds = %47
  %128 = fcmp ult float %22, %24
  br i1 %128, label %227, label %129

; <label>:129:                                    ; preds = %127
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %130 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %130, align 16, !tbaa !877
  %131 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %345

; <label>:132:                                    ; preds = %47
  %133 = fcmp ule float %22, %24
  br i1 %133, label %227, label %134

; <label>:134:                                    ; preds = %132
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %135 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %135, align 16, !tbaa !877
  %136 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %339

; <label>:137:                                    ; preds = %47
  %138 = fcmp ueq float %22, %24
  br i1 %138, label %139, label %227

; <label>:139:                                    ; preds = %137
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %140 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %140, align 16, !tbaa !877
  %141 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %333

; <label>:142:                                    ; preds = %47
  %143 = fcmp oge float %22, %24
  %144 = and i1 %143, %49
  br i1 %144, label %227, label %145

; <label>:145:                                    ; preds = %142
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %146 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %146, align 16, !tbaa !877
  %147 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %148 = fcmp ord float %27, %30
  br label %324

; <label>:149:                                    ; preds = %47
  %150 = fcmp ogt float %22, %24
  %151 = and i1 %150, %49
  br i1 %151, label %227, label %152

; <label>:152:                                    ; preds = %149
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %153 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %153, align 16, !tbaa !877
  %154 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %155 = fcmp ord float %27, %30
  br label %315

; <label>:156:                                    ; preds = %47
  %157 = fcmp oeq float %22, %24
  %158 = and i1 %157, %49
  br i1 %158, label %227, label %159

; <label>:159:                                    ; preds = %156
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %160 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %160, align 16, !tbaa !877
  %161 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %162 = fcmp ord float %27, %30
  br label %306

; <label>:163:                                    ; preds = %47
  %164 = fcmp olt float %22, %24
  br i1 %164, label %227, label %165

; <label>:165:                                    ; preds = %163
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %166 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %166, align 16, !tbaa !877
  %167 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %300

; <label>:168:                                    ; preds = %47
  %169 = fcmp ugt float %22, %24
  br i1 %169, label %170, label %227

; <label>:170:                                    ; preds = %168
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %171 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %171, align 16, !tbaa !877
  %172 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %294

; <label>:173:                                    ; preds = %47
  %174 = fcmp une float %22, %24
  br i1 %174, label %227, label %175

; <label>:175:                                    ; preds = %173
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %176 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %176, align 16, !tbaa !877
  %177 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %288

; <label>:178:                                    ; preds = %47
  %179 = fcmp uge float %22, %24
  br i1 %179, label %227, label %180

; <label>:180:                                    ; preds = %178
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %181 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %181, align 16, !tbaa !877
  %182 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %282

; <label>:183:                                    ; preds = %47
  %184 = fcmp ugt float %22, %24
  br i1 %184, label %227, label %185

; <label>:185:                                    ; preds = %183
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %186 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %186, align 16, !tbaa !877
  %187 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %276

; <label>:188:                                    ; preds = %47
  br i1 %48, label %189, label %227

; <label>:189:                                    ; preds = %188
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %190 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %190, align 16, !tbaa !877
  %191 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %192 = fcmp uno float %27, %30
  br i1 %192, label %402, label %395

; <label>:193:                                    ; preds = %47
  %194 = fcmp ueq float %22, %24
  br i1 %194, label %227, label %195

; <label>:195:                                    ; preds = %193
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %196 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %196, align 16, !tbaa !877
  %197 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %269

; <label>:198:                                    ; preds = %47
  %199 = fcmp ult float %22, %24
  br i1 %199, label %227, label %200

; <label>:200:                                    ; preds = %198
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %201 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %201, align 16, !tbaa !877
  %202 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %263

; <label>:203:                                    ; preds = %47
  %204 = fcmp ule float %22, %24
  br i1 %204, label %227, label %205

; <label>:205:                                    ; preds = %203
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %206 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %206, align 16, !tbaa !877
  %207 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %257

; <label>:208:                                    ; preds = %47
  %209 = fcmp une float %22, %24
  %210 = and i1 %209, %49
  br i1 %210, label %227, label %211

; <label>:211:                                    ; preds = %208
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %212 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %212, align 16, !tbaa !877
  %213 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %214 = fcmp ord float %27, %30
  br label %248

; <label>:215:                                    ; preds = %47
  %216 = fcmp ult float %22, %24
  br i1 %216, label %217, label %227

; <label>:217:                                    ; preds = %215
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %218 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %218, align 16, !tbaa !877
  %219 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %242

; <label>:220:                                    ; preds = %47
  %221 = fcmp ogt float %22, %24
  br i1 %221, label %227, label %222

; <label>:222:                                    ; preds = %220
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %223 = bitcast <2 x i64>* %7 to i32*
  store i32 0, i32* %223, align 16, !tbaa !877
  %224 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %236

; <label>:225:                                    ; preds = %610, %407, %228, %47
  unreachable

; <label>:226:                                    ; preds = %47, %47
  br i1 %48, label %227, label %228

; <label>:227:                                    ; preds = %226, %220, %215, %208, %203, %198, %193, %188, %183, %178, %173, %168, %163, %156, %149, %142, %137, %132, %127, %122, %117, %112, %107, %102, %95, %88, %47, %47
  br label %228

; <label>:228:                                    ; preds = %227, %226, %47, %47
  %229 = phi i32 [ -1, %227 ], [ 0, %226 ], [ 0, %47 ], [ 0, %47 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store <2 x i64> zeroinitializer, <2 x i64>* %7, align 16
  %230 = bitcast <2 x i64>* %7 to i32*
  store i32 %229, i32* %230, align 16, !tbaa !877
  %231 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %232 = fcmp uno float %27, %30
  %233 = xor i1 %232, true
  switch i8 %19, label %225 [
    i8 31, label %395
    i8 1, label %386
    i8 2, label %377
    i8 3, label %376
    i8 4, label %370
    i8 5, label %364
    i8 6, label %358
    i8 7, label %357
    i8 8, label %351
    i8 9, label %345
    i8 10, label %339
    i8 11, label %407
    i8 12, label %333
    i8 13, label %324
    i8 14, label %315
    i8 15, label %395
    i8 16, label %306
    i8 17, label %300
    i8 18, label %294
    i8 19, label %376
    i8 20, label %288
    i8 21, label %282
    i8 22, label %276
    i8 23, label %275
    i8 24, label %269
    i8 25, label %263
    i8 26, label %257
    i8 27, label %407
    i8 28, label %248
    i8 29, label %242
    i8 30, label %236
  ]

; <label>:234:                                    ; preds = %72, %68
  %235 = phi %struct.Memory* [ %71, %68 ], [ %0, %72 ]
  ret %struct.Memory* %235

; <label>:236:                                    ; preds = %228, %222
  %237 = phi i64 [ %224, %222 ], [ %231, %228 ]
  %238 = fcmp ogt float %27, %30
  br i1 %238, label %395, label %239

; <label>:239:                                    ; preds = %236
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %237, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %240 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %240, align 4, !tbaa !877
  %241 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %414

; <label>:242:                                    ; preds = %228, %217
  %243 = phi i64 [ %219, %217 ], [ %231, %228 ]
  %244 = fcmp ult float %27, %30
  br i1 %244, label %245, label %395

; <label>:245:                                    ; preds = %242
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %243, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %246 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %246, align 4, !tbaa !877
  %247 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %421

; <label>:248:                                    ; preds = %228, %211
  %249 = phi i1 [ %214, %211 ], [ %233, %228 ]
  %250 = phi i64 [ %213, %211 ], [ %231, %228 ]
  %251 = fcmp une float %27, %30
  %252 = and i1 %251, %249
  br i1 %252, label %395, label %253

; <label>:253:                                    ; preds = %248
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %250, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %254 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %254, align 4, !tbaa !877
  %255 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %256 = fcmp ord float %32, %34
  br label %428

; <label>:257:                                    ; preds = %228, %205
  %258 = phi i64 [ %207, %205 ], [ %231, %228 ]
  %259 = fcmp ule float %27, %30
  br i1 %259, label %395, label %260

; <label>:260:                                    ; preds = %257
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %258, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %261 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %261, align 4, !tbaa !877
  %262 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %438

; <label>:263:                                    ; preds = %228, %200
  %264 = phi i64 [ %202, %200 ], [ %231, %228 ]
  %265 = fcmp ult float %27, %30
  br i1 %265, label %395, label %266

; <label>:266:                                    ; preds = %263
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %264, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %267 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %267, align 4, !tbaa !877
  %268 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %445

; <label>:269:                                    ; preds = %228, %195
  %270 = phi i64 [ %197, %195 ], [ %231, %228 ]
  %271 = fcmp ueq float %27, %30
  br i1 %271, label %395, label %272

; <label>:272:                                    ; preds = %269
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %270, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %273 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %273, align 4, !tbaa !877
  %274 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %452

; <label>:275:                                    ; preds = %228
  br i1 %232, label %402, label %395

; <label>:276:                                    ; preds = %228, %185
  %277 = phi i64 [ %187, %185 ], [ %231, %228 ]
  %278 = fcmp ugt float %27, %30
  br i1 %278, label %395, label %279

; <label>:279:                                    ; preds = %276
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %277, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %280 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %280, align 4, !tbaa !877
  %281 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %460

; <label>:282:                                    ; preds = %228, %180
  %283 = phi i64 [ %182, %180 ], [ %231, %228 ]
  %284 = fcmp uge float %27, %30
  br i1 %284, label %395, label %285

; <label>:285:                                    ; preds = %282
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %283, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %286 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %286, align 4, !tbaa !877
  %287 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %467

; <label>:288:                                    ; preds = %228, %175
  %289 = phi i64 [ %177, %175 ], [ %231, %228 ]
  %290 = fcmp une float %27, %30
  br i1 %290, label %395, label %291

; <label>:291:                                    ; preds = %288
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %289, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %292 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %292, align 4, !tbaa !877
  %293 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %474

; <label>:294:                                    ; preds = %228, %170
  %295 = phi i64 [ %172, %170 ], [ %231, %228 ]
  %296 = fcmp ugt float %27, %30
  br i1 %296, label %297, label %395

; <label>:297:                                    ; preds = %294
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %295, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %298 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %298, align 4, !tbaa !877
  %299 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %481

; <label>:300:                                    ; preds = %228, %165
  %301 = phi i64 [ %167, %165 ], [ %231, %228 ]
  %302 = fcmp olt float %27, %30
  br i1 %302, label %395, label %303

; <label>:303:                                    ; preds = %300
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %301, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %304 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %304, align 4, !tbaa !877
  %305 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %488

; <label>:306:                                    ; preds = %228, %159
  %307 = phi i1 [ %162, %159 ], [ %233, %228 ]
  %308 = phi i64 [ %161, %159 ], [ %231, %228 ]
  %309 = fcmp oeq float %27, %30
  %310 = and i1 %309, %307
  br i1 %310, label %395, label %311

; <label>:311:                                    ; preds = %306
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %308, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %312 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %312, align 4, !tbaa !877
  %313 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %314 = fcmp ord float %32, %34
  br label %495

; <label>:315:                                    ; preds = %228, %152
  %316 = phi i1 [ %155, %152 ], [ %233, %228 ]
  %317 = phi i64 [ %154, %152 ], [ %231, %228 ]
  %318 = fcmp ogt float %27, %30
  %319 = and i1 %318, %316
  br i1 %319, label %395, label %320

; <label>:320:                                    ; preds = %315
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %317, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %321 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %321, align 4, !tbaa !877
  %322 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %323 = fcmp ord float %32, %34
  br label %505

; <label>:324:                                    ; preds = %228, %145
  %325 = phi i1 [ %148, %145 ], [ %233, %228 ]
  %326 = phi i64 [ %147, %145 ], [ %231, %228 ]
  %327 = fcmp oge float %27, %30
  %328 = and i1 %327, %325
  br i1 %328, label %395, label %329

; <label>:329:                                    ; preds = %324
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %326, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %330 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %330, align 4, !tbaa !877
  %331 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %332 = fcmp ord float %32, %34
  br label %515

; <label>:333:                                    ; preds = %228, %139
  %334 = phi i64 [ %141, %139 ], [ %231, %228 ]
  %335 = fcmp ueq float %27, %30
  br i1 %335, label %336, label %395

; <label>:336:                                    ; preds = %333
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %334, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %337 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %337, align 4, !tbaa !877
  %338 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %525

; <label>:339:                                    ; preds = %228, %134
  %340 = phi i64 [ %136, %134 ], [ %231, %228 ]
  %341 = fcmp ule float %27, %30
  br i1 %341, label %395, label %342

; <label>:342:                                    ; preds = %339
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %340, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %343 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %343, align 4, !tbaa !877
  %344 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %532

; <label>:345:                                    ; preds = %228, %129
  %346 = phi i64 [ %131, %129 ], [ %231, %228 ]
  %347 = fcmp ult float %27, %30
  br i1 %347, label %395, label %348

; <label>:348:                                    ; preds = %345
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %346, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %349 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %349, align 4, !tbaa !877
  %350 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %539

; <label>:351:                                    ; preds = %228, %124
  %352 = phi i64 [ %126, %124 ], [ %231, %228 ]
  %353 = fcmp ueq float %27, %30
  br i1 %353, label %395, label %354

; <label>:354:                                    ; preds = %351
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %352, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %355 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %355, align 4, !tbaa !877
  %356 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %546

; <label>:357:                                    ; preds = %228
  br i1 %232, label %397, label %395

; <label>:358:                                    ; preds = %228, %114
  %359 = phi i64 [ %116, %114 ], [ %231, %228 ]
  %360 = fcmp ugt float %27, %30
  br i1 %360, label %395, label %361

; <label>:361:                                    ; preds = %358
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %359, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %362 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %362, align 4, !tbaa !877
  %363 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %554

; <label>:364:                                    ; preds = %228, %109
  %365 = phi i64 [ %111, %109 ], [ %231, %228 ]
  %366 = fcmp uge float %27, %30
  br i1 %366, label %395, label %367

; <label>:367:                                    ; preds = %364
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %365, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %368 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %368, align 4, !tbaa !877
  %369 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %561

; <label>:370:                                    ; preds = %228, %104
  %371 = phi i64 [ %106, %104 ], [ %231, %228 ]
  %372 = fcmp une float %27, %30
  br i1 %372, label %395, label %373

; <label>:373:                                    ; preds = %370
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %371, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %374 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %374, align 4, !tbaa !877
  %375 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %568

; <label>:376:                                    ; preds = %228, %228
  br i1 %232, label %395, label %407

; <label>:377:                                    ; preds = %228, %98
  %378 = phi i1 [ %101, %98 ], [ %233, %228 ]
  %379 = phi i64 [ %100, %98 ], [ %231, %228 ]
  %380 = fcmp ole float %27, %30
  %381 = and i1 %380, %378
  br i1 %381, label %395, label %382

; <label>:382:                                    ; preds = %377
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %379, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %383 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %383, align 4, !tbaa !877
  %384 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %385 = fcmp ord float %32, %34
  br label %576

; <label>:386:                                    ; preds = %228, %91
  %387 = phi i1 [ %94, %91 ], [ %233, %228 ]
  %388 = phi i64 [ %93, %91 ], [ %231, %228 ]
  %389 = fcmp olt float %27, %30
  %390 = and i1 %389, %387
  br i1 %390, label %395, label %391

; <label>:391:                                    ; preds = %386
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %388, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %392 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %392, align 4, !tbaa !877
  %393 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %394 = fcmp ord float %32, %34
  br label %586

; <label>:395:                                    ; preds = %386, %377, %376, %370, %364, %358, %357, %351, %345, %339, %333, %324, %315, %306, %300, %294, %288, %282, %276, %275, %269, %263, %257, %248, %242, %236, %228, %228, %189, %118
  %396 = phi i64 [ %388, %386 ], [ %379, %377 ], [ %231, %376 ], [ %371, %370 ], [ %365, %364 ], [ %359, %358 ], [ %231, %357 ], [ %352, %351 ], [ %346, %345 ], [ %340, %339 ], [ %334, %333 ], [ %326, %324 ], [ %317, %315 ], [ %308, %306 ], [ %301, %300 ], [ %295, %294 ], [ %289, %288 ], [ %283, %282 ], [ %277, %276 ], [ %231, %275 ], [ %270, %269 ], [ %264, %263 ], [ %258, %257 ], [ %250, %248 ], [ %243, %242 ], [ %237, %236 ], [ %231, %228 ], [ %231, %228 ], [ %191, %189 ], [ %120, %118 ]
  br label %407

; <label>:397:                                    ; preds = %357, %118
  %398 = phi i64 [ %120, %118 ], [ %231, %357 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %398, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %399 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %399, align 4, !tbaa !877
  %400 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %401 = fcmp uno float %32, %34
  br i1 %401, label %598, label %596

; <label>:402:                                    ; preds = %275, %189
  %403 = phi i64 [ %191, %189 ], [ %231, %275 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %403, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %404 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 0, i32* %404, align 4, !tbaa !877
  %405 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %406 = fcmp uno float %32, %34
  br i1 %406, label %604, label %596

; <label>:407:                                    ; preds = %395, %376, %228, %228
  %408 = phi i64 [ %396, %395 ], [ %231, %376 ], [ %231, %228 ], [ %231, %228 ]
  %409 = phi i32 [ -1, %395 ], [ 0, %376 ], [ 0, %228 ], [ 0, %228 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %408, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %410 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 1
  store i32 %409, i32* %410, align 4, !tbaa !877
  %411 = load i64, i64* %43, align 16
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %412 = fcmp uno float %32, %34
  %413 = xor i1 %412, true
  switch i8 %19, label %225 [
    i8 31, label %596
    i8 1, label %586
    i8 2, label %576
    i8 3, label %575
    i8 4, label %568
    i8 5, label %561
    i8 6, label %554
    i8 7, label %553
    i8 8, label %546
    i8 9, label %539
    i8 10, label %532
    i8 11, label %610
    i8 12, label %525
    i8 13, label %515
    i8 14, label %505
    i8 15, label %596
    i8 16, label %495
    i8 17, label %488
    i8 18, label %481
    i8 19, label %575
    i8 20, label %474
    i8 21, label %467
    i8 22, label %460
    i8 23, label %459
    i8 24, label %452
    i8 25, label %445
    i8 26, label %438
    i8 27, label %610
    i8 28, label %428
    i8 29, label %421
    i8 30, label %414
  ]

; <label>:414:                                    ; preds = %407, %239
  %415 = phi i64 [ %241, %239 ], [ %411, %407 ]
  %416 = fcmp ogt float %32, %34
  br i1 %416, label %596, label %417

; <label>:417:                                    ; preds = %414
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %415, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %418 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %419 = bitcast i64* %418 to i32*
  store i32 0, i32* %419, align 8, !tbaa !877
  %420 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %618

; <label>:421:                                    ; preds = %407, %245
  %422 = phi i64 [ %247, %245 ], [ %411, %407 ]
  %423 = fcmp ult float %32, %34
  br i1 %423, label %424, label %596

; <label>:424:                                    ; preds = %421
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %422, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %425 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %426 = bitcast i64* %425 to i32*
  store i32 0, i32* %426, align 8, !tbaa !877
  %427 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %622

; <label>:428:                                    ; preds = %407, %253
  %429 = phi i1 [ %256, %253 ], [ %413, %407 ]
  %430 = phi i64 [ %255, %253 ], [ %411, %407 ]
  %431 = fcmp une float %32, %34
  %432 = and i1 %431, %429
  br i1 %432, label %596, label %433

; <label>:433:                                    ; preds = %428
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %430, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %434 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %435 = bitcast i64* %434 to i32*
  store i32 0, i32* %435, align 8, !tbaa !877
  %436 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %437 = fcmp ord float %37, %40
  br label %626

; <label>:438:                                    ; preds = %407, %260
  %439 = phi i64 [ %262, %260 ], [ %411, %407 ]
  %440 = fcmp ule float %32, %34
  br i1 %440, label %596, label %441

; <label>:441:                                    ; preds = %438
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %439, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %442 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %443 = bitcast i64* %442 to i32*
  store i32 0, i32* %443, align 8, !tbaa !877
  %444 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %632

; <label>:445:                                    ; preds = %407, %266
  %446 = phi i64 [ %268, %266 ], [ %411, %407 ]
  %447 = fcmp ult float %32, %34
  br i1 %447, label %596, label %448

; <label>:448:                                    ; preds = %445
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %446, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %449 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %450 = bitcast i64* %449 to i32*
  store i32 0, i32* %450, align 8, !tbaa !877
  %451 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %636

; <label>:452:                                    ; preds = %407, %272
  %453 = phi i64 [ %274, %272 ], [ %411, %407 ]
  %454 = fcmp ueq float %32, %34
  br i1 %454, label %596, label %455

; <label>:455:                                    ; preds = %452
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %453, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %456 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %457 = bitcast i64* %456 to i32*
  store i32 0, i32* %457, align 8, !tbaa !877
  %458 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %640

; <label>:459:                                    ; preds = %407
  br i1 %412, label %604, label %596

; <label>:460:                                    ; preds = %407, %279
  %461 = phi i64 [ %281, %279 ], [ %411, %407 ]
  %462 = fcmp ugt float %32, %34
  br i1 %462, label %596, label %463

; <label>:463:                                    ; preds = %460
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %461, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %464 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %465 = bitcast i64* %464 to i32*
  store i32 0, i32* %465, align 8, !tbaa !877
  %466 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %645

; <label>:467:                                    ; preds = %407, %285
  %468 = phi i64 [ %287, %285 ], [ %411, %407 ]
  %469 = fcmp uge float %32, %34
  br i1 %469, label %596, label %470

; <label>:470:                                    ; preds = %467
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %468, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %471 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %472 = bitcast i64* %471 to i32*
  store i32 0, i32* %472, align 8, !tbaa !877
  %473 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %649

; <label>:474:                                    ; preds = %407, %291
  %475 = phi i64 [ %293, %291 ], [ %411, %407 ]
  %476 = fcmp une float %32, %34
  br i1 %476, label %596, label %477

; <label>:477:                                    ; preds = %474
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %475, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %478 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %479 = bitcast i64* %478 to i32*
  store i32 0, i32* %479, align 8, !tbaa !877
  %480 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %653

; <label>:481:                                    ; preds = %407, %297
  %482 = phi i64 [ %299, %297 ], [ %411, %407 ]
  %483 = fcmp ugt float %32, %34
  br i1 %483, label %484, label %596

; <label>:484:                                    ; preds = %481
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %482, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %485 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %486 = bitcast i64* %485 to i32*
  store i32 0, i32* %486, align 8, !tbaa !877
  %487 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %657

; <label>:488:                                    ; preds = %407, %303
  %489 = phi i64 [ %305, %303 ], [ %411, %407 ]
  %490 = fcmp olt float %32, %34
  br i1 %490, label %596, label %491

; <label>:491:                                    ; preds = %488
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %489, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %492 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %493 = bitcast i64* %492 to i32*
  store i32 0, i32* %493, align 8, !tbaa !877
  %494 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %661

; <label>:495:                                    ; preds = %407, %311
  %496 = phi i1 [ %314, %311 ], [ %413, %407 ]
  %497 = phi i64 [ %313, %311 ], [ %411, %407 ]
  %498 = fcmp oeq float %32, %34
  %499 = and i1 %498, %496
  br i1 %499, label %596, label %500

; <label>:500:                                    ; preds = %495
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %497, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %501 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %502 = bitcast i64* %501 to i32*
  store i32 0, i32* %502, align 8, !tbaa !877
  %503 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %504 = fcmp ord float %37, %40
  br label %665

; <label>:505:                                    ; preds = %407, %320
  %506 = phi i1 [ %323, %320 ], [ %413, %407 ]
  %507 = phi i64 [ %322, %320 ], [ %411, %407 ]
  %508 = fcmp ogt float %32, %34
  %509 = and i1 %508, %506
  br i1 %509, label %596, label %510

; <label>:510:                                    ; preds = %505
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %507, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %511 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %512 = bitcast i64* %511 to i32*
  store i32 0, i32* %512, align 8, !tbaa !877
  %513 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %514 = fcmp ord float %37, %40
  br label %671

; <label>:515:                                    ; preds = %407, %329
  %516 = phi i1 [ %332, %329 ], [ %413, %407 ]
  %517 = phi i64 [ %331, %329 ], [ %411, %407 ]
  %518 = fcmp oge float %32, %34
  %519 = and i1 %518, %516
  br i1 %519, label %596, label %520

; <label>:520:                                    ; preds = %515
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %517, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %521 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %522 = bitcast i64* %521 to i32*
  store i32 0, i32* %522, align 8, !tbaa !877
  %523 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %524 = fcmp ord float %37, %40
  br label %677

; <label>:525:                                    ; preds = %407, %336
  %526 = phi i64 [ %338, %336 ], [ %411, %407 ]
  %527 = fcmp ueq float %32, %34
  br i1 %527, label %528, label %596

; <label>:528:                                    ; preds = %525
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %526, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %529 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %530 = bitcast i64* %529 to i32*
  store i32 0, i32* %530, align 8, !tbaa !877
  %531 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %683

; <label>:532:                                    ; preds = %407, %342
  %533 = phi i64 [ %344, %342 ], [ %411, %407 ]
  %534 = fcmp ule float %32, %34
  br i1 %534, label %596, label %535

; <label>:535:                                    ; preds = %532
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %533, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %536 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %537 = bitcast i64* %536 to i32*
  store i32 0, i32* %537, align 8, !tbaa !877
  %538 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %687

; <label>:539:                                    ; preds = %407, %348
  %540 = phi i64 [ %350, %348 ], [ %411, %407 ]
  %541 = fcmp ult float %32, %34
  br i1 %541, label %596, label %542

; <label>:542:                                    ; preds = %539
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %540, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %543 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %544 = bitcast i64* %543 to i32*
  store i32 0, i32* %544, align 8, !tbaa !877
  %545 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %691

; <label>:546:                                    ; preds = %407, %354
  %547 = phi i64 [ %356, %354 ], [ %411, %407 ]
  %548 = fcmp ueq float %32, %34
  br i1 %548, label %596, label %549

; <label>:549:                                    ; preds = %546
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %547, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %550 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %551 = bitcast i64* %550 to i32*
  store i32 0, i32* %551, align 8, !tbaa !877
  %552 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %695

; <label>:553:                                    ; preds = %407
  br i1 %412, label %598, label %596

; <label>:554:                                    ; preds = %407, %361
  %555 = phi i64 [ %363, %361 ], [ %411, %407 ]
  %556 = fcmp ugt float %32, %34
  br i1 %556, label %596, label %557

; <label>:557:                                    ; preds = %554
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %555, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %558 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %559 = bitcast i64* %558 to i32*
  store i32 0, i32* %559, align 8, !tbaa !877
  %560 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %700

; <label>:561:                                    ; preds = %407, %367
  %562 = phi i64 [ %369, %367 ], [ %411, %407 ]
  %563 = fcmp uge float %32, %34
  br i1 %563, label %596, label %564

; <label>:564:                                    ; preds = %561
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %562, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %565 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %566 = bitcast i64* %565 to i32*
  store i32 0, i32* %566, align 8, !tbaa !877
  %567 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %704

; <label>:568:                                    ; preds = %407, %373
  %569 = phi i64 [ %375, %373 ], [ %411, %407 ]
  %570 = fcmp une float %32, %34
  br i1 %570, label %596, label %571

; <label>:571:                                    ; preds = %568
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %569, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %572 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %573 = bitcast i64* %572 to i32*
  store i32 0, i32* %573, align 8, !tbaa !877
  %574 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %708

; <label>:575:                                    ; preds = %407, %407
  br i1 %412, label %596, label %610

; <label>:576:                                    ; preds = %407, %382
  %577 = phi i1 [ %385, %382 ], [ %413, %407 ]
  %578 = phi i64 [ %384, %382 ], [ %411, %407 ]
  %579 = fcmp ole float %32, %34
  %580 = and i1 %579, %577
  br i1 %580, label %596, label %581

; <label>:581:                                    ; preds = %576
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %578, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %582 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %583 = bitcast i64* %582 to i32*
  store i32 0, i32* %583, align 8, !tbaa !877
  %584 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %585 = fcmp ord float %37, %40
  br label %713

; <label>:586:                                    ; preds = %407, %391
  %587 = phi i1 [ %394, %391 ], [ %413, %407 ]
  %588 = phi i64 [ %393, %391 ], [ %411, %407 ]
  %589 = fcmp olt float %32, %34
  %590 = and i1 %589, %587
  br i1 %590, label %596, label %591

; <label>:591:                                    ; preds = %586
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %588, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %592 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %593 = bitcast i64* %592 to i32*
  store i32 0, i32* %593, align 8, !tbaa !877
  %594 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %595 = fcmp ord float %37, %40
  br label %719

; <label>:596:                                    ; preds = %586, %576, %575, %568, %561, %554, %553, %546, %539, %532, %525, %515, %505, %495, %488, %481, %474, %467, %460, %459, %452, %445, %438, %428, %421, %414, %407, %407, %402, %397
  %597 = phi i64 [ %588, %586 ], [ %578, %576 ], [ %411, %575 ], [ %569, %568 ], [ %562, %561 ], [ %555, %554 ], [ %411, %553 ], [ %547, %546 ], [ %540, %539 ], [ %533, %532 ], [ %526, %525 ], [ %517, %515 ], [ %507, %505 ], [ %497, %495 ], [ %489, %488 ], [ %482, %481 ], [ %475, %474 ], [ %468, %467 ], [ %461, %460 ], [ %411, %459 ], [ %453, %452 ], [ %446, %445 ], [ %439, %438 ], [ %430, %428 ], [ %422, %421 ], [ %415, %414 ], [ %411, %407 ], [ %411, %407 ], [ %405, %402 ], [ %400, %397 ]
  br label %610

; <label>:598:                                    ; preds = %553, %397
  %599 = phi i64 [ %400, %397 ], [ %411, %553 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %599, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %600 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %601 = bitcast i64* %600 to i32*
  store i32 0, i32* %601, align 8, !tbaa !877
  %602 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %603 = fcmp uno float %37, %40
  br i1 %603, label %728, label %725

; <label>:604:                                    ; preds = %459, %402
  %605 = phi i64 [ %405, %402 ], [ %411, %459 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %605, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %606 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %607 = bitcast i64* %606 to i32*
  store i32 0, i32* %607, align 8, !tbaa !877
  %608 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %609 = fcmp uno float %37, %40
  br i1 %609, label %728, label %725

; <label>:610:                                    ; preds = %596, %575, %407, %407
  %611 = phi i64 [ %597, %596 ], [ %411, %575 ], [ %411, %407 ], [ %411, %407 ]
  %612 = phi i32 [ -1, %596 ], [ 0, %575 ], [ 0, %407 ], [ 0, %407 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %611, i64* %43, align 16
  store i64 0, i64* %44, align 8
  %613 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %614 = bitcast i64* %613 to i32*
  store i32 %612, i32* %614, align 8, !tbaa !877
  %615 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  %616 = fcmp uno float %37, %40
  %617 = xor i1 %616, true
  switch i8 %19, label %225 [
    i8 31, label %725
    i8 1, label %719
    i8 2, label %713
    i8 3, label %712
    i8 4, label %708
    i8 5, label %704
    i8 6, label %700
    i8 7, label %699
    i8 8, label %695
    i8 9, label %691
    i8 10, label %687
    i8 11, label %728
    i8 12, label %683
    i8 13, label %677
    i8 14, label %671
    i8 15, label %725
    i8 16, label %665
    i8 17, label %661
    i8 18, label %657
    i8 19, label %712
    i8 20, label %653
    i8 21, label %649
    i8 22, label %645
    i8 23, label %644
    i8 24, label %640
    i8 25, label %636
    i8 26, label %632
    i8 27, label %728
    i8 28, label %626
    i8 29, label %622
    i8 30, label %618
  ]

; <label>:618:                                    ; preds = %610, %417
  %619 = phi i64 [ %420, %417 ], [ %615, %610 ]
  %620 = phi i64 [ %415, %417 ], [ %611, %610 ]
  %621 = fcmp ogt float %37, %40
  br i1 %621, label %725, label %728

; <label>:622:                                    ; preds = %610, %424
  %623 = phi i64 [ %427, %424 ], [ %615, %610 ]
  %624 = phi i64 [ %422, %424 ], [ %611, %610 ]
  %625 = fcmp ult float %37, %40
  br i1 %625, label %728, label %725

; <label>:626:                                    ; preds = %610, %433
  %627 = phi i1 [ %437, %433 ], [ %617, %610 ]
  %628 = phi i64 [ %436, %433 ], [ %615, %610 ]
  %629 = phi i64 [ %430, %433 ], [ %611, %610 ]
  %630 = fcmp une float %37, %40
  %631 = and i1 %630, %627
  br i1 %631, label %725, label %728

; <label>:632:                                    ; preds = %610, %441
  %633 = phi i64 [ %444, %441 ], [ %615, %610 ]
  %634 = phi i64 [ %439, %441 ], [ %611, %610 ]
  %635 = fcmp ule float %37, %40
  br i1 %635, label %725, label %728

; <label>:636:                                    ; preds = %610, %448
  %637 = phi i64 [ %451, %448 ], [ %615, %610 ]
  %638 = phi i64 [ %446, %448 ], [ %611, %610 ]
  %639 = fcmp ult float %37, %40
  br i1 %639, label %725, label %728

; <label>:640:                                    ; preds = %610, %455
  %641 = phi i64 [ %458, %455 ], [ %615, %610 ]
  %642 = phi i64 [ %453, %455 ], [ %611, %610 ]
  %643 = fcmp ueq float %37, %40
  br i1 %643, label %725, label %728

; <label>:644:                                    ; preds = %610
  br i1 %616, label %728, label %725

; <label>:645:                                    ; preds = %610, %463
  %646 = phi i64 [ %466, %463 ], [ %615, %610 ]
  %647 = phi i64 [ %461, %463 ], [ %611, %610 ]
  %648 = fcmp ugt float %37, %40
  br i1 %648, label %725, label %728

; <label>:649:                                    ; preds = %610, %470
  %650 = phi i64 [ %473, %470 ], [ %615, %610 ]
  %651 = phi i64 [ %468, %470 ], [ %611, %610 ]
  %652 = fcmp uge float %37, %40
  br i1 %652, label %725, label %728

; <label>:653:                                    ; preds = %610, %477
  %654 = phi i64 [ %480, %477 ], [ %615, %610 ]
  %655 = phi i64 [ %475, %477 ], [ %611, %610 ]
  %656 = fcmp une float %37, %40
  br i1 %656, label %725, label %728

; <label>:657:                                    ; preds = %610, %484
  %658 = phi i64 [ %487, %484 ], [ %615, %610 ]
  %659 = phi i64 [ %482, %484 ], [ %611, %610 ]
  %660 = fcmp ugt float %37, %40
  br i1 %660, label %728, label %725

; <label>:661:                                    ; preds = %610, %491
  %662 = phi i64 [ %494, %491 ], [ %615, %610 ]
  %663 = phi i64 [ %489, %491 ], [ %611, %610 ]
  %664 = fcmp olt float %37, %40
  br i1 %664, label %725, label %728

; <label>:665:                                    ; preds = %610, %500
  %666 = phi i1 [ %504, %500 ], [ %617, %610 ]
  %667 = phi i64 [ %503, %500 ], [ %615, %610 ]
  %668 = phi i64 [ %497, %500 ], [ %611, %610 ]
  %669 = fcmp oeq float %37, %40
  %670 = and i1 %669, %666
  br i1 %670, label %725, label %728

; <label>:671:                                    ; preds = %610, %510
  %672 = phi i1 [ %514, %510 ], [ %617, %610 ]
  %673 = phi i64 [ %513, %510 ], [ %615, %610 ]
  %674 = phi i64 [ %507, %510 ], [ %611, %610 ]
  %675 = fcmp ogt float %37, %40
  %676 = and i1 %675, %672
  br i1 %676, label %725, label %728

; <label>:677:                                    ; preds = %610, %520
  %678 = phi i1 [ %524, %520 ], [ %617, %610 ]
  %679 = phi i64 [ %523, %520 ], [ %615, %610 ]
  %680 = phi i64 [ %517, %520 ], [ %611, %610 ]
  %681 = fcmp oge float %37, %40
  %682 = and i1 %681, %678
  br i1 %682, label %725, label %728

; <label>:683:                                    ; preds = %610, %528
  %684 = phi i64 [ %531, %528 ], [ %615, %610 ]
  %685 = phi i64 [ %526, %528 ], [ %611, %610 ]
  %686 = fcmp ueq float %37, %40
  br i1 %686, label %728, label %725

; <label>:687:                                    ; preds = %610, %535
  %688 = phi i64 [ %538, %535 ], [ %615, %610 ]
  %689 = phi i64 [ %533, %535 ], [ %611, %610 ]
  %690 = fcmp ule float %37, %40
  br i1 %690, label %725, label %728

; <label>:691:                                    ; preds = %610, %542
  %692 = phi i64 [ %545, %542 ], [ %615, %610 ]
  %693 = phi i64 [ %540, %542 ], [ %611, %610 ]
  %694 = fcmp ult float %37, %40
  br i1 %694, label %725, label %728

; <label>:695:                                    ; preds = %610, %549
  %696 = phi i64 [ %552, %549 ], [ %615, %610 ]
  %697 = phi i64 [ %547, %549 ], [ %611, %610 ]
  %698 = fcmp ueq float %37, %40
  br i1 %698, label %725, label %728

; <label>:699:                                    ; preds = %610
  br i1 %616, label %728, label %725

; <label>:700:                                    ; preds = %610, %557
  %701 = phi i64 [ %560, %557 ], [ %615, %610 ]
  %702 = phi i64 [ %555, %557 ], [ %611, %610 ]
  %703 = fcmp ugt float %37, %40
  br i1 %703, label %725, label %728

; <label>:704:                                    ; preds = %610, %564
  %705 = phi i64 [ %567, %564 ], [ %615, %610 ]
  %706 = phi i64 [ %562, %564 ], [ %611, %610 ]
  %707 = fcmp uge float %37, %40
  br i1 %707, label %725, label %728

; <label>:708:                                    ; preds = %610, %571
  %709 = phi i64 [ %574, %571 ], [ %615, %610 ]
  %710 = phi i64 [ %569, %571 ], [ %611, %610 ]
  %711 = fcmp une float %37, %40
  br i1 %711, label %725, label %728

; <label>:712:                                    ; preds = %610, %610
  br i1 %616, label %725, label %728

; <label>:713:                                    ; preds = %610, %581
  %714 = phi i1 [ %585, %581 ], [ %617, %610 ]
  %715 = phi i64 [ %584, %581 ], [ %615, %610 ]
  %716 = phi i64 [ %578, %581 ], [ %611, %610 ]
  %717 = fcmp ole float %37, %40
  %718 = and i1 %717, %714
  br i1 %718, label %725, label %728

; <label>:719:                                    ; preds = %610, %591
  %720 = phi i1 [ %595, %591 ], [ %617, %610 ]
  %721 = phi i64 [ %594, %591 ], [ %615, %610 ]
  %722 = phi i64 [ %588, %591 ], [ %611, %610 ]
  %723 = fcmp olt float %37, %40
  %724 = and i1 %723, %720
  br i1 %724, label %725, label %728

; <label>:725:                                    ; preds = %719, %713, %712, %708, %704, %700, %699, %695, %691, %687, %683, %677, %671, %665, %661, %657, %653, %649, %645, %644, %640, %636, %632, %626, %622, %618, %610, %610, %604, %598
  %726 = phi i64 [ %721, %719 ], [ %715, %713 ], [ %615, %712 ], [ %709, %708 ], [ %705, %704 ], [ %701, %700 ], [ %615, %699 ], [ %696, %695 ], [ %692, %691 ], [ %688, %687 ], [ %684, %683 ], [ %679, %677 ], [ %673, %671 ], [ %667, %665 ], [ %662, %661 ], [ %658, %657 ], [ %654, %653 ], [ %650, %649 ], [ %646, %645 ], [ %615, %644 ], [ %641, %640 ], [ %637, %636 ], [ %633, %632 ], [ %628, %626 ], [ %623, %622 ], [ %619, %618 ], [ %615, %610 ], [ %615, %610 ], [ %608, %604 ], [ %602, %598 ]
  %727 = phi i64 [ %722, %719 ], [ %716, %713 ], [ %611, %712 ], [ %710, %708 ], [ %706, %704 ], [ %702, %700 ], [ %611, %699 ], [ %697, %695 ], [ %693, %691 ], [ %689, %687 ], [ %685, %683 ], [ %680, %677 ], [ %674, %671 ], [ %668, %665 ], [ %663, %661 ], [ %659, %657 ], [ %655, %653 ], [ %651, %649 ], [ %647, %645 ], [ %611, %644 ], [ %642, %640 ], [ %638, %636 ], [ %634, %632 ], [ %629, %626 ], [ %624, %622 ], [ %620, %618 ], [ %611, %610 ], [ %611, %610 ], [ %605, %604 ], [ %599, %598 ]
  br label %728

; <label>:728:                                    ; preds = %725, %719, %713, %712, %708, %704, %700, %699, %695, %691, %687, %683, %677, %671, %665, %661, %657, %653, %649, %645, %644, %640, %636, %632, %626, %622, %618, %610, %610, %604, %598
  %729 = phi i64 [ %726, %725 ], [ %615, %712 ], [ %619, %618 ], [ %623, %622 ], [ %628, %626 ], [ %633, %632 ], [ %637, %636 ], [ %641, %640 ], [ %615, %644 ], [ %646, %645 ], [ %650, %649 ], [ %654, %653 ], [ %658, %657 ], [ %662, %661 ], [ %667, %665 ], [ %673, %671 ], [ %679, %677 ], [ %684, %683 ], [ %688, %687 ], [ %692, %691 ], [ %696, %695 ], [ %615, %699 ], [ %701, %700 ], [ %705, %704 ], [ %709, %708 ], [ %715, %713 ], [ %721, %719 ], [ %615, %610 ], [ %615, %610 ], [ %608, %604 ], [ %602, %598 ]
  %730 = phi i64 [ %727, %725 ], [ %611, %712 ], [ %620, %618 ], [ %624, %622 ], [ %629, %626 ], [ %634, %632 ], [ %638, %636 ], [ %642, %640 ], [ %611, %644 ], [ %647, %645 ], [ %651, %649 ], [ %655, %653 ], [ %659, %657 ], [ %663, %661 ], [ %668, %665 ], [ %674, %671 ], [ %680, %677 ], [ %685, %683 ], [ %689, %687 ], [ %693, %691 ], [ %697, %695 ], [ %611, %699 ], [ %702, %700 ], [ %706, %704 ], [ %710, %708 ], [ %716, %713 ], [ %722, %719 ], [ %611, %610 ], [ %611, %610 ], [ %605, %604 ], [ %599, %598 ]
  %731 = phi i32 [ -1, %725 ], [ 0, %712 ], [ 0, %618 ], [ 0, %622 ], [ 0, %626 ], [ 0, %632 ], [ 0, %636 ], [ 0, %640 ], [ 0, %644 ], [ 0, %645 ], [ 0, %649 ], [ 0, %653 ], [ 0, %657 ], [ 0, %661 ], [ 0, %665 ], [ 0, %671 ], [ 0, %677 ], [ 0, %683 ], [ 0, %687 ], [ 0, %691 ], [ 0, %695 ], [ 0, %699 ], [ 0, %700 ], [ 0, %704 ], [ 0, %708 ], [ 0, %713 ], [ 0, %719 ], [ 0, %610 ], [ 0, %610 ], [ 0, %604 ], [ 0, %598 ]
  call void @llvm.lifetime.start(i64 16, i8* nonnull %42)
  store i64 %730, i64* %43, align 16
  store i64 %729, i64* %44, align 8
  %732 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i64 0, i64 3
  store i32 %731, i32* %732, align 4, !tbaa !877
  %733 = load i64, i64* %44, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %42)
  br label %72
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64, i64) #0 {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %13 = add i64 %4, 8
  %14 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %13) #22
  %15 = trunc i64 %5 to i8
  %16 = icmp ugt i8 %15, 31
  br i1 %16, label %27, label %17

; <label>:17:                                     ; preds = %6
  %18 = icmp eq i8 %15, 0
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %17
  %20 = fcmp uno double %8, %12
  %21 = xor i1 %20, true
  switch i8 %15, label %107 [
    i8 31, label %109
    i8 1, label %37
    i8 2, label %42
    i8 3, label %108
    i8 4, label %47
    i8 5, label %49
    i8 6, label %51
    i8 7, label %53
    i8 8, label %56
    i8 9, label %58
    i8 10, label %60
    i8 11, label %110
    i8 12, label %62
    i8 13, label %64
    i8 14, label %69
    i8 15, label %109
    i8 16, label %74
    i8 17, label %79
    i8 18, label %81
    i8 19, label %108
    i8 20, label %83
    i8 21, label %85
    i8 22, label %87
    i8 23, label %89
    i8 24, label %92
    i8 25, label %94
    i8 26, label %96
    i8 27, label %110
    i8 28, label %98
    i8 29, label %103
    i8 30, label %105
  ]

; <label>:22:                                     ; preds = %17
  %23 = fcmp oeq double %8, %12
  %24 = sext i1 %23 to i64
  %25 = fcmp oeq double %11, %14
  %26 = sext i1 %25 to i64
  br label %31

; <label>:27:                                     ; preds = %6
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !870
  %30 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %29, %struct.Memory* %0) #21
  br label %114

; <label>:31:                                     ; preds = %200, %195, %190, %189, %186, %183, %180, %179, %176, %173, %170, %167, %162, %157, %152, %149, %146, %143, %140, %137, %136, %133, %130, %127, %122, %119, %116, %110, %110, %90, %54, %22
  %32 = phi i64 [ %26, %22 ], [ -1, %200 ], [ 0, %189 ], [ 0, %116 ], [ 0, %119 ], [ 0, %122 ], [ 0, %127 ], [ 0, %130 ], [ 0, %133 ], [ 0, %136 ], [ 0, %137 ], [ 0, %140 ], [ 0, %143 ], [ 0, %146 ], [ 0, %149 ], [ 0, %152 ], [ 0, %157 ], [ 0, %162 ], [ 0, %167 ], [ 0, %170 ], [ 0, %173 ], [ 0, %176 ], [ 0, %179 ], [ 0, %180 ], [ 0, %183 ], [ 0, %186 ], [ 0, %190 ], [ 0, %195 ], [ 0, %110 ], [ 0, %110 ], [ 0, %90 ], [ 0, %54 ]
  %33 = phi i64 [ %24, %22 ], [ %201, %200 ], [ %111, %189 ], [ %117, %116 ], [ %120, %119 ], [ %124, %122 ], [ %128, %127 ], [ %131, %130 ], [ %134, %133 ], [ %111, %136 ], [ %138, %137 ], [ %141, %140 ], [ %144, %143 ], [ %147, %146 ], [ %150, %149 ], [ %154, %152 ], [ %159, %157 ], [ %164, %162 ], [ %168, %167 ], [ %171, %170 ], [ %174, %173 ], [ %177, %176 ], [ %111, %179 ], [ %181, %180 ], [ %184, %183 ], [ %187, %186 ], [ %192, %190 ], [ %197, %195 ], [ %111, %110 ], [ %111, %110 ], [ 0, %90 ], [ 0, %54 ]
  %34 = bitcast i8* %2 to i64*
  store i64 %33, i64* %34, align 1, !tbaa !870
  %35 = getelementptr inbounds i8, i8* %2, i64 8
  %36 = bitcast i8* %35 to i64*
  store i64 %32, i64* %36, align 1, !tbaa !870
  br label %114

; <label>:37:                                     ; preds = %19
  %38 = fcmp olt double %8, %12
  %39 = and i1 %38, %21
  br i1 %39, label %109, label %40

; <label>:40:                                     ; preds = %37
  %41 = fcmp ord double %11, %14
  br label %195

; <label>:42:                                     ; preds = %19
  %43 = fcmp ole double %8, %12
  %44 = and i1 %43, %21
  br i1 %44, label %109, label %45

; <label>:45:                                     ; preds = %42
  %46 = fcmp ord double %11, %14
  br label %190

; <label>:47:                                     ; preds = %19
  %48 = fcmp une double %8, %12
  br i1 %48, label %109, label %186

; <label>:49:                                     ; preds = %19
  %50 = fcmp uge double %8, %12
  br i1 %50, label %109, label %183

; <label>:51:                                     ; preds = %19
  %52 = fcmp ugt double %8, %12
  br i1 %52, label %109, label %180

; <label>:53:                                     ; preds = %19
  br i1 %20, label %54, label %109

; <label>:54:                                     ; preds = %53
  %55 = fcmp uno double %11, %14
  br i1 %55, label %31, label %200

; <label>:56:                                     ; preds = %19
  %57 = fcmp ueq double %8, %12
  br i1 %57, label %109, label %176

; <label>:58:                                     ; preds = %19
  %59 = fcmp ult double %8, %12
  br i1 %59, label %109, label %173

; <label>:60:                                     ; preds = %19
  %61 = fcmp ule double %8, %12
  br i1 %61, label %109, label %170

; <label>:62:                                     ; preds = %19
  %63 = fcmp ueq double %8, %12
  br i1 %63, label %167, label %109

; <label>:64:                                     ; preds = %19
  %65 = fcmp oge double %8, %12
  %66 = and i1 %65, %21
  br i1 %66, label %109, label %67

; <label>:67:                                     ; preds = %64
  %68 = fcmp ord double %11, %14
  br label %162

; <label>:69:                                     ; preds = %19
  %70 = fcmp ogt double %8, %12
  %71 = and i1 %70, %21
  br i1 %71, label %109, label %72

; <label>:72:                                     ; preds = %69
  %73 = fcmp ord double %11, %14
  br label %157

; <label>:74:                                     ; preds = %19
  %75 = fcmp oeq double %8, %12
  %76 = and i1 %75, %21
  br i1 %76, label %109, label %77

; <label>:77:                                     ; preds = %74
  %78 = fcmp ord double %11, %14
  br label %152

; <label>:79:                                     ; preds = %19
  %80 = fcmp olt double %8, %12
  br i1 %80, label %109, label %149

; <label>:81:                                     ; preds = %19
  %82 = fcmp ugt double %8, %12
  br i1 %82, label %146, label %109

; <label>:83:                                     ; preds = %19
  %84 = fcmp une double %8, %12
  br i1 %84, label %109, label %143

; <label>:85:                                     ; preds = %19
  %86 = fcmp uge double %8, %12
  br i1 %86, label %109, label %140

; <label>:87:                                     ; preds = %19
  %88 = fcmp ugt double %8, %12
  br i1 %88, label %109, label %137

; <label>:89:                                     ; preds = %19
  br i1 %20, label %90, label %109

; <label>:90:                                     ; preds = %89
  %91 = fcmp uno double %11, %14
  br i1 %91, label %31, label %200

; <label>:92:                                     ; preds = %19
  %93 = fcmp ueq double %8, %12
  br i1 %93, label %109, label %133

; <label>:94:                                     ; preds = %19
  %95 = fcmp ult double %8, %12
  br i1 %95, label %109, label %130

; <label>:96:                                     ; preds = %19
  %97 = fcmp ule double %8, %12
  br i1 %97, label %109, label %127

; <label>:98:                                     ; preds = %19
  %99 = fcmp une double %8, %12
  %100 = and i1 %99, %21
  br i1 %100, label %109, label %101

; <label>:101:                                    ; preds = %98
  %102 = fcmp ord double %11, %14
  br label %122

; <label>:103:                                    ; preds = %19
  %104 = fcmp ult double %8, %12
  br i1 %104, label %119, label %109

; <label>:105:                                    ; preds = %19
  %106 = fcmp ogt double %8, %12
  br i1 %106, label %109, label %116

; <label>:107:                                    ; preds = %110, %19
  unreachable

; <label>:108:                                    ; preds = %19, %19
  br i1 %20, label %109, label %110

; <label>:109:                                    ; preds = %108, %105, %103, %98, %96, %94, %92, %89, %87, %85, %83, %81, %79, %74, %69, %64, %62, %60, %58, %56, %53, %51, %49, %47, %42, %37, %19, %19
  br label %110

; <label>:110:                                    ; preds = %109, %108, %19, %19
  %111 = phi i64 [ -1, %109 ], [ 0, %108 ], [ 0, %19 ], [ 0, %19 ]
  %112 = fcmp uno double %11, %14
  %113 = xor i1 %112, true
  switch i8 %15, label %107 [
    i8 31, label %200
    i8 1, label %195
    i8 2, label %190
    i8 3, label %189
    i8 4, label %186
    i8 5, label %183
    i8 6, label %180
    i8 7, label %179
    i8 8, label %176
    i8 9, label %173
    i8 10, label %170
    i8 11, label %31
    i8 12, label %167
    i8 13, label %162
    i8 14, label %157
    i8 15, label %200
    i8 16, label %152
    i8 17, label %149
    i8 18, label %146
    i8 19, label %189
    i8 20, label %143
    i8 21, label %140
    i8 22, label %137
    i8 23, label %136
    i8 24, label %133
    i8 25, label %130
    i8 26, label %127
    i8 27, label %31
    i8 28, label %122
    i8 29, label %119
    i8 30, label %116
  ]

; <label>:114:                                    ; preds = %31, %27
  %115 = phi %struct.Memory* [ %30, %27 ], [ %0, %31 ]
  ret %struct.Memory* %115

; <label>:116:                                    ; preds = %110, %105
  %117 = phi i64 [ %111, %110 ], [ 0, %105 ]
  %118 = fcmp ogt double %11, %14
  br i1 %118, label %200, label %31

; <label>:119:                                    ; preds = %110, %103
  %120 = phi i64 [ %111, %110 ], [ 0, %103 ]
  %121 = fcmp ult double %11, %14
  br i1 %121, label %31, label %200

; <label>:122:                                    ; preds = %110, %101
  %123 = phi i1 [ %102, %101 ], [ %113, %110 ]
  %124 = phi i64 [ 0, %101 ], [ %111, %110 ]
  %125 = fcmp une double %11, %14
  %126 = and i1 %125, %123
  br i1 %126, label %200, label %31

; <label>:127:                                    ; preds = %110, %96
  %128 = phi i64 [ %111, %110 ], [ 0, %96 ]
  %129 = fcmp ule double %11, %14
  br i1 %129, label %200, label %31

; <label>:130:                                    ; preds = %110, %94
  %131 = phi i64 [ %111, %110 ], [ 0, %94 ]
  %132 = fcmp ult double %11, %14
  br i1 %132, label %200, label %31

; <label>:133:                                    ; preds = %110, %92
  %134 = phi i64 [ %111, %110 ], [ 0, %92 ]
  %135 = fcmp ueq double %11, %14
  br i1 %135, label %200, label %31

; <label>:136:                                    ; preds = %110
  br i1 %112, label %31, label %200

; <label>:137:                                    ; preds = %110, %87
  %138 = phi i64 [ %111, %110 ], [ 0, %87 ]
  %139 = fcmp ugt double %11, %14
  br i1 %139, label %200, label %31

; <label>:140:                                    ; preds = %110, %85
  %141 = phi i64 [ %111, %110 ], [ 0, %85 ]
  %142 = fcmp uge double %11, %14
  br i1 %142, label %200, label %31

; <label>:143:                                    ; preds = %110, %83
  %144 = phi i64 [ %111, %110 ], [ 0, %83 ]
  %145 = fcmp une double %11, %14
  br i1 %145, label %200, label %31

; <label>:146:                                    ; preds = %110, %81
  %147 = phi i64 [ %111, %110 ], [ 0, %81 ]
  %148 = fcmp ugt double %11, %14
  br i1 %148, label %31, label %200

; <label>:149:                                    ; preds = %110, %79
  %150 = phi i64 [ %111, %110 ], [ 0, %79 ]
  %151 = fcmp olt double %11, %14
  br i1 %151, label %200, label %31

; <label>:152:                                    ; preds = %110, %77
  %153 = phi i1 [ %78, %77 ], [ %113, %110 ]
  %154 = phi i64 [ 0, %77 ], [ %111, %110 ]
  %155 = fcmp oeq double %11, %14
  %156 = and i1 %155, %153
  br i1 %156, label %200, label %31

; <label>:157:                                    ; preds = %110, %72
  %158 = phi i1 [ %73, %72 ], [ %113, %110 ]
  %159 = phi i64 [ 0, %72 ], [ %111, %110 ]
  %160 = fcmp ogt double %11, %14
  %161 = and i1 %160, %158
  br i1 %161, label %200, label %31

; <label>:162:                                    ; preds = %110, %67
  %163 = phi i1 [ %68, %67 ], [ %113, %110 ]
  %164 = phi i64 [ 0, %67 ], [ %111, %110 ]
  %165 = fcmp oge double %11, %14
  %166 = and i1 %165, %163
  br i1 %166, label %200, label %31

; <label>:167:                                    ; preds = %110, %62
  %168 = phi i64 [ %111, %110 ], [ 0, %62 ]
  %169 = fcmp ueq double %11, %14
  br i1 %169, label %31, label %200

; <label>:170:                                    ; preds = %110, %60
  %171 = phi i64 [ %111, %110 ], [ 0, %60 ]
  %172 = fcmp ule double %11, %14
  br i1 %172, label %200, label %31

; <label>:173:                                    ; preds = %110, %58
  %174 = phi i64 [ %111, %110 ], [ 0, %58 ]
  %175 = fcmp ult double %11, %14
  br i1 %175, label %200, label %31

; <label>:176:                                    ; preds = %110, %56
  %177 = phi i64 [ %111, %110 ], [ 0, %56 ]
  %178 = fcmp ueq double %11, %14
  br i1 %178, label %200, label %31

; <label>:179:                                    ; preds = %110
  br i1 %112, label %31, label %200

; <label>:180:                                    ; preds = %110, %51
  %181 = phi i64 [ %111, %110 ], [ 0, %51 ]
  %182 = fcmp ugt double %11, %14
  br i1 %182, label %200, label %31

; <label>:183:                                    ; preds = %110, %49
  %184 = phi i64 [ %111, %110 ], [ 0, %49 ]
  %185 = fcmp uge double %11, %14
  br i1 %185, label %200, label %31

; <label>:186:                                    ; preds = %110, %47
  %187 = phi i64 [ %111, %110 ], [ 0, %47 ]
  %188 = fcmp une double %11, %14
  br i1 %188, label %200, label %31

; <label>:189:                                    ; preds = %110, %110
  br i1 %112, label %200, label %31

; <label>:190:                                    ; preds = %110, %45
  %191 = phi i1 [ %46, %45 ], [ %113, %110 ]
  %192 = phi i64 [ 0, %45 ], [ %111, %110 ]
  %193 = fcmp ole double %11, %14
  %194 = and i1 %193, %191
  br i1 %194, label %200, label %31

; <label>:195:                                    ; preds = %110, %40
  %196 = phi i1 [ %41, %40 ], [ %113, %110 ]
  %197 = phi i64 [ 0, %40 ], [ %111, %110 ]
  %198 = fcmp olt double %11, %14
  %199 = and i1 %198, %196
  br i1 %199, label %200, label %31

; <label>:200:                                    ; preds = %195, %190, %189, %186, %183, %180, %179, %176, %173, %170, %167, %162, %157, %152, %149, %146, %143, %140, %137, %136, %133, %130, %127, %122, %119, %116, %110, %110, %90, %54
  %201 = phi i64 [ %197, %195 ], [ %192, %190 ], [ %111, %189 ], [ %187, %186 ], [ %184, %183 ], [ %181, %180 ], [ %111, %179 ], [ %177, %176 ], [ %174, %173 ], [ %171, %170 ], [ %168, %167 ], [ %164, %162 ], [ %159, %157 ], [ %154, %152 ], [ %150, %149 ], [ %147, %146 ], [ %144, %143 ], [ %141, %140 ], [ %138, %137 ], [ %111, %136 ], [ %134, %133 ], [ %131, %130 ], [ %128, %127 ], [ %124, %122 ], [ %120, %119 ], [ %117, %116 ], [ %111, %110 ], [ %111, %110 ], [ 0, %90 ], [ 0, %54 ]
  br label %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5CMPPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly, i64) #0 {
  %7 = bitcast i8* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 1
  %12 = bitcast i8* %4 to double*
  %13 = load double, double* %12, align 1
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to double*
  %16 = load double, double* %15, align 1
  %17 = trunc i64 %5 to i8
  %18 = icmp ugt i8 %17, 31
  br i1 %18, label %29, label %19

; <label>:19:                                     ; preds = %6
  %20 = icmp eq i8 %17, 0
  br i1 %20, label %24, label %21

; <label>:21:                                     ; preds = %19
  %22 = fcmp uno double %8, %13
  %23 = xor i1 %22, true
  switch i8 %17, label %109 [
    i8 31, label %111
    i8 1, label %39
    i8 2, label %44
    i8 3, label %110
    i8 4, label %49
    i8 5, label %51
    i8 6, label %53
    i8 7, label %55
    i8 8, label %58
    i8 9, label %60
    i8 10, label %62
    i8 11, label %112
    i8 12, label %64
    i8 13, label %66
    i8 14, label %71
    i8 15, label %111
    i8 16, label %76
    i8 17, label %81
    i8 18, label %83
    i8 19, label %110
    i8 20, label %85
    i8 21, label %87
    i8 22, label %89
    i8 23, label %91
    i8 24, label %94
    i8 25, label %96
    i8 26, label %98
    i8 27, label %112
    i8 28, label %100
    i8 29, label %105
    i8 30, label %107
  ]

; <label>:24:                                     ; preds = %19
  %25 = fcmp oeq double %8, %13
  %26 = sext i1 %25 to i64
  %27 = fcmp oeq double %11, %16
  %28 = sext i1 %27 to i64
  br label %33

; <label>:29:                                     ; preds = %6
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !870
  %32 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %31, %struct.Memory* %0) #21
  br label %116

; <label>:33:                                     ; preds = %202, %197, %192, %191, %188, %185, %182, %181, %178, %175, %172, %169, %164, %159, %154, %151, %148, %145, %142, %139, %138, %135, %132, %129, %124, %121, %118, %112, %112, %92, %56, %24
  %34 = phi i64 [ %28, %24 ], [ -1, %202 ], [ 0, %191 ], [ 0, %118 ], [ 0, %121 ], [ 0, %124 ], [ 0, %129 ], [ 0, %132 ], [ 0, %135 ], [ 0, %138 ], [ 0, %139 ], [ 0, %142 ], [ 0, %145 ], [ 0, %148 ], [ 0, %151 ], [ 0, %154 ], [ 0, %159 ], [ 0, %164 ], [ 0, %169 ], [ 0, %172 ], [ 0, %175 ], [ 0, %178 ], [ 0, %181 ], [ 0, %182 ], [ 0, %185 ], [ 0, %188 ], [ 0, %192 ], [ 0, %197 ], [ 0, %112 ], [ 0, %112 ], [ 0, %92 ], [ 0, %56 ]
  %35 = phi i64 [ %26, %24 ], [ %203, %202 ], [ %113, %191 ], [ %119, %118 ], [ %122, %121 ], [ %126, %124 ], [ %130, %129 ], [ %133, %132 ], [ %136, %135 ], [ %113, %138 ], [ %140, %139 ], [ %143, %142 ], [ %146, %145 ], [ %149, %148 ], [ %152, %151 ], [ %156, %154 ], [ %161, %159 ], [ %166, %164 ], [ %170, %169 ], [ %173, %172 ], [ %176, %175 ], [ %179, %178 ], [ %113, %181 ], [ %183, %182 ], [ %186, %185 ], [ %189, %188 ], [ %194, %192 ], [ %199, %197 ], [ %113, %112 ], [ %113, %112 ], [ 0, %92 ], [ 0, %56 ]
  %36 = bitcast i8* %2 to i64*
  store i64 %35, i64* %36, align 1, !tbaa !870
  %37 = getelementptr inbounds i8, i8* %2, i64 8
  %38 = bitcast i8* %37 to i64*
  store i64 %34, i64* %38, align 1, !tbaa !870
  br label %116

; <label>:39:                                     ; preds = %21
  %40 = fcmp olt double %8, %13
  %41 = and i1 %40, %23
  br i1 %41, label %111, label %42

; <label>:42:                                     ; preds = %39
  %43 = fcmp ord double %11, %16
  br label %197

; <label>:44:                                     ; preds = %21
  %45 = fcmp ole double %8, %13
  %46 = and i1 %45, %23
  br i1 %46, label %111, label %47

; <label>:47:                                     ; preds = %44
  %48 = fcmp ord double %11, %16
  br label %192

; <label>:49:                                     ; preds = %21
  %50 = fcmp une double %8, %13
  br i1 %50, label %111, label %188

; <label>:51:                                     ; preds = %21
  %52 = fcmp uge double %8, %13
  br i1 %52, label %111, label %185

; <label>:53:                                     ; preds = %21
  %54 = fcmp ugt double %8, %13
  br i1 %54, label %111, label %182

; <label>:55:                                     ; preds = %21
  br i1 %22, label %56, label %111

; <label>:56:                                     ; preds = %55
  %57 = fcmp uno double %11, %16
  br i1 %57, label %33, label %202

; <label>:58:                                     ; preds = %21
  %59 = fcmp ueq double %8, %13
  br i1 %59, label %111, label %178

; <label>:60:                                     ; preds = %21
  %61 = fcmp ult double %8, %13
  br i1 %61, label %111, label %175

; <label>:62:                                     ; preds = %21
  %63 = fcmp ule double %8, %13
  br i1 %63, label %111, label %172

; <label>:64:                                     ; preds = %21
  %65 = fcmp ueq double %8, %13
  br i1 %65, label %169, label %111

; <label>:66:                                     ; preds = %21
  %67 = fcmp oge double %8, %13
  %68 = and i1 %67, %23
  br i1 %68, label %111, label %69

; <label>:69:                                     ; preds = %66
  %70 = fcmp ord double %11, %16
  br label %164

; <label>:71:                                     ; preds = %21
  %72 = fcmp ogt double %8, %13
  %73 = and i1 %72, %23
  br i1 %73, label %111, label %74

; <label>:74:                                     ; preds = %71
  %75 = fcmp ord double %11, %16
  br label %159

; <label>:76:                                     ; preds = %21
  %77 = fcmp oeq double %8, %13
  %78 = and i1 %77, %23
  br i1 %78, label %111, label %79

; <label>:79:                                     ; preds = %76
  %80 = fcmp ord double %11, %16
  br label %154

; <label>:81:                                     ; preds = %21
  %82 = fcmp olt double %8, %13
  br i1 %82, label %111, label %151

; <label>:83:                                     ; preds = %21
  %84 = fcmp ugt double %8, %13
  br i1 %84, label %148, label %111

; <label>:85:                                     ; preds = %21
  %86 = fcmp une double %8, %13
  br i1 %86, label %111, label %145

; <label>:87:                                     ; preds = %21
  %88 = fcmp uge double %8, %13
  br i1 %88, label %111, label %142

; <label>:89:                                     ; preds = %21
  %90 = fcmp ugt double %8, %13
  br i1 %90, label %111, label %139

; <label>:91:                                     ; preds = %21
  br i1 %22, label %92, label %111

; <label>:92:                                     ; preds = %91
  %93 = fcmp uno double %11, %16
  br i1 %93, label %33, label %202

; <label>:94:                                     ; preds = %21
  %95 = fcmp ueq double %8, %13
  br i1 %95, label %111, label %135

; <label>:96:                                     ; preds = %21
  %97 = fcmp ult double %8, %13
  br i1 %97, label %111, label %132

; <label>:98:                                     ; preds = %21
  %99 = fcmp ule double %8, %13
  br i1 %99, label %111, label %129

; <label>:100:                                    ; preds = %21
  %101 = fcmp une double %8, %13
  %102 = and i1 %101, %23
  br i1 %102, label %111, label %103

; <label>:103:                                    ; preds = %100
  %104 = fcmp ord double %11, %16
  br label %124

; <label>:105:                                    ; preds = %21
  %106 = fcmp ult double %8, %13
  br i1 %106, label %121, label %111

; <label>:107:                                    ; preds = %21
  %108 = fcmp ogt double %8, %13
  br i1 %108, label %111, label %118

; <label>:109:                                    ; preds = %112, %21
  unreachable

; <label>:110:                                    ; preds = %21, %21
  br i1 %22, label %111, label %112

; <label>:111:                                    ; preds = %110, %107, %105, %100, %98, %96, %94, %91, %89, %87, %85, %83, %81, %76, %71, %66, %64, %62, %60, %58, %55, %53, %51, %49, %44, %39, %21, %21
  br label %112

; <label>:112:                                    ; preds = %111, %110, %21, %21
  %113 = phi i64 [ -1, %111 ], [ 0, %110 ], [ 0, %21 ], [ 0, %21 ]
  %114 = fcmp uno double %11, %16
  %115 = xor i1 %114, true
  switch i8 %17, label %109 [
    i8 31, label %202
    i8 1, label %197
    i8 2, label %192
    i8 3, label %191
    i8 4, label %188
    i8 5, label %185
    i8 6, label %182
    i8 7, label %181
    i8 8, label %178
    i8 9, label %175
    i8 10, label %172
    i8 11, label %33
    i8 12, label %169
    i8 13, label %164
    i8 14, label %159
    i8 15, label %202
    i8 16, label %154
    i8 17, label %151
    i8 18, label %148
    i8 19, label %191
    i8 20, label %145
    i8 21, label %142
    i8 22, label %139
    i8 23, label %138
    i8 24, label %135
    i8 25, label %132
    i8 26, label %129
    i8 27, label %33
    i8 28, label %124
    i8 29, label %121
    i8 30, label %118
  ]

; <label>:116:                                    ; preds = %33, %29
  %117 = phi %struct.Memory* [ %32, %29 ], [ %0, %33 ]
  ret %struct.Memory* %117

; <label>:118:                                    ; preds = %112, %107
  %119 = phi i64 [ %113, %112 ], [ 0, %107 ]
  %120 = fcmp ogt double %11, %16
  br i1 %120, label %202, label %33

; <label>:121:                                    ; preds = %112, %105
  %122 = phi i64 [ %113, %112 ], [ 0, %105 ]
  %123 = fcmp ult double %11, %16
  br i1 %123, label %33, label %202

; <label>:124:                                    ; preds = %112, %103
  %125 = phi i1 [ %104, %103 ], [ %115, %112 ]
  %126 = phi i64 [ 0, %103 ], [ %113, %112 ]
  %127 = fcmp une double %11, %16
  %128 = and i1 %127, %125
  br i1 %128, label %202, label %33

; <label>:129:                                    ; preds = %112, %98
  %130 = phi i64 [ %113, %112 ], [ 0, %98 ]
  %131 = fcmp ule double %11, %16
  br i1 %131, label %202, label %33

; <label>:132:                                    ; preds = %112, %96
  %133 = phi i64 [ %113, %112 ], [ 0, %96 ]
  %134 = fcmp ult double %11, %16
  br i1 %134, label %202, label %33

; <label>:135:                                    ; preds = %112, %94
  %136 = phi i64 [ %113, %112 ], [ 0, %94 ]
  %137 = fcmp ueq double %11, %16
  br i1 %137, label %202, label %33

; <label>:138:                                    ; preds = %112
  br i1 %114, label %33, label %202

; <label>:139:                                    ; preds = %112, %89
  %140 = phi i64 [ %113, %112 ], [ 0, %89 ]
  %141 = fcmp ugt double %11, %16
  br i1 %141, label %202, label %33

; <label>:142:                                    ; preds = %112, %87
  %143 = phi i64 [ %113, %112 ], [ 0, %87 ]
  %144 = fcmp uge double %11, %16
  br i1 %144, label %202, label %33

; <label>:145:                                    ; preds = %112, %85
  %146 = phi i64 [ %113, %112 ], [ 0, %85 ]
  %147 = fcmp une double %11, %16
  br i1 %147, label %202, label %33

; <label>:148:                                    ; preds = %112, %83
  %149 = phi i64 [ %113, %112 ], [ 0, %83 ]
  %150 = fcmp ugt double %11, %16
  br i1 %150, label %33, label %202

; <label>:151:                                    ; preds = %112, %81
  %152 = phi i64 [ %113, %112 ], [ 0, %81 ]
  %153 = fcmp olt double %11, %16
  br i1 %153, label %202, label %33

; <label>:154:                                    ; preds = %112, %79
  %155 = phi i1 [ %80, %79 ], [ %115, %112 ]
  %156 = phi i64 [ 0, %79 ], [ %113, %112 ]
  %157 = fcmp oeq double %11, %16
  %158 = and i1 %157, %155
  br i1 %158, label %202, label %33

; <label>:159:                                    ; preds = %112, %74
  %160 = phi i1 [ %75, %74 ], [ %115, %112 ]
  %161 = phi i64 [ 0, %74 ], [ %113, %112 ]
  %162 = fcmp ogt double %11, %16
  %163 = and i1 %162, %160
  br i1 %163, label %202, label %33

; <label>:164:                                    ; preds = %112, %69
  %165 = phi i1 [ %70, %69 ], [ %115, %112 ]
  %166 = phi i64 [ 0, %69 ], [ %113, %112 ]
  %167 = fcmp oge double %11, %16
  %168 = and i1 %167, %165
  br i1 %168, label %202, label %33

; <label>:169:                                    ; preds = %112, %64
  %170 = phi i64 [ %113, %112 ], [ 0, %64 ]
  %171 = fcmp ueq double %11, %16
  br i1 %171, label %33, label %202

; <label>:172:                                    ; preds = %112, %62
  %173 = phi i64 [ %113, %112 ], [ 0, %62 ]
  %174 = fcmp ule double %11, %16
  br i1 %174, label %202, label %33

; <label>:175:                                    ; preds = %112, %60
  %176 = phi i64 [ %113, %112 ], [ 0, %60 ]
  %177 = fcmp ult double %11, %16
  br i1 %177, label %202, label %33

; <label>:178:                                    ; preds = %112, %58
  %179 = phi i64 [ %113, %112 ], [ 0, %58 ]
  %180 = fcmp ueq double %11, %16
  br i1 %180, label %202, label %33

; <label>:181:                                    ; preds = %112
  br i1 %114, label %33, label %202

; <label>:182:                                    ; preds = %112, %53
  %183 = phi i64 [ %113, %112 ], [ 0, %53 ]
  %184 = fcmp ugt double %11, %16
  br i1 %184, label %202, label %33

; <label>:185:                                    ; preds = %112, %51
  %186 = phi i64 [ %113, %112 ], [ 0, %51 ]
  %187 = fcmp uge double %11, %16
  br i1 %187, label %202, label %33

; <label>:188:                                    ; preds = %112, %49
  %189 = phi i64 [ %113, %112 ], [ 0, %49 ]
  %190 = fcmp une double %11, %16
  br i1 %190, label %202, label %33

; <label>:191:                                    ; preds = %112, %112
  br i1 %114, label %202, label %33

; <label>:192:                                    ; preds = %112, %47
  %193 = phi i1 [ %48, %47 ], [ %115, %112 ]
  %194 = phi i64 [ 0, %47 ], [ %113, %112 ]
  %195 = fcmp ole double %11, %16
  %196 = and i1 %195, %193
  br i1 %196, label %202, label %33

; <label>:197:                                    ; preds = %112, %42
  %198 = phi i1 [ %43, %42 ], [ %115, %112 ]
  %199 = phi i64 [ 0, %42 ], [ %113, %112 ]
  %200 = fcmp olt double %11, %16
  %201 = and i1 %200, %198
  br i1 %201, label %202, label %33

; <label>:202:                                    ; preds = %197, %192, %191, %188, %185, %182, %181, %178, %175, %172, %169, %164, %159, %154, %151, %148, %145, %142, %139, %138, %135, %132, %129, %124, %121, %118, %112, %112, %92, %56
  %203 = phi i64 [ %199, %197 ], [ %194, %192 ], [ %113, %191 ], [ %189, %188 ], [ %186, %185 ], [ %183, %182 ], [ %113, %181 ], [ %179, %178 ], [ %176, %175 ], [ %173, %172 ], [ %170, %169 ], [ %166, %164 ], [ %161, %159 ], [ %156, %154 ], [ %152, %151 ], [ %149, %148 ], [ %146, %145 ], [ %143, %142 ], [ %140, %139 ], [ %113, %138 ], [ %136, %135 ], [ %133, %132 ], [ %130, %129 ], [ %126, %124 ], [ %122, %121 ], [ %119, %118 ], [ %113, %112 ], [ %113, %112 ], [ 0, %92 ], [ 0, %56 ]
  br label %33
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PCMPISTRII2VnI8vec128_tEEEP6MemoryS5_R5StateS3_T_2InIhE(%struct.Memory* readnone, %struct.State* dereferenceable(2688), i8* nocapture readonly, i8* nocapture readonly, i64) #0 {
  %6 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %7 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca { i64, i64 }, align 8
  %12 = trunc i64 %4 to i8
  %13 = trunc i64 %4 to i2
  switch i2 %13, label %3312 [
    i2 0, label %14
    i2 1, label %1088
    i2 -2, label %1663
    i2 -1, label %2737
  ]

; <label>:14:                                     ; preds = %5
  %15 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %16 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %17 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %2 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i64 0, i32 1
  store <2 x i64> %19, <2 x i64>* %8, align 16
  %21 = bitcast i8* %3 to i64*
  %22 = load i64, i64* %21, align 1
  %23 = getelementptr inbounds i8, i8* %3, i64 8
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = trunc i64 %22 to i8
  %27 = lshr i64 %22, 8
  %28 = trunc i64 %27 to i8
  %29 = lshr i64 %22, 16
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %22, 24
  %32 = trunc i64 %31 to i8
  %33 = lshr i64 %22, 32
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %22, 40
  %36 = trunc i64 %35 to i8
  %37 = lshr i64 %22, 48
  %38 = trunc i64 %37 to i8
  %39 = lshr i64 %22, 56
  %40 = trunc i64 %39 to i8
  %41 = bitcast %"class.(anonymous namespace)::BitMatrix"* %6 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %41) #23
  call void @llvm.memset.p0i8.i64(i8* nonnull %41, i8 0, i64 32, i32 8, i1 false) #23
  %42 = lshr i8 %12, 2
  %43 = extractelement <2 x i64> %19, i32 0
  %44 = trunc i64 %43 to i8
  %45 = icmp eq i8 %44, 0
  %46 = select i1 %45, i64 0, i64 16
  %47 = icmp eq i8 %26, 0
  %48 = select i1 %47, i64 0, i64 16
  %49 = and i64 %43, 65280
  %50 = icmp eq i64 %49, 0
  %51 = xor i1 %45, true
  %52 = and i1 %50, %51
  %53 = select i1 %52, i64 1, i64 %46
  %54 = icmp eq i8 %28, 0
  %55 = xor i1 %47, true
  %56 = and i1 %54, %55
  %57 = select i1 %56, i64 1, i64 %48
  %58 = and i64 %43, 16711680
  %59 = icmp eq i64 %58, 0
  %60 = icmp ugt i64 %53, 2
  %61 = and i1 %59, %60
  %62 = select i1 %61, i64 2, i64 %53
  %63 = icmp eq i8 %30, 0
  %64 = icmp ugt i64 %57, 2
  %65 = and i1 %63, %64
  %66 = select i1 %65, i64 2, i64 %57
  %67 = and i64 %43, 4278190080
  %68 = icmp eq i64 %67, 0
  %69 = icmp ugt i64 %62, 3
  %70 = and i1 %68, %69
  %71 = select i1 %70, i64 3, i64 %62
  %72 = icmp eq i8 %32, 0
  %73 = icmp ugt i64 %66, 3
  %74 = and i1 %72, %73
  %75 = select i1 %74, i64 3, i64 %66
  %76 = and i64 %43, 1095216660480
  %77 = icmp eq i64 %76, 0
  %78 = icmp ugt i64 %71, 4
  %79 = and i1 %77, %78
  %80 = select i1 %79, i64 4, i64 %71
  %81 = icmp eq i8 %34, 0
  %82 = icmp ugt i64 %75, 4
  %83 = and i1 %81, %82
  %84 = select i1 %83, i64 4, i64 %75
  %85 = and i64 %43, 280375465082880
  %86 = icmp eq i64 %85, 0
  %87 = icmp ugt i64 %80, 5
  %88 = and i1 %86, %87
  %89 = select i1 %88, i64 5, i64 %80
  %90 = icmp eq i8 %36, 0
  %91 = icmp ugt i64 %84, 5
  %92 = and i1 %90, %91
  %93 = select i1 %92, i64 5, i64 %84
  %94 = and i64 %43, 71776119061217280
  %95 = icmp eq i64 %94, 0
  %96 = icmp ugt i64 %89, 6
  %97 = and i1 %95, %96
  %98 = select i1 %97, i64 6, i64 %89
  %99 = icmp eq i8 %38, 0
  %100 = icmp ugt i64 %93, 6
  %101 = and i1 %99, %100
  %102 = select i1 %101, i64 6, i64 %93
  %103 = icmp ult i64 %43, 72057594037927936
  %104 = icmp ugt i64 %98, 7
  %105 = and i1 %103, %104
  %106 = select i1 %105, i64 7, i64 %98
  %107 = icmp eq i8 %40, 0
  %108 = icmp ugt i64 %102, 7
  %109 = and i1 %107, %108
  %110 = select i1 %109, i64 7, i64 %102
  %111 = bitcast i64* %20 to i8*
  %112 = load i8, i8* %111, align 8, !tbaa !868
  %113 = icmp eq i8 %112, 0
  %114 = icmp ugt i64 %106, 8
  %115 = and i1 %113, %114
  %116 = select i1 %115, i64 8, i64 %106
  %117 = trunc i64 %25 to i8
  %118 = icmp eq i8 %117, 0
  %119 = icmp ugt i64 %110, 8
  %120 = and i1 %118, %119
  %121 = select i1 %120, i64 8, i64 %110
  %122 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 9
  %123 = load i8, i8* %122, align 1, !tbaa !868
  %124 = icmp eq i8 %123, 0
  %125 = icmp ugt i64 %116, 9
  %126 = and i1 %124, %125
  %127 = select i1 %126, i64 9, i64 %116
  %128 = lshr i64 %25, 8
  %129 = trunc i64 %128 to i8
  %130 = icmp eq i8 %129, 0
  %131 = icmp ugt i64 %121, 9
  %132 = and i1 %130, %131
  %133 = select i1 %132, i64 9, i64 %121
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 10
  %135 = load i8, i8* %134, align 2, !tbaa !868
  %136 = icmp eq i8 %135, 0
  %137 = icmp ugt i64 %127, 10
  %138 = and i1 %136, %137
  %139 = select i1 %138, i64 10, i64 %127
  %140 = lshr i64 %25, 16
  %141 = trunc i64 %140 to i8
  %142 = icmp eq i8 %141, 0
  %143 = icmp ugt i64 %133, 10
  %144 = and i1 %142, %143
  %145 = select i1 %144, i64 10, i64 %133
  %146 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 11
  %147 = load i8, i8* %146, align 1, !tbaa !868
  %148 = icmp eq i8 %147, 0
  %149 = icmp ugt i64 %139, 11
  %150 = and i1 %148, %149
  %151 = select i1 %150, i64 11, i64 %139
  %152 = lshr i64 %25, 24
  %153 = trunc i64 %152 to i8
  %154 = icmp eq i8 %153, 0
  %155 = icmp ugt i64 %145, 11
  %156 = and i1 %154, %155
  %157 = select i1 %156, i64 11, i64 %145
  %158 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 12
  %159 = load i8, i8* %158, align 4, !tbaa !868
  %160 = icmp eq i8 %159, 0
  %161 = icmp ugt i64 %151, 12
  %162 = and i1 %160, %161
  %163 = select i1 %162, i64 12, i64 %151
  %164 = lshr i64 %25, 32
  %165 = trunc i64 %164 to i8
  %166 = icmp eq i8 %165, 0
  %167 = icmp ugt i64 %157, 12
  %168 = and i1 %166, %167
  %169 = select i1 %168, i64 12, i64 %157
  %170 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 13
  %171 = load i8, i8* %170, align 1, !tbaa !868
  %172 = icmp eq i8 %171, 0
  %173 = icmp ugt i64 %163, 13
  %174 = and i1 %172, %173
  %175 = select i1 %174, i64 13, i64 %163
  %176 = lshr i64 %25, 40
  %177 = trunc i64 %176 to i8
  %178 = icmp eq i8 %177, 0
  %179 = icmp ugt i64 %169, 13
  %180 = and i1 %178, %179
  %181 = select i1 %180, i64 13, i64 %169
  %182 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 14
  %183 = load i8, i8* %182, align 2, !tbaa !868
  %184 = icmp eq i8 %183, 0
  %185 = icmp ugt i64 %175, 14
  %186 = and i1 %184, %185
  %187 = select i1 %186, i64 14, i64 %175
  %188 = lshr i64 %25, 48
  %189 = trunc i64 %188 to i8
  %190 = icmp eq i8 %189, 0
  %191 = icmp ugt i64 %181, 14
  %192 = and i1 %190, %191
  %193 = select i1 %192, i64 14, i64 %181
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 15
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp eq i8 %195, 0
  %197 = icmp ugt i64 %187, 15
  %198 = and i1 %196, %197
  %199 = lshr i64 %25, 56
  %200 = trunc i64 %199 to i8
  %201 = icmp eq i8 %200, 0
  %202 = icmp ugt i64 %193, 15
  %203 = and i1 %201, %202
  %204 = select i1 %203, i64 15, i64 %193
  %205 = trunc i8 %42 to i2
  %206 = icmp eq i2 %205, 1
  br label %210

; <label>:207:                                    ; preds = %253
  %208 = select i1 %198, i64 15, i64 %187
  %209 = lshr i8 %12, 4
  switch i2 %205, label %781 [
    i2 0, label %374
    i2 1, label %405
    i2 -2, label %446
    i2 -1, label %741
  ]

; <label>:210:                                    ; preds = %253, %14
  %211 = phi i64 [ 0, %14 ], [ %259, %253 ]
  %212 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 %211
  %213 = load i8, i8* %212, align 1, !tbaa !868
  %214 = shl i64 %211, 4
  br i1 %206, label %222, label %215

; <label>:215:                                    ; preds = %210
  %216 = icmp eq i8 %213, %26
  %217 = lshr i64 %211, 2
  %218 = and i64 %217, 288230376151711743
  %219 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %218
  %220 = and i64 %214, 48
  %221 = shl i64 1, %220
  br i1 %216, label %261, label %264

; <label>:222:                                    ; preds = %210
  %223 = and i64 %211, 1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %239, label %225

; <label>:225:                                    ; preds = %222
  %226 = icmp ugt i8 %26, %213
  %227 = lshr i64 %211, 2
  %228 = and i64 %227, 288230376151711743
  %229 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %228
  %230 = and i64 %214, 48
  %231 = shl i64 1, %230
  br i1 %226, label %235, label %232

; <label>:232:                                    ; preds = %225
  %233 = load i64, i64* %229, align 8, !tbaa !870
  %234 = or i64 %233, %231
  br label %858

; <label>:235:                                    ; preds = %225
  %236 = xor i64 %231, -1
  %237 = load i64, i64* %229, align 8, !tbaa !870
  %238 = and i64 %237, %236
  br label %858

; <label>:239:                                    ; preds = %222
  %240 = icmp ult i8 %26, %213
  %241 = lshr i64 %211, 2
  %242 = and i64 %241, 288230376151711743
  %243 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %242
  %244 = and i64 %214, 48
  %245 = shl i64 1, %244
  br i1 %240, label %249, label %246

; <label>:246:                                    ; preds = %239
  %247 = load i64, i64* %243, align 8, !tbaa !870
  %248 = or i64 %247, %245
  br label %964

; <label>:249:                                    ; preds = %239
  %250 = xor i64 %245, -1
  %251 = load i64, i64* %243, align 8, !tbaa !870
  %252 = and i64 %251, %250
  br label %964

; <label>:253:                                    ; preds = %964, %858, %268
  %254 = phi i64 [ %1069, %964 ], [ %963, %858 ], [ %372, %268 ]
  %255 = phi i64 [ %1068, %964 ], [ %962, %858 ], [ %373, %268 ]
  %256 = phi i1 [ %1064, %964 ], [ %958, %858 ], [ %368, %268 ]
  %257 = phi i64* [ %243, %964 ], [ %229, %858 ], [ %219, %268 ]
  %258 = select i1 %256, i64 %255, i64 %254
  store i64 %258, i64* %257, align 8, !tbaa !870
  %259 = add nuw nsw i64 %211, 1
  %260 = icmp eq i64 %259, 16
  br i1 %260, label %207, label %210

; <label>:261:                                    ; preds = %215
  %262 = load i64, i64* %219, align 8, !tbaa !870
  %263 = or i64 %262, %221
  br label %268

; <label>:264:                                    ; preds = %215
  %265 = xor i64 %221, -1
  %266 = load i64, i64* %219, align 8, !tbaa !870
  %267 = and i64 %266, %265
  br label %268

; <label>:268:                                    ; preds = %264, %261
  %269 = phi i64 [ %267, %264 ], [ %263, %261 ]
  %270 = icmp eq i8 %213, %28
  %271 = or i64 %220, 1
  %272 = shl i64 1, %271
  %273 = xor i64 %272, -1
  %274 = and i64 %269, %273
  %275 = or i64 %269, %272
  %276 = select i1 %270, i64 %275, i64 %274
  %277 = icmp eq i8 %213, %30
  %278 = or i64 %220, 2
  %279 = shl i64 1, %278
  %280 = xor i64 %279, -1
  %281 = and i64 %276, %280
  %282 = or i64 %276, %279
  %283 = select i1 %277, i64 %282, i64 %281
  %284 = icmp eq i8 %213, %32
  %285 = or i64 %220, 3
  %286 = shl i64 1, %285
  %287 = xor i64 %286, -1
  %288 = and i64 %283, %287
  %289 = or i64 %283, %286
  %290 = select i1 %284, i64 %289, i64 %288
  %291 = icmp eq i8 %213, %34
  %292 = or i64 %220, 4
  %293 = shl i64 1, %292
  %294 = xor i64 %293, -1
  %295 = and i64 %290, %294
  %296 = or i64 %290, %293
  %297 = select i1 %291, i64 %296, i64 %295
  %298 = icmp eq i8 %213, %36
  %299 = or i64 %220, 5
  %300 = shl i64 1, %299
  %301 = xor i64 %300, -1
  %302 = and i64 %297, %301
  %303 = or i64 %297, %300
  %304 = select i1 %298, i64 %303, i64 %302
  %305 = icmp eq i8 %213, %38
  %306 = or i64 %220, 6
  %307 = shl i64 1, %306
  %308 = xor i64 %307, -1
  %309 = and i64 %304, %308
  %310 = or i64 %304, %307
  %311 = select i1 %305, i64 %310, i64 %309
  %312 = icmp eq i8 %213, %40
  %313 = or i64 %220, 7
  %314 = shl i64 1, %313
  %315 = xor i64 %314, -1
  %316 = and i64 %311, %315
  %317 = or i64 %311, %314
  %318 = select i1 %312, i64 %317, i64 %316
  %319 = icmp eq i8 %213, %117
  %320 = or i64 %220, 8
  %321 = shl i64 1, %320
  %322 = xor i64 %321, -1
  %323 = and i64 %318, %322
  %324 = or i64 %318, %321
  %325 = select i1 %319, i64 %324, i64 %323
  %326 = icmp eq i8 %213, %129
  %327 = or i64 %220, 9
  %328 = shl i64 1, %327
  %329 = xor i64 %328, -1
  %330 = and i64 %325, %329
  %331 = or i64 %325, %328
  %332 = select i1 %326, i64 %331, i64 %330
  %333 = icmp eq i8 %213, %141
  %334 = or i64 %220, 10
  %335 = shl i64 1, %334
  %336 = xor i64 %335, -1
  %337 = and i64 %332, %336
  %338 = or i64 %332, %335
  %339 = select i1 %333, i64 %338, i64 %337
  %340 = icmp eq i8 %213, %153
  %341 = or i64 %220, 11
  %342 = shl i64 1, %341
  %343 = xor i64 %342, -1
  %344 = and i64 %339, %343
  %345 = or i64 %339, %342
  %346 = select i1 %340, i64 %345, i64 %344
  %347 = icmp eq i8 %213, %165
  %348 = or i64 %220, 12
  %349 = shl i64 1, %348
  %350 = xor i64 %349, -1
  %351 = and i64 %346, %350
  %352 = or i64 %346, %349
  %353 = select i1 %347, i64 %352, i64 %351
  %354 = icmp eq i8 %213, %177
  %355 = or i64 %220, 13
  %356 = shl i64 1, %355
  %357 = xor i64 %356, -1
  %358 = and i64 %353, %357
  %359 = or i64 %353, %356
  %360 = select i1 %354, i64 %359, i64 %358
  %361 = icmp eq i8 %213, %189
  %362 = or i64 %220, 14
  %363 = shl i64 1, %362
  %364 = xor i64 %363, -1
  %365 = and i64 %360, %364
  %366 = or i64 %360, %363
  %367 = select i1 %361, i64 %366, i64 %365
  store i64 %367, i64* %219, align 8, !tbaa !870
  %368 = icmp eq i8 %213, %200
  %369 = or i64 %220, 15
  %370 = shl i64 1, %369
  %371 = xor i64 %370, -1
  %372 = and i64 %367, %371
  %373 = or i64 %367, %370
  br label %253

; <label>:374:                                    ; preds = %207
  %375 = icmp eq i64 %204, 0
  %376 = icmp eq i64 %208, 0
  %377 = or i1 %375, %376
  br i1 %377, label %785, label %378

; <label>:378:                                    ; preds = %374
  br label %379

; <label>:379:                                    ; preds = %400, %378
  %380 = phi i64 [ %402, %400 ], [ 0, %378 ]
  %381 = phi i16 [ %403, %400 ], [ 1, %378 ]
  %382 = phi i16 [ %401, %400 ], [ 0, %378 ]
  br label %385

; <label>:383:                                    ; preds = %385
  %384 = icmp ult i64 %396, %208
  br i1 %384, label %385, label %399, !llvm.loop !888

; <label>:385:                                    ; preds = %383, %379
  %386 = phi i64 [ 0, %379 ], [ %396, %383 ]
  %387 = shl i64 %386, 4
  %388 = add i64 %387, %380
  %389 = lshr i64 %388, 6
  %390 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %389
  %391 = load i64, i64* %390, align 8, !tbaa !870
  %392 = and i64 %388, 63
  %393 = shl i64 1, %392
  %394 = and i64 %393, %391
  %395 = icmp eq i64 %394, 0
  %396 = add nuw i64 %386, 1
  br i1 %395, label %383, label %397

; <label>:397:                                    ; preds = %385
  %398 = or i16 %382, %381
  br label %400

; <label>:399:                                    ; preds = %383
  br label %400

; <label>:400:                                    ; preds = %399, %397
  %401 = phi i16 [ %398, %397 ], [ %382, %399 ]
  %402 = add nuw i64 %380, 1
  %403 = shl i16 %381, 1
  %404 = icmp eq i64 %402, %204
  br i1 %404, label %782, label %379

; <label>:405:                                    ; preds = %207
  %406 = icmp eq i64 %204, 0
  br i1 %406, label %785, label %407

; <label>:407:                                    ; preds = %405
  %408 = add i64 %208, -1
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %785, label %410

; <label>:410:                                    ; preds = %407
  br label %411

; <label>:411:                                    ; preds = %442, %410
  %412 = phi i16 [ %438, %442 ], [ 0, %410 ]
  %413 = phi i16 [ %444, %442 ], [ 1, %410 ]
  %414 = phi i64 [ %443, %442 ], [ 0, %410 ]
  br label %415

; <label>:415:                                    ; preds = %415, %411
  %416 = phi i16 [ %412, %411 ], [ %438, %415 ]
  %417 = phi i64 [ 0, %411 ], [ %439, %415 ]
  %418 = shl i64 %417, 4
  %419 = add i64 %418, %414
  %420 = lshr i64 %419, 6
  %421 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %420
  %422 = load i64, i64* %421, align 8, !tbaa !870
  %423 = and i64 %419, 63
  %424 = shl i64 1, %423
  %425 = and i64 %424, %422
  %426 = or i64 %418, 16
  %427 = add i64 %426, %414
  %428 = lshr i64 %427, 6
  %429 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %428
  %430 = load i64, i64* %429, align 8, !tbaa !870
  %431 = and i64 %427, 63
  %432 = shl i64 1, %431
  %433 = and i64 %432, %430
  %434 = icmp eq i64 %425, 0
  %435 = icmp eq i64 %433, 0
  %436 = or i1 %434, %435
  %437 = select i1 %436, i16 0, i16 %413
  %438 = or i16 %437, %416
  %439 = add i64 %417, 2
  %440 = icmp ult i64 %439, %408
  %441 = and i1 %440, %436
  br i1 %441, label %415, label %442, !llvm.loop !889

; <label>:442:                                    ; preds = %415
  %443 = add nuw i64 %414, 1
  %444 = shl i16 %413, 1
  %445 = icmp eq i64 %443, %204
  br i1 %445, label %783, label %411

; <label>:446:                                    ; preds = %207
  %447 = icmp ne i64 %208, 0
  %448 = icmp ne i64 %204, 0
  %449 = and i1 %448, %447
  br i1 %449, label %450, label %455

; <label>:450:                                    ; preds = %446
  %451 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %452 = load i64, i64* %451, align 8, !tbaa !870
  %453 = and i64 %452, 1
  %454 = icmp ne i64 %453, 0
  br label %460

; <label>:455:                                    ; preds = %446
  br i1 %447, label %460, label %456

; <label>:456:                                    ; preds = %455
  %457 = xor i1 %448, true
  %458 = zext i1 %457 to i16
  %459 = icmp ugt i64 %204, 1
  br label %467

; <label>:460:                                    ; preds = %455, %450
  %461 = phi i1 [ false, %455 ], [ %454, %450 ]
  %462 = zext i1 %461 to i16
  %463 = icmp ugt i64 %208, 1
  %464 = icmp ugt i64 %204, 1
  %465 = and i1 %464, %463
  br i1 %465, label %473, label %466

; <label>:466:                                    ; preds = %460
  br i1 %463, label %480, label %467

; <label>:467:                                    ; preds = %466, %456
  %468 = phi i16 [ %458, %456 ], [ %462, %466 ]
  %469 = phi i1 [ %459, %456 ], [ %464, %466 ]
  %470 = select i1 %469, i16 0, i16 2
  %471 = or i16 %470, %468
  %472 = icmp ugt i64 %204, 2
  br label %486

; <label>:473:                                    ; preds = %460
  %474 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %475 = load i64, i64* %474, align 8, !tbaa !870
  %476 = and i64 %475, 131072
  %477 = icmp ne i64 %476, 0
  %478 = select i1 %477, i16 2, i16 0
  %479 = or i16 %478, %462
  br label %480

; <label>:480:                                    ; preds = %473, %466
  %481 = phi i16 [ %462, %466 ], [ %479, %473 ]
  %482 = icmp ugt i64 %208, 2
  %483 = icmp ugt i64 %204, 2
  %484 = and i1 %483, %482
  br i1 %484, label %492, label %485

; <label>:485:                                    ; preds = %480
  br i1 %482, label %499, label %486

; <label>:486:                                    ; preds = %485, %467
  %487 = phi i16 [ %471, %467 ], [ %481, %485 ]
  %488 = phi i1 [ %472, %467 ], [ %483, %485 ]
  %489 = select i1 %488, i16 0, i16 4
  %490 = or i16 %489, %487
  %491 = icmp ugt i64 %204, 3
  br label %505

; <label>:492:                                    ; preds = %480
  %493 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %494 = load i64, i64* %493, align 8, !tbaa !870
  %495 = and i64 %494, 17179869184
  %496 = icmp ne i64 %495, 0
  %497 = select i1 %496, i16 4, i16 0
  %498 = or i16 %497, %481
  br label %499

; <label>:499:                                    ; preds = %492, %485
  %500 = phi i16 [ %481, %485 ], [ %498, %492 ]
  %501 = icmp ugt i64 %208, 3
  %502 = icmp ugt i64 %204, 3
  %503 = and i1 %502, %501
  br i1 %503, label %511, label %504

; <label>:504:                                    ; preds = %499
  br i1 %501, label %518, label %505

; <label>:505:                                    ; preds = %504, %486
  %506 = phi i16 [ %490, %486 ], [ %500, %504 ]
  %507 = phi i1 [ %491, %486 ], [ %502, %504 ]
  %508 = select i1 %507, i16 0, i16 8
  %509 = or i16 %508, %506
  %510 = icmp ugt i64 %204, 4
  br label %524

; <label>:511:                                    ; preds = %499
  %512 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %513 = load i64, i64* %512, align 8, !tbaa !870
  %514 = and i64 %513, 2251799813685248
  %515 = icmp ne i64 %514, 0
  %516 = select i1 %515, i16 8, i16 0
  %517 = or i16 %516, %500
  br label %518

; <label>:518:                                    ; preds = %511, %504
  %519 = phi i16 [ %500, %504 ], [ %517, %511 ]
  %520 = icmp ugt i64 %208, 4
  %521 = icmp ugt i64 %204, 4
  %522 = and i1 %521, %520
  br i1 %522, label %530, label %523

; <label>:523:                                    ; preds = %518
  br i1 %520, label %536, label %524

; <label>:524:                                    ; preds = %523, %505
  %525 = phi i16 [ %509, %505 ], [ %519, %523 ]
  %526 = phi i1 [ %510, %505 ], [ %521, %523 ]
  %527 = select i1 %526, i16 0, i16 16
  %528 = or i16 %527, %525
  %529 = icmp ugt i64 %204, 5
  br label %542

; <label>:530:                                    ; preds = %518
  %531 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %532 = load i64, i64* %531, align 8, !tbaa !870
  %533 = trunc i64 %532 to i16
  %534 = and i16 %533, 16
  %535 = or i16 %534, %519
  br label %536

; <label>:536:                                    ; preds = %530, %523
  %537 = phi i16 [ %519, %523 ], [ %535, %530 ]
  %538 = icmp ugt i64 %208, 5
  %539 = icmp ugt i64 %204, 5
  %540 = and i1 %539, %538
  br i1 %540, label %548, label %541

; <label>:541:                                    ; preds = %536
  br i1 %538, label %555, label %542

; <label>:542:                                    ; preds = %541, %524
  %543 = phi i16 [ %528, %524 ], [ %537, %541 ]
  %544 = phi i1 [ %529, %524 ], [ %539, %541 ]
  %545 = select i1 %544, i16 0, i16 32
  %546 = or i16 %545, %543
  %547 = icmp ugt i64 %204, 6
  br label %561

; <label>:548:                                    ; preds = %536
  %549 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %550 = load i64, i64* %549, align 8, !tbaa !870
  %551 = and i64 %550, 2097152
  %552 = icmp ne i64 %551, 0
  %553 = select i1 %552, i16 32, i16 0
  %554 = or i16 %553, %537
  br label %555

; <label>:555:                                    ; preds = %548, %541
  %556 = phi i16 [ %537, %541 ], [ %554, %548 ]
  %557 = icmp ugt i64 %208, 6
  %558 = icmp ugt i64 %204, 6
  %559 = and i1 %558, %557
  br i1 %559, label %567, label %560

; <label>:560:                                    ; preds = %555
  br i1 %557, label %574, label %561

; <label>:561:                                    ; preds = %560, %542
  %562 = phi i16 [ %546, %542 ], [ %556, %560 ]
  %563 = phi i1 [ %547, %542 ], [ %558, %560 ]
  %564 = select i1 %563, i16 0, i16 64
  %565 = or i16 %564, %562
  %566 = icmp ugt i64 %204, 7
  br label %580

; <label>:567:                                    ; preds = %555
  %568 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %569 = load i64, i64* %568, align 8, !tbaa !870
  %570 = and i64 %569, 274877906944
  %571 = icmp ne i64 %570, 0
  %572 = select i1 %571, i16 64, i16 0
  %573 = or i16 %572, %556
  br label %574

; <label>:574:                                    ; preds = %567, %560
  %575 = phi i16 [ %556, %560 ], [ %573, %567 ]
  %576 = icmp ugt i64 %208, 7
  %577 = icmp ugt i64 %204, 7
  %578 = and i1 %577, %576
  br i1 %578, label %586, label %579

; <label>:579:                                    ; preds = %574
  br i1 %576, label %593, label %580

; <label>:580:                                    ; preds = %579, %561
  %581 = phi i16 [ %565, %561 ], [ %575, %579 ]
  %582 = phi i1 [ %566, %561 ], [ %577, %579 ]
  %583 = select i1 %582, i16 0, i16 128
  %584 = or i16 %583, %581
  %585 = icmp ugt i64 %204, 8
  br label %599

; <label>:586:                                    ; preds = %574
  %587 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %588 = load i64, i64* %587, align 8, !tbaa !870
  %589 = and i64 %588, 36028797018963968
  %590 = icmp ne i64 %589, 0
  %591 = select i1 %590, i16 128, i16 0
  %592 = or i16 %591, %575
  br label %593

; <label>:593:                                    ; preds = %586, %579
  %594 = phi i16 [ %575, %579 ], [ %592, %586 ]
  %595 = icmp ugt i64 %208, 8
  %596 = icmp ugt i64 %204, 8
  %597 = and i1 %596, %595
  br i1 %597, label %605, label %598

; <label>:598:                                    ; preds = %593
  br i1 %595, label %611, label %599

; <label>:599:                                    ; preds = %598, %580
  %600 = phi i16 [ %584, %580 ], [ %594, %598 ]
  %601 = phi i1 [ %585, %580 ], [ %596, %598 ]
  %602 = select i1 %601, i16 0, i16 256
  %603 = or i16 %602, %600
  %604 = icmp ugt i64 %204, 9
  br label %617

; <label>:605:                                    ; preds = %593
  %606 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %607 = load i64, i64* %606, align 8, !tbaa !870
  %608 = trunc i64 %607 to i16
  %609 = and i16 %608, 256
  %610 = or i16 %609, %594
  br label %611

; <label>:611:                                    ; preds = %605, %598
  %612 = phi i16 [ %594, %598 ], [ %610, %605 ]
  %613 = icmp ugt i64 %208, 9
  %614 = icmp ugt i64 %204, 9
  %615 = and i1 %614, %613
  br i1 %615, label %623, label %616

; <label>:616:                                    ; preds = %611
  br i1 %613, label %630, label %617

; <label>:617:                                    ; preds = %616, %599
  %618 = phi i16 [ %603, %599 ], [ %612, %616 ]
  %619 = phi i1 [ %604, %599 ], [ %614, %616 ]
  %620 = select i1 %619, i16 0, i16 512
  %621 = or i16 %618, %620
  %622 = icmp ugt i64 %204, 10
  br label %636

; <label>:623:                                    ; preds = %611
  %624 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %625 = load i64, i64* %624, align 8, !tbaa !870
  %626 = and i64 %625, 33554432
  %627 = icmp ne i64 %626, 0
  %628 = select i1 %627, i16 512, i16 0
  %629 = or i16 %628, %612
  br label %630

; <label>:630:                                    ; preds = %623, %616
  %631 = phi i16 [ %612, %616 ], [ %629, %623 ]
  %632 = icmp ugt i64 %208, 10
  %633 = icmp ugt i64 %204, 10
  %634 = and i1 %633, %632
  br i1 %634, label %642, label %635

; <label>:635:                                    ; preds = %630
  br i1 %632, label %649, label %636

; <label>:636:                                    ; preds = %635, %617
  %637 = phi i16 [ %621, %617 ], [ %631, %635 ]
  %638 = phi i1 [ %622, %617 ], [ %633, %635 ]
  %639 = select i1 %638, i16 0, i16 1024
  %640 = or i16 %639, %637
  %641 = icmp ugt i64 %204, 11
  br label %655

; <label>:642:                                    ; preds = %630
  %643 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %644 = load i64, i64* %643, align 8, !tbaa !870
  %645 = and i64 %644, 4398046511104
  %646 = icmp ne i64 %645, 0
  %647 = select i1 %646, i16 1024, i16 0
  %648 = or i16 %647, %631
  br label %649

; <label>:649:                                    ; preds = %642, %635
  %650 = phi i16 [ %631, %635 ], [ %648, %642 ]
  %651 = icmp ugt i64 %208, 11
  %652 = icmp ugt i64 %204, 11
  %653 = and i1 %652, %651
  br i1 %653, label %661, label %654

; <label>:654:                                    ; preds = %649
  br i1 %651, label %668, label %655

; <label>:655:                                    ; preds = %654, %636
  %656 = phi i16 [ %640, %636 ], [ %650, %654 ]
  %657 = phi i1 [ %641, %636 ], [ %652, %654 ]
  %658 = select i1 %657, i16 0, i16 2048
  %659 = or i16 %658, %656
  %660 = icmp ugt i64 %204, 12
  br label %674

; <label>:661:                                    ; preds = %649
  %662 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %663 = load i64, i64* %662, align 8, !tbaa !870
  %664 = and i64 %663, 576460752303423488
  %665 = icmp ne i64 %664, 0
  %666 = select i1 %665, i16 2048, i16 0
  %667 = or i16 %666, %650
  br label %668

; <label>:668:                                    ; preds = %661, %654
  %669 = phi i16 [ %650, %654 ], [ %667, %661 ]
  %670 = icmp ugt i64 %208, 12
  %671 = icmp ugt i64 %204, 12
  %672 = and i1 %671, %670
  br i1 %672, label %680, label %673

; <label>:673:                                    ; preds = %668
  br i1 %670, label %686, label %674

; <label>:674:                                    ; preds = %673, %655
  %675 = phi i16 [ %659, %655 ], [ %669, %673 ]
  %676 = phi i1 [ %660, %655 ], [ %671, %673 ]
  %677 = select i1 %676, i16 0, i16 4096
  %678 = or i16 %677, %675
  %679 = icmp ugt i64 %204, 13
  br label %692

; <label>:680:                                    ; preds = %668
  %681 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %682 = load i64, i64* %681, align 8, !tbaa !870
  %683 = trunc i64 %682 to i16
  %684 = and i16 %683, 4096
  %685 = or i16 %684, %669
  br label %686

; <label>:686:                                    ; preds = %680, %673
  %687 = phi i16 [ %669, %673 ], [ %685, %680 ]
  %688 = icmp ugt i64 %208, 13
  %689 = icmp ugt i64 %204, 13
  %690 = and i1 %689, %688
  br i1 %690, label %698, label %691

; <label>:691:                                    ; preds = %686
  br i1 %688, label %705, label %692

; <label>:692:                                    ; preds = %691, %674
  %693 = phi i16 [ %678, %674 ], [ %687, %691 ]
  %694 = phi i1 [ %679, %674 ], [ %689, %691 ]
  %695 = select i1 %694, i16 0, i16 8192
  %696 = or i16 %695, %693
  %697 = icmp ugt i64 %204, 14
  br label %711

; <label>:698:                                    ; preds = %686
  %699 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %700 = load i64, i64* %699, align 8, !tbaa !870
  %701 = and i64 %700, 536870912
  %702 = icmp ne i64 %701, 0
  %703 = select i1 %702, i16 8192, i16 0
  %704 = or i16 %703, %687
  br label %705

; <label>:705:                                    ; preds = %698, %691
  %706 = phi i16 [ %687, %691 ], [ %704, %698 ]
  %707 = icmp ugt i64 %208, 14
  %708 = icmp ugt i64 %204, 14
  %709 = and i1 %708, %707
  br i1 %709, label %717, label %710

; <label>:710:                                    ; preds = %705
  br i1 %707, label %724, label %711

; <label>:711:                                    ; preds = %710, %692
  %712 = phi i16 [ %696, %692 ], [ %706, %710 ]
  %713 = phi i1 [ %697, %692 ], [ %708, %710 ]
  %714 = select i1 %713, i16 0, i16 16384
  %715 = or i16 %714, %712
  %716 = icmp ugt i64 %204, 15
  br label %730

; <label>:717:                                    ; preds = %705
  %718 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %719 = load i64, i64* %718, align 8, !tbaa !870
  %720 = and i64 %719, 70368744177664
  %721 = icmp ne i64 %720, 0
  %722 = select i1 %721, i16 16384, i16 0
  %723 = or i16 %722, %706
  br label %724

; <label>:724:                                    ; preds = %717, %710
  %725 = phi i16 [ %706, %710 ], [ %723, %717 ]
  %726 = icmp ugt i64 %208, 15
  %727 = icmp ugt i64 %204, 15
  %728 = and i1 %727, %726
  br i1 %728, label %735, label %729

; <label>:729:                                    ; preds = %724
  br i1 %726, label %785, label %730

; <label>:730:                                    ; preds = %729, %711
  %731 = phi i16 [ %715, %711 ], [ %725, %729 ]
  %732 = phi i1 [ %716, %711 ], [ %727, %729 ]
  %733 = select i1 %732, i16 0, i16 -32768
  %734 = or i16 %733, %731
  br label %785

; <label>:735:                                    ; preds = %724
  %736 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %737 = load i64, i64* %736, align 8, !tbaa !870
  %738 = icmp slt i64 %737, 0
  %739 = select i1 %738, i16 -32768, i16 0
  %740 = or i16 %739, %725
  br label %785

; <label>:741:                                    ; preds = %207
  %742 = icmp ugt i64 %208, %204
  br i1 %742, label %785, label %743

; <label>:743:                                    ; preds = %741
  %744 = icmp eq i64 %208, 0
  br i1 %744, label %785, label %745

; <label>:745:                                    ; preds = %743
  br label %746

; <label>:746:                                    ; preds = %776, %745
  %747 = phi i16 [ %777, %776 ], [ -1, %745 ]
  %748 = phi i64 [ %778, %776 ], [ 0, %745 ]
  %749 = phi i16 [ %779, %776 ], [ 1, %745 ]
  %750 = sub nuw nsw i64 16, %748
  br label %751

; <label>:751:                                    ; preds = %765, %746
  %752 = phi i64 [ %767, %765 ], [ %748, %746 ]
  %753 = phi i64 [ %766, %765 ], [ 0, %746 ]
  %754 = icmp ult i64 %752, %204
  br i1 %754, label %755, label %773

; <label>:755:                                    ; preds = %751
  %756 = shl i64 %753, 4
  %757 = add nuw nsw i64 %756, %752
  %758 = lshr i64 %757, 6
  %759 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %758
  %760 = load i64, i64* %759, align 8, !tbaa !870
  %761 = and i64 %757, 63
  %762 = shl i64 1, %761
  %763 = and i64 %760, %762
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %773, label %765

; <label>:765:                                    ; preds = %755
  %766 = add nuw nsw i64 %753, 1
  %767 = add nuw nsw i64 %752, 1
  %768 = icmp ult i64 %766, %750
  %769 = icmp ult i64 %767, 16
  %770 = and i1 %769, %768
  %771 = icmp ult i64 %766, %208
  %772 = and i1 %771, %770
  br i1 %772, label %751, label %775, !llvm.loop !890

; <label>:773:                                    ; preds = %755, %751
  %774 = xor i16 %749, %747
  br label %776

; <label>:775:                                    ; preds = %765
  br label %776

; <label>:776:                                    ; preds = %775, %773
  %777 = phi i16 [ %774, %773 ], [ %747, %775 ]
  %778 = add nuw nsw i64 %748, 1
  %779 = shl i16 %749, 1
  %780 = icmp eq i64 %778, 16
  br i1 %780, label %784, label %746

; <label>:781:                                    ; preds = %207
  unreachable

; <label>:782:                                    ; preds = %400
  br label %785

; <label>:783:                                    ; preds = %442
  br label %785

; <label>:784:                                    ; preds = %776
  br label %785

; <label>:785:                                    ; preds = %784, %783, %782, %743, %741, %735, %730, %729, %407, %405, %374
  %786 = phi i64 [ %208, %374 ], [ %208, %405 ], [ 1, %407 ], [ %208, %729 ], [ %208, %735 ], [ %208, %730 ], [ %208, %741 ], [ 0, %743 ], [ %208, %782 ], [ %208, %783 ], [ %208, %784 ]
  %787 = phi i16 [ 0, %374 ], [ 0, %405 ], [ 0, %407 ], [ %725, %729 ], [ %740, %735 ], [ %734, %730 ], [ 0, %741 ], [ -1, %743 ], [ %401, %782 ], [ %438, %783 ], [ %777, %784 ]
  %788 = trunc i8 %209 to i2
  switch i2 %788, label %796 [
    i2 0, label %797
    i2 1, label %791
    i2 -2, label %797
    i2 -1, label %789
  ]

; <label>:789:                                    ; preds = %785
  %790 = icmp eq i64 %204, 0
  br i1 %790, label %797, label %793

; <label>:791:                                    ; preds = %785
  %792 = xor i16 %787, -1
  br label %797

; <label>:793:                                    ; preds = %789
  %794 = xor i16 %787, 1
  %795 = icmp eq i64 %204, 1
  br i1 %795, label %797, label %815

; <label>:796:                                    ; preds = %785
  unreachable

; <label>:797:                                    ; preds = %854, %851, %848, %845, %842, %839, %836, %833, %830, %827, %824, %821, %818, %815, %793, %791, %789, %785, %785
  %798 = phi i16 [ %792, %791 ], [ %787, %785 ], [ %787, %785 ], [ %852, %851 ], [ %849, %848 ], [ %846, %845 ], [ %843, %842 ], [ %840, %839 ], [ %837, %836 ], [ %834, %833 ], [ %831, %830 ], [ %828, %827 ], [ %825, %824 ], [ %822, %821 ], [ %819, %818 ], [ %816, %815 ], [ %794, %793 ], [ %787, %789 ], [ %857, %854 ]
  %799 = and i8 %12, 64
  %800 = icmp eq i8 %799, 0
  %801 = icmp eq i16 %798, 0
  br i1 %800, label %802, label %807

; <label>:802:                                    ; preds = %797
  br i1 %801, label %1070, label %803

; <label>:803:                                    ; preds = %802
  %804 = zext i16 %798 to i32
  %805 = tail call i32 @llvm.cttz.i32(i32 %804, i1 true) #23
  %806 = zext i32 %805 to i64
  br label %1070

; <label>:807:                                    ; preds = %797
  br i1 %801, label %1070, label %808

; <label>:808:                                    ; preds = %807
  %809 = zext i16 %798 to i32
  %810 = tail call i32 @llvm.ctlz.i32(i32 %809, i1 true) #23
  %811 = add nuw nsw i32 %810, 65520
  %812 = and i32 %811, 65535
  %813 = zext i32 %812 to i64
  %814 = sub nsw i64 15, %813
  br label %1070

; <label>:815:                                    ; preds = %793
  %816 = xor i16 %787, 3
  %817 = icmp ugt i64 %204, 2
  br i1 %817, label %818, label %797

; <label>:818:                                    ; preds = %815
  %819 = xor i16 %787, 7
  %820 = icmp eq i64 %204, 3
  br i1 %820, label %797, label %821

; <label>:821:                                    ; preds = %818
  %822 = xor i16 %787, 15
  %823 = icmp ugt i64 %204, 4
  br i1 %823, label %824, label %797

; <label>:824:                                    ; preds = %821
  %825 = xor i16 %787, 31
  %826 = icmp eq i64 %204, 5
  br i1 %826, label %797, label %827

; <label>:827:                                    ; preds = %824
  %828 = xor i16 %787, 63
  %829 = icmp ugt i64 %204, 6
  br i1 %829, label %830, label %797

; <label>:830:                                    ; preds = %827
  %831 = xor i16 %787, 127
  %832 = icmp eq i64 %204, 7
  br i1 %832, label %797, label %833

; <label>:833:                                    ; preds = %830
  %834 = xor i16 %787, 255
  %835 = icmp ugt i64 %204, 8
  br i1 %835, label %836, label %797

; <label>:836:                                    ; preds = %833
  %837 = xor i16 %787, 511
  %838 = icmp eq i64 %204, 9
  br i1 %838, label %797, label %839

; <label>:839:                                    ; preds = %836
  %840 = xor i16 %787, 1023
  %841 = icmp ugt i64 %204, 10
  br i1 %841, label %842, label %797

; <label>:842:                                    ; preds = %839
  %843 = xor i16 %787, 2047
  %844 = icmp eq i64 %204, 11
  br i1 %844, label %797, label %845

; <label>:845:                                    ; preds = %842
  %846 = xor i16 %787, 4095
  %847 = icmp ugt i64 %204, 12
  br i1 %847, label %848, label %797

; <label>:848:                                    ; preds = %845
  %849 = xor i16 %787, 8191
  %850 = icmp eq i64 %204, 13
  br i1 %850, label %797, label %851

; <label>:851:                                    ; preds = %848
  %852 = xor i16 %787, 16383
  %853 = icmp ugt i64 %204, 14
  br i1 %853, label %854, label %797

; <label>:854:                                    ; preds = %851
  %855 = icmp ne i64 %204, 15
  %856 = select i1 %855, i16 -1, i16 32767
  %857 = xor i16 %787, %856
  br label %797

; <label>:858:                                    ; preds = %235, %232
  %859 = phi i64 [ %238, %235 ], [ %234, %232 ]
  %860 = icmp ugt i8 %28, %213
  %861 = or i64 %230, 1
  %862 = shl i64 1, %861
  %863 = xor i64 %862, -1
  %864 = and i64 %859, %863
  %865 = or i64 %859, %862
  %866 = select i1 %860, i64 %864, i64 %865
  %867 = icmp ugt i8 %30, %213
  %868 = or i64 %230, 2
  %869 = shl i64 1, %868
  %870 = xor i64 %869, -1
  %871 = and i64 %866, %870
  %872 = or i64 %866, %869
  %873 = select i1 %867, i64 %871, i64 %872
  %874 = icmp ugt i8 %32, %213
  %875 = or i64 %230, 3
  %876 = shl i64 1, %875
  %877 = xor i64 %876, -1
  %878 = and i64 %873, %877
  %879 = or i64 %873, %876
  %880 = select i1 %874, i64 %878, i64 %879
  %881 = icmp ugt i8 %34, %213
  %882 = or i64 %230, 4
  %883 = shl i64 1, %882
  %884 = xor i64 %883, -1
  %885 = and i64 %880, %884
  %886 = or i64 %880, %883
  %887 = select i1 %881, i64 %885, i64 %886
  %888 = icmp ugt i8 %36, %213
  %889 = or i64 %230, 5
  %890 = shl i64 1, %889
  %891 = xor i64 %890, -1
  %892 = and i64 %887, %891
  %893 = or i64 %887, %890
  %894 = select i1 %888, i64 %892, i64 %893
  %895 = icmp ugt i8 %38, %213
  %896 = or i64 %230, 6
  %897 = shl i64 1, %896
  %898 = xor i64 %897, -1
  %899 = and i64 %894, %898
  %900 = or i64 %894, %897
  %901 = select i1 %895, i64 %899, i64 %900
  %902 = icmp ugt i8 %40, %213
  %903 = or i64 %230, 7
  %904 = shl i64 1, %903
  %905 = xor i64 %904, -1
  %906 = and i64 %901, %905
  %907 = or i64 %901, %904
  %908 = select i1 %902, i64 %906, i64 %907
  %909 = icmp ugt i8 %117, %213
  %910 = or i64 %230, 8
  %911 = shl i64 1, %910
  %912 = xor i64 %911, -1
  %913 = and i64 %908, %912
  %914 = or i64 %908, %911
  %915 = select i1 %909, i64 %913, i64 %914
  %916 = icmp ugt i8 %129, %213
  %917 = or i64 %230, 9
  %918 = shl i64 1, %917
  %919 = xor i64 %918, -1
  %920 = and i64 %915, %919
  %921 = or i64 %915, %918
  %922 = select i1 %916, i64 %920, i64 %921
  %923 = icmp ugt i8 %141, %213
  %924 = or i64 %230, 10
  %925 = shl i64 1, %924
  %926 = xor i64 %925, -1
  %927 = and i64 %922, %926
  %928 = or i64 %922, %925
  %929 = select i1 %923, i64 %927, i64 %928
  %930 = icmp ugt i8 %153, %213
  %931 = or i64 %230, 11
  %932 = shl i64 1, %931
  %933 = xor i64 %932, -1
  %934 = and i64 %929, %933
  %935 = or i64 %929, %932
  %936 = select i1 %930, i64 %934, i64 %935
  %937 = icmp ugt i8 %165, %213
  %938 = or i64 %230, 12
  %939 = shl i64 1, %938
  %940 = xor i64 %939, -1
  %941 = and i64 %936, %940
  %942 = or i64 %936, %939
  %943 = select i1 %937, i64 %941, i64 %942
  %944 = icmp ugt i8 %177, %213
  %945 = or i64 %230, 13
  %946 = shl i64 1, %945
  %947 = xor i64 %946, -1
  %948 = and i64 %943, %947
  %949 = or i64 %943, %946
  %950 = select i1 %944, i64 %948, i64 %949
  %951 = icmp ugt i8 %189, %213
  %952 = or i64 %230, 14
  %953 = shl i64 1, %952
  %954 = xor i64 %953, -1
  %955 = and i64 %950, %954
  %956 = or i64 %950, %953
  %957 = select i1 %951, i64 %955, i64 %956
  store i64 %957, i64* %229, align 8, !tbaa !870
  %958 = icmp ugt i8 %200, %213
  %959 = or i64 %230, 15
  %960 = shl i64 1, %959
  %961 = xor i64 %960, -1
  %962 = and i64 %957, %961
  %963 = or i64 %957, %960
  br label %253

; <label>:964:                                    ; preds = %249, %246
  %965 = phi i64 [ %252, %249 ], [ %248, %246 ]
  %966 = icmp ult i8 %28, %213
  %967 = or i64 %244, 1
  %968 = shl i64 1, %967
  %969 = xor i64 %968, -1
  %970 = and i64 %965, %969
  %971 = or i64 %965, %968
  %972 = select i1 %966, i64 %970, i64 %971
  %973 = icmp ult i8 %30, %213
  %974 = or i64 %244, 2
  %975 = shl i64 1, %974
  %976 = xor i64 %975, -1
  %977 = and i64 %972, %976
  %978 = or i64 %972, %975
  %979 = select i1 %973, i64 %977, i64 %978
  %980 = icmp ult i8 %32, %213
  %981 = or i64 %244, 3
  %982 = shl i64 1, %981
  %983 = xor i64 %982, -1
  %984 = and i64 %979, %983
  %985 = or i64 %979, %982
  %986 = select i1 %980, i64 %984, i64 %985
  %987 = icmp ult i8 %34, %213
  %988 = or i64 %244, 4
  %989 = shl i64 1, %988
  %990 = xor i64 %989, -1
  %991 = and i64 %986, %990
  %992 = or i64 %986, %989
  %993 = select i1 %987, i64 %991, i64 %992
  %994 = icmp ult i8 %36, %213
  %995 = or i64 %244, 5
  %996 = shl i64 1, %995
  %997 = xor i64 %996, -1
  %998 = and i64 %993, %997
  %999 = or i64 %993, %996
  %1000 = select i1 %994, i64 %998, i64 %999
  %1001 = icmp ult i8 %38, %213
  %1002 = or i64 %244, 6
  %1003 = shl i64 1, %1002
  %1004 = xor i64 %1003, -1
  %1005 = and i64 %1000, %1004
  %1006 = or i64 %1000, %1003
  %1007 = select i1 %1001, i64 %1005, i64 %1006
  %1008 = icmp ult i8 %40, %213
  %1009 = or i64 %244, 7
  %1010 = shl i64 1, %1009
  %1011 = xor i64 %1010, -1
  %1012 = and i64 %1007, %1011
  %1013 = or i64 %1007, %1010
  %1014 = select i1 %1008, i64 %1012, i64 %1013
  %1015 = icmp ult i8 %117, %213
  %1016 = or i64 %244, 8
  %1017 = shl i64 1, %1016
  %1018 = xor i64 %1017, -1
  %1019 = and i64 %1014, %1018
  %1020 = or i64 %1014, %1017
  %1021 = select i1 %1015, i64 %1019, i64 %1020
  %1022 = icmp ult i8 %129, %213
  %1023 = or i64 %244, 9
  %1024 = shl i64 1, %1023
  %1025 = xor i64 %1024, -1
  %1026 = and i64 %1021, %1025
  %1027 = or i64 %1021, %1024
  %1028 = select i1 %1022, i64 %1026, i64 %1027
  %1029 = icmp ult i8 %141, %213
  %1030 = or i64 %244, 10
  %1031 = shl i64 1, %1030
  %1032 = xor i64 %1031, -1
  %1033 = and i64 %1028, %1032
  %1034 = or i64 %1028, %1031
  %1035 = select i1 %1029, i64 %1033, i64 %1034
  %1036 = icmp ult i8 %153, %213
  %1037 = or i64 %244, 11
  %1038 = shl i64 1, %1037
  %1039 = xor i64 %1038, -1
  %1040 = and i64 %1035, %1039
  %1041 = or i64 %1035, %1038
  %1042 = select i1 %1036, i64 %1040, i64 %1041
  %1043 = icmp ult i8 %165, %213
  %1044 = or i64 %244, 12
  %1045 = shl i64 1, %1044
  %1046 = xor i64 %1045, -1
  %1047 = and i64 %1042, %1046
  %1048 = or i64 %1042, %1045
  %1049 = select i1 %1043, i64 %1047, i64 %1048
  %1050 = icmp ult i8 %177, %213
  %1051 = or i64 %244, 13
  %1052 = shl i64 1, %1051
  %1053 = xor i64 %1052, -1
  %1054 = and i64 %1049, %1053
  %1055 = or i64 %1049, %1052
  %1056 = select i1 %1050, i64 %1054, i64 %1055
  %1057 = icmp ult i8 %189, %213
  %1058 = or i64 %244, 14
  %1059 = shl i64 1, %1058
  %1060 = xor i64 %1059, -1
  %1061 = and i64 %1056, %1060
  %1062 = or i64 %1056, %1059
  %1063 = select i1 %1057, i64 %1061, i64 %1062
  store i64 %1063, i64* %243, align 8, !tbaa !870
  %1064 = icmp ult i8 %200, %213
  %1065 = or i64 %244, 15
  %1066 = shl i64 1, %1065
  %1067 = xor i64 %1066, -1
  %1068 = and i64 %1063, %1067
  %1069 = or i64 %1063, %1066
  br label %253

; <label>:1070:                                   ; preds = %808, %807, %803, %802
  %1071 = phi i64 [ %814, %808 ], [ 16, %807 ], [ %806, %803 ], [ 16, %802 ]
  %1072 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1073 = and i64 %1071, 65535
  store i64 %1073, i64* %1072, align 8, !tbaa !870
  %1074 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1075 = icmp ne i16 %798, 0
  %1076 = zext i1 %1075 to i8
  store i8 %1076, i8* %1074, align 1, !tbaa !868
  %1077 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1078 = icmp ult i64 %204, 16
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %1077, align 1, !tbaa !868
  %1080 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1081 = icmp ult i64 %786, 16
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %1080, align 1, !tbaa !868
  %1083 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1084 = trunc i16 %798 to i8
  %1085 = and i8 %1084, 1
  store i8 %1085, i8* %1083, align 1, !tbaa !868
  %1086 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1086, align 1, !tbaa !868
  %1087 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1087, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 288, i8* nonnull %41) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  br label %3313

; <label>:1088:                                   ; preds = %5
  %1089 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %1090 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1090) #23
  %1091 = bitcast i8* %2 to i64*
  %1092 = load i64, i64* %1091, align 1
  %1093 = getelementptr inbounds i8, i8* %2, i64 8
  %1094 = bitcast i8* %1093 to i64*
  %1095 = load i64, i64* %1094, align 1
  %1096 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %1092, i64* %1096, align 8
  %1097 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %1095, i64* %1097, align 8
  %1098 = bitcast i8* %3 to i64*
  %1099 = load i64, i64* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %3, i64 8
  %1101 = bitcast i8* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = trunc i64 %1099 to i16
  %1104 = lshr i64 %1099, 16
  %1105 = trunc i64 %1104 to i16
  %1106 = lshr i64 %1099, 32
  %1107 = trunc i64 %1106 to i16
  %1108 = lshr i64 %1099, 48
  %1109 = trunc i64 %1108 to i16
  %1110 = lshr i8 %12, 2
  %1111 = trunc i64 %1092 to i16
  %1112 = icmp eq i16 %1111, 0
  %1113 = select i1 %1112, i64 0, i64 8
  %1114 = icmp eq i16 %1103, 0
  %1115 = select i1 %1114, i64 0, i64 8
  %1116 = and i64 %1092, 4294901760
  %1117 = icmp eq i64 %1116, 0
  %1118 = xor i1 %1112, true
  %1119 = and i1 %1117, %1118
  %1120 = select i1 %1119, i64 1, i64 %1113
  %1121 = icmp eq i16 %1105, 0
  %1122 = xor i1 %1114, true
  %1123 = and i1 %1121, %1122
  %1124 = select i1 %1123, i64 1, i64 %1115
  %1125 = and i64 %1092, 281470681743360
  %1126 = icmp eq i64 %1125, 0
  %1127 = icmp ugt i64 %1120, 2
  %1128 = and i1 %1126, %1127
  %1129 = select i1 %1128, i64 2, i64 %1120
  %1130 = icmp eq i16 %1107, 0
  %1131 = icmp ugt i64 %1124, 2
  %1132 = and i1 %1130, %1131
  %1133 = select i1 %1132, i64 2, i64 %1124
  %1134 = icmp ult i64 %1092, 281474976710656
  %1135 = icmp ugt i64 %1129, 3
  %1136 = and i1 %1134, %1135
  %1137 = select i1 %1136, i64 3, i64 %1129
  %1138 = icmp eq i16 %1109, 0
  %1139 = icmp ugt i64 %1133, 3
  %1140 = and i1 %1138, %1139
  %1141 = select i1 %1140, i64 3, i64 %1133
  %1142 = trunc i64 %1095 to i16
  %1143 = icmp eq i16 %1142, 0
  %1144 = icmp ugt i64 %1137, 4
  %1145 = and i1 %1143, %1144
  %1146 = select i1 %1145, i64 4, i64 %1137
  %1147 = trunc i64 %1102 to i16
  %1148 = icmp eq i16 %1147, 0
  %1149 = icmp ugt i64 %1141, 4
  %1150 = and i1 %1148, %1149
  %1151 = select i1 %1150, i64 4, i64 %1141
  %1152 = and i64 %1095, 4294901760
  %1153 = icmp eq i64 %1152, 0
  %1154 = icmp ugt i64 %1146, 5
  %1155 = and i1 %1153, %1154
  %1156 = select i1 %1155, i64 5, i64 %1146
  %1157 = lshr i64 %1102, 16
  %1158 = trunc i64 %1157 to i16
  %1159 = icmp eq i16 %1158, 0
  %1160 = icmp ugt i64 %1151, 5
  %1161 = and i1 %1159, %1160
  %1162 = select i1 %1161, i64 5, i64 %1151
  %1163 = and i64 %1095, 281470681743360
  %1164 = icmp eq i64 %1163, 0
  %1165 = icmp ugt i64 %1156, 6
  %1166 = and i1 %1164, %1165
  %1167 = select i1 %1166, i64 6, i64 %1156
  %1168 = lshr i64 %1102, 32
  %1169 = trunc i64 %1168 to i16
  %1170 = icmp eq i16 %1169, 0
  %1171 = icmp ugt i64 %1162, 6
  %1172 = and i1 %1170, %1171
  %1173 = select i1 %1172, i64 6, i64 %1162
  %1174 = icmp ult i64 %1095, 281474976710656
  %1175 = icmp ugt i64 %1167, 7
  %1176 = and i1 %1174, %1175
  %1177 = select i1 %1176, i64 7, i64 %1167
  %1178 = lshr i64 %1102, 48
  %1179 = trunc i64 %1178 to i16
  %1180 = icmp eq i16 %1179, 0
  %1181 = icmp ugt i64 %1173, 7
  %1182 = and i1 %1180, %1181
  %1183 = select i1 %1182, i64 7, i64 %1173
  %1184 = lshr i8 %12, 4
  %1185 = trunc i8 %1110 to i2
  %1186 = icmp eq i2 %1185, 1
  br i1 %1186, label %1188, label %1187

; <label>:1187:                                   ; preds = %1088
  br label %1320

; <label>:1188:                                   ; preds = %1088
  br label %1189

; <label>:1189:                                   ; preds = %1313, %1188
  %1190 = phi i16 [ %1315, %1313 ], [ %1111, %1188 ]
  %1191 = phi i64 [ %1311, %1313 ], [ 0, %1188 ]
  %1192 = phi i64 [ %1310, %1313 ], [ 0, %1188 ]
  %1193 = and i64 %1191, 1
  %1194 = icmp eq i64 %1193, 0
  %1195 = shl i64 %1191, 3
  br i1 %1194, label %1251, label %1196

; <label>:1196:                                   ; preds = %1189
  %1197 = icmp ugt i16 %1103, %1190
  %1198 = shl i64 1, %1195
  %1199 = xor i64 %1198, -1
  %1200 = and i64 %1192, %1199
  %1201 = or i64 %1198, %1192
  %1202 = select i1 %1197, i64 %1200, i64 %1201
  %1203 = icmp ugt i16 %1105, %1190
  %1204 = or i64 %1195, 1
  %1205 = shl i64 1, %1204
  %1206 = xor i64 %1205, -1
  %1207 = and i64 %1202, %1206
  %1208 = or i64 %1202, %1205
  %1209 = select i1 %1203, i64 %1207, i64 %1208
  %1210 = icmp ugt i16 %1107, %1190
  %1211 = or i64 %1195, 2
  %1212 = shl i64 1, %1211
  %1213 = xor i64 %1212, -1
  %1214 = and i64 %1209, %1213
  %1215 = or i64 %1209, %1212
  %1216 = select i1 %1210, i64 %1214, i64 %1215
  %1217 = icmp ugt i16 %1109, %1190
  %1218 = or i64 %1195, 3
  %1219 = shl i64 1, %1218
  %1220 = xor i64 %1219, -1
  %1221 = and i64 %1216, %1220
  %1222 = or i64 %1216, %1219
  %1223 = select i1 %1217, i64 %1221, i64 %1222
  %1224 = icmp ugt i16 %1147, %1190
  %1225 = or i64 %1195, 4
  %1226 = shl i64 1, %1225
  %1227 = xor i64 %1226, -1
  %1228 = and i64 %1223, %1227
  %1229 = or i64 %1223, %1226
  %1230 = select i1 %1224, i64 %1228, i64 %1229
  %1231 = icmp ugt i16 %1158, %1190
  %1232 = or i64 %1195, 5
  %1233 = shl i64 1, %1232
  %1234 = xor i64 %1233, -1
  %1235 = and i64 %1230, %1234
  %1236 = or i64 %1230, %1233
  %1237 = select i1 %1231, i64 %1235, i64 %1236
  %1238 = icmp ugt i16 %1169, %1190
  %1239 = or i64 %1195, 6
  %1240 = shl i64 1, %1239
  %1241 = xor i64 %1240, -1
  %1242 = and i64 %1237, %1241
  %1243 = or i64 %1237, %1240
  %1244 = select i1 %1238, i64 %1242, i64 %1243
  %1245 = icmp ugt i16 %1179, %1190
  %1246 = or i64 %1195, 7
  %1247 = shl i64 1, %1246
  %1248 = xor i64 %1247, -1
  %1249 = and i64 %1244, %1248
  %1250 = or i64 %1244, %1247
  br label %1306

; <label>:1251:                                   ; preds = %1189
  %1252 = icmp ult i16 %1103, %1190
  %1253 = shl i64 1, %1195
  %1254 = xor i64 %1253, -1
  %1255 = and i64 %1192, %1254
  %1256 = or i64 %1253, %1192
  %1257 = select i1 %1252, i64 %1255, i64 %1256
  %1258 = icmp ult i16 %1105, %1190
  %1259 = or i64 %1195, 1
  %1260 = shl i64 1, %1259
  %1261 = xor i64 %1260, -1
  %1262 = and i64 %1257, %1261
  %1263 = or i64 %1257, %1260
  %1264 = select i1 %1258, i64 %1262, i64 %1263
  %1265 = icmp ult i16 %1107, %1190
  %1266 = or i64 %1195, 2
  %1267 = shl i64 1, %1266
  %1268 = xor i64 %1267, -1
  %1269 = and i64 %1264, %1268
  %1270 = or i64 %1264, %1267
  %1271 = select i1 %1265, i64 %1269, i64 %1270
  %1272 = icmp ult i16 %1109, %1190
  %1273 = or i64 %1195, 3
  %1274 = shl i64 1, %1273
  %1275 = xor i64 %1274, -1
  %1276 = and i64 %1271, %1275
  %1277 = or i64 %1271, %1274
  %1278 = select i1 %1272, i64 %1276, i64 %1277
  %1279 = icmp ult i16 %1147, %1190
  %1280 = or i64 %1195, 4
  %1281 = shl i64 1, %1280
  %1282 = xor i64 %1281, -1
  %1283 = and i64 %1278, %1282
  %1284 = or i64 %1278, %1281
  %1285 = select i1 %1279, i64 %1283, i64 %1284
  %1286 = icmp ult i16 %1158, %1190
  %1287 = or i64 %1195, 5
  %1288 = shl i64 1, %1287
  %1289 = xor i64 %1288, -1
  %1290 = and i64 %1285, %1289
  %1291 = or i64 %1285, %1288
  %1292 = select i1 %1286, i64 %1290, i64 %1291
  %1293 = icmp ult i16 %1169, %1190
  %1294 = or i64 %1195, 6
  %1295 = shl i64 1, %1294
  %1296 = xor i64 %1295, -1
  %1297 = and i64 %1292, %1296
  %1298 = or i64 %1292, %1295
  %1299 = select i1 %1293, i64 %1297, i64 %1298
  %1300 = icmp ult i16 %1179, %1190
  %1301 = or i64 %1195, 7
  %1302 = shl i64 1, %1301
  %1303 = xor i64 %1302, -1
  %1304 = and i64 %1299, %1303
  %1305 = or i64 %1299, %1302
  br label %1306

; <label>:1306:                                   ; preds = %1251, %1196
  %1307 = phi i64 [ %1250, %1196 ], [ %1305, %1251 ]
  %1308 = phi i64 [ %1249, %1196 ], [ %1304, %1251 ]
  %1309 = phi i1 [ %1245, %1196 ], [ %1300, %1251 ]
  %1310 = select i1 %1309, i64 %1308, i64 %1307
  %1311 = add nuw nsw i64 %1191, 1
  %1312 = icmp eq i64 %1311, 8
  br i1 %1312, label %1316, label %1313

; <label>:1313:                                   ; preds = %1306
  %1314 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1089, i64 0, i32 0, i64 %1311
  %1315 = load i16, i16* %1314, align 2, !tbaa !869
  br label %1189

; <label>:1316:                                   ; preds = %1306
  br label %1318

; <label>:1317:                                   ; preds = %1320
  br label %1318

; <label>:1318:                                   ; preds = %1317, %1316
  %1319 = phi i64 [ %1310, %1316 ], [ %1379, %1317 ]
  switch i2 %1185, label %1593 [
    i2 0, label %1385
    i2 1, label %1413
    i2 -2, label %1446
    i2 -1, label %1576
  ]

; <label>:1320:                                   ; preds = %1382, %1187
  %1321 = phi i16 [ %1384, %1382 ], [ %1111, %1187 ]
  %1322 = phi i64 [ %1380, %1382 ], [ 0, %1187 ]
  %1323 = phi i64 [ %1379, %1382 ], [ 0, %1187 ]
  %1324 = shl i64 %1322, 3
  %1325 = icmp eq i16 %1321, %1103
  %1326 = shl i64 1, %1324
  %1327 = xor i64 %1326, -1
  %1328 = and i64 %1323, %1327
  %1329 = or i64 %1326, %1323
  %1330 = select i1 %1325, i64 %1329, i64 %1328
  %1331 = icmp eq i16 %1321, %1105
  %1332 = or i64 %1324, 1
  %1333 = shl i64 1, %1332
  %1334 = xor i64 %1333, -1
  %1335 = and i64 %1330, %1334
  %1336 = or i64 %1330, %1333
  %1337 = select i1 %1331, i64 %1336, i64 %1335
  %1338 = icmp eq i16 %1321, %1107
  %1339 = or i64 %1324, 2
  %1340 = shl i64 1, %1339
  %1341 = xor i64 %1340, -1
  %1342 = and i64 %1337, %1341
  %1343 = or i64 %1337, %1340
  %1344 = select i1 %1338, i64 %1343, i64 %1342
  %1345 = icmp eq i16 %1321, %1109
  %1346 = or i64 %1324, 3
  %1347 = shl i64 1, %1346
  %1348 = xor i64 %1347, -1
  %1349 = and i64 %1344, %1348
  %1350 = or i64 %1344, %1347
  %1351 = select i1 %1345, i64 %1350, i64 %1349
  %1352 = icmp eq i16 %1321, %1147
  %1353 = or i64 %1324, 4
  %1354 = shl i64 1, %1353
  %1355 = xor i64 %1354, -1
  %1356 = and i64 %1351, %1355
  %1357 = or i64 %1351, %1354
  %1358 = select i1 %1352, i64 %1357, i64 %1356
  %1359 = icmp eq i16 %1321, %1158
  %1360 = or i64 %1324, 5
  %1361 = shl i64 1, %1360
  %1362 = xor i64 %1361, -1
  %1363 = and i64 %1358, %1362
  %1364 = or i64 %1358, %1361
  %1365 = select i1 %1359, i64 %1364, i64 %1363
  %1366 = icmp eq i16 %1321, %1169
  %1367 = or i64 %1324, 6
  %1368 = shl i64 1, %1367
  %1369 = xor i64 %1368, -1
  %1370 = and i64 %1365, %1369
  %1371 = or i64 %1365, %1368
  %1372 = select i1 %1366, i64 %1371, i64 %1370
  %1373 = icmp eq i16 %1321, %1179
  %1374 = or i64 %1324, 7
  %1375 = shl i64 1, %1374
  %1376 = xor i64 %1375, -1
  %1377 = and i64 %1372, %1376
  %1378 = or i64 %1372, %1375
  %1379 = select i1 %1373, i64 %1378, i64 %1377
  %1380 = add nuw nsw i64 %1322, 1
  %1381 = icmp eq i64 %1380, 8
  br i1 %1381, label %1317, label %1382

; <label>:1382:                                   ; preds = %1320
  %1383 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1089, i64 0, i32 0, i64 %1380
  %1384 = load i16, i16* %1383, align 2, !tbaa !869
  br label %1320

; <label>:1385:                                   ; preds = %1318
  %1386 = icmp eq i64 %1183, 0
  %1387 = icmp eq i64 %1177, 0
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %1596, label %1389

; <label>:1389:                                   ; preds = %1385
  br label %1390

; <label>:1390:                                   ; preds = %1408, %1389
  %1391 = phi i64 [ %1410, %1408 ], [ 0, %1389 ]
  %1392 = phi i16 [ %1411, %1408 ], [ 1, %1389 ]
  %1393 = phi i16 [ %1409, %1408 ], [ 0, %1389 ]
  br label %1396

; <label>:1394:                                   ; preds = %1396
  %1395 = icmp ult i64 %1404, %1177
  br i1 %1395, label %1396, label %1407, !llvm.loop !891

; <label>:1396:                                   ; preds = %1394, %1390
  %1397 = phi i64 [ 0, %1390 ], [ %1404, %1394 ]
  %1398 = shl i64 %1397, 3
  %1399 = add i64 %1398, %1391
  %1400 = and i64 %1399, 63
  %1401 = shl i64 1, %1400
  %1402 = and i64 %1401, %1319
  %1403 = icmp eq i64 %1402, 0
  %1404 = add nuw i64 %1397, 1
  br i1 %1403, label %1394, label %1405

; <label>:1405:                                   ; preds = %1396
  %1406 = or i16 %1393, %1392
  br label %1408

; <label>:1407:                                   ; preds = %1394
  br label %1408

; <label>:1408:                                   ; preds = %1407, %1405
  %1409 = phi i16 [ %1406, %1405 ], [ %1393, %1407 ]
  %1410 = add nuw i64 %1391, 1
  %1411 = shl i16 %1392, 1
  %1412 = icmp eq i64 %1410, %1183
  br i1 %1412, label %1594, label %1390

; <label>:1413:                                   ; preds = %1318
  %1414 = icmp eq i64 %1183, 0
  br i1 %1414, label %1596, label %1415

; <label>:1415:                                   ; preds = %1413
  %1416 = add i64 %1177, -1
  %1417 = icmp eq i64 %1416, 0
  br i1 %1417, label %1596, label %1418

; <label>:1418:                                   ; preds = %1415
  br label %1419

; <label>:1419:                                   ; preds = %1442, %1418
  %1420 = phi i16 [ %1438, %1442 ], [ 0, %1418 ]
  %1421 = phi i16 [ %1444, %1442 ], [ 1, %1418 ]
  %1422 = phi i64 [ %1443, %1442 ], [ 0, %1418 ]
  br label %1423

; <label>:1423:                                   ; preds = %1423, %1419
  %1424 = phi i16 [ %1420, %1419 ], [ %1438, %1423 ]
  %1425 = phi i64 [ 0, %1419 ], [ %1439, %1423 ]
  %1426 = shl i64 %1425, 3
  %1427 = add i64 %1426, %1422
  %1428 = and i64 %1427, 63
  %1429 = shl i64 1, %1428
  %1430 = or i64 %1426, 8
  %1431 = add i64 %1430, %1422
  %1432 = and i64 %1431, 63
  %1433 = shl i64 1, %1432
  %1434 = or i64 %1433, %1429
  %1435 = and i64 %1434, %1319
  %1436 = icmp ne i64 %1435, %1434
  %1437 = select i1 %1436, i16 0, i16 %1421
  %1438 = or i16 %1437, %1424
  %1439 = add i64 %1425, 2
  %1440 = icmp ult i64 %1439, %1416
  %1441 = and i1 %1440, %1436
  br i1 %1441, label %1423, label %1442, !llvm.loop !892

; <label>:1442:                                   ; preds = %1423
  %1443 = add nuw i64 %1422, 1
  %1444 = shl i16 %1421, 1
  %1445 = icmp eq i64 %1443, %1183
  br i1 %1445, label %1595, label %1419

; <label>:1446:                                   ; preds = %1318
  %1447 = icmp ne i64 %1177, 0
  %1448 = icmp ne i64 %1183, 0
  %1449 = and i1 %1448, %1447
  br i1 %1449, label %1450, label %1453

; <label>:1450:                                   ; preds = %1446
  %1451 = and i64 %1319, 1
  %1452 = icmp ne i64 %1451, 0
  br label %1458

; <label>:1453:                                   ; preds = %1446
  br i1 %1447, label %1458, label %1454

; <label>:1454:                                   ; preds = %1453
  %1455 = xor i1 %1448, true
  %1456 = zext i1 %1455 to i16
  %1457 = icmp ugt i64 %1183, 1
  br label %1465

; <label>:1458:                                   ; preds = %1453, %1450
  %1459 = phi i1 [ false, %1453 ], [ %1452, %1450 ]
  %1460 = zext i1 %1459 to i16
  %1461 = icmp ugt i64 %1177, 1
  %1462 = icmp ugt i64 %1183, 1
  %1463 = and i1 %1462, %1461
  br i1 %1463, label %1471, label %1464

; <label>:1464:                                   ; preds = %1458
  br i1 %1461, label %1476, label %1465

; <label>:1465:                                   ; preds = %1464, %1454
  %1466 = phi i16 [ %1456, %1454 ], [ %1460, %1464 ]
  %1467 = phi i1 [ %1457, %1454 ], [ %1462, %1464 ]
  %1468 = select i1 %1467, i16 0, i16 2
  %1469 = or i16 %1468, %1466
  %1470 = icmp ugt i64 %1183, 2
  br label %1482

; <label>:1471:                                   ; preds = %1458
  %1472 = trunc i64 %1319 to i16
  %1473 = lshr i16 %1472, 8
  %1474 = and i16 %1473, 2
  %1475 = or i16 %1460, %1474
  br label %1476

; <label>:1476:                                   ; preds = %1471, %1464
  %1477 = phi i16 [ %1460, %1464 ], [ %1475, %1471 ]
  %1478 = icmp ugt i64 %1177, 2
  %1479 = icmp ugt i64 %1183, 2
  %1480 = and i1 %1479, %1478
  br i1 %1480, label %1488, label %1481

; <label>:1481:                                   ; preds = %1476
  br i1 %1478, label %1493, label %1482

; <label>:1482:                                   ; preds = %1481, %1465
  %1483 = phi i16 [ %1469, %1465 ], [ %1477, %1481 ]
  %1484 = phi i1 [ %1470, %1465 ], [ %1479, %1481 ]
  %1485 = select i1 %1484, i16 0, i16 4
  %1486 = or i16 %1485, %1483
  %1487 = icmp ugt i64 %1183, 3
  br label %1499

; <label>:1488:                                   ; preds = %1476
  %1489 = and i64 %1319, 262144
  %1490 = icmp ne i64 %1489, 0
  %1491 = select i1 %1490, i16 4, i16 0
  %1492 = or i16 %1477, %1491
  br label %1493

; <label>:1493:                                   ; preds = %1488, %1481
  %1494 = phi i16 [ %1477, %1481 ], [ %1492, %1488 ]
  %1495 = icmp ugt i64 %1177, 3
  %1496 = icmp ugt i64 %1183, 3
  %1497 = and i1 %1496, %1495
  br i1 %1497, label %1505, label %1498

; <label>:1498:                                   ; preds = %1493
  br i1 %1495, label %1510, label %1499

; <label>:1499:                                   ; preds = %1498, %1482
  %1500 = phi i16 [ %1486, %1482 ], [ %1494, %1498 ]
  %1501 = phi i1 [ %1487, %1482 ], [ %1496, %1498 ]
  %1502 = select i1 %1501, i16 0, i16 8
  %1503 = or i16 %1502, %1500
  %1504 = icmp ugt i64 %1183, 4
  br label %1516

; <label>:1505:                                   ; preds = %1493
  %1506 = and i64 %1319, 134217728
  %1507 = icmp ne i64 %1506, 0
  %1508 = select i1 %1507, i16 8, i16 0
  %1509 = or i16 %1494, %1508
  br label %1510

; <label>:1510:                                   ; preds = %1505, %1498
  %1511 = phi i16 [ %1494, %1498 ], [ %1509, %1505 ]
  %1512 = icmp ugt i64 %1177, 4
  %1513 = icmp ugt i64 %1183, 4
  %1514 = and i1 %1513, %1512
  br i1 %1514, label %1522, label %1515

; <label>:1515:                                   ; preds = %1510
  br i1 %1512, label %1527, label %1516

; <label>:1516:                                   ; preds = %1515, %1499
  %1517 = phi i16 [ %1503, %1499 ], [ %1511, %1515 ]
  %1518 = phi i1 [ %1504, %1499 ], [ %1513, %1515 ]
  %1519 = select i1 %1518, i16 0, i16 16
  %1520 = or i16 %1519, %1517
  %1521 = icmp ugt i64 %1183, 5
  br label %1533

; <label>:1522:                                   ; preds = %1510
  %1523 = and i64 %1319, 68719476736
  %1524 = icmp ne i64 %1523, 0
  %1525 = select i1 %1524, i16 16, i16 0
  %1526 = or i16 %1511, %1525
  br label %1527

; <label>:1527:                                   ; preds = %1522, %1515
  %1528 = phi i16 [ %1511, %1515 ], [ %1526, %1522 ]
  %1529 = icmp ugt i64 %1177, 5
  %1530 = icmp ugt i64 %1183, 5
  %1531 = and i1 %1530, %1529
  br i1 %1531, label %1539, label %1532

; <label>:1532:                                   ; preds = %1527
  br i1 %1529, label %1544, label %1533

; <label>:1533:                                   ; preds = %1532, %1516
  %1534 = phi i16 [ %1520, %1516 ], [ %1528, %1532 ]
  %1535 = phi i1 [ %1521, %1516 ], [ %1530, %1532 ]
  %1536 = select i1 %1535, i16 0, i16 32
  %1537 = or i16 %1536, %1534
  %1538 = icmp ugt i64 %1183, 6
  br label %1550

; <label>:1539:                                   ; preds = %1527
  %1540 = and i64 %1319, 35184372088832
  %1541 = icmp ne i64 %1540, 0
  %1542 = select i1 %1541, i16 32, i16 0
  %1543 = or i16 %1528, %1542
  br label %1544

; <label>:1544:                                   ; preds = %1539, %1532
  %1545 = phi i16 [ %1528, %1532 ], [ %1543, %1539 ]
  %1546 = icmp ugt i64 %1177, 6
  %1547 = icmp ugt i64 %1183, 6
  %1548 = and i1 %1547, %1546
  br i1 %1548, label %1556, label %1549

; <label>:1549:                                   ; preds = %1544
  br i1 %1546, label %1561, label %1550

; <label>:1550:                                   ; preds = %1549, %1533
  %1551 = phi i16 [ %1537, %1533 ], [ %1545, %1549 ]
  %1552 = phi i1 [ %1538, %1533 ], [ %1547, %1549 ]
  %1553 = select i1 %1552, i16 0, i16 64
  %1554 = or i16 %1553, %1551
  %1555 = icmp ugt i64 %1183, 7
  br label %1567

; <label>:1556:                                   ; preds = %1544
  %1557 = and i64 %1319, 18014398509481984
  %1558 = icmp ne i64 %1557, 0
  %1559 = select i1 %1558, i16 64, i16 0
  %1560 = or i16 %1545, %1559
  br label %1561

; <label>:1561:                                   ; preds = %1556, %1549
  %1562 = phi i16 [ %1545, %1549 ], [ %1560, %1556 ]
  %1563 = icmp ugt i64 %1177, 7
  %1564 = icmp ugt i64 %1183, 7
  %1565 = and i1 %1564, %1563
  br i1 %1565, label %1572, label %1566

; <label>:1566:                                   ; preds = %1561
  br i1 %1563, label %1596, label %1567

; <label>:1567:                                   ; preds = %1566, %1550
  %1568 = phi i16 [ %1554, %1550 ], [ %1562, %1566 ]
  %1569 = phi i1 [ %1555, %1550 ], [ %1564, %1566 ]
  %1570 = select i1 %1569, i16 0, i16 128
  %1571 = or i16 %1570, %1568
  br label %1596

; <label>:1572:                                   ; preds = %1561
  %1573 = icmp slt i64 %1319, 0
  %1574 = select i1 %1573, i16 128, i16 0
  %1575 = or i16 %1562, %1574
  br label %1596

; <label>:1576:                                   ; preds = %1318
  %1577 = icmp ugt i64 %1177, %1183
  br i1 %1577, label %1596, label %1578

; <label>:1578:                                   ; preds = %1576
  %1579 = icmp eq i64 %1177, 0
  br i1 %1579, label %1596, label %1580

; <label>:1580:                                   ; preds = %1578
  br label %1581

; <label>:1581:                                   ; preds = %1580
  br label %1582

; <label>:1582:                                   ; preds = %1581
  %1583 = icmp eq i64 %1183, 0
  br i1 %1583, label %1589, label %1584

; <label>:1584:                                   ; preds = %1582
  %1585 = and i64 %1319, 1
  %1586 = icmp eq i64 %1585, 0
  br i1 %1586, label %1589, label %1587

; <label>:1587:                                   ; preds = %1584
  %1588 = icmp ugt i64 %1177, 1
  br i1 %1588, label %3314, label %1590, !llvm.loop !893

; <label>:1589:                                   ; preds = %3358, %3356, %3351, %3349, %3344, %3342, %3337, %3335, %3330, %3328, %3323, %3321, %3316, %3314, %1584, %1582
  br label %1591

; <label>:1590:                                   ; preds = %3360, %3354, %3347, %3340, %3333, %3326, %3319, %1587
  br label %1591

; <label>:1591:                                   ; preds = %1590, %1589
  %1592 = phi i16 [ 254, %1589 ], [ 255, %1590 ]
  br label %3361

; <label>:1593:                                   ; preds = %1318
  unreachable

; <label>:1594:                                   ; preds = %1408
  br label %1596

; <label>:1595:                                   ; preds = %1442
  br label %1596

; <label>:1596:                                   ; preds = %3667, %1595, %1594, %1578, %1576, %1572, %1567, %1566, %1415, %1413, %1385
  %1597 = phi i64 [ %1177, %1385 ], [ %1177, %1413 ], [ 1, %1415 ], [ %1177, %1566 ], [ %1177, %1572 ], [ %1177, %1567 ], [ %1177, %1576 ], [ 0, %1578 ], [ %1177, %1594 ], [ %1177, %1595 ], [ %1177, %3667 ]
  %1598 = phi i16 [ 0, %1385 ], [ 0, %1413 ], [ 0, %1415 ], [ %1562, %1566 ], [ %1575, %1572 ], [ %1571, %1567 ], [ 0, %1576 ], [ 255, %1578 ], [ %1409, %1594 ], [ %1438, %1595 ], [ %3668, %3667 ]
  %1599 = trunc i8 %1184 to i2
  switch i2 %1599, label %1607 [
    i2 0, label %1608
    i2 1, label %1602
    i2 -2, label %1608
    i2 -1, label %1600
  ]

; <label>:1600:                                   ; preds = %1596
  %1601 = icmp eq i64 %1183, 0
  br i1 %1601, label %1608, label %1604

; <label>:1602:                                   ; preds = %1596
  %1603 = xor i16 %1598, 255
  br label %1608

; <label>:1604:                                   ; preds = %1600
  %1605 = xor i16 %1598, 1
  %1606 = icmp eq i64 %1183, 1
  br i1 %1606, label %1608, label %1626

; <label>:1607:                                   ; preds = %1596
  unreachable

; <label>:1608:                                   ; preds = %1641, %1638, %1635, %1632, %1629, %1626, %1604, %1602, %1600, %1596, %1596
  %1609 = phi i16 [ %1603, %1602 ], [ %1598, %1596 ], [ %1598, %1596 ], [ %1639, %1638 ], [ %1636, %1635 ], [ %1633, %1632 ], [ %1630, %1629 ], [ %1627, %1626 ], [ %1605, %1604 ], [ %1598, %1600 ], [ %1644, %1641 ]
  %1610 = and i8 %12, 64
  %1611 = icmp eq i8 %1610, 0
  %1612 = icmp eq i16 %1609, 0
  br i1 %1611, label %1613, label %1618

; <label>:1613:                                   ; preds = %1608
  br i1 %1612, label %1645, label %1614

; <label>:1614:                                   ; preds = %1613
  %1615 = zext i16 %1609 to i32
  %1616 = tail call i32 @llvm.cttz.i32(i32 %1615, i1 true) #23
  %1617 = zext i32 %1616 to i64
  br label %1645

; <label>:1618:                                   ; preds = %1608
  br i1 %1612, label %1645, label %1619

; <label>:1619:                                   ; preds = %1618
  %1620 = zext i16 %1609 to i32
  %1621 = tail call i32 @llvm.ctlz.i32(i32 %1620, i1 true) #23
  %1622 = add nuw nsw i32 %1621, 65512
  %1623 = and i32 %1622, 65535
  %1624 = zext i32 %1623 to i64
  %1625 = sub nsw i64 7, %1624
  br label %1645

; <label>:1626:                                   ; preds = %1604
  %1627 = xor i16 %1598, 3
  %1628 = icmp ugt i64 %1183, 2
  br i1 %1628, label %1629, label %1608

; <label>:1629:                                   ; preds = %1626
  %1630 = xor i16 %1598, 7
  %1631 = icmp eq i64 %1183, 3
  br i1 %1631, label %1608, label %1632

; <label>:1632:                                   ; preds = %1629
  %1633 = xor i16 %1598, 15
  %1634 = icmp ugt i64 %1183, 4
  br i1 %1634, label %1635, label %1608

; <label>:1635:                                   ; preds = %1632
  %1636 = xor i16 %1598, 31
  %1637 = icmp eq i64 %1183, 5
  br i1 %1637, label %1608, label %1638

; <label>:1638:                                   ; preds = %1635
  %1639 = xor i16 %1598, 63
  %1640 = icmp ugt i64 %1183, 6
  br i1 %1640, label %1641, label %1608

; <label>:1641:                                   ; preds = %1638
  %1642 = icmp ne i64 %1183, 7
  %1643 = select i1 %1642, i16 255, i16 127
  %1644 = xor i16 %1598, %1643
  br label %1608

; <label>:1645:                                   ; preds = %1619, %1618, %1614, %1613
  %1646 = phi i64 [ %1625, %1619 ], [ 8, %1618 ], [ %1617, %1614 ], [ 8, %1613 ]
  %1647 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1648 = and i64 %1646, 65535
  store i64 %1648, i64* %1647, align 8, !tbaa !870
  %1649 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1650 = icmp ne i16 %1609, 0
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %1649, align 1, !tbaa !868
  %1652 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1653 = icmp ult i64 %1183, 8
  %1654 = zext i1 %1653 to i8
  store i8 %1654, i8* %1652, align 1, !tbaa !868
  %1655 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1656 = icmp ult i64 %1597, 8
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* %1655, align 1, !tbaa !868
  %1658 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1659 = trunc i16 %1609 to i8
  %1660 = and i8 %1659, 1
  store i8 %1660, i8* %1658, align 1, !tbaa !868
  %1661 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1661, align 1, !tbaa !868
  %1662 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1662, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1090) #23
  br label %3313

; <label>:1663:                                   ; preds = %5
  %1664 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %1665 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %1666 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1666) #23
  %1667 = bitcast i8* %2 to <2 x i64>*
  %1668 = load <2 x i64>, <2 x i64>* %1667, align 1
  %1669 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1664, i64 0, i32 1
  store <2 x i64> %1668, <2 x i64>* %10, align 16
  %1670 = bitcast i8* %3 to i64*
  %1671 = load i64, i64* %1670, align 1
  %1672 = getelementptr inbounds i8, i8* %3, i64 8
  %1673 = bitcast i8* %1672 to i64*
  %1674 = load i64, i64* %1673, align 1
  %1675 = trunc i64 %1671 to i8
  %1676 = lshr i64 %1671, 8
  %1677 = trunc i64 %1676 to i8
  %1678 = lshr i64 %1671, 16
  %1679 = trunc i64 %1678 to i8
  %1680 = lshr i64 %1671, 24
  %1681 = trunc i64 %1680 to i8
  %1682 = lshr i64 %1671, 32
  %1683 = trunc i64 %1682 to i8
  %1684 = lshr i64 %1671, 40
  %1685 = trunc i64 %1684 to i8
  %1686 = lshr i64 %1671, 48
  %1687 = trunc i64 %1686 to i8
  %1688 = lshr i64 %1671, 56
  %1689 = trunc i64 %1688 to i8
  %1690 = bitcast %"class.(anonymous namespace)::BitMatrix"* %7 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %1690) #23
  call void @llvm.memset.p0i8.i64(i8* nonnull %1690, i8 0, i64 32, i32 8, i1 false) #23
  %1691 = lshr i8 %12, 2
  %1692 = extractelement <2 x i64> %1668, i32 0
  %1693 = trunc i64 %1692 to i8
  %1694 = icmp eq i8 %1693, 0
  %1695 = select i1 %1694, i64 0, i64 16
  %1696 = icmp eq i8 %1675, 0
  %1697 = select i1 %1696, i64 0, i64 16
  %1698 = and i64 %1692, 65280
  %1699 = icmp eq i64 %1698, 0
  %1700 = xor i1 %1694, true
  %1701 = and i1 %1699, %1700
  %1702 = select i1 %1701, i64 1, i64 %1695
  %1703 = icmp eq i8 %1677, 0
  %1704 = xor i1 %1696, true
  %1705 = and i1 %1703, %1704
  %1706 = select i1 %1705, i64 1, i64 %1697
  %1707 = and i64 %1692, 16711680
  %1708 = icmp eq i64 %1707, 0
  %1709 = icmp ugt i64 %1702, 2
  %1710 = and i1 %1708, %1709
  %1711 = select i1 %1710, i64 2, i64 %1702
  %1712 = icmp eq i8 %1679, 0
  %1713 = icmp ugt i64 %1706, 2
  %1714 = and i1 %1712, %1713
  %1715 = select i1 %1714, i64 2, i64 %1706
  %1716 = and i64 %1692, 4278190080
  %1717 = icmp eq i64 %1716, 0
  %1718 = icmp ugt i64 %1711, 3
  %1719 = and i1 %1717, %1718
  %1720 = select i1 %1719, i64 3, i64 %1711
  %1721 = icmp eq i8 %1681, 0
  %1722 = icmp ugt i64 %1715, 3
  %1723 = and i1 %1721, %1722
  %1724 = select i1 %1723, i64 3, i64 %1715
  %1725 = and i64 %1692, 1095216660480
  %1726 = icmp eq i64 %1725, 0
  %1727 = icmp ugt i64 %1720, 4
  %1728 = and i1 %1726, %1727
  %1729 = select i1 %1728, i64 4, i64 %1720
  %1730 = icmp eq i8 %1683, 0
  %1731 = icmp ugt i64 %1724, 4
  %1732 = and i1 %1730, %1731
  %1733 = select i1 %1732, i64 4, i64 %1724
  %1734 = and i64 %1692, 280375465082880
  %1735 = icmp eq i64 %1734, 0
  %1736 = icmp ugt i64 %1729, 5
  %1737 = and i1 %1735, %1736
  %1738 = select i1 %1737, i64 5, i64 %1729
  %1739 = icmp eq i8 %1685, 0
  %1740 = icmp ugt i64 %1733, 5
  %1741 = and i1 %1739, %1740
  %1742 = select i1 %1741, i64 5, i64 %1733
  %1743 = and i64 %1692, 71776119061217280
  %1744 = icmp eq i64 %1743, 0
  %1745 = icmp ugt i64 %1738, 6
  %1746 = and i1 %1744, %1745
  %1747 = select i1 %1746, i64 6, i64 %1738
  %1748 = icmp eq i8 %1687, 0
  %1749 = icmp ugt i64 %1742, 6
  %1750 = and i1 %1748, %1749
  %1751 = select i1 %1750, i64 6, i64 %1742
  %1752 = icmp ult i64 %1692, 72057594037927936
  %1753 = icmp ugt i64 %1747, 7
  %1754 = and i1 %1752, %1753
  %1755 = select i1 %1754, i64 7, i64 %1747
  %1756 = icmp eq i8 %1689, 0
  %1757 = icmp ugt i64 %1751, 7
  %1758 = and i1 %1756, %1757
  %1759 = select i1 %1758, i64 7, i64 %1751
  %1760 = bitcast i64* %1669 to i8*
  %1761 = load i8, i8* %1760, align 8, !tbaa !868
  %1762 = icmp eq i8 %1761, 0
  %1763 = icmp ugt i64 %1755, 8
  %1764 = and i1 %1762, %1763
  %1765 = select i1 %1764, i64 8, i64 %1755
  %1766 = trunc i64 %1674 to i8
  %1767 = icmp eq i8 %1766, 0
  %1768 = icmp ugt i64 %1759, 8
  %1769 = and i1 %1767, %1768
  %1770 = select i1 %1769, i64 8, i64 %1759
  %1771 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 9
  %1772 = load i8, i8* %1771, align 1, !tbaa !868
  %1773 = icmp eq i8 %1772, 0
  %1774 = icmp ugt i64 %1765, 9
  %1775 = and i1 %1773, %1774
  %1776 = select i1 %1775, i64 9, i64 %1765
  %1777 = lshr i64 %1674, 8
  %1778 = trunc i64 %1777 to i8
  %1779 = icmp eq i8 %1778, 0
  %1780 = icmp ugt i64 %1770, 9
  %1781 = and i1 %1779, %1780
  %1782 = select i1 %1781, i64 9, i64 %1770
  %1783 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 10
  %1784 = load i8, i8* %1783, align 2, !tbaa !868
  %1785 = icmp eq i8 %1784, 0
  %1786 = icmp ugt i64 %1776, 10
  %1787 = and i1 %1785, %1786
  %1788 = select i1 %1787, i64 10, i64 %1776
  %1789 = lshr i64 %1674, 16
  %1790 = trunc i64 %1789 to i8
  %1791 = icmp eq i8 %1790, 0
  %1792 = icmp ugt i64 %1782, 10
  %1793 = and i1 %1791, %1792
  %1794 = select i1 %1793, i64 10, i64 %1782
  %1795 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 11
  %1796 = load i8, i8* %1795, align 1, !tbaa !868
  %1797 = icmp eq i8 %1796, 0
  %1798 = icmp ugt i64 %1788, 11
  %1799 = and i1 %1797, %1798
  %1800 = select i1 %1799, i64 11, i64 %1788
  %1801 = lshr i64 %1674, 24
  %1802 = trunc i64 %1801 to i8
  %1803 = icmp eq i8 %1802, 0
  %1804 = icmp ugt i64 %1794, 11
  %1805 = and i1 %1803, %1804
  %1806 = select i1 %1805, i64 11, i64 %1794
  %1807 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 12
  %1808 = load i8, i8* %1807, align 4, !tbaa !868
  %1809 = icmp eq i8 %1808, 0
  %1810 = icmp ugt i64 %1800, 12
  %1811 = and i1 %1809, %1810
  %1812 = select i1 %1811, i64 12, i64 %1800
  %1813 = lshr i64 %1674, 32
  %1814 = trunc i64 %1813 to i8
  %1815 = icmp eq i8 %1814, 0
  %1816 = icmp ugt i64 %1806, 12
  %1817 = and i1 %1815, %1816
  %1818 = select i1 %1817, i64 12, i64 %1806
  %1819 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 13
  %1820 = load i8, i8* %1819, align 1, !tbaa !868
  %1821 = icmp eq i8 %1820, 0
  %1822 = icmp ugt i64 %1812, 13
  %1823 = and i1 %1821, %1822
  %1824 = select i1 %1823, i64 13, i64 %1812
  %1825 = lshr i64 %1674, 40
  %1826 = trunc i64 %1825 to i8
  %1827 = icmp eq i8 %1826, 0
  %1828 = icmp ugt i64 %1818, 13
  %1829 = and i1 %1827, %1828
  %1830 = select i1 %1829, i64 13, i64 %1818
  %1831 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 14
  %1832 = load i8, i8* %1831, align 2, !tbaa !868
  %1833 = icmp eq i8 %1832, 0
  %1834 = icmp ugt i64 %1824, 14
  %1835 = and i1 %1833, %1834
  %1836 = select i1 %1835, i64 14, i64 %1824
  %1837 = lshr i64 %1674, 48
  %1838 = trunc i64 %1837 to i8
  %1839 = icmp eq i8 %1838, 0
  %1840 = icmp ugt i64 %1830, 14
  %1841 = and i1 %1839, %1840
  %1842 = select i1 %1841, i64 14, i64 %1830
  %1843 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 15
  %1844 = load i8, i8* %1843, align 1, !tbaa !868
  %1845 = icmp eq i8 %1844, 0
  %1846 = icmp ugt i64 %1836, 15
  %1847 = and i1 %1845, %1846
  %1848 = lshr i64 %1674, 56
  %1849 = trunc i64 %1848 to i8
  %1850 = icmp eq i8 %1849, 0
  %1851 = icmp ugt i64 %1842, 15
  %1852 = and i1 %1850, %1851
  %1853 = select i1 %1852, i64 15, i64 %1842
  %1854 = trunc i8 %1691 to i2
  %1855 = icmp eq i2 %1854, 1
  br label %1859

; <label>:1856:                                   ; preds = %1902
  %1857 = select i1 %1847, i64 15, i64 %1836
  %1858 = lshr i8 %12, 4
  switch i2 %1854, label %2430 [
    i2 0, label %2023
    i2 1, label %2054
    i2 -2, label %2095
    i2 -1, label %2390
  ]

; <label>:1859:                                   ; preds = %1902, %1663
  %1860 = phi i64 [ 0, %1663 ], [ %1908, %1902 ]
  %1861 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1665, i64 0, i32 0, i64 %1860
  %1862 = load i8, i8* %1861, align 1, !tbaa !868
  %1863 = shl i64 %1860, 4
  br i1 %1855, label %1871, label %1864

; <label>:1864:                                   ; preds = %1859
  %1865 = icmp eq i8 %1862, %1675
  %1866 = lshr i64 %1860, 2
  %1867 = and i64 %1866, 288230376151711743
  %1868 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %1867
  %1869 = and i64 %1863, 48
  %1870 = shl i64 1, %1869
  br i1 %1865, label %1910, label %1913

; <label>:1871:                                   ; preds = %1859
  %1872 = and i64 %1860, 1
  %1873 = icmp eq i64 %1872, 0
  br i1 %1873, label %1888, label %1874

; <label>:1874:                                   ; preds = %1871
  %1875 = icmp sgt i8 %1675, %1862
  %1876 = lshr i64 %1860, 2
  %1877 = and i64 %1876, 288230376151711743
  %1878 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %1877
  %1879 = and i64 %1863, 48
  %1880 = shl i64 1, %1879
  br i1 %1875, label %1884, label %1881

; <label>:1881:                                   ; preds = %1874
  %1882 = load i64, i64* %1878, align 8, !tbaa !870
  %1883 = or i64 %1882, %1880
  br label %2507

; <label>:1884:                                   ; preds = %1874
  %1885 = xor i64 %1880, -1
  %1886 = load i64, i64* %1878, align 8, !tbaa !870
  %1887 = and i64 %1886, %1885
  br label %2507

; <label>:1888:                                   ; preds = %1871
  %1889 = icmp slt i8 %1675, %1862
  %1890 = lshr i64 %1860, 2
  %1891 = and i64 %1890, 288230376151711743
  %1892 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %1891
  %1893 = and i64 %1863, 48
  %1894 = shl i64 1, %1893
  br i1 %1889, label %1898, label %1895

; <label>:1895:                                   ; preds = %1888
  %1896 = load i64, i64* %1892, align 8, !tbaa !870
  %1897 = or i64 %1896, %1894
  br label %2613

; <label>:1898:                                   ; preds = %1888
  %1899 = xor i64 %1894, -1
  %1900 = load i64, i64* %1892, align 8, !tbaa !870
  %1901 = and i64 %1900, %1899
  br label %2613

; <label>:1902:                                   ; preds = %2613, %2507, %1917
  %1903 = phi i64 [ %2718, %2613 ], [ %2612, %2507 ], [ %2021, %1917 ]
  %1904 = phi i64 [ %2717, %2613 ], [ %2611, %2507 ], [ %2022, %1917 ]
  %1905 = phi i1 [ %2713, %2613 ], [ %2607, %2507 ], [ %2017, %1917 ]
  %1906 = phi i64* [ %1892, %2613 ], [ %1878, %2507 ], [ %1868, %1917 ]
  %1907 = select i1 %1905, i64 %1904, i64 %1903
  store i64 %1907, i64* %1906, align 8, !tbaa !870
  %1908 = add nuw nsw i64 %1860, 1
  %1909 = icmp eq i64 %1908, 16
  br i1 %1909, label %1856, label %1859

; <label>:1910:                                   ; preds = %1864
  %1911 = load i64, i64* %1868, align 8, !tbaa !870
  %1912 = or i64 %1911, %1870
  br label %1917

; <label>:1913:                                   ; preds = %1864
  %1914 = xor i64 %1870, -1
  %1915 = load i64, i64* %1868, align 8, !tbaa !870
  %1916 = and i64 %1915, %1914
  br label %1917

; <label>:1917:                                   ; preds = %1913, %1910
  %1918 = phi i64 [ %1916, %1913 ], [ %1912, %1910 ]
  %1919 = icmp eq i8 %1862, %1677
  %1920 = or i64 %1869, 1
  %1921 = shl i64 1, %1920
  %1922 = xor i64 %1921, -1
  %1923 = and i64 %1918, %1922
  %1924 = or i64 %1918, %1921
  %1925 = select i1 %1919, i64 %1924, i64 %1923
  %1926 = icmp eq i8 %1862, %1679
  %1927 = or i64 %1869, 2
  %1928 = shl i64 1, %1927
  %1929 = xor i64 %1928, -1
  %1930 = and i64 %1925, %1929
  %1931 = or i64 %1925, %1928
  %1932 = select i1 %1926, i64 %1931, i64 %1930
  %1933 = icmp eq i8 %1862, %1681
  %1934 = or i64 %1869, 3
  %1935 = shl i64 1, %1934
  %1936 = xor i64 %1935, -1
  %1937 = and i64 %1932, %1936
  %1938 = or i64 %1932, %1935
  %1939 = select i1 %1933, i64 %1938, i64 %1937
  %1940 = icmp eq i8 %1862, %1683
  %1941 = or i64 %1869, 4
  %1942 = shl i64 1, %1941
  %1943 = xor i64 %1942, -1
  %1944 = and i64 %1939, %1943
  %1945 = or i64 %1939, %1942
  %1946 = select i1 %1940, i64 %1945, i64 %1944
  %1947 = icmp eq i8 %1862, %1685
  %1948 = or i64 %1869, 5
  %1949 = shl i64 1, %1948
  %1950 = xor i64 %1949, -1
  %1951 = and i64 %1946, %1950
  %1952 = or i64 %1946, %1949
  %1953 = select i1 %1947, i64 %1952, i64 %1951
  %1954 = icmp eq i8 %1862, %1687
  %1955 = or i64 %1869, 6
  %1956 = shl i64 1, %1955
  %1957 = xor i64 %1956, -1
  %1958 = and i64 %1953, %1957
  %1959 = or i64 %1953, %1956
  %1960 = select i1 %1954, i64 %1959, i64 %1958
  %1961 = icmp eq i8 %1862, %1689
  %1962 = or i64 %1869, 7
  %1963 = shl i64 1, %1962
  %1964 = xor i64 %1963, -1
  %1965 = and i64 %1960, %1964
  %1966 = or i64 %1960, %1963
  %1967 = select i1 %1961, i64 %1966, i64 %1965
  %1968 = icmp eq i8 %1862, %1766
  %1969 = or i64 %1869, 8
  %1970 = shl i64 1, %1969
  %1971 = xor i64 %1970, -1
  %1972 = and i64 %1967, %1971
  %1973 = or i64 %1967, %1970
  %1974 = select i1 %1968, i64 %1973, i64 %1972
  %1975 = icmp eq i8 %1862, %1778
  %1976 = or i64 %1869, 9
  %1977 = shl i64 1, %1976
  %1978 = xor i64 %1977, -1
  %1979 = and i64 %1974, %1978
  %1980 = or i64 %1974, %1977
  %1981 = select i1 %1975, i64 %1980, i64 %1979
  %1982 = icmp eq i8 %1862, %1790
  %1983 = or i64 %1869, 10
  %1984 = shl i64 1, %1983
  %1985 = xor i64 %1984, -1
  %1986 = and i64 %1981, %1985
  %1987 = or i64 %1981, %1984
  %1988 = select i1 %1982, i64 %1987, i64 %1986
  %1989 = icmp eq i8 %1862, %1802
  %1990 = or i64 %1869, 11
  %1991 = shl i64 1, %1990
  %1992 = xor i64 %1991, -1
  %1993 = and i64 %1988, %1992
  %1994 = or i64 %1988, %1991
  %1995 = select i1 %1989, i64 %1994, i64 %1993
  %1996 = icmp eq i8 %1862, %1814
  %1997 = or i64 %1869, 12
  %1998 = shl i64 1, %1997
  %1999 = xor i64 %1998, -1
  %2000 = and i64 %1995, %1999
  %2001 = or i64 %1995, %1998
  %2002 = select i1 %1996, i64 %2001, i64 %2000
  %2003 = icmp eq i8 %1862, %1826
  %2004 = or i64 %1869, 13
  %2005 = shl i64 1, %2004
  %2006 = xor i64 %2005, -1
  %2007 = and i64 %2002, %2006
  %2008 = or i64 %2002, %2005
  %2009 = select i1 %2003, i64 %2008, i64 %2007
  %2010 = icmp eq i8 %1862, %1838
  %2011 = or i64 %1869, 14
  %2012 = shl i64 1, %2011
  %2013 = xor i64 %2012, -1
  %2014 = and i64 %2009, %2013
  %2015 = or i64 %2009, %2012
  %2016 = select i1 %2010, i64 %2015, i64 %2014
  store i64 %2016, i64* %1868, align 8, !tbaa !870
  %2017 = icmp eq i8 %1862, %1849
  %2018 = or i64 %1869, 15
  %2019 = shl i64 1, %2018
  %2020 = xor i64 %2019, -1
  %2021 = and i64 %2016, %2020
  %2022 = or i64 %2016, %2019
  br label %1902

; <label>:2023:                                   ; preds = %1856
  %2024 = icmp eq i64 %1853, 0
  %2025 = icmp eq i64 %1857, 0
  %2026 = or i1 %2024, %2025
  br i1 %2026, label %2434, label %2027

; <label>:2027:                                   ; preds = %2023
  br label %2028

; <label>:2028:                                   ; preds = %2049, %2027
  %2029 = phi i64 [ %2051, %2049 ], [ 0, %2027 ]
  %2030 = phi i16 [ %2052, %2049 ], [ 1, %2027 ]
  %2031 = phi i16 [ %2050, %2049 ], [ 0, %2027 ]
  br label %2034

; <label>:2032:                                   ; preds = %2034
  %2033 = icmp ult i64 %2045, %1857
  br i1 %2033, label %2034, label %2048, !llvm.loop !888

; <label>:2034:                                   ; preds = %2032, %2028
  %2035 = phi i64 [ 0, %2028 ], [ %2045, %2032 ]
  %2036 = shl i64 %2035, 4
  %2037 = add i64 %2036, %2029
  %2038 = lshr i64 %2037, 6
  %2039 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2038
  %2040 = load i64, i64* %2039, align 8, !tbaa !870
  %2041 = and i64 %2037, 63
  %2042 = shl i64 1, %2041
  %2043 = and i64 %2042, %2040
  %2044 = icmp eq i64 %2043, 0
  %2045 = add nuw i64 %2035, 1
  br i1 %2044, label %2032, label %2046

; <label>:2046:                                   ; preds = %2034
  %2047 = or i16 %2031, %2030
  br label %2049

; <label>:2048:                                   ; preds = %2032
  br label %2049

; <label>:2049:                                   ; preds = %2048, %2046
  %2050 = phi i16 [ %2047, %2046 ], [ %2031, %2048 ]
  %2051 = add nuw i64 %2029, 1
  %2052 = shl i16 %2030, 1
  %2053 = icmp eq i64 %2051, %1853
  br i1 %2053, label %2431, label %2028

; <label>:2054:                                   ; preds = %1856
  %2055 = icmp eq i64 %1853, 0
  br i1 %2055, label %2434, label %2056

; <label>:2056:                                   ; preds = %2054
  %2057 = add i64 %1857, -1
  %2058 = icmp eq i64 %2057, 0
  br i1 %2058, label %2434, label %2059

; <label>:2059:                                   ; preds = %2056
  br label %2060

; <label>:2060:                                   ; preds = %2091, %2059
  %2061 = phi i16 [ %2087, %2091 ], [ 0, %2059 ]
  %2062 = phi i16 [ %2093, %2091 ], [ 1, %2059 ]
  %2063 = phi i64 [ %2092, %2091 ], [ 0, %2059 ]
  br label %2064

; <label>:2064:                                   ; preds = %2064, %2060
  %2065 = phi i16 [ %2061, %2060 ], [ %2087, %2064 ]
  %2066 = phi i64 [ 0, %2060 ], [ %2088, %2064 ]
  %2067 = shl i64 %2066, 4
  %2068 = add i64 %2067, %2063
  %2069 = lshr i64 %2068, 6
  %2070 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2069
  %2071 = load i64, i64* %2070, align 8, !tbaa !870
  %2072 = and i64 %2068, 63
  %2073 = shl i64 1, %2072
  %2074 = and i64 %2073, %2071
  %2075 = or i64 %2067, 16
  %2076 = add i64 %2075, %2063
  %2077 = lshr i64 %2076, 6
  %2078 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2077
  %2079 = load i64, i64* %2078, align 8, !tbaa !870
  %2080 = and i64 %2076, 63
  %2081 = shl i64 1, %2080
  %2082 = and i64 %2081, %2079
  %2083 = icmp eq i64 %2074, 0
  %2084 = icmp eq i64 %2082, 0
  %2085 = or i1 %2083, %2084
  %2086 = select i1 %2085, i16 0, i16 %2062
  %2087 = or i16 %2086, %2065
  %2088 = add i64 %2066, 2
  %2089 = icmp ult i64 %2088, %2057
  %2090 = and i1 %2089, %2085
  br i1 %2090, label %2064, label %2091, !llvm.loop !889

; <label>:2091:                                   ; preds = %2064
  %2092 = add nuw i64 %2063, 1
  %2093 = shl i16 %2062, 1
  %2094 = icmp eq i64 %2092, %1853
  br i1 %2094, label %2432, label %2060

; <label>:2095:                                   ; preds = %1856
  %2096 = icmp ne i64 %1857, 0
  %2097 = icmp ne i64 %1853, 0
  %2098 = and i1 %2097, %2096
  br i1 %2098, label %2099, label %2104

; <label>:2099:                                   ; preds = %2095
  %2100 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2101 = load i64, i64* %2100, align 8, !tbaa !870
  %2102 = and i64 %2101, 1
  %2103 = icmp ne i64 %2102, 0
  br label %2109

; <label>:2104:                                   ; preds = %2095
  br i1 %2096, label %2109, label %2105

; <label>:2105:                                   ; preds = %2104
  %2106 = xor i1 %2097, true
  %2107 = zext i1 %2106 to i16
  %2108 = icmp ugt i64 %1853, 1
  br label %2116

; <label>:2109:                                   ; preds = %2104, %2099
  %2110 = phi i1 [ false, %2104 ], [ %2103, %2099 ]
  %2111 = zext i1 %2110 to i16
  %2112 = icmp ugt i64 %1857, 1
  %2113 = icmp ugt i64 %1853, 1
  %2114 = and i1 %2113, %2112
  br i1 %2114, label %2122, label %2115

; <label>:2115:                                   ; preds = %2109
  br i1 %2112, label %2129, label %2116

; <label>:2116:                                   ; preds = %2115, %2105
  %2117 = phi i16 [ %2107, %2105 ], [ %2111, %2115 ]
  %2118 = phi i1 [ %2108, %2105 ], [ %2113, %2115 ]
  %2119 = select i1 %2118, i16 0, i16 2
  %2120 = or i16 %2119, %2117
  %2121 = icmp ugt i64 %1853, 2
  br label %2135

; <label>:2122:                                   ; preds = %2109
  %2123 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2124 = load i64, i64* %2123, align 8, !tbaa !870
  %2125 = and i64 %2124, 131072
  %2126 = icmp ne i64 %2125, 0
  %2127 = select i1 %2126, i16 2, i16 0
  %2128 = or i16 %2127, %2111
  br label %2129

; <label>:2129:                                   ; preds = %2122, %2115
  %2130 = phi i16 [ %2111, %2115 ], [ %2128, %2122 ]
  %2131 = icmp ugt i64 %1857, 2
  %2132 = icmp ugt i64 %1853, 2
  %2133 = and i1 %2132, %2131
  br i1 %2133, label %2141, label %2134

; <label>:2134:                                   ; preds = %2129
  br i1 %2131, label %2148, label %2135

; <label>:2135:                                   ; preds = %2134, %2116
  %2136 = phi i16 [ %2120, %2116 ], [ %2130, %2134 ]
  %2137 = phi i1 [ %2121, %2116 ], [ %2132, %2134 ]
  %2138 = select i1 %2137, i16 0, i16 4
  %2139 = or i16 %2138, %2136
  %2140 = icmp ugt i64 %1853, 3
  br label %2154

; <label>:2141:                                   ; preds = %2129
  %2142 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2143 = load i64, i64* %2142, align 8, !tbaa !870
  %2144 = and i64 %2143, 17179869184
  %2145 = icmp ne i64 %2144, 0
  %2146 = select i1 %2145, i16 4, i16 0
  %2147 = or i16 %2146, %2130
  br label %2148

; <label>:2148:                                   ; preds = %2141, %2134
  %2149 = phi i16 [ %2130, %2134 ], [ %2147, %2141 ]
  %2150 = icmp ugt i64 %1857, 3
  %2151 = icmp ugt i64 %1853, 3
  %2152 = and i1 %2151, %2150
  br i1 %2152, label %2160, label %2153

; <label>:2153:                                   ; preds = %2148
  br i1 %2150, label %2167, label %2154

; <label>:2154:                                   ; preds = %2153, %2135
  %2155 = phi i16 [ %2139, %2135 ], [ %2149, %2153 ]
  %2156 = phi i1 [ %2140, %2135 ], [ %2151, %2153 ]
  %2157 = select i1 %2156, i16 0, i16 8
  %2158 = or i16 %2157, %2155
  %2159 = icmp ugt i64 %1853, 4
  br label %2173

; <label>:2160:                                   ; preds = %2148
  %2161 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %2162 = load i64, i64* %2161, align 8, !tbaa !870
  %2163 = and i64 %2162, 2251799813685248
  %2164 = icmp ne i64 %2163, 0
  %2165 = select i1 %2164, i16 8, i16 0
  %2166 = or i16 %2165, %2149
  br label %2167

; <label>:2167:                                   ; preds = %2160, %2153
  %2168 = phi i16 [ %2149, %2153 ], [ %2166, %2160 ]
  %2169 = icmp ugt i64 %1857, 4
  %2170 = icmp ugt i64 %1853, 4
  %2171 = and i1 %2170, %2169
  br i1 %2171, label %2179, label %2172

; <label>:2172:                                   ; preds = %2167
  br i1 %2169, label %2185, label %2173

; <label>:2173:                                   ; preds = %2172, %2154
  %2174 = phi i16 [ %2158, %2154 ], [ %2168, %2172 ]
  %2175 = phi i1 [ %2159, %2154 ], [ %2170, %2172 ]
  %2176 = select i1 %2175, i16 0, i16 16
  %2177 = or i16 %2176, %2174
  %2178 = icmp ugt i64 %1853, 5
  br label %2191

; <label>:2179:                                   ; preds = %2167
  %2180 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2181 = load i64, i64* %2180, align 8, !tbaa !870
  %2182 = trunc i64 %2181 to i16
  %2183 = and i16 %2182, 16
  %2184 = or i16 %2183, %2168
  br label %2185

; <label>:2185:                                   ; preds = %2179, %2172
  %2186 = phi i16 [ %2168, %2172 ], [ %2184, %2179 ]
  %2187 = icmp ugt i64 %1857, 5
  %2188 = icmp ugt i64 %1853, 5
  %2189 = and i1 %2188, %2187
  br i1 %2189, label %2197, label %2190

; <label>:2190:                                   ; preds = %2185
  br i1 %2187, label %2204, label %2191

; <label>:2191:                                   ; preds = %2190, %2173
  %2192 = phi i16 [ %2177, %2173 ], [ %2186, %2190 ]
  %2193 = phi i1 [ %2178, %2173 ], [ %2188, %2190 ]
  %2194 = select i1 %2193, i16 0, i16 32
  %2195 = or i16 %2194, %2192
  %2196 = icmp ugt i64 %1853, 6
  br label %2210

; <label>:2197:                                   ; preds = %2185
  %2198 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2199 = load i64, i64* %2198, align 8, !tbaa !870
  %2200 = and i64 %2199, 2097152
  %2201 = icmp ne i64 %2200, 0
  %2202 = select i1 %2201, i16 32, i16 0
  %2203 = or i16 %2202, %2186
  br label %2204

; <label>:2204:                                   ; preds = %2197, %2190
  %2205 = phi i16 [ %2186, %2190 ], [ %2203, %2197 ]
  %2206 = icmp ugt i64 %1857, 6
  %2207 = icmp ugt i64 %1853, 6
  %2208 = and i1 %2207, %2206
  br i1 %2208, label %2216, label %2209

; <label>:2209:                                   ; preds = %2204
  br i1 %2206, label %2223, label %2210

; <label>:2210:                                   ; preds = %2209, %2191
  %2211 = phi i16 [ %2195, %2191 ], [ %2205, %2209 ]
  %2212 = phi i1 [ %2196, %2191 ], [ %2207, %2209 ]
  %2213 = select i1 %2212, i16 0, i16 64
  %2214 = or i16 %2213, %2211
  %2215 = icmp ugt i64 %1853, 7
  br label %2229

; <label>:2216:                                   ; preds = %2204
  %2217 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2218 = load i64, i64* %2217, align 8, !tbaa !870
  %2219 = and i64 %2218, 274877906944
  %2220 = icmp ne i64 %2219, 0
  %2221 = select i1 %2220, i16 64, i16 0
  %2222 = or i16 %2221, %2205
  br label %2223

; <label>:2223:                                   ; preds = %2216, %2209
  %2224 = phi i16 [ %2205, %2209 ], [ %2222, %2216 ]
  %2225 = icmp ugt i64 %1857, 7
  %2226 = icmp ugt i64 %1853, 7
  %2227 = and i1 %2226, %2225
  br i1 %2227, label %2235, label %2228

; <label>:2228:                                   ; preds = %2223
  br i1 %2225, label %2242, label %2229

; <label>:2229:                                   ; preds = %2228, %2210
  %2230 = phi i16 [ %2214, %2210 ], [ %2224, %2228 ]
  %2231 = phi i1 [ %2215, %2210 ], [ %2226, %2228 ]
  %2232 = select i1 %2231, i16 0, i16 128
  %2233 = or i16 %2232, %2230
  %2234 = icmp ugt i64 %1853, 8
  br label %2248

; <label>:2235:                                   ; preds = %2223
  %2236 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %2237 = load i64, i64* %2236, align 8, !tbaa !870
  %2238 = and i64 %2237, 36028797018963968
  %2239 = icmp ne i64 %2238, 0
  %2240 = select i1 %2239, i16 128, i16 0
  %2241 = or i16 %2240, %2224
  br label %2242

; <label>:2242:                                   ; preds = %2235, %2228
  %2243 = phi i16 [ %2224, %2228 ], [ %2241, %2235 ]
  %2244 = icmp ugt i64 %1857, 8
  %2245 = icmp ugt i64 %1853, 8
  %2246 = and i1 %2245, %2244
  br i1 %2246, label %2254, label %2247

; <label>:2247:                                   ; preds = %2242
  br i1 %2244, label %2260, label %2248

; <label>:2248:                                   ; preds = %2247, %2229
  %2249 = phi i16 [ %2233, %2229 ], [ %2243, %2247 ]
  %2250 = phi i1 [ %2234, %2229 ], [ %2245, %2247 ]
  %2251 = select i1 %2250, i16 0, i16 256
  %2252 = or i16 %2251, %2249
  %2253 = icmp ugt i64 %1853, 9
  br label %2266

; <label>:2254:                                   ; preds = %2242
  %2255 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2256 = load i64, i64* %2255, align 8, !tbaa !870
  %2257 = trunc i64 %2256 to i16
  %2258 = and i16 %2257, 256
  %2259 = or i16 %2258, %2243
  br label %2260

; <label>:2260:                                   ; preds = %2254, %2247
  %2261 = phi i16 [ %2243, %2247 ], [ %2259, %2254 ]
  %2262 = icmp ugt i64 %1857, 9
  %2263 = icmp ugt i64 %1853, 9
  %2264 = and i1 %2263, %2262
  br i1 %2264, label %2272, label %2265

; <label>:2265:                                   ; preds = %2260
  br i1 %2262, label %2279, label %2266

; <label>:2266:                                   ; preds = %2265, %2248
  %2267 = phi i16 [ %2252, %2248 ], [ %2261, %2265 ]
  %2268 = phi i1 [ %2253, %2248 ], [ %2263, %2265 ]
  %2269 = select i1 %2268, i16 0, i16 512
  %2270 = or i16 %2267, %2269
  %2271 = icmp ugt i64 %1853, 10
  br label %2285

; <label>:2272:                                   ; preds = %2260
  %2273 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2274 = load i64, i64* %2273, align 8, !tbaa !870
  %2275 = and i64 %2274, 33554432
  %2276 = icmp ne i64 %2275, 0
  %2277 = select i1 %2276, i16 512, i16 0
  %2278 = or i16 %2277, %2261
  br label %2279

; <label>:2279:                                   ; preds = %2272, %2265
  %2280 = phi i16 [ %2261, %2265 ], [ %2278, %2272 ]
  %2281 = icmp ugt i64 %1857, 10
  %2282 = icmp ugt i64 %1853, 10
  %2283 = and i1 %2282, %2281
  br i1 %2283, label %2291, label %2284

; <label>:2284:                                   ; preds = %2279
  br i1 %2281, label %2298, label %2285

; <label>:2285:                                   ; preds = %2284, %2266
  %2286 = phi i16 [ %2270, %2266 ], [ %2280, %2284 ]
  %2287 = phi i1 [ %2271, %2266 ], [ %2282, %2284 ]
  %2288 = select i1 %2287, i16 0, i16 1024
  %2289 = or i16 %2288, %2286
  %2290 = icmp ugt i64 %1853, 11
  br label %2304

; <label>:2291:                                   ; preds = %2279
  %2292 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2293 = load i64, i64* %2292, align 8, !tbaa !870
  %2294 = and i64 %2293, 4398046511104
  %2295 = icmp ne i64 %2294, 0
  %2296 = select i1 %2295, i16 1024, i16 0
  %2297 = or i16 %2296, %2280
  br label %2298

; <label>:2298:                                   ; preds = %2291, %2284
  %2299 = phi i16 [ %2280, %2284 ], [ %2297, %2291 ]
  %2300 = icmp ugt i64 %1857, 11
  %2301 = icmp ugt i64 %1853, 11
  %2302 = and i1 %2301, %2300
  br i1 %2302, label %2310, label %2303

; <label>:2303:                                   ; preds = %2298
  br i1 %2300, label %2317, label %2304

; <label>:2304:                                   ; preds = %2303, %2285
  %2305 = phi i16 [ %2289, %2285 ], [ %2299, %2303 ]
  %2306 = phi i1 [ %2290, %2285 ], [ %2301, %2303 ]
  %2307 = select i1 %2306, i16 0, i16 2048
  %2308 = or i16 %2307, %2305
  %2309 = icmp ugt i64 %1853, 12
  br label %2323

; <label>:2310:                                   ; preds = %2298
  %2311 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %2312 = load i64, i64* %2311, align 8, !tbaa !870
  %2313 = and i64 %2312, 576460752303423488
  %2314 = icmp ne i64 %2313, 0
  %2315 = select i1 %2314, i16 2048, i16 0
  %2316 = or i16 %2315, %2299
  br label %2317

; <label>:2317:                                   ; preds = %2310, %2303
  %2318 = phi i16 [ %2299, %2303 ], [ %2316, %2310 ]
  %2319 = icmp ugt i64 %1857, 12
  %2320 = icmp ugt i64 %1853, 12
  %2321 = and i1 %2320, %2319
  br i1 %2321, label %2329, label %2322

; <label>:2322:                                   ; preds = %2317
  br i1 %2319, label %2335, label %2323

; <label>:2323:                                   ; preds = %2322, %2304
  %2324 = phi i16 [ %2308, %2304 ], [ %2318, %2322 ]
  %2325 = phi i1 [ %2309, %2304 ], [ %2320, %2322 ]
  %2326 = select i1 %2325, i16 0, i16 4096
  %2327 = or i16 %2326, %2324
  %2328 = icmp ugt i64 %1853, 13
  br label %2341

; <label>:2329:                                   ; preds = %2317
  %2330 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2331 = load i64, i64* %2330, align 8, !tbaa !870
  %2332 = trunc i64 %2331 to i16
  %2333 = and i16 %2332, 4096
  %2334 = or i16 %2333, %2318
  br label %2335

; <label>:2335:                                   ; preds = %2329, %2322
  %2336 = phi i16 [ %2318, %2322 ], [ %2334, %2329 ]
  %2337 = icmp ugt i64 %1857, 13
  %2338 = icmp ugt i64 %1853, 13
  %2339 = and i1 %2338, %2337
  br i1 %2339, label %2347, label %2340

; <label>:2340:                                   ; preds = %2335
  br i1 %2337, label %2354, label %2341

; <label>:2341:                                   ; preds = %2340, %2323
  %2342 = phi i16 [ %2327, %2323 ], [ %2336, %2340 ]
  %2343 = phi i1 [ %2328, %2323 ], [ %2338, %2340 ]
  %2344 = select i1 %2343, i16 0, i16 8192
  %2345 = or i16 %2344, %2342
  %2346 = icmp ugt i64 %1853, 14
  br label %2360

; <label>:2347:                                   ; preds = %2335
  %2348 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2349 = load i64, i64* %2348, align 8, !tbaa !870
  %2350 = and i64 %2349, 536870912
  %2351 = icmp ne i64 %2350, 0
  %2352 = select i1 %2351, i16 8192, i16 0
  %2353 = or i16 %2352, %2336
  br label %2354

; <label>:2354:                                   ; preds = %2347, %2340
  %2355 = phi i16 [ %2336, %2340 ], [ %2353, %2347 ]
  %2356 = icmp ugt i64 %1857, 14
  %2357 = icmp ugt i64 %1853, 14
  %2358 = and i1 %2357, %2356
  br i1 %2358, label %2366, label %2359

; <label>:2359:                                   ; preds = %2354
  br i1 %2356, label %2373, label %2360

; <label>:2360:                                   ; preds = %2359, %2341
  %2361 = phi i16 [ %2345, %2341 ], [ %2355, %2359 ]
  %2362 = phi i1 [ %2346, %2341 ], [ %2357, %2359 ]
  %2363 = select i1 %2362, i16 0, i16 16384
  %2364 = or i16 %2363, %2361
  %2365 = icmp ugt i64 %1853, 15
  br label %2379

; <label>:2366:                                   ; preds = %2354
  %2367 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2368 = load i64, i64* %2367, align 8, !tbaa !870
  %2369 = and i64 %2368, 70368744177664
  %2370 = icmp ne i64 %2369, 0
  %2371 = select i1 %2370, i16 16384, i16 0
  %2372 = or i16 %2371, %2355
  br label %2373

; <label>:2373:                                   ; preds = %2366, %2359
  %2374 = phi i16 [ %2355, %2359 ], [ %2372, %2366 ]
  %2375 = icmp ugt i64 %1857, 15
  %2376 = icmp ugt i64 %1853, 15
  %2377 = and i1 %2376, %2375
  br i1 %2377, label %2384, label %2378

; <label>:2378:                                   ; preds = %2373
  br i1 %2375, label %2434, label %2379

; <label>:2379:                                   ; preds = %2378, %2360
  %2380 = phi i16 [ %2364, %2360 ], [ %2374, %2378 ]
  %2381 = phi i1 [ %2365, %2360 ], [ %2376, %2378 ]
  %2382 = select i1 %2381, i16 0, i16 -32768
  %2383 = or i16 %2382, %2380
  br label %2434

; <label>:2384:                                   ; preds = %2373
  %2385 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %2386 = load i64, i64* %2385, align 8, !tbaa !870
  %2387 = icmp slt i64 %2386, 0
  %2388 = select i1 %2387, i16 -32768, i16 0
  %2389 = or i16 %2388, %2374
  br label %2434

; <label>:2390:                                   ; preds = %1856
  %2391 = icmp ugt i64 %1857, %1853
  br i1 %2391, label %2434, label %2392

; <label>:2392:                                   ; preds = %2390
  %2393 = icmp eq i64 %1857, 0
  br i1 %2393, label %2434, label %2394

; <label>:2394:                                   ; preds = %2392
  br label %2395

; <label>:2395:                                   ; preds = %2425, %2394
  %2396 = phi i16 [ %2426, %2425 ], [ -1, %2394 ]
  %2397 = phi i64 [ %2427, %2425 ], [ 0, %2394 ]
  %2398 = phi i16 [ %2428, %2425 ], [ 1, %2394 ]
  %2399 = sub nuw nsw i64 16, %2397
  br label %2400

; <label>:2400:                                   ; preds = %2414, %2395
  %2401 = phi i64 [ %2416, %2414 ], [ %2397, %2395 ]
  %2402 = phi i64 [ %2415, %2414 ], [ 0, %2395 ]
  %2403 = icmp ult i64 %2401, %1853
  br i1 %2403, label %2404, label %2422

; <label>:2404:                                   ; preds = %2400
  %2405 = shl i64 %2402, 4
  %2406 = add nuw nsw i64 %2405, %2401
  %2407 = lshr i64 %2406, 6
  %2408 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %2407
  %2409 = load i64, i64* %2408, align 8, !tbaa !870
  %2410 = and i64 %2406, 63
  %2411 = shl i64 1, %2410
  %2412 = and i64 %2409, %2411
  %2413 = icmp eq i64 %2412, 0
  br i1 %2413, label %2422, label %2414

; <label>:2414:                                   ; preds = %2404
  %2415 = add nuw nsw i64 %2402, 1
  %2416 = add nuw nsw i64 %2401, 1
  %2417 = icmp ult i64 %2415, %2399
  %2418 = icmp ult i64 %2416, 16
  %2419 = and i1 %2418, %2417
  %2420 = icmp ult i64 %2415, %1857
  %2421 = and i1 %2420, %2419
  br i1 %2421, label %2400, label %2424, !llvm.loop !890

; <label>:2422:                                   ; preds = %2404, %2400
  %2423 = xor i16 %2398, %2396
  br label %2425

; <label>:2424:                                   ; preds = %2414
  br label %2425

; <label>:2425:                                   ; preds = %2424, %2422
  %2426 = phi i16 [ %2423, %2422 ], [ %2396, %2424 ]
  %2427 = add nuw nsw i64 %2397, 1
  %2428 = shl i16 %2398, 1
  %2429 = icmp eq i64 %2427, 16
  br i1 %2429, label %2433, label %2395

; <label>:2430:                                   ; preds = %1856
  unreachable

; <label>:2431:                                   ; preds = %2049
  br label %2434

; <label>:2432:                                   ; preds = %2091
  br label %2434

; <label>:2433:                                   ; preds = %2425
  br label %2434

; <label>:2434:                                   ; preds = %2433, %2432, %2431, %2392, %2390, %2384, %2379, %2378, %2056, %2054, %2023
  %2435 = phi i64 [ %1857, %2023 ], [ %1857, %2054 ], [ 1, %2056 ], [ %1857, %2378 ], [ %1857, %2384 ], [ %1857, %2379 ], [ %1857, %2390 ], [ 0, %2392 ], [ %1857, %2431 ], [ %1857, %2432 ], [ %1857, %2433 ]
  %2436 = phi i16 [ 0, %2023 ], [ 0, %2054 ], [ 0, %2056 ], [ %2374, %2378 ], [ %2389, %2384 ], [ %2383, %2379 ], [ 0, %2390 ], [ -1, %2392 ], [ %2050, %2431 ], [ %2087, %2432 ], [ %2426, %2433 ]
  %2437 = trunc i8 %1858 to i2
  switch i2 %2437, label %2445 [
    i2 0, label %2446
    i2 1, label %2440
    i2 -2, label %2446
    i2 -1, label %2438
  ]

; <label>:2438:                                   ; preds = %2434
  %2439 = icmp eq i64 %1853, 0
  br i1 %2439, label %2446, label %2442

; <label>:2440:                                   ; preds = %2434
  %2441 = xor i16 %2436, -1
  br label %2446

; <label>:2442:                                   ; preds = %2438
  %2443 = xor i16 %2436, 1
  %2444 = icmp eq i64 %1853, 1
  br i1 %2444, label %2446, label %2464

; <label>:2445:                                   ; preds = %2434
  unreachable

; <label>:2446:                                   ; preds = %2503, %2500, %2497, %2494, %2491, %2488, %2485, %2482, %2479, %2476, %2473, %2470, %2467, %2464, %2442, %2440, %2438, %2434, %2434
  %2447 = phi i16 [ %2441, %2440 ], [ %2436, %2434 ], [ %2436, %2434 ], [ %2501, %2500 ], [ %2498, %2497 ], [ %2495, %2494 ], [ %2492, %2491 ], [ %2489, %2488 ], [ %2486, %2485 ], [ %2483, %2482 ], [ %2480, %2479 ], [ %2477, %2476 ], [ %2474, %2473 ], [ %2471, %2470 ], [ %2468, %2467 ], [ %2465, %2464 ], [ %2443, %2442 ], [ %2436, %2438 ], [ %2506, %2503 ]
  %2448 = and i8 %12, 64
  %2449 = icmp eq i8 %2448, 0
  %2450 = icmp eq i16 %2447, 0
  br i1 %2449, label %2451, label %2456

; <label>:2451:                                   ; preds = %2446
  br i1 %2450, label %2719, label %2452

; <label>:2452:                                   ; preds = %2451
  %2453 = zext i16 %2447 to i32
  %2454 = tail call i32 @llvm.cttz.i32(i32 %2453, i1 true) #23
  %2455 = zext i32 %2454 to i64
  br label %2719

; <label>:2456:                                   ; preds = %2446
  br i1 %2450, label %2719, label %2457

; <label>:2457:                                   ; preds = %2456
  %2458 = zext i16 %2447 to i32
  %2459 = tail call i32 @llvm.ctlz.i32(i32 %2458, i1 true) #23
  %2460 = add nuw nsw i32 %2459, 65520
  %2461 = and i32 %2460, 65535
  %2462 = zext i32 %2461 to i64
  %2463 = sub nsw i64 15, %2462
  br label %2719

; <label>:2464:                                   ; preds = %2442
  %2465 = xor i16 %2436, 3
  %2466 = icmp ugt i64 %1853, 2
  br i1 %2466, label %2467, label %2446

; <label>:2467:                                   ; preds = %2464
  %2468 = xor i16 %2436, 7
  %2469 = icmp eq i64 %1853, 3
  br i1 %2469, label %2446, label %2470

; <label>:2470:                                   ; preds = %2467
  %2471 = xor i16 %2436, 15
  %2472 = icmp ugt i64 %1853, 4
  br i1 %2472, label %2473, label %2446

; <label>:2473:                                   ; preds = %2470
  %2474 = xor i16 %2436, 31
  %2475 = icmp eq i64 %1853, 5
  br i1 %2475, label %2446, label %2476

; <label>:2476:                                   ; preds = %2473
  %2477 = xor i16 %2436, 63
  %2478 = icmp ugt i64 %1853, 6
  br i1 %2478, label %2479, label %2446

; <label>:2479:                                   ; preds = %2476
  %2480 = xor i16 %2436, 127
  %2481 = icmp eq i64 %1853, 7
  br i1 %2481, label %2446, label %2482

; <label>:2482:                                   ; preds = %2479
  %2483 = xor i16 %2436, 255
  %2484 = icmp ugt i64 %1853, 8
  br i1 %2484, label %2485, label %2446

; <label>:2485:                                   ; preds = %2482
  %2486 = xor i16 %2436, 511
  %2487 = icmp eq i64 %1853, 9
  br i1 %2487, label %2446, label %2488

; <label>:2488:                                   ; preds = %2485
  %2489 = xor i16 %2436, 1023
  %2490 = icmp ugt i64 %1853, 10
  br i1 %2490, label %2491, label %2446

; <label>:2491:                                   ; preds = %2488
  %2492 = xor i16 %2436, 2047
  %2493 = icmp eq i64 %1853, 11
  br i1 %2493, label %2446, label %2494

; <label>:2494:                                   ; preds = %2491
  %2495 = xor i16 %2436, 4095
  %2496 = icmp ugt i64 %1853, 12
  br i1 %2496, label %2497, label %2446

; <label>:2497:                                   ; preds = %2494
  %2498 = xor i16 %2436, 8191
  %2499 = icmp eq i64 %1853, 13
  br i1 %2499, label %2446, label %2500

; <label>:2500:                                   ; preds = %2497
  %2501 = xor i16 %2436, 16383
  %2502 = icmp ugt i64 %1853, 14
  br i1 %2502, label %2503, label %2446

; <label>:2503:                                   ; preds = %2500
  %2504 = icmp ne i64 %1853, 15
  %2505 = select i1 %2504, i16 -1, i16 32767
  %2506 = xor i16 %2436, %2505
  br label %2446

; <label>:2507:                                   ; preds = %1884, %1881
  %2508 = phi i64 [ %1887, %1884 ], [ %1883, %1881 ]
  %2509 = icmp sgt i8 %1677, %1862
  %2510 = or i64 %1879, 1
  %2511 = shl i64 1, %2510
  %2512 = xor i64 %2511, -1
  %2513 = and i64 %2508, %2512
  %2514 = or i64 %2508, %2511
  %2515 = select i1 %2509, i64 %2513, i64 %2514
  %2516 = icmp sgt i8 %1679, %1862
  %2517 = or i64 %1879, 2
  %2518 = shl i64 1, %2517
  %2519 = xor i64 %2518, -1
  %2520 = and i64 %2515, %2519
  %2521 = or i64 %2515, %2518
  %2522 = select i1 %2516, i64 %2520, i64 %2521
  %2523 = icmp sgt i8 %1681, %1862
  %2524 = or i64 %1879, 3
  %2525 = shl i64 1, %2524
  %2526 = xor i64 %2525, -1
  %2527 = and i64 %2522, %2526
  %2528 = or i64 %2522, %2525
  %2529 = select i1 %2523, i64 %2527, i64 %2528
  %2530 = icmp sgt i8 %1683, %1862
  %2531 = or i64 %1879, 4
  %2532 = shl i64 1, %2531
  %2533 = xor i64 %2532, -1
  %2534 = and i64 %2529, %2533
  %2535 = or i64 %2529, %2532
  %2536 = select i1 %2530, i64 %2534, i64 %2535
  %2537 = icmp sgt i8 %1685, %1862
  %2538 = or i64 %1879, 5
  %2539 = shl i64 1, %2538
  %2540 = xor i64 %2539, -1
  %2541 = and i64 %2536, %2540
  %2542 = or i64 %2536, %2539
  %2543 = select i1 %2537, i64 %2541, i64 %2542
  %2544 = icmp sgt i8 %1687, %1862
  %2545 = or i64 %1879, 6
  %2546 = shl i64 1, %2545
  %2547 = xor i64 %2546, -1
  %2548 = and i64 %2543, %2547
  %2549 = or i64 %2543, %2546
  %2550 = select i1 %2544, i64 %2548, i64 %2549
  %2551 = icmp sgt i8 %1689, %1862
  %2552 = or i64 %1879, 7
  %2553 = shl i64 1, %2552
  %2554 = xor i64 %2553, -1
  %2555 = and i64 %2550, %2554
  %2556 = or i64 %2550, %2553
  %2557 = select i1 %2551, i64 %2555, i64 %2556
  %2558 = icmp sgt i8 %1766, %1862
  %2559 = or i64 %1879, 8
  %2560 = shl i64 1, %2559
  %2561 = xor i64 %2560, -1
  %2562 = and i64 %2557, %2561
  %2563 = or i64 %2557, %2560
  %2564 = select i1 %2558, i64 %2562, i64 %2563
  %2565 = icmp sgt i8 %1778, %1862
  %2566 = or i64 %1879, 9
  %2567 = shl i64 1, %2566
  %2568 = xor i64 %2567, -1
  %2569 = and i64 %2564, %2568
  %2570 = or i64 %2564, %2567
  %2571 = select i1 %2565, i64 %2569, i64 %2570
  %2572 = icmp sgt i8 %1790, %1862
  %2573 = or i64 %1879, 10
  %2574 = shl i64 1, %2573
  %2575 = xor i64 %2574, -1
  %2576 = and i64 %2571, %2575
  %2577 = or i64 %2571, %2574
  %2578 = select i1 %2572, i64 %2576, i64 %2577
  %2579 = icmp sgt i8 %1802, %1862
  %2580 = or i64 %1879, 11
  %2581 = shl i64 1, %2580
  %2582 = xor i64 %2581, -1
  %2583 = and i64 %2578, %2582
  %2584 = or i64 %2578, %2581
  %2585 = select i1 %2579, i64 %2583, i64 %2584
  %2586 = icmp sgt i8 %1814, %1862
  %2587 = or i64 %1879, 12
  %2588 = shl i64 1, %2587
  %2589 = xor i64 %2588, -1
  %2590 = and i64 %2585, %2589
  %2591 = or i64 %2585, %2588
  %2592 = select i1 %2586, i64 %2590, i64 %2591
  %2593 = icmp sgt i8 %1826, %1862
  %2594 = or i64 %1879, 13
  %2595 = shl i64 1, %2594
  %2596 = xor i64 %2595, -1
  %2597 = and i64 %2592, %2596
  %2598 = or i64 %2592, %2595
  %2599 = select i1 %2593, i64 %2597, i64 %2598
  %2600 = icmp sgt i8 %1838, %1862
  %2601 = or i64 %1879, 14
  %2602 = shl i64 1, %2601
  %2603 = xor i64 %2602, -1
  %2604 = and i64 %2599, %2603
  %2605 = or i64 %2599, %2602
  %2606 = select i1 %2600, i64 %2604, i64 %2605
  store i64 %2606, i64* %1878, align 8, !tbaa !870
  %2607 = icmp sgt i8 %1849, %1862
  %2608 = or i64 %1879, 15
  %2609 = shl i64 1, %2608
  %2610 = xor i64 %2609, -1
  %2611 = and i64 %2606, %2610
  %2612 = or i64 %2606, %2609
  br label %1902

; <label>:2613:                                   ; preds = %1898, %1895
  %2614 = phi i64 [ %1901, %1898 ], [ %1897, %1895 ]
  %2615 = icmp slt i8 %1677, %1862
  %2616 = or i64 %1893, 1
  %2617 = shl i64 1, %2616
  %2618 = xor i64 %2617, -1
  %2619 = and i64 %2614, %2618
  %2620 = or i64 %2614, %2617
  %2621 = select i1 %2615, i64 %2619, i64 %2620
  %2622 = icmp slt i8 %1679, %1862
  %2623 = or i64 %1893, 2
  %2624 = shl i64 1, %2623
  %2625 = xor i64 %2624, -1
  %2626 = and i64 %2621, %2625
  %2627 = or i64 %2621, %2624
  %2628 = select i1 %2622, i64 %2626, i64 %2627
  %2629 = icmp slt i8 %1681, %1862
  %2630 = or i64 %1893, 3
  %2631 = shl i64 1, %2630
  %2632 = xor i64 %2631, -1
  %2633 = and i64 %2628, %2632
  %2634 = or i64 %2628, %2631
  %2635 = select i1 %2629, i64 %2633, i64 %2634
  %2636 = icmp slt i8 %1683, %1862
  %2637 = or i64 %1893, 4
  %2638 = shl i64 1, %2637
  %2639 = xor i64 %2638, -1
  %2640 = and i64 %2635, %2639
  %2641 = or i64 %2635, %2638
  %2642 = select i1 %2636, i64 %2640, i64 %2641
  %2643 = icmp slt i8 %1685, %1862
  %2644 = or i64 %1893, 5
  %2645 = shl i64 1, %2644
  %2646 = xor i64 %2645, -1
  %2647 = and i64 %2642, %2646
  %2648 = or i64 %2642, %2645
  %2649 = select i1 %2643, i64 %2647, i64 %2648
  %2650 = icmp slt i8 %1687, %1862
  %2651 = or i64 %1893, 6
  %2652 = shl i64 1, %2651
  %2653 = xor i64 %2652, -1
  %2654 = and i64 %2649, %2653
  %2655 = or i64 %2649, %2652
  %2656 = select i1 %2650, i64 %2654, i64 %2655
  %2657 = icmp slt i8 %1689, %1862
  %2658 = or i64 %1893, 7
  %2659 = shl i64 1, %2658
  %2660 = xor i64 %2659, -1
  %2661 = and i64 %2656, %2660
  %2662 = or i64 %2656, %2659
  %2663 = select i1 %2657, i64 %2661, i64 %2662
  %2664 = icmp slt i8 %1766, %1862
  %2665 = or i64 %1893, 8
  %2666 = shl i64 1, %2665
  %2667 = xor i64 %2666, -1
  %2668 = and i64 %2663, %2667
  %2669 = or i64 %2663, %2666
  %2670 = select i1 %2664, i64 %2668, i64 %2669
  %2671 = icmp slt i8 %1778, %1862
  %2672 = or i64 %1893, 9
  %2673 = shl i64 1, %2672
  %2674 = xor i64 %2673, -1
  %2675 = and i64 %2670, %2674
  %2676 = or i64 %2670, %2673
  %2677 = select i1 %2671, i64 %2675, i64 %2676
  %2678 = icmp slt i8 %1790, %1862
  %2679 = or i64 %1893, 10
  %2680 = shl i64 1, %2679
  %2681 = xor i64 %2680, -1
  %2682 = and i64 %2677, %2681
  %2683 = or i64 %2677, %2680
  %2684 = select i1 %2678, i64 %2682, i64 %2683
  %2685 = icmp slt i8 %1802, %1862
  %2686 = or i64 %1893, 11
  %2687 = shl i64 1, %2686
  %2688 = xor i64 %2687, -1
  %2689 = and i64 %2684, %2688
  %2690 = or i64 %2684, %2687
  %2691 = select i1 %2685, i64 %2689, i64 %2690
  %2692 = icmp slt i8 %1814, %1862
  %2693 = or i64 %1893, 12
  %2694 = shl i64 1, %2693
  %2695 = xor i64 %2694, -1
  %2696 = and i64 %2691, %2695
  %2697 = or i64 %2691, %2694
  %2698 = select i1 %2692, i64 %2696, i64 %2697
  %2699 = icmp slt i8 %1826, %1862
  %2700 = or i64 %1893, 13
  %2701 = shl i64 1, %2700
  %2702 = xor i64 %2701, -1
  %2703 = and i64 %2698, %2702
  %2704 = or i64 %2698, %2701
  %2705 = select i1 %2699, i64 %2703, i64 %2704
  %2706 = icmp slt i8 %1838, %1862
  %2707 = or i64 %1893, 14
  %2708 = shl i64 1, %2707
  %2709 = xor i64 %2708, -1
  %2710 = and i64 %2705, %2709
  %2711 = or i64 %2705, %2708
  %2712 = select i1 %2706, i64 %2710, i64 %2711
  store i64 %2712, i64* %1892, align 8, !tbaa !870
  %2713 = icmp slt i8 %1849, %1862
  %2714 = or i64 %1893, 15
  %2715 = shl i64 1, %2714
  %2716 = xor i64 %2715, -1
  %2717 = and i64 %2712, %2716
  %2718 = or i64 %2712, %2715
  br label %1902

; <label>:2719:                                   ; preds = %2457, %2456, %2452, %2451
  %2720 = phi i64 [ %2463, %2457 ], [ 16, %2456 ], [ %2455, %2452 ], [ 16, %2451 ]
  %2721 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %2722 = and i64 %2720, 65535
  store i64 %2722, i64* %2721, align 8, !tbaa !870
  %2723 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %2724 = icmp ne i16 %2447, 0
  %2725 = zext i1 %2724 to i8
  store i8 %2725, i8* %2723, align 1, !tbaa !868
  %2726 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %2727 = icmp ult i64 %1853, 16
  %2728 = zext i1 %2727 to i8
  store i8 %2728, i8* %2726, align 1, !tbaa !868
  %2729 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %2730 = icmp ult i64 %2435, 16
  %2731 = zext i1 %2730 to i8
  store i8 %2731, i8* %2729, align 1, !tbaa !868
  %2732 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %2733 = trunc i16 %2447 to i8
  %2734 = and i8 %2733, 1
  store i8 %2734, i8* %2732, align 1, !tbaa !868
  %2735 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %2735, align 1, !tbaa !868
  %2736 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %2736, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 288, i8* nonnull %1690) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1666) #23
  br label %3313

; <label>:2737:                                   ; preds = %5
  %2738 = bitcast { i64, i64 }* %11 to %struct.uint16v8_t*
  %2739 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2739) #23
  %2740 = bitcast i8* %2 to i64*
  %2741 = load i64, i64* %2740, align 1
  %2742 = getelementptr inbounds i8, i8* %2, i64 8
  %2743 = bitcast i8* %2742 to i64*
  %2744 = load i64, i64* %2743, align 1
  %2745 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 0
  store i64 %2741, i64* %2745, align 8
  %2746 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  store i64 %2744, i64* %2746, align 8
  %2747 = bitcast i8* %3 to i64*
  %2748 = load i64, i64* %2747, align 1
  %2749 = getelementptr inbounds i8, i8* %3, i64 8
  %2750 = bitcast i8* %2749 to i64*
  %2751 = load i64, i64* %2750, align 1
  %2752 = trunc i64 %2748 to i16
  %2753 = lshr i64 %2748, 16
  %2754 = trunc i64 %2753 to i16
  %2755 = lshr i64 %2748, 32
  %2756 = trunc i64 %2755 to i16
  %2757 = lshr i64 %2748, 48
  %2758 = trunc i64 %2757 to i16
  %2759 = lshr i8 %12, 2
  %2760 = trunc i64 %2741 to i16
  %2761 = icmp eq i16 %2760, 0
  %2762 = select i1 %2761, i64 0, i64 8
  %2763 = icmp eq i16 %2752, 0
  %2764 = select i1 %2763, i64 0, i64 8
  %2765 = and i64 %2741, 4294901760
  %2766 = icmp eq i64 %2765, 0
  %2767 = xor i1 %2761, true
  %2768 = and i1 %2766, %2767
  %2769 = select i1 %2768, i64 1, i64 %2762
  %2770 = icmp eq i16 %2754, 0
  %2771 = xor i1 %2763, true
  %2772 = and i1 %2770, %2771
  %2773 = select i1 %2772, i64 1, i64 %2764
  %2774 = and i64 %2741, 281470681743360
  %2775 = icmp eq i64 %2774, 0
  %2776 = icmp ugt i64 %2769, 2
  %2777 = and i1 %2775, %2776
  %2778 = select i1 %2777, i64 2, i64 %2769
  %2779 = icmp eq i16 %2756, 0
  %2780 = icmp ugt i64 %2773, 2
  %2781 = and i1 %2779, %2780
  %2782 = select i1 %2781, i64 2, i64 %2773
  %2783 = icmp ult i64 %2741, 281474976710656
  %2784 = icmp ugt i64 %2778, 3
  %2785 = and i1 %2783, %2784
  %2786 = select i1 %2785, i64 3, i64 %2778
  %2787 = icmp eq i16 %2758, 0
  %2788 = icmp ugt i64 %2782, 3
  %2789 = and i1 %2787, %2788
  %2790 = select i1 %2789, i64 3, i64 %2782
  %2791 = trunc i64 %2744 to i16
  %2792 = icmp eq i16 %2791, 0
  %2793 = icmp ugt i64 %2786, 4
  %2794 = and i1 %2792, %2793
  %2795 = select i1 %2794, i64 4, i64 %2786
  %2796 = trunc i64 %2751 to i16
  %2797 = icmp eq i16 %2796, 0
  %2798 = icmp ugt i64 %2790, 4
  %2799 = and i1 %2797, %2798
  %2800 = select i1 %2799, i64 4, i64 %2790
  %2801 = and i64 %2744, 4294901760
  %2802 = icmp eq i64 %2801, 0
  %2803 = icmp ugt i64 %2795, 5
  %2804 = and i1 %2802, %2803
  %2805 = select i1 %2804, i64 5, i64 %2795
  %2806 = lshr i64 %2751, 16
  %2807 = trunc i64 %2806 to i16
  %2808 = icmp eq i16 %2807, 0
  %2809 = icmp ugt i64 %2800, 5
  %2810 = and i1 %2808, %2809
  %2811 = select i1 %2810, i64 5, i64 %2800
  %2812 = and i64 %2744, 281470681743360
  %2813 = icmp eq i64 %2812, 0
  %2814 = icmp ugt i64 %2805, 6
  %2815 = and i1 %2813, %2814
  %2816 = select i1 %2815, i64 6, i64 %2805
  %2817 = lshr i64 %2751, 32
  %2818 = trunc i64 %2817 to i16
  %2819 = icmp eq i16 %2818, 0
  %2820 = icmp ugt i64 %2811, 6
  %2821 = and i1 %2819, %2820
  %2822 = select i1 %2821, i64 6, i64 %2811
  %2823 = icmp ult i64 %2744, 281474976710656
  %2824 = icmp ugt i64 %2816, 7
  %2825 = and i1 %2823, %2824
  %2826 = select i1 %2825, i64 7, i64 %2816
  %2827 = lshr i64 %2751, 48
  %2828 = trunc i64 %2827 to i16
  %2829 = icmp eq i16 %2828, 0
  %2830 = icmp ugt i64 %2822, 7
  %2831 = and i1 %2829, %2830
  %2832 = select i1 %2831, i64 7, i64 %2822
  %2833 = lshr i8 %12, 4
  %2834 = trunc i8 %2759 to i2
  %2835 = icmp eq i2 %2834, 1
  br i1 %2835, label %2837, label %2836

; <label>:2836:                                   ; preds = %2737
  br label %2969

; <label>:2837:                                   ; preds = %2737
  br label %2838

; <label>:2838:                                   ; preds = %2962, %2837
  %2839 = phi i16 [ %2964, %2962 ], [ %2760, %2837 ]
  %2840 = phi i64 [ %2960, %2962 ], [ 0, %2837 ]
  %2841 = phi i64 [ %2959, %2962 ], [ 0, %2837 ]
  %2842 = and i64 %2840, 1
  %2843 = icmp eq i64 %2842, 0
  %2844 = shl i64 %2840, 3
  br i1 %2843, label %2900, label %2845

; <label>:2845:                                   ; preds = %2838
  %2846 = icmp sgt i16 %2752, %2839
  %2847 = shl i64 1, %2844
  %2848 = xor i64 %2847, -1
  %2849 = and i64 %2841, %2848
  %2850 = or i64 %2847, %2841
  %2851 = select i1 %2846, i64 %2849, i64 %2850
  %2852 = icmp sgt i16 %2754, %2839
  %2853 = or i64 %2844, 1
  %2854 = shl i64 1, %2853
  %2855 = xor i64 %2854, -1
  %2856 = and i64 %2851, %2855
  %2857 = or i64 %2851, %2854
  %2858 = select i1 %2852, i64 %2856, i64 %2857
  %2859 = icmp sgt i16 %2756, %2839
  %2860 = or i64 %2844, 2
  %2861 = shl i64 1, %2860
  %2862 = xor i64 %2861, -1
  %2863 = and i64 %2858, %2862
  %2864 = or i64 %2858, %2861
  %2865 = select i1 %2859, i64 %2863, i64 %2864
  %2866 = icmp sgt i16 %2758, %2839
  %2867 = or i64 %2844, 3
  %2868 = shl i64 1, %2867
  %2869 = xor i64 %2868, -1
  %2870 = and i64 %2865, %2869
  %2871 = or i64 %2865, %2868
  %2872 = select i1 %2866, i64 %2870, i64 %2871
  %2873 = icmp sgt i16 %2796, %2839
  %2874 = or i64 %2844, 4
  %2875 = shl i64 1, %2874
  %2876 = xor i64 %2875, -1
  %2877 = and i64 %2872, %2876
  %2878 = or i64 %2872, %2875
  %2879 = select i1 %2873, i64 %2877, i64 %2878
  %2880 = icmp sgt i16 %2807, %2839
  %2881 = or i64 %2844, 5
  %2882 = shl i64 1, %2881
  %2883 = xor i64 %2882, -1
  %2884 = and i64 %2879, %2883
  %2885 = or i64 %2879, %2882
  %2886 = select i1 %2880, i64 %2884, i64 %2885
  %2887 = icmp sgt i16 %2818, %2839
  %2888 = or i64 %2844, 6
  %2889 = shl i64 1, %2888
  %2890 = xor i64 %2889, -1
  %2891 = and i64 %2886, %2890
  %2892 = or i64 %2886, %2889
  %2893 = select i1 %2887, i64 %2891, i64 %2892
  %2894 = icmp sgt i16 %2828, %2839
  %2895 = or i64 %2844, 7
  %2896 = shl i64 1, %2895
  %2897 = xor i64 %2896, -1
  %2898 = and i64 %2893, %2897
  %2899 = or i64 %2893, %2896
  br label %2955

; <label>:2900:                                   ; preds = %2838
  %2901 = icmp slt i16 %2752, %2839
  %2902 = shl i64 1, %2844
  %2903 = xor i64 %2902, -1
  %2904 = and i64 %2841, %2903
  %2905 = or i64 %2902, %2841
  %2906 = select i1 %2901, i64 %2904, i64 %2905
  %2907 = icmp slt i16 %2754, %2839
  %2908 = or i64 %2844, 1
  %2909 = shl i64 1, %2908
  %2910 = xor i64 %2909, -1
  %2911 = and i64 %2906, %2910
  %2912 = or i64 %2906, %2909
  %2913 = select i1 %2907, i64 %2911, i64 %2912
  %2914 = icmp slt i16 %2756, %2839
  %2915 = or i64 %2844, 2
  %2916 = shl i64 1, %2915
  %2917 = xor i64 %2916, -1
  %2918 = and i64 %2913, %2917
  %2919 = or i64 %2913, %2916
  %2920 = select i1 %2914, i64 %2918, i64 %2919
  %2921 = icmp slt i16 %2758, %2839
  %2922 = or i64 %2844, 3
  %2923 = shl i64 1, %2922
  %2924 = xor i64 %2923, -1
  %2925 = and i64 %2920, %2924
  %2926 = or i64 %2920, %2923
  %2927 = select i1 %2921, i64 %2925, i64 %2926
  %2928 = icmp slt i16 %2796, %2839
  %2929 = or i64 %2844, 4
  %2930 = shl i64 1, %2929
  %2931 = xor i64 %2930, -1
  %2932 = and i64 %2927, %2931
  %2933 = or i64 %2927, %2930
  %2934 = select i1 %2928, i64 %2932, i64 %2933
  %2935 = icmp slt i16 %2807, %2839
  %2936 = or i64 %2844, 5
  %2937 = shl i64 1, %2936
  %2938 = xor i64 %2937, -1
  %2939 = and i64 %2934, %2938
  %2940 = or i64 %2934, %2937
  %2941 = select i1 %2935, i64 %2939, i64 %2940
  %2942 = icmp slt i16 %2818, %2839
  %2943 = or i64 %2844, 6
  %2944 = shl i64 1, %2943
  %2945 = xor i64 %2944, -1
  %2946 = and i64 %2941, %2945
  %2947 = or i64 %2941, %2944
  %2948 = select i1 %2942, i64 %2946, i64 %2947
  %2949 = icmp slt i16 %2828, %2839
  %2950 = or i64 %2844, 7
  %2951 = shl i64 1, %2950
  %2952 = xor i64 %2951, -1
  %2953 = and i64 %2948, %2952
  %2954 = or i64 %2948, %2951
  br label %2955

; <label>:2955:                                   ; preds = %2900, %2845
  %2956 = phi i64 [ %2899, %2845 ], [ %2954, %2900 ]
  %2957 = phi i64 [ %2898, %2845 ], [ %2953, %2900 ]
  %2958 = phi i1 [ %2894, %2845 ], [ %2949, %2900 ]
  %2959 = select i1 %2958, i64 %2957, i64 %2956
  %2960 = add nuw nsw i64 %2840, 1
  %2961 = icmp eq i64 %2960, 8
  br i1 %2961, label %2965, label %2962

; <label>:2962:                                   ; preds = %2955
  %2963 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2738, i64 0, i32 0, i64 %2960
  %2964 = load i16, i16* %2963, align 2, !tbaa !869
  br label %2838

; <label>:2965:                                   ; preds = %2955
  br label %2967

; <label>:2966:                                   ; preds = %2969
  br label %2967

; <label>:2967:                                   ; preds = %2966, %2965
  %2968 = phi i64 [ %2959, %2965 ], [ %3028, %2966 ]
  switch i2 %2834, label %3242 [
    i2 0, label %3034
    i2 1, label %3062
    i2 -2, label %3095
    i2 -1, label %3225
  ]

; <label>:2969:                                   ; preds = %3031, %2836
  %2970 = phi i16 [ %3033, %3031 ], [ %2760, %2836 ]
  %2971 = phi i64 [ %3029, %3031 ], [ 0, %2836 ]
  %2972 = phi i64 [ %3028, %3031 ], [ 0, %2836 ]
  %2973 = shl i64 %2971, 3
  %2974 = icmp eq i16 %2970, %2752
  %2975 = shl i64 1, %2973
  %2976 = xor i64 %2975, -1
  %2977 = and i64 %2972, %2976
  %2978 = or i64 %2975, %2972
  %2979 = select i1 %2974, i64 %2978, i64 %2977
  %2980 = icmp eq i16 %2970, %2754
  %2981 = or i64 %2973, 1
  %2982 = shl i64 1, %2981
  %2983 = xor i64 %2982, -1
  %2984 = and i64 %2979, %2983
  %2985 = or i64 %2979, %2982
  %2986 = select i1 %2980, i64 %2985, i64 %2984
  %2987 = icmp eq i16 %2970, %2756
  %2988 = or i64 %2973, 2
  %2989 = shl i64 1, %2988
  %2990 = xor i64 %2989, -1
  %2991 = and i64 %2986, %2990
  %2992 = or i64 %2986, %2989
  %2993 = select i1 %2987, i64 %2992, i64 %2991
  %2994 = icmp eq i16 %2970, %2758
  %2995 = or i64 %2973, 3
  %2996 = shl i64 1, %2995
  %2997 = xor i64 %2996, -1
  %2998 = and i64 %2993, %2997
  %2999 = or i64 %2993, %2996
  %3000 = select i1 %2994, i64 %2999, i64 %2998
  %3001 = icmp eq i16 %2970, %2796
  %3002 = or i64 %2973, 4
  %3003 = shl i64 1, %3002
  %3004 = xor i64 %3003, -1
  %3005 = and i64 %3000, %3004
  %3006 = or i64 %3000, %3003
  %3007 = select i1 %3001, i64 %3006, i64 %3005
  %3008 = icmp eq i16 %2970, %2807
  %3009 = or i64 %2973, 5
  %3010 = shl i64 1, %3009
  %3011 = xor i64 %3010, -1
  %3012 = and i64 %3007, %3011
  %3013 = or i64 %3007, %3010
  %3014 = select i1 %3008, i64 %3013, i64 %3012
  %3015 = icmp eq i16 %2970, %2818
  %3016 = or i64 %2973, 6
  %3017 = shl i64 1, %3016
  %3018 = xor i64 %3017, -1
  %3019 = and i64 %3014, %3018
  %3020 = or i64 %3014, %3017
  %3021 = select i1 %3015, i64 %3020, i64 %3019
  %3022 = icmp eq i16 %2970, %2828
  %3023 = or i64 %2973, 7
  %3024 = shl i64 1, %3023
  %3025 = xor i64 %3024, -1
  %3026 = and i64 %3021, %3025
  %3027 = or i64 %3021, %3024
  %3028 = select i1 %3022, i64 %3027, i64 %3026
  %3029 = add nuw nsw i64 %2971, 1
  %3030 = icmp eq i64 %3029, 8
  br i1 %3030, label %2966, label %3031

; <label>:3031:                                   ; preds = %2969
  %3032 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2738, i64 0, i32 0, i64 %3029
  %3033 = load i16, i16* %3032, align 2, !tbaa !869
  br label %2969

; <label>:3034:                                   ; preds = %2967
  %3035 = icmp eq i64 %2832, 0
  %3036 = icmp eq i64 %2826, 0
  %3037 = or i1 %3035, %3036
  br i1 %3037, label %3245, label %3038

; <label>:3038:                                   ; preds = %3034
  br label %3039

; <label>:3039:                                   ; preds = %3057, %3038
  %3040 = phi i64 [ %3059, %3057 ], [ 0, %3038 ]
  %3041 = phi i16 [ %3060, %3057 ], [ 1, %3038 ]
  %3042 = phi i16 [ %3058, %3057 ], [ 0, %3038 ]
  br label %3045

; <label>:3043:                                   ; preds = %3045
  %3044 = icmp ult i64 %3053, %2826
  br i1 %3044, label %3045, label %3056, !llvm.loop !891

; <label>:3045:                                   ; preds = %3043, %3039
  %3046 = phi i64 [ 0, %3039 ], [ %3053, %3043 ]
  %3047 = shl i64 %3046, 3
  %3048 = add i64 %3047, %3040
  %3049 = and i64 %3048, 63
  %3050 = shl i64 1, %3049
  %3051 = and i64 %3050, %2968
  %3052 = icmp eq i64 %3051, 0
  %3053 = add nuw i64 %3046, 1
  br i1 %3052, label %3043, label %3054

; <label>:3054:                                   ; preds = %3045
  %3055 = or i16 %3042, %3041
  br label %3057

; <label>:3056:                                   ; preds = %3043
  br label %3057

; <label>:3057:                                   ; preds = %3056, %3054
  %3058 = phi i16 [ %3055, %3054 ], [ %3042, %3056 ]
  %3059 = add nuw i64 %3040, 1
  %3060 = shl i16 %3041, 1
  %3061 = icmp eq i64 %3059, %2832
  br i1 %3061, label %3243, label %3039

; <label>:3062:                                   ; preds = %2967
  %3063 = icmp eq i64 %2832, 0
  br i1 %3063, label %3245, label %3064

; <label>:3064:                                   ; preds = %3062
  %3065 = add i64 %2826, -1
  %3066 = icmp eq i64 %3065, 0
  br i1 %3066, label %3245, label %3067

; <label>:3067:                                   ; preds = %3064
  br label %3068

; <label>:3068:                                   ; preds = %3091, %3067
  %3069 = phi i16 [ %3087, %3091 ], [ 0, %3067 ]
  %3070 = phi i16 [ %3093, %3091 ], [ 1, %3067 ]
  %3071 = phi i64 [ %3092, %3091 ], [ 0, %3067 ]
  br label %3072

; <label>:3072:                                   ; preds = %3072, %3068
  %3073 = phi i16 [ %3069, %3068 ], [ %3087, %3072 ]
  %3074 = phi i64 [ 0, %3068 ], [ %3088, %3072 ]
  %3075 = shl i64 %3074, 3
  %3076 = add i64 %3075, %3071
  %3077 = and i64 %3076, 63
  %3078 = shl i64 1, %3077
  %3079 = or i64 %3075, 8
  %3080 = add i64 %3079, %3071
  %3081 = and i64 %3080, 63
  %3082 = shl i64 1, %3081
  %3083 = or i64 %3082, %3078
  %3084 = and i64 %3083, %2968
  %3085 = icmp ne i64 %3084, %3083
  %3086 = select i1 %3085, i16 0, i16 %3070
  %3087 = or i16 %3086, %3073
  %3088 = add i64 %3074, 2
  %3089 = icmp ult i64 %3088, %3065
  %3090 = and i1 %3089, %3085
  br i1 %3090, label %3072, label %3091, !llvm.loop !892

; <label>:3091:                                   ; preds = %3072
  %3092 = add nuw i64 %3071, 1
  %3093 = shl i16 %3070, 1
  %3094 = icmp eq i64 %3092, %2832
  br i1 %3094, label %3244, label %3068

; <label>:3095:                                   ; preds = %2967
  %3096 = icmp ne i64 %2826, 0
  %3097 = icmp ne i64 %2832, 0
  %3098 = and i1 %3097, %3096
  br i1 %3098, label %3099, label %3102

; <label>:3099:                                   ; preds = %3095
  %3100 = and i64 %2968, 1
  %3101 = icmp ne i64 %3100, 0
  br label %3107

; <label>:3102:                                   ; preds = %3095
  br i1 %3096, label %3107, label %3103

; <label>:3103:                                   ; preds = %3102
  %3104 = xor i1 %3097, true
  %3105 = zext i1 %3104 to i16
  %3106 = icmp ugt i64 %2832, 1
  br label %3114

; <label>:3107:                                   ; preds = %3102, %3099
  %3108 = phi i1 [ false, %3102 ], [ %3101, %3099 ]
  %3109 = zext i1 %3108 to i16
  %3110 = icmp ugt i64 %2826, 1
  %3111 = icmp ugt i64 %2832, 1
  %3112 = and i1 %3111, %3110
  br i1 %3112, label %3120, label %3113

; <label>:3113:                                   ; preds = %3107
  br i1 %3110, label %3125, label %3114

; <label>:3114:                                   ; preds = %3113, %3103
  %3115 = phi i16 [ %3105, %3103 ], [ %3109, %3113 ]
  %3116 = phi i1 [ %3106, %3103 ], [ %3111, %3113 ]
  %3117 = select i1 %3116, i16 0, i16 2
  %3118 = or i16 %3117, %3115
  %3119 = icmp ugt i64 %2832, 2
  br label %3131

; <label>:3120:                                   ; preds = %3107
  %3121 = trunc i64 %2968 to i16
  %3122 = lshr i16 %3121, 8
  %3123 = and i16 %3122, 2
  %3124 = or i16 %3109, %3123
  br label %3125

; <label>:3125:                                   ; preds = %3120, %3113
  %3126 = phi i16 [ %3109, %3113 ], [ %3124, %3120 ]
  %3127 = icmp ugt i64 %2826, 2
  %3128 = icmp ugt i64 %2832, 2
  %3129 = and i1 %3128, %3127
  br i1 %3129, label %3137, label %3130

; <label>:3130:                                   ; preds = %3125
  br i1 %3127, label %3142, label %3131

; <label>:3131:                                   ; preds = %3130, %3114
  %3132 = phi i16 [ %3118, %3114 ], [ %3126, %3130 ]
  %3133 = phi i1 [ %3119, %3114 ], [ %3128, %3130 ]
  %3134 = select i1 %3133, i16 0, i16 4
  %3135 = or i16 %3134, %3132
  %3136 = icmp ugt i64 %2832, 3
  br label %3148

; <label>:3137:                                   ; preds = %3125
  %3138 = and i64 %2968, 262144
  %3139 = icmp ne i64 %3138, 0
  %3140 = select i1 %3139, i16 4, i16 0
  %3141 = or i16 %3126, %3140
  br label %3142

; <label>:3142:                                   ; preds = %3137, %3130
  %3143 = phi i16 [ %3126, %3130 ], [ %3141, %3137 ]
  %3144 = icmp ugt i64 %2826, 3
  %3145 = icmp ugt i64 %2832, 3
  %3146 = and i1 %3145, %3144
  br i1 %3146, label %3154, label %3147

; <label>:3147:                                   ; preds = %3142
  br i1 %3144, label %3159, label %3148

; <label>:3148:                                   ; preds = %3147, %3131
  %3149 = phi i16 [ %3135, %3131 ], [ %3143, %3147 ]
  %3150 = phi i1 [ %3136, %3131 ], [ %3145, %3147 ]
  %3151 = select i1 %3150, i16 0, i16 8
  %3152 = or i16 %3151, %3149
  %3153 = icmp ugt i64 %2832, 4
  br label %3165

; <label>:3154:                                   ; preds = %3142
  %3155 = and i64 %2968, 134217728
  %3156 = icmp ne i64 %3155, 0
  %3157 = select i1 %3156, i16 8, i16 0
  %3158 = or i16 %3143, %3157
  br label %3159

; <label>:3159:                                   ; preds = %3154, %3147
  %3160 = phi i16 [ %3143, %3147 ], [ %3158, %3154 ]
  %3161 = icmp ugt i64 %2826, 4
  %3162 = icmp ugt i64 %2832, 4
  %3163 = and i1 %3162, %3161
  br i1 %3163, label %3171, label %3164

; <label>:3164:                                   ; preds = %3159
  br i1 %3161, label %3176, label %3165

; <label>:3165:                                   ; preds = %3164, %3148
  %3166 = phi i16 [ %3152, %3148 ], [ %3160, %3164 ]
  %3167 = phi i1 [ %3153, %3148 ], [ %3162, %3164 ]
  %3168 = select i1 %3167, i16 0, i16 16
  %3169 = or i16 %3168, %3166
  %3170 = icmp ugt i64 %2832, 5
  br label %3182

; <label>:3171:                                   ; preds = %3159
  %3172 = and i64 %2968, 68719476736
  %3173 = icmp ne i64 %3172, 0
  %3174 = select i1 %3173, i16 16, i16 0
  %3175 = or i16 %3160, %3174
  br label %3176

; <label>:3176:                                   ; preds = %3171, %3164
  %3177 = phi i16 [ %3160, %3164 ], [ %3175, %3171 ]
  %3178 = icmp ugt i64 %2826, 5
  %3179 = icmp ugt i64 %2832, 5
  %3180 = and i1 %3179, %3178
  br i1 %3180, label %3188, label %3181

; <label>:3181:                                   ; preds = %3176
  br i1 %3178, label %3193, label %3182

; <label>:3182:                                   ; preds = %3181, %3165
  %3183 = phi i16 [ %3169, %3165 ], [ %3177, %3181 ]
  %3184 = phi i1 [ %3170, %3165 ], [ %3179, %3181 ]
  %3185 = select i1 %3184, i16 0, i16 32
  %3186 = or i16 %3185, %3183
  %3187 = icmp ugt i64 %2832, 6
  br label %3199

; <label>:3188:                                   ; preds = %3176
  %3189 = and i64 %2968, 35184372088832
  %3190 = icmp ne i64 %3189, 0
  %3191 = select i1 %3190, i16 32, i16 0
  %3192 = or i16 %3177, %3191
  br label %3193

; <label>:3193:                                   ; preds = %3188, %3181
  %3194 = phi i16 [ %3177, %3181 ], [ %3192, %3188 ]
  %3195 = icmp ugt i64 %2826, 6
  %3196 = icmp ugt i64 %2832, 6
  %3197 = and i1 %3196, %3195
  br i1 %3197, label %3205, label %3198

; <label>:3198:                                   ; preds = %3193
  br i1 %3195, label %3210, label %3199

; <label>:3199:                                   ; preds = %3198, %3182
  %3200 = phi i16 [ %3186, %3182 ], [ %3194, %3198 ]
  %3201 = phi i1 [ %3187, %3182 ], [ %3196, %3198 ]
  %3202 = select i1 %3201, i16 0, i16 64
  %3203 = or i16 %3202, %3200
  %3204 = icmp ugt i64 %2832, 7
  br label %3216

; <label>:3205:                                   ; preds = %3193
  %3206 = and i64 %2968, 18014398509481984
  %3207 = icmp ne i64 %3206, 0
  %3208 = select i1 %3207, i16 64, i16 0
  %3209 = or i16 %3194, %3208
  br label %3210

; <label>:3210:                                   ; preds = %3205, %3198
  %3211 = phi i16 [ %3194, %3198 ], [ %3209, %3205 ]
  %3212 = icmp ugt i64 %2826, 7
  %3213 = icmp ugt i64 %2832, 7
  %3214 = and i1 %3213, %3212
  br i1 %3214, label %3221, label %3215

; <label>:3215:                                   ; preds = %3210
  br i1 %3212, label %3245, label %3216

; <label>:3216:                                   ; preds = %3215, %3199
  %3217 = phi i16 [ %3203, %3199 ], [ %3211, %3215 ]
  %3218 = phi i1 [ %3204, %3199 ], [ %3213, %3215 ]
  %3219 = select i1 %3218, i16 0, i16 128
  %3220 = or i16 %3219, %3217
  br label %3245

; <label>:3221:                                   ; preds = %3210
  %3222 = icmp slt i64 %2968, 0
  %3223 = select i1 %3222, i16 128, i16 0
  %3224 = or i16 %3211, %3223
  br label %3245

; <label>:3225:                                   ; preds = %2967
  %3226 = icmp ugt i64 %2826, %2832
  br i1 %3226, label %3245, label %3227

; <label>:3227:                                   ; preds = %3225
  %3228 = icmp eq i64 %2826, 0
  br i1 %3228, label %3245, label %3229

; <label>:3229:                                   ; preds = %3227
  br label %3230

; <label>:3230:                                   ; preds = %3229
  br label %3231

; <label>:3231:                                   ; preds = %3230
  %3232 = icmp eq i64 %2832, 0
  br i1 %3232, label %3238, label %3233

; <label>:3233:                                   ; preds = %3231
  %3234 = and i64 %2968, 1
  %3235 = icmp eq i64 %3234, 0
  br i1 %3235, label %3238, label %3236

; <label>:3236:                                   ; preds = %3233
  %3237 = icmp ugt i64 %2826, 1
  br i1 %3237, label %3669, label %3239, !llvm.loop !893

; <label>:3238:                                   ; preds = %3713, %3711, %3706, %3704, %3699, %3697, %3692, %3690, %3685, %3683, %3678, %3676, %3671, %3669, %3233, %3231
  br label %3240

; <label>:3239:                                   ; preds = %3715, %3709, %3702, %3695, %3688, %3681, %3674, %3236
  br label %3240

; <label>:3240:                                   ; preds = %3239, %3238
  %3241 = phi i16 [ 254, %3238 ], [ 255, %3239 ]
  br label %3716

; <label>:3242:                                   ; preds = %2967
  unreachable

; <label>:3243:                                   ; preds = %3057
  br label %3245

; <label>:3244:                                   ; preds = %3091
  br label %3245

; <label>:3245:                                   ; preds = %4022, %3244, %3243, %3227, %3225, %3221, %3216, %3215, %3064, %3062, %3034
  %3246 = phi i64 [ %2826, %3034 ], [ %2826, %3062 ], [ 1, %3064 ], [ %2826, %3215 ], [ %2826, %3221 ], [ %2826, %3216 ], [ %2826, %3225 ], [ 0, %3227 ], [ %2826, %3243 ], [ %2826, %3244 ], [ %2826, %4022 ]
  %3247 = phi i16 [ 0, %3034 ], [ 0, %3062 ], [ 0, %3064 ], [ %3211, %3215 ], [ %3224, %3221 ], [ %3220, %3216 ], [ 0, %3225 ], [ 255, %3227 ], [ %3058, %3243 ], [ %3087, %3244 ], [ %4023, %4022 ]
  %3248 = trunc i8 %2833 to i2
  switch i2 %3248, label %3256 [
    i2 0, label %3257
    i2 1, label %3251
    i2 -2, label %3257
    i2 -1, label %3249
  ]

; <label>:3249:                                   ; preds = %3245
  %3250 = icmp eq i64 %2832, 0
  br i1 %3250, label %3257, label %3253

; <label>:3251:                                   ; preds = %3245
  %3252 = xor i16 %3247, 255
  br label %3257

; <label>:3253:                                   ; preds = %3249
  %3254 = xor i16 %3247, 1
  %3255 = icmp eq i64 %2832, 1
  br i1 %3255, label %3257, label %3275

; <label>:3256:                                   ; preds = %3245
  unreachable

; <label>:3257:                                   ; preds = %3290, %3287, %3284, %3281, %3278, %3275, %3253, %3251, %3249, %3245, %3245
  %3258 = phi i16 [ %3252, %3251 ], [ %3247, %3245 ], [ %3247, %3245 ], [ %3288, %3287 ], [ %3285, %3284 ], [ %3282, %3281 ], [ %3279, %3278 ], [ %3276, %3275 ], [ %3254, %3253 ], [ %3247, %3249 ], [ %3293, %3290 ]
  %3259 = and i8 %12, 64
  %3260 = icmp eq i8 %3259, 0
  %3261 = icmp eq i16 %3258, 0
  br i1 %3260, label %3262, label %3267

; <label>:3262:                                   ; preds = %3257
  br i1 %3261, label %3294, label %3263

; <label>:3263:                                   ; preds = %3262
  %3264 = zext i16 %3258 to i32
  %3265 = tail call i32 @llvm.cttz.i32(i32 %3264, i1 true) #23
  %3266 = zext i32 %3265 to i64
  br label %3294

; <label>:3267:                                   ; preds = %3257
  br i1 %3261, label %3294, label %3268

; <label>:3268:                                   ; preds = %3267
  %3269 = zext i16 %3258 to i32
  %3270 = tail call i32 @llvm.ctlz.i32(i32 %3269, i1 true) #23
  %3271 = add nuw nsw i32 %3270, 65512
  %3272 = and i32 %3271, 65535
  %3273 = zext i32 %3272 to i64
  %3274 = sub nsw i64 7, %3273
  br label %3294

; <label>:3275:                                   ; preds = %3253
  %3276 = xor i16 %3247, 3
  %3277 = icmp ugt i64 %2832, 2
  br i1 %3277, label %3278, label %3257

; <label>:3278:                                   ; preds = %3275
  %3279 = xor i16 %3247, 7
  %3280 = icmp eq i64 %2832, 3
  br i1 %3280, label %3257, label %3281

; <label>:3281:                                   ; preds = %3278
  %3282 = xor i16 %3247, 15
  %3283 = icmp ugt i64 %2832, 4
  br i1 %3283, label %3284, label %3257

; <label>:3284:                                   ; preds = %3281
  %3285 = xor i16 %3247, 31
  %3286 = icmp eq i64 %2832, 5
  br i1 %3286, label %3257, label %3287

; <label>:3287:                                   ; preds = %3284
  %3288 = xor i16 %3247, 63
  %3289 = icmp ugt i64 %2832, 6
  br i1 %3289, label %3290, label %3257

; <label>:3290:                                   ; preds = %3287
  %3291 = icmp ne i64 %2832, 7
  %3292 = select i1 %3291, i16 255, i16 127
  %3293 = xor i16 %3247, %3292
  br label %3257

; <label>:3294:                                   ; preds = %3268, %3267, %3263, %3262
  %3295 = phi i64 [ %3274, %3268 ], [ 8, %3267 ], [ %3266, %3263 ], [ 8, %3262 ]
  %3296 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %3297 = and i64 %3295, 65535
  store i64 %3297, i64* %3296, align 8, !tbaa !870
  %3298 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %3299 = icmp ne i16 %3258, 0
  %3300 = zext i1 %3299 to i8
  store i8 %3300, i8* %3298, align 1, !tbaa !868
  %3301 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %3302 = icmp ult i64 %2832, 8
  %3303 = zext i1 %3302 to i8
  store i8 %3303, i8* %3301, align 1, !tbaa !868
  %3304 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %3305 = icmp ult i64 %3246, 8
  %3306 = zext i1 %3305 to i8
  store i8 %3306, i8* %3304, align 1, !tbaa !868
  %3307 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %3308 = trunc i16 %3258 to i8
  %3309 = and i8 %3308, 1
  store i8 %3309, i8* %3307, align 1, !tbaa !868
  %3310 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %3310, align 1, !tbaa !868
  %3311 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %3311, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2739) #23
  br label %3313

; <label>:3312:                                   ; preds = %5
  unreachable

; <label>:3313:                                   ; preds = %3294, %2719, %1645, %1070
  ret %struct.Memory* %0

; <label>:3314:                                   ; preds = %1587
  %3315 = icmp ugt i64 %1183, 1
  br i1 %3315, label %3316, label %1589

; <label>:3316:                                   ; preds = %3314
  %3317 = and i64 %1319, 512
  %3318 = icmp eq i64 %3317, 0
  br i1 %3318, label %1589, label %3319

; <label>:3319:                                   ; preds = %3316
  %3320 = icmp ugt i64 %1177, 2
  br i1 %3320, label %3321, label %1590, !llvm.loop !893

; <label>:3321:                                   ; preds = %3319
  %3322 = icmp ugt i64 %1183, 2
  br i1 %3322, label %3323, label %1589

; <label>:3323:                                   ; preds = %3321
  %3324 = and i64 %1319, 262144
  %3325 = icmp eq i64 %3324, 0
  br i1 %3325, label %1589, label %3326

; <label>:3326:                                   ; preds = %3323
  %3327 = icmp ugt i64 %1177, 3
  br i1 %3327, label %3328, label %1590, !llvm.loop !893

; <label>:3328:                                   ; preds = %3326
  %3329 = icmp ugt i64 %1183, 3
  br i1 %3329, label %3330, label %1589

; <label>:3330:                                   ; preds = %3328
  %3331 = and i64 %1319, 134217728
  %3332 = icmp eq i64 %3331, 0
  br i1 %3332, label %1589, label %3333

; <label>:3333:                                   ; preds = %3330
  %3334 = icmp ugt i64 %1177, 4
  br i1 %3334, label %3335, label %1590, !llvm.loop !893

; <label>:3335:                                   ; preds = %3333
  %3336 = icmp ugt i64 %1183, 4
  br i1 %3336, label %3337, label %1589

; <label>:3337:                                   ; preds = %3335
  %3338 = and i64 %1319, 68719476736
  %3339 = icmp eq i64 %3338, 0
  br i1 %3339, label %1589, label %3340

; <label>:3340:                                   ; preds = %3337
  %3341 = icmp ugt i64 %1177, 5
  br i1 %3341, label %3342, label %1590, !llvm.loop !893

; <label>:3342:                                   ; preds = %3340
  %3343 = icmp ugt i64 %1183, 5
  br i1 %3343, label %3344, label %1589

; <label>:3344:                                   ; preds = %3342
  %3345 = and i64 %1319, 35184372088832
  %3346 = icmp eq i64 %3345, 0
  br i1 %3346, label %1589, label %3347

; <label>:3347:                                   ; preds = %3344
  %3348 = icmp ugt i64 %1177, 6
  br i1 %3348, label %3349, label %1590, !llvm.loop !893

; <label>:3349:                                   ; preds = %3347
  %3350 = icmp ugt i64 %1183, 6
  br i1 %3350, label %3351, label %1589

; <label>:3351:                                   ; preds = %3349
  %3352 = and i64 %1319, 18014398509481984
  %3353 = icmp eq i64 %3352, 0
  br i1 %3353, label %1589, label %3354

; <label>:3354:                                   ; preds = %3351
  %3355 = icmp ugt i64 %1177, 7
  br i1 %3355, label %3356, label %1590, !llvm.loop !893

; <label>:3356:                                   ; preds = %3354
  %3357 = icmp ugt i64 %1183, 7
  br i1 %3357, label %3358, label %1589

; <label>:3358:                                   ; preds = %3356
  %3359 = icmp sgt i64 %1319, -1
  br i1 %3359, label %1589, label %3360

; <label>:3360:                                   ; preds = %3358
  br label %1590

; <label>:3361:                                   ; preds = %1591
  %3362 = icmp ugt i64 %1183, 1
  br i1 %3362, label %3363, label %3413

; <label>:3363:                                   ; preds = %3361
  %3364 = and i64 %1319, 2
  %3365 = icmp eq i64 %3364, 0
  br i1 %3365, label %3413, label %3366

; <label>:3366:                                   ; preds = %3363
  %3367 = icmp ugt i64 %1177, 1
  br i1 %3367, label %3368, label %3412, !llvm.loop !893

; <label>:3368:                                   ; preds = %3366
  %3369 = icmp ugt i64 %1183, 2
  br i1 %3369, label %3370, label %3413

; <label>:3370:                                   ; preds = %3368
  %3371 = and i64 %1319, 1024
  %3372 = icmp eq i64 %3371, 0
  br i1 %3372, label %3413, label %3373

; <label>:3373:                                   ; preds = %3370
  %3374 = icmp ugt i64 %1177, 2
  br i1 %3374, label %3375, label %3412, !llvm.loop !893

; <label>:3375:                                   ; preds = %3373
  %3376 = icmp ugt i64 %1183, 3
  br i1 %3376, label %3377, label %3413

; <label>:3377:                                   ; preds = %3375
  %3378 = and i64 %1319, 524288
  %3379 = icmp eq i64 %3378, 0
  br i1 %3379, label %3413, label %3380

; <label>:3380:                                   ; preds = %3377
  %3381 = icmp ugt i64 %1177, 3
  br i1 %3381, label %3382, label %3412, !llvm.loop !893

; <label>:3382:                                   ; preds = %3380
  %3383 = icmp ugt i64 %1183, 4
  br i1 %3383, label %3384, label %3413

; <label>:3384:                                   ; preds = %3382
  %3385 = and i64 %1319, 268435456
  %3386 = icmp eq i64 %3385, 0
  br i1 %3386, label %3413, label %3387

; <label>:3387:                                   ; preds = %3384
  %3388 = icmp ugt i64 %1177, 4
  br i1 %3388, label %3389, label %3412, !llvm.loop !893

; <label>:3389:                                   ; preds = %3387
  %3390 = icmp ugt i64 %1183, 5
  br i1 %3390, label %3391, label %3413

; <label>:3391:                                   ; preds = %3389
  %3392 = and i64 %1319, 137438953472
  %3393 = icmp eq i64 %3392, 0
  br i1 %3393, label %3413, label %3394

; <label>:3394:                                   ; preds = %3391
  %3395 = icmp ugt i64 %1177, 5
  br i1 %3395, label %3396, label %3412, !llvm.loop !893

; <label>:3396:                                   ; preds = %3394
  %3397 = icmp ugt i64 %1183, 6
  br i1 %3397, label %3398, label %3413

; <label>:3398:                                   ; preds = %3396
  %3399 = and i64 %1319, 70368744177664
  %3400 = icmp eq i64 %3399, 0
  br i1 %3400, label %3413, label %3401

; <label>:3401:                                   ; preds = %3398
  %3402 = icmp ugt i64 %1177, 6
  br i1 %3402, label %3403, label %3412, !llvm.loop !893

; <label>:3403:                                   ; preds = %3401
  %3404 = icmp ugt i64 %1183, 7
  br i1 %3404, label %3405, label %3413

; <label>:3405:                                   ; preds = %3403
  %3406 = and i64 %1319, 36028797018963968
  %3407 = icmp eq i64 %3406, 0
  br i1 %3407, label %3413, label %3408

; <label>:3408:                                   ; preds = %3405
  br i1 false, label %3409, label %3412, !llvm.loop !893

; <label>:3409:                                   ; preds = %3408
  br i1 undef, label %3410, label %3413

; <label>:3410:                                   ; preds = %3409
  br i1 undef, label %3413, label %3411

; <label>:3411:                                   ; preds = %3410
  br label %3412

; <label>:3412:                                   ; preds = %3411, %3408, %3401, %3394, %3387, %3380, %3373, %3366
  br label %3415

; <label>:3413:                                   ; preds = %3410, %3409, %3405, %3403, %3398, %3396, %3391, %3389, %3384, %3382, %3377, %3375, %3370, %3368, %3363, %3361
  %3414 = and i16 %1592, 253
  br label %3415

; <label>:3415:                                   ; preds = %3413, %3412
  %3416 = phi i16 [ %3414, %3413 ], [ %1592, %3412 ]
  br label %3417

; <label>:3417:                                   ; preds = %3415
  %3418 = icmp ugt i64 %1183, 2
  br i1 %3418, label %3419, label %3465

; <label>:3419:                                   ; preds = %3417
  %3420 = and i64 %1319, 4
  %3421 = icmp eq i64 %3420, 0
  br i1 %3421, label %3465, label %3422

; <label>:3422:                                   ; preds = %3419
  %3423 = icmp ugt i64 %1177, 1
  br i1 %3423, label %3424, label %3464, !llvm.loop !893

; <label>:3424:                                   ; preds = %3422
  %3425 = icmp ugt i64 %1183, 3
  br i1 %3425, label %3426, label %3465

; <label>:3426:                                   ; preds = %3424
  %3427 = and i64 %1319, 2048
  %3428 = icmp eq i64 %3427, 0
  br i1 %3428, label %3465, label %3429

; <label>:3429:                                   ; preds = %3426
  %3430 = icmp ugt i64 %1177, 2
  br i1 %3430, label %3431, label %3464, !llvm.loop !893

; <label>:3431:                                   ; preds = %3429
  %3432 = icmp ugt i64 %1183, 4
  br i1 %3432, label %3433, label %3465

; <label>:3433:                                   ; preds = %3431
  %3434 = and i64 %1319, 1048576
  %3435 = icmp eq i64 %3434, 0
  br i1 %3435, label %3465, label %3436

; <label>:3436:                                   ; preds = %3433
  %3437 = icmp ugt i64 %1177, 3
  br i1 %3437, label %3438, label %3464, !llvm.loop !893

; <label>:3438:                                   ; preds = %3436
  %3439 = icmp ugt i64 %1183, 5
  br i1 %3439, label %3440, label %3465

; <label>:3440:                                   ; preds = %3438
  %3441 = and i64 %1319, 536870912
  %3442 = icmp eq i64 %3441, 0
  br i1 %3442, label %3465, label %3443

; <label>:3443:                                   ; preds = %3440
  %3444 = icmp ugt i64 %1177, 4
  br i1 %3444, label %3445, label %3464, !llvm.loop !893

; <label>:3445:                                   ; preds = %3443
  %3446 = icmp ugt i64 %1183, 6
  br i1 %3446, label %3447, label %3465

; <label>:3447:                                   ; preds = %3445
  %3448 = and i64 %1319, 274877906944
  %3449 = icmp eq i64 %3448, 0
  br i1 %3449, label %3465, label %3450

; <label>:3450:                                   ; preds = %3447
  %3451 = icmp ugt i64 %1177, 5
  br i1 %3451, label %3452, label %3464, !llvm.loop !893

; <label>:3452:                                   ; preds = %3450
  %3453 = icmp ugt i64 %1183, 7
  br i1 %3453, label %3454, label %3465

; <label>:3454:                                   ; preds = %3452
  %3455 = and i64 %1319, 140737488355328
  %3456 = icmp eq i64 %3455, 0
  br i1 %3456, label %3465, label %3457

; <label>:3457:                                   ; preds = %3454
  br i1 false, label %3458, label %3464, !llvm.loop !893

; <label>:3458:                                   ; preds = %3457
  br i1 undef, label %3459, label %3465

; <label>:3459:                                   ; preds = %3458
  br i1 undef, label %3465, label %3460

; <label>:3460:                                   ; preds = %3459
  br i1 false, label %3461, label %3464, !llvm.loop !893

; <label>:3461:                                   ; preds = %3460
  br i1 undef, label %3462, label %3465

; <label>:3462:                                   ; preds = %3461
  br i1 undef, label %3465, label %3463

; <label>:3463:                                   ; preds = %3462
  br label %3464

; <label>:3464:                                   ; preds = %3463, %3460, %3457, %3450, %3443, %3436, %3429, %3422
  br label %3467

; <label>:3465:                                   ; preds = %3462, %3461, %3459, %3458, %3454, %3452, %3447, %3445, %3440, %3438, %3433, %3431, %3426, %3424, %3419, %3417
  %3466 = xor i16 %3416, 4
  br label %3467

; <label>:3467:                                   ; preds = %3465, %3464
  %3468 = phi i16 [ %3466, %3465 ], [ %3416, %3464 ]
  br label %3469

; <label>:3469:                                   ; preds = %3467
  %3470 = icmp ugt i64 %1183, 3
  br i1 %3470, label %3471, label %3513

; <label>:3471:                                   ; preds = %3469
  %3472 = and i64 %1319, 8
  %3473 = icmp eq i64 %3472, 0
  br i1 %3473, label %3513, label %3474

; <label>:3474:                                   ; preds = %3471
  %3475 = icmp ugt i64 %1177, 1
  br i1 %3475, label %3476, label %3512, !llvm.loop !893

; <label>:3476:                                   ; preds = %3474
  %3477 = icmp ugt i64 %1183, 4
  br i1 %3477, label %3478, label %3513

; <label>:3478:                                   ; preds = %3476
  %3479 = and i64 %1319, 4096
  %3480 = icmp eq i64 %3479, 0
  br i1 %3480, label %3513, label %3481

; <label>:3481:                                   ; preds = %3478
  %3482 = icmp ugt i64 %1177, 2
  br i1 %3482, label %3483, label %3512, !llvm.loop !893

; <label>:3483:                                   ; preds = %3481
  %3484 = icmp ugt i64 %1183, 5
  br i1 %3484, label %3485, label %3513

; <label>:3485:                                   ; preds = %3483
  %3486 = and i64 %1319, 2097152
  %3487 = icmp eq i64 %3486, 0
  br i1 %3487, label %3513, label %3488

; <label>:3488:                                   ; preds = %3485
  %3489 = icmp ugt i64 %1177, 3
  br i1 %3489, label %3490, label %3512, !llvm.loop !893

; <label>:3490:                                   ; preds = %3488
  %3491 = icmp ugt i64 %1183, 6
  br i1 %3491, label %3492, label %3513

; <label>:3492:                                   ; preds = %3490
  %3493 = and i64 %1319, 1073741824
  %3494 = icmp eq i64 %3493, 0
  br i1 %3494, label %3513, label %3495

; <label>:3495:                                   ; preds = %3492
  %3496 = icmp ugt i64 %1177, 4
  br i1 %3496, label %3497, label %3512, !llvm.loop !893

; <label>:3497:                                   ; preds = %3495
  %3498 = icmp ugt i64 %1183, 7
  br i1 %3498, label %3499, label %3513

; <label>:3499:                                   ; preds = %3497
  %3500 = and i64 %1319, 549755813888
  %3501 = icmp eq i64 %3500, 0
  br i1 %3501, label %3513, label %3502

; <label>:3502:                                   ; preds = %3499
  br i1 false, label %3503, label %3512, !llvm.loop !893

; <label>:3503:                                   ; preds = %3502
  br i1 undef, label %3504, label %3513

; <label>:3504:                                   ; preds = %3503
  br i1 undef, label %3513, label %3505

; <label>:3505:                                   ; preds = %3504
  br i1 false, label %3506, label %3512, !llvm.loop !893

; <label>:3506:                                   ; preds = %3505
  br i1 undef, label %3507, label %3513

; <label>:3507:                                   ; preds = %3506
  br i1 undef, label %3513, label %3508

; <label>:3508:                                   ; preds = %3507
  br i1 false, label %3509, label %3512, !llvm.loop !893

; <label>:3509:                                   ; preds = %3508
  br i1 undef, label %3510, label %3513

; <label>:3510:                                   ; preds = %3509
  br i1 undef, label %3513, label %3511

; <label>:3511:                                   ; preds = %3510
  br label %3512

; <label>:3512:                                   ; preds = %3511, %3508, %3505, %3502, %3495, %3488, %3481, %3474
  br label %3515

; <label>:3513:                                   ; preds = %3510, %3509, %3507, %3506, %3504, %3503, %3499, %3497, %3492, %3490, %3485, %3483, %3478, %3476, %3471, %3469
  %3514 = xor i16 %3468, 8
  br label %3515

; <label>:3515:                                   ; preds = %3513, %3512
  %3516 = phi i16 [ %3514, %3513 ], [ %3468, %3512 ]
  br label %3517

; <label>:3517:                                   ; preds = %3515
  %3518 = icmp ugt i64 %1183, 4
  br i1 %3518, label %3519, label %3557

; <label>:3519:                                   ; preds = %3517
  %3520 = and i64 %1319, 16
  %3521 = icmp eq i64 %3520, 0
  br i1 %3521, label %3557, label %3522

; <label>:3522:                                   ; preds = %3519
  %3523 = icmp ugt i64 %1177, 1
  br i1 %3523, label %3524, label %3556, !llvm.loop !893

; <label>:3524:                                   ; preds = %3522
  %3525 = icmp ugt i64 %1183, 5
  br i1 %3525, label %3526, label %3557

; <label>:3526:                                   ; preds = %3524
  %3527 = and i64 %1319, 8192
  %3528 = icmp eq i64 %3527, 0
  br i1 %3528, label %3557, label %3529

; <label>:3529:                                   ; preds = %3526
  %3530 = icmp ugt i64 %1177, 2
  br i1 %3530, label %3531, label %3556, !llvm.loop !893

; <label>:3531:                                   ; preds = %3529
  %3532 = icmp ugt i64 %1183, 6
  br i1 %3532, label %3533, label %3557

; <label>:3533:                                   ; preds = %3531
  %3534 = and i64 %1319, 4194304
  %3535 = icmp eq i64 %3534, 0
  br i1 %3535, label %3557, label %3536

; <label>:3536:                                   ; preds = %3533
  %3537 = icmp ugt i64 %1177, 3
  br i1 %3537, label %3538, label %3556, !llvm.loop !893

; <label>:3538:                                   ; preds = %3536
  %3539 = icmp ugt i64 %1183, 7
  br i1 %3539, label %3540, label %3557

; <label>:3540:                                   ; preds = %3538
  %3541 = trunc i64 %1319 to i32
  %3542 = icmp sgt i32 %3541, -1
  br i1 %3542, label %3557, label %3543

; <label>:3543:                                   ; preds = %3540
  br i1 false, label %3544, label %3556, !llvm.loop !893

; <label>:3544:                                   ; preds = %3543
  br i1 undef, label %3545, label %3557

; <label>:3545:                                   ; preds = %3544
  br i1 undef, label %3557, label %3546

; <label>:3546:                                   ; preds = %3545
  br i1 false, label %3547, label %3556, !llvm.loop !893

; <label>:3547:                                   ; preds = %3546
  br i1 undef, label %3548, label %3557

; <label>:3548:                                   ; preds = %3547
  br i1 undef, label %3557, label %3549

; <label>:3549:                                   ; preds = %3548
  br i1 false, label %3550, label %3556, !llvm.loop !893

; <label>:3550:                                   ; preds = %3549
  br i1 undef, label %3551, label %3557

; <label>:3551:                                   ; preds = %3550
  br i1 undef, label %3557, label %3552

; <label>:3552:                                   ; preds = %3551
  br i1 false, label %3553, label %3556, !llvm.loop !893

; <label>:3553:                                   ; preds = %3552
  br i1 undef, label %3554, label %3557

; <label>:3554:                                   ; preds = %3553
  br i1 undef, label %3557, label %3555

; <label>:3555:                                   ; preds = %3554
  br label %3556

; <label>:3556:                                   ; preds = %3555, %3552, %3549, %3546, %3543, %3536, %3529, %3522
  br label %3559

; <label>:3557:                                   ; preds = %3554, %3553, %3551, %3550, %3548, %3547, %3545, %3544, %3540, %3538, %3533, %3531, %3526, %3524, %3519, %3517
  %3558 = xor i16 %3516, 16
  br label %3559

; <label>:3559:                                   ; preds = %3557, %3556
  %3560 = phi i16 [ %3558, %3557 ], [ %3516, %3556 ]
  br label %3561

; <label>:3561:                                   ; preds = %3559
  %3562 = icmp ugt i64 %1183, 5
  br i1 %3562, label %3563, label %3597

; <label>:3563:                                   ; preds = %3561
  %3564 = and i64 %1319, 32
  %3565 = icmp eq i64 %3564, 0
  br i1 %3565, label %3597, label %3566

; <label>:3566:                                   ; preds = %3563
  %3567 = icmp ugt i64 %1177, 1
  br i1 %3567, label %3568, label %3596, !llvm.loop !893

; <label>:3568:                                   ; preds = %3566
  %3569 = icmp ugt i64 %1183, 6
  br i1 %3569, label %3570, label %3597

; <label>:3570:                                   ; preds = %3568
  %3571 = and i64 %1319, 16384
  %3572 = icmp eq i64 %3571, 0
  br i1 %3572, label %3597, label %3573

; <label>:3573:                                   ; preds = %3570
  %3574 = icmp ugt i64 %1177, 2
  br i1 %3574, label %3575, label %3596, !llvm.loop !893

; <label>:3575:                                   ; preds = %3573
  %3576 = icmp ugt i64 %1183, 7
  br i1 %3576, label %3577, label %3597

; <label>:3577:                                   ; preds = %3575
  %3578 = and i64 %1319, 8388608
  %3579 = icmp eq i64 %3578, 0
  br i1 %3579, label %3597, label %3580

; <label>:3580:                                   ; preds = %3577
  br i1 false, label %3581, label %3596, !llvm.loop !893

; <label>:3581:                                   ; preds = %3580
  br i1 undef, label %3582, label %3597

; <label>:3582:                                   ; preds = %3581
  br i1 undef, label %3597, label %3583

; <label>:3583:                                   ; preds = %3582
  br i1 false, label %3584, label %3596, !llvm.loop !893

; <label>:3584:                                   ; preds = %3583
  br i1 undef, label %3585, label %3597

; <label>:3585:                                   ; preds = %3584
  br i1 undef, label %3597, label %3586

; <label>:3586:                                   ; preds = %3585
  br i1 false, label %3587, label %3596, !llvm.loop !893

; <label>:3587:                                   ; preds = %3586
  br i1 undef, label %3588, label %3597

; <label>:3588:                                   ; preds = %3587
  br i1 undef, label %3597, label %3589

; <label>:3589:                                   ; preds = %3588
  br i1 false, label %3590, label %3596, !llvm.loop !893

; <label>:3590:                                   ; preds = %3589
  br i1 undef, label %3591, label %3597

; <label>:3591:                                   ; preds = %3590
  br i1 undef, label %3597, label %3592

; <label>:3592:                                   ; preds = %3591
  br i1 false, label %3593, label %3596, !llvm.loop !893

; <label>:3593:                                   ; preds = %3592
  br i1 undef, label %3594, label %3597

; <label>:3594:                                   ; preds = %3593
  br i1 undef, label %3597, label %3595

; <label>:3595:                                   ; preds = %3594
  br label %3596

; <label>:3596:                                   ; preds = %3595, %3592, %3589, %3586, %3583, %3580, %3573, %3566
  br label %3599

; <label>:3597:                                   ; preds = %3594, %3593, %3591, %3590, %3588, %3587, %3585, %3584, %3582, %3581, %3577, %3575, %3570, %3568, %3563, %3561
  %3598 = xor i16 %3560, 32
  br label %3599

; <label>:3599:                                   ; preds = %3597, %3596
  %3600 = phi i16 [ %3598, %3597 ], [ %3560, %3596 ]
  br label %3601

; <label>:3601:                                   ; preds = %3599
  %3602 = icmp ugt i64 %1183, 6
  br i1 %3602, label %3603, label %3633

; <label>:3603:                                   ; preds = %3601
  %3604 = and i64 %1319, 64
  %3605 = icmp eq i64 %3604, 0
  br i1 %3605, label %3633, label %3606

; <label>:3606:                                   ; preds = %3603
  %3607 = icmp ugt i64 %1177, 1
  br i1 %3607, label %3608, label %3632, !llvm.loop !893

; <label>:3608:                                   ; preds = %3606
  %3609 = icmp ugt i64 %1183, 7
  br i1 %3609, label %3610, label %3633

; <label>:3610:                                   ; preds = %3608
  %3611 = trunc i64 %1319 to i16
  %3612 = icmp sgt i16 %3611, -1
  br i1 %3612, label %3633, label %3613

; <label>:3613:                                   ; preds = %3610
  br i1 false, label %3614, label %3632, !llvm.loop !893

; <label>:3614:                                   ; preds = %3613
  br i1 undef, label %3615, label %3633

; <label>:3615:                                   ; preds = %3614
  br i1 undef, label %3633, label %3616

; <label>:3616:                                   ; preds = %3615
  br i1 false, label %3617, label %3632, !llvm.loop !893

; <label>:3617:                                   ; preds = %3616
  br i1 undef, label %3618, label %3633

; <label>:3618:                                   ; preds = %3617
  br i1 undef, label %3633, label %3619

; <label>:3619:                                   ; preds = %3618
  br i1 false, label %3620, label %3632, !llvm.loop !893

; <label>:3620:                                   ; preds = %3619
  br i1 undef, label %3621, label %3633

; <label>:3621:                                   ; preds = %3620
  br i1 undef, label %3633, label %3622

; <label>:3622:                                   ; preds = %3621
  br i1 false, label %3623, label %3632, !llvm.loop !893

; <label>:3623:                                   ; preds = %3622
  br i1 undef, label %3624, label %3633

; <label>:3624:                                   ; preds = %3623
  br i1 undef, label %3633, label %3625

; <label>:3625:                                   ; preds = %3624
  br i1 false, label %3626, label %3632, !llvm.loop !893

; <label>:3626:                                   ; preds = %3625
  br i1 undef, label %3627, label %3633

; <label>:3627:                                   ; preds = %3626
  br i1 undef, label %3633, label %3628

; <label>:3628:                                   ; preds = %3627
  br i1 false, label %3629, label %3632, !llvm.loop !893

; <label>:3629:                                   ; preds = %3628
  br i1 undef, label %3630, label %3633

; <label>:3630:                                   ; preds = %3629
  br i1 undef, label %3633, label %3631

; <label>:3631:                                   ; preds = %3630
  br label %3632

; <label>:3632:                                   ; preds = %3631, %3628, %3625, %3622, %3619, %3616, %3613, %3606
  br label %3635

; <label>:3633:                                   ; preds = %3630, %3629, %3627, %3626, %3624, %3623, %3621, %3620, %3618, %3617, %3615, %3614, %3610, %3608, %3603, %3601
  %3634 = xor i16 %3600, 64
  br label %3635

; <label>:3635:                                   ; preds = %3633, %3632
  %3636 = phi i16 [ %3634, %3633 ], [ %3600, %3632 ]
  br label %3637

; <label>:3637:                                   ; preds = %3635
  %3638 = icmp ugt i64 %1183, 7
  br i1 %3638, label %3639, label %3665

; <label>:3639:                                   ; preds = %3637
  %3640 = trunc i64 %1319 to i8
  %3641 = icmp sgt i8 %3640, -1
  br i1 %3641, label %3665, label %3642

; <label>:3642:                                   ; preds = %3639
  br i1 false, label %3643, label %3664, !llvm.loop !893

; <label>:3643:                                   ; preds = %3642
  br i1 undef, label %3644, label %3665

; <label>:3644:                                   ; preds = %3643
  br i1 undef, label %3665, label %3645

; <label>:3645:                                   ; preds = %3644
  br i1 false, label %3646, label %3664, !llvm.loop !893

; <label>:3646:                                   ; preds = %3645
  br i1 undef, label %3647, label %3665

; <label>:3647:                                   ; preds = %3646
  br i1 undef, label %3665, label %3648

; <label>:3648:                                   ; preds = %3647
  br i1 false, label %3649, label %3664, !llvm.loop !893

; <label>:3649:                                   ; preds = %3648
  br i1 undef, label %3650, label %3665

; <label>:3650:                                   ; preds = %3649
  br i1 undef, label %3665, label %3651

; <label>:3651:                                   ; preds = %3650
  br i1 false, label %3652, label %3664, !llvm.loop !893

; <label>:3652:                                   ; preds = %3651
  br i1 undef, label %3653, label %3665

; <label>:3653:                                   ; preds = %3652
  br i1 undef, label %3665, label %3654

; <label>:3654:                                   ; preds = %3653
  br i1 false, label %3655, label %3664, !llvm.loop !893

; <label>:3655:                                   ; preds = %3654
  br i1 undef, label %3656, label %3665

; <label>:3656:                                   ; preds = %3655
  br i1 undef, label %3665, label %3657

; <label>:3657:                                   ; preds = %3656
  br i1 false, label %3658, label %3664, !llvm.loop !893

; <label>:3658:                                   ; preds = %3657
  br i1 undef, label %3659, label %3665

; <label>:3659:                                   ; preds = %3658
  br i1 undef, label %3665, label %3660

; <label>:3660:                                   ; preds = %3659
  br i1 false, label %3661, label %3664, !llvm.loop !893

; <label>:3661:                                   ; preds = %3660
  br i1 undef, label %3662, label %3665

; <label>:3662:                                   ; preds = %3661
  br i1 undef, label %3665, label %3663

; <label>:3663:                                   ; preds = %3662
  br label %3664

; <label>:3664:                                   ; preds = %3663, %3660, %3657, %3654, %3651, %3648, %3645, %3642
  br label %3667

; <label>:3665:                                   ; preds = %3662, %3661, %3659, %3658, %3656, %3655, %3653, %3652, %3650, %3649, %3647, %3646, %3644, %3643, %3639, %3637
  %3666 = xor i16 %3636, 128
  br label %3667

; <label>:3667:                                   ; preds = %3665, %3664
  %3668 = phi i16 [ %3666, %3665 ], [ %3636, %3664 ]
  br label %1596

; <label>:3669:                                   ; preds = %3236
  %3670 = icmp ugt i64 %2832, 1
  br i1 %3670, label %3671, label %3238

; <label>:3671:                                   ; preds = %3669
  %3672 = and i64 %2968, 512
  %3673 = icmp eq i64 %3672, 0
  br i1 %3673, label %3238, label %3674

; <label>:3674:                                   ; preds = %3671
  %3675 = icmp ugt i64 %2826, 2
  br i1 %3675, label %3676, label %3239, !llvm.loop !893

; <label>:3676:                                   ; preds = %3674
  %3677 = icmp ugt i64 %2832, 2
  br i1 %3677, label %3678, label %3238

; <label>:3678:                                   ; preds = %3676
  %3679 = and i64 %2968, 262144
  %3680 = icmp eq i64 %3679, 0
  br i1 %3680, label %3238, label %3681

; <label>:3681:                                   ; preds = %3678
  %3682 = icmp ugt i64 %2826, 3
  br i1 %3682, label %3683, label %3239, !llvm.loop !893

; <label>:3683:                                   ; preds = %3681
  %3684 = icmp ugt i64 %2832, 3
  br i1 %3684, label %3685, label %3238

; <label>:3685:                                   ; preds = %3683
  %3686 = and i64 %2968, 134217728
  %3687 = icmp eq i64 %3686, 0
  br i1 %3687, label %3238, label %3688

; <label>:3688:                                   ; preds = %3685
  %3689 = icmp ugt i64 %2826, 4
  br i1 %3689, label %3690, label %3239, !llvm.loop !893

; <label>:3690:                                   ; preds = %3688
  %3691 = icmp ugt i64 %2832, 4
  br i1 %3691, label %3692, label %3238

; <label>:3692:                                   ; preds = %3690
  %3693 = and i64 %2968, 68719476736
  %3694 = icmp eq i64 %3693, 0
  br i1 %3694, label %3238, label %3695

; <label>:3695:                                   ; preds = %3692
  %3696 = icmp ugt i64 %2826, 5
  br i1 %3696, label %3697, label %3239, !llvm.loop !893

; <label>:3697:                                   ; preds = %3695
  %3698 = icmp ugt i64 %2832, 5
  br i1 %3698, label %3699, label %3238

; <label>:3699:                                   ; preds = %3697
  %3700 = and i64 %2968, 35184372088832
  %3701 = icmp eq i64 %3700, 0
  br i1 %3701, label %3238, label %3702

; <label>:3702:                                   ; preds = %3699
  %3703 = icmp ugt i64 %2826, 6
  br i1 %3703, label %3704, label %3239, !llvm.loop !893

; <label>:3704:                                   ; preds = %3702
  %3705 = icmp ugt i64 %2832, 6
  br i1 %3705, label %3706, label %3238

; <label>:3706:                                   ; preds = %3704
  %3707 = and i64 %2968, 18014398509481984
  %3708 = icmp eq i64 %3707, 0
  br i1 %3708, label %3238, label %3709

; <label>:3709:                                   ; preds = %3706
  %3710 = icmp ugt i64 %2826, 7
  br i1 %3710, label %3711, label %3239, !llvm.loop !893

; <label>:3711:                                   ; preds = %3709
  %3712 = icmp ugt i64 %2832, 7
  br i1 %3712, label %3713, label %3238

; <label>:3713:                                   ; preds = %3711
  %3714 = icmp sgt i64 %2968, -1
  br i1 %3714, label %3238, label %3715

; <label>:3715:                                   ; preds = %3713
  br label %3239

; <label>:3716:                                   ; preds = %3240
  %3717 = icmp ugt i64 %2832, 1
  br i1 %3717, label %3718, label %3768

; <label>:3718:                                   ; preds = %3716
  %3719 = and i64 %2968, 2
  %3720 = icmp eq i64 %3719, 0
  br i1 %3720, label %3768, label %3721

; <label>:3721:                                   ; preds = %3718
  %3722 = icmp ugt i64 %2826, 1
  br i1 %3722, label %3723, label %3767, !llvm.loop !893

; <label>:3723:                                   ; preds = %3721
  %3724 = icmp ugt i64 %2832, 2
  br i1 %3724, label %3725, label %3768

; <label>:3725:                                   ; preds = %3723
  %3726 = and i64 %2968, 1024
  %3727 = icmp eq i64 %3726, 0
  br i1 %3727, label %3768, label %3728

; <label>:3728:                                   ; preds = %3725
  %3729 = icmp ugt i64 %2826, 2
  br i1 %3729, label %3730, label %3767, !llvm.loop !893

; <label>:3730:                                   ; preds = %3728
  %3731 = icmp ugt i64 %2832, 3
  br i1 %3731, label %3732, label %3768

; <label>:3732:                                   ; preds = %3730
  %3733 = and i64 %2968, 524288
  %3734 = icmp eq i64 %3733, 0
  br i1 %3734, label %3768, label %3735

; <label>:3735:                                   ; preds = %3732
  %3736 = icmp ugt i64 %2826, 3
  br i1 %3736, label %3737, label %3767, !llvm.loop !893

; <label>:3737:                                   ; preds = %3735
  %3738 = icmp ugt i64 %2832, 4
  br i1 %3738, label %3739, label %3768

; <label>:3739:                                   ; preds = %3737
  %3740 = and i64 %2968, 268435456
  %3741 = icmp eq i64 %3740, 0
  br i1 %3741, label %3768, label %3742

; <label>:3742:                                   ; preds = %3739
  %3743 = icmp ugt i64 %2826, 4
  br i1 %3743, label %3744, label %3767, !llvm.loop !893

; <label>:3744:                                   ; preds = %3742
  %3745 = icmp ugt i64 %2832, 5
  br i1 %3745, label %3746, label %3768

; <label>:3746:                                   ; preds = %3744
  %3747 = and i64 %2968, 137438953472
  %3748 = icmp eq i64 %3747, 0
  br i1 %3748, label %3768, label %3749

; <label>:3749:                                   ; preds = %3746
  %3750 = icmp ugt i64 %2826, 5
  br i1 %3750, label %3751, label %3767, !llvm.loop !893

; <label>:3751:                                   ; preds = %3749
  %3752 = icmp ugt i64 %2832, 6
  br i1 %3752, label %3753, label %3768

; <label>:3753:                                   ; preds = %3751
  %3754 = and i64 %2968, 70368744177664
  %3755 = icmp eq i64 %3754, 0
  br i1 %3755, label %3768, label %3756

; <label>:3756:                                   ; preds = %3753
  %3757 = icmp ugt i64 %2826, 6
  br i1 %3757, label %3758, label %3767, !llvm.loop !893

; <label>:3758:                                   ; preds = %3756
  %3759 = icmp ugt i64 %2832, 7
  br i1 %3759, label %3760, label %3768

; <label>:3760:                                   ; preds = %3758
  %3761 = and i64 %2968, 36028797018963968
  %3762 = icmp eq i64 %3761, 0
  br i1 %3762, label %3768, label %3763

; <label>:3763:                                   ; preds = %3760
  br i1 false, label %3764, label %3767, !llvm.loop !893

; <label>:3764:                                   ; preds = %3763
  br i1 undef, label %3765, label %3768

; <label>:3765:                                   ; preds = %3764
  br i1 undef, label %3768, label %3766

; <label>:3766:                                   ; preds = %3765
  br label %3767

; <label>:3767:                                   ; preds = %3766, %3763, %3756, %3749, %3742, %3735, %3728, %3721
  br label %3770

; <label>:3768:                                   ; preds = %3765, %3764, %3760, %3758, %3753, %3751, %3746, %3744, %3739, %3737, %3732, %3730, %3725, %3723, %3718, %3716
  %3769 = and i16 %3241, 253
  br label %3770

; <label>:3770:                                   ; preds = %3768, %3767
  %3771 = phi i16 [ %3769, %3768 ], [ %3241, %3767 ]
  br label %3772

; <label>:3772:                                   ; preds = %3770
  %3773 = icmp ugt i64 %2832, 2
  br i1 %3773, label %3774, label %3820

; <label>:3774:                                   ; preds = %3772
  %3775 = and i64 %2968, 4
  %3776 = icmp eq i64 %3775, 0
  br i1 %3776, label %3820, label %3777

; <label>:3777:                                   ; preds = %3774
  %3778 = icmp ugt i64 %2826, 1
  br i1 %3778, label %3779, label %3819, !llvm.loop !893

; <label>:3779:                                   ; preds = %3777
  %3780 = icmp ugt i64 %2832, 3
  br i1 %3780, label %3781, label %3820

; <label>:3781:                                   ; preds = %3779
  %3782 = and i64 %2968, 2048
  %3783 = icmp eq i64 %3782, 0
  br i1 %3783, label %3820, label %3784

; <label>:3784:                                   ; preds = %3781
  %3785 = icmp ugt i64 %2826, 2
  br i1 %3785, label %3786, label %3819, !llvm.loop !893

; <label>:3786:                                   ; preds = %3784
  %3787 = icmp ugt i64 %2832, 4
  br i1 %3787, label %3788, label %3820

; <label>:3788:                                   ; preds = %3786
  %3789 = and i64 %2968, 1048576
  %3790 = icmp eq i64 %3789, 0
  br i1 %3790, label %3820, label %3791

; <label>:3791:                                   ; preds = %3788
  %3792 = icmp ugt i64 %2826, 3
  br i1 %3792, label %3793, label %3819, !llvm.loop !893

; <label>:3793:                                   ; preds = %3791
  %3794 = icmp ugt i64 %2832, 5
  br i1 %3794, label %3795, label %3820

; <label>:3795:                                   ; preds = %3793
  %3796 = and i64 %2968, 536870912
  %3797 = icmp eq i64 %3796, 0
  br i1 %3797, label %3820, label %3798

; <label>:3798:                                   ; preds = %3795
  %3799 = icmp ugt i64 %2826, 4
  br i1 %3799, label %3800, label %3819, !llvm.loop !893

; <label>:3800:                                   ; preds = %3798
  %3801 = icmp ugt i64 %2832, 6
  br i1 %3801, label %3802, label %3820

; <label>:3802:                                   ; preds = %3800
  %3803 = and i64 %2968, 274877906944
  %3804 = icmp eq i64 %3803, 0
  br i1 %3804, label %3820, label %3805

; <label>:3805:                                   ; preds = %3802
  %3806 = icmp ugt i64 %2826, 5
  br i1 %3806, label %3807, label %3819, !llvm.loop !893

; <label>:3807:                                   ; preds = %3805
  %3808 = icmp ugt i64 %2832, 7
  br i1 %3808, label %3809, label %3820

; <label>:3809:                                   ; preds = %3807
  %3810 = and i64 %2968, 140737488355328
  %3811 = icmp eq i64 %3810, 0
  br i1 %3811, label %3820, label %3812

; <label>:3812:                                   ; preds = %3809
  br i1 false, label %3813, label %3819, !llvm.loop !893

; <label>:3813:                                   ; preds = %3812
  br i1 undef, label %3814, label %3820

; <label>:3814:                                   ; preds = %3813
  br i1 undef, label %3820, label %3815

; <label>:3815:                                   ; preds = %3814
  br i1 false, label %3816, label %3819, !llvm.loop !893

; <label>:3816:                                   ; preds = %3815
  br i1 undef, label %3817, label %3820

; <label>:3817:                                   ; preds = %3816
  br i1 undef, label %3820, label %3818

; <label>:3818:                                   ; preds = %3817
  br label %3819

; <label>:3819:                                   ; preds = %3818, %3815, %3812, %3805, %3798, %3791, %3784, %3777
  br label %3822

; <label>:3820:                                   ; preds = %3817, %3816, %3814, %3813, %3809, %3807, %3802, %3800, %3795, %3793, %3788, %3786, %3781, %3779, %3774, %3772
  %3821 = xor i16 %3771, 4
  br label %3822

; <label>:3822:                                   ; preds = %3820, %3819
  %3823 = phi i16 [ %3821, %3820 ], [ %3771, %3819 ]
  br label %3824

; <label>:3824:                                   ; preds = %3822
  %3825 = icmp ugt i64 %2832, 3
  br i1 %3825, label %3826, label %3868

; <label>:3826:                                   ; preds = %3824
  %3827 = and i64 %2968, 8
  %3828 = icmp eq i64 %3827, 0
  br i1 %3828, label %3868, label %3829

; <label>:3829:                                   ; preds = %3826
  %3830 = icmp ugt i64 %2826, 1
  br i1 %3830, label %3831, label %3867, !llvm.loop !893

; <label>:3831:                                   ; preds = %3829
  %3832 = icmp ugt i64 %2832, 4
  br i1 %3832, label %3833, label %3868

; <label>:3833:                                   ; preds = %3831
  %3834 = and i64 %2968, 4096
  %3835 = icmp eq i64 %3834, 0
  br i1 %3835, label %3868, label %3836

; <label>:3836:                                   ; preds = %3833
  %3837 = icmp ugt i64 %2826, 2
  br i1 %3837, label %3838, label %3867, !llvm.loop !893

; <label>:3838:                                   ; preds = %3836
  %3839 = icmp ugt i64 %2832, 5
  br i1 %3839, label %3840, label %3868

; <label>:3840:                                   ; preds = %3838
  %3841 = and i64 %2968, 2097152
  %3842 = icmp eq i64 %3841, 0
  br i1 %3842, label %3868, label %3843

; <label>:3843:                                   ; preds = %3840
  %3844 = icmp ugt i64 %2826, 3
  br i1 %3844, label %3845, label %3867, !llvm.loop !893

; <label>:3845:                                   ; preds = %3843
  %3846 = icmp ugt i64 %2832, 6
  br i1 %3846, label %3847, label %3868

; <label>:3847:                                   ; preds = %3845
  %3848 = and i64 %2968, 1073741824
  %3849 = icmp eq i64 %3848, 0
  br i1 %3849, label %3868, label %3850

; <label>:3850:                                   ; preds = %3847
  %3851 = icmp ugt i64 %2826, 4
  br i1 %3851, label %3852, label %3867, !llvm.loop !893

; <label>:3852:                                   ; preds = %3850
  %3853 = icmp ugt i64 %2832, 7
  br i1 %3853, label %3854, label %3868

; <label>:3854:                                   ; preds = %3852
  %3855 = and i64 %2968, 549755813888
  %3856 = icmp eq i64 %3855, 0
  br i1 %3856, label %3868, label %3857

; <label>:3857:                                   ; preds = %3854
  br i1 false, label %3858, label %3867, !llvm.loop !893

; <label>:3858:                                   ; preds = %3857
  br i1 undef, label %3859, label %3868

; <label>:3859:                                   ; preds = %3858
  br i1 undef, label %3868, label %3860

; <label>:3860:                                   ; preds = %3859
  br i1 false, label %3861, label %3867, !llvm.loop !893

; <label>:3861:                                   ; preds = %3860
  br i1 undef, label %3862, label %3868

; <label>:3862:                                   ; preds = %3861
  br i1 undef, label %3868, label %3863

; <label>:3863:                                   ; preds = %3862
  br i1 false, label %3864, label %3867, !llvm.loop !893

; <label>:3864:                                   ; preds = %3863
  br i1 undef, label %3865, label %3868

; <label>:3865:                                   ; preds = %3864
  br i1 undef, label %3868, label %3866

; <label>:3866:                                   ; preds = %3865
  br label %3867

; <label>:3867:                                   ; preds = %3866, %3863, %3860, %3857, %3850, %3843, %3836, %3829
  br label %3870

; <label>:3868:                                   ; preds = %3865, %3864, %3862, %3861, %3859, %3858, %3854, %3852, %3847, %3845, %3840, %3838, %3833, %3831, %3826, %3824
  %3869 = xor i16 %3823, 8
  br label %3870

; <label>:3870:                                   ; preds = %3868, %3867
  %3871 = phi i16 [ %3869, %3868 ], [ %3823, %3867 ]
  br label %3872

; <label>:3872:                                   ; preds = %3870
  %3873 = icmp ugt i64 %2832, 4
  br i1 %3873, label %3874, label %3912

; <label>:3874:                                   ; preds = %3872
  %3875 = and i64 %2968, 16
  %3876 = icmp eq i64 %3875, 0
  br i1 %3876, label %3912, label %3877

; <label>:3877:                                   ; preds = %3874
  %3878 = icmp ugt i64 %2826, 1
  br i1 %3878, label %3879, label %3911, !llvm.loop !893

; <label>:3879:                                   ; preds = %3877
  %3880 = icmp ugt i64 %2832, 5
  br i1 %3880, label %3881, label %3912

; <label>:3881:                                   ; preds = %3879
  %3882 = and i64 %2968, 8192
  %3883 = icmp eq i64 %3882, 0
  br i1 %3883, label %3912, label %3884

; <label>:3884:                                   ; preds = %3881
  %3885 = icmp ugt i64 %2826, 2
  br i1 %3885, label %3886, label %3911, !llvm.loop !893

; <label>:3886:                                   ; preds = %3884
  %3887 = icmp ugt i64 %2832, 6
  br i1 %3887, label %3888, label %3912

; <label>:3888:                                   ; preds = %3886
  %3889 = and i64 %2968, 4194304
  %3890 = icmp eq i64 %3889, 0
  br i1 %3890, label %3912, label %3891

; <label>:3891:                                   ; preds = %3888
  %3892 = icmp ugt i64 %2826, 3
  br i1 %3892, label %3893, label %3911, !llvm.loop !893

; <label>:3893:                                   ; preds = %3891
  %3894 = icmp ugt i64 %2832, 7
  br i1 %3894, label %3895, label %3912

; <label>:3895:                                   ; preds = %3893
  %3896 = trunc i64 %2968 to i32
  %3897 = icmp sgt i32 %3896, -1
  br i1 %3897, label %3912, label %3898

; <label>:3898:                                   ; preds = %3895
  br i1 false, label %3899, label %3911, !llvm.loop !893

; <label>:3899:                                   ; preds = %3898
  br i1 undef, label %3900, label %3912

; <label>:3900:                                   ; preds = %3899
  br i1 undef, label %3912, label %3901

; <label>:3901:                                   ; preds = %3900
  br i1 false, label %3902, label %3911, !llvm.loop !893

; <label>:3902:                                   ; preds = %3901
  br i1 undef, label %3903, label %3912

; <label>:3903:                                   ; preds = %3902
  br i1 undef, label %3912, label %3904

; <label>:3904:                                   ; preds = %3903
  br i1 false, label %3905, label %3911, !llvm.loop !893

; <label>:3905:                                   ; preds = %3904
  br i1 undef, label %3906, label %3912

; <label>:3906:                                   ; preds = %3905
  br i1 undef, label %3912, label %3907

; <label>:3907:                                   ; preds = %3906
  br i1 false, label %3908, label %3911, !llvm.loop !893

; <label>:3908:                                   ; preds = %3907
  br i1 undef, label %3909, label %3912

; <label>:3909:                                   ; preds = %3908
  br i1 undef, label %3912, label %3910

; <label>:3910:                                   ; preds = %3909
  br label %3911

; <label>:3911:                                   ; preds = %3910, %3907, %3904, %3901, %3898, %3891, %3884, %3877
  br label %3914

; <label>:3912:                                   ; preds = %3909, %3908, %3906, %3905, %3903, %3902, %3900, %3899, %3895, %3893, %3888, %3886, %3881, %3879, %3874, %3872
  %3913 = xor i16 %3871, 16
  br label %3914

; <label>:3914:                                   ; preds = %3912, %3911
  %3915 = phi i16 [ %3913, %3912 ], [ %3871, %3911 ]
  br label %3916

; <label>:3916:                                   ; preds = %3914
  %3917 = icmp ugt i64 %2832, 5
  br i1 %3917, label %3918, label %3952

; <label>:3918:                                   ; preds = %3916
  %3919 = and i64 %2968, 32
  %3920 = icmp eq i64 %3919, 0
  br i1 %3920, label %3952, label %3921

; <label>:3921:                                   ; preds = %3918
  %3922 = icmp ugt i64 %2826, 1
  br i1 %3922, label %3923, label %3951, !llvm.loop !893

; <label>:3923:                                   ; preds = %3921
  %3924 = icmp ugt i64 %2832, 6
  br i1 %3924, label %3925, label %3952

; <label>:3925:                                   ; preds = %3923
  %3926 = and i64 %2968, 16384
  %3927 = icmp eq i64 %3926, 0
  br i1 %3927, label %3952, label %3928

; <label>:3928:                                   ; preds = %3925
  %3929 = icmp ugt i64 %2826, 2
  br i1 %3929, label %3930, label %3951, !llvm.loop !893

; <label>:3930:                                   ; preds = %3928
  %3931 = icmp ugt i64 %2832, 7
  br i1 %3931, label %3932, label %3952

; <label>:3932:                                   ; preds = %3930
  %3933 = and i64 %2968, 8388608
  %3934 = icmp eq i64 %3933, 0
  br i1 %3934, label %3952, label %3935

; <label>:3935:                                   ; preds = %3932
  br i1 false, label %3936, label %3951, !llvm.loop !893

; <label>:3936:                                   ; preds = %3935
  br i1 undef, label %3937, label %3952

; <label>:3937:                                   ; preds = %3936
  br i1 undef, label %3952, label %3938

; <label>:3938:                                   ; preds = %3937
  br i1 false, label %3939, label %3951, !llvm.loop !893

; <label>:3939:                                   ; preds = %3938
  br i1 undef, label %3940, label %3952

; <label>:3940:                                   ; preds = %3939
  br i1 undef, label %3952, label %3941

; <label>:3941:                                   ; preds = %3940
  br i1 false, label %3942, label %3951, !llvm.loop !893

; <label>:3942:                                   ; preds = %3941
  br i1 undef, label %3943, label %3952

; <label>:3943:                                   ; preds = %3942
  br i1 undef, label %3952, label %3944

; <label>:3944:                                   ; preds = %3943
  br i1 false, label %3945, label %3951, !llvm.loop !893

; <label>:3945:                                   ; preds = %3944
  br i1 undef, label %3946, label %3952

; <label>:3946:                                   ; preds = %3945
  br i1 undef, label %3952, label %3947

; <label>:3947:                                   ; preds = %3946
  br i1 false, label %3948, label %3951, !llvm.loop !893

; <label>:3948:                                   ; preds = %3947
  br i1 undef, label %3949, label %3952

; <label>:3949:                                   ; preds = %3948
  br i1 undef, label %3952, label %3950

; <label>:3950:                                   ; preds = %3949
  br label %3951

; <label>:3951:                                   ; preds = %3950, %3947, %3944, %3941, %3938, %3935, %3928, %3921
  br label %3954

; <label>:3952:                                   ; preds = %3949, %3948, %3946, %3945, %3943, %3942, %3940, %3939, %3937, %3936, %3932, %3930, %3925, %3923, %3918, %3916
  %3953 = xor i16 %3915, 32
  br label %3954

; <label>:3954:                                   ; preds = %3952, %3951
  %3955 = phi i16 [ %3953, %3952 ], [ %3915, %3951 ]
  br label %3956

; <label>:3956:                                   ; preds = %3954
  %3957 = icmp ugt i64 %2832, 6
  br i1 %3957, label %3958, label %3988

; <label>:3958:                                   ; preds = %3956
  %3959 = and i64 %2968, 64
  %3960 = icmp eq i64 %3959, 0
  br i1 %3960, label %3988, label %3961

; <label>:3961:                                   ; preds = %3958
  %3962 = icmp ugt i64 %2826, 1
  br i1 %3962, label %3963, label %3987, !llvm.loop !893

; <label>:3963:                                   ; preds = %3961
  %3964 = icmp ugt i64 %2832, 7
  br i1 %3964, label %3965, label %3988

; <label>:3965:                                   ; preds = %3963
  %3966 = trunc i64 %2968 to i16
  %3967 = icmp sgt i16 %3966, -1
  br i1 %3967, label %3988, label %3968

; <label>:3968:                                   ; preds = %3965
  br i1 false, label %3969, label %3987, !llvm.loop !893

; <label>:3969:                                   ; preds = %3968
  br i1 undef, label %3970, label %3988

; <label>:3970:                                   ; preds = %3969
  br i1 undef, label %3988, label %3971

; <label>:3971:                                   ; preds = %3970
  br i1 false, label %3972, label %3987, !llvm.loop !893

; <label>:3972:                                   ; preds = %3971
  br i1 undef, label %3973, label %3988

; <label>:3973:                                   ; preds = %3972
  br i1 undef, label %3988, label %3974

; <label>:3974:                                   ; preds = %3973
  br i1 false, label %3975, label %3987, !llvm.loop !893

; <label>:3975:                                   ; preds = %3974
  br i1 undef, label %3976, label %3988

; <label>:3976:                                   ; preds = %3975
  br i1 undef, label %3988, label %3977

; <label>:3977:                                   ; preds = %3976
  br i1 false, label %3978, label %3987, !llvm.loop !893

; <label>:3978:                                   ; preds = %3977
  br i1 undef, label %3979, label %3988

; <label>:3979:                                   ; preds = %3978
  br i1 undef, label %3988, label %3980

; <label>:3980:                                   ; preds = %3979
  br i1 false, label %3981, label %3987, !llvm.loop !893

; <label>:3981:                                   ; preds = %3980
  br i1 undef, label %3982, label %3988

; <label>:3982:                                   ; preds = %3981
  br i1 undef, label %3988, label %3983

; <label>:3983:                                   ; preds = %3982
  br i1 false, label %3984, label %3987, !llvm.loop !893

; <label>:3984:                                   ; preds = %3983
  br i1 undef, label %3985, label %3988

; <label>:3985:                                   ; preds = %3984
  br i1 undef, label %3988, label %3986

; <label>:3986:                                   ; preds = %3985
  br label %3987

; <label>:3987:                                   ; preds = %3986, %3983, %3980, %3977, %3974, %3971, %3968, %3961
  br label %3990

; <label>:3988:                                   ; preds = %3985, %3984, %3982, %3981, %3979, %3978, %3976, %3975, %3973, %3972, %3970, %3969, %3965, %3963, %3958, %3956
  %3989 = xor i16 %3955, 64
  br label %3990

; <label>:3990:                                   ; preds = %3988, %3987
  %3991 = phi i16 [ %3989, %3988 ], [ %3955, %3987 ]
  br label %3992

; <label>:3992:                                   ; preds = %3990
  %3993 = icmp ugt i64 %2832, 7
  br i1 %3993, label %3994, label %4020

; <label>:3994:                                   ; preds = %3992
  %3995 = trunc i64 %2968 to i8
  %3996 = icmp sgt i8 %3995, -1
  br i1 %3996, label %4020, label %3997

; <label>:3997:                                   ; preds = %3994
  br i1 false, label %3998, label %4019, !llvm.loop !893

; <label>:3998:                                   ; preds = %3997
  br i1 undef, label %3999, label %4020

; <label>:3999:                                   ; preds = %3998
  br i1 undef, label %4020, label %4000

; <label>:4000:                                   ; preds = %3999
  br i1 false, label %4001, label %4019, !llvm.loop !893

; <label>:4001:                                   ; preds = %4000
  br i1 undef, label %4002, label %4020

; <label>:4002:                                   ; preds = %4001
  br i1 undef, label %4020, label %4003

; <label>:4003:                                   ; preds = %4002
  br i1 false, label %4004, label %4019, !llvm.loop !893

; <label>:4004:                                   ; preds = %4003
  br i1 undef, label %4005, label %4020

; <label>:4005:                                   ; preds = %4004
  br i1 undef, label %4020, label %4006

; <label>:4006:                                   ; preds = %4005
  br i1 false, label %4007, label %4019, !llvm.loop !893

; <label>:4007:                                   ; preds = %4006
  br i1 undef, label %4008, label %4020

; <label>:4008:                                   ; preds = %4007
  br i1 undef, label %4020, label %4009

; <label>:4009:                                   ; preds = %4008
  br i1 false, label %4010, label %4019, !llvm.loop !893

; <label>:4010:                                   ; preds = %4009
  br i1 undef, label %4011, label %4020

; <label>:4011:                                   ; preds = %4010
  br i1 undef, label %4020, label %4012

; <label>:4012:                                   ; preds = %4011
  br i1 false, label %4013, label %4019, !llvm.loop !893

; <label>:4013:                                   ; preds = %4012
  br i1 undef, label %4014, label %4020

; <label>:4014:                                   ; preds = %4013
  br i1 undef, label %4020, label %4015

; <label>:4015:                                   ; preds = %4014
  br i1 false, label %4016, label %4019, !llvm.loop !893

; <label>:4016:                                   ; preds = %4015
  br i1 undef, label %4017, label %4020

; <label>:4017:                                   ; preds = %4016
  br i1 undef, label %4020, label %4018

; <label>:4018:                                   ; preds = %4017
  br label %4019

; <label>:4019:                                   ; preds = %4018, %4015, %4012, %4009, %4006, %4003, %4000, %3997
  br label %4022

; <label>:4020:                                   ; preds = %4017, %4016, %4014, %4013, %4011, %4010, %4008, %4007, %4005, %4004, %4002, %4001, %3999, %3998, %3994, %3992
  %4021 = xor i16 %3991, 128
  br label %4022

; <label>:4022:                                   ; preds = %4020, %4019
  %4023 = phi i16 [ %4021, %4020 ], [ %3991, %4019 ]
  br label %3245
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #7

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9PCMPISTRII3MVnI8vec128_tEEEP6MemoryS5_R5State2VnIS2_ET_2InIhE(%struct.Memory*, %struct.State* dereferenceable(2688), i8* nocapture readonly, i64, i64) #0 {
  %6 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %7 = alloca %"class.(anonymous namespace)::BitMatrix", align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca { i64, i64 }, align 8
  %12 = trunc i64 %4 to i8
  %13 = trunc i64 %4 to i2
  switch i2 %13, label %3300 [
    i2 0, label %14
    i2 1, label %1086
    i2 -2, label %1657
    i2 -1, label %2729
  ]

; <label>:14:                                     ; preds = %5
  %15 = bitcast <2 x i64>* %8 to { i64, i64 }*
  %16 = bitcast <2 x i64>* %8 to %struct.uint8v16_t*
  %17 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %17) #23
  %18 = bitcast i8* %2 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 1
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i64 0, i32 1
  store <2 x i64> %19, <2 x i64>* %8, align 16
  %21 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %22 = add i64 %3, 1
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %22) #22
  %24 = add i64 %3, 2
  %25 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %24) #22
  %26 = add i64 %3, 3
  %27 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %26) #22
  %28 = add i64 %3, 4
  %29 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %28) #22
  %30 = add i64 %3, 5
  %31 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %30) #22
  %32 = add i64 %3, 6
  %33 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %32) #22
  %34 = add i64 %3, 7
  %35 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %34) #22
  %36 = add i64 %3, 8
  %37 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %36) #22
  %38 = add i64 %3, 9
  %39 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %38) #22
  %40 = add i64 %3, 10
  %41 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %40) #22
  %42 = add i64 %3, 11
  %43 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %42) #22
  %44 = add i64 %3, 12
  %45 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %44) #22
  %46 = add i64 %3, 13
  %47 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %46) #22
  %48 = add i64 %3, 14
  %49 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %48) #22
  %50 = add i64 %3, 15
  %51 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %50) #22
  %52 = bitcast %"class.(anonymous namespace)::BitMatrix"* %7 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %52) #23
  call void @llvm.memset.p0i8.i64(i8* nonnull %52, i8 0, i64 32, i32 8, i1 false) #23
  %53 = lshr i8 %12, 2
  %54 = extractelement <2 x i64> %19, i32 0
  %55 = trunc i64 %54 to i8
  %56 = icmp eq i8 %55, 0
  %57 = select i1 %56, i64 0, i64 16
  %58 = icmp eq i8 %21, 0
  %59 = select i1 %58, i64 0, i64 16
  %60 = and i64 %54, 65280
  %61 = icmp eq i64 %60, 0
  %62 = xor i1 %56, true
  %63 = and i1 %61, %62
  %64 = select i1 %63, i64 1, i64 %57
  %65 = icmp eq i8 %23, 0
  %66 = xor i1 %58, true
  %67 = and i1 %65, %66
  %68 = select i1 %67, i64 1, i64 %59
  %69 = and i64 %54, 16711680
  %70 = icmp eq i64 %69, 0
  %71 = icmp ugt i64 %64, 2
  %72 = and i1 %70, %71
  %73 = select i1 %72, i64 2, i64 %64
  %74 = icmp eq i8 %25, 0
  %75 = icmp ugt i64 %68, 2
  %76 = and i1 %74, %75
  %77 = select i1 %76, i64 2, i64 %68
  %78 = and i64 %54, 4278190080
  %79 = icmp eq i64 %78, 0
  %80 = icmp ugt i64 %73, 3
  %81 = and i1 %79, %80
  %82 = select i1 %81, i64 3, i64 %73
  %83 = icmp eq i8 %27, 0
  %84 = icmp ugt i64 %77, 3
  %85 = and i1 %83, %84
  %86 = select i1 %85, i64 3, i64 %77
  %87 = and i64 %54, 1095216660480
  %88 = icmp eq i64 %87, 0
  %89 = icmp ugt i64 %82, 4
  %90 = and i1 %88, %89
  %91 = select i1 %90, i64 4, i64 %82
  %92 = icmp eq i8 %29, 0
  %93 = icmp ugt i64 %86, 4
  %94 = and i1 %92, %93
  %95 = select i1 %94, i64 4, i64 %86
  %96 = and i64 %54, 280375465082880
  %97 = icmp eq i64 %96, 0
  %98 = icmp ugt i64 %91, 5
  %99 = and i1 %97, %98
  %100 = select i1 %99, i64 5, i64 %91
  %101 = icmp eq i8 %31, 0
  %102 = icmp ugt i64 %95, 5
  %103 = and i1 %101, %102
  %104 = select i1 %103, i64 5, i64 %95
  %105 = and i64 %54, 71776119061217280
  %106 = icmp eq i64 %105, 0
  %107 = icmp ugt i64 %100, 6
  %108 = and i1 %106, %107
  %109 = select i1 %108, i64 6, i64 %100
  %110 = icmp eq i8 %33, 0
  %111 = icmp ugt i64 %104, 6
  %112 = and i1 %110, %111
  %113 = select i1 %112, i64 6, i64 %104
  %114 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 7
  %115 = load i8, i8* %114, align 1, !tbaa !868
  %116 = icmp eq i8 %115, 0
  %117 = icmp ugt i64 %109, 7
  %118 = and i1 %116, %117
  %119 = select i1 %118, i64 7, i64 %109
  %120 = icmp eq i8 %35, 0
  %121 = icmp ugt i64 %113, 7
  %122 = and i1 %120, %121
  %123 = select i1 %122, i64 7, i64 %113
  %124 = bitcast i64* %20 to i8*
  %125 = load i8, i8* %124, align 8, !tbaa !868
  %126 = icmp eq i8 %125, 0
  %127 = icmp ugt i64 %119, 8
  %128 = and i1 %126, %127
  %129 = select i1 %128, i64 8, i64 %119
  %130 = icmp eq i8 %37, 0
  %131 = icmp ugt i64 %123, 8
  %132 = and i1 %130, %131
  %133 = select i1 %132, i64 8, i64 %123
  %134 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 9
  %135 = load i8, i8* %134, align 1, !tbaa !868
  %136 = icmp eq i8 %135, 0
  %137 = icmp ugt i64 %129, 9
  %138 = and i1 %136, %137
  %139 = select i1 %138, i64 9, i64 %129
  %140 = icmp eq i8 %39, 0
  %141 = icmp ugt i64 %133, 9
  %142 = and i1 %140, %141
  %143 = select i1 %142, i64 9, i64 %133
  %144 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 10
  %145 = load i8, i8* %144, align 2, !tbaa !868
  %146 = icmp eq i8 %145, 0
  %147 = icmp ugt i64 %139, 10
  %148 = and i1 %146, %147
  %149 = select i1 %148, i64 10, i64 %139
  %150 = icmp eq i8 %41, 0
  %151 = icmp ugt i64 %143, 10
  %152 = and i1 %150, %151
  %153 = select i1 %152, i64 10, i64 %143
  %154 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 11
  %155 = load i8, i8* %154, align 1, !tbaa !868
  %156 = icmp eq i8 %155, 0
  %157 = icmp ugt i64 %149, 11
  %158 = and i1 %156, %157
  %159 = select i1 %158, i64 11, i64 %149
  %160 = icmp eq i8 %43, 0
  %161 = icmp ugt i64 %153, 11
  %162 = and i1 %160, %161
  %163 = select i1 %162, i64 11, i64 %153
  %164 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 12
  %165 = load i8, i8* %164, align 4, !tbaa !868
  %166 = icmp eq i8 %165, 0
  %167 = icmp ugt i64 %159, 12
  %168 = and i1 %166, %167
  %169 = select i1 %168, i64 12, i64 %159
  %170 = icmp eq i8 %45, 0
  %171 = icmp ugt i64 %163, 12
  %172 = and i1 %170, %171
  %173 = select i1 %172, i64 12, i64 %163
  %174 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 13
  %175 = load i8, i8* %174, align 1, !tbaa !868
  %176 = icmp eq i8 %175, 0
  %177 = icmp ugt i64 %169, 13
  %178 = and i1 %176, %177
  %179 = select i1 %178, i64 13, i64 %169
  %180 = icmp eq i8 %47, 0
  %181 = icmp ugt i64 %173, 13
  %182 = and i1 %180, %181
  %183 = select i1 %182, i64 13, i64 %173
  %184 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 14
  %185 = load i8, i8* %184, align 2, !tbaa !868
  %186 = icmp eq i8 %185, 0
  %187 = icmp ugt i64 %179, 14
  %188 = and i1 %186, %187
  %189 = select i1 %188, i64 14, i64 %179
  %190 = icmp eq i8 %49, 0
  %191 = icmp ugt i64 %183, 14
  %192 = and i1 %190, %191
  %193 = select i1 %192, i64 14, i64 %183
  %194 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 15
  %195 = load i8, i8* %194, align 1, !tbaa !868
  %196 = icmp eq i8 %195, 0
  %197 = icmp ugt i64 %189, 15
  %198 = and i1 %196, %197
  %199 = icmp eq i8 %51, 0
  %200 = icmp ugt i64 %193, 15
  %201 = and i1 %199, %200
  %202 = select i1 %201, i64 15, i64 %193
  %203 = trunc i8 %53 to i2
  %204 = icmp eq i2 %203, 1
  br label %208

; <label>:205:                                    ; preds = %251
  %206 = select i1 %198, i64 15, i64 %189
  %207 = lshr i8 %12, 4
  switch i2 %203, label %779 [
    i2 0, label %372
    i2 1, label %403
    i2 -2, label %444
    i2 -1, label %739
  ]

; <label>:208:                                    ; preds = %251, %14
  %209 = phi i64 [ 0, %14 ], [ %257, %251 ]
  %210 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %16, i64 0, i32 0, i64 %209
  %211 = load i8, i8* %210, align 1, !tbaa !868
  %212 = shl i64 %209, 4
  br i1 %204, label %220, label %213

; <label>:213:                                    ; preds = %208
  %214 = icmp eq i8 %211, %21
  %215 = lshr i64 %209, 2
  %216 = and i64 %215, 288230376151711743
  %217 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %216
  %218 = and i64 %212, 48
  %219 = shl i64 1, %218
  br i1 %214, label %259, label %262

; <label>:220:                                    ; preds = %208
  %221 = and i64 %209, 1
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %237, label %223

; <label>:223:                                    ; preds = %220
  %224 = icmp ugt i8 %21, %211
  %225 = lshr i64 %209, 2
  %226 = and i64 %225, 288230376151711743
  %227 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %226
  %228 = and i64 %212, 48
  %229 = shl i64 1, %228
  br i1 %224, label %233, label %230

; <label>:230:                                    ; preds = %223
  %231 = load i64, i64* %227, align 8, !tbaa !870
  %232 = or i64 %231, %229
  br label %856

; <label>:233:                                    ; preds = %223
  %234 = xor i64 %229, -1
  %235 = load i64, i64* %227, align 8, !tbaa !870
  %236 = and i64 %235, %234
  br label %856

; <label>:237:                                    ; preds = %220
  %238 = icmp ult i8 %21, %211
  %239 = lshr i64 %209, 2
  %240 = and i64 %239, 288230376151711743
  %241 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %240
  %242 = and i64 %212, 48
  %243 = shl i64 1, %242
  br i1 %238, label %247, label %244

; <label>:244:                                    ; preds = %237
  %245 = load i64, i64* %241, align 8, !tbaa !870
  %246 = or i64 %245, %243
  br label %962

; <label>:247:                                    ; preds = %237
  %248 = xor i64 %243, -1
  %249 = load i64, i64* %241, align 8, !tbaa !870
  %250 = and i64 %249, %248
  br label %962

; <label>:251:                                    ; preds = %962, %856, %266
  %252 = phi i64 [ %1067, %962 ], [ %961, %856 ], [ %370, %266 ]
  %253 = phi i64 [ %1066, %962 ], [ %960, %856 ], [ %371, %266 ]
  %254 = phi i1 [ %1062, %962 ], [ %956, %856 ], [ %366, %266 ]
  %255 = phi i64* [ %241, %962 ], [ %227, %856 ], [ %217, %266 ]
  %256 = select i1 %254, i64 %253, i64 %252
  store i64 %256, i64* %255, align 8, !tbaa !870
  %257 = add nuw nsw i64 %209, 1
  %258 = icmp eq i64 %257, 16
  br i1 %258, label %205, label %208

; <label>:259:                                    ; preds = %213
  %260 = load i64, i64* %217, align 8, !tbaa !870
  %261 = or i64 %260, %219
  br label %266

; <label>:262:                                    ; preds = %213
  %263 = xor i64 %219, -1
  %264 = load i64, i64* %217, align 8, !tbaa !870
  %265 = and i64 %264, %263
  br label %266

; <label>:266:                                    ; preds = %262, %259
  %267 = phi i64 [ %265, %262 ], [ %261, %259 ]
  %268 = icmp eq i8 %211, %23
  %269 = or i64 %218, 1
  %270 = shl i64 1, %269
  %271 = xor i64 %270, -1
  %272 = and i64 %267, %271
  %273 = or i64 %267, %270
  %274 = select i1 %268, i64 %273, i64 %272
  %275 = icmp eq i8 %211, %25
  %276 = or i64 %218, 2
  %277 = shl i64 1, %276
  %278 = xor i64 %277, -1
  %279 = and i64 %274, %278
  %280 = or i64 %274, %277
  %281 = select i1 %275, i64 %280, i64 %279
  %282 = icmp eq i8 %211, %27
  %283 = or i64 %218, 3
  %284 = shl i64 1, %283
  %285 = xor i64 %284, -1
  %286 = and i64 %281, %285
  %287 = or i64 %281, %284
  %288 = select i1 %282, i64 %287, i64 %286
  %289 = icmp eq i8 %211, %29
  %290 = or i64 %218, 4
  %291 = shl i64 1, %290
  %292 = xor i64 %291, -1
  %293 = and i64 %288, %292
  %294 = or i64 %288, %291
  %295 = select i1 %289, i64 %294, i64 %293
  %296 = icmp eq i8 %211, %31
  %297 = or i64 %218, 5
  %298 = shl i64 1, %297
  %299 = xor i64 %298, -1
  %300 = and i64 %295, %299
  %301 = or i64 %295, %298
  %302 = select i1 %296, i64 %301, i64 %300
  %303 = icmp eq i8 %211, %33
  %304 = or i64 %218, 6
  %305 = shl i64 1, %304
  %306 = xor i64 %305, -1
  %307 = and i64 %302, %306
  %308 = or i64 %302, %305
  %309 = select i1 %303, i64 %308, i64 %307
  %310 = icmp eq i8 %211, %35
  %311 = or i64 %218, 7
  %312 = shl i64 1, %311
  %313 = xor i64 %312, -1
  %314 = and i64 %309, %313
  %315 = or i64 %309, %312
  %316 = select i1 %310, i64 %315, i64 %314
  %317 = icmp eq i8 %211, %37
  %318 = or i64 %218, 8
  %319 = shl i64 1, %318
  %320 = xor i64 %319, -1
  %321 = and i64 %316, %320
  %322 = or i64 %316, %319
  %323 = select i1 %317, i64 %322, i64 %321
  %324 = icmp eq i8 %211, %39
  %325 = or i64 %218, 9
  %326 = shl i64 1, %325
  %327 = xor i64 %326, -1
  %328 = and i64 %323, %327
  %329 = or i64 %323, %326
  %330 = select i1 %324, i64 %329, i64 %328
  %331 = icmp eq i8 %211, %41
  %332 = or i64 %218, 10
  %333 = shl i64 1, %332
  %334 = xor i64 %333, -1
  %335 = and i64 %330, %334
  %336 = or i64 %330, %333
  %337 = select i1 %331, i64 %336, i64 %335
  %338 = icmp eq i8 %211, %43
  %339 = or i64 %218, 11
  %340 = shl i64 1, %339
  %341 = xor i64 %340, -1
  %342 = and i64 %337, %341
  %343 = or i64 %337, %340
  %344 = select i1 %338, i64 %343, i64 %342
  %345 = icmp eq i8 %211, %45
  %346 = or i64 %218, 12
  %347 = shl i64 1, %346
  %348 = xor i64 %347, -1
  %349 = and i64 %344, %348
  %350 = or i64 %344, %347
  %351 = select i1 %345, i64 %350, i64 %349
  %352 = icmp eq i8 %211, %47
  %353 = or i64 %218, 13
  %354 = shl i64 1, %353
  %355 = xor i64 %354, -1
  %356 = and i64 %351, %355
  %357 = or i64 %351, %354
  %358 = select i1 %352, i64 %357, i64 %356
  %359 = icmp eq i8 %211, %49
  %360 = or i64 %218, 14
  %361 = shl i64 1, %360
  %362 = xor i64 %361, -1
  %363 = and i64 %358, %362
  %364 = or i64 %358, %361
  %365 = select i1 %359, i64 %364, i64 %363
  store i64 %365, i64* %217, align 8, !tbaa !870
  %366 = icmp eq i8 %211, %51
  %367 = or i64 %218, 15
  %368 = shl i64 1, %367
  %369 = xor i64 %368, -1
  %370 = and i64 %365, %369
  %371 = or i64 %365, %368
  br label %251

; <label>:372:                                    ; preds = %205
  %373 = icmp eq i64 %202, 0
  %374 = icmp eq i64 %206, 0
  %375 = or i1 %373, %374
  br i1 %375, label %783, label %376

; <label>:376:                                    ; preds = %372
  br label %377

; <label>:377:                                    ; preds = %398, %376
  %378 = phi i64 [ %400, %398 ], [ 0, %376 ]
  %379 = phi i16 [ %401, %398 ], [ 1, %376 ]
  %380 = phi i16 [ %399, %398 ], [ 0, %376 ]
  br label %383

; <label>:381:                                    ; preds = %383
  %382 = icmp ult i64 %394, %206
  br i1 %382, label %383, label %397, !llvm.loop !888

; <label>:383:                                    ; preds = %381, %377
  %384 = phi i64 [ 0, %377 ], [ %394, %381 ]
  %385 = shl i64 %384, 4
  %386 = add i64 %385, %378
  %387 = lshr i64 %386, 6
  %388 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %387
  %389 = load i64, i64* %388, align 8, !tbaa !870
  %390 = and i64 %386, 63
  %391 = shl i64 1, %390
  %392 = and i64 %391, %389
  %393 = icmp eq i64 %392, 0
  %394 = add nuw i64 %384, 1
  br i1 %393, label %381, label %395

; <label>:395:                                    ; preds = %383
  %396 = or i16 %380, %379
  br label %398

; <label>:397:                                    ; preds = %381
  br label %398

; <label>:398:                                    ; preds = %397, %395
  %399 = phi i16 [ %396, %395 ], [ %380, %397 ]
  %400 = add nuw i64 %378, 1
  %401 = shl i16 %379, 1
  %402 = icmp eq i64 %400, %202
  br i1 %402, label %780, label %377

; <label>:403:                                    ; preds = %205
  %404 = icmp eq i64 %202, 0
  br i1 %404, label %783, label %405

; <label>:405:                                    ; preds = %403
  %406 = add i64 %206, -1
  %407 = icmp eq i64 %406, 0
  br i1 %407, label %783, label %408

; <label>:408:                                    ; preds = %405
  br label %409

; <label>:409:                                    ; preds = %440, %408
  %410 = phi i16 [ %436, %440 ], [ 0, %408 ]
  %411 = phi i16 [ %442, %440 ], [ 1, %408 ]
  %412 = phi i64 [ %441, %440 ], [ 0, %408 ]
  br label %413

; <label>:413:                                    ; preds = %413, %409
  %414 = phi i16 [ %410, %409 ], [ %436, %413 ]
  %415 = phi i64 [ 0, %409 ], [ %437, %413 ]
  %416 = shl i64 %415, 4
  %417 = add i64 %416, %412
  %418 = lshr i64 %417, 6
  %419 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %418
  %420 = load i64, i64* %419, align 8, !tbaa !870
  %421 = and i64 %417, 63
  %422 = shl i64 1, %421
  %423 = and i64 %422, %420
  %424 = or i64 %416, 16
  %425 = add i64 %424, %412
  %426 = lshr i64 %425, 6
  %427 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %426
  %428 = load i64, i64* %427, align 8, !tbaa !870
  %429 = and i64 %425, 63
  %430 = shl i64 1, %429
  %431 = and i64 %430, %428
  %432 = icmp eq i64 %423, 0
  %433 = icmp eq i64 %431, 0
  %434 = or i1 %432, %433
  %435 = select i1 %434, i16 0, i16 %411
  %436 = or i16 %435, %414
  %437 = add i64 %415, 2
  %438 = icmp ult i64 %437, %406
  %439 = and i1 %438, %434
  br i1 %439, label %413, label %440, !llvm.loop !889

; <label>:440:                                    ; preds = %413
  %441 = add nuw i64 %412, 1
  %442 = shl i16 %411, 1
  %443 = icmp eq i64 %441, %202
  br i1 %443, label %781, label %409

; <label>:444:                                    ; preds = %205
  %445 = icmp ne i64 %206, 0
  %446 = icmp ne i64 %202, 0
  %447 = and i1 %446, %445
  br i1 %447, label %448, label %453

; <label>:448:                                    ; preds = %444
  %449 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %450 = load i64, i64* %449, align 8, !tbaa !870
  %451 = and i64 %450, 1
  %452 = icmp ne i64 %451, 0
  br label %458

; <label>:453:                                    ; preds = %444
  br i1 %445, label %458, label %454

; <label>:454:                                    ; preds = %453
  %455 = xor i1 %446, true
  %456 = zext i1 %455 to i16
  %457 = icmp ugt i64 %202, 1
  br label %465

; <label>:458:                                    ; preds = %453, %448
  %459 = phi i1 [ false, %453 ], [ %452, %448 ]
  %460 = zext i1 %459 to i16
  %461 = icmp ugt i64 %206, 1
  %462 = icmp ugt i64 %202, 1
  %463 = and i1 %462, %461
  br i1 %463, label %471, label %464

; <label>:464:                                    ; preds = %458
  br i1 %461, label %478, label %465

; <label>:465:                                    ; preds = %464, %454
  %466 = phi i16 [ %456, %454 ], [ %460, %464 ]
  %467 = phi i1 [ %457, %454 ], [ %462, %464 ]
  %468 = select i1 %467, i16 0, i16 2
  %469 = or i16 %468, %466
  %470 = icmp ugt i64 %202, 2
  br label %484

; <label>:471:                                    ; preds = %458
  %472 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %473 = load i64, i64* %472, align 8, !tbaa !870
  %474 = and i64 %473, 131072
  %475 = icmp ne i64 %474, 0
  %476 = select i1 %475, i16 2, i16 0
  %477 = or i16 %476, %460
  br label %478

; <label>:478:                                    ; preds = %471, %464
  %479 = phi i16 [ %460, %464 ], [ %477, %471 ]
  %480 = icmp ugt i64 %206, 2
  %481 = icmp ugt i64 %202, 2
  %482 = and i1 %481, %480
  br i1 %482, label %490, label %483

; <label>:483:                                    ; preds = %478
  br i1 %480, label %497, label %484

; <label>:484:                                    ; preds = %483, %465
  %485 = phi i16 [ %469, %465 ], [ %479, %483 ]
  %486 = phi i1 [ %470, %465 ], [ %481, %483 ]
  %487 = select i1 %486, i16 0, i16 4
  %488 = or i16 %487, %485
  %489 = icmp ugt i64 %202, 3
  br label %503

; <label>:490:                                    ; preds = %478
  %491 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %492 = load i64, i64* %491, align 8, !tbaa !870
  %493 = and i64 %492, 17179869184
  %494 = icmp ne i64 %493, 0
  %495 = select i1 %494, i16 4, i16 0
  %496 = or i16 %495, %479
  br label %497

; <label>:497:                                    ; preds = %490, %483
  %498 = phi i16 [ %479, %483 ], [ %496, %490 ]
  %499 = icmp ugt i64 %206, 3
  %500 = icmp ugt i64 %202, 3
  %501 = and i1 %500, %499
  br i1 %501, label %509, label %502

; <label>:502:                                    ; preds = %497
  br i1 %499, label %516, label %503

; <label>:503:                                    ; preds = %502, %484
  %504 = phi i16 [ %488, %484 ], [ %498, %502 ]
  %505 = phi i1 [ %489, %484 ], [ %500, %502 ]
  %506 = select i1 %505, i16 0, i16 8
  %507 = or i16 %506, %504
  %508 = icmp ugt i64 %202, 4
  br label %522

; <label>:509:                                    ; preds = %497
  %510 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %511 = load i64, i64* %510, align 8, !tbaa !870
  %512 = and i64 %511, 2251799813685248
  %513 = icmp ne i64 %512, 0
  %514 = select i1 %513, i16 8, i16 0
  %515 = or i16 %514, %498
  br label %516

; <label>:516:                                    ; preds = %509, %502
  %517 = phi i16 [ %498, %502 ], [ %515, %509 ]
  %518 = icmp ugt i64 %206, 4
  %519 = icmp ugt i64 %202, 4
  %520 = and i1 %519, %518
  br i1 %520, label %528, label %521

; <label>:521:                                    ; preds = %516
  br i1 %518, label %534, label %522

; <label>:522:                                    ; preds = %521, %503
  %523 = phi i16 [ %507, %503 ], [ %517, %521 ]
  %524 = phi i1 [ %508, %503 ], [ %519, %521 ]
  %525 = select i1 %524, i16 0, i16 16
  %526 = or i16 %525, %523
  %527 = icmp ugt i64 %202, 5
  br label %540

; <label>:528:                                    ; preds = %516
  %529 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %530 = load i64, i64* %529, align 8, !tbaa !870
  %531 = trunc i64 %530 to i16
  %532 = and i16 %531, 16
  %533 = or i16 %532, %517
  br label %534

; <label>:534:                                    ; preds = %528, %521
  %535 = phi i16 [ %517, %521 ], [ %533, %528 ]
  %536 = icmp ugt i64 %206, 5
  %537 = icmp ugt i64 %202, 5
  %538 = and i1 %537, %536
  br i1 %538, label %546, label %539

; <label>:539:                                    ; preds = %534
  br i1 %536, label %553, label %540

; <label>:540:                                    ; preds = %539, %522
  %541 = phi i16 [ %526, %522 ], [ %535, %539 ]
  %542 = phi i1 [ %527, %522 ], [ %537, %539 ]
  %543 = select i1 %542, i16 0, i16 32
  %544 = or i16 %543, %541
  %545 = icmp ugt i64 %202, 6
  br label %559

; <label>:546:                                    ; preds = %534
  %547 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %548 = load i64, i64* %547, align 8, !tbaa !870
  %549 = and i64 %548, 2097152
  %550 = icmp ne i64 %549, 0
  %551 = select i1 %550, i16 32, i16 0
  %552 = or i16 %551, %535
  br label %553

; <label>:553:                                    ; preds = %546, %539
  %554 = phi i16 [ %535, %539 ], [ %552, %546 ]
  %555 = icmp ugt i64 %206, 6
  %556 = icmp ugt i64 %202, 6
  %557 = and i1 %556, %555
  br i1 %557, label %565, label %558

; <label>:558:                                    ; preds = %553
  br i1 %555, label %572, label %559

; <label>:559:                                    ; preds = %558, %540
  %560 = phi i16 [ %544, %540 ], [ %554, %558 ]
  %561 = phi i1 [ %545, %540 ], [ %556, %558 ]
  %562 = select i1 %561, i16 0, i16 64
  %563 = or i16 %562, %560
  %564 = icmp ugt i64 %202, 7
  br label %578

; <label>:565:                                    ; preds = %553
  %566 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %567 = load i64, i64* %566, align 8, !tbaa !870
  %568 = and i64 %567, 274877906944
  %569 = icmp ne i64 %568, 0
  %570 = select i1 %569, i16 64, i16 0
  %571 = or i16 %570, %554
  br label %572

; <label>:572:                                    ; preds = %565, %558
  %573 = phi i16 [ %554, %558 ], [ %571, %565 ]
  %574 = icmp ugt i64 %206, 7
  %575 = icmp ugt i64 %202, 7
  %576 = and i1 %575, %574
  br i1 %576, label %584, label %577

; <label>:577:                                    ; preds = %572
  br i1 %574, label %591, label %578

; <label>:578:                                    ; preds = %577, %559
  %579 = phi i16 [ %563, %559 ], [ %573, %577 ]
  %580 = phi i1 [ %564, %559 ], [ %575, %577 ]
  %581 = select i1 %580, i16 0, i16 128
  %582 = or i16 %581, %579
  %583 = icmp ugt i64 %202, 8
  br label %597

; <label>:584:                                    ; preds = %572
  %585 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 1
  %586 = load i64, i64* %585, align 8, !tbaa !870
  %587 = and i64 %586, 36028797018963968
  %588 = icmp ne i64 %587, 0
  %589 = select i1 %588, i16 128, i16 0
  %590 = or i16 %589, %573
  br label %591

; <label>:591:                                    ; preds = %584, %577
  %592 = phi i16 [ %573, %577 ], [ %590, %584 ]
  %593 = icmp ugt i64 %206, 8
  %594 = icmp ugt i64 %202, 8
  %595 = and i1 %594, %593
  br i1 %595, label %603, label %596

; <label>:596:                                    ; preds = %591
  br i1 %593, label %609, label %597

; <label>:597:                                    ; preds = %596, %578
  %598 = phi i16 [ %582, %578 ], [ %592, %596 ]
  %599 = phi i1 [ %583, %578 ], [ %594, %596 ]
  %600 = select i1 %599, i16 0, i16 256
  %601 = or i16 %600, %598
  %602 = icmp ugt i64 %202, 9
  br label %615

; <label>:603:                                    ; preds = %591
  %604 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %605 = load i64, i64* %604, align 8, !tbaa !870
  %606 = trunc i64 %605 to i16
  %607 = and i16 %606, 256
  %608 = or i16 %607, %592
  br label %609

; <label>:609:                                    ; preds = %603, %596
  %610 = phi i16 [ %592, %596 ], [ %608, %603 ]
  %611 = icmp ugt i64 %206, 9
  %612 = icmp ugt i64 %202, 9
  %613 = and i1 %612, %611
  br i1 %613, label %621, label %614

; <label>:614:                                    ; preds = %609
  br i1 %611, label %628, label %615

; <label>:615:                                    ; preds = %614, %597
  %616 = phi i16 [ %601, %597 ], [ %610, %614 ]
  %617 = phi i1 [ %602, %597 ], [ %612, %614 ]
  %618 = select i1 %617, i16 0, i16 512
  %619 = or i16 %616, %618
  %620 = icmp ugt i64 %202, 10
  br label %634

; <label>:621:                                    ; preds = %609
  %622 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %623 = load i64, i64* %622, align 8, !tbaa !870
  %624 = and i64 %623, 33554432
  %625 = icmp ne i64 %624, 0
  %626 = select i1 %625, i16 512, i16 0
  %627 = or i16 %626, %610
  br label %628

; <label>:628:                                    ; preds = %621, %614
  %629 = phi i16 [ %610, %614 ], [ %627, %621 ]
  %630 = icmp ugt i64 %206, 10
  %631 = icmp ugt i64 %202, 10
  %632 = and i1 %631, %630
  br i1 %632, label %640, label %633

; <label>:633:                                    ; preds = %628
  br i1 %630, label %647, label %634

; <label>:634:                                    ; preds = %633, %615
  %635 = phi i16 [ %619, %615 ], [ %629, %633 ]
  %636 = phi i1 [ %620, %615 ], [ %631, %633 ]
  %637 = select i1 %636, i16 0, i16 1024
  %638 = or i16 %637, %635
  %639 = icmp ugt i64 %202, 11
  br label %653

; <label>:640:                                    ; preds = %628
  %641 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %642 = load i64, i64* %641, align 8, !tbaa !870
  %643 = and i64 %642, 4398046511104
  %644 = icmp ne i64 %643, 0
  %645 = select i1 %644, i16 1024, i16 0
  %646 = or i16 %645, %629
  br label %647

; <label>:647:                                    ; preds = %640, %633
  %648 = phi i16 [ %629, %633 ], [ %646, %640 ]
  %649 = icmp ugt i64 %206, 11
  %650 = icmp ugt i64 %202, 11
  %651 = and i1 %650, %649
  br i1 %651, label %659, label %652

; <label>:652:                                    ; preds = %647
  br i1 %649, label %666, label %653

; <label>:653:                                    ; preds = %652, %634
  %654 = phi i16 [ %638, %634 ], [ %648, %652 ]
  %655 = phi i1 [ %639, %634 ], [ %650, %652 ]
  %656 = select i1 %655, i16 0, i16 2048
  %657 = or i16 %656, %654
  %658 = icmp ugt i64 %202, 12
  br label %672

; <label>:659:                                    ; preds = %647
  %660 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 2
  %661 = load i64, i64* %660, align 8, !tbaa !870
  %662 = and i64 %661, 576460752303423488
  %663 = icmp ne i64 %662, 0
  %664 = select i1 %663, i16 2048, i16 0
  %665 = or i16 %664, %648
  br label %666

; <label>:666:                                    ; preds = %659, %652
  %667 = phi i16 [ %648, %652 ], [ %665, %659 ]
  %668 = icmp ugt i64 %206, 12
  %669 = icmp ugt i64 %202, 12
  %670 = and i1 %669, %668
  br i1 %670, label %678, label %671

; <label>:671:                                    ; preds = %666
  br i1 %668, label %684, label %672

; <label>:672:                                    ; preds = %671, %653
  %673 = phi i16 [ %657, %653 ], [ %667, %671 ]
  %674 = phi i1 [ %658, %653 ], [ %669, %671 ]
  %675 = select i1 %674, i16 0, i16 4096
  %676 = or i16 %675, %673
  %677 = icmp ugt i64 %202, 13
  br label %690

; <label>:678:                                    ; preds = %666
  %679 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %680 = load i64, i64* %679, align 8, !tbaa !870
  %681 = trunc i64 %680 to i16
  %682 = and i16 %681, 4096
  %683 = or i16 %682, %667
  br label %684

; <label>:684:                                    ; preds = %678, %671
  %685 = phi i16 [ %667, %671 ], [ %683, %678 ]
  %686 = icmp ugt i64 %206, 13
  %687 = icmp ugt i64 %202, 13
  %688 = and i1 %687, %686
  br i1 %688, label %696, label %689

; <label>:689:                                    ; preds = %684
  br i1 %686, label %703, label %690

; <label>:690:                                    ; preds = %689, %672
  %691 = phi i16 [ %676, %672 ], [ %685, %689 ]
  %692 = phi i1 [ %677, %672 ], [ %687, %689 ]
  %693 = select i1 %692, i16 0, i16 8192
  %694 = or i16 %693, %691
  %695 = icmp ugt i64 %202, 14
  br label %709

; <label>:696:                                    ; preds = %684
  %697 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %698 = load i64, i64* %697, align 8, !tbaa !870
  %699 = and i64 %698, 536870912
  %700 = icmp ne i64 %699, 0
  %701 = select i1 %700, i16 8192, i16 0
  %702 = or i16 %701, %685
  br label %703

; <label>:703:                                    ; preds = %696, %689
  %704 = phi i16 [ %685, %689 ], [ %702, %696 ]
  %705 = icmp ugt i64 %206, 14
  %706 = icmp ugt i64 %202, 14
  %707 = and i1 %706, %705
  br i1 %707, label %715, label %708

; <label>:708:                                    ; preds = %703
  br i1 %705, label %722, label %709

; <label>:709:                                    ; preds = %708, %690
  %710 = phi i16 [ %694, %690 ], [ %704, %708 ]
  %711 = phi i1 [ %695, %690 ], [ %706, %708 ]
  %712 = select i1 %711, i16 0, i16 16384
  %713 = or i16 %712, %710
  %714 = icmp ugt i64 %202, 15
  br label %728

; <label>:715:                                    ; preds = %703
  %716 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %717 = load i64, i64* %716, align 8, !tbaa !870
  %718 = and i64 %717, 70368744177664
  %719 = icmp ne i64 %718, 0
  %720 = select i1 %719, i16 16384, i16 0
  %721 = or i16 %720, %704
  br label %722

; <label>:722:                                    ; preds = %715, %708
  %723 = phi i16 [ %704, %708 ], [ %721, %715 ]
  %724 = icmp ugt i64 %206, 15
  %725 = icmp ugt i64 %202, 15
  %726 = and i1 %725, %724
  br i1 %726, label %733, label %727

; <label>:727:                                    ; preds = %722
  br i1 %724, label %783, label %728

; <label>:728:                                    ; preds = %727, %709
  %729 = phi i16 [ %713, %709 ], [ %723, %727 ]
  %730 = phi i1 [ %714, %709 ], [ %725, %727 ]
  %731 = select i1 %730, i16 0, i16 -32768
  %732 = or i16 %731, %729
  br label %783

; <label>:733:                                    ; preds = %722
  %734 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 3
  %735 = load i64, i64* %734, align 8, !tbaa !870
  %736 = icmp slt i64 %735, 0
  %737 = select i1 %736, i16 -32768, i16 0
  %738 = or i16 %737, %723
  br label %783

; <label>:739:                                    ; preds = %205
  %740 = icmp ugt i64 %206, %202
  br i1 %740, label %783, label %741

; <label>:741:                                    ; preds = %739
  %742 = icmp eq i64 %206, 0
  br i1 %742, label %783, label %743

; <label>:743:                                    ; preds = %741
  br label %744

; <label>:744:                                    ; preds = %774, %743
  %745 = phi i16 [ %775, %774 ], [ -1, %743 ]
  %746 = phi i64 [ %776, %774 ], [ 0, %743 ]
  %747 = phi i16 [ %777, %774 ], [ 1, %743 ]
  %748 = sub nuw nsw i64 16, %746
  br label %749

; <label>:749:                                    ; preds = %763, %744
  %750 = phi i64 [ %765, %763 ], [ %746, %744 ]
  %751 = phi i64 [ %764, %763 ], [ 0, %744 ]
  %752 = icmp ult i64 %750, %202
  br i1 %752, label %753, label %771

; <label>:753:                                    ; preds = %749
  %754 = shl i64 %751, 4
  %755 = add nuw nsw i64 %754, %750
  %756 = lshr i64 %755, 6
  %757 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %7, i64 0, i32 0, i32 0, i32 0, i64 %756
  %758 = load i64, i64* %757, align 8, !tbaa !870
  %759 = and i64 %755, 63
  %760 = shl i64 1, %759
  %761 = and i64 %758, %760
  %762 = icmp eq i64 %761, 0
  br i1 %762, label %771, label %763

; <label>:763:                                    ; preds = %753
  %764 = add nuw nsw i64 %751, 1
  %765 = add nuw nsw i64 %750, 1
  %766 = icmp ult i64 %764, %748
  %767 = icmp ult i64 %765, 16
  %768 = and i1 %767, %766
  %769 = icmp ult i64 %764, %206
  %770 = and i1 %769, %768
  br i1 %770, label %749, label %773, !llvm.loop !890

; <label>:771:                                    ; preds = %753, %749
  %772 = xor i16 %747, %745
  br label %774

; <label>:773:                                    ; preds = %763
  br label %774

; <label>:774:                                    ; preds = %773, %771
  %775 = phi i16 [ %772, %771 ], [ %745, %773 ]
  %776 = add nuw nsw i64 %746, 1
  %777 = shl i16 %747, 1
  %778 = icmp eq i64 %776, 16
  br i1 %778, label %782, label %744

; <label>:779:                                    ; preds = %205
  unreachable

; <label>:780:                                    ; preds = %398
  br label %783

; <label>:781:                                    ; preds = %440
  br label %783

; <label>:782:                                    ; preds = %774
  br label %783

; <label>:783:                                    ; preds = %782, %781, %780, %741, %739, %733, %728, %727, %405, %403, %372
  %784 = phi i64 [ %206, %372 ], [ %206, %403 ], [ 1, %405 ], [ %206, %727 ], [ %206, %733 ], [ %206, %728 ], [ %206, %739 ], [ 0, %741 ], [ %206, %780 ], [ %206, %781 ], [ %206, %782 ]
  %785 = phi i16 [ 0, %372 ], [ 0, %403 ], [ 0, %405 ], [ %723, %727 ], [ %738, %733 ], [ %732, %728 ], [ 0, %739 ], [ -1, %741 ], [ %399, %780 ], [ %436, %781 ], [ %775, %782 ]
  %786 = trunc i8 %207 to i2
  switch i2 %786, label %794 [
    i2 0, label %795
    i2 1, label %789
    i2 -2, label %795
    i2 -1, label %787
  ]

; <label>:787:                                    ; preds = %783
  %788 = icmp eq i64 %202, 0
  br i1 %788, label %795, label %791

; <label>:789:                                    ; preds = %783
  %790 = xor i16 %785, -1
  br label %795

; <label>:791:                                    ; preds = %787
  %792 = xor i16 %785, 1
  %793 = icmp eq i64 %202, 1
  br i1 %793, label %795, label %813

; <label>:794:                                    ; preds = %783
  unreachable

; <label>:795:                                    ; preds = %852, %849, %846, %843, %840, %837, %834, %831, %828, %825, %822, %819, %816, %813, %791, %789, %787, %783, %783
  %796 = phi i16 [ %790, %789 ], [ %785, %783 ], [ %785, %783 ], [ %850, %849 ], [ %847, %846 ], [ %844, %843 ], [ %841, %840 ], [ %838, %837 ], [ %835, %834 ], [ %832, %831 ], [ %829, %828 ], [ %826, %825 ], [ %823, %822 ], [ %820, %819 ], [ %817, %816 ], [ %814, %813 ], [ %792, %791 ], [ %785, %787 ], [ %855, %852 ]
  %797 = and i8 %12, 64
  %798 = icmp eq i8 %797, 0
  %799 = icmp eq i16 %796, 0
  br i1 %798, label %800, label %805

; <label>:800:                                    ; preds = %795
  br i1 %799, label %1068, label %801

; <label>:801:                                    ; preds = %800
  %802 = zext i16 %796 to i32
  %803 = tail call i32 @llvm.cttz.i32(i32 %802, i1 true) #23
  %804 = zext i32 %803 to i64
  br label %1068

; <label>:805:                                    ; preds = %795
  br i1 %799, label %1068, label %806

; <label>:806:                                    ; preds = %805
  %807 = zext i16 %796 to i32
  %808 = tail call i32 @llvm.ctlz.i32(i32 %807, i1 true) #23
  %809 = add nuw nsw i32 %808, 65520
  %810 = and i32 %809, 65535
  %811 = zext i32 %810 to i64
  %812 = sub nsw i64 15, %811
  br label %1068

; <label>:813:                                    ; preds = %791
  %814 = xor i16 %785, 3
  %815 = icmp ugt i64 %202, 2
  br i1 %815, label %816, label %795

; <label>:816:                                    ; preds = %813
  %817 = xor i16 %785, 7
  %818 = icmp eq i64 %202, 3
  br i1 %818, label %795, label %819

; <label>:819:                                    ; preds = %816
  %820 = xor i16 %785, 15
  %821 = icmp ugt i64 %202, 4
  br i1 %821, label %822, label %795

; <label>:822:                                    ; preds = %819
  %823 = xor i16 %785, 31
  %824 = icmp eq i64 %202, 5
  br i1 %824, label %795, label %825

; <label>:825:                                    ; preds = %822
  %826 = xor i16 %785, 63
  %827 = icmp ugt i64 %202, 6
  br i1 %827, label %828, label %795

; <label>:828:                                    ; preds = %825
  %829 = xor i16 %785, 127
  %830 = icmp eq i64 %202, 7
  br i1 %830, label %795, label %831

; <label>:831:                                    ; preds = %828
  %832 = xor i16 %785, 255
  %833 = icmp ugt i64 %202, 8
  br i1 %833, label %834, label %795

; <label>:834:                                    ; preds = %831
  %835 = xor i16 %785, 511
  %836 = icmp eq i64 %202, 9
  br i1 %836, label %795, label %837

; <label>:837:                                    ; preds = %834
  %838 = xor i16 %785, 1023
  %839 = icmp ugt i64 %202, 10
  br i1 %839, label %840, label %795

; <label>:840:                                    ; preds = %837
  %841 = xor i16 %785, 2047
  %842 = icmp eq i64 %202, 11
  br i1 %842, label %795, label %843

; <label>:843:                                    ; preds = %840
  %844 = xor i16 %785, 4095
  %845 = icmp ugt i64 %202, 12
  br i1 %845, label %846, label %795

; <label>:846:                                    ; preds = %843
  %847 = xor i16 %785, 8191
  %848 = icmp eq i64 %202, 13
  br i1 %848, label %795, label %849

; <label>:849:                                    ; preds = %846
  %850 = xor i16 %785, 16383
  %851 = icmp ugt i64 %202, 14
  br i1 %851, label %852, label %795

; <label>:852:                                    ; preds = %849
  %853 = icmp ne i64 %202, 15
  %854 = select i1 %853, i16 -1, i16 32767
  %855 = xor i16 %785, %854
  br label %795

; <label>:856:                                    ; preds = %233, %230
  %857 = phi i64 [ %236, %233 ], [ %232, %230 ]
  %858 = icmp ugt i8 %23, %211
  %859 = or i64 %228, 1
  %860 = shl i64 1, %859
  %861 = xor i64 %860, -1
  %862 = and i64 %857, %861
  %863 = or i64 %857, %860
  %864 = select i1 %858, i64 %862, i64 %863
  %865 = icmp ugt i8 %25, %211
  %866 = or i64 %228, 2
  %867 = shl i64 1, %866
  %868 = xor i64 %867, -1
  %869 = and i64 %864, %868
  %870 = or i64 %864, %867
  %871 = select i1 %865, i64 %869, i64 %870
  %872 = icmp ugt i8 %27, %211
  %873 = or i64 %228, 3
  %874 = shl i64 1, %873
  %875 = xor i64 %874, -1
  %876 = and i64 %871, %875
  %877 = or i64 %871, %874
  %878 = select i1 %872, i64 %876, i64 %877
  %879 = icmp ugt i8 %29, %211
  %880 = or i64 %228, 4
  %881 = shl i64 1, %880
  %882 = xor i64 %881, -1
  %883 = and i64 %878, %882
  %884 = or i64 %878, %881
  %885 = select i1 %879, i64 %883, i64 %884
  %886 = icmp ugt i8 %31, %211
  %887 = or i64 %228, 5
  %888 = shl i64 1, %887
  %889 = xor i64 %888, -1
  %890 = and i64 %885, %889
  %891 = or i64 %885, %888
  %892 = select i1 %886, i64 %890, i64 %891
  %893 = icmp ugt i8 %33, %211
  %894 = or i64 %228, 6
  %895 = shl i64 1, %894
  %896 = xor i64 %895, -1
  %897 = and i64 %892, %896
  %898 = or i64 %892, %895
  %899 = select i1 %893, i64 %897, i64 %898
  %900 = icmp ugt i8 %35, %211
  %901 = or i64 %228, 7
  %902 = shl i64 1, %901
  %903 = xor i64 %902, -1
  %904 = and i64 %899, %903
  %905 = or i64 %899, %902
  %906 = select i1 %900, i64 %904, i64 %905
  %907 = icmp ugt i8 %37, %211
  %908 = or i64 %228, 8
  %909 = shl i64 1, %908
  %910 = xor i64 %909, -1
  %911 = and i64 %906, %910
  %912 = or i64 %906, %909
  %913 = select i1 %907, i64 %911, i64 %912
  %914 = icmp ugt i8 %39, %211
  %915 = or i64 %228, 9
  %916 = shl i64 1, %915
  %917 = xor i64 %916, -1
  %918 = and i64 %913, %917
  %919 = or i64 %913, %916
  %920 = select i1 %914, i64 %918, i64 %919
  %921 = icmp ugt i8 %41, %211
  %922 = or i64 %228, 10
  %923 = shl i64 1, %922
  %924 = xor i64 %923, -1
  %925 = and i64 %920, %924
  %926 = or i64 %920, %923
  %927 = select i1 %921, i64 %925, i64 %926
  %928 = icmp ugt i8 %43, %211
  %929 = or i64 %228, 11
  %930 = shl i64 1, %929
  %931 = xor i64 %930, -1
  %932 = and i64 %927, %931
  %933 = or i64 %927, %930
  %934 = select i1 %928, i64 %932, i64 %933
  %935 = icmp ugt i8 %45, %211
  %936 = or i64 %228, 12
  %937 = shl i64 1, %936
  %938 = xor i64 %937, -1
  %939 = and i64 %934, %938
  %940 = or i64 %934, %937
  %941 = select i1 %935, i64 %939, i64 %940
  %942 = icmp ugt i8 %47, %211
  %943 = or i64 %228, 13
  %944 = shl i64 1, %943
  %945 = xor i64 %944, -1
  %946 = and i64 %941, %945
  %947 = or i64 %941, %944
  %948 = select i1 %942, i64 %946, i64 %947
  %949 = icmp ugt i8 %49, %211
  %950 = or i64 %228, 14
  %951 = shl i64 1, %950
  %952 = xor i64 %951, -1
  %953 = and i64 %948, %952
  %954 = or i64 %948, %951
  %955 = select i1 %949, i64 %953, i64 %954
  store i64 %955, i64* %227, align 8, !tbaa !870
  %956 = icmp ugt i8 %51, %211
  %957 = or i64 %228, 15
  %958 = shl i64 1, %957
  %959 = xor i64 %958, -1
  %960 = and i64 %955, %959
  %961 = or i64 %955, %958
  br label %251

; <label>:962:                                    ; preds = %247, %244
  %963 = phi i64 [ %250, %247 ], [ %246, %244 ]
  %964 = icmp ult i8 %23, %211
  %965 = or i64 %242, 1
  %966 = shl i64 1, %965
  %967 = xor i64 %966, -1
  %968 = and i64 %963, %967
  %969 = or i64 %963, %966
  %970 = select i1 %964, i64 %968, i64 %969
  %971 = icmp ult i8 %25, %211
  %972 = or i64 %242, 2
  %973 = shl i64 1, %972
  %974 = xor i64 %973, -1
  %975 = and i64 %970, %974
  %976 = or i64 %970, %973
  %977 = select i1 %971, i64 %975, i64 %976
  %978 = icmp ult i8 %27, %211
  %979 = or i64 %242, 3
  %980 = shl i64 1, %979
  %981 = xor i64 %980, -1
  %982 = and i64 %977, %981
  %983 = or i64 %977, %980
  %984 = select i1 %978, i64 %982, i64 %983
  %985 = icmp ult i8 %29, %211
  %986 = or i64 %242, 4
  %987 = shl i64 1, %986
  %988 = xor i64 %987, -1
  %989 = and i64 %984, %988
  %990 = or i64 %984, %987
  %991 = select i1 %985, i64 %989, i64 %990
  %992 = icmp ult i8 %31, %211
  %993 = or i64 %242, 5
  %994 = shl i64 1, %993
  %995 = xor i64 %994, -1
  %996 = and i64 %991, %995
  %997 = or i64 %991, %994
  %998 = select i1 %992, i64 %996, i64 %997
  %999 = icmp ult i8 %33, %211
  %1000 = or i64 %242, 6
  %1001 = shl i64 1, %1000
  %1002 = xor i64 %1001, -1
  %1003 = and i64 %998, %1002
  %1004 = or i64 %998, %1001
  %1005 = select i1 %999, i64 %1003, i64 %1004
  %1006 = icmp ult i8 %35, %211
  %1007 = or i64 %242, 7
  %1008 = shl i64 1, %1007
  %1009 = xor i64 %1008, -1
  %1010 = and i64 %1005, %1009
  %1011 = or i64 %1005, %1008
  %1012 = select i1 %1006, i64 %1010, i64 %1011
  %1013 = icmp ult i8 %37, %211
  %1014 = or i64 %242, 8
  %1015 = shl i64 1, %1014
  %1016 = xor i64 %1015, -1
  %1017 = and i64 %1012, %1016
  %1018 = or i64 %1012, %1015
  %1019 = select i1 %1013, i64 %1017, i64 %1018
  %1020 = icmp ult i8 %39, %211
  %1021 = or i64 %242, 9
  %1022 = shl i64 1, %1021
  %1023 = xor i64 %1022, -1
  %1024 = and i64 %1019, %1023
  %1025 = or i64 %1019, %1022
  %1026 = select i1 %1020, i64 %1024, i64 %1025
  %1027 = icmp ult i8 %41, %211
  %1028 = or i64 %242, 10
  %1029 = shl i64 1, %1028
  %1030 = xor i64 %1029, -1
  %1031 = and i64 %1026, %1030
  %1032 = or i64 %1026, %1029
  %1033 = select i1 %1027, i64 %1031, i64 %1032
  %1034 = icmp ult i8 %43, %211
  %1035 = or i64 %242, 11
  %1036 = shl i64 1, %1035
  %1037 = xor i64 %1036, -1
  %1038 = and i64 %1033, %1037
  %1039 = or i64 %1033, %1036
  %1040 = select i1 %1034, i64 %1038, i64 %1039
  %1041 = icmp ult i8 %45, %211
  %1042 = or i64 %242, 12
  %1043 = shl i64 1, %1042
  %1044 = xor i64 %1043, -1
  %1045 = and i64 %1040, %1044
  %1046 = or i64 %1040, %1043
  %1047 = select i1 %1041, i64 %1045, i64 %1046
  %1048 = icmp ult i8 %47, %211
  %1049 = or i64 %242, 13
  %1050 = shl i64 1, %1049
  %1051 = xor i64 %1050, -1
  %1052 = and i64 %1047, %1051
  %1053 = or i64 %1047, %1050
  %1054 = select i1 %1048, i64 %1052, i64 %1053
  %1055 = icmp ult i8 %49, %211
  %1056 = or i64 %242, 14
  %1057 = shl i64 1, %1056
  %1058 = xor i64 %1057, -1
  %1059 = and i64 %1054, %1058
  %1060 = or i64 %1054, %1057
  %1061 = select i1 %1055, i64 %1059, i64 %1060
  store i64 %1061, i64* %241, align 8, !tbaa !870
  %1062 = icmp ult i8 %51, %211
  %1063 = or i64 %242, 15
  %1064 = shl i64 1, %1063
  %1065 = xor i64 %1064, -1
  %1066 = and i64 %1061, %1065
  %1067 = or i64 %1061, %1064
  br label %251

; <label>:1068:                                   ; preds = %806, %805, %801, %800
  %1069 = phi i64 [ %812, %806 ], [ 16, %805 ], [ %804, %801 ], [ 16, %800 ]
  %1070 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1071 = and i64 %1069, 65535
  store i64 %1071, i64* %1070, align 8, !tbaa !870
  %1072 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1073 = icmp ne i16 %796, 0
  %1074 = zext i1 %1073 to i8
  store i8 %1074, i8* %1072, align 1, !tbaa !868
  %1075 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1076 = icmp ult i64 %202, 16
  %1077 = zext i1 %1076 to i8
  store i8 %1077, i8* %1075, align 1, !tbaa !868
  %1078 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1079 = icmp ult i64 %784, 16
  %1080 = zext i1 %1079 to i8
  store i8 %1080, i8* %1078, align 1, !tbaa !868
  %1081 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1082 = trunc i16 %796 to i8
  %1083 = and i8 %1082, 1
  store i8 %1083, i8* %1081, align 1, !tbaa !868
  %1084 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1084, align 1, !tbaa !868
  %1085 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1085, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 288, i8* nonnull %52) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %17) #23
  br label %3301

; <label>:1086:                                   ; preds = %5
  %1087 = bitcast { i64, i64 }* %9 to %struct.uint16v8_t*
  %1088 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1088) #23
  %1089 = bitcast i8* %2 to i64*
  %1090 = load i64, i64* %1089, align 1
  %1091 = getelementptr inbounds i8, i8* %2, i64 8
  %1092 = bitcast i8* %1091 to i64*
  %1093 = load i64, i64* %1092, align 1
  %1094 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 0
  store i64 %1090, i64* %1094, align 8
  %1095 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i64 0, i32 1
  store i64 %1093, i64* %1095, align 8
  %1096 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %1097 = add i64 %3, 2
  %1098 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1097) #22
  %1099 = add i64 %3, 4
  %1100 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1099) #22
  %1101 = add i64 %3, 6
  %1102 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1101) #22
  %1103 = add i64 %3, 8
  %1104 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1103) #22
  %1105 = add i64 %3, 10
  %1106 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1105) #22
  %1107 = add i64 %3, 12
  %1108 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1107) #22
  %1109 = add i64 %3, 14
  %1110 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %1109) #22
  %1111 = lshr i8 %12, 2
  %1112 = trunc i64 %1090 to i16
  %1113 = icmp eq i16 %1112, 0
  %1114 = select i1 %1113, i64 0, i64 8
  %1115 = icmp eq i16 %1096, 0
  %1116 = select i1 %1115, i64 0, i64 8
  %1117 = and i64 %1090, 4294901760
  %1118 = icmp eq i64 %1117, 0
  %1119 = xor i1 %1113, true
  %1120 = and i1 %1118, %1119
  %1121 = select i1 %1120, i64 1, i64 %1114
  %1122 = icmp eq i16 %1098, 0
  %1123 = xor i1 %1115, true
  %1124 = and i1 %1122, %1123
  %1125 = select i1 %1124, i64 1, i64 %1116
  %1126 = and i64 %1090, 281470681743360
  %1127 = icmp eq i64 %1126, 0
  %1128 = icmp ugt i64 %1121, 2
  %1129 = and i1 %1127, %1128
  %1130 = select i1 %1129, i64 2, i64 %1121
  %1131 = icmp eq i16 %1100, 0
  %1132 = icmp ugt i64 %1125, 2
  %1133 = and i1 %1131, %1132
  %1134 = select i1 %1133, i64 2, i64 %1125
  %1135 = icmp ult i64 %1090, 281474976710656
  %1136 = icmp ugt i64 %1130, 3
  %1137 = and i1 %1135, %1136
  %1138 = select i1 %1137, i64 3, i64 %1130
  %1139 = icmp eq i16 %1102, 0
  %1140 = icmp ugt i64 %1134, 3
  %1141 = and i1 %1139, %1140
  %1142 = select i1 %1141, i64 3, i64 %1134
  %1143 = trunc i64 %1093 to i16
  %1144 = icmp eq i16 %1143, 0
  %1145 = icmp ugt i64 %1138, 4
  %1146 = and i1 %1144, %1145
  %1147 = select i1 %1146, i64 4, i64 %1138
  %1148 = icmp eq i16 %1104, 0
  %1149 = icmp ugt i64 %1142, 4
  %1150 = and i1 %1148, %1149
  %1151 = select i1 %1150, i64 4, i64 %1142
  %1152 = and i64 %1093, 4294901760
  %1153 = icmp eq i64 %1152, 0
  %1154 = icmp ugt i64 %1147, 5
  %1155 = and i1 %1153, %1154
  %1156 = select i1 %1155, i64 5, i64 %1147
  %1157 = icmp eq i16 %1106, 0
  %1158 = icmp ugt i64 %1151, 5
  %1159 = and i1 %1157, %1158
  %1160 = select i1 %1159, i64 5, i64 %1151
  %1161 = and i64 %1093, 281470681743360
  %1162 = icmp eq i64 %1161, 0
  %1163 = icmp ugt i64 %1156, 6
  %1164 = and i1 %1162, %1163
  %1165 = select i1 %1164, i64 6, i64 %1156
  %1166 = icmp eq i16 %1108, 0
  %1167 = icmp ugt i64 %1160, 6
  %1168 = and i1 %1166, %1167
  %1169 = select i1 %1168, i64 6, i64 %1160
  %1170 = icmp ult i64 %1093, 281474976710656
  %1171 = icmp ugt i64 %1165, 7
  %1172 = and i1 %1170, %1171
  %1173 = select i1 %1172, i64 7, i64 %1165
  %1174 = icmp eq i16 %1110, 0
  %1175 = icmp ugt i64 %1169, 7
  %1176 = and i1 %1174, %1175
  %1177 = select i1 %1176, i64 7, i64 %1169
  %1178 = lshr i8 %12, 4
  %1179 = trunc i8 %1111 to i2
  %1180 = icmp eq i2 %1179, 1
  br i1 %1180, label %1182, label %1181

; <label>:1181:                                   ; preds = %1086
  br label %1314

; <label>:1182:                                   ; preds = %1086
  br label %1183

; <label>:1183:                                   ; preds = %1307, %1182
  %1184 = phi i16 [ %1309, %1307 ], [ %1112, %1182 ]
  %1185 = phi i64 [ %1305, %1307 ], [ 0, %1182 ]
  %1186 = phi i64 [ %1304, %1307 ], [ 0, %1182 ]
  %1187 = and i64 %1185, 1
  %1188 = icmp eq i64 %1187, 0
  %1189 = shl i64 %1185, 3
  br i1 %1188, label %1245, label %1190

; <label>:1190:                                   ; preds = %1183
  %1191 = icmp ugt i16 %1096, %1184
  %1192 = shl i64 1, %1189
  %1193 = xor i64 %1192, -1
  %1194 = and i64 %1186, %1193
  %1195 = or i64 %1192, %1186
  %1196 = select i1 %1191, i64 %1194, i64 %1195
  %1197 = icmp ugt i16 %1098, %1184
  %1198 = or i64 %1189, 1
  %1199 = shl i64 1, %1198
  %1200 = xor i64 %1199, -1
  %1201 = and i64 %1196, %1200
  %1202 = or i64 %1196, %1199
  %1203 = select i1 %1197, i64 %1201, i64 %1202
  %1204 = icmp ugt i16 %1100, %1184
  %1205 = or i64 %1189, 2
  %1206 = shl i64 1, %1205
  %1207 = xor i64 %1206, -1
  %1208 = and i64 %1203, %1207
  %1209 = or i64 %1203, %1206
  %1210 = select i1 %1204, i64 %1208, i64 %1209
  %1211 = icmp ugt i16 %1102, %1184
  %1212 = or i64 %1189, 3
  %1213 = shl i64 1, %1212
  %1214 = xor i64 %1213, -1
  %1215 = and i64 %1210, %1214
  %1216 = or i64 %1210, %1213
  %1217 = select i1 %1211, i64 %1215, i64 %1216
  %1218 = icmp ugt i16 %1104, %1184
  %1219 = or i64 %1189, 4
  %1220 = shl i64 1, %1219
  %1221 = xor i64 %1220, -1
  %1222 = and i64 %1217, %1221
  %1223 = or i64 %1217, %1220
  %1224 = select i1 %1218, i64 %1222, i64 %1223
  %1225 = icmp ugt i16 %1106, %1184
  %1226 = or i64 %1189, 5
  %1227 = shl i64 1, %1226
  %1228 = xor i64 %1227, -1
  %1229 = and i64 %1224, %1228
  %1230 = or i64 %1224, %1227
  %1231 = select i1 %1225, i64 %1229, i64 %1230
  %1232 = icmp ugt i16 %1108, %1184
  %1233 = or i64 %1189, 6
  %1234 = shl i64 1, %1233
  %1235 = xor i64 %1234, -1
  %1236 = and i64 %1231, %1235
  %1237 = or i64 %1231, %1234
  %1238 = select i1 %1232, i64 %1236, i64 %1237
  %1239 = icmp ugt i16 %1110, %1184
  %1240 = or i64 %1189, 7
  %1241 = shl i64 1, %1240
  %1242 = xor i64 %1241, -1
  %1243 = and i64 %1238, %1242
  %1244 = or i64 %1238, %1241
  br label %1300

; <label>:1245:                                   ; preds = %1183
  %1246 = icmp ult i16 %1096, %1184
  %1247 = shl i64 1, %1189
  %1248 = xor i64 %1247, -1
  %1249 = and i64 %1186, %1248
  %1250 = or i64 %1247, %1186
  %1251 = select i1 %1246, i64 %1249, i64 %1250
  %1252 = icmp ult i16 %1098, %1184
  %1253 = or i64 %1189, 1
  %1254 = shl i64 1, %1253
  %1255 = xor i64 %1254, -1
  %1256 = and i64 %1251, %1255
  %1257 = or i64 %1251, %1254
  %1258 = select i1 %1252, i64 %1256, i64 %1257
  %1259 = icmp ult i16 %1100, %1184
  %1260 = or i64 %1189, 2
  %1261 = shl i64 1, %1260
  %1262 = xor i64 %1261, -1
  %1263 = and i64 %1258, %1262
  %1264 = or i64 %1258, %1261
  %1265 = select i1 %1259, i64 %1263, i64 %1264
  %1266 = icmp ult i16 %1102, %1184
  %1267 = or i64 %1189, 3
  %1268 = shl i64 1, %1267
  %1269 = xor i64 %1268, -1
  %1270 = and i64 %1265, %1269
  %1271 = or i64 %1265, %1268
  %1272 = select i1 %1266, i64 %1270, i64 %1271
  %1273 = icmp ult i16 %1104, %1184
  %1274 = or i64 %1189, 4
  %1275 = shl i64 1, %1274
  %1276 = xor i64 %1275, -1
  %1277 = and i64 %1272, %1276
  %1278 = or i64 %1272, %1275
  %1279 = select i1 %1273, i64 %1277, i64 %1278
  %1280 = icmp ult i16 %1106, %1184
  %1281 = or i64 %1189, 5
  %1282 = shl i64 1, %1281
  %1283 = xor i64 %1282, -1
  %1284 = and i64 %1279, %1283
  %1285 = or i64 %1279, %1282
  %1286 = select i1 %1280, i64 %1284, i64 %1285
  %1287 = icmp ult i16 %1108, %1184
  %1288 = or i64 %1189, 6
  %1289 = shl i64 1, %1288
  %1290 = xor i64 %1289, -1
  %1291 = and i64 %1286, %1290
  %1292 = or i64 %1286, %1289
  %1293 = select i1 %1287, i64 %1291, i64 %1292
  %1294 = icmp ult i16 %1110, %1184
  %1295 = or i64 %1189, 7
  %1296 = shl i64 1, %1295
  %1297 = xor i64 %1296, -1
  %1298 = and i64 %1293, %1297
  %1299 = or i64 %1293, %1296
  br label %1300

; <label>:1300:                                   ; preds = %1245, %1190
  %1301 = phi i64 [ %1244, %1190 ], [ %1299, %1245 ]
  %1302 = phi i64 [ %1243, %1190 ], [ %1298, %1245 ]
  %1303 = phi i1 [ %1239, %1190 ], [ %1294, %1245 ]
  %1304 = select i1 %1303, i64 %1302, i64 %1301
  %1305 = add nuw nsw i64 %1185, 1
  %1306 = icmp eq i64 %1305, 8
  br i1 %1306, label %1310, label %1307

; <label>:1307:                                   ; preds = %1300
  %1308 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1087, i64 0, i32 0, i64 %1305
  %1309 = load i16, i16* %1308, align 2, !tbaa !869
  br label %1183

; <label>:1310:                                   ; preds = %1300
  br label %1312

; <label>:1311:                                   ; preds = %1314
  br label %1312

; <label>:1312:                                   ; preds = %1311, %1310
  %1313 = phi i64 [ %1304, %1310 ], [ %1373, %1311 ]
  switch i2 %1179, label %1587 [
    i2 0, label %1379
    i2 1, label %1407
    i2 -2, label %1440
    i2 -1, label %1570
  ]

; <label>:1314:                                   ; preds = %1376, %1181
  %1315 = phi i16 [ %1378, %1376 ], [ %1112, %1181 ]
  %1316 = phi i64 [ %1374, %1376 ], [ 0, %1181 ]
  %1317 = phi i64 [ %1373, %1376 ], [ 0, %1181 ]
  %1318 = shl i64 %1316, 3
  %1319 = icmp eq i16 %1315, %1096
  %1320 = shl i64 1, %1318
  %1321 = xor i64 %1320, -1
  %1322 = and i64 %1317, %1321
  %1323 = or i64 %1320, %1317
  %1324 = select i1 %1319, i64 %1323, i64 %1322
  %1325 = icmp eq i16 %1315, %1098
  %1326 = or i64 %1318, 1
  %1327 = shl i64 1, %1326
  %1328 = xor i64 %1327, -1
  %1329 = and i64 %1324, %1328
  %1330 = or i64 %1324, %1327
  %1331 = select i1 %1325, i64 %1330, i64 %1329
  %1332 = icmp eq i16 %1315, %1100
  %1333 = or i64 %1318, 2
  %1334 = shl i64 1, %1333
  %1335 = xor i64 %1334, -1
  %1336 = and i64 %1331, %1335
  %1337 = or i64 %1331, %1334
  %1338 = select i1 %1332, i64 %1337, i64 %1336
  %1339 = icmp eq i16 %1315, %1102
  %1340 = or i64 %1318, 3
  %1341 = shl i64 1, %1340
  %1342 = xor i64 %1341, -1
  %1343 = and i64 %1338, %1342
  %1344 = or i64 %1338, %1341
  %1345 = select i1 %1339, i64 %1344, i64 %1343
  %1346 = icmp eq i16 %1315, %1104
  %1347 = or i64 %1318, 4
  %1348 = shl i64 1, %1347
  %1349 = xor i64 %1348, -1
  %1350 = and i64 %1345, %1349
  %1351 = or i64 %1345, %1348
  %1352 = select i1 %1346, i64 %1351, i64 %1350
  %1353 = icmp eq i16 %1315, %1106
  %1354 = or i64 %1318, 5
  %1355 = shl i64 1, %1354
  %1356 = xor i64 %1355, -1
  %1357 = and i64 %1352, %1356
  %1358 = or i64 %1352, %1355
  %1359 = select i1 %1353, i64 %1358, i64 %1357
  %1360 = icmp eq i16 %1315, %1108
  %1361 = or i64 %1318, 6
  %1362 = shl i64 1, %1361
  %1363 = xor i64 %1362, -1
  %1364 = and i64 %1359, %1363
  %1365 = or i64 %1359, %1362
  %1366 = select i1 %1360, i64 %1365, i64 %1364
  %1367 = icmp eq i16 %1315, %1110
  %1368 = or i64 %1318, 7
  %1369 = shl i64 1, %1368
  %1370 = xor i64 %1369, -1
  %1371 = and i64 %1366, %1370
  %1372 = or i64 %1366, %1369
  %1373 = select i1 %1367, i64 %1372, i64 %1371
  %1374 = add nuw nsw i64 %1316, 1
  %1375 = icmp eq i64 %1374, 8
  br i1 %1375, label %1311, label %1376

; <label>:1376:                                   ; preds = %1314
  %1377 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %1087, i64 0, i32 0, i64 %1374
  %1378 = load i16, i16* %1377, align 2, !tbaa !869
  br label %1314

; <label>:1379:                                   ; preds = %1312
  %1380 = icmp eq i64 %1177, 0
  %1381 = icmp eq i64 %1173, 0
  %1382 = or i1 %1380, %1381
  br i1 %1382, label %1590, label %1383

; <label>:1383:                                   ; preds = %1379
  br label %1384

; <label>:1384:                                   ; preds = %1402, %1383
  %1385 = phi i64 [ %1404, %1402 ], [ 0, %1383 ]
  %1386 = phi i16 [ %1405, %1402 ], [ 1, %1383 ]
  %1387 = phi i16 [ %1403, %1402 ], [ 0, %1383 ]
  br label %1390

; <label>:1388:                                   ; preds = %1390
  %1389 = icmp ult i64 %1398, %1173
  br i1 %1389, label %1390, label %1401, !llvm.loop !891

; <label>:1390:                                   ; preds = %1388, %1384
  %1391 = phi i64 [ 0, %1384 ], [ %1398, %1388 ]
  %1392 = shl i64 %1391, 3
  %1393 = add i64 %1392, %1385
  %1394 = and i64 %1393, 63
  %1395 = shl i64 1, %1394
  %1396 = and i64 %1395, %1313
  %1397 = icmp eq i64 %1396, 0
  %1398 = add nuw i64 %1391, 1
  br i1 %1397, label %1388, label %1399

; <label>:1399:                                   ; preds = %1390
  %1400 = or i16 %1387, %1386
  br label %1402

; <label>:1401:                                   ; preds = %1388
  br label %1402

; <label>:1402:                                   ; preds = %1401, %1399
  %1403 = phi i16 [ %1400, %1399 ], [ %1387, %1401 ]
  %1404 = add nuw i64 %1385, 1
  %1405 = shl i16 %1386, 1
  %1406 = icmp eq i64 %1404, %1177
  br i1 %1406, label %1588, label %1384

; <label>:1407:                                   ; preds = %1312
  %1408 = icmp eq i64 %1177, 0
  br i1 %1408, label %1590, label %1409

; <label>:1409:                                   ; preds = %1407
  %1410 = add i64 %1173, -1
  %1411 = icmp eq i64 %1410, 0
  br i1 %1411, label %1590, label %1412

; <label>:1412:                                   ; preds = %1409
  br label %1413

; <label>:1413:                                   ; preds = %1436, %1412
  %1414 = phi i16 [ %1432, %1436 ], [ 0, %1412 ]
  %1415 = phi i16 [ %1438, %1436 ], [ 1, %1412 ]
  %1416 = phi i64 [ %1437, %1436 ], [ 0, %1412 ]
  br label %1417

; <label>:1417:                                   ; preds = %1417, %1413
  %1418 = phi i16 [ %1414, %1413 ], [ %1432, %1417 ]
  %1419 = phi i64 [ 0, %1413 ], [ %1433, %1417 ]
  %1420 = shl i64 %1419, 3
  %1421 = add i64 %1420, %1416
  %1422 = and i64 %1421, 63
  %1423 = shl i64 1, %1422
  %1424 = or i64 %1420, 8
  %1425 = add i64 %1424, %1416
  %1426 = and i64 %1425, 63
  %1427 = shl i64 1, %1426
  %1428 = or i64 %1427, %1423
  %1429 = and i64 %1428, %1313
  %1430 = icmp ne i64 %1429, %1428
  %1431 = select i1 %1430, i16 0, i16 %1415
  %1432 = or i16 %1431, %1418
  %1433 = add i64 %1419, 2
  %1434 = icmp ult i64 %1433, %1410
  %1435 = and i1 %1434, %1430
  br i1 %1435, label %1417, label %1436, !llvm.loop !892

; <label>:1436:                                   ; preds = %1417
  %1437 = add nuw i64 %1416, 1
  %1438 = shl i16 %1415, 1
  %1439 = icmp eq i64 %1437, %1177
  br i1 %1439, label %1589, label %1413

; <label>:1440:                                   ; preds = %1312
  %1441 = icmp ne i64 %1173, 0
  %1442 = icmp ne i64 %1177, 0
  %1443 = and i1 %1442, %1441
  br i1 %1443, label %1444, label %1447

; <label>:1444:                                   ; preds = %1440
  %1445 = and i64 %1313, 1
  %1446 = icmp ne i64 %1445, 0
  br label %1452

; <label>:1447:                                   ; preds = %1440
  br i1 %1441, label %1452, label %1448

; <label>:1448:                                   ; preds = %1447
  %1449 = xor i1 %1442, true
  %1450 = zext i1 %1449 to i16
  %1451 = icmp ugt i64 %1177, 1
  br label %1459

; <label>:1452:                                   ; preds = %1447, %1444
  %1453 = phi i1 [ false, %1447 ], [ %1446, %1444 ]
  %1454 = zext i1 %1453 to i16
  %1455 = icmp ugt i64 %1173, 1
  %1456 = icmp ugt i64 %1177, 1
  %1457 = and i1 %1456, %1455
  br i1 %1457, label %1465, label %1458

; <label>:1458:                                   ; preds = %1452
  br i1 %1455, label %1470, label %1459

; <label>:1459:                                   ; preds = %1458, %1448
  %1460 = phi i16 [ %1450, %1448 ], [ %1454, %1458 ]
  %1461 = phi i1 [ %1451, %1448 ], [ %1456, %1458 ]
  %1462 = select i1 %1461, i16 0, i16 2
  %1463 = or i16 %1462, %1460
  %1464 = icmp ugt i64 %1177, 2
  br label %1476

; <label>:1465:                                   ; preds = %1452
  %1466 = trunc i64 %1313 to i16
  %1467 = lshr i16 %1466, 8
  %1468 = and i16 %1467, 2
  %1469 = or i16 %1454, %1468
  br label %1470

; <label>:1470:                                   ; preds = %1465, %1458
  %1471 = phi i16 [ %1454, %1458 ], [ %1469, %1465 ]
  %1472 = icmp ugt i64 %1173, 2
  %1473 = icmp ugt i64 %1177, 2
  %1474 = and i1 %1473, %1472
  br i1 %1474, label %1482, label %1475

; <label>:1475:                                   ; preds = %1470
  br i1 %1472, label %1487, label %1476

; <label>:1476:                                   ; preds = %1475, %1459
  %1477 = phi i16 [ %1463, %1459 ], [ %1471, %1475 ]
  %1478 = phi i1 [ %1464, %1459 ], [ %1473, %1475 ]
  %1479 = select i1 %1478, i16 0, i16 4
  %1480 = or i16 %1479, %1477
  %1481 = icmp ugt i64 %1177, 3
  br label %1493

; <label>:1482:                                   ; preds = %1470
  %1483 = and i64 %1313, 262144
  %1484 = icmp ne i64 %1483, 0
  %1485 = select i1 %1484, i16 4, i16 0
  %1486 = or i16 %1471, %1485
  br label %1487

; <label>:1487:                                   ; preds = %1482, %1475
  %1488 = phi i16 [ %1471, %1475 ], [ %1486, %1482 ]
  %1489 = icmp ugt i64 %1173, 3
  %1490 = icmp ugt i64 %1177, 3
  %1491 = and i1 %1490, %1489
  br i1 %1491, label %1499, label %1492

; <label>:1492:                                   ; preds = %1487
  br i1 %1489, label %1504, label %1493

; <label>:1493:                                   ; preds = %1492, %1476
  %1494 = phi i16 [ %1480, %1476 ], [ %1488, %1492 ]
  %1495 = phi i1 [ %1481, %1476 ], [ %1490, %1492 ]
  %1496 = select i1 %1495, i16 0, i16 8
  %1497 = or i16 %1496, %1494
  %1498 = icmp ugt i64 %1177, 4
  br label %1510

; <label>:1499:                                   ; preds = %1487
  %1500 = and i64 %1313, 134217728
  %1501 = icmp ne i64 %1500, 0
  %1502 = select i1 %1501, i16 8, i16 0
  %1503 = or i16 %1488, %1502
  br label %1504

; <label>:1504:                                   ; preds = %1499, %1492
  %1505 = phi i16 [ %1488, %1492 ], [ %1503, %1499 ]
  %1506 = icmp ugt i64 %1173, 4
  %1507 = icmp ugt i64 %1177, 4
  %1508 = and i1 %1507, %1506
  br i1 %1508, label %1516, label %1509

; <label>:1509:                                   ; preds = %1504
  br i1 %1506, label %1521, label %1510

; <label>:1510:                                   ; preds = %1509, %1493
  %1511 = phi i16 [ %1497, %1493 ], [ %1505, %1509 ]
  %1512 = phi i1 [ %1498, %1493 ], [ %1507, %1509 ]
  %1513 = select i1 %1512, i16 0, i16 16
  %1514 = or i16 %1513, %1511
  %1515 = icmp ugt i64 %1177, 5
  br label %1527

; <label>:1516:                                   ; preds = %1504
  %1517 = and i64 %1313, 68719476736
  %1518 = icmp ne i64 %1517, 0
  %1519 = select i1 %1518, i16 16, i16 0
  %1520 = or i16 %1505, %1519
  br label %1521

; <label>:1521:                                   ; preds = %1516, %1509
  %1522 = phi i16 [ %1505, %1509 ], [ %1520, %1516 ]
  %1523 = icmp ugt i64 %1173, 5
  %1524 = icmp ugt i64 %1177, 5
  %1525 = and i1 %1524, %1523
  br i1 %1525, label %1533, label %1526

; <label>:1526:                                   ; preds = %1521
  br i1 %1523, label %1538, label %1527

; <label>:1527:                                   ; preds = %1526, %1510
  %1528 = phi i16 [ %1514, %1510 ], [ %1522, %1526 ]
  %1529 = phi i1 [ %1515, %1510 ], [ %1524, %1526 ]
  %1530 = select i1 %1529, i16 0, i16 32
  %1531 = or i16 %1530, %1528
  %1532 = icmp ugt i64 %1177, 6
  br label %1544

; <label>:1533:                                   ; preds = %1521
  %1534 = and i64 %1313, 35184372088832
  %1535 = icmp ne i64 %1534, 0
  %1536 = select i1 %1535, i16 32, i16 0
  %1537 = or i16 %1522, %1536
  br label %1538

; <label>:1538:                                   ; preds = %1533, %1526
  %1539 = phi i16 [ %1522, %1526 ], [ %1537, %1533 ]
  %1540 = icmp ugt i64 %1173, 6
  %1541 = icmp ugt i64 %1177, 6
  %1542 = and i1 %1541, %1540
  br i1 %1542, label %1550, label %1543

; <label>:1543:                                   ; preds = %1538
  br i1 %1540, label %1555, label %1544

; <label>:1544:                                   ; preds = %1543, %1527
  %1545 = phi i16 [ %1531, %1527 ], [ %1539, %1543 ]
  %1546 = phi i1 [ %1532, %1527 ], [ %1541, %1543 ]
  %1547 = select i1 %1546, i16 0, i16 64
  %1548 = or i16 %1547, %1545
  %1549 = icmp ugt i64 %1177, 7
  br label %1561

; <label>:1550:                                   ; preds = %1538
  %1551 = and i64 %1313, 18014398509481984
  %1552 = icmp ne i64 %1551, 0
  %1553 = select i1 %1552, i16 64, i16 0
  %1554 = or i16 %1539, %1553
  br label %1555

; <label>:1555:                                   ; preds = %1550, %1543
  %1556 = phi i16 [ %1539, %1543 ], [ %1554, %1550 ]
  %1557 = icmp ugt i64 %1173, 7
  %1558 = icmp ugt i64 %1177, 7
  %1559 = and i1 %1558, %1557
  br i1 %1559, label %1566, label %1560

; <label>:1560:                                   ; preds = %1555
  br i1 %1557, label %1590, label %1561

; <label>:1561:                                   ; preds = %1560, %1544
  %1562 = phi i16 [ %1548, %1544 ], [ %1556, %1560 ]
  %1563 = phi i1 [ %1549, %1544 ], [ %1558, %1560 ]
  %1564 = select i1 %1563, i16 0, i16 128
  %1565 = or i16 %1564, %1562
  br label %1590

; <label>:1566:                                   ; preds = %1555
  %1567 = icmp slt i64 %1313, 0
  %1568 = select i1 %1567, i16 128, i16 0
  %1569 = or i16 %1556, %1568
  br label %1590

; <label>:1570:                                   ; preds = %1312
  %1571 = icmp ugt i64 %1173, %1177
  br i1 %1571, label %1590, label %1572

; <label>:1572:                                   ; preds = %1570
  %1573 = icmp eq i64 %1173, 0
  br i1 %1573, label %1590, label %1574

; <label>:1574:                                   ; preds = %1572
  br label %1575

; <label>:1575:                                   ; preds = %1574
  br label %1576

; <label>:1576:                                   ; preds = %1575
  %1577 = icmp eq i64 %1177, 0
  br i1 %1577, label %1583, label %1578

; <label>:1578:                                   ; preds = %1576
  %1579 = and i64 %1313, 1
  %1580 = icmp eq i64 %1579, 0
  br i1 %1580, label %1583, label %1581

; <label>:1581:                                   ; preds = %1578
  %1582 = icmp ugt i64 %1173, 1
  br i1 %1582, label %3302, label %1584, !llvm.loop !893

; <label>:1583:                                   ; preds = %3346, %3344, %3339, %3337, %3332, %3330, %3325, %3323, %3318, %3316, %3311, %3309, %3304, %3302, %1578, %1576
  br label %1585

; <label>:1584:                                   ; preds = %3348, %3342, %3335, %3328, %3321, %3314, %3307, %1581
  br label %1585

; <label>:1585:                                   ; preds = %1584, %1583
  %1586 = phi i16 [ 254, %1583 ], [ 255, %1584 ]
  br label %3349

; <label>:1587:                                   ; preds = %1312
  unreachable

; <label>:1588:                                   ; preds = %1402
  br label %1590

; <label>:1589:                                   ; preds = %1436
  br label %1590

; <label>:1590:                                   ; preds = %3655, %1589, %1588, %1572, %1570, %1566, %1561, %1560, %1409, %1407, %1379
  %1591 = phi i64 [ %1173, %1379 ], [ %1173, %1407 ], [ 1, %1409 ], [ %1173, %1560 ], [ %1173, %1566 ], [ %1173, %1561 ], [ %1173, %1570 ], [ 0, %1572 ], [ %1173, %1588 ], [ %1173, %1589 ], [ %1173, %3655 ]
  %1592 = phi i16 [ 0, %1379 ], [ 0, %1407 ], [ 0, %1409 ], [ %1556, %1560 ], [ %1569, %1566 ], [ %1565, %1561 ], [ 0, %1570 ], [ 255, %1572 ], [ %1403, %1588 ], [ %1432, %1589 ], [ %3656, %3655 ]
  %1593 = trunc i8 %1178 to i2
  switch i2 %1593, label %1601 [
    i2 0, label %1602
    i2 1, label %1596
    i2 -2, label %1602
    i2 -1, label %1594
  ]

; <label>:1594:                                   ; preds = %1590
  %1595 = icmp eq i64 %1177, 0
  br i1 %1595, label %1602, label %1598

; <label>:1596:                                   ; preds = %1590
  %1597 = xor i16 %1592, 255
  br label %1602

; <label>:1598:                                   ; preds = %1594
  %1599 = xor i16 %1592, 1
  %1600 = icmp eq i64 %1177, 1
  br i1 %1600, label %1602, label %1620

; <label>:1601:                                   ; preds = %1590
  unreachable

; <label>:1602:                                   ; preds = %1635, %1632, %1629, %1626, %1623, %1620, %1598, %1596, %1594, %1590, %1590
  %1603 = phi i16 [ %1597, %1596 ], [ %1592, %1590 ], [ %1592, %1590 ], [ %1633, %1632 ], [ %1630, %1629 ], [ %1627, %1626 ], [ %1624, %1623 ], [ %1621, %1620 ], [ %1599, %1598 ], [ %1592, %1594 ], [ %1638, %1635 ]
  %1604 = and i8 %12, 64
  %1605 = icmp eq i8 %1604, 0
  %1606 = icmp eq i16 %1603, 0
  br i1 %1605, label %1607, label %1612

; <label>:1607:                                   ; preds = %1602
  br i1 %1606, label %1639, label %1608

; <label>:1608:                                   ; preds = %1607
  %1609 = zext i16 %1603 to i32
  %1610 = tail call i32 @llvm.cttz.i32(i32 %1609, i1 true) #23
  %1611 = zext i32 %1610 to i64
  br label %1639

; <label>:1612:                                   ; preds = %1602
  br i1 %1606, label %1639, label %1613

; <label>:1613:                                   ; preds = %1612
  %1614 = zext i16 %1603 to i32
  %1615 = tail call i32 @llvm.ctlz.i32(i32 %1614, i1 true) #23
  %1616 = add nuw nsw i32 %1615, 65512
  %1617 = and i32 %1616, 65535
  %1618 = zext i32 %1617 to i64
  %1619 = sub nsw i64 7, %1618
  br label %1639

; <label>:1620:                                   ; preds = %1598
  %1621 = xor i16 %1592, 3
  %1622 = icmp ugt i64 %1177, 2
  br i1 %1622, label %1623, label %1602

; <label>:1623:                                   ; preds = %1620
  %1624 = xor i16 %1592, 7
  %1625 = icmp eq i64 %1177, 3
  br i1 %1625, label %1602, label %1626

; <label>:1626:                                   ; preds = %1623
  %1627 = xor i16 %1592, 15
  %1628 = icmp ugt i64 %1177, 4
  br i1 %1628, label %1629, label %1602

; <label>:1629:                                   ; preds = %1626
  %1630 = xor i16 %1592, 31
  %1631 = icmp eq i64 %1177, 5
  br i1 %1631, label %1602, label %1632

; <label>:1632:                                   ; preds = %1629
  %1633 = xor i16 %1592, 63
  %1634 = icmp ugt i64 %1177, 6
  br i1 %1634, label %1635, label %1602

; <label>:1635:                                   ; preds = %1632
  %1636 = icmp ne i64 %1177, 7
  %1637 = select i1 %1636, i16 255, i16 127
  %1638 = xor i16 %1592, %1637
  br label %1602

; <label>:1639:                                   ; preds = %1613, %1612, %1608, %1607
  %1640 = phi i64 [ %1619, %1613 ], [ 8, %1612 ], [ %1611, %1608 ], [ 8, %1607 ]
  %1641 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %1642 = and i64 %1640, 65535
  store i64 %1642, i64* %1641, align 8, !tbaa !870
  %1643 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %1644 = icmp ne i16 %1603, 0
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %1643, align 1, !tbaa !868
  %1646 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %1647 = icmp ult i64 %1177, 8
  %1648 = zext i1 %1647 to i8
  store i8 %1648, i8* %1646, align 1, !tbaa !868
  %1649 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %1650 = icmp ult i64 %1591, 8
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %1649, align 1, !tbaa !868
  %1652 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %1653 = trunc i16 %1603 to i8
  %1654 = and i8 %1653, 1
  store i8 %1654, i8* %1652, align 1, !tbaa !868
  %1655 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %1655, align 1, !tbaa !868
  %1656 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %1656, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1088) #23
  br label %3301

; <label>:1657:                                   ; preds = %5
  %1658 = bitcast <2 x i64>* %10 to { i64, i64 }*
  %1659 = bitcast <2 x i64>* %10 to %struct.uint8v16_t*
  %1660 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %1660) #23
  %1661 = bitcast i8* %2 to <2 x i64>*
  %1662 = load <2 x i64>, <2 x i64>* %1661, align 1
  %1663 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1658, i64 0, i32 1
  store <2 x i64> %1662, <2 x i64>* %10, align 16
  %1664 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %3) #22
  %1665 = add i64 %3, 1
  %1666 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1665) #22
  %1667 = add i64 %3, 2
  %1668 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1667) #22
  %1669 = add i64 %3, 3
  %1670 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1669) #22
  %1671 = add i64 %3, 4
  %1672 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1671) #22
  %1673 = add i64 %3, 5
  %1674 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1673) #22
  %1675 = add i64 %3, 6
  %1676 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1675) #22
  %1677 = add i64 %3, 7
  %1678 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1677) #22
  %1679 = add i64 %3, 8
  %1680 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1679) #22
  %1681 = add i64 %3, 9
  %1682 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1681) #22
  %1683 = add i64 %3, 10
  %1684 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1683) #22
  %1685 = add i64 %3, 11
  %1686 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1685) #22
  %1687 = add i64 %3, 12
  %1688 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1687) #22
  %1689 = add i64 %3, 13
  %1690 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1689) #22
  %1691 = add i64 %3, 14
  %1692 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1691) #22
  %1693 = add i64 %3, 15
  %1694 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %1693) #22
  %1695 = bitcast %"class.(anonymous namespace)::BitMatrix"* %6 to i8*
  call void @llvm.lifetime.start(i64 288, i8* nonnull %1695) #23
  call void @llvm.memset.p0i8.i64(i8* nonnull %1695, i8 0, i64 32, i32 8, i1 false) #23
  %1696 = lshr i8 %12, 2
  %1697 = extractelement <2 x i64> %1662, i32 0
  %1698 = trunc i64 %1697 to i8
  %1699 = icmp eq i8 %1698, 0
  %1700 = select i1 %1699, i64 0, i64 16
  %1701 = icmp eq i8 %1664, 0
  %1702 = select i1 %1701, i64 0, i64 16
  %1703 = and i64 %1697, 65280
  %1704 = icmp eq i64 %1703, 0
  %1705 = xor i1 %1699, true
  %1706 = and i1 %1704, %1705
  %1707 = select i1 %1706, i64 1, i64 %1700
  %1708 = icmp eq i8 %1666, 0
  %1709 = xor i1 %1701, true
  %1710 = and i1 %1708, %1709
  %1711 = select i1 %1710, i64 1, i64 %1702
  %1712 = and i64 %1697, 16711680
  %1713 = icmp eq i64 %1712, 0
  %1714 = icmp ugt i64 %1707, 2
  %1715 = and i1 %1713, %1714
  %1716 = select i1 %1715, i64 2, i64 %1707
  %1717 = icmp eq i8 %1668, 0
  %1718 = icmp ugt i64 %1711, 2
  %1719 = and i1 %1717, %1718
  %1720 = select i1 %1719, i64 2, i64 %1711
  %1721 = and i64 %1697, 4278190080
  %1722 = icmp eq i64 %1721, 0
  %1723 = icmp ugt i64 %1716, 3
  %1724 = and i1 %1722, %1723
  %1725 = select i1 %1724, i64 3, i64 %1716
  %1726 = icmp eq i8 %1670, 0
  %1727 = icmp ugt i64 %1720, 3
  %1728 = and i1 %1726, %1727
  %1729 = select i1 %1728, i64 3, i64 %1720
  %1730 = and i64 %1697, 1095216660480
  %1731 = icmp eq i64 %1730, 0
  %1732 = icmp ugt i64 %1725, 4
  %1733 = and i1 %1731, %1732
  %1734 = select i1 %1733, i64 4, i64 %1725
  %1735 = icmp eq i8 %1672, 0
  %1736 = icmp ugt i64 %1729, 4
  %1737 = and i1 %1735, %1736
  %1738 = select i1 %1737, i64 4, i64 %1729
  %1739 = and i64 %1697, 280375465082880
  %1740 = icmp eq i64 %1739, 0
  %1741 = icmp ugt i64 %1734, 5
  %1742 = and i1 %1740, %1741
  %1743 = select i1 %1742, i64 5, i64 %1734
  %1744 = icmp eq i8 %1674, 0
  %1745 = icmp ugt i64 %1738, 5
  %1746 = and i1 %1744, %1745
  %1747 = select i1 %1746, i64 5, i64 %1738
  %1748 = and i64 %1697, 71776119061217280
  %1749 = icmp eq i64 %1748, 0
  %1750 = icmp ugt i64 %1743, 6
  %1751 = and i1 %1749, %1750
  %1752 = select i1 %1751, i64 6, i64 %1743
  %1753 = icmp eq i8 %1676, 0
  %1754 = icmp ugt i64 %1747, 6
  %1755 = and i1 %1753, %1754
  %1756 = select i1 %1755, i64 6, i64 %1747
  %1757 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 7
  %1758 = load i8, i8* %1757, align 1, !tbaa !868
  %1759 = icmp eq i8 %1758, 0
  %1760 = icmp ugt i64 %1752, 7
  %1761 = and i1 %1759, %1760
  %1762 = select i1 %1761, i64 7, i64 %1752
  %1763 = icmp eq i8 %1678, 0
  %1764 = icmp ugt i64 %1756, 7
  %1765 = and i1 %1763, %1764
  %1766 = select i1 %1765, i64 7, i64 %1756
  %1767 = bitcast i64* %1663 to i8*
  %1768 = load i8, i8* %1767, align 8, !tbaa !868
  %1769 = icmp eq i8 %1768, 0
  %1770 = icmp ugt i64 %1762, 8
  %1771 = and i1 %1769, %1770
  %1772 = select i1 %1771, i64 8, i64 %1762
  %1773 = icmp eq i8 %1680, 0
  %1774 = icmp ugt i64 %1766, 8
  %1775 = and i1 %1773, %1774
  %1776 = select i1 %1775, i64 8, i64 %1766
  %1777 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 9
  %1778 = load i8, i8* %1777, align 1, !tbaa !868
  %1779 = icmp eq i8 %1778, 0
  %1780 = icmp ugt i64 %1772, 9
  %1781 = and i1 %1779, %1780
  %1782 = select i1 %1781, i64 9, i64 %1772
  %1783 = icmp eq i8 %1682, 0
  %1784 = icmp ugt i64 %1776, 9
  %1785 = and i1 %1783, %1784
  %1786 = select i1 %1785, i64 9, i64 %1776
  %1787 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 10
  %1788 = load i8, i8* %1787, align 2, !tbaa !868
  %1789 = icmp eq i8 %1788, 0
  %1790 = icmp ugt i64 %1782, 10
  %1791 = and i1 %1789, %1790
  %1792 = select i1 %1791, i64 10, i64 %1782
  %1793 = icmp eq i8 %1684, 0
  %1794 = icmp ugt i64 %1786, 10
  %1795 = and i1 %1793, %1794
  %1796 = select i1 %1795, i64 10, i64 %1786
  %1797 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 11
  %1798 = load i8, i8* %1797, align 1, !tbaa !868
  %1799 = icmp eq i8 %1798, 0
  %1800 = icmp ugt i64 %1792, 11
  %1801 = and i1 %1799, %1800
  %1802 = select i1 %1801, i64 11, i64 %1792
  %1803 = icmp eq i8 %1686, 0
  %1804 = icmp ugt i64 %1796, 11
  %1805 = and i1 %1803, %1804
  %1806 = select i1 %1805, i64 11, i64 %1796
  %1807 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 12
  %1808 = load i8, i8* %1807, align 4, !tbaa !868
  %1809 = icmp eq i8 %1808, 0
  %1810 = icmp ugt i64 %1802, 12
  %1811 = and i1 %1809, %1810
  %1812 = select i1 %1811, i64 12, i64 %1802
  %1813 = icmp eq i8 %1688, 0
  %1814 = icmp ugt i64 %1806, 12
  %1815 = and i1 %1813, %1814
  %1816 = select i1 %1815, i64 12, i64 %1806
  %1817 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 13
  %1818 = load i8, i8* %1817, align 1, !tbaa !868
  %1819 = icmp eq i8 %1818, 0
  %1820 = icmp ugt i64 %1812, 13
  %1821 = and i1 %1819, %1820
  %1822 = select i1 %1821, i64 13, i64 %1812
  %1823 = icmp eq i8 %1690, 0
  %1824 = icmp ugt i64 %1816, 13
  %1825 = and i1 %1823, %1824
  %1826 = select i1 %1825, i64 13, i64 %1816
  %1827 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 14
  %1828 = load i8, i8* %1827, align 2, !tbaa !868
  %1829 = icmp eq i8 %1828, 0
  %1830 = icmp ugt i64 %1822, 14
  %1831 = and i1 %1829, %1830
  %1832 = select i1 %1831, i64 14, i64 %1822
  %1833 = icmp eq i8 %1692, 0
  %1834 = icmp ugt i64 %1826, 14
  %1835 = and i1 %1833, %1834
  %1836 = select i1 %1835, i64 14, i64 %1826
  %1837 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 15
  %1838 = load i8, i8* %1837, align 1, !tbaa !868
  %1839 = icmp eq i8 %1838, 0
  %1840 = icmp ugt i64 %1832, 15
  %1841 = and i1 %1839, %1840
  %1842 = icmp eq i8 %1694, 0
  %1843 = icmp ugt i64 %1836, 15
  %1844 = and i1 %1842, %1843
  %1845 = select i1 %1844, i64 15, i64 %1836
  %1846 = trunc i8 %1696 to i2
  %1847 = icmp eq i2 %1846, 1
  br label %1851

; <label>:1848:                                   ; preds = %1894
  %1849 = select i1 %1841, i64 15, i64 %1832
  %1850 = lshr i8 %12, 4
  switch i2 %1846, label %2422 [
    i2 0, label %2015
    i2 1, label %2046
    i2 -2, label %2087
    i2 -1, label %2382
  ]

; <label>:1851:                                   ; preds = %1894, %1657
  %1852 = phi i64 [ 0, %1657 ], [ %1900, %1894 ]
  %1853 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %1659, i64 0, i32 0, i64 %1852
  %1854 = load i8, i8* %1853, align 1, !tbaa !868
  %1855 = shl i64 %1852, 4
  br i1 %1847, label %1863, label %1856

; <label>:1856:                                   ; preds = %1851
  %1857 = icmp eq i8 %1854, %1664
  %1858 = lshr i64 %1852, 2
  %1859 = and i64 %1858, 288230376151711743
  %1860 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %1859
  %1861 = and i64 %1855, 48
  %1862 = shl i64 1, %1861
  br i1 %1857, label %1902, label %1905

; <label>:1863:                                   ; preds = %1851
  %1864 = and i64 %1852, 1
  %1865 = icmp eq i64 %1864, 0
  br i1 %1865, label %1880, label %1866

; <label>:1866:                                   ; preds = %1863
  %1867 = icmp sgt i8 %1664, %1854
  %1868 = lshr i64 %1852, 2
  %1869 = and i64 %1868, 288230376151711743
  %1870 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %1869
  %1871 = and i64 %1855, 48
  %1872 = shl i64 1, %1871
  br i1 %1867, label %1876, label %1873

; <label>:1873:                                   ; preds = %1866
  %1874 = load i64, i64* %1870, align 8, !tbaa !870
  %1875 = or i64 %1874, %1872
  br label %2499

; <label>:1876:                                   ; preds = %1866
  %1877 = xor i64 %1872, -1
  %1878 = load i64, i64* %1870, align 8, !tbaa !870
  %1879 = and i64 %1878, %1877
  br label %2499

; <label>:1880:                                   ; preds = %1863
  %1881 = icmp slt i8 %1664, %1854
  %1882 = lshr i64 %1852, 2
  %1883 = and i64 %1882, 288230376151711743
  %1884 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %1883
  %1885 = and i64 %1855, 48
  %1886 = shl i64 1, %1885
  br i1 %1881, label %1890, label %1887

; <label>:1887:                                   ; preds = %1880
  %1888 = load i64, i64* %1884, align 8, !tbaa !870
  %1889 = or i64 %1888, %1886
  br label %2605

; <label>:1890:                                   ; preds = %1880
  %1891 = xor i64 %1886, -1
  %1892 = load i64, i64* %1884, align 8, !tbaa !870
  %1893 = and i64 %1892, %1891
  br label %2605

; <label>:1894:                                   ; preds = %2605, %2499, %1909
  %1895 = phi i64 [ %2710, %2605 ], [ %2604, %2499 ], [ %2013, %1909 ]
  %1896 = phi i64 [ %2709, %2605 ], [ %2603, %2499 ], [ %2014, %1909 ]
  %1897 = phi i1 [ %2705, %2605 ], [ %2599, %2499 ], [ %2009, %1909 ]
  %1898 = phi i64* [ %1884, %2605 ], [ %1870, %2499 ], [ %1860, %1909 ]
  %1899 = select i1 %1897, i64 %1896, i64 %1895
  store i64 %1899, i64* %1898, align 8, !tbaa !870
  %1900 = add nuw nsw i64 %1852, 1
  %1901 = icmp eq i64 %1900, 16
  br i1 %1901, label %1848, label %1851

; <label>:1902:                                   ; preds = %1856
  %1903 = load i64, i64* %1860, align 8, !tbaa !870
  %1904 = or i64 %1903, %1862
  br label %1909

; <label>:1905:                                   ; preds = %1856
  %1906 = xor i64 %1862, -1
  %1907 = load i64, i64* %1860, align 8, !tbaa !870
  %1908 = and i64 %1907, %1906
  br label %1909

; <label>:1909:                                   ; preds = %1905, %1902
  %1910 = phi i64 [ %1908, %1905 ], [ %1904, %1902 ]
  %1911 = icmp eq i8 %1854, %1666
  %1912 = or i64 %1861, 1
  %1913 = shl i64 1, %1912
  %1914 = xor i64 %1913, -1
  %1915 = and i64 %1910, %1914
  %1916 = or i64 %1910, %1913
  %1917 = select i1 %1911, i64 %1916, i64 %1915
  %1918 = icmp eq i8 %1854, %1668
  %1919 = or i64 %1861, 2
  %1920 = shl i64 1, %1919
  %1921 = xor i64 %1920, -1
  %1922 = and i64 %1917, %1921
  %1923 = or i64 %1917, %1920
  %1924 = select i1 %1918, i64 %1923, i64 %1922
  %1925 = icmp eq i8 %1854, %1670
  %1926 = or i64 %1861, 3
  %1927 = shl i64 1, %1926
  %1928 = xor i64 %1927, -1
  %1929 = and i64 %1924, %1928
  %1930 = or i64 %1924, %1927
  %1931 = select i1 %1925, i64 %1930, i64 %1929
  %1932 = icmp eq i8 %1854, %1672
  %1933 = or i64 %1861, 4
  %1934 = shl i64 1, %1933
  %1935 = xor i64 %1934, -1
  %1936 = and i64 %1931, %1935
  %1937 = or i64 %1931, %1934
  %1938 = select i1 %1932, i64 %1937, i64 %1936
  %1939 = icmp eq i8 %1854, %1674
  %1940 = or i64 %1861, 5
  %1941 = shl i64 1, %1940
  %1942 = xor i64 %1941, -1
  %1943 = and i64 %1938, %1942
  %1944 = or i64 %1938, %1941
  %1945 = select i1 %1939, i64 %1944, i64 %1943
  %1946 = icmp eq i8 %1854, %1676
  %1947 = or i64 %1861, 6
  %1948 = shl i64 1, %1947
  %1949 = xor i64 %1948, -1
  %1950 = and i64 %1945, %1949
  %1951 = or i64 %1945, %1948
  %1952 = select i1 %1946, i64 %1951, i64 %1950
  %1953 = icmp eq i8 %1854, %1678
  %1954 = or i64 %1861, 7
  %1955 = shl i64 1, %1954
  %1956 = xor i64 %1955, -1
  %1957 = and i64 %1952, %1956
  %1958 = or i64 %1952, %1955
  %1959 = select i1 %1953, i64 %1958, i64 %1957
  %1960 = icmp eq i8 %1854, %1680
  %1961 = or i64 %1861, 8
  %1962 = shl i64 1, %1961
  %1963 = xor i64 %1962, -1
  %1964 = and i64 %1959, %1963
  %1965 = or i64 %1959, %1962
  %1966 = select i1 %1960, i64 %1965, i64 %1964
  %1967 = icmp eq i8 %1854, %1682
  %1968 = or i64 %1861, 9
  %1969 = shl i64 1, %1968
  %1970 = xor i64 %1969, -1
  %1971 = and i64 %1966, %1970
  %1972 = or i64 %1966, %1969
  %1973 = select i1 %1967, i64 %1972, i64 %1971
  %1974 = icmp eq i8 %1854, %1684
  %1975 = or i64 %1861, 10
  %1976 = shl i64 1, %1975
  %1977 = xor i64 %1976, -1
  %1978 = and i64 %1973, %1977
  %1979 = or i64 %1973, %1976
  %1980 = select i1 %1974, i64 %1979, i64 %1978
  %1981 = icmp eq i8 %1854, %1686
  %1982 = or i64 %1861, 11
  %1983 = shl i64 1, %1982
  %1984 = xor i64 %1983, -1
  %1985 = and i64 %1980, %1984
  %1986 = or i64 %1980, %1983
  %1987 = select i1 %1981, i64 %1986, i64 %1985
  %1988 = icmp eq i8 %1854, %1688
  %1989 = or i64 %1861, 12
  %1990 = shl i64 1, %1989
  %1991 = xor i64 %1990, -1
  %1992 = and i64 %1987, %1991
  %1993 = or i64 %1987, %1990
  %1994 = select i1 %1988, i64 %1993, i64 %1992
  %1995 = icmp eq i8 %1854, %1690
  %1996 = or i64 %1861, 13
  %1997 = shl i64 1, %1996
  %1998 = xor i64 %1997, -1
  %1999 = and i64 %1994, %1998
  %2000 = or i64 %1994, %1997
  %2001 = select i1 %1995, i64 %2000, i64 %1999
  %2002 = icmp eq i8 %1854, %1692
  %2003 = or i64 %1861, 14
  %2004 = shl i64 1, %2003
  %2005 = xor i64 %2004, -1
  %2006 = and i64 %2001, %2005
  %2007 = or i64 %2001, %2004
  %2008 = select i1 %2002, i64 %2007, i64 %2006
  store i64 %2008, i64* %1860, align 8, !tbaa !870
  %2009 = icmp eq i8 %1854, %1694
  %2010 = or i64 %1861, 15
  %2011 = shl i64 1, %2010
  %2012 = xor i64 %2011, -1
  %2013 = and i64 %2008, %2012
  %2014 = or i64 %2008, %2011
  br label %1894

; <label>:2015:                                   ; preds = %1848
  %2016 = icmp eq i64 %1845, 0
  %2017 = icmp eq i64 %1849, 0
  %2018 = or i1 %2016, %2017
  br i1 %2018, label %2426, label %2019

; <label>:2019:                                   ; preds = %2015
  br label %2020

; <label>:2020:                                   ; preds = %2041, %2019
  %2021 = phi i64 [ %2043, %2041 ], [ 0, %2019 ]
  %2022 = phi i16 [ %2044, %2041 ], [ 1, %2019 ]
  %2023 = phi i16 [ %2042, %2041 ], [ 0, %2019 ]
  br label %2026

; <label>:2024:                                   ; preds = %2026
  %2025 = icmp ult i64 %2037, %1849
  br i1 %2025, label %2026, label %2040, !llvm.loop !888

; <label>:2026:                                   ; preds = %2024, %2020
  %2027 = phi i64 [ 0, %2020 ], [ %2037, %2024 ]
  %2028 = shl i64 %2027, 4
  %2029 = add i64 %2028, %2021
  %2030 = lshr i64 %2029, 6
  %2031 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2030
  %2032 = load i64, i64* %2031, align 8, !tbaa !870
  %2033 = and i64 %2029, 63
  %2034 = shl i64 1, %2033
  %2035 = and i64 %2034, %2032
  %2036 = icmp eq i64 %2035, 0
  %2037 = add nuw i64 %2027, 1
  br i1 %2036, label %2024, label %2038

; <label>:2038:                                   ; preds = %2026
  %2039 = or i16 %2023, %2022
  br label %2041

; <label>:2040:                                   ; preds = %2024
  br label %2041

; <label>:2041:                                   ; preds = %2040, %2038
  %2042 = phi i16 [ %2039, %2038 ], [ %2023, %2040 ]
  %2043 = add nuw i64 %2021, 1
  %2044 = shl i16 %2022, 1
  %2045 = icmp eq i64 %2043, %1845
  br i1 %2045, label %2423, label %2020

; <label>:2046:                                   ; preds = %1848
  %2047 = icmp eq i64 %1845, 0
  br i1 %2047, label %2426, label %2048

; <label>:2048:                                   ; preds = %2046
  %2049 = add i64 %1849, -1
  %2050 = icmp eq i64 %2049, 0
  br i1 %2050, label %2426, label %2051

; <label>:2051:                                   ; preds = %2048
  br label %2052

; <label>:2052:                                   ; preds = %2083, %2051
  %2053 = phi i16 [ %2079, %2083 ], [ 0, %2051 ]
  %2054 = phi i16 [ %2085, %2083 ], [ 1, %2051 ]
  %2055 = phi i64 [ %2084, %2083 ], [ 0, %2051 ]
  br label %2056

; <label>:2056:                                   ; preds = %2056, %2052
  %2057 = phi i16 [ %2053, %2052 ], [ %2079, %2056 ]
  %2058 = phi i64 [ 0, %2052 ], [ %2080, %2056 ]
  %2059 = shl i64 %2058, 4
  %2060 = add i64 %2059, %2055
  %2061 = lshr i64 %2060, 6
  %2062 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2061
  %2063 = load i64, i64* %2062, align 8, !tbaa !870
  %2064 = and i64 %2060, 63
  %2065 = shl i64 1, %2064
  %2066 = and i64 %2065, %2063
  %2067 = or i64 %2059, 16
  %2068 = add i64 %2067, %2055
  %2069 = lshr i64 %2068, 6
  %2070 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2069
  %2071 = load i64, i64* %2070, align 8, !tbaa !870
  %2072 = and i64 %2068, 63
  %2073 = shl i64 1, %2072
  %2074 = and i64 %2073, %2071
  %2075 = icmp eq i64 %2066, 0
  %2076 = icmp eq i64 %2074, 0
  %2077 = or i1 %2075, %2076
  %2078 = select i1 %2077, i16 0, i16 %2054
  %2079 = or i16 %2078, %2057
  %2080 = add i64 %2058, 2
  %2081 = icmp ult i64 %2080, %2049
  %2082 = and i1 %2081, %2077
  br i1 %2082, label %2056, label %2083, !llvm.loop !889

; <label>:2083:                                   ; preds = %2056
  %2084 = add nuw i64 %2055, 1
  %2085 = shl i16 %2054, 1
  %2086 = icmp eq i64 %2084, %1845
  br i1 %2086, label %2424, label %2052

; <label>:2087:                                   ; preds = %1848
  %2088 = icmp ne i64 %1849, 0
  %2089 = icmp ne i64 %1845, 0
  %2090 = and i1 %2089, %2088
  br i1 %2090, label %2091, label %2096

; <label>:2091:                                   ; preds = %2087
  %2092 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2093 = load i64, i64* %2092, align 8, !tbaa !870
  %2094 = and i64 %2093, 1
  %2095 = icmp ne i64 %2094, 0
  br label %2101

; <label>:2096:                                   ; preds = %2087
  br i1 %2088, label %2101, label %2097

; <label>:2097:                                   ; preds = %2096
  %2098 = xor i1 %2089, true
  %2099 = zext i1 %2098 to i16
  %2100 = icmp ugt i64 %1845, 1
  br label %2108

; <label>:2101:                                   ; preds = %2096, %2091
  %2102 = phi i1 [ false, %2096 ], [ %2095, %2091 ]
  %2103 = zext i1 %2102 to i16
  %2104 = icmp ugt i64 %1849, 1
  %2105 = icmp ugt i64 %1845, 1
  %2106 = and i1 %2105, %2104
  br i1 %2106, label %2114, label %2107

; <label>:2107:                                   ; preds = %2101
  br i1 %2104, label %2121, label %2108

; <label>:2108:                                   ; preds = %2107, %2097
  %2109 = phi i16 [ %2099, %2097 ], [ %2103, %2107 ]
  %2110 = phi i1 [ %2100, %2097 ], [ %2105, %2107 ]
  %2111 = select i1 %2110, i16 0, i16 2
  %2112 = or i16 %2111, %2109
  %2113 = icmp ugt i64 %1845, 2
  br label %2127

; <label>:2114:                                   ; preds = %2101
  %2115 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2116 = load i64, i64* %2115, align 8, !tbaa !870
  %2117 = and i64 %2116, 131072
  %2118 = icmp ne i64 %2117, 0
  %2119 = select i1 %2118, i16 2, i16 0
  %2120 = or i16 %2119, %2103
  br label %2121

; <label>:2121:                                   ; preds = %2114, %2107
  %2122 = phi i16 [ %2103, %2107 ], [ %2120, %2114 ]
  %2123 = icmp ugt i64 %1849, 2
  %2124 = icmp ugt i64 %1845, 2
  %2125 = and i1 %2124, %2123
  br i1 %2125, label %2133, label %2126

; <label>:2126:                                   ; preds = %2121
  br i1 %2123, label %2140, label %2127

; <label>:2127:                                   ; preds = %2126, %2108
  %2128 = phi i16 [ %2112, %2108 ], [ %2122, %2126 ]
  %2129 = phi i1 [ %2113, %2108 ], [ %2124, %2126 ]
  %2130 = select i1 %2129, i16 0, i16 4
  %2131 = or i16 %2130, %2128
  %2132 = icmp ugt i64 %1845, 3
  br label %2146

; <label>:2133:                                   ; preds = %2121
  %2134 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2135 = load i64, i64* %2134, align 8, !tbaa !870
  %2136 = and i64 %2135, 17179869184
  %2137 = icmp ne i64 %2136, 0
  %2138 = select i1 %2137, i16 4, i16 0
  %2139 = or i16 %2138, %2122
  br label %2140

; <label>:2140:                                   ; preds = %2133, %2126
  %2141 = phi i16 [ %2122, %2126 ], [ %2139, %2133 ]
  %2142 = icmp ugt i64 %1849, 3
  %2143 = icmp ugt i64 %1845, 3
  %2144 = and i1 %2143, %2142
  br i1 %2144, label %2152, label %2145

; <label>:2145:                                   ; preds = %2140
  br i1 %2142, label %2159, label %2146

; <label>:2146:                                   ; preds = %2145, %2127
  %2147 = phi i16 [ %2131, %2127 ], [ %2141, %2145 ]
  %2148 = phi i1 [ %2132, %2127 ], [ %2143, %2145 ]
  %2149 = select i1 %2148, i16 0, i16 8
  %2150 = or i16 %2149, %2147
  %2151 = icmp ugt i64 %1845, 4
  br label %2165

; <label>:2152:                                   ; preds = %2140
  %2153 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %2154 = load i64, i64* %2153, align 8, !tbaa !870
  %2155 = and i64 %2154, 2251799813685248
  %2156 = icmp ne i64 %2155, 0
  %2157 = select i1 %2156, i16 8, i16 0
  %2158 = or i16 %2157, %2141
  br label %2159

; <label>:2159:                                   ; preds = %2152, %2145
  %2160 = phi i16 [ %2141, %2145 ], [ %2158, %2152 ]
  %2161 = icmp ugt i64 %1849, 4
  %2162 = icmp ugt i64 %1845, 4
  %2163 = and i1 %2162, %2161
  br i1 %2163, label %2171, label %2164

; <label>:2164:                                   ; preds = %2159
  br i1 %2161, label %2177, label %2165

; <label>:2165:                                   ; preds = %2164, %2146
  %2166 = phi i16 [ %2150, %2146 ], [ %2160, %2164 ]
  %2167 = phi i1 [ %2151, %2146 ], [ %2162, %2164 ]
  %2168 = select i1 %2167, i16 0, i16 16
  %2169 = or i16 %2168, %2166
  %2170 = icmp ugt i64 %1845, 5
  br label %2183

; <label>:2171:                                   ; preds = %2159
  %2172 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2173 = load i64, i64* %2172, align 8, !tbaa !870
  %2174 = trunc i64 %2173 to i16
  %2175 = and i16 %2174, 16
  %2176 = or i16 %2175, %2160
  br label %2177

; <label>:2177:                                   ; preds = %2171, %2164
  %2178 = phi i16 [ %2160, %2164 ], [ %2176, %2171 ]
  %2179 = icmp ugt i64 %1849, 5
  %2180 = icmp ugt i64 %1845, 5
  %2181 = and i1 %2180, %2179
  br i1 %2181, label %2189, label %2182

; <label>:2182:                                   ; preds = %2177
  br i1 %2179, label %2196, label %2183

; <label>:2183:                                   ; preds = %2182, %2165
  %2184 = phi i16 [ %2169, %2165 ], [ %2178, %2182 ]
  %2185 = phi i1 [ %2170, %2165 ], [ %2180, %2182 ]
  %2186 = select i1 %2185, i16 0, i16 32
  %2187 = or i16 %2186, %2184
  %2188 = icmp ugt i64 %1845, 6
  br label %2202

; <label>:2189:                                   ; preds = %2177
  %2190 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2191 = load i64, i64* %2190, align 8, !tbaa !870
  %2192 = and i64 %2191, 2097152
  %2193 = icmp ne i64 %2192, 0
  %2194 = select i1 %2193, i16 32, i16 0
  %2195 = or i16 %2194, %2178
  br label %2196

; <label>:2196:                                   ; preds = %2189, %2182
  %2197 = phi i16 [ %2178, %2182 ], [ %2195, %2189 ]
  %2198 = icmp ugt i64 %1849, 6
  %2199 = icmp ugt i64 %1845, 6
  %2200 = and i1 %2199, %2198
  br i1 %2200, label %2208, label %2201

; <label>:2201:                                   ; preds = %2196
  br i1 %2198, label %2215, label %2202

; <label>:2202:                                   ; preds = %2201, %2183
  %2203 = phi i16 [ %2187, %2183 ], [ %2197, %2201 ]
  %2204 = phi i1 [ %2188, %2183 ], [ %2199, %2201 ]
  %2205 = select i1 %2204, i16 0, i16 64
  %2206 = or i16 %2205, %2203
  %2207 = icmp ugt i64 %1845, 7
  br label %2221

; <label>:2208:                                   ; preds = %2196
  %2209 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2210 = load i64, i64* %2209, align 8, !tbaa !870
  %2211 = and i64 %2210, 274877906944
  %2212 = icmp ne i64 %2211, 0
  %2213 = select i1 %2212, i16 64, i16 0
  %2214 = or i16 %2213, %2197
  br label %2215

; <label>:2215:                                   ; preds = %2208, %2201
  %2216 = phi i16 [ %2197, %2201 ], [ %2214, %2208 ]
  %2217 = icmp ugt i64 %1849, 7
  %2218 = icmp ugt i64 %1845, 7
  %2219 = and i1 %2218, %2217
  br i1 %2219, label %2227, label %2220

; <label>:2220:                                   ; preds = %2215
  br i1 %2217, label %2234, label %2221

; <label>:2221:                                   ; preds = %2220, %2202
  %2222 = phi i16 [ %2206, %2202 ], [ %2216, %2220 ]
  %2223 = phi i1 [ %2207, %2202 ], [ %2218, %2220 ]
  %2224 = select i1 %2223, i16 0, i16 128
  %2225 = or i16 %2224, %2222
  %2226 = icmp ugt i64 %1845, 8
  br label %2240

; <label>:2227:                                   ; preds = %2215
  %2228 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 1
  %2229 = load i64, i64* %2228, align 8, !tbaa !870
  %2230 = and i64 %2229, 36028797018963968
  %2231 = icmp ne i64 %2230, 0
  %2232 = select i1 %2231, i16 128, i16 0
  %2233 = or i16 %2232, %2216
  br label %2234

; <label>:2234:                                   ; preds = %2227, %2220
  %2235 = phi i16 [ %2216, %2220 ], [ %2233, %2227 ]
  %2236 = icmp ugt i64 %1849, 8
  %2237 = icmp ugt i64 %1845, 8
  %2238 = and i1 %2237, %2236
  br i1 %2238, label %2246, label %2239

; <label>:2239:                                   ; preds = %2234
  br i1 %2236, label %2252, label %2240

; <label>:2240:                                   ; preds = %2239, %2221
  %2241 = phi i16 [ %2225, %2221 ], [ %2235, %2239 ]
  %2242 = phi i1 [ %2226, %2221 ], [ %2237, %2239 ]
  %2243 = select i1 %2242, i16 0, i16 256
  %2244 = or i16 %2243, %2241
  %2245 = icmp ugt i64 %1845, 9
  br label %2258

; <label>:2246:                                   ; preds = %2234
  %2247 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2248 = load i64, i64* %2247, align 8, !tbaa !870
  %2249 = trunc i64 %2248 to i16
  %2250 = and i16 %2249, 256
  %2251 = or i16 %2250, %2235
  br label %2252

; <label>:2252:                                   ; preds = %2246, %2239
  %2253 = phi i16 [ %2235, %2239 ], [ %2251, %2246 ]
  %2254 = icmp ugt i64 %1849, 9
  %2255 = icmp ugt i64 %1845, 9
  %2256 = and i1 %2255, %2254
  br i1 %2256, label %2264, label %2257

; <label>:2257:                                   ; preds = %2252
  br i1 %2254, label %2271, label %2258

; <label>:2258:                                   ; preds = %2257, %2240
  %2259 = phi i16 [ %2244, %2240 ], [ %2253, %2257 ]
  %2260 = phi i1 [ %2245, %2240 ], [ %2255, %2257 ]
  %2261 = select i1 %2260, i16 0, i16 512
  %2262 = or i16 %2259, %2261
  %2263 = icmp ugt i64 %1845, 10
  br label %2277

; <label>:2264:                                   ; preds = %2252
  %2265 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2266 = load i64, i64* %2265, align 8, !tbaa !870
  %2267 = and i64 %2266, 33554432
  %2268 = icmp ne i64 %2267, 0
  %2269 = select i1 %2268, i16 512, i16 0
  %2270 = or i16 %2269, %2253
  br label %2271

; <label>:2271:                                   ; preds = %2264, %2257
  %2272 = phi i16 [ %2253, %2257 ], [ %2270, %2264 ]
  %2273 = icmp ugt i64 %1849, 10
  %2274 = icmp ugt i64 %1845, 10
  %2275 = and i1 %2274, %2273
  br i1 %2275, label %2283, label %2276

; <label>:2276:                                   ; preds = %2271
  br i1 %2273, label %2290, label %2277

; <label>:2277:                                   ; preds = %2276, %2258
  %2278 = phi i16 [ %2262, %2258 ], [ %2272, %2276 ]
  %2279 = phi i1 [ %2263, %2258 ], [ %2274, %2276 ]
  %2280 = select i1 %2279, i16 0, i16 1024
  %2281 = or i16 %2280, %2278
  %2282 = icmp ugt i64 %1845, 11
  br label %2296

; <label>:2283:                                   ; preds = %2271
  %2284 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2285 = load i64, i64* %2284, align 8, !tbaa !870
  %2286 = and i64 %2285, 4398046511104
  %2287 = icmp ne i64 %2286, 0
  %2288 = select i1 %2287, i16 1024, i16 0
  %2289 = or i16 %2288, %2272
  br label %2290

; <label>:2290:                                   ; preds = %2283, %2276
  %2291 = phi i16 [ %2272, %2276 ], [ %2289, %2283 ]
  %2292 = icmp ugt i64 %1849, 11
  %2293 = icmp ugt i64 %1845, 11
  %2294 = and i1 %2293, %2292
  br i1 %2294, label %2302, label %2295

; <label>:2295:                                   ; preds = %2290
  br i1 %2292, label %2309, label %2296

; <label>:2296:                                   ; preds = %2295, %2277
  %2297 = phi i16 [ %2281, %2277 ], [ %2291, %2295 ]
  %2298 = phi i1 [ %2282, %2277 ], [ %2293, %2295 ]
  %2299 = select i1 %2298, i16 0, i16 2048
  %2300 = or i16 %2299, %2297
  %2301 = icmp ugt i64 %1845, 12
  br label %2315

; <label>:2302:                                   ; preds = %2290
  %2303 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 2
  %2304 = load i64, i64* %2303, align 8, !tbaa !870
  %2305 = and i64 %2304, 576460752303423488
  %2306 = icmp ne i64 %2305, 0
  %2307 = select i1 %2306, i16 2048, i16 0
  %2308 = or i16 %2307, %2291
  br label %2309

; <label>:2309:                                   ; preds = %2302, %2295
  %2310 = phi i16 [ %2291, %2295 ], [ %2308, %2302 ]
  %2311 = icmp ugt i64 %1849, 12
  %2312 = icmp ugt i64 %1845, 12
  %2313 = and i1 %2312, %2311
  br i1 %2313, label %2321, label %2314

; <label>:2314:                                   ; preds = %2309
  br i1 %2311, label %2327, label %2315

; <label>:2315:                                   ; preds = %2314, %2296
  %2316 = phi i16 [ %2300, %2296 ], [ %2310, %2314 ]
  %2317 = phi i1 [ %2301, %2296 ], [ %2312, %2314 ]
  %2318 = select i1 %2317, i16 0, i16 4096
  %2319 = or i16 %2318, %2316
  %2320 = icmp ugt i64 %1845, 13
  br label %2333

; <label>:2321:                                   ; preds = %2309
  %2322 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2323 = load i64, i64* %2322, align 8, !tbaa !870
  %2324 = trunc i64 %2323 to i16
  %2325 = and i16 %2324, 4096
  %2326 = or i16 %2325, %2310
  br label %2327

; <label>:2327:                                   ; preds = %2321, %2314
  %2328 = phi i16 [ %2310, %2314 ], [ %2326, %2321 ]
  %2329 = icmp ugt i64 %1849, 13
  %2330 = icmp ugt i64 %1845, 13
  %2331 = and i1 %2330, %2329
  br i1 %2331, label %2339, label %2332

; <label>:2332:                                   ; preds = %2327
  br i1 %2329, label %2346, label %2333

; <label>:2333:                                   ; preds = %2332, %2315
  %2334 = phi i16 [ %2319, %2315 ], [ %2328, %2332 ]
  %2335 = phi i1 [ %2320, %2315 ], [ %2330, %2332 ]
  %2336 = select i1 %2335, i16 0, i16 8192
  %2337 = or i16 %2336, %2334
  %2338 = icmp ugt i64 %1845, 14
  br label %2352

; <label>:2339:                                   ; preds = %2327
  %2340 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2341 = load i64, i64* %2340, align 8, !tbaa !870
  %2342 = and i64 %2341, 536870912
  %2343 = icmp ne i64 %2342, 0
  %2344 = select i1 %2343, i16 8192, i16 0
  %2345 = or i16 %2344, %2328
  br label %2346

; <label>:2346:                                   ; preds = %2339, %2332
  %2347 = phi i16 [ %2328, %2332 ], [ %2345, %2339 ]
  %2348 = icmp ugt i64 %1849, 14
  %2349 = icmp ugt i64 %1845, 14
  %2350 = and i1 %2349, %2348
  br i1 %2350, label %2358, label %2351

; <label>:2351:                                   ; preds = %2346
  br i1 %2348, label %2365, label %2352

; <label>:2352:                                   ; preds = %2351, %2333
  %2353 = phi i16 [ %2337, %2333 ], [ %2347, %2351 ]
  %2354 = phi i1 [ %2338, %2333 ], [ %2349, %2351 ]
  %2355 = select i1 %2354, i16 0, i16 16384
  %2356 = or i16 %2355, %2353
  %2357 = icmp ugt i64 %1845, 15
  br label %2371

; <label>:2358:                                   ; preds = %2346
  %2359 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2360 = load i64, i64* %2359, align 8, !tbaa !870
  %2361 = and i64 %2360, 70368744177664
  %2362 = icmp ne i64 %2361, 0
  %2363 = select i1 %2362, i16 16384, i16 0
  %2364 = or i16 %2363, %2347
  br label %2365

; <label>:2365:                                   ; preds = %2358, %2351
  %2366 = phi i16 [ %2347, %2351 ], [ %2364, %2358 ]
  %2367 = icmp ugt i64 %1849, 15
  %2368 = icmp ugt i64 %1845, 15
  %2369 = and i1 %2368, %2367
  br i1 %2369, label %2376, label %2370

; <label>:2370:                                   ; preds = %2365
  br i1 %2367, label %2426, label %2371

; <label>:2371:                                   ; preds = %2370, %2352
  %2372 = phi i16 [ %2356, %2352 ], [ %2366, %2370 ]
  %2373 = phi i1 [ %2357, %2352 ], [ %2368, %2370 ]
  %2374 = select i1 %2373, i16 0, i16 -32768
  %2375 = or i16 %2374, %2372
  br label %2426

; <label>:2376:                                   ; preds = %2365
  %2377 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 3
  %2378 = load i64, i64* %2377, align 8, !tbaa !870
  %2379 = icmp slt i64 %2378, 0
  %2380 = select i1 %2379, i16 -32768, i16 0
  %2381 = or i16 %2380, %2366
  br label %2426

; <label>:2382:                                   ; preds = %1848
  %2383 = icmp ugt i64 %1849, %1845
  br i1 %2383, label %2426, label %2384

; <label>:2384:                                   ; preds = %2382
  %2385 = icmp eq i64 %1849, 0
  br i1 %2385, label %2426, label %2386

; <label>:2386:                                   ; preds = %2384
  br label %2387

; <label>:2387:                                   ; preds = %2417, %2386
  %2388 = phi i16 [ %2418, %2417 ], [ -1, %2386 ]
  %2389 = phi i64 [ %2419, %2417 ], [ 0, %2386 ]
  %2390 = phi i16 [ %2420, %2417 ], [ 1, %2386 ]
  %2391 = sub nuw nsw i64 16, %2389
  br label %2392

; <label>:2392:                                   ; preds = %2406, %2387
  %2393 = phi i64 [ %2408, %2406 ], [ %2389, %2387 ]
  %2394 = phi i64 [ %2407, %2406 ], [ 0, %2387 ]
  %2395 = icmp ult i64 %2393, %1845
  br i1 %2395, label %2396, label %2414

; <label>:2396:                                   ; preds = %2392
  %2397 = shl i64 %2394, 4
  %2398 = add nuw nsw i64 %2397, %2393
  %2399 = lshr i64 %2398, 6
  %2400 = getelementptr inbounds %"class.(anonymous namespace)::BitMatrix", %"class.(anonymous namespace)::BitMatrix"* %6, i64 0, i32 0, i32 0, i32 0, i64 %2399
  %2401 = load i64, i64* %2400, align 8, !tbaa !870
  %2402 = and i64 %2398, 63
  %2403 = shl i64 1, %2402
  %2404 = and i64 %2401, %2403
  %2405 = icmp eq i64 %2404, 0
  br i1 %2405, label %2414, label %2406

; <label>:2406:                                   ; preds = %2396
  %2407 = add nuw nsw i64 %2394, 1
  %2408 = add nuw nsw i64 %2393, 1
  %2409 = icmp ult i64 %2407, %2391
  %2410 = icmp ult i64 %2408, 16
  %2411 = and i1 %2410, %2409
  %2412 = icmp ult i64 %2407, %1849
  %2413 = and i1 %2412, %2411
  br i1 %2413, label %2392, label %2416, !llvm.loop !890

; <label>:2414:                                   ; preds = %2396, %2392
  %2415 = xor i16 %2390, %2388
  br label %2417

; <label>:2416:                                   ; preds = %2406
  br label %2417

; <label>:2417:                                   ; preds = %2416, %2414
  %2418 = phi i16 [ %2415, %2414 ], [ %2388, %2416 ]
  %2419 = add nuw nsw i64 %2389, 1
  %2420 = shl i16 %2390, 1
  %2421 = icmp eq i64 %2419, 16
  br i1 %2421, label %2425, label %2387

; <label>:2422:                                   ; preds = %1848
  unreachable

; <label>:2423:                                   ; preds = %2041
  br label %2426

; <label>:2424:                                   ; preds = %2083
  br label %2426

; <label>:2425:                                   ; preds = %2417
  br label %2426

; <label>:2426:                                   ; preds = %2425, %2424, %2423, %2384, %2382, %2376, %2371, %2370, %2048, %2046, %2015
  %2427 = phi i64 [ %1849, %2015 ], [ %1849, %2046 ], [ 1, %2048 ], [ %1849, %2370 ], [ %1849, %2376 ], [ %1849, %2371 ], [ %1849, %2382 ], [ 0, %2384 ], [ %1849, %2423 ], [ %1849, %2424 ], [ %1849, %2425 ]
  %2428 = phi i16 [ 0, %2015 ], [ 0, %2046 ], [ 0, %2048 ], [ %2366, %2370 ], [ %2381, %2376 ], [ %2375, %2371 ], [ 0, %2382 ], [ -1, %2384 ], [ %2042, %2423 ], [ %2079, %2424 ], [ %2418, %2425 ]
  %2429 = trunc i8 %1850 to i2
  switch i2 %2429, label %2437 [
    i2 0, label %2438
    i2 1, label %2432
    i2 -2, label %2438
    i2 -1, label %2430
  ]

; <label>:2430:                                   ; preds = %2426
  %2431 = icmp eq i64 %1845, 0
  br i1 %2431, label %2438, label %2434

; <label>:2432:                                   ; preds = %2426
  %2433 = xor i16 %2428, -1
  br label %2438

; <label>:2434:                                   ; preds = %2430
  %2435 = xor i16 %2428, 1
  %2436 = icmp eq i64 %1845, 1
  br i1 %2436, label %2438, label %2456

; <label>:2437:                                   ; preds = %2426
  unreachable

; <label>:2438:                                   ; preds = %2495, %2492, %2489, %2486, %2483, %2480, %2477, %2474, %2471, %2468, %2465, %2462, %2459, %2456, %2434, %2432, %2430, %2426, %2426
  %2439 = phi i16 [ %2433, %2432 ], [ %2428, %2426 ], [ %2428, %2426 ], [ %2493, %2492 ], [ %2490, %2489 ], [ %2487, %2486 ], [ %2484, %2483 ], [ %2481, %2480 ], [ %2478, %2477 ], [ %2475, %2474 ], [ %2472, %2471 ], [ %2469, %2468 ], [ %2466, %2465 ], [ %2463, %2462 ], [ %2460, %2459 ], [ %2457, %2456 ], [ %2435, %2434 ], [ %2428, %2430 ], [ %2498, %2495 ]
  %2440 = and i8 %12, 64
  %2441 = icmp eq i8 %2440, 0
  %2442 = icmp eq i16 %2439, 0
  br i1 %2441, label %2443, label %2448

; <label>:2443:                                   ; preds = %2438
  br i1 %2442, label %2711, label %2444

; <label>:2444:                                   ; preds = %2443
  %2445 = zext i16 %2439 to i32
  %2446 = tail call i32 @llvm.cttz.i32(i32 %2445, i1 true) #23
  %2447 = zext i32 %2446 to i64
  br label %2711

; <label>:2448:                                   ; preds = %2438
  br i1 %2442, label %2711, label %2449

; <label>:2449:                                   ; preds = %2448
  %2450 = zext i16 %2439 to i32
  %2451 = tail call i32 @llvm.ctlz.i32(i32 %2450, i1 true) #23
  %2452 = add nuw nsw i32 %2451, 65520
  %2453 = and i32 %2452, 65535
  %2454 = zext i32 %2453 to i64
  %2455 = sub nsw i64 15, %2454
  br label %2711

; <label>:2456:                                   ; preds = %2434
  %2457 = xor i16 %2428, 3
  %2458 = icmp ugt i64 %1845, 2
  br i1 %2458, label %2459, label %2438

; <label>:2459:                                   ; preds = %2456
  %2460 = xor i16 %2428, 7
  %2461 = icmp eq i64 %1845, 3
  br i1 %2461, label %2438, label %2462

; <label>:2462:                                   ; preds = %2459
  %2463 = xor i16 %2428, 15
  %2464 = icmp ugt i64 %1845, 4
  br i1 %2464, label %2465, label %2438

; <label>:2465:                                   ; preds = %2462
  %2466 = xor i16 %2428, 31
  %2467 = icmp eq i64 %1845, 5
  br i1 %2467, label %2438, label %2468

; <label>:2468:                                   ; preds = %2465
  %2469 = xor i16 %2428, 63
  %2470 = icmp ugt i64 %1845, 6
  br i1 %2470, label %2471, label %2438

; <label>:2471:                                   ; preds = %2468
  %2472 = xor i16 %2428, 127
  %2473 = icmp eq i64 %1845, 7
  br i1 %2473, label %2438, label %2474

; <label>:2474:                                   ; preds = %2471
  %2475 = xor i16 %2428, 255
  %2476 = icmp ugt i64 %1845, 8
  br i1 %2476, label %2477, label %2438

; <label>:2477:                                   ; preds = %2474
  %2478 = xor i16 %2428, 511
  %2479 = icmp eq i64 %1845, 9
  br i1 %2479, label %2438, label %2480

; <label>:2480:                                   ; preds = %2477
  %2481 = xor i16 %2428, 1023
  %2482 = icmp ugt i64 %1845, 10
  br i1 %2482, label %2483, label %2438

; <label>:2483:                                   ; preds = %2480
  %2484 = xor i16 %2428, 2047
  %2485 = icmp eq i64 %1845, 11
  br i1 %2485, label %2438, label %2486

; <label>:2486:                                   ; preds = %2483
  %2487 = xor i16 %2428, 4095
  %2488 = icmp ugt i64 %1845, 12
  br i1 %2488, label %2489, label %2438

; <label>:2489:                                   ; preds = %2486
  %2490 = xor i16 %2428, 8191
  %2491 = icmp eq i64 %1845, 13
  br i1 %2491, label %2438, label %2492

; <label>:2492:                                   ; preds = %2489
  %2493 = xor i16 %2428, 16383
  %2494 = icmp ugt i64 %1845, 14
  br i1 %2494, label %2495, label %2438

; <label>:2495:                                   ; preds = %2492
  %2496 = icmp ne i64 %1845, 15
  %2497 = select i1 %2496, i16 -1, i16 32767
  %2498 = xor i16 %2428, %2497
  br label %2438

; <label>:2499:                                   ; preds = %1876, %1873
  %2500 = phi i64 [ %1879, %1876 ], [ %1875, %1873 ]
  %2501 = icmp sgt i8 %1666, %1854
  %2502 = or i64 %1871, 1
  %2503 = shl i64 1, %2502
  %2504 = xor i64 %2503, -1
  %2505 = and i64 %2500, %2504
  %2506 = or i64 %2500, %2503
  %2507 = select i1 %2501, i64 %2505, i64 %2506
  %2508 = icmp sgt i8 %1668, %1854
  %2509 = or i64 %1871, 2
  %2510 = shl i64 1, %2509
  %2511 = xor i64 %2510, -1
  %2512 = and i64 %2507, %2511
  %2513 = or i64 %2507, %2510
  %2514 = select i1 %2508, i64 %2512, i64 %2513
  %2515 = icmp sgt i8 %1670, %1854
  %2516 = or i64 %1871, 3
  %2517 = shl i64 1, %2516
  %2518 = xor i64 %2517, -1
  %2519 = and i64 %2514, %2518
  %2520 = or i64 %2514, %2517
  %2521 = select i1 %2515, i64 %2519, i64 %2520
  %2522 = icmp sgt i8 %1672, %1854
  %2523 = or i64 %1871, 4
  %2524 = shl i64 1, %2523
  %2525 = xor i64 %2524, -1
  %2526 = and i64 %2521, %2525
  %2527 = or i64 %2521, %2524
  %2528 = select i1 %2522, i64 %2526, i64 %2527
  %2529 = icmp sgt i8 %1674, %1854
  %2530 = or i64 %1871, 5
  %2531 = shl i64 1, %2530
  %2532 = xor i64 %2531, -1
  %2533 = and i64 %2528, %2532
  %2534 = or i64 %2528, %2531
  %2535 = select i1 %2529, i64 %2533, i64 %2534
  %2536 = icmp sgt i8 %1676, %1854
  %2537 = or i64 %1871, 6
  %2538 = shl i64 1, %2537
  %2539 = xor i64 %2538, -1
  %2540 = and i64 %2535, %2539
  %2541 = or i64 %2535, %2538
  %2542 = select i1 %2536, i64 %2540, i64 %2541
  %2543 = icmp sgt i8 %1678, %1854
  %2544 = or i64 %1871, 7
  %2545 = shl i64 1, %2544
  %2546 = xor i64 %2545, -1
  %2547 = and i64 %2542, %2546
  %2548 = or i64 %2542, %2545
  %2549 = select i1 %2543, i64 %2547, i64 %2548
  %2550 = icmp sgt i8 %1680, %1854
  %2551 = or i64 %1871, 8
  %2552 = shl i64 1, %2551
  %2553 = xor i64 %2552, -1
  %2554 = and i64 %2549, %2553
  %2555 = or i64 %2549, %2552
  %2556 = select i1 %2550, i64 %2554, i64 %2555
  %2557 = icmp sgt i8 %1682, %1854
  %2558 = or i64 %1871, 9
  %2559 = shl i64 1, %2558
  %2560 = xor i64 %2559, -1
  %2561 = and i64 %2556, %2560
  %2562 = or i64 %2556, %2559
  %2563 = select i1 %2557, i64 %2561, i64 %2562
  %2564 = icmp sgt i8 %1684, %1854
  %2565 = or i64 %1871, 10
  %2566 = shl i64 1, %2565
  %2567 = xor i64 %2566, -1
  %2568 = and i64 %2563, %2567
  %2569 = or i64 %2563, %2566
  %2570 = select i1 %2564, i64 %2568, i64 %2569
  %2571 = icmp sgt i8 %1686, %1854
  %2572 = or i64 %1871, 11
  %2573 = shl i64 1, %2572
  %2574 = xor i64 %2573, -1
  %2575 = and i64 %2570, %2574
  %2576 = or i64 %2570, %2573
  %2577 = select i1 %2571, i64 %2575, i64 %2576
  %2578 = icmp sgt i8 %1688, %1854
  %2579 = or i64 %1871, 12
  %2580 = shl i64 1, %2579
  %2581 = xor i64 %2580, -1
  %2582 = and i64 %2577, %2581
  %2583 = or i64 %2577, %2580
  %2584 = select i1 %2578, i64 %2582, i64 %2583
  %2585 = icmp sgt i8 %1690, %1854
  %2586 = or i64 %1871, 13
  %2587 = shl i64 1, %2586
  %2588 = xor i64 %2587, -1
  %2589 = and i64 %2584, %2588
  %2590 = or i64 %2584, %2587
  %2591 = select i1 %2585, i64 %2589, i64 %2590
  %2592 = icmp sgt i8 %1692, %1854
  %2593 = or i64 %1871, 14
  %2594 = shl i64 1, %2593
  %2595 = xor i64 %2594, -1
  %2596 = and i64 %2591, %2595
  %2597 = or i64 %2591, %2594
  %2598 = select i1 %2592, i64 %2596, i64 %2597
  store i64 %2598, i64* %1870, align 8, !tbaa !870
  %2599 = icmp sgt i8 %1694, %1854
  %2600 = or i64 %1871, 15
  %2601 = shl i64 1, %2600
  %2602 = xor i64 %2601, -1
  %2603 = and i64 %2598, %2602
  %2604 = or i64 %2598, %2601
  br label %1894

; <label>:2605:                                   ; preds = %1890, %1887
  %2606 = phi i64 [ %1893, %1890 ], [ %1889, %1887 ]
  %2607 = icmp slt i8 %1666, %1854
  %2608 = or i64 %1885, 1
  %2609 = shl i64 1, %2608
  %2610 = xor i64 %2609, -1
  %2611 = and i64 %2606, %2610
  %2612 = or i64 %2606, %2609
  %2613 = select i1 %2607, i64 %2611, i64 %2612
  %2614 = icmp slt i8 %1668, %1854
  %2615 = or i64 %1885, 2
  %2616 = shl i64 1, %2615
  %2617 = xor i64 %2616, -1
  %2618 = and i64 %2613, %2617
  %2619 = or i64 %2613, %2616
  %2620 = select i1 %2614, i64 %2618, i64 %2619
  %2621 = icmp slt i8 %1670, %1854
  %2622 = or i64 %1885, 3
  %2623 = shl i64 1, %2622
  %2624 = xor i64 %2623, -1
  %2625 = and i64 %2620, %2624
  %2626 = or i64 %2620, %2623
  %2627 = select i1 %2621, i64 %2625, i64 %2626
  %2628 = icmp slt i8 %1672, %1854
  %2629 = or i64 %1885, 4
  %2630 = shl i64 1, %2629
  %2631 = xor i64 %2630, -1
  %2632 = and i64 %2627, %2631
  %2633 = or i64 %2627, %2630
  %2634 = select i1 %2628, i64 %2632, i64 %2633
  %2635 = icmp slt i8 %1674, %1854
  %2636 = or i64 %1885, 5
  %2637 = shl i64 1, %2636
  %2638 = xor i64 %2637, -1
  %2639 = and i64 %2634, %2638
  %2640 = or i64 %2634, %2637
  %2641 = select i1 %2635, i64 %2639, i64 %2640
  %2642 = icmp slt i8 %1676, %1854
  %2643 = or i64 %1885, 6
  %2644 = shl i64 1, %2643
  %2645 = xor i64 %2644, -1
  %2646 = and i64 %2641, %2645
  %2647 = or i64 %2641, %2644
  %2648 = select i1 %2642, i64 %2646, i64 %2647
  %2649 = icmp slt i8 %1678, %1854
  %2650 = or i64 %1885, 7
  %2651 = shl i64 1, %2650
  %2652 = xor i64 %2651, -1
  %2653 = and i64 %2648, %2652
  %2654 = or i64 %2648, %2651
  %2655 = select i1 %2649, i64 %2653, i64 %2654
  %2656 = icmp slt i8 %1680, %1854
  %2657 = or i64 %1885, 8
  %2658 = shl i64 1, %2657
  %2659 = xor i64 %2658, -1
  %2660 = and i64 %2655, %2659
  %2661 = or i64 %2655, %2658
  %2662 = select i1 %2656, i64 %2660, i64 %2661
  %2663 = icmp slt i8 %1682, %1854
  %2664 = or i64 %1885, 9
  %2665 = shl i64 1, %2664
  %2666 = xor i64 %2665, -1
  %2667 = and i64 %2662, %2666
  %2668 = or i64 %2662, %2665
  %2669 = select i1 %2663, i64 %2667, i64 %2668
  %2670 = icmp slt i8 %1684, %1854
  %2671 = or i64 %1885, 10
  %2672 = shl i64 1, %2671
  %2673 = xor i64 %2672, -1
  %2674 = and i64 %2669, %2673
  %2675 = or i64 %2669, %2672
  %2676 = select i1 %2670, i64 %2674, i64 %2675
  %2677 = icmp slt i8 %1686, %1854
  %2678 = or i64 %1885, 11
  %2679 = shl i64 1, %2678
  %2680 = xor i64 %2679, -1
  %2681 = and i64 %2676, %2680
  %2682 = or i64 %2676, %2679
  %2683 = select i1 %2677, i64 %2681, i64 %2682
  %2684 = icmp slt i8 %1688, %1854
  %2685 = or i64 %1885, 12
  %2686 = shl i64 1, %2685
  %2687 = xor i64 %2686, -1
  %2688 = and i64 %2683, %2687
  %2689 = or i64 %2683, %2686
  %2690 = select i1 %2684, i64 %2688, i64 %2689
  %2691 = icmp slt i8 %1690, %1854
  %2692 = or i64 %1885, 13
  %2693 = shl i64 1, %2692
  %2694 = xor i64 %2693, -1
  %2695 = and i64 %2690, %2694
  %2696 = or i64 %2690, %2693
  %2697 = select i1 %2691, i64 %2695, i64 %2696
  %2698 = icmp slt i8 %1692, %1854
  %2699 = or i64 %1885, 14
  %2700 = shl i64 1, %2699
  %2701 = xor i64 %2700, -1
  %2702 = and i64 %2697, %2701
  %2703 = or i64 %2697, %2700
  %2704 = select i1 %2698, i64 %2702, i64 %2703
  store i64 %2704, i64* %1884, align 8, !tbaa !870
  %2705 = icmp slt i8 %1694, %1854
  %2706 = or i64 %1885, 15
  %2707 = shl i64 1, %2706
  %2708 = xor i64 %2707, -1
  %2709 = and i64 %2704, %2708
  %2710 = or i64 %2704, %2707
  br label %1894

; <label>:2711:                                   ; preds = %2449, %2448, %2444, %2443
  %2712 = phi i64 [ %2455, %2449 ], [ 16, %2448 ], [ %2447, %2444 ], [ 16, %2443 ]
  %2713 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %2714 = and i64 %2712, 65535
  store i64 %2714, i64* %2713, align 8, !tbaa !870
  %2715 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %2716 = icmp ne i16 %2439, 0
  %2717 = zext i1 %2716 to i8
  store i8 %2717, i8* %2715, align 1, !tbaa !868
  %2718 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %2719 = icmp ult i64 %1845, 16
  %2720 = zext i1 %2719 to i8
  store i8 %2720, i8* %2718, align 1, !tbaa !868
  %2721 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %2722 = icmp ult i64 %2427, 16
  %2723 = zext i1 %2722 to i8
  store i8 %2723, i8* %2721, align 1, !tbaa !868
  %2724 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %2725 = trunc i16 %2439 to i8
  %2726 = and i8 %2725, 1
  store i8 %2726, i8* %2724, align 1, !tbaa !868
  %2727 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %2727, align 1, !tbaa !868
  %2728 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %2728, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 288, i8* nonnull %1695) #23
  call void @llvm.lifetime.end(i64 16, i8* nonnull %1660) #23
  br label %3301

; <label>:2729:                                   ; preds = %5
  %2730 = bitcast { i64, i64 }* %11 to %struct.uint16v8_t*
  %2731 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %2731) #23
  %2732 = bitcast i8* %2 to i64*
  %2733 = load i64, i64* %2732, align 1
  %2734 = getelementptr inbounds i8, i8* %2, i64 8
  %2735 = bitcast i8* %2734 to i64*
  %2736 = load i64, i64* %2735, align 1
  %2737 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 0
  store i64 %2733, i64* %2737, align 8
  %2738 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  store i64 %2736, i64* %2738, align 8
  %2739 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %2740 = add i64 %3, 2
  %2741 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2740) #22
  %2742 = add i64 %3, 4
  %2743 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2742) #22
  %2744 = add i64 %3, 6
  %2745 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2744) #22
  %2746 = add i64 %3, 8
  %2747 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2746) #22
  %2748 = add i64 %3, 10
  %2749 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2748) #22
  %2750 = add i64 %3, 12
  %2751 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2750) #22
  %2752 = add i64 %3, 14
  %2753 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2752) #22
  %2754 = lshr i8 %12, 2
  %2755 = trunc i64 %2733 to i16
  %2756 = icmp eq i16 %2755, 0
  %2757 = select i1 %2756, i64 0, i64 8
  %2758 = icmp eq i16 %2739, 0
  %2759 = select i1 %2758, i64 0, i64 8
  %2760 = and i64 %2733, 4294901760
  %2761 = icmp eq i64 %2760, 0
  %2762 = xor i1 %2756, true
  %2763 = and i1 %2761, %2762
  %2764 = select i1 %2763, i64 1, i64 %2757
  %2765 = icmp eq i16 %2741, 0
  %2766 = xor i1 %2758, true
  %2767 = and i1 %2765, %2766
  %2768 = select i1 %2767, i64 1, i64 %2759
  %2769 = and i64 %2733, 281470681743360
  %2770 = icmp eq i64 %2769, 0
  %2771 = icmp ugt i64 %2764, 2
  %2772 = and i1 %2770, %2771
  %2773 = select i1 %2772, i64 2, i64 %2764
  %2774 = icmp eq i16 %2743, 0
  %2775 = icmp ugt i64 %2768, 2
  %2776 = and i1 %2774, %2775
  %2777 = select i1 %2776, i64 2, i64 %2768
  %2778 = icmp ult i64 %2733, 281474976710656
  %2779 = icmp ugt i64 %2773, 3
  %2780 = and i1 %2778, %2779
  %2781 = select i1 %2780, i64 3, i64 %2773
  %2782 = icmp eq i16 %2745, 0
  %2783 = icmp ugt i64 %2777, 3
  %2784 = and i1 %2782, %2783
  %2785 = select i1 %2784, i64 3, i64 %2777
  %2786 = trunc i64 %2736 to i16
  %2787 = icmp eq i16 %2786, 0
  %2788 = icmp ugt i64 %2781, 4
  %2789 = and i1 %2787, %2788
  %2790 = select i1 %2789, i64 4, i64 %2781
  %2791 = icmp eq i16 %2747, 0
  %2792 = icmp ugt i64 %2785, 4
  %2793 = and i1 %2791, %2792
  %2794 = select i1 %2793, i64 4, i64 %2785
  %2795 = and i64 %2736, 4294901760
  %2796 = icmp eq i64 %2795, 0
  %2797 = icmp ugt i64 %2790, 5
  %2798 = and i1 %2796, %2797
  %2799 = select i1 %2798, i64 5, i64 %2790
  %2800 = icmp eq i16 %2749, 0
  %2801 = icmp ugt i64 %2794, 5
  %2802 = and i1 %2800, %2801
  %2803 = select i1 %2802, i64 5, i64 %2794
  %2804 = and i64 %2736, 281470681743360
  %2805 = icmp eq i64 %2804, 0
  %2806 = icmp ugt i64 %2799, 6
  %2807 = and i1 %2805, %2806
  %2808 = select i1 %2807, i64 6, i64 %2799
  %2809 = icmp eq i16 %2751, 0
  %2810 = icmp ugt i64 %2803, 6
  %2811 = and i1 %2809, %2810
  %2812 = select i1 %2811, i64 6, i64 %2803
  %2813 = icmp ult i64 %2736, 281474976710656
  %2814 = icmp ugt i64 %2808, 7
  %2815 = and i1 %2813, %2814
  %2816 = select i1 %2815, i64 7, i64 %2808
  %2817 = icmp eq i16 %2753, 0
  %2818 = icmp ugt i64 %2812, 7
  %2819 = and i1 %2817, %2818
  %2820 = select i1 %2819, i64 7, i64 %2812
  %2821 = lshr i8 %12, 4
  %2822 = trunc i8 %2754 to i2
  %2823 = icmp eq i2 %2822, 1
  br i1 %2823, label %2825, label %2824

; <label>:2824:                                   ; preds = %2729
  br label %2957

; <label>:2825:                                   ; preds = %2729
  br label %2826

; <label>:2826:                                   ; preds = %2950, %2825
  %2827 = phi i16 [ %2952, %2950 ], [ %2755, %2825 ]
  %2828 = phi i64 [ %2948, %2950 ], [ 0, %2825 ]
  %2829 = phi i64 [ %2947, %2950 ], [ 0, %2825 ]
  %2830 = and i64 %2828, 1
  %2831 = icmp eq i64 %2830, 0
  %2832 = shl i64 %2828, 3
  br i1 %2831, label %2888, label %2833

; <label>:2833:                                   ; preds = %2826
  %2834 = icmp sgt i16 %2739, %2827
  %2835 = shl i64 1, %2832
  %2836 = xor i64 %2835, -1
  %2837 = and i64 %2829, %2836
  %2838 = or i64 %2835, %2829
  %2839 = select i1 %2834, i64 %2837, i64 %2838
  %2840 = icmp sgt i16 %2741, %2827
  %2841 = or i64 %2832, 1
  %2842 = shl i64 1, %2841
  %2843 = xor i64 %2842, -1
  %2844 = and i64 %2839, %2843
  %2845 = or i64 %2839, %2842
  %2846 = select i1 %2840, i64 %2844, i64 %2845
  %2847 = icmp sgt i16 %2743, %2827
  %2848 = or i64 %2832, 2
  %2849 = shl i64 1, %2848
  %2850 = xor i64 %2849, -1
  %2851 = and i64 %2846, %2850
  %2852 = or i64 %2846, %2849
  %2853 = select i1 %2847, i64 %2851, i64 %2852
  %2854 = icmp sgt i16 %2745, %2827
  %2855 = or i64 %2832, 3
  %2856 = shl i64 1, %2855
  %2857 = xor i64 %2856, -1
  %2858 = and i64 %2853, %2857
  %2859 = or i64 %2853, %2856
  %2860 = select i1 %2854, i64 %2858, i64 %2859
  %2861 = icmp sgt i16 %2747, %2827
  %2862 = or i64 %2832, 4
  %2863 = shl i64 1, %2862
  %2864 = xor i64 %2863, -1
  %2865 = and i64 %2860, %2864
  %2866 = or i64 %2860, %2863
  %2867 = select i1 %2861, i64 %2865, i64 %2866
  %2868 = icmp sgt i16 %2749, %2827
  %2869 = or i64 %2832, 5
  %2870 = shl i64 1, %2869
  %2871 = xor i64 %2870, -1
  %2872 = and i64 %2867, %2871
  %2873 = or i64 %2867, %2870
  %2874 = select i1 %2868, i64 %2872, i64 %2873
  %2875 = icmp sgt i16 %2751, %2827
  %2876 = or i64 %2832, 6
  %2877 = shl i64 1, %2876
  %2878 = xor i64 %2877, -1
  %2879 = and i64 %2874, %2878
  %2880 = or i64 %2874, %2877
  %2881 = select i1 %2875, i64 %2879, i64 %2880
  %2882 = icmp sgt i16 %2753, %2827
  %2883 = or i64 %2832, 7
  %2884 = shl i64 1, %2883
  %2885 = xor i64 %2884, -1
  %2886 = and i64 %2881, %2885
  %2887 = or i64 %2881, %2884
  br label %2943

; <label>:2888:                                   ; preds = %2826
  %2889 = icmp slt i16 %2739, %2827
  %2890 = shl i64 1, %2832
  %2891 = xor i64 %2890, -1
  %2892 = and i64 %2829, %2891
  %2893 = or i64 %2890, %2829
  %2894 = select i1 %2889, i64 %2892, i64 %2893
  %2895 = icmp slt i16 %2741, %2827
  %2896 = or i64 %2832, 1
  %2897 = shl i64 1, %2896
  %2898 = xor i64 %2897, -1
  %2899 = and i64 %2894, %2898
  %2900 = or i64 %2894, %2897
  %2901 = select i1 %2895, i64 %2899, i64 %2900
  %2902 = icmp slt i16 %2743, %2827
  %2903 = or i64 %2832, 2
  %2904 = shl i64 1, %2903
  %2905 = xor i64 %2904, -1
  %2906 = and i64 %2901, %2905
  %2907 = or i64 %2901, %2904
  %2908 = select i1 %2902, i64 %2906, i64 %2907
  %2909 = icmp slt i16 %2745, %2827
  %2910 = or i64 %2832, 3
  %2911 = shl i64 1, %2910
  %2912 = xor i64 %2911, -1
  %2913 = and i64 %2908, %2912
  %2914 = or i64 %2908, %2911
  %2915 = select i1 %2909, i64 %2913, i64 %2914
  %2916 = icmp slt i16 %2747, %2827
  %2917 = or i64 %2832, 4
  %2918 = shl i64 1, %2917
  %2919 = xor i64 %2918, -1
  %2920 = and i64 %2915, %2919
  %2921 = or i64 %2915, %2918
  %2922 = select i1 %2916, i64 %2920, i64 %2921
  %2923 = icmp slt i16 %2749, %2827
  %2924 = or i64 %2832, 5
  %2925 = shl i64 1, %2924
  %2926 = xor i64 %2925, -1
  %2927 = and i64 %2922, %2926
  %2928 = or i64 %2922, %2925
  %2929 = select i1 %2923, i64 %2927, i64 %2928
  %2930 = icmp slt i16 %2751, %2827
  %2931 = or i64 %2832, 6
  %2932 = shl i64 1, %2931
  %2933 = xor i64 %2932, -1
  %2934 = and i64 %2929, %2933
  %2935 = or i64 %2929, %2932
  %2936 = select i1 %2930, i64 %2934, i64 %2935
  %2937 = icmp slt i16 %2753, %2827
  %2938 = or i64 %2832, 7
  %2939 = shl i64 1, %2938
  %2940 = xor i64 %2939, -1
  %2941 = and i64 %2936, %2940
  %2942 = or i64 %2936, %2939
  br label %2943

; <label>:2943:                                   ; preds = %2888, %2833
  %2944 = phi i64 [ %2887, %2833 ], [ %2942, %2888 ]
  %2945 = phi i64 [ %2886, %2833 ], [ %2941, %2888 ]
  %2946 = phi i1 [ %2882, %2833 ], [ %2937, %2888 ]
  %2947 = select i1 %2946, i64 %2945, i64 %2944
  %2948 = add nuw nsw i64 %2828, 1
  %2949 = icmp eq i64 %2948, 8
  br i1 %2949, label %2953, label %2950

; <label>:2950:                                   ; preds = %2943
  %2951 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2730, i64 0, i32 0, i64 %2948
  %2952 = load i16, i16* %2951, align 2, !tbaa !869
  br label %2826

; <label>:2953:                                   ; preds = %2943
  br label %2955

; <label>:2954:                                   ; preds = %2957
  br label %2955

; <label>:2955:                                   ; preds = %2954, %2953
  %2956 = phi i64 [ %2947, %2953 ], [ %3016, %2954 ]
  switch i2 %2822, label %3230 [
    i2 0, label %3022
    i2 1, label %3050
    i2 -2, label %3083
    i2 -1, label %3213
  ]

; <label>:2957:                                   ; preds = %3019, %2824
  %2958 = phi i16 [ %3021, %3019 ], [ %2755, %2824 ]
  %2959 = phi i64 [ %3017, %3019 ], [ 0, %2824 ]
  %2960 = phi i64 [ %3016, %3019 ], [ 0, %2824 ]
  %2961 = shl i64 %2959, 3
  %2962 = icmp eq i16 %2958, %2739
  %2963 = shl i64 1, %2961
  %2964 = xor i64 %2963, -1
  %2965 = and i64 %2960, %2964
  %2966 = or i64 %2963, %2960
  %2967 = select i1 %2962, i64 %2966, i64 %2965
  %2968 = icmp eq i16 %2958, %2741
  %2969 = or i64 %2961, 1
  %2970 = shl i64 1, %2969
  %2971 = xor i64 %2970, -1
  %2972 = and i64 %2967, %2971
  %2973 = or i64 %2967, %2970
  %2974 = select i1 %2968, i64 %2973, i64 %2972
  %2975 = icmp eq i16 %2958, %2743
  %2976 = or i64 %2961, 2
  %2977 = shl i64 1, %2976
  %2978 = xor i64 %2977, -1
  %2979 = and i64 %2974, %2978
  %2980 = or i64 %2974, %2977
  %2981 = select i1 %2975, i64 %2980, i64 %2979
  %2982 = icmp eq i16 %2958, %2745
  %2983 = or i64 %2961, 3
  %2984 = shl i64 1, %2983
  %2985 = xor i64 %2984, -1
  %2986 = and i64 %2981, %2985
  %2987 = or i64 %2981, %2984
  %2988 = select i1 %2982, i64 %2987, i64 %2986
  %2989 = icmp eq i16 %2958, %2747
  %2990 = or i64 %2961, 4
  %2991 = shl i64 1, %2990
  %2992 = xor i64 %2991, -1
  %2993 = and i64 %2988, %2992
  %2994 = or i64 %2988, %2991
  %2995 = select i1 %2989, i64 %2994, i64 %2993
  %2996 = icmp eq i16 %2958, %2749
  %2997 = or i64 %2961, 5
  %2998 = shl i64 1, %2997
  %2999 = xor i64 %2998, -1
  %3000 = and i64 %2995, %2999
  %3001 = or i64 %2995, %2998
  %3002 = select i1 %2996, i64 %3001, i64 %3000
  %3003 = icmp eq i16 %2958, %2751
  %3004 = or i64 %2961, 6
  %3005 = shl i64 1, %3004
  %3006 = xor i64 %3005, -1
  %3007 = and i64 %3002, %3006
  %3008 = or i64 %3002, %3005
  %3009 = select i1 %3003, i64 %3008, i64 %3007
  %3010 = icmp eq i16 %2958, %2753
  %3011 = or i64 %2961, 7
  %3012 = shl i64 1, %3011
  %3013 = xor i64 %3012, -1
  %3014 = and i64 %3009, %3013
  %3015 = or i64 %3009, %3012
  %3016 = select i1 %3010, i64 %3015, i64 %3014
  %3017 = add nuw nsw i64 %2959, 1
  %3018 = icmp eq i64 %3017, 8
  br i1 %3018, label %2954, label %3019

; <label>:3019:                                   ; preds = %2957
  %3020 = getelementptr inbounds %struct.uint16v8_t, %struct.uint16v8_t* %2730, i64 0, i32 0, i64 %3017
  %3021 = load i16, i16* %3020, align 2, !tbaa !869
  br label %2957

; <label>:3022:                                   ; preds = %2955
  %3023 = icmp eq i64 %2820, 0
  %3024 = icmp eq i64 %2816, 0
  %3025 = or i1 %3023, %3024
  br i1 %3025, label %3233, label %3026

; <label>:3026:                                   ; preds = %3022
  br label %3027

; <label>:3027:                                   ; preds = %3045, %3026
  %3028 = phi i64 [ %3047, %3045 ], [ 0, %3026 ]
  %3029 = phi i16 [ %3048, %3045 ], [ 1, %3026 ]
  %3030 = phi i16 [ %3046, %3045 ], [ 0, %3026 ]
  br label %3033

; <label>:3031:                                   ; preds = %3033
  %3032 = icmp ult i64 %3041, %2816
  br i1 %3032, label %3033, label %3044, !llvm.loop !891

; <label>:3033:                                   ; preds = %3031, %3027
  %3034 = phi i64 [ 0, %3027 ], [ %3041, %3031 ]
  %3035 = shl i64 %3034, 3
  %3036 = add i64 %3035, %3028
  %3037 = and i64 %3036, 63
  %3038 = shl i64 1, %3037
  %3039 = and i64 %3038, %2956
  %3040 = icmp eq i64 %3039, 0
  %3041 = add nuw i64 %3034, 1
  br i1 %3040, label %3031, label %3042

; <label>:3042:                                   ; preds = %3033
  %3043 = or i16 %3030, %3029
  br label %3045

; <label>:3044:                                   ; preds = %3031
  br label %3045

; <label>:3045:                                   ; preds = %3044, %3042
  %3046 = phi i16 [ %3043, %3042 ], [ %3030, %3044 ]
  %3047 = add nuw i64 %3028, 1
  %3048 = shl i16 %3029, 1
  %3049 = icmp eq i64 %3047, %2820
  br i1 %3049, label %3231, label %3027

; <label>:3050:                                   ; preds = %2955
  %3051 = icmp eq i64 %2820, 0
  br i1 %3051, label %3233, label %3052

; <label>:3052:                                   ; preds = %3050
  %3053 = add i64 %2816, -1
  %3054 = icmp eq i64 %3053, 0
  br i1 %3054, label %3233, label %3055

; <label>:3055:                                   ; preds = %3052
  br label %3056

; <label>:3056:                                   ; preds = %3079, %3055
  %3057 = phi i16 [ %3075, %3079 ], [ 0, %3055 ]
  %3058 = phi i16 [ %3081, %3079 ], [ 1, %3055 ]
  %3059 = phi i64 [ %3080, %3079 ], [ 0, %3055 ]
  br label %3060

; <label>:3060:                                   ; preds = %3060, %3056
  %3061 = phi i16 [ %3057, %3056 ], [ %3075, %3060 ]
  %3062 = phi i64 [ 0, %3056 ], [ %3076, %3060 ]
  %3063 = shl i64 %3062, 3
  %3064 = add i64 %3063, %3059
  %3065 = and i64 %3064, 63
  %3066 = shl i64 1, %3065
  %3067 = or i64 %3063, 8
  %3068 = add i64 %3067, %3059
  %3069 = and i64 %3068, 63
  %3070 = shl i64 1, %3069
  %3071 = or i64 %3070, %3066
  %3072 = and i64 %3071, %2956
  %3073 = icmp ne i64 %3072, %3071
  %3074 = select i1 %3073, i16 0, i16 %3058
  %3075 = or i16 %3074, %3061
  %3076 = add i64 %3062, 2
  %3077 = icmp ult i64 %3076, %3053
  %3078 = and i1 %3077, %3073
  br i1 %3078, label %3060, label %3079, !llvm.loop !892

; <label>:3079:                                   ; preds = %3060
  %3080 = add nuw i64 %3059, 1
  %3081 = shl i16 %3058, 1
  %3082 = icmp eq i64 %3080, %2820
  br i1 %3082, label %3232, label %3056

; <label>:3083:                                   ; preds = %2955
  %3084 = icmp ne i64 %2816, 0
  %3085 = icmp ne i64 %2820, 0
  %3086 = and i1 %3085, %3084
  br i1 %3086, label %3087, label %3090

; <label>:3087:                                   ; preds = %3083
  %3088 = and i64 %2956, 1
  %3089 = icmp ne i64 %3088, 0
  br label %3095

; <label>:3090:                                   ; preds = %3083
  br i1 %3084, label %3095, label %3091

; <label>:3091:                                   ; preds = %3090
  %3092 = xor i1 %3085, true
  %3093 = zext i1 %3092 to i16
  %3094 = icmp ugt i64 %2820, 1
  br label %3102

; <label>:3095:                                   ; preds = %3090, %3087
  %3096 = phi i1 [ false, %3090 ], [ %3089, %3087 ]
  %3097 = zext i1 %3096 to i16
  %3098 = icmp ugt i64 %2816, 1
  %3099 = icmp ugt i64 %2820, 1
  %3100 = and i1 %3099, %3098
  br i1 %3100, label %3108, label %3101

; <label>:3101:                                   ; preds = %3095
  br i1 %3098, label %3113, label %3102

; <label>:3102:                                   ; preds = %3101, %3091
  %3103 = phi i16 [ %3093, %3091 ], [ %3097, %3101 ]
  %3104 = phi i1 [ %3094, %3091 ], [ %3099, %3101 ]
  %3105 = select i1 %3104, i16 0, i16 2
  %3106 = or i16 %3105, %3103
  %3107 = icmp ugt i64 %2820, 2
  br label %3119

; <label>:3108:                                   ; preds = %3095
  %3109 = trunc i64 %2956 to i16
  %3110 = lshr i16 %3109, 8
  %3111 = and i16 %3110, 2
  %3112 = or i16 %3097, %3111
  br label %3113

; <label>:3113:                                   ; preds = %3108, %3101
  %3114 = phi i16 [ %3097, %3101 ], [ %3112, %3108 ]
  %3115 = icmp ugt i64 %2816, 2
  %3116 = icmp ugt i64 %2820, 2
  %3117 = and i1 %3116, %3115
  br i1 %3117, label %3125, label %3118

; <label>:3118:                                   ; preds = %3113
  br i1 %3115, label %3130, label %3119

; <label>:3119:                                   ; preds = %3118, %3102
  %3120 = phi i16 [ %3106, %3102 ], [ %3114, %3118 ]
  %3121 = phi i1 [ %3107, %3102 ], [ %3116, %3118 ]
  %3122 = select i1 %3121, i16 0, i16 4
  %3123 = or i16 %3122, %3120
  %3124 = icmp ugt i64 %2820, 3
  br label %3136

; <label>:3125:                                   ; preds = %3113
  %3126 = and i64 %2956, 262144
  %3127 = icmp ne i64 %3126, 0
  %3128 = select i1 %3127, i16 4, i16 0
  %3129 = or i16 %3114, %3128
  br label %3130

; <label>:3130:                                   ; preds = %3125, %3118
  %3131 = phi i16 [ %3114, %3118 ], [ %3129, %3125 ]
  %3132 = icmp ugt i64 %2816, 3
  %3133 = icmp ugt i64 %2820, 3
  %3134 = and i1 %3133, %3132
  br i1 %3134, label %3142, label %3135

; <label>:3135:                                   ; preds = %3130
  br i1 %3132, label %3147, label %3136

; <label>:3136:                                   ; preds = %3135, %3119
  %3137 = phi i16 [ %3123, %3119 ], [ %3131, %3135 ]
  %3138 = phi i1 [ %3124, %3119 ], [ %3133, %3135 ]
  %3139 = select i1 %3138, i16 0, i16 8
  %3140 = or i16 %3139, %3137
  %3141 = icmp ugt i64 %2820, 4
  br label %3153

; <label>:3142:                                   ; preds = %3130
  %3143 = and i64 %2956, 134217728
  %3144 = icmp ne i64 %3143, 0
  %3145 = select i1 %3144, i16 8, i16 0
  %3146 = or i16 %3131, %3145
  br label %3147

; <label>:3147:                                   ; preds = %3142, %3135
  %3148 = phi i16 [ %3131, %3135 ], [ %3146, %3142 ]
  %3149 = icmp ugt i64 %2816, 4
  %3150 = icmp ugt i64 %2820, 4
  %3151 = and i1 %3150, %3149
  br i1 %3151, label %3159, label %3152

; <label>:3152:                                   ; preds = %3147
  br i1 %3149, label %3164, label %3153

; <label>:3153:                                   ; preds = %3152, %3136
  %3154 = phi i16 [ %3140, %3136 ], [ %3148, %3152 ]
  %3155 = phi i1 [ %3141, %3136 ], [ %3150, %3152 ]
  %3156 = select i1 %3155, i16 0, i16 16
  %3157 = or i16 %3156, %3154
  %3158 = icmp ugt i64 %2820, 5
  br label %3170

; <label>:3159:                                   ; preds = %3147
  %3160 = and i64 %2956, 68719476736
  %3161 = icmp ne i64 %3160, 0
  %3162 = select i1 %3161, i16 16, i16 0
  %3163 = or i16 %3148, %3162
  br label %3164

; <label>:3164:                                   ; preds = %3159, %3152
  %3165 = phi i16 [ %3148, %3152 ], [ %3163, %3159 ]
  %3166 = icmp ugt i64 %2816, 5
  %3167 = icmp ugt i64 %2820, 5
  %3168 = and i1 %3167, %3166
  br i1 %3168, label %3176, label %3169

; <label>:3169:                                   ; preds = %3164
  br i1 %3166, label %3181, label %3170

; <label>:3170:                                   ; preds = %3169, %3153
  %3171 = phi i16 [ %3157, %3153 ], [ %3165, %3169 ]
  %3172 = phi i1 [ %3158, %3153 ], [ %3167, %3169 ]
  %3173 = select i1 %3172, i16 0, i16 32
  %3174 = or i16 %3173, %3171
  %3175 = icmp ugt i64 %2820, 6
  br label %3187

; <label>:3176:                                   ; preds = %3164
  %3177 = and i64 %2956, 35184372088832
  %3178 = icmp ne i64 %3177, 0
  %3179 = select i1 %3178, i16 32, i16 0
  %3180 = or i16 %3165, %3179
  br label %3181

; <label>:3181:                                   ; preds = %3176, %3169
  %3182 = phi i16 [ %3165, %3169 ], [ %3180, %3176 ]
  %3183 = icmp ugt i64 %2816, 6
  %3184 = icmp ugt i64 %2820, 6
  %3185 = and i1 %3184, %3183
  br i1 %3185, label %3193, label %3186

; <label>:3186:                                   ; preds = %3181
  br i1 %3183, label %3198, label %3187

; <label>:3187:                                   ; preds = %3186, %3170
  %3188 = phi i16 [ %3174, %3170 ], [ %3182, %3186 ]
  %3189 = phi i1 [ %3175, %3170 ], [ %3184, %3186 ]
  %3190 = select i1 %3189, i16 0, i16 64
  %3191 = or i16 %3190, %3188
  %3192 = icmp ugt i64 %2820, 7
  br label %3204

; <label>:3193:                                   ; preds = %3181
  %3194 = and i64 %2956, 18014398509481984
  %3195 = icmp ne i64 %3194, 0
  %3196 = select i1 %3195, i16 64, i16 0
  %3197 = or i16 %3182, %3196
  br label %3198

; <label>:3198:                                   ; preds = %3193, %3186
  %3199 = phi i16 [ %3182, %3186 ], [ %3197, %3193 ]
  %3200 = icmp ugt i64 %2816, 7
  %3201 = icmp ugt i64 %2820, 7
  %3202 = and i1 %3201, %3200
  br i1 %3202, label %3209, label %3203

; <label>:3203:                                   ; preds = %3198
  br i1 %3200, label %3233, label %3204

; <label>:3204:                                   ; preds = %3203, %3187
  %3205 = phi i16 [ %3191, %3187 ], [ %3199, %3203 ]
  %3206 = phi i1 [ %3192, %3187 ], [ %3201, %3203 ]
  %3207 = select i1 %3206, i16 0, i16 128
  %3208 = or i16 %3207, %3205
  br label %3233

; <label>:3209:                                   ; preds = %3198
  %3210 = icmp slt i64 %2956, 0
  %3211 = select i1 %3210, i16 128, i16 0
  %3212 = or i16 %3199, %3211
  br label %3233

; <label>:3213:                                   ; preds = %2955
  %3214 = icmp ugt i64 %2816, %2820
  br i1 %3214, label %3233, label %3215

; <label>:3215:                                   ; preds = %3213
  %3216 = icmp eq i64 %2816, 0
  br i1 %3216, label %3233, label %3217

; <label>:3217:                                   ; preds = %3215
  br label %3218

; <label>:3218:                                   ; preds = %3217
  br label %3219

; <label>:3219:                                   ; preds = %3218
  %3220 = icmp eq i64 %2820, 0
  br i1 %3220, label %3226, label %3221

; <label>:3221:                                   ; preds = %3219
  %3222 = and i64 %2956, 1
  %3223 = icmp eq i64 %3222, 0
  br i1 %3223, label %3226, label %3224

; <label>:3224:                                   ; preds = %3221
  %3225 = icmp ugt i64 %2816, 1
  br i1 %3225, label %3657, label %3227, !llvm.loop !893

; <label>:3226:                                   ; preds = %3701, %3699, %3694, %3692, %3687, %3685, %3680, %3678, %3673, %3671, %3666, %3664, %3659, %3657, %3221, %3219
  br label %3228

; <label>:3227:                                   ; preds = %3703, %3697, %3690, %3683, %3676, %3669, %3662, %3224
  br label %3228

; <label>:3228:                                   ; preds = %3227, %3226
  %3229 = phi i16 [ 254, %3226 ], [ 255, %3227 ]
  br label %3704

; <label>:3230:                                   ; preds = %2955
  unreachable

; <label>:3231:                                   ; preds = %3045
  br label %3233

; <label>:3232:                                   ; preds = %3079
  br label %3233

; <label>:3233:                                   ; preds = %4010, %3232, %3231, %3215, %3213, %3209, %3204, %3203, %3052, %3050, %3022
  %3234 = phi i64 [ %2816, %3022 ], [ %2816, %3050 ], [ 1, %3052 ], [ %2816, %3203 ], [ %2816, %3209 ], [ %2816, %3204 ], [ %2816, %3213 ], [ 0, %3215 ], [ %2816, %3231 ], [ %2816, %3232 ], [ %2816, %4010 ]
  %3235 = phi i16 [ 0, %3022 ], [ 0, %3050 ], [ 0, %3052 ], [ %3199, %3203 ], [ %3212, %3209 ], [ %3208, %3204 ], [ 0, %3213 ], [ 255, %3215 ], [ %3046, %3231 ], [ %3075, %3232 ], [ %4011, %4010 ]
  %3236 = trunc i8 %2821 to i2
  switch i2 %3236, label %3244 [
    i2 0, label %3245
    i2 1, label %3239
    i2 -2, label %3245
    i2 -1, label %3237
  ]

; <label>:3237:                                   ; preds = %3233
  %3238 = icmp eq i64 %2820, 0
  br i1 %3238, label %3245, label %3241

; <label>:3239:                                   ; preds = %3233
  %3240 = xor i16 %3235, 255
  br label %3245

; <label>:3241:                                   ; preds = %3237
  %3242 = xor i16 %3235, 1
  %3243 = icmp eq i64 %2820, 1
  br i1 %3243, label %3245, label %3263

; <label>:3244:                                   ; preds = %3233
  unreachable

; <label>:3245:                                   ; preds = %3278, %3275, %3272, %3269, %3266, %3263, %3241, %3239, %3237, %3233, %3233
  %3246 = phi i16 [ %3240, %3239 ], [ %3235, %3233 ], [ %3235, %3233 ], [ %3276, %3275 ], [ %3273, %3272 ], [ %3270, %3269 ], [ %3267, %3266 ], [ %3264, %3263 ], [ %3242, %3241 ], [ %3235, %3237 ], [ %3281, %3278 ]
  %3247 = and i8 %12, 64
  %3248 = icmp eq i8 %3247, 0
  %3249 = icmp eq i16 %3246, 0
  br i1 %3248, label %3250, label %3255

; <label>:3250:                                   ; preds = %3245
  br i1 %3249, label %3282, label %3251

; <label>:3251:                                   ; preds = %3250
  %3252 = zext i16 %3246 to i32
  %3253 = tail call i32 @llvm.cttz.i32(i32 %3252, i1 true) #23
  %3254 = zext i32 %3253 to i64
  br label %3282

; <label>:3255:                                   ; preds = %3245
  br i1 %3249, label %3282, label %3256

; <label>:3256:                                   ; preds = %3255
  %3257 = zext i16 %3246 to i32
  %3258 = tail call i32 @llvm.ctlz.i32(i32 %3257, i1 true) #23
  %3259 = add nuw nsw i32 %3258, 65512
  %3260 = and i32 %3259, 65535
  %3261 = zext i32 %3260 to i64
  %3262 = sub nsw i64 7, %3261
  br label %3282

; <label>:3263:                                   ; preds = %3241
  %3264 = xor i16 %3235, 3
  %3265 = icmp ugt i64 %2820, 2
  br i1 %3265, label %3266, label %3245

; <label>:3266:                                   ; preds = %3263
  %3267 = xor i16 %3235, 7
  %3268 = icmp eq i64 %2820, 3
  br i1 %3268, label %3245, label %3269

; <label>:3269:                                   ; preds = %3266
  %3270 = xor i16 %3235, 15
  %3271 = icmp ugt i64 %2820, 4
  br i1 %3271, label %3272, label %3245

; <label>:3272:                                   ; preds = %3269
  %3273 = xor i16 %3235, 31
  %3274 = icmp eq i64 %2820, 5
  br i1 %3274, label %3245, label %3275

; <label>:3275:                                   ; preds = %3272
  %3276 = xor i16 %3235, 63
  %3277 = icmp ugt i64 %2820, 6
  br i1 %3277, label %3278, label %3245

; <label>:3278:                                   ; preds = %3275
  %3279 = icmp ne i64 %2820, 7
  %3280 = select i1 %3279, i16 255, i16 127
  %3281 = xor i16 %3235, %3280
  br label %3245

; <label>:3282:                                   ; preds = %3256, %3255, %3251, %3250
  %3283 = phi i64 [ %3262, %3256 ], [ 8, %3255 ], [ %3254, %3251 ], [ 8, %3250 ]
  %3284 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %3285 = and i64 %3283, 65535
  store i64 %3285, i64* %3284, align 8, !tbaa !870
  %3286 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %3287 = icmp ne i16 %3246, 0
  %3288 = zext i1 %3287 to i8
  store i8 %3288, i8* %3286, align 1, !tbaa !868
  %3289 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %3290 = icmp ult i64 %2820, 8
  %3291 = zext i1 %3290 to i8
  store i8 %3291, i8* %3289, align 1, !tbaa !868
  %3292 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %3293 = icmp ult i64 %3234, 8
  %3294 = zext i1 %3293 to i8
  store i8 %3294, i8* %3292, align 1, !tbaa !868
  %3295 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %3296 = trunc i16 %3246 to i8
  %3297 = and i8 %3296, 1
  store i8 %3297, i8* %3295, align 1, !tbaa !868
  %3298 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %3298, align 1, !tbaa !868
  %3299 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %3299, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %2731) #23
  br label %3301

; <label>:3300:                                   ; preds = %5
  unreachable

; <label>:3301:                                   ; preds = %3282, %2711, %1639, %1068
  ret %struct.Memory* %0

; <label>:3302:                                   ; preds = %1581
  %3303 = icmp ugt i64 %1177, 1
  br i1 %3303, label %3304, label %1583

; <label>:3304:                                   ; preds = %3302
  %3305 = and i64 %1313, 512
  %3306 = icmp eq i64 %3305, 0
  br i1 %3306, label %1583, label %3307

; <label>:3307:                                   ; preds = %3304
  %3308 = icmp ugt i64 %1173, 2
  br i1 %3308, label %3309, label %1584, !llvm.loop !893

; <label>:3309:                                   ; preds = %3307
  %3310 = icmp ugt i64 %1177, 2
  br i1 %3310, label %3311, label %1583

; <label>:3311:                                   ; preds = %3309
  %3312 = and i64 %1313, 262144
  %3313 = icmp eq i64 %3312, 0
  br i1 %3313, label %1583, label %3314

; <label>:3314:                                   ; preds = %3311
  %3315 = icmp ugt i64 %1173, 3
  br i1 %3315, label %3316, label %1584, !llvm.loop !893

; <label>:3316:                                   ; preds = %3314
  %3317 = icmp ugt i64 %1177, 3
  br i1 %3317, label %3318, label %1583

; <label>:3318:                                   ; preds = %3316
  %3319 = and i64 %1313, 134217728
  %3320 = icmp eq i64 %3319, 0
  br i1 %3320, label %1583, label %3321

; <label>:3321:                                   ; preds = %3318
  %3322 = icmp ugt i64 %1173, 4
  br i1 %3322, label %3323, label %1584, !llvm.loop !893

; <label>:3323:                                   ; preds = %3321
  %3324 = icmp ugt i64 %1177, 4
  br i1 %3324, label %3325, label %1583

; <label>:3325:                                   ; preds = %3323
  %3326 = and i64 %1313, 68719476736
  %3327 = icmp eq i64 %3326, 0
  br i1 %3327, label %1583, label %3328

; <label>:3328:                                   ; preds = %3325
  %3329 = icmp ugt i64 %1173, 5
  br i1 %3329, label %3330, label %1584, !llvm.loop !893

; <label>:3330:                                   ; preds = %3328
  %3331 = icmp ugt i64 %1177, 5
  br i1 %3331, label %3332, label %1583

; <label>:3332:                                   ; preds = %3330
  %3333 = and i64 %1313, 35184372088832
  %3334 = icmp eq i64 %3333, 0
  br i1 %3334, label %1583, label %3335

; <label>:3335:                                   ; preds = %3332
  %3336 = icmp ugt i64 %1173, 6
  br i1 %3336, label %3337, label %1584, !llvm.loop !893

; <label>:3337:                                   ; preds = %3335
  %3338 = icmp ugt i64 %1177, 6
  br i1 %3338, label %3339, label %1583

; <label>:3339:                                   ; preds = %3337
  %3340 = and i64 %1313, 18014398509481984
  %3341 = icmp eq i64 %3340, 0
  br i1 %3341, label %1583, label %3342

; <label>:3342:                                   ; preds = %3339
  %3343 = icmp ugt i64 %1173, 7
  br i1 %3343, label %3344, label %1584, !llvm.loop !893

; <label>:3344:                                   ; preds = %3342
  %3345 = icmp ugt i64 %1177, 7
  br i1 %3345, label %3346, label %1583

; <label>:3346:                                   ; preds = %3344
  %3347 = icmp sgt i64 %1313, -1
  br i1 %3347, label %1583, label %3348

; <label>:3348:                                   ; preds = %3346
  br label %1584

; <label>:3349:                                   ; preds = %1585
  %3350 = icmp ugt i64 %1177, 1
  br i1 %3350, label %3351, label %3401

; <label>:3351:                                   ; preds = %3349
  %3352 = and i64 %1313, 2
  %3353 = icmp eq i64 %3352, 0
  br i1 %3353, label %3401, label %3354

; <label>:3354:                                   ; preds = %3351
  %3355 = icmp ugt i64 %1173, 1
  br i1 %3355, label %3356, label %3400, !llvm.loop !893

; <label>:3356:                                   ; preds = %3354
  %3357 = icmp ugt i64 %1177, 2
  br i1 %3357, label %3358, label %3401

; <label>:3358:                                   ; preds = %3356
  %3359 = and i64 %1313, 1024
  %3360 = icmp eq i64 %3359, 0
  br i1 %3360, label %3401, label %3361

; <label>:3361:                                   ; preds = %3358
  %3362 = icmp ugt i64 %1173, 2
  br i1 %3362, label %3363, label %3400, !llvm.loop !893

; <label>:3363:                                   ; preds = %3361
  %3364 = icmp ugt i64 %1177, 3
  br i1 %3364, label %3365, label %3401

; <label>:3365:                                   ; preds = %3363
  %3366 = and i64 %1313, 524288
  %3367 = icmp eq i64 %3366, 0
  br i1 %3367, label %3401, label %3368

; <label>:3368:                                   ; preds = %3365
  %3369 = icmp ugt i64 %1173, 3
  br i1 %3369, label %3370, label %3400, !llvm.loop !893

; <label>:3370:                                   ; preds = %3368
  %3371 = icmp ugt i64 %1177, 4
  br i1 %3371, label %3372, label %3401

; <label>:3372:                                   ; preds = %3370
  %3373 = and i64 %1313, 268435456
  %3374 = icmp eq i64 %3373, 0
  br i1 %3374, label %3401, label %3375

; <label>:3375:                                   ; preds = %3372
  %3376 = icmp ugt i64 %1173, 4
  br i1 %3376, label %3377, label %3400, !llvm.loop !893

; <label>:3377:                                   ; preds = %3375
  %3378 = icmp ugt i64 %1177, 5
  br i1 %3378, label %3379, label %3401

; <label>:3379:                                   ; preds = %3377
  %3380 = and i64 %1313, 137438953472
  %3381 = icmp eq i64 %3380, 0
  br i1 %3381, label %3401, label %3382

; <label>:3382:                                   ; preds = %3379
  %3383 = icmp ugt i64 %1173, 5
  br i1 %3383, label %3384, label %3400, !llvm.loop !893

; <label>:3384:                                   ; preds = %3382
  %3385 = icmp ugt i64 %1177, 6
  br i1 %3385, label %3386, label %3401

; <label>:3386:                                   ; preds = %3384
  %3387 = and i64 %1313, 70368744177664
  %3388 = icmp eq i64 %3387, 0
  br i1 %3388, label %3401, label %3389

; <label>:3389:                                   ; preds = %3386
  %3390 = icmp ugt i64 %1173, 6
  br i1 %3390, label %3391, label %3400, !llvm.loop !893

; <label>:3391:                                   ; preds = %3389
  %3392 = icmp ugt i64 %1177, 7
  br i1 %3392, label %3393, label %3401

; <label>:3393:                                   ; preds = %3391
  %3394 = and i64 %1313, 36028797018963968
  %3395 = icmp eq i64 %3394, 0
  br i1 %3395, label %3401, label %3396

; <label>:3396:                                   ; preds = %3393
  br i1 false, label %3397, label %3400, !llvm.loop !893

; <label>:3397:                                   ; preds = %3396
  br i1 undef, label %3398, label %3401

; <label>:3398:                                   ; preds = %3397
  br i1 undef, label %3401, label %3399

; <label>:3399:                                   ; preds = %3398
  br label %3400

; <label>:3400:                                   ; preds = %3399, %3396, %3389, %3382, %3375, %3368, %3361, %3354
  br label %3403

; <label>:3401:                                   ; preds = %3398, %3397, %3393, %3391, %3386, %3384, %3379, %3377, %3372, %3370, %3365, %3363, %3358, %3356, %3351, %3349
  %3402 = and i16 %1586, 253
  br label %3403

; <label>:3403:                                   ; preds = %3401, %3400
  %3404 = phi i16 [ %3402, %3401 ], [ %1586, %3400 ]
  br label %3405

; <label>:3405:                                   ; preds = %3403
  %3406 = icmp ugt i64 %1177, 2
  br i1 %3406, label %3407, label %3453

; <label>:3407:                                   ; preds = %3405
  %3408 = and i64 %1313, 4
  %3409 = icmp eq i64 %3408, 0
  br i1 %3409, label %3453, label %3410

; <label>:3410:                                   ; preds = %3407
  %3411 = icmp ugt i64 %1173, 1
  br i1 %3411, label %3412, label %3452, !llvm.loop !893

; <label>:3412:                                   ; preds = %3410
  %3413 = icmp ugt i64 %1177, 3
  br i1 %3413, label %3414, label %3453

; <label>:3414:                                   ; preds = %3412
  %3415 = and i64 %1313, 2048
  %3416 = icmp eq i64 %3415, 0
  br i1 %3416, label %3453, label %3417

; <label>:3417:                                   ; preds = %3414
  %3418 = icmp ugt i64 %1173, 2
  br i1 %3418, label %3419, label %3452, !llvm.loop !893

; <label>:3419:                                   ; preds = %3417
  %3420 = icmp ugt i64 %1177, 4
  br i1 %3420, label %3421, label %3453

; <label>:3421:                                   ; preds = %3419
  %3422 = and i64 %1313, 1048576
  %3423 = icmp eq i64 %3422, 0
  br i1 %3423, label %3453, label %3424

; <label>:3424:                                   ; preds = %3421
  %3425 = icmp ugt i64 %1173, 3
  br i1 %3425, label %3426, label %3452, !llvm.loop !893

; <label>:3426:                                   ; preds = %3424
  %3427 = icmp ugt i64 %1177, 5
  br i1 %3427, label %3428, label %3453

; <label>:3428:                                   ; preds = %3426
  %3429 = and i64 %1313, 536870912
  %3430 = icmp eq i64 %3429, 0
  br i1 %3430, label %3453, label %3431

; <label>:3431:                                   ; preds = %3428
  %3432 = icmp ugt i64 %1173, 4
  br i1 %3432, label %3433, label %3452, !llvm.loop !893

; <label>:3433:                                   ; preds = %3431
  %3434 = icmp ugt i64 %1177, 6
  br i1 %3434, label %3435, label %3453

; <label>:3435:                                   ; preds = %3433
  %3436 = and i64 %1313, 274877906944
  %3437 = icmp eq i64 %3436, 0
  br i1 %3437, label %3453, label %3438

; <label>:3438:                                   ; preds = %3435
  %3439 = icmp ugt i64 %1173, 5
  br i1 %3439, label %3440, label %3452, !llvm.loop !893

; <label>:3440:                                   ; preds = %3438
  %3441 = icmp ugt i64 %1177, 7
  br i1 %3441, label %3442, label %3453

; <label>:3442:                                   ; preds = %3440
  %3443 = and i64 %1313, 140737488355328
  %3444 = icmp eq i64 %3443, 0
  br i1 %3444, label %3453, label %3445

; <label>:3445:                                   ; preds = %3442
  br i1 false, label %3446, label %3452, !llvm.loop !893

; <label>:3446:                                   ; preds = %3445
  br i1 undef, label %3447, label %3453

; <label>:3447:                                   ; preds = %3446
  br i1 undef, label %3453, label %3448

; <label>:3448:                                   ; preds = %3447
  br i1 false, label %3449, label %3452, !llvm.loop !893

; <label>:3449:                                   ; preds = %3448
  br i1 undef, label %3450, label %3453

; <label>:3450:                                   ; preds = %3449
  br i1 undef, label %3453, label %3451

; <label>:3451:                                   ; preds = %3450
  br label %3452

; <label>:3452:                                   ; preds = %3451, %3448, %3445, %3438, %3431, %3424, %3417, %3410
  br label %3455

; <label>:3453:                                   ; preds = %3450, %3449, %3447, %3446, %3442, %3440, %3435, %3433, %3428, %3426, %3421, %3419, %3414, %3412, %3407, %3405
  %3454 = xor i16 %3404, 4
  br label %3455

; <label>:3455:                                   ; preds = %3453, %3452
  %3456 = phi i16 [ %3454, %3453 ], [ %3404, %3452 ]
  br label %3457

; <label>:3457:                                   ; preds = %3455
  %3458 = icmp ugt i64 %1177, 3
  br i1 %3458, label %3459, label %3501

; <label>:3459:                                   ; preds = %3457
  %3460 = and i64 %1313, 8
  %3461 = icmp eq i64 %3460, 0
  br i1 %3461, label %3501, label %3462

; <label>:3462:                                   ; preds = %3459
  %3463 = icmp ugt i64 %1173, 1
  br i1 %3463, label %3464, label %3500, !llvm.loop !893

; <label>:3464:                                   ; preds = %3462
  %3465 = icmp ugt i64 %1177, 4
  br i1 %3465, label %3466, label %3501

; <label>:3466:                                   ; preds = %3464
  %3467 = and i64 %1313, 4096
  %3468 = icmp eq i64 %3467, 0
  br i1 %3468, label %3501, label %3469

; <label>:3469:                                   ; preds = %3466
  %3470 = icmp ugt i64 %1173, 2
  br i1 %3470, label %3471, label %3500, !llvm.loop !893

; <label>:3471:                                   ; preds = %3469
  %3472 = icmp ugt i64 %1177, 5
  br i1 %3472, label %3473, label %3501

; <label>:3473:                                   ; preds = %3471
  %3474 = and i64 %1313, 2097152
  %3475 = icmp eq i64 %3474, 0
  br i1 %3475, label %3501, label %3476

; <label>:3476:                                   ; preds = %3473
  %3477 = icmp ugt i64 %1173, 3
  br i1 %3477, label %3478, label %3500, !llvm.loop !893

; <label>:3478:                                   ; preds = %3476
  %3479 = icmp ugt i64 %1177, 6
  br i1 %3479, label %3480, label %3501

; <label>:3480:                                   ; preds = %3478
  %3481 = and i64 %1313, 1073741824
  %3482 = icmp eq i64 %3481, 0
  br i1 %3482, label %3501, label %3483

; <label>:3483:                                   ; preds = %3480
  %3484 = icmp ugt i64 %1173, 4
  br i1 %3484, label %3485, label %3500, !llvm.loop !893

; <label>:3485:                                   ; preds = %3483
  %3486 = icmp ugt i64 %1177, 7
  br i1 %3486, label %3487, label %3501

; <label>:3487:                                   ; preds = %3485
  %3488 = and i64 %1313, 549755813888
  %3489 = icmp eq i64 %3488, 0
  br i1 %3489, label %3501, label %3490

; <label>:3490:                                   ; preds = %3487
  br i1 false, label %3491, label %3500, !llvm.loop !893

; <label>:3491:                                   ; preds = %3490
  br i1 undef, label %3492, label %3501

; <label>:3492:                                   ; preds = %3491
  br i1 undef, label %3501, label %3493

; <label>:3493:                                   ; preds = %3492
  br i1 false, label %3494, label %3500, !llvm.loop !893

; <label>:3494:                                   ; preds = %3493
  br i1 undef, label %3495, label %3501

; <label>:3495:                                   ; preds = %3494
  br i1 undef, label %3501, label %3496

; <label>:3496:                                   ; preds = %3495
  br i1 false, label %3497, label %3500, !llvm.loop !893

; <label>:3497:                                   ; preds = %3496
  br i1 undef, label %3498, label %3501

; <label>:3498:                                   ; preds = %3497
  br i1 undef, label %3501, label %3499

; <label>:3499:                                   ; preds = %3498
  br label %3500

; <label>:3500:                                   ; preds = %3499, %3496, %3493, %3490, %3483, %3476, %3469, %3462
  br label %3503

; <label>:3501:                                   ; preds = %3498, %3497, %3495, %3494, %3492, %3491, %3487, %3485, %3480, %3478, %3473, %3471, %3466, %3464, %3459, %3457
  %3502 = xor i16 %3456, 8
  br label %3503

; <label>:3503:                                   ; preds = %3501, %3500
  %3504 = phi i16 [ %3502, %3501 ], [ %3456, %3500 ]
  br label %3505

; <label>:3505:                                   ; preds = %3503
  %3506 = icmp ugt i64 %1177, 4
  br i1 %3506, label %3507, label %3545

; <label>:3507:                                   ; preds = %3505
  %3508 = and i64 %1313, 16
  %3509 = icmp eq i64 %3508, 0
  br i1 %3509, label %3545, label %3510

; <label>:3510:                                   ; preds = %3507
  %3511 = icmp ugt i64 %1173, 1
  br i1 %3511, label %3512, label %3544, !llvm.loop !893

; <label>:3512:                                   ; preds = %3510
  %3513 = icmp ugt i64 %1177, 5
  br i1 %3513, label %3514, label %3545

; <label>:3514:                                   ; preds = %3512
  %3515 = and i64 %1313, 8192
  %3516 = icmp eq i64 %3515, 0
  br i1 %3516, label %3545, label %3517

; <label>:3517:                                   ; preds = %3514
  %3518 = icmp ugt i64 %1173, 2
  br i1 %3518, label %3519, label %3544, !llvm.loop !893

; <label>:3519:                                   ; preds = %3517
  %3520 = icmp ugt i64 %1177, 6
  br i1 %3520, label %3521, label %3545

; <label>:3521:                                   ; preds = %3519
  %3522 = and i64 %1313, 4194304
  %3523 = icmp eq i64 %3522, 0
  br i1 %3523, label %3545, label %3524

; <label>:3524:                                   ; preds = %3521
  %3525 = icmp ugt i64 %1173, 3
  br i1 %3525, label %3526, label %3544, !llvm.loop !893

; <label>:3526:                                   ; preds = %3524
  %3527 = icmp ugt i64 %1177, 7
  br i1 %3527, label %3528, label %3545

; <label>:3528:                                   ; preds = %3526
  %3529 = trunc i64 %1313 to i32
  %3530 = icmp sgt i32 %3529, -1
  br i1 %3530, label %3545, label %3531

; <label>:3531:                                   ; preds = %3528
  br i1 false, label %3532, label %3544, !llvm.loop !893

; <label>:3532:                                   ; preds = %3531
  br i1 undef, label %3533, label %3545

; <label>:3533:                                   ; preds = %3532
  br i1 undef, label %3545, label %3534

; <label>:3534:                                   ; preds = %3533
  br i1 false, label %3535, label %3544, !llvm.loop !893

; <label>:3535:                                   ; preds = %3534
  br i1 undef, label %3536, label %3545

; <label>:3536:                                   ; preds = %3535
  br i1 undef, label %3545, label %3537

; <label>:3537:                                   ; preds = %3536
  br i1 false, label %3538, label %3544, !llvm.loop !893

; <label>:3538:                                   ; preds = %3537
  br i1 undef, label %3539, label %3545

; <label>:3539:                                   ; preds = %3538
  br i1 undef, label %3545, label %3540

; <label>:3540:                                   ; preds = %3539
  br i1 false, label %3541, label %3544, !llvm.loop !893

; <label>:3541:                                   ; preds = %3540
  br i1 undef, label %3542, label %3545

; <label>:3542:                                   ; preds = %3541
  br i1 undef, label %3545, label %3543

; <label>:3543:                                   ; preds = %3542
  br label %3544

; <label>:3544:                                   ; preds = %3543, %3540, %3537, %3534, %3531, %3524, %3517, %3510
  br label %3547

; <label>:3545:                                   ; preds = %3542, %3541, %3539, %3538, %3536, %3535, %3533, %3532, %3528, %3526, %3521, %3519, %3514, %3512, %3507, %3505
  %3546 = xor i16 %3504, 16
  br label %3547

; <label>:3547:                                   ; preds = %3545, %3544
  %3548 = phi i16 [ %3546, %3545 ], [ %3504, %3544 ]
  br label %3549

; <label>:3549:                                   ; preds = %3547
  %3550 = icmp ugt i64 %1177, 5
  br i1 %3550, label %3551, label %3585

; <label>:3551:                                   ; preds = %3549
  %3552 = and i64 %1313, 32
  %3553 = icmp eq i64 %3552, 0
  br i1 %3553, label %3585, label %3554

; <label>:3554:                                   ; preds = %3551
  %3555 = icmp ugt i64 %1173, 1
  br i1 %3555, label %3556, label %3584, !llvm.loop !893

; <label>:3556:                                   ; preds = %3554
  %3557 = icmp ugt i64 %1177, 6
  br i1 %3557, label %3558, label %3585

; <label>:3558:                                   ; preds = %3556
  %3559 = and i64 %1313, 16384
  %3560 = icmp eq i64 %3559, 0
  br i1 %3560, label %3585, label %3561

; <label>:3561:                                   ; preds = %3558
  %3562 = icmp ugt i64 %1173, 2
  br i1 %3562, label %3563, label %3584, !llvm.loop !893

; <label>:3563:                                   ; preds = %3561
  %3564 = icmp ugt i64 %1177, 7
  br i1 %3564, label %3565, label %3585

; <label>:3565:                                   ; preds = %3563
  %3566 = and i64 %1313, 8388608
  %3567 = icmp eq i64 %3566, 0
  br i1 %3567, label %3585, label %3568

; <label>:3568:                                   ; preds = %3565
  br i1 false, label %3569, label %3584, !llvm.loop !893

; <label>:3569:                                   ; preds = %3568
  br i1 undef, label %3570, label %3585

; <label>:3570:                                   ; preds = %3569
  br i1 undef, label %3585, label %3571

; <label>:3571:                                   ; preds = %3570
  br i1 false, label %3572, label %3584, !llvm.loop !893

; <label>:3572:                                   ; preds = %3571
  br i1 undef, label %3573, label %3585

; <label>:3573:                                   ; preds = %3572
  br i1 undef, label %3585, label %3574

; <label>:3574:                                   ; preds = %3573
  br i1 false, label %3575, label %3584, !llvm.loop !893

; <label>:3575:                                   ; preds = %3574
  br i1 undef, label %3576, label %3585

; <label>:3576:                                   ; preds = %3575
  br i1 undef, label %3585, label %3577

; <label>:3577:                                   ; preds = %3576
  br i1 false, label %3578, label %3584, !llvm.loop !893

; <label>:3578:                                   ; preds = %3577
  br i1 undef, label %3579, label %3585

; <label>:3579:                                   ; preds = %3578
  br i1 undef, label %3585, label %3580

; <label>:3580:                                   ; preds = %3579
  br i1 false, label %3581, label %3584, !llvm.loop !893

; <label>:3581:                                   ; preds = %3580
  br i1 undef, label %3582, label %3585

; <label>:3582:                                   ; preds = %3581
  br i1 undef, label %3585, label %3583

; <label>:3583:                                   ; preds = %3582
  br label %3584

; <label>:3584:                                   ; preds = %3583, %3580, %3577, %3574, %3571, %3568, %3561, %3554
  br label %3587

; <label>:3585:                                   ; preds = %3582, %3581, %3579, %3578, %3576, %3575, %3573, %3572, %3570, %3569, %3565, %3563, %3558, %3556, %3551, %3549
  %3586 = xor i16 %3548, 32
  br label %3587

; <label>:3587:                                   ; preds = %3585, %3584
  %3588 = phi i16 [ %3586, %3585 ], [ %3548, %3584 ]
  br label %3589

; <label>:3589:                                   ; preds = %3587
  %3590 = icmp ugt i64 %1177, 6
  br i1 %3590, label %3591, label %3621

; <label>:3591:                                   ; preds = %3589
  %3592 = and i64 %1313, 64
  %3593 = icmp eq i64 %3592, 0
  br i1 %3593, label %3621, label %3594

; <label>:3594:                                   ; preds = %3591
  %3595 = icmp ugt i64 %1173, 1
  br i1 %3595, label %3596, label %3620, !llvm.loop !893

; <label>:3596:                                   ; preds = %3594
  %3597 = icmp ugt i64 %1177, 7
  br i1 %3597, label %3598, label %3621

; <label>:3598:                                   ; preds = %3596
  %3599 = trunc i64 %1313 to i16
  %3600 = icmp sgt i16 %3599, -1
  br i1 %3600, label %3621, label %3601

; <label>:3601:                                   ; preds = %3598
  br i1 false, label %3602, label %3620, !llvm.loop !893

; <label>:3602:                                   ; preds = %3601
  br i1 undef, label %3603, label %3621

; <label>:3603:                                   ; preds = %3602
  br i1 undef, label %3621, label %3604

; <label>:3604:                                   ; preds = %3603
  br i1 false, label %3605, label %3620, !llvm.loop !893

; <label>:3605:                                   ; preds = %3604
  br i1 undef, label %3606, label %3621

; <label>:3606:                                   ; preds = %3605
  br i1 undef, label %3621, label %3607

; <label>:3607:                                   ; preds = %3606
  br i1 false, label %3608, label %3620, !llvm.loop !893

; <label>:3608:                                   ; preds = %3607
  br i1 undef, label %3609, label %3621

; <label>:3609:                                   ; preds = %3608
  br i1 undef, label %3621, label %3610

; <label>:3610:                                   ; preds = %3609
  br i1 false, label %3611, label %3620, !llvm.loop !893

; <label>:3611:                                   ; preds = %3610
  br i1 undef, label %3612, label %3621

; <label>:3612:                                   ; preds = %3611
  br i1 undef, label %3621, label %3613

; <label>:3613:                                   ; preds = %3612
  br i1 false, label %3614, label %3620, !llvm.loop !893

; <label>:3614:                                   ; preds = %3613
  br i1 undef, label %3615, label %3621

; <label>:3615:                                   ; preds = %3614
  br i1 undef, label %3621, label %3616

; <label>:3616:                                   ; preds = %3615
  br i1 false, label %3617, label %3620, !llvm.loop !893

; <label>:3617:                                   ; preds = %3616
  br i1 undef, label %3618, label %3621

; <label>:3618:                                   ; preds = %3617
  br i1 undef, label %3621, label %3619

; <label>:3619:                                   ; preds = %3618
  br label %3620

; <label>:3620:                                   ; preds = %3619, %3616, %3613, %3610, %3607, %3604, %3601, %3594
  br label %3623

; <label>:3621:                                   ; preds = %3618, %3617, %3615, %3614, %3612, %3611, %3609, %3608, %3606, %3605, %3603, %3602, %3598, %3596, %3591, %3589
  %3622 = xor i16 %3588, 64
  br label %3623

; <label>:3623:                                   ; preds = %3621, %3620
  %3624 = phi i16 [ %3622, %3621 ], [ %3588, %3620 ]
  br label %3625

; <label>:3625:                                   ; preds = %3623
  %3626 = icmp ugt i64 %1177, 7
  br i1 %3626, label %3627, label %3653

; <label>:3627:                                   ; preds = %3625
  %3628 = trunc i64 %1313 to i8
  %3629 = icmp sgt i8 %3628, -1
  br i1 %3629, label %3653, label %3630

; <label>:3630:                                   ; preds = %3627
  br i1 false, label %3631, label %3652, !llvm.loop !893

; <label>:3631:                                   ; preds = %3630
  br i1 undef, label %3632, label %3653

; <label>:3632:                                   ; preds = %3631
  br i1 undef, label %3653, label %3633

; <label>:3633:                                   ; preds = %3632
  br i1 false, label %3634, label %3652, !llvm.loop !893

; <label>:3634:                                   ; preds = %3633
  br i1 undef, label %3635, label %3653

; <label>:3635:                                   ; preds = %3634
  br i1 undef, label %3653, label %3636

; <label>:3636:                                   ; preds = %3635
  br i1 false, label %3637, label %3652, !llvm.loop !893

; <label>:3637:                                   ; preds = %3636
  br i1 undef, label %3638, label %3653

; <label>:3638:                                   ; preds = %3637
  br i1 undef, label %3653, label %3639

; <label>:3639:                                   ; preds = %3638
  br i1 false, label %3640, label %3652, !llvm.loop !893

; <label>:3640:                                   ; preds = %3639
  br i1 undef, label %3641, label %3653

; <label>:3641:                                   ; preds = %3640
  br i1 undef, label %3653, label %3642

; <label>:3642:                                   ; preds = %3641
  br i1 false, label %3643, label %3652, !llvm.loop !893

; <label>:3643:                                   ; preds = %3642
  br i1 undef, label %3644, label %3653

; <label>:3644:                                   ; preds = %3643
  br i1 undef, label %3653, label %3645

; <label>:3645:                                   ; preds = %3644
  br i1 false, label %3646, label %3652, !llvm.loop !893

; <label>:3646:                                   ; preds = %3645
  br i1 undef, label %3647, label %3653

; <label>:3647:                                   ; preds = %3646
  br i1 undef, label %3653, label %3648

; <label>:3648:                                   ; preds = %3647
  br i1 false, label %3649, label %3652, !llvm.loop !893

; <label>:3649:                                   ; preds = %3648
  br i1 undef, label %3650, label %3653

; <label>:3650:                                   ; preds = %3649
  br i1 undef, label %3653, label %3651

; <label>:3651:                                   ; preds = %3650
  br label %3652

; <label>:3652:                                   ; preds = %3651, %3648, %3645, %3642, %3639, %3636, %3633, %3630
  br label %3655

; <label>:3653:                                   ; preds = %3650, %3649, %3647, %3646, %3644, %3643, %3641, %3640, %3638, %3637, %3635, %3634, %3632, %3631, %3627, %3625
  %3654 = xor i16 %3624, 128
  br label %3655

; <label>:3655:                                   ; preds = %3653, %3652
  %3656 = phi i16 [ %3654, %3653 ], [ %3624, %3652 ]
  br label %1590

; <label>:3657:                                   ; preds = %3224
  %3658 = icmp ugt i64 %2820, 1
  br i1 %3658, label %3659, label %3226

; <label>:3659:                                   ; preds = %3657
  %3660 = and i64 %2956, 512
  %3661 = icmp eq i64 %3660, 0
  br i1 %3661, label %3226, label %3662

; <label>:3662:                                   ; preds = %3659
  %3663 = icmp ugt i64 %2816, 2
  br i1 %3663, label %3664, label %3227, !llvm.loop !893

; <label>:3664:                                   ; preds = %3662
  %3665 = icmp ugt i64 %2820, 2
  br i1 %3665, label %3666, label %3226

; <label>:3666:                                   ; preds = %3664
  %3667 = and i64 %2956, 262144
  %3668 = icmp eq i64 %3667, 0
  br i1 %3668, label %3226, label %3669

; <label>:3669:                                   ; preds = %3666
  %3670 = icmp ugt i64 %2816, 3
  br i1 %3670, label %3671, label %3227, !llvm.loop !893

; <label>:3671:                                   ; preds = %3669
  %3672 = icmp ugt i64 %2820, 3
  br i1 %3672, label %3673, label %3226

; <label>:3673:                                   ; preds = %3671
  %3674 = and i64 %2956, 134217728
  %3675 = icmp eq i64 %3674, 0
  br i1 %3675, label %3226, label %3676

; <label>:3676:                                   ; preds = %3673
  %3677 = icmp ugt i64 %2816, 4
  br i1 %3677, label %3678, label %3227, !llvm.loop !893

; <label>:3678:                                   ; preds = %3676
  %3679 = icmp ugt i64 %2820, 4
  br i1 %3679, label %3680, label %3226

; <label>:3680:                                   ; preds = %3678
  %3681 = and i64 %2956, 68719476736
  %3682 = icmp eq i64 %3681, 0
  br i1 %3682, label %3226, label %3683

; <label>:3683:                                   ; preds = %3680
  %3684 = icmp ugt i64 %2816, 5
  br i1 %3684, label %3685, label %3227, !llvm.loop !893

; <label>:3685:                                   ; preds = %3683
  %3686 = icmp ugt i64 %2820, 5
  br i1 %3686, label %3687, label %3226

; <label>:3687:                                   ; preds = %3685
  %3688 = and i64 %2956, 35184372088832
  %3689 = icmp eq i64 %3688, 0
  br i1 %3689, label %3226, label %3690

; <label>:3690:                                   ; preds = %3687
  %3691 = icmp ugt i64 %2816, 6
  br i1 %3691, label %3692, label %3227, !llvm.loop !893

; <label>:3692:                                   ; preds = %3690
  %3693 = icmp ugt i64 %2820, 6
  br i1 %3693, label %3694, label %3226

; <label>:3694:                                   ; preds = %3692
  %3695 = and i64 %2956, 18014398509481984
  %3696 = icmp eq i64 %3695, 0
  br i1 %3696, label %3226, label %3697

; <label>:3697:                                   ; preds = %3694
  %3698 = icmp ugt i64 %2816, 7
  br i1 %3698, label %3699, label %3227, !llvm.loop !893

; <label>:3699:                                   ; preds = %3697
  %3700 = icmp ugt i64 %2820, 7
  br i1 %3700, label %3701, label %3226

; <label>:3701:                                   ; preds = %3699
  %3702 = icmp sgt i64 %2956, -1
  br i1 %3702, label %3226, label %3703

; <label>:3703:                                   ; preds = %3701
  br label %3227

; <label>:3704:                                   ; preds = %3228
  %3705 = icmp ugt i64 %2820, 1
  br i1 %3705, label %3706, label %3756

; <label>:3706:                                   ; preds = %3704
  %3707 = and i64 %2956, 2
  %3708 = icmp eq i64 %3707, 0
  br i1 %3708, label %3756, label %3709

; <label>:3709:                                   ; preds = %3706
  %3710 = icmp ugt i64 %2816, 1
  br i1 %3710, label %3711, label %3755, !llvm.loop !893

; <label>:3711:                                   ; preds = %3709
  %3712 = icmp ugt i64 %2820, 2
  br i1 %3712, label %3713, label %3756

; <label>:3713:                                   ; preds = %3711
  %3714 = and i64 %2956, 1024
  %3715 = icmp eq i64 %3714, 0
  br i1 %3715, label %3756, label %3716

; <label>:3716:                                   ; preds = %3713
  %3717 = icmp ugt i64 %2816, 2
  br i1 %3717, label %3718, label %3755, !llvm.loop !893

; <label>:3718:                                   ; preds = %3716
  %3719 = icmp ugt i64 %2820, 3
  br i1 %3719, label %3720, label %3756

; <label>:3720:                                   ; preds = %3718
  %3721 = and i64 %2956, 524288
  %3722 = icmp eq i64 %3721, 0
  br i1 %3722, label %3756, label %3723

; <label>:3723:                                   ; preds = %3720
  %3724 = icmp ugt i64 %2816, 3
  br i1 %3724, label %3725, label %3755, !llvm.loop !893

; <label>:3725:                                   ; preds = %3723
  %3726 = icmp ugt i64 %2820, 4
  br i1 %3726, label %3727, label %3756

; <label>:3727:                                   ; preds = %3725
  %3728 = and i64 %2956, 268435456
  %3729 = icmp eq i64 %3728, 0
  br i1 %3729, label %3756, label %3730

; <label>:3730:                                   ; preds = %3727
  %3731 = icmp ugt i64 %2816, 4
  br i1 %3731, label %3732, label %3755, !llvm.loop !893

; <label>:3732:                                   ; preds = %3730
  %3733 = icmp ugt i64 %2820, 5
  br i1 %3733, label %3734, label %3756

; <label>:3734:                                   ; preds = %3732
  %3735 = and i64 %2956, 137438953472
  %3736 = icmp eq i64 %3735, 0
  br i1 %3736, label %3756, label %3737

; <label>:3737:                                   ; preds = %3734
  %3738 = icmp ugt i64 %2816, 5
  br i1 %3738, label %3739, label %3755, !llvm.loop !893

; <label>:3739:                                   ; preds = %3737
  %3740 = icmp ugt i64 %2820, 6
  br i1 %3740, label %3741, label %3756

; <label>:3741:                                   ; preds = %3739
  %3742 = and i64 %2956, 70368744177664
  %3743 = icmp eq i64 %3742, 0
  br i1 %3743, label %3756, label %3744

; <label>:3744:                                   ; preds = %3741
  %3745 = icmp ugt i64 %2816, 6
  br i1 %3745, label %3746, label %3755, !llvm.loop !893

; <label>:3746:                                   ; preds = %3744
  %3747 = icmp ugt i64 %2820, 7
  br i1 %3747, label %3748, label %3756

; <label>:3748:                                   ; preds = %3746
  %3749 = and i64 %2956, 36028797018963968
  %3750 = icmp eq i64 %3749, 0
  br i1 %3750, label %3756, label %3751

; <label>:3751:                                   ; preds = %3748
  br i1 false, label %3752, label %3755, !llvm.loop !893

; <label>:3752:                                   ; preds = %3751
  br i1 undef, label %3753, label %3756

; <label>:3753:                                   ; preds = %3752
  br i1 undef, label %3756, label %3754

; <label>:3754:                                   ; preds = %3753
  br label %3755

; <label>:3755:                                   ; preds = %3754, %3751, %3744, %3737, %3730, %3723, %3716, %3709
  br label %3758

; <label>:3756:                                   ; preds = %3753, %3752, %3748, %3746, %3741, %3739, %3734, %3732, %3727, %3725, %3720, %3718, %3713, %3711, %3706, %3704
  %3757 = and i16 %3229, 253
  br label %3758

; <label>:3758:                                   ; preds = %3756, %3755
  %3759 = phi i16 [ %3757, %3756 ], [ %3229, %3755 ]
  br label %3760

; <label>:3760:                                   ; preds = %3758
  %3761 = icmp ugt i64 %2820, 2
  br i1 %3761, label %3762, label %3808

; <label>:3762:                                   ; preds = %3760
  %3763 = and i64 %2956, 4
  %3764 = icmp eq i64 %3763, 0
  br i1 %3764, label %3808, label %3765

; <label>:3765:                                   ; preds = %3762
  %3766 = icmp ugt i64 %2816, 1
  br i1 %3766, label %3767, label %3807, !llvm.loop !893

; <label>:3767:                                   ; preds = %3765
  %3768 = icmp ugt i64 %2820, 3
  br i1 %3768, label %3769, label %3808

; <label>:3769:                                   ; preds = %3767
  %3770 = and i64 %2956, 2048
  %3771 = icmp eq i64 %3770, 0
  br i1 %3771, label %3808, label %3772

; <label>:3772:                                   ; preds = %3769
  %3773 = icmp ugt i64 %2816, 2
  br i1 %3773, label %3774, label %3807, !llvm.loop !893

; <label>:3774:                                   ; preds = %3772
  %3775 = icmp ugt i64 %2820, 4
  br i1 %3775, label %3776, label %3808

; <label>:3776:                                   ; preds = %3774
  %3777 = and i64 %2956, 1048576
  %3778 = icmp eq i64 %3777, 0
  br i1 %3778, label %3808, label %3779

; <label>:3779:                                   ; preds = %3776
  %3780 = icmp ugt i64 %2816, 3
  br i1 %3780, label %3781, label %3807, !llvm.loop !893

; <label>:3781:                                   ; preds = %3779
  %3782 = icmp ugt i64 %2820, 5
  br i1 %3782, label %3783, label %3808

; <label>:3783:                                   ; preds = %3781
  %3784 = and i64 %2956, 536870912
  %3785 = icmp eq i64 %3784, 0
  br i1 %3785, label %3808, label %3786

; <label>:3786:                                   ; preds = %3783
  %3787 = icmp ugt i64 %2816, 4
  br i1 %3787, label %3788, label %3807, !llvm.loop !893

; <label>:3788:                                   ; preds = %3786
  %3789 = icmp ugt i64 %2820, 6
  br i1 %3789, label %3790, label %3808

; <label>:3790:                                   ; preds = %3788
  %3791 = and i64 %2956, 274877906944
  %3792 = icmp eq i64 %3791, 0
  br i1 %3792, label %3808, label %3793

; <label>:3793:                                   ; preds = %3790
  %3794 = icmp ugt i64 %2816, 5
  br i1 %3794, label %3795, label %3807, !llvm.loop !893

; <label>:3795:                                   ; preds = %3793
  %3796 = icmp ugt i64 %2820, 7
  br i1 %3796, label %3797, label %3808

; <label>:3797:                                   ; preds = %3795
  %3798 = and i64 %2956, 140737488355328
  %3799 = icmp eq i64 %3798, 0
  br i1 %3799, label %3808, label %3800

; <label>:3800:                                   ; preds = %3797
  br i1 false, label %3801, label %3807, !llvm.loop !893

; <label>:3801:                                   ; preds = %3800
  br i1 undef, label %3802, label %3808

; <label>:3802:                                   ; preds = %3801
  br i1 undef, label %3808, label %3803

; <label>:3803:                                   ; preds = %3802
  br i1 false, label %3804, label %3807, !llvm.loop !893

; <label>:3804:                                   ; preds = %3803
  br i1 undef, label %3805, label %3808

; <label>:3805:                                   ; preds = %3804
  br i1 undef, label %3808, label %3806

; <label>:3806:                                   ; preds = %3805
  br label %3807

; <label>:3807:                                   ; preds = %3806, %3803, %3800, %3793, %3786, %3779, %3772, %3765
  br label %3810

; <label>:3808:                                   ; preds = %3805, %3804, %3802, %3801, %3797, %3795, %3790, %3788, %3783, %3781, %3776, %3774, %3769, %3767, %3762, %3760
  %3809 = xor i16 %3759, 4
  br label %3810

; <label>:3810:                                   ; preds = %3808, %3807
  %3811 = phi i16 [ %3809, %3808 ], [ %3759, %3807 ]
  br label %3812

; <label>:3812:                                   ; preds = %3810
  %3813 = icmp ugt i64 %2820, 3
  br i1 %3813, label %3814, label %3856

; <label>:3814:                                   ; preds = %3812
  %3815 = and i64 %2956, 8
  %3816 = icmp eq i64 %3815, 0
  br i1 %3816, label %3856, label %3817

; <label>:3817:                                   ; preds = %3814
  %3818 = icmp ugt i64 %2816, 1
  br i1 %3818, label %3819, label %3855, !llvm.loop !893

; <label>:3819:                                   ; preds = %3817
  %3820 = icmp ugt i64 %2820, 4
  br i1 %3820, label %3821, label %3856

; <label>:3821:                                   ; preds = %3819
  %3822 = and i64 %2956, 4096
  %3823 = icmp eq i64 %3822, 0
  br i1 %3823, label %3856, label %3824

; <label>:3824:                                   ; preds = %3821
  %3825 = icmp ugt i64 %2816, 2
  br i1 %3825, label %3826, label %3855, !llvm.loop !893

; <label>:3826:                                   ; preds = %3824
  %3827 = icmp ugt i64 %2820, 5
  br i1 %3827, label %3828, label %3856

; <label>:3828:                                   ; preds = %3826
  %3829 = and i64 %2956, 2097152
  %3830 = icmp eq i64 %3829, 0
  br i1 %3830, label %3856, label %3831

; <label>:3831:                                   ; preds = %3828
  %3832 = icmp ugt i64 %2816, 3
  br i1 %3832, label %3833, label %3855, !llvm.loop !893

; <label>:3833:                                   ; preds = %3831
  %3834 = icmp ugt i64 %2820, 6
  br i1 %3834, label %3835, label %3856

; <label>:3835:                                   ; preds = %3833
  %3836 = and i64 %2956, 1073741824
  %3837 = icmp eq i64 %3836, 0
  br i1 %3837, label %3856, label %3838

; <label>:3838:                                   ; preds = %3835
  %3839 = icmp ugt i64 %2816, 4
  br i1 %3839, label %3840, label %3855, !llvm.loop !893

; <label>:3840:                                   ; preds = %3838
  %3841 = icmp ugt i64 %2820, 7
  br i1 %3841, label %3842, label %3856

; <label>:3842:                                   ; preds = %3840
  %3843 = and i64 %2956, 549755813888
  %3844 = icmp eq i64 %3843, 0
  br i1 %3844, label %3856, label %3845

; <label>:3845:                                   ; preds = %3842
  br i1 false, label %3846, label %3855, !llvm.loop !893

; <label>:3846:                                   ; preds = %3845
  br i1 undef, label %3847, label %3856

; <label>:3847:                                   ; preds = %3846
  br i1 undef, label %3856, label %3848

; <label>:3848:                                   ; preds = %3847
  br i1 false, label %3849, label %3855, !llvm.loop !893

; <label>:3849:                                   ; preds = %3848
  br i1 undef, label %3850, label %3856

; <label>:3850:                                   ; preds = %3849
  br i1 undef, label %3856, label %3851

; <label>:3851:                                   ; preds = %3850
  br i1 false, label %3852, label %3855, !llvm.loop !893

; <label>:3852:                                   ; preds = %3851
  br i1 undef, label %3853, label %3856

; <label>:3853:                                   ; preds = %3852
  br i1 undef, label %3856, label %3854

; <label>:3854:                                   ; preds = %3853
  br label %3855

; <label>:3855:                                   ; preds = %3854, %3851, %3848, %3845, %3838, %3831, %3824, %3817
  br label %3858

; <label>:3856:                                   ; preds = %3853, %3852, %3850, %3849, %3847, %3846, %3842, %3840, %3835, %3833, %3828, %3826, %3821, %3819, %3814, %3812
  %3857 = xor i16 %3811, 8
  br label %3858

; <label>:3858:                                   ; preds = %3856, %3855
  %3859 = phi i16 [ %3857, %3856 ], [ %3811, %3855 ]
  br label %3860

; <label>:3860:                                   ; preds = %3858
  %3861 = icmp ugt i64 %2820, 4
  br i1 %3861, label %3862, label %3900

; <label>:3862:                                   ; preds = %3860
  %3863 = and i64 %2956, 16
  %3864 = icmp eq i64 %3863, 0
  br i1 %3864, label %3900, label %3865

; <label>:3865:                                   ; preds = %3862
  %3866 = icmp ugt i64 %2816, 1
  br i1 %3866, label %3867, label %3899, !llvm.loop !893

; <label>:3867:                                   ; preds = %3865
  %3868 = icmp ugt i64 %2820, 5
  br i1 %3868, label %3869, label %3900

; <label>:3869:                                   ; preds = %3867
  %3870 = and i64 %2956, 8192
  %3871 = icmp eq i64 %3870, 0
  br i1 %3871, label %3900, label %3872

; <label>:3872:                                   ; preds = %3869
  %3873 = icmp ugt i64 %2816, 2
  br i1 %3873, label %3874, label %3899, !llvm.loop !893

; <label>:3874:                                   ; preds = %3872
  %3875 = icmp ugt i64 %2820, 6
  br i1 %3875, label %3876, label %3900

; <label>:3876:                                   ; preds = %3874
  %3877 = and i64 %2956, 4194304
  %3878 = icmp eq i64 %3877, 0
  br i1 %3878, label %3900, label %3879

; <label>:3879:                                   ; preds = %3876
  %3880 = icmp ugt i64 %2816, 3
  br i1 %3880, label %3881, label %3899, !llvm.loop !893

; <label>:3881:                                   ; preds = %3879
  %3882 = icmp ugt i64 %2820, 7
  br i1 %3882, label %3883, label %3900

; <label>:3883:                                   ; preds = %3881
  %3884 = trunc i64 %2956 to i32
  %3885 = icmp sgt i32 %3884, -1
  br i1 %3885, label %3900, label %3886

; <label>:3886:                                   ; preds = %3883
  br i1 false, label %3887, label %3899, !llvm.loop !893

; <label>:3887:                                   ; preds = %3886
  br i1 undef, label %3888, label %3900

; <label>:3888:                                   ; preds = %3887
  br i1 undef, label %3900, label %3889

; <label>:3889:                                   ; preds = %3888
  br i1 false, label %3890, label %3899, !llvm.loop !893

; <label>:3890:                                   ; preds = %3889
  br i1 undef, label %3891, label %3900

; <label>:3891:                                   ; preds = %3890
  br i1 undef, label %3900, label %3892

; <label>:3892:                                   ; preds = %3891
  br i1 false, label %3893, label %3899, !llvm.loop !893

; <label>:3893:                                   ; preds = %3892
  br i1 undef, label %3894, label %3900

; <label>:3894:                                   ; preds = %3893
  br i1 undef, label %3900, label %3895

; <label>:3895:                                   ; preds = %3894
  br i1 false, label %3896, label %3899, !llvm.loop !893

; <label>:3896:                                   ; preds = %3895
  br i1 undef, label %3897, label %3900

; <label>:3897:                                   ; preds = %3896
  br i1 undef, label %3900, label %3898

; <label>:3898:                                   ; preds = %3897
  br label %3899

; <label>:3899:                                   ; preds = %3898, %3895, %3892, %3889, %3886, %3879, %3872, %3865
  br label %3902

; <label>:3900:                                   ; preds = %3897, %3896, %3894, %3893, %3891, %3890, %3888, %3887, %3883, %3881, %3876, %3874, %3869, %3867, %3862, %3860
  %3901 = xor i16 %3859, 16
  br label %3902

; <label>:3902:                                   ; preds = %3900, %3899
  %3903 = phi i16 [ %3901, %3900 ], [ %3859, %3899 ]
  br label %3904

; <label>:3904:                                   ; preds = %3902
  %3905 = icmp ugt i64 %2820, 5
  br i1 %3905, label %3906, label %3940

; <label>:3906:                                   ; preds = %3904
  %3907 = and i64 %2956, 32
  %3908 = icmp eq i64 %3907, 0
  br i1 %3908, label %3940, label %3909

; <label>:3909:                                   ; preds = %3906
  %3910 = icmp ugt i64 %2816, 1
  br i1 %3910, label %3911, label %3939, !llvm.loop !893

; <label>:3911:                                   ; preds = %3909
  %3912 = icmp ugt i64 %2820, 6
  br i1 %3912, label %3913, label %3940

; <label>:3913:                                   ; preds = %3911
  %3914 = and i64 %2956, 16384
  %3915 = icmp eq i64 %3914, 0
  br i1 %3915, label %3940, label %3916

; <label>:3916:                                   ; preds = %3913
  %3917 = icmp ugt i64 %2816, 2
  br i1 %3917, label %3918, label %3939, !llvm.loop !893

; <label>:3918:                                   ; preds = %3916
  %3919 = icmp ugt i64 %2820, 7
  br i1 %3919, label %3920, label %3940

; <label>:3920:                                   ; preds = %3918
  %3921 = and i64 %2956, 8388608
  %3922 = icmp eq i64 %3921, 0
  br i1 %3922, label %3940, label %3923

; <label>:3923:                                   ; preds = %3920
  br i1 false, label %3924, label %3939, !llvm.loop !893

; <label>:3924:                                   ; preds = %3923
  br i1 undef, label %3925, label %3940

; <label>:3925:                                   ; preds = %3924
  br i1 undef, label %3940, label %3926

; <label>:3926:                                   ; preds = %3925
  br i1 false, label %3927, label %3939, !llvm.loop !893

; <label>:3927:                                   ; preds = %3926
  br i1 undef, label %3928, label %3940

; <label>:3928:                                   ; preds = %3927
  br i1 undef, label %3940, label %3929

; <label>:3929:                                   ; preds = %3928
  br i1 false, label %3930, label %3939, !llvm.loop !893

; <label>:3930:                                   ; preds = %3929
  br i1 undef, label %3931, label %3940

; <label>:3931:                                   ; preds = %3930
  br i1 undef, label %3940, label %3932

; <label>:3932:                                   ; preds = %3931
  br i1 false, label %3933, label %3939, !llvm.loop !893

; <label>:3933:                                   ; preds = %3932
  br i1 undef, label %3934, label %3940

; <label>:3934:                                   ; preds = %3933
  br i1 undef, label %3940, label %3935

; <label>:3935:                                   ; preds = %3934
  br i1 false, label %3936, label %3939, !llvm.loop !893

; <label>:3936:                                   ; preds = %3935
  br i1 undef, label %3937, label %3940

; <label>:3937:                                   ; preds = %3936
  br i1 undef, label %3940, label %3938

; <label>:3938:                                   ; preds = %3937
  br label %3939

; <label>:3939:                                   ; preds = %3938, %3935, %3932, %3929, %3926, %3923, %3916, %3909
  br label %3942

; <label>:3940:                                   ; preds = %3937, %3936, %3934, %3933, %3931, %3930, %3928, %3927, %3925, %3924, %3920, %3918, %3913, %3911, %3906, %3904
  %3941 = xor i16 %3903, 32
  br label %3942

; <label>:3942:                                   ; preds = %3940, %3939
  %3943 = phi i16 [ %3941, %3940 ], [ %3903, %3939 ]
  br label %3944

; <label>:3944:                                   ; preds = %3942
  %3945 = icmp ugt i64 %2820, 6
  br i1 %3945, label %3946, label %3976

; <label>:3946:                                   ; preds = %3944
  %3947 = and i64 %2956, 64
  %3948 = icmp eq i64 %3947, 0
  br i1 %3948, label %3976, label %3949

; <label>:3949:                                   ; preds = %3946
  %3950 = icmp ugt i64 %2816, 1
  br i1 %3950, label %3951, label %3975, !llvm.loop !893

; <label>:3951:                                   ; preds = %3949
  %3952 = icmp ugt i64 %2820, 7
  br i1 %3952, label %3953, label %3976

; <label>:3953:                                   ; preds = %3951
  %3954 = trunc i64 %2956 to i16
  %3955 = icmp sgt i16 %3954, -1
  br i1 %3955, label %3976, label %3956

; <label>:3956:                                   ; preds = %3953
  br i1 false, label %3957, label %3975, !llvm.loop !893

; <label>:3957:                                   ; preds = %3956
  br i1 undef, label %3958, label %3976

; <label>:3958:                                   ; preds = %3957
  br i1 undef, label %3976, label %3959

; <label>:3959:                                   ; preds = %3958
  br i1 false, label %3960, label %3975, !llvm.loop !893

; <label>:3960:                                   ; preds = %3959
  br i1 undef, label %3961, label %3976

; <label>:3961:                                   ; preds = %3960
  br i1 undef, label %3976, label %3962

; <label>:3962:                                   ; preds = %3961
  br i1 false, label %3963, label %3975, !llvm.loop !893

; <label>:3963:                                   ; preds = %3962
  br i1 undef, label %3964, label %3976

; <label>:3964:                                   ; preds = %3963
  br i1 undef, label %3976, label %3965

; <label>:3965:                                   ; preds = %3964
  br i1 false, label %3966, label %3975, !llvm.loop !893

; <label>:3966:                                   ; preds = %3965
  br i1 undef, label %3967, label %3976

; <label>:3967:                                   ; preds = %3966
  br i1 undef, label %3976, label %3968

; <label>:3968:                                   ; preds = %3967
  br i1 false, label %3969, label %3975, !llvm.loop !893

; <label>:3969:                                   ; preds = %3968
  br i1 undef, label %3970, label %3976

; <label>:3970:                                   ; preds = %3969
  br i1 undef, label %3976, label %3971

; <label>:3971:                                   ; preds = %3970
  br i1 false, label %3972, label %3975, !llvm.loop !893

; <label>:3972:                                   ; preds = %3971
  br i1 undef, label %3973, label %3976

; <label>:3973:                                   ; preds = %3972
  br i1 undef, label %3976, label %3974

; <label>:3974:                                   ; preds = %3973
  br label %3975

; <label>:3975:                                   ; preds = %3974, %3971, %3968, %3965, %3962, %3959, %3956, %3949
  br label %3978

; <label>:3976:                                   ; preds = %3973, %3972, %3970, %3969, %3967, %3966, %3964, %3963, %3961, %3960, %3958, %3957, %3953, %3951, %3946, %3944
  %3977 = xor i16 %3943, 64
  br label %3978

; <label>:3978:                                   ; preds = %3976, %3975
  %3979 = phi i16 [ %3977, %3976 ], [ %3943, %3975 ]
  br label %3980

; <label>:3980:                                   ; preds = %3978
  %3981 = icmp ugt i64 %2820, 7
  br i1 %3981, label %3982, label %4008

; <label>:3982:                                   ; preds = %3980
  %3983 = trunc i64 %2956 to i8
  %3984 = icmp sgt i8 %3983, -1
  br i1 %3984, label %4008, label %3985

; <label>:3985:                                   ; preds = %3982
  br i1 false, label %3986, label %4007, !llvm.loop !893

; <label>:3986:                                   ; preds = %3985
  br i1 undef, label %3987, label %4008

; <label>:3987:                                   ; preds = %3986
  br i1 undef, label %4008, label %3988

; <label>:3988:                                   ; preds = %3987
  br i1 false, label %3989, label %4007, !llvm.loop !893

; <label>:3989:                                   ; preds = %3988
  br i1 undef, label %3990, label %4008

; <label>:3990:                                   ; preds = %3989
  br i1 undef, label %4008, label %3991

; <label>:3991:                                   ; preds = %3990
  br i1 false, label %3992, label %4007, !llvm.loop !893

; <label>:3992:                                   ; preds = %3991
  br i1 undef, label %3993, label %4008

; <label>:3993:                                   ; preds = %3992
  br i1 undef, label %4008, label %3994

; <label>:3994:                                   ; preds = %3993
  br i1 false, label %3995, label %4007, !llvm.loop !893

; <label>:3995:                                   ; preds = %3994
  br i1 undef, label %3996, label %4008

; <label>:3996:                                   ; preds = %3995
  br i1 undef, label %4008, label %3997

; <label>:3997:                                   ; preds = %3996
  br i1 false, label %3998, label %4007, !llvm.loop !893

; <label>:3998:                                   ; preds = %3997
  br i1 undef, label %3999, label %4008

; <label>:3999:                                   ; preds = %3998
  br i1 undef, label %4008, label %4000

; <label>:4000:                                   ; preds = %3999
  br i1 false, label %4001, label %4007, !llvm.loop !893

; <label>:4001:                                   ; preds = %4000
  br i1 undef, label %4002, label %4008

; <label>:4002:                                   ; preds = %4001
  br i1 undef, label %4008, label %4003

; <label>:4003:                                   ; preds = %4002
  br i1 false, label %4004, label %4007, !llvm.loop !893

; <label>:4004:                                   ; preds = %4003
  br i1 undef, label %4005, label %4008

; <label>:4005:                                   ; preds = %4004
  br i1 undef, label %4008, label %4006

; <label>:4006:                                   ; preds = %4005
  br label %4007

; <label>:4007:                                   ; preds = %4006, %4003, %4000, %3997, %3994, %3991, %3988, %3985
  br label %4010

; <label>:4008:                                   ; preds = %4005, %4004, %4002, %4001, %3999, %3998, %3996, %3995, %3993, %3992, %3990, %3989, %3987, %3986, %3982, %3980
  %4009 = xor i16 %3979, 128
  br label %4010

; <label>:4010:                                   ; preds = %4008, %4007
  %4011 = phi i16 [ %4009, %4008 ], [ %3979, %4007 ]
  br label %3233
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6PSRLDQI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_2InIhE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = bitcast <2 x i64>* %7 to %struct.uint8v16_t*
  %9 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start(i64 16, i8* nonnull %9) #23
  %10 = bitcast i8* %3 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 1
  store <2 x i64> %11, <2 x i64>* %7, align 16
  %12 = and i64 %4, 255
  %13 = icmp ult i64 %12, 16
  br i1 %13, label %14, label %29

; <label>:14:                                     ; preds = %5
  %15 = bitcast { i64, i64 }* %6 to i8*
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %18 = bitcast { i64, i64 }* %6 to [16 x i8]*
  %19 = sub nsw i64 16, %12
  br label %69

; <label>:20:                                     ; preds = %69
  %21 = trunc i64 %113 to i8
  %22 = trunc i64 %112 to i8
  %23 = trunc i64 %111 to i8
  %24 = trunc i64 %110 to i8
  %25 = trunc i64 %109 to i8
  %26 = trunc i64 %108 to i8
  %27 = trunc i64 %107 to i8
  %28 = trunc i64 %105 to i8
  br label %29

; <label>:29:                                     ; preds = %20, %5
  %30 = phi i8 [ 0, %5 ], [ %23, %20 ]
  %31 = phi i8 [ 0, %5 ], [ %24, %20 ]
  %32 = phi i8 [ 0, %5 ], [ %25, %20 ]
  %33 = phi i8 [ 0, %5 ], [ %26, %20 ]
  %34 = phi i8 [ 0, %5 ], [ %27, %20 ]
  %35 = phi i8 [ 0, %5 ], [ %28, %20 ]
  %36 = phi i64 [ 0, %5 ], [ %106, %20 ]
  %37 = phi i8 [ 0, %5 ], [ %22, %20 ]
  %38 = phi i8 [ 0, %5 ], [ %21, %20 ]
  store i8 %35, i8* %2, align 1, !tbaa !868
  %39 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %34, i8* %39, align 1, !tbaa !868
  %40 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 %33, i8* %40, align 1, !tbaa !868
  %41 = getelementptr inbounds i8, i8* %2, i64 3
  store i8 %32, i8* %41, align 1, !tbaa !868
  %42 = getelementptr inbounds i8, i8* %2, i64 4
  store i8 %31, i8* %42, align 1, !tbaa !868
  %43 = getelementptr inbounds i8, i8* %2, i64 5
  store i8 %30, i8* %43, align 1, !tbaa !868
  %44 = getelementptr inbounds i8, i8* %2, i64 6
  store i8 %37, i8* %44, align 1, !tbaa !868
  %45 = getelementptr inbounds i8, i8* %2, i64 7
  store i8 %38, i8* %45, align 1, !tbaa !868
  %46 = trunc i64 %36 to i8
  %47 = getelementptr inbounds i8, i8* %2, i64 8
  store i8 %46, i8* %47, align 1, !tbaa !868
  %48 = lshr i64 %36, 8
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 %49, i8* %50, align 1, !tbaa !868
  %51 = lshr i64 %36, 16
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds i8, i8* %2, i64 10
  store i8 %52, i8* %53, align 1, !tbaa !868
  %54 = lshr i64 %36, 24
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 %55, i8* %56, align 1, !tbaa !868
  %57 = lshr i64 %36, 32
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds i8, i8* %2, i64 12
  store i8 %58, i8* %59, align 1, !tbaa !868
  %60 = lshr i64 %36, 40
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds i8, i8* %2, i64 13
  store i8 %61, i8* %62, align 1, !tbaa !868
  %63 = lshr i64 %36, 48
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds i8, i8* %2, i64 14
  store i8 %64, i8* %65, align 1, !tbaa !868
  %66 = lshr i64 %36, 56
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds i8, i8* %2, i64 15
  store i8 %67, i8* %68, align 1, !tbaa !868
  call void @llvm.lifetime.end(i64 16, i8* nonnull %9) #23
  ret %struct.Memory* %0

; <label>:69:                                     ; preds = %69, %14
  %70 = phi i64 [ %12, %14 ], [ %114, %69 ]
  %71 = phi i64 [ 0, %14 ], [ %115, %69 ]
  %72 = phi i64 [ 0, %14 ], [ %113, %69 ]
  %73 = phi i64 [ 0, %14 ], [ %112, %69 ]
  %74 = phi i64 [ 0, %14 ], [ %106, %69 ]
  %75 = phi i64 [ 0, %14 ], [ %105, %69 ]
  %76 = phi i64 [ 0, %14 ], [ %107, %69 ]
  %77 = phi i64 [ 0, %14 ], [ %108, %69 ]
  %78 = phi i64 [ 0, %14 ], [ %109, %69 ]
  %79 = phi i64 [ 0, %14 ], [ %110, %69 ]
  %80 = phi i64 [ 0, %14 ], [ %111, %69 ]
  %81 = shl nuw i64 %72, 56
  %82 = shl nuw i64 %73, 48
  %83 = and i64 %82, 71776119061217280
  %84 = shl nuw i64 %80, 40
  %85 = and i64 %84, 280375465082880
  %86 = shl nuw i64 %79, 32
  %87 = and i64 %86, 1095216660480
  %88 = shl nuw i64 %78, 24
  %89 = and i64 %88, 4278190080
  %90 = shl nuw i64 %77, 16
  %91 = and i64 %90, 16711680
  %92 = shl nuw i64 %76, 8
  %93 = and i64 %92, 65280
  %94 = and i64 %75, 255
  %95 = or i64 %87, %85
  %96 = or i64 %95, %89
  %97 = or i64 %96, %91
  %98 = or i64 %97, %93
  %99 = or i64 %98, %94
  %100 = or i64 %99, %83
  %101 = or i64 %100, %81
  %102 = getelementptr inbounds %struct.uint8v16_t, %struct.uint8v16_t* %8, i64 0, i32 0, i64 %70
  %103 = load i8, i8* %102, align 1, !tbaa !868
  call void @llvm.lifetime.start(i64 16, i8* nonnull %15)
  store i64 %101, i64* %16, align 8
  store i64 %74, i64* %17, align 8
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %18, i64 0, i64 %71
  store i8 %103, i8* %104, align 1, !tbaa !868
  %105 = load i64, i64* %16, align 8
  %106 = load i64, i64* %17, align 8
  call void @llvm.lifetime.end(i64 16, i8* nonnull %15)
  %107 = lshr i64 %105, 8
  %108 = lshr i64 %105, 16
  %109 = lshr i64 %105, 24
  %110 = lshr i64 %105, 32
  %111 = lshr i64 %105, 40
  %112 = lshr i64 %105, 48
  %113 = lshr i64 %105, 56
  %114 = add nuw nsw i64 %70, 1
  %115 = add nuw nsw i64 %71, 1
  %116 = icmp eq i64 %115, %19
  br i1 %116, label %20, label %69, !llvm.loop !894
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %13 = fcmp uno float %11, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq float %11, 0.000000e+00
  %16 = fcmp oeq float %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp ult float %11, %12
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi float [ %12, %20 ], [ %11, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to float*
  store float %22, float* %23, align 1, !tbaa !871
  %24 = bitcast <2 x float> %7 to <2 x i32>
  %25 = extractelement <2 x i32> %24, i32 1
  %26 = getelementptr inbounds i8, i8* %2, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1, !tbaa !871
  %28 = extractelement <2 x i32> %10, i32 0
  %29 = getelementptr inbounds i8, i8* %2, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1, !tbaa !871
  %31 = extractelement <2 x i32> %10, i32 1
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = bitcast i8* %4 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 1
  %14 = extractelement <2 x float> %13, i32 0
  %15 = fcmp uno float %11, %14
  br i1 %15, label %23, label %16

; <label>:16:                                     ; preds = %5
  %17 = fcmp oeq float %11, 0.000000e+00
  %18 = fcmp oeq float %14, 0.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %16
  %21 = fcmp ult float %11, %14
  br i1 %21, label %23, label %22

; <label>:22:                                     ; preds = %20
  br label %23

; <label>:23:                                     ; preds = %22, %20, %16, %5
  %24 = phi float [ %14, %22 ], [ %11, %20 ], [ %14, %5 ], [ %14, %16 ]
  %25 = bitcast i8* %2 to float*
  store float %24, float* %25, align 1, !tbaa !871
  %26 = bitcast <2 x float> %7 to <2 x i32>
  %27 = extractelement <2 x i32> %26, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1, !tbaa !871
  %30 = extractelement <2 x i32> %10, i32 0
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 1, !tbaa !871
  %33 = extractelement <2 x i32> %10, i32 1
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %12 = fcmp uno double %7, %11
  br i1 %12, label %20, label %13

; <label>:13:                                     ; preds = %5
  %14 = fcmp oeq double %7, 0.000000e+00
  %15 = fcmp oeq double %11, 0.000000e+00
  %16 = and i1 %14, %15
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %13
  %18 = fcmp ult double %7, %11
  br i1 %18, label %20, label %19

; <label>:19:                                     ; preds = %17
  br label %20

; <label>:20:                                     ; preds = %19, %17, %13, %5
  %21 = phi double [ %11, %19 ], [ %7, %17 ], [ %11, %5 ], [ %11, %13 ]
  %22 = bitcast i8* %2 to double*
  store double %21, double* %22, align 1, !tbaa !873
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  store i64 %10, i64* %24, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MINSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fcmp uno double %7, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq double %7, 0.000000e+00
  %16 = fcmp oeq double %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp ult double %7, %12
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi double [ %12, %20 ], [ %7, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to double*
  store double %22, double* %23, align 1, !tbaa !873
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %10, i64* %25, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec32_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %13 = fcmp uno float %11, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq float %11, 0.000000e+00
  %16 = fcmp oeq float %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp olt float %11, %12
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi float [ %12, %20 ], [ %11, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to float*
  store float %22, float* %23, align 1, !tbaa !871
  %24 = bitcast <2 x float> %7 to <2 x i32>
  %25 = extractelement <2 x i32> %24, i32 1
  %26 = getelementptr inbounds i8, i8* %2, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1, !tbaa !871
  %28 = extractelement <2 x i32> %10, i32 0
  %29 = getelementptr inbounds i8, i8* %2, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 %28, i32* %30, align 1, !tbaa !871
  %31 = extractelement <2 x i32> %10, i32 1
  %32 = getelementptr inbounds i8, i8* %2, i64 12
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = extractelement <2 x float> %7, i32 0
  %12 = bitcast i8* %4 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 1
  %14 = extractelement <2 x float> %13, i32 0
  %15 = fcmp uno float %11, %14
  br i1 %15, label %23, label %16

; <label>:16:                                     ; preds = %5
  %17 = fcmp oeq float %11, 0.000000e+00
  %18 = fcmp oeq float %14, 0.000000e+00
  %19 = and i1 %17, %18
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %16
  %21 = fcmp olt float %11, %14
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %20
  br label %23

; <label>:23:                                     ; preds = %22, %20, %16, %5
  %24 = phi float [ %14, %22 ], [ %11, %20 ], [ %14, %5 ], [ %14, %16 ]
  %25 = bitcast i8* %2 to float*
  store float %24, float* %25, align 1, !tbaa !871
  %26 = bitcast <2 x float> %7 to <2 x i32>
  %27 = extractelement <2 x i32> %26, i32 1
  %28 = getelementptr inbounds i8, i8* %2, i64 4
  %29 = bitcast i8* %28 to i32*
  store i32 %27, i32* %29, align 1, !tbaa !871
  %30 = extractelement <2 x i32> %10, i32 0
  %31 = getelementptr inbounds i8, i8* %2, i64 8
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 1, !tbaa !871
  %33 = extractelement <2 x i32> %10, i32 1
  %34 = getelementptr inbounds i8, i8* %2, i64 12
  %35 = bitcast i8* %34 to i32*
  store i32 %33, i32* %35, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %12 = fcmp uno double %7, %11
  br i1 %12, label %20, label %13

; <label>:13:                                     ; preds = %5
  %14 = fcmp oeq double %7, 0.000000e+00
  %15 = fcmp oeq double %11, 0.000000e+00
  %16 = and i1 %14, %15
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %13
  %18 = fcmp olt double %7, %11
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %17
  br label %20

; <label>:20:                                     ; preds = %19, %17, %13, %5
  %21 = phi double [ %11, %19 ], [ %7, %17 ], [ %11, %5 ], [ %11, %13 ]
  %22 = bitcast i8* %2 to double*
  store double %21, double* %22, align 1, !tbaa !873
  %23 = getelementptr inbounds i8, i8* %2, i64 8
  %24 = bitcast i8* %23 to i64*
  store i64 %10, i64* %24, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5MAXSDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %4 to double*
  %12 = load double, double* %11, align 1
  %13 = fcmp uno double %7, %12
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %5
  %15 = fcmp oeq double %7, 0.000000e+00
  %16 = fcmp oeq double %12, 0.000000e+00
  %17 = and i1 %15, %16
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %14
  %19 = fcmp olt double %7, %12
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %18
  br label %21

; <label>:21:                                     ; preds = %20, %18, %14, %5
  %22 = phi double [ %12, %20 ], [ %7, %18 ], [ %12, %5 ], [ %12, %14 ]
  %23 = bitcast i8* %2 to double*
  store double %22, double* %23, align 1, !tbaa !873
  %24 = getelementptr inbounds i8, i8* %2, i64 8
  %25 = bitcast i8* %24 to i64*
  store i64 %10, i64* %25, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPSI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to <2 x i32>*
  %7 = load <2 x i32>, <2 x i32>* %6, align 1
  %8 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %9 = add i64 %4, 4
  %10 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %9) #22
  %11 = extractelement <2 x i32> %7, i32 0
  %12 = bitcast i8* %2 to i32*
  store i32 %11, i32* %12, align 1, !tbaa !871
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to float*
  store float %8, float* %14, align 1, !tbaa !871
  %15 = extractelement <2 x i32> %7, i32 1
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1, !tbaa !871
  %18 = getelementptr inbounds i8, i8* %2, i64 12
  %19 = bitcast i8* %18 to float*
  store float %10, float* %19, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPSI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to <2 x i32>*
  %7 = load <2 x i32>, <2 x i32>* %6, align 1
  %8 = bitcast i8* %4 to <2 x i32>*
  %9 = load <2 x i32>, <2 x i32>* %8, align 1
  %10 = extractelement <2 x i32> %7, i32 0
  %11 = bitcast i8* %2 to i32*
  store i32 %10, i32* %11, align 1, !tbaa !871
  %12 = extractelement <2 x i32> %9, i32 0
  %13 = getelementptr inbounds i8, i8* %2, i64 4
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 1, !tbaa !871
  %15 = extractelement <2 x i32> %7, i32 1
  %16 = getelementptr inbounds i8, i8* %2, i64 8
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 1, !tbaa !871
  %18 = extractelement <2 x i32> %9, i32 1
  %19 = getelementptr inbounds i8, i8* %2, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPDI3VnWI8vec128_tE2VnIS2_E3MVnI7vec64_tEEEP6MemorySA_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %9 = bitcast i8* %2 to i64*
  store i64 %7, i64* %9, align 1, !tbaa !873
  %10 = getelementptr inbounds i8, i8* %2, i64 8
  %11 = bitcast i8* %10 to double*
  store double %8, double* %11, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKLPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = bitcast i8* %3 to i64*
  %7 = load i64, i64* %6, align 1
  %8 = bitcast i8* %4 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = bitcast i8* %2 to i64*
  store i64 %7, i64* %10, align 1, !tbaa !873
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i64*
  store i64 %9, i64* %12, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKHPDI3VnWI8vec128_tE2VnIS2_E3MVnIS2_EEEP6MemoryS9_R5StateT_T0_T1_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i64) #0 {
  %6 = add i64 %4, 8
  %7 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %6) #22
  %8 = getelementptr inbounds i8, i8* %3, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = bitcast i8* %2 to i64*
  store i64 %10, i64* %11, align 1, !tbaa !873
  %12 = getelementptr inbounds i8, i8* %2, i64 8
  %13 = bitcast i8* %12 to double*
  store double %7, double* %13, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8UNPCKHPDI3VnWI8vec128_tE2VnIS2_ES5_EEP6MemoryS7_R5StateT_T0_T1_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly, i8* nocapture readonly) #0 {
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = getelementptr inbounds i8, i8* %3, i64 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = bitcast i8* %2 to i64*
  store i64 %11, i64* %12, align 1, !tbaa !873
  %13 = getelementptr inbounds i8, i8* %2, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 %8, i64* %14, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7MOVDDUPI3VnWI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = bitcast i8* %2 to double*
  store double %5, double* %6, align 1, !tbaa !873
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to double*
  store double %5, double* %8, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7MOVDDUPI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = bitcast i8* %2 to i64*
  store i64 %6, i64* %7, align 1, !tbaa !873
  %8 = getelementptr inbounds i8, i8* %2, i64 8
  %9 = bitcast i8* %8 to i64*
  store i64 %6, i64* %9, align 1, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SQRTSSI3VnWI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = fcmp uno float %5, 0.000000e+00
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %4
  %8 = tail call i32 @__issignalingf(float %5) #24
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %22, label %10

; <label>:10:                                     ; preds = %7
  %11 = bitcast float %5 to i32
  %12 = or i32 %11, 4194304
  %13 = bitcast i32 %12 to float
  br label %22

; <label>:14:                                     ; preds = %4
  %15 = fpext float %5 to double
  %16 = bitcast double %15 to i64
  %17 = icmp slt i64 %16, 0
  %18 = fcmp une float %5, -0.000000e+00
  %19 = and i1 %18, %17
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %14
  %21 = tail call float @sqrtf(float %5) #22
  br label %22

; <label>:22:                                     ; preds = %20, %14, %10, %7
  %23 = phi float [ %13, %10 ], [ %21, %20 ], [ %5, %7 ], [ 0xFFF8000000000000, %14 ]
  %24 = bitcast i8* %2 to <2 x i32>*
  %25 = load <2 x i32>, <2 x i32>* %24, align 1
  %26 = getelementptr inbounds i8, i8* %2, i64 8
  %27 = bitcast i8* %26 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 1
  %29 = bitcast i8* %2 to float*
  store float %23, float* %29, align 1, !tbaa !871
  %30 = extractelement <2 x i32> %25, i32 1
  %31 = getelementptr inbounds i8, i8* %2, i64 4
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 1, !tbaa !871
  %33 = extractelement <2 x i32> %28, i32 0
  %34 = bitcast i8* %26 to i32*
  store i32 %33, i32* %34, align 1, !tbaa !871
  %35 = extractelement <2 x i32> %28, i32 1
  %36 = getelementptr inbounds i8, i8* %2, i64 12
  %37 = bitcast i8* %36 to i32*
  store i32 %35, i32* %37, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6SQRTSSI3VnWI8vec128_tE2VnIS2_EEEP6MemoryS7_R5StateT_T0_(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i8* nocapture, i8* nocapture readonly) #0 {
  %5 = bitcast i8* %3 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 1
  %7 = extractelement <2 x float> %6, i32 0
  %8 = fcmp uno float %7, 0.000000e+00
  br i1 %8, label %9, label %16

; <label>:9:                                      ; preds = %4
  %10 = tail call i32 @__issignalingf(float %7) #24
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %24, label %12

; <label>:12:                                     ; preds = %9
  %13 = bitcast float %7 to i32
  %14 = or i32 %13, 4194304
  %15 = bitcast i32 %14 to float
  br label %24

; <label>:16:                                     ; preds = %4
  %17 = fpext float %7 to double
  %18 = bitcast double %17 to i64
  %19 = icmp slt i64 %18, 0
  %20 = fcmp une float %7, -0.000000e+00
  %21 = and i1 %20, %19
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %16
  %23 = tail call float @sqrtf(float %7) #22
  br label %24

; <label>:24:                                     ; preds = %22, %16, %12, %9
  %25 = phi float [ %15, %12 ], [ %23, %22 ], [ %7, %9 ], [ 0xFFF8000000000000, %16 ]
  %26 = bitcast i8* %2 to <2 x i32>*
  %27 = load <2 x i32>, <2 x i32>* %26, align 1
  %28 = getelementptr inbounds i8, i8* %2, i64 8
  %29 = bitcast i8* %28 to <2 x i32>*
  %30 = load <2 x i32>, <2 x i32>* %29, align 1
  %31 = bitcast i8* %2 to float*
  store float %25, float* %31, align 1, !tbaa !871
  %32 = extractelement <2 x i32> %27, i32 1
  %33 = getelementptr inbounds i8, i8* %2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 1, !tbaa !871
  %35 = extractelement <2 x i32> %30, i32 0
  %36 = bitcast i8* %28 to i32*
  store i32 %35, i32* %36, align 1, !tbaa !871
  %37 = extractelement <2 x i32> %30, i32 1
  %38 = getelementptr inbounds i8, i8* %2, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 %37, i32* %39, align 1, !tbaa !871
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSBEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %4, i8 zeroext %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSWEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i16*
  %7 = load i16, i16* %6, align 8, !tbaa !869
  %8 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %4, i16 zeroext %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSDEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i32*
  %7 = load i32, i32* %6, align 8, !tbaa !877
  %8 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %4, i32 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 4, i64 -4
  %13 = add i64 %12, %4
  store i64 %13, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSTOSQEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %4, i64 %6) #22
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1, !tbaa !882
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 8, i64 -8
  %12 = add i64 %11, %4
  store i64 %12, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i8*
  %7 = load i8, i8* %6, align 8, !tbaa !875
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %9 = sub i8 %7, %8
  %10 = icmp ult i8 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = zext i8 %9 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i8 %8, %7
  %20 = xor i8 %19, %9
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i8 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %9, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i8 %7, 7
  %30 = lshr i8 %8, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %38 = load i8, i8* %37, align 1, !tbaa !882
  %39 = icmp eq i8 %38, 0
  %40 = select i1 %39, i64 1, i64 -1
  %41 = add i64 %40, %4
  store i64 %41, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i16*
  %7 = load i16, i16* %6, align 8, !tbaa !869
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %9 = sub i16 %7, %8
  %10 = icmp ult i16 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i16 %9, 255
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i16 %8, %7
  %21 = xor i16 %20, %9
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i16 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %9, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i16 %7, 15
  %33 = lshr i16 %8, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %41 = load i8, i8* %40, align 1, !tbaa !882
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i64 2, i64 -2
  %44 = add i64 %43, %4
  store i64 %44, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i32*
  %7 = load i32, i32* %6, align 8, !tbaa !877
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %9 = sub i32 %7, %8
  %10 = icmp ult i32 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i32 %8, %7
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i32 %7, 31
  %32 = lshr i32 %8, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %40 = load i8, i8* %39, align 1, !tbaa !882
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i64 4, i64 -4
  %43 = add i64 %42, %4
  store i64 %43, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoSCASQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = sub i64 %6, %7
  %9 = icmp ult i64 %6, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1, !tbaa !850
  %12 = trunc i64 %8 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i64 %7, %6
  %20 = xor i64 %19, %8
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i64 %8, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i64 %8, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i64 %6, 63
  %32 = lshr i64 %7, 63
  %33 = xor i64 %32, %31
  %34 = xor i64 %28, %31
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %40 = load i8, i8* %39, align 1, !tbaa !882
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i64 8, i64 -8
  %43 = add i64 %42, %4
  store i64 %43, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i8*
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  store i8 %7, i8* %6, align 1, !tbaa !868
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1, !tbaa !882
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 1, i64 -1
  %12 = add i64 %11, %4
  store i64 %12, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %6 = bitcast %union.Flags* %5 to i16*
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  store i16 %7, i16* %6, align 2, !tbaa !869
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1, !tbaa !882
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 2, i64 -2
  %12 = add i64 %11, %4
  store i64 %12, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %5, align 8, !tbaa !870
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1, !tbaa !882
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 4, i64 -4
  %12 = add i64 %11, %4
  store i64 %12, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoLODSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %6 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  store i64 %6, i64* %5, align 8, !tbaa !870
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %8 = load i8, i8* %7, align 1, !tbaa !882
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i64 8, i64 -8
  %11 = add i64 %10, %4
  store i64 %11, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %0, i64 %6, i8 zeroext %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = add i64 %12, %6
  %14 = add i64 %12, %4
  store i64 %13, i64* %5, align 8, !tbaa !870
  store i64 %14, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %6, i16 zeroext %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = add i64 %12, %6
  %14 = add i64 %12, %4
  store i64 %13, i64* %5, align 8, !tbaa !870
  store i64 %14, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %6, i32 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 4, i64 -4
  %13 = add i64 %12, %6
  %14 = add i64 %12, %4
  store i64 %13, i64* %5, align 8, !tbaa !870
  store i64 %14, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoMOVSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %6, i64 %7) #22
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 8, i64 -8
  %13 = add i64 %12, %6
  %14 = add i64 %12, %4
  store i64 %13, i64* %5, align 8, !tbaa !870
  store i64 %14, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %8
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %4) #22
  %8 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %6) #22
  %9 = sub i8 %7, %8
  %10 = icmp ult i8 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = zext i8 %9 to i32
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i8 %8, %7
  %20 = xor i8 %19, %9
  %21 = lshr i8 %20, 4
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1, !tbaa !864
  %24 = icmp eq i8 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1, !tbaa !865
  %27 = lshr i8 %9, 7
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1, !tbaa !866
  %29 = lshr i8 %7, 7
  %30 = lshr i8 %8, 7
  %31 = xor i8 %30, %29
  %32 = xor i8 %27, %29
  %33 = add nuw nsw i8 %32, %31
  %34 = icmp eq i8 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !867
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %38 = load i8, i8* %37, align 1, !tbaa !882
  %39 = icmp eq i8 %38, 0
  %40 = select i1 %39, i64 1, i64 -1
  %41 = add i64 %40, %4
  %42 = add i64 %40, %6
  store i64 %42, i64* %5, align 8, !tbaa !870
  store i64 %41, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %8 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %6) #22
  %9 = sub i16 %7, %8
  %10 = icmp ult i16 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i16 %9, 255
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i16 %8, %7
  %21 = xor i16 %20, %9
  %22 = lshr i16 %21, 4
  %23 = trunc i16 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i16 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i16 %9, 15
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i16 %7, 15
  %33 = lshr i16 %8, 15
  %34 = xor i16 %33, %32
  %35 = xor i16 %29, %32
  %36 = add nuw nsw i16 %35, %34
  %37 = icmp eq i16 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %41 = load i8, i8* %40, align 1, !tbaa !882
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i64 2, i64 -2
  %44 = add i64 %43, %4
  %45 = add i64 %43, %6
  store i64 %45, i64* %5, align 8, !tbaa !870
  store i64 %44, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %8 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %6) #22
  %9 = sub i32 %7, %8
  %10 = icmp ult i32 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #23
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1, !tbaa !863
  %19 = xor i32 %8, %7
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !864
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !865
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !866
  %31 = lshr i32 %7, 31
  %32 = lshr i32 %8, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !867
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %40 = load i8, i8* %39, align 1, !tbaa !882
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i64 4, i64 -4
  %43 = add i64 %42, %4
  %44 = add i64 %42, %6
  store i64 %44, i64* %5, align 8, !tbaa !870
  store i64 %43, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoCMPSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !870
  %7 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %4) #22
  %8 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %6) #22
  %9 = sub i64 %7, %8
  %10 = icmp ult i64 %7, %8
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !850
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #23
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !863
  %20 = xor i64 %8, %7
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !864
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !865
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !866
  %32 = lshr i64 %7, 63
  %33 = lshr i64 %8, 63
  %34 = xor i64 %33, %32
  %35 = xor i64 %29, %32
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !867
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %41 = load i8, i8* %40, align 1, !tbaa !882
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i64 8, i64 -8
  %44 = add i64 %43, %4
  %45 = add i64 %43, %6
  store i64 %45, i64* %5, align 8, !tbaa !870
  store i64 %44, i64* %3, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %21, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = load i64, i64* %7, align 8, !tbaa !870
  %14 = add i64 %4, -1
  %15 = mul i64 %12, %14
  %16 = mul i64 %12, %4
  %17 = bitcast %union.Flags* %8 to i8*
  %18 = add i64 %13, %15
  %19 = add i64 %13, %16
  %20 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %18) #22
  store i64 %19, i64* %7, align 8, !tbaa !870
  store i8 %20, i8* %17, align 1, !tbaa !868
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %21

; <label>:21:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %21, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = load i64, i64* %7, align 8, !tbaa !870
  %14 = add i64 %4, -1
  %15 = mul i64 %12, %14
  %16 = mul i64 %12, %4
  %17 = bitcast %union.Flags* %8 to i16*
  %18 = add i64 %13, %15
  %19 = add i64 %13, %16
  %20 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %18) #22
  store i64 %19, i64* %7, align 8, !tbaa !870
  store i16 %20, i16* %17, align 2, !tbaa !869
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %21

; <label>:21:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %21, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1, !tbaa !882
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 4, i64 -4
  %12 = load i64, i64* %7, align 8, !tbaa !870
  %13 = add i64 %4, -1
  %14 = mul i64 %11, %13
  %15 = mul i64 %11, %4
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %17 = add i64 %12, %14
  %18 = add i64 %12, %15
  %19 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %17) #22
  %20 = zext i32 %19 to i64
  store i64 %18, i64* %7, align 8, !tbaa !870
  store i64 %20, i64* %16, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %21

; <label>:21:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_LODSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %20, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %9 = load i8, i8* %8, align 1, !tbaa !882
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i64 8, i64 -8
  %12 = load i64, i64* %7, align 8, !tbaa !870
  %13 = add i64 %4, -1
  %14 = mul i64 %11, %13
  %15 = mul i64 %11, %4
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %17 = add i64 %12, %14
  %18 = add i64 %12, %15
  %19 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %17) #22
  store i64 %18, i64* %7, align 8, !tbaa !870
  store i64 %19, i64* %16, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %20

; <label>:20:                                     ; preds = %6, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSBEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %30, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 1, i64 -1
  %13 = load i64, i64* %7, align 8, !tbaa !870
  %14 = load i64, i64* %8, align 8, !tbaa !870
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %24, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %25, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %26, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %23, %17 ]
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %21, i64 %19) #22
  %23 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %21, i64 %18, i8 zeroext %22) #22
  %24 = add i64 %12, %18
  %25 = add i64 %12, %19
  %26 = add i64 %20, -1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %17

; <label>:28:                                     ; preds = %17
  %29 = add i64 %13, %15
  store i64 %29, i64* %7, align 8, !tbaa !870
  store i64 %16, i64* %8, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %30

; <label>:30:                                     ; preds = %28, %2
  %31 = phi %struct.Memory* [ %23, %28 ], [ %0, %2 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSWEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %30, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 2, i64 -2
  %13 = load i64, i64* %7, align 8, !tbaa !870
  %14 = load i64, i64* %8, align 8, !tbaa !870
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %24, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %25, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %26, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %23, %17 ]
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %21, i64 %19) #22
  %23 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %21, i64 %18, i16 zeroext %22) #22
  %24 = add i64 %12, %18
  %25 = add i64 %12, %19
  %26 = add i64 %20, -1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %17

; <label>:28:                                     ; preds = %17
  %29 = add i64 %13, %15
  store i64 %29, i64* %7, align 8, !tbaa !870
  store i64 %16, i64* %8, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %30

; <label>:30:                                     ; preds = %28, %2
  %31 = phi %struct.Memory* [ %23, %28 ], [ %0, %2 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSDEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %30, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 4, i64 -4
  %13 = load i64, i64* %7, align 8, !tbaa !870
  %14 = load i64, i64* %8, align 8, !tbaa !870
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %24, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %25, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %26, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %23, %17 ]
  %22 = tail call i32 @__remill_read_memory_32(%struct.Memory* %21, i64 %19) #22
  %23 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %21, i64 %18, i32 %22) #22
  %24 = add i64 %12, %18
  %25 = add i64 %12, %19
  %26 = add i64 %20, -1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %17

; <label>:28:                                     ; preds = %17
  %29 = add i64 %13, %15
  store i64 %29, i64* %7, align 8, !tbaa !870
  store i64 %16, i64* %8, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %30

; <label>:30:                                     ; preds = %28, %2
  %31 = phi %struct.Memory* [ %23, %28 ], [ %0, %2 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_MOVSQEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %30, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %10 = load i8, i8* %9, align 1, !tbaa !882
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i64 8, i64 -8
  %13 = load i64, i64* %7, align 8, !tbaa !870
  %14 = load i64, i64* %8, align 8, !tbaa !870
  %15 = mul i64 %12, %4
  %16 = add i64 %14, %15
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %14, %6 ], [ %24, %17 ]
  %19 = phi i64 [ %13, %6 ], [ %25, %17 ]
  %20 = phi i64 [ %4, %6 ], [ %26, %17 ]
  %21 = phi %struct.Memory* [ %0, %6 ], [ %23, %17 ]
  %22 = tail call i64 @__remill_read_memory_64(%struct.Memory* %21, i64 %19) #22
  %23 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %21, i64 %18, i64 %22) #22
  %24 = add i64 %12, %18
  %25 = add i64 %12, %19
  %26 = add i64 %20, -1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %17

; <label>:28:                                     ; preds = %17
  %29 = add i64 %13, %15
  store i64 %29, i64* %7, align 8, !tbaa !870
  store i64 %16, i64* %8, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %30

; <label>:30:                                     ; preds = %28, %2
  %31 = phi %struct.Memory* [ %23, %28 ], [ %0, %2 ]
  ret %struct.Memory* %31
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSBEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %27, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i8*
  %10 = load i8, i8* %9, align 8, !tbaa !875
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %12 = load i8, i8* %11, align 1, !tbaa !882
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 1, i64 -1
  %15 = load i64, i64* %7, align 8, !tbaa !870
  %16 = mul i64 %14, %4
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %15, %6 ], [ %22, %17 ]
  %19 = phi i64 [ %4, %6 ], [ %23, %17 ]
  %20 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %21 = tail call %struct.Memory* @__remill_write_memory_8(%struct.Memory* %20, i64 %18, i8 zeroext %10) #22
  %22 = add i64 %14, %18
  %23 = add i64 %19, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

; <label>:25:                                     ; preds = %17
  %26 = add i64 %15, %16
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %27

; <label>:27:                                     ; preds = %25, %2
  %28 = phi %struct.Memory* [ %21, %25 ], [ %0, %2 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSWEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %27, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %12 = load i8, i8* %11, align 1, !tbaa !882
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 2, i64 -2
  %15 = load i64, i64* %7, align 8, !tbaa !870
  %16 = mul i64 %14, %4
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %15, %6 ], [ %22, %17 ]
  %19 = phi i64 [ %4, %6 ], [ %23, %17 ]
  %20 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %21 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %20, i64 %18, i16 zeroext %10) #22
  %22 = add i64 %14, %18
  %23 = add i64 %19, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

; <label>:25:                                     ; preds = %17
  %26 = add i64 %15, %16
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %27

; <label>:27:                                     ; preds = %25, %2
  %28 = phi %struct.Memory* [ %21, %25 ], [ %0, %2 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSDEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %27, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %12 = load i8, i8* %11, align 1, !tbaa !882
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 4, i64 -4
  %15 = load i64, i64* %7, align 8, !tbaa !870
  %16 = mul i64 %14, %4
  br label %17

; <label>:17:                                     ; preds = %17, %6
  %18 = phi i64 [ %15, %6 ], [ %22, %17 ]
  %19 = phi i64 [ %4, %6 ], [ %23, %17 ]
  %20 = phi %struct.Memory* [ %0, %6 ], [ %21, %17 ]
  %21 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %20, i64 %18, i32 %10) #22
  %22 = add i64 %14, %18
  %23 = add i64 %19, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %17

; <label>:25:                                     ; preds = %17
  %26 = add i64 %15, %16
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %27

; <label>:27:                                     ; preds = %25, %2
  %28 = phi %struct.Memory* [ %21, %25 ], [ %0, %2 ]
  ret %struct.Memory* %28
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L11DoREP_STOSQEP6MemoryR5State(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %26, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %11 = load i8, i8* %10, align 1, !tbaa !882
  %12 = icmp eq i8 %11, 0
  %13 = select i1 %12, i64 8, i64 -8
  %14 = load i64, i64* %7, align 8, !tbaa !870
  %15 = mul i64 %13, %4
  br label %16

; <label>:16:                                     ; preds = %16, %6
  %17 = phi i64 [ %14, %6 ], [ %21, %16 ]
  %18 = phi i64 [ %4, %6 ], [ %22, %16 ]
  %19 = phi %struct.Memory* [ %0, %6 ], [ %20, %16 ]
  %20 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %19, i64 %17, i64 %9) #22
  %21 = add i64 %13, %17
  %22 = add i64 %18, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %16

; <label>:24:                                     ; preds = %16
  %25 = add i64 %14, %15
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i64 0, i64* %3, align 8, !tbaa !870
  br label %26

; <label>:26:                                     ; preds = %24, %2
  %27 = phi %struct.Memory* [ %20, %24 ], [ %0, %2 ]
  ret %struct.Memory* %27
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %55, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 1, i64 -1
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %24 = sub i8 %22, %23
  %25 = icmp eq i8 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %29, %25
  br i1 %30, label %18, label %31

; <label>:31:                                     ; preds = %18
  %32 = lshr i8 %24, 7
  %33 = lshr i8 %22, 7
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i8 %22, %23
  %38 = zext i1 %37 to i8
  %39 = zext i8 %24 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i8 %23, %22
  %45 = xor i8 %44, %24
  %46 = lshr i8 %45, 4
  %47 = and i8 %46, 1
  %48 = zext i1 %25 to i8
  %49 = xor i8 %32, %33
  %50 = lshr i8 %23, 7
  %51 = xor i8 %50, %33
  %52 = add nuw nsw i8 %49, %51
  %53 = icmp eq i8 %52, 2
  %54 = zext i1 %53 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %38, i8* %9, align 1, !tbaa !850
  store i8 %43, i8* %34, align 1, !tbaa !863
  store i8 %47, i8* %10, align 1, !tbaa !864
  store i8 %48, i8* %35, align 1, !tbaa !865
  store i8 %32, i8* %11, align 1, !tbaa !866
  store i8 %54, i8* %36, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %55

; <label>:55:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %58, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 2, i64 -2
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %20) #22
  %23 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %24 = sub i16 %22, %23
  %25 = icmp eq i16 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %29, %25
  br i1 %30, label %18, label %31

; <label>:31:                                     ; preds = %18
  %32 = lshr i16 %24, 15
  %33 = lshr i16 %22, 15
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i16 %22, %23
  %38 = zext i1 %37 to i8
  %39 = and i16 %24, 255
  %40 = zext i16 %39 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i16 %23, %22
  %46 = xor i16 %45, %24
  %47 = lshr i16 %46, 4
  %48 = trunc i16 %47 to i8
  %49 = and i8 %48, 1
  %50 = zext i1 %25 to i8
  %51 = trunc i16 %32 to i8
  %52 = xor i16 %32, %33
  %53 = lshr i16 %23, 15
  %54 = xor i16 %53, %33
  %55 = add nuw nsw i16 %52, %54
  %56 = icmp eq i16 %55, 2
  %57 = zext i1 %56 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %38, i8* %9, align 1, !tbaa !850
  store i8 %44, i8* %34, align 1, !tbaa !863
  store i8 %49, i8* %10, align 1, !tbaa !864
  store i8 %50, i8* %35, align 1, !tbaa !865
  store i8 %51, i8* %11, align 1, !tbaa !866
  store i8 %57, i8* %36, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %58

; <label>:58:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %57, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 4, i64 -4
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %20) #22
  %23 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %24 = sub i32 %22, %23
  %25 = icmp eq i32 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %29, %25
  br i1 %30, label %18, label %31

; <label>:31:                                     ; preds = %18
  %32 = lshr i32 %24, 31
  %33 = lshr i32 %22, 31
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i32 %22, %23
  %38 = zext i1 %37 to i8
  %39 = and i32 %24, 255
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i32 %23, %22
  %45 = xor i32 %44, %24
  %46 = lshr i32 %45, 4
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = zext i1 %25 to i8
  %50 = trunc i32 %32 to i8
  %51 = xor i32 %32, %33
  %52 = lshr i32 %23, 31
  %53 = xor i32 %52, %33
  %54 = add nuw nsw i32 %51, %53
  %55 = icmp eq i32 %54, 2
  %56 = zext i1 %55 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %38, i8* %9, align 1, !tbaa !850
  store i8 %43, i8* %34, align 1, !tbaa !863
  store i8 %48, i8* %10, align 1, !tbaa !864
  store i8 %49, i8* %35, align 1, !tbaa !865
  store i8 %50, i8* %11, align 1, !tbaa !866
  store i8 %56, i8* %36, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %57

; <label>:57:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_CMPSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %58, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 8, i64 -8
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %20) #22
  %23 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %19) #22
  %24 = sub i64 %22, %23
  %25 = icmp eq i64 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %29, %25
  br i1 %30, label %18, label %31

; <label>:31:                                     ; preds = %18
  %32 = lshr i64 %24, 63
  %33 = lshr i64 %22, 63
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %37 = icmp ult i64 %22, %23
  %38 = zext i1 %37 to i8
  %39 = trunc i64 %24 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i64 %23, %22
  %46 = xor i64 %45, %24
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  %50 = zext i1 %25 to i8
  %51 = trunc i64 %32 to i8
  %52 = xor i64 %32, %33
  %53 = lshr i64 %23, 63
  %54 = xor i64 %53, %33
  %55 = add nuw nsw i64 %52, %54
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %38, i8* %9, align 1, !tbaa !850
  store i8 %44, i8* %34, align 1, !tbaa !863
  store i8 %49, i8* %10, align 1, !tbaa !864
  store i8 %50, i8* %35, align 1, !tbaa !865
  store i8 %51, i8* %11, align 1, !tbaa !866
  store i8 %57, i8* %36, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %58

; <label>:58:                                     ; preds = %31, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %53, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i8*
  %10 = load i8, i8* %9, align 8, !tbaa !875
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i8 %10, 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1, !tbaa !882
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 1, i64 -1
  %18 = load i64, i64* %7, align 8, !tbaa !870
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %25, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %26, %19 ], [ %4, %6 ]
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %23 = sub i8 %10, %22
  %24 = icmp eq i8 %23, 0
  %25 = add i64 %17, %20
  %26 = add i64 %21, -1
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %27, %24
  br i1 %28, label %19, label %29

; <label>:29:                                     ; preds = %19
  %30 = lshr i8 %23, 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp ult i8 %10, %22
  %36 = zext i1 %35 to i8
  %37 = zext i8 %23 to i32
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  %42 = xor i8 %22, %10
  %43 = xor i8 %42, %23
  %44 = lshr i8 %43, 4
  %45 = and i8 %44, 1
  %46 = zext i1 %24 to i8
  %47 = xor i8 %30, %13
  %48 = lshr i8 %22, 7
  %49 = xor i8 %48, %13
  %50 = add nuw nsw i8 %47, %49
  %51 = icmp eq i8 %50, 2
  %52 = zext i1 %51 to i8
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i8 %36, i8* %31, align 1, !tbaa !850
  store i8 %41, i8* %11, align 1, !tbaa !863
  store i8 %45, i8* %32, align 1, !tbaa !864
  store i8 %46, i8* %12, align 1, !tbaa !865
  store i8 %30, i8* %33, align 1, !tbaa !866
  store i8 %52, i8* %34, align 1, !tbaa !867
  store i64 %26, i64* %3, align 8, !tbaa !870
  br label %53

; <label>:53:                                     ; preds = %29, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %56, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i16 %10, 15
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1, !tbaa !882
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 2, i64 -2
  %18 = load i64, i64* %7, align 8, !tbaa !870
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %25, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %26, %19 ], [ %4, %6 ]
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %20) #22
  %23 = sub i16 %10, %22
  %24 = icmp eq i16 %23, 0
  %25 = add i64 %17, %20
  %26 = add i64 %21, -1
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %27, %24
  br i1 %28, label %19, label %29

; <label>:29:                                     ; preds = %19
  %30 = lshr i16 %23, 15
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp ult i16 %10, %22
  %36 = zext i1 %35 to i8
  %37 = and i16 %23, 255
  %38 = zext i16 %37 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i16 %22, %10
  %44 = xor i16 %43, %23
  %45 = lshr i16 %44, 4
  %46 = trunc i16 %45 to i8
  %47 = and i8 %46, 1
  %48 = zext i1 %24 to i8
  %49 = trunc i16 %30 to i8
  %50 = xor i16 %30, %13
  %51 = lshr i16 %22, 15
  %52 = xor i16 %51, %13
  %53 = add nuw nsw i16 %50, %52
  %54 = icmp eq i16 %53, 2
  %55 = zext i1 %54 to i8
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i8 %36, i8* %31, align 1, !tbaa !850
  store i8 %42, i8* %11, align 1, !tbaa !863
  store i8 %47, i8* %32, align 1, !tbaa !864
  store i8 %48, i8* %12, align 1, !tbaa !865
  store i8 %49, i8* %33, align 1, !tbaa !866
  store i8 %55, i8* %34, align 1, !tbaa !867
  store i64 %26, i64* %3, align 8, !tbaa !870
  br label %56

; <label>:56:                                     ; preds = %29, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %55, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i32 %10, 31
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1, !tbaa !882
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 4, i64 -4
  %18 = load i64, i64* %7, align 8, !tbaa !870
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %25, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %26, %19 ], [ %4, %6 ]
  %22 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %20) #22
  %23 = sub i32 %10, %22
  %24 = icmp eq i32 %23, 0
  %25 = add i64 %17, %20
  %26 = add i64 %21, -1
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %27, %24
  br i1 %28, label %19, label %29

; <label>:29:                                     ; preds = %19
  %30 = lshr i32 %23, 31
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp ult i32 %10, %22
  %36 = zext i1 %35 to i8
  %37 = and i32 %23, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  %42 = xor i32 %22, %10
  %43 = xor i32 %42, %23
  %44 = lshr i32 %43, 4
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = zext i1 %24 to i8
  %48 = trunc i32 %30 to i8
  %49 = xor i32 %30, %13
  %50 = lshr i32 %22, 31
  %51 = xor i32 %50, %13
  %52 = add nuw nsw i32 %49, %51
  %53 = icmp eq i32 %52, 2
  %54 = zext i1 %53 to i8
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i8 %36, i8* %31, align 1, !tbaa !850
  store i8 %41, i8* %11, align 1, !tbaa !863
  store i8 %46, i8* %32, align 1, !tbaa !864
  store i8 %47, i8* %12, align 1, !tbaa !865
  store i8 %48, i8* %33, align 1, !tbaa !866
  store i8 %54, i8* %34, align 1, !tbaa !867
  store i64 %26, i64* %3, align 8, !tbaa !870
  br label %55

; <label>:55:                                     ; preds = %29, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L12DoREPE_SCASQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %55, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = lshr i64 %9, 63
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %14 = load i8, i8* %13, align 1, !tbaa !882
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i64 8, i64 -8
  %17 = load i64, i64* %7, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %24, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %25, %18 ], [ %4, %6 ]
  %21 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %19) #22
  %22 = sub i64 %9, %21
  %23 = icmp eq i64 %22, 0
  %24 = add i64 %16, %19
  %25 = add i64 %20, -1
  %26 = icmp ne i64 %25, 0
  %27 = and i1 %26, %23
  br i1 %27, label %18, label %28

; <label>:28:                                     ; preds = %18
  %29 = lshr i64 %22, 63
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %34 = icmp ult i64 %9, %21
  %35 = zext i1 %34 to i8
  %36 = trunc i64 %22 to i32
  %37 = and i32 %36, 255
  %38 = tail call i32 @llvm.ctpop.i32(i32 %37) #23
  %39 = trunc i32 %38 to i8
  %40 = and i8 %39, 1
  %41 = xor i8 %40, 1
  %42 = xor i64 %21, %9
  %43 = xor i64 %42, %22
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = zext i1 %23 to i8
  %48 = trunc i64 %29 to i8
  %49 = xor i64 %29, %12
  %50 = lshr i64 %21, 63
  %51 = xor i64 %50, %12
  %52 = add nuw nsw i64 %49, %51
  %53 = icmp eq i64 %52, 2
  %54 = zext i1 %53 to i8
  store i64 %24, i64* %7, align 8, !tbaa !870
  store i8 %35, i8* %30, align 1, !tbaa !850
  store i8 %41, i8* %10, align 1, !tbaa !863
  store i8 %46, i8* %31, align 1, !tbaa !864
  store i8 %47, i8* %11, align 1, !tbaa !865
  store i8 %48, i8* %32, align 1, !tbaa !866
  store i8 %54, i8* %33, align 1, !tbaa !867
  store i64 %25, i64* %3, align 8, !tbaa !870
  br label %55

; <label>:55:                                     ; preds = %28, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %56, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 1, i64 -1
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %23 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %19) #22
  %24 = sub i8 %22, %23
  %25 = icmp eq i8 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = xor i1 %25, true
  %31 = and i1 %29, %30
  br i1 %31, label %18, label %32

; <label>:32:                                     ; preds = %18
  %33 = lshr i8 %24, 7
  %34 = lshr i8 %22, 7
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp ult i8 %22, %23
  %39 = zext i1 %38 to i8
  %40 = zext i8 %24 to i32
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i8 %23, %22
  %46 = xor i8 %45, %24
  %47 = lshr i8 %46, 4
  %48 = and i8 %47, 1
  %49 = zext i1 %25 to i8
  %50 = xor i8 %33, %34
  %51 = lshr i8 %23, 7
  %52 = xor i8 %51, %34
  %53 = add nuw nsw i8 %50, %52
  %54 = icmp eq i8 %53, 2
  %55 = zext i1 %54 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %39, i8* %9, align 1, !tbaa !850
  store i8 %44, i8* %35, align 1, !tbaa !863
  store i8 %48, i8* %10, align 1, !tbaa !864
  store i8 %49, i8* %36, align 1, !tbaa !865
  store i8 %33, i8* %11, align 1, !tbaa !866
  store i8 %55, i8* %37, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %56

; <label>:56:                                     ; preds = %32, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %59, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 2, i64 -2
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %20) #22
  %23 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %19) #22
  %24 = sub i16 %22, %23
  %25 = icmp eq i16 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = xor i1 %25, true
  %31 = and i1 %29, %30
  br i1 %31, label %18, label %32

; <label>:32:                                     ; preds = %18
  %33 = lshr i16 %24, 15
  %34 = lshr i16 %22, 15
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp ult i16 %22, %23
  %39 = zext i1 %38 to i8
  %40 = and i16 %24, 255
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) #23
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = xor i16 %23, %22
  %47 = xor i16 %46, %24
  %48 = lshr i16 %47, 4
  %49 = trunc i16 %48 to i8
  %50 = and i8 %49, 1
  %51 = zext i1 %25 to i8
  %52 = trunc i16 %33 to i8
  %53 = xor i16 %33, %34
  %54 = lshr i16 %23, 15
  %55 = xor i16 %54, %34
  %56 = add nuw nsw i16 %53, %55
  %57 = icmp eq i16 %56, 2
  %58 = zext i1 %57 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %39, i8* %9, align 1, !tbaa !850
  store i8 %45, i8* %35, align 1, !tbaa !863
  store i8 %50, i8* %10, align 1, !tbaa !864
  store i8 %51, i8* %36, align 1, !tbaa !865
  store i8 %52, i8* %11, align 1, !tbaa !866
  store i8 %58, i8* %37, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %59

; <label>:59:                                     ; preds = %32, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %58, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 4, i64 -4
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %20) #22
  %23 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %19) #22
  %24 = sub i32 %22, %23
  %25 = icmp eq i32 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = xor i1 %25, true
  %31 = and i1 %29, %30
  br i1 %31, label %18, label %32

; <label>:32:                                     ; preds = %18
  %33 = lshr i32 %24, 31
  %34 = lshr i32 %22, 31
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp ult i32 %22, %23
  %39 = zext i1 %38 to i8
  %40 = and i32 %24, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #23
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = xor i32 %23, %22
  %46 = xor i32 %45, %24
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = zext i1 %25 to i8
  %51 = trunc i32 %33 to i8
  %52 = xor i32 %33, %34
  %53 = lshr i32 %23, 31
  %54 = xor i32 %53, %34
  %55 = add nuw nsw i32 %52, %54
  %56 = icmp eq i32 %55, 2
  %57 = zext i1 %56 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %39, i8* %9, align 1, !tbaa !850
  store i8 %44, i8* %35, align 1, !tbaa !863
  store i8 %49, i8* %10, align 1, !tbaa !864
  store i8 %50, i8* %36, align 1, !tbaa !865
  store i8 %51, i8* %11, align 1, !tbaa !866
  store i8 %57, i8* %37, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %58

; <label>:58:                                     ; preds = %32, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_CMPSQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %59, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 9, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %13 = load i8, i8* %12, align 1, !tbaa !882
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 8, i64 -8
  %16 = load i64, i64* %7, align 8, !tbaa !870
  %17 = load i64, i64* %8, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %27, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %26, %18 ], [ %16, %6 ]
  %21 = phi i64 [ %28, %18 ], [ %4, %6 ]
  %22 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %20) #22
  %23 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %19) #22
  %24 = sub i64 %22, %23
  %25 = icmp eq i64 %24, 0
  %26 = add i64 %15, %20
  %27 = add i64 %15, %19
  %28 = add i64 %21, -1
  %29 = icmp ne i64 %28, 0
  %30 = xor i1 %25, true
  %31 = and i1 %29, %30
  br i1 %31, label %18, label %32

; <label>:32:                                     ; preds = %18
  %33 = lshr i64 %24, 63
  %34 = lshr i64 %22, 63
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %38 = icmp ult i64 %22, %23
  %39 = zext i1 %38 to i8
  %40 = trunc i64 %24 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) #23
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = xor i64 %23, %22
  %47 = xor i64 %46, %24
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = zext i1 %25 to i8
  %52 = trunc i64 %33 to i8
  %53 = xor i64 %33, %34
  %54 = lshr i64 %23, 63
  %55 = xor i64 %54, %34
  %56 = add nuw nsw i64 %53, %55
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  store i64 %26, i64* %7, align 8, !tbaa !870
  store i64 %27, i64* %8, align 8, !tbaa !870
  store i8 %39, i8* %9, align 1, !tbaa !850
  store i8 %45, i8* %35, align 1, !tbaa !863
  store i8 %50, i8* %10, align 1, !tbaa !864
  store i8 %51, i8* %36, align 1, !tbaa !865
  store i8 %52, i8* %11, align 1, !tbaa !866
  store i8 %58, i8* %37, align 1, !tbaa !867
  store i64 %28, i64* %3, align 8, !tbaa !870
  br label %59

; <label>:59:                                     ; preds = %32, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASBEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %54, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i8*
  %10 = load i8, i8* %9, align 8, !tbaa !875
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i8 %10, 7
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1, !tbaa !882
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 1, i64 -1
  %18 = load i64, i64* %7, align 8, !tbaa !870
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %25, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %26, %19 ], [ %4, %6 ]
  %22 = tail call zeroext i8 @__remill_read_memory_8(%struct.Memory* %0, i64 %20) #22
  %23 = sub i8 %10, %22
  %24 = icmp eq i8 %23, 0
  %25 = add i64 %17, %20
  %26 = add i64 %21, -1
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %24, true
  %29 = and i1 %27, %28
  br i1 %29, label %19, label %30

; <label>:30:                                     ; preds = %19
  %31 = lshr i8 %23, 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i8 %10, %22
  %37 = zext i1 %36 to i8
  %38 = zext i8 %23 to i32
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i8 %22, %10
  %44 = xor i8 %43, %23
  %45 = lshr i8 %44, 4
  %46 = and i8 %45, 1
  %47 = zext i1 %24 to i8
  %48 = xor i8 %31, %13
  %49 = lshr i8 %22, 7
  %50 = xor i8 %49, %13
  %51 = add nuw nsw i8 %48, %50
  %52 = icmp eq i8 %51, 2
  %53 = zext i1 %52 to i8
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i8 %37, i8* %32, align 1, !tbaa !850
  store i8 %42, i8* %11, align 1, !tbaa !863
  store i8 %46, i8* %33, align 1, !tbaa !864
  store i8 %47, i8* %12, align 1, !tbaa !865
  store i8 %31, i8* %34, align 1, !tbaa !866
  store i8 %53, i8* %35, align 1, !tbaa !867
  store i64 %26, i64* %3, align 8, !tbaa !870
  br label %54

; <label>:54:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASWEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %57, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i16*
  %10 = load i16, i16* %9, align 8, !tbaa !869
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i16 %10, 15
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1, !tbaa !882
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 2, i64 -2
  %18 = load i64, i64* %7, align 8, !tbaa !870
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %25, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %26, %19 ], [ %4, %6 ]
  %22 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %20) #22
  %23 = sub i16 %10, %22
  %24 = icmp eq i16 %23, 0
  %25 = add i64 %17, %20
  %26 = add i64 %21, -1
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %24, true
  %29 = and i1 %27, %28
  br i1 %29, label %19, label %30

; <label>:30:                                     ; preds = %19
  %31 = lshr i16 %23, 15
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i16 %10, %22
  %37 = zext i1 %36 to i8
  %38 = and i16 %23, 255
  %39 = zext i16 %38 to i32
  %40 = tail call i32 @llvm.ctpop.i32(i32 %39) #23
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = xor i16 %22, %10
  %45 = xor i16 %44, %23
  %46 = lshr i16 %45, 4
  %47 = trunc i16 %46 to i8
  %48 = and i8 %47, 1
  %49 = zext i1 %24 to i8
  %50 = trunc i16 %31 to i8
  %51 = xor i16 %31, %13
  %52 = lshr i16 %22, 15
  %53 = xor i16 %52, %13
  %54 = add nuw nsw i16 %51, %53
  %55 = icmp eq i16 %54, 2
  %56 = zext i1 %55 to i8
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i8 %37, i8* %32, align 1, !tbaa !850
  store i8 %43, i8* %11, align 1, !tbaa !863
  store i8 %48, i8* %33, align 1, !tbaa !864
  store i8 %49, i8* %12, align 1, !tbaa !865
  store i8 %50, i8* %34, align 1, !tbaa !866
  store i8 %56, i8* %35, align 1, !tbaa !867
  store i64 %26, i64* %3, align 8, !tbaa !870
  br label %57

; <label>:57:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASDEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %56, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0
  %9 = bitcast %union.Flags* %8 to i32*
  %10 = load i32, i32* %9, align 8, !tbaa !877
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %13 = lshr i32 %10, 31
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %15 = load i8, i8* %14, align 1, !tbaa !882
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i64 4, i64 -4
  %18 = load i64, i64* %7, align 8, !tbaa !870
  br label %19

; <label>:19:                                     ; preds = %19, %6
  %20 = phi i64 [ %25, %19 ], [ %18, %6 ]
  %21 = phi i64 [ %26, %19 ], [ %4, %6 ]
  %22 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %20) #22
  %23 = sub i32 %10, %22
  %24 = icmp eq i32 %23, 0
  %25 = add i64 %17, %20
  %26 = add i64 %21, -1
  %27 = icmp ne i64 %26, 0
  %28 = xor i1 %24, true
  %29 = and i1 %27, %28
  br i1 %29, label %19, label %30

; <label>:30:                                     ; preds = %19
  %31 = lshr i32 %23, 31
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %36 = icmp ult i32 %10, %22
  %37 = zext i1 %36 to i8
  %38 = and i32 %23, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i32 %22, %10
  %44 = xor i32 %43, %23
  %45 = lshr i32 %44, 4
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = zext i1 %24 to i8
  %49 = trunc i32 %31 to i8
  %50 = xor i32 %31, %13
  %51 = lshr i32 %22, 31
  %52 = xor i32 %51, %13
  %53 = add nuw nsw i32 %50, %52
  %54 = icmp eq i32 %53, 2
  %55 = zext i1 %54 to i8
  store i64 %25, i64* %7, align 8, !tbaa !870
  store i8 %37, i8* %32, align 1, !tbaa !850
  store i8 %42, i8* %11, align 1, !tbaa !863
  store i8 %47, i8* %33, align 1, !tbaa !864
  store i8 %48, i8* %12, align 1, !tbaa !865
  store i8 %49, i8* %34, align 1, !tbaa !866
  store i8 %55, i8* %35, align 1, !tbaa !867
  store i64 %26, i64* %3, align 8, !tbaa !870
  br label %56

; <label>:56:                                     ; preds = %30, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoREPNE_SCASQEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !870
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %56, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 11, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !870
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %12 = lshr i64 %9, 63
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 11
  %14 = load i8, i8* %13, align 1, !tbaa !882
  %15 = icmp eq i8 %14, 0
  %16 = select i1 %15, i64 8, i64 -8
  %17 = load i64, i64* %7, align 8, !tbaa !870
  br label %18

; <label>:18:                                     ; preds = %18, %6
  %19 = phi i64 [ %24, %18 ], [ %17, %6 ]
  %20 = phi i64 [ %25, %18 ], [ %4, %6 ]
  %21 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %19) #22
  %22 = sub i64 %9, %21
  %23 = icmp eq i64 %22, 0
  %24 = add i64 %16, %19
  %25 = add i64 %20, -1
  %26 = icmp ne i64 %25, 0
  %27 = xor i1 %23, true
  %28 = and i1 %26, %27
  br i1 %28, label %18, label %29

; <label>:29:                                     ; preds = %18
  %30 = lshr i64 %22, 63
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  %35 = icmp ult i64 %9, %21
  %36 = zext i1 %35 to i8
  %37 = trunc i64 %22 to i32
  %38 = and i32 %37, 255
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #23
  %40 = trunc i32 %39 to i8
  %41 = and i8 %40, 1
  %42 = xor i8 %41, 1
  %43 = xor i64 %21, %9
  %44 = xor i64 %43, %22
  %45 = lshr i64 %44, 4
  %46 = trunc i64 %45 to i8
  %47 = and i8 %46, 1
  %48 = zext i1 %23 to i8
  %49 = trunc i64 %30 to i8
  %50 = xor i64 %30, %12
  %51 = lshr i64 %21, 63
  %52 = xor i64 %51, %12
  %53 = add nuw nsw i64 %50, %52
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  store i64 %24, i64* %7, align 8, !tbaa !870
  store i8 %36, i8* %31, align 1, !tbaa !850
  store i8 %42, i8* %10, align 1, !tbaa !863
  store i8 %47, i8* %32, align 1, !tbaa !864
  store i8 %48, i8* %11, align 1, !tbaa !865
  store i8 %49, i8* %33, align 1, !tbaa !866
  store i8 %55, i8* %34, align 1, !tbaa !867
  store i64 %25, i64* %3, align 8, !tbaa !870
  br label %56

; <label>:56:                                     ; preds = %29, %2
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoSYSCALLEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 7, i32* %3, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L13DoSYSCALL_AMDEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 7, i32* %3, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L10DoSYSENTEREP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 9, i32* %3, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoSYSEXITEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 0, i32 0
  store i32 10, i32* %3, align 16, !tbaa !844
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoRDTSCEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 259) #21
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoRDTSCPEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = tail call %struct.Memory* @__remill_sync_hyper_call(%struct.State* nonnull dereferenceable(2688) %1, %struct.Memory* %0, i32 260) #21
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2MnImEEEP6MemoryS4_R5StateT_(%struct.Memory* returned, %struct.State* nocapture dereferenceable(2688), i64) #0 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %2) #22
  store i64 %5, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), i64) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2, i64* %4, align 8, !tbaa !870
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FILDI2MnItEEEP6MemoryS4_R5State3RnWIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, i64) #0 {
  %5 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %3) #22
  %6 = sitofp i16 %5 to double
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %11 = bitcast double* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %8, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  store double %6, double* %27, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FILDI2MnIjEEEP6MemoryS4_R5State3RnWIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, i64) #0 {
  %5 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %3) #22
  %6 = sitofp i32 %5 to double
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %11 = bitcast double* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %8, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  store double %6, double* %27, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FILDI2MnImEEEP6MemoryS4_R5State3RnWIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, i64) #0 {
  %5 = tail call i64 @__remill_read_memory_64(%struct.Memory* %0, i64 %3) #22
  %6 = sitofp i64 %5 to double
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %11 = bitcast double* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %8, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  store double %6, double* %27, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FLDI2MnIfEEEP6MemoryS4_R5State3RnWIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = fpext float %5 to double
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %11 = bitcast double* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %8, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  store double %6, double* %27, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FLDI2RnIdEEEP6MemoryS4_R5State3RnWIdET_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %6 = bitcast double* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %9 = bitcast double* %8 to i64*
  store i64 %7, i64* %9, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %6, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  store double %3, double* %25, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FLDI2MnIdEEEP6MemoryS4_R5State3RnWIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %10 = bitcast double* %9 to i64*
  store i64 %8, i64* %10, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %7, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  store double %5, double* %26, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FLDI2MnI9float80_tEEEP6MemoryS5_R5State3RnWIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture readnone, i64) #0 {
  %5 = tail call double @__remill_read_memory_f80(%struct.Memory* %0, i64 %3) #25
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %10 = bitcast double* %9 to i64*
  store i64 %8, i64* %10, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %7, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  store double %5, double* %26, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #3

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDLN2EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 0x3FE62E42FEFA39EF, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFLD1EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 1.000000e+00, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFLDZEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 0.000000e+00, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDLG2EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 0x3FD34413509F79FF, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDL2TEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 0x400A934F0979A371, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFLDL2EEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 0x3FF71547652B82FE, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFLDPIEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %7 = bitcast double* %6 to i64*
  store i64 %5, i64* %7, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %4, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double 0x400921FB54442D18, double* %23, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FPU_NOPEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688)) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFWAITEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688)) #0 {
  %3 = tail call i32 @fetestexcept(i32 61) #21
  %4 = tail call i32 @feraiseexcept(i32 %3) #21
  ret %struct.Memory* %0
}

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #11

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #11

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFNCLEXEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688)) #0 {
  %3 = tail call i32 @feclearexcept(i32 61) #21
  ret %struct.Memory* %0
}

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #11

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFABSEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @llvm.fabs.f64(double %4) #23
  store double %5, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFCHSEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = fsub double -0.000000e+00, %4
  store double %5, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFCOSEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @cos(double %4) #24
  store double %5, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFSINEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @sin(double %4) #24
  store double %5, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFPTANEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @tan(double %4) #24
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %10 = bitcast double* %9 to i64*
  store i64 %8, i64* %10, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %7, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  store double %5, double* %23, align 8, !tbaa !886
  store double 1.000000e+00, double* %3, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFPATANEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %6 = load double, double* %5, align 8, !tbaa !886
  %7 = fdiv double %4, %6
  %8 = tail call double @atan(double %7) #24
  %9 = bitcast double* %3 to i64*
  store double %8, double* %5, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %9, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  store double %6, double* %25, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFSQRTEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @sqrt(double %4) #24
  store double %5, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFSINCOSEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @sin(double %4) #24
  %6 = tail call double @cos(double %4) #24
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %11 = bitcast double* %10 to i64*
  store i64 %9, i64* %11, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %8, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  store double %5, double* %24, align 8, !tbaa !886
  store double %6, double* %3, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFSCALEEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @llvm.trunc.f64(double %4)
  %6 = tail call double @exp2(double %5) #24
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = load double, double* %7, align 8, !tbaa !886
  %9 = fmul double %6, %8
  store double %9, double* %7, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoF2XM1EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @exp2(double %4) #24
  %6 = fadd double %5, -1.000000e+00
  store double %6, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFPREMEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %6 = load double, double* %5, align 8, !tbaa !886
  %7 = frem double %4, %6
  store double %7, double* %3, align 8, !tbaa !873
  %8 = fdiv double %4, %6
  %9 = tail call double @llvm.trunc.f64(double %8) #23
  %10 = fptosi double %9 to i64
  %11 = icmp slt i64 %10, 0
  %12 = sub nsw i64 0, %10
  %13 = select i1 %11, i64 %12, i64 %10
  %14 = trunc i64 %13 to i8
  %15 = lshr i64 %13, 2
  %16 = trunc i64 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !895
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %19, align 1, !tbaa !896
  %20 = and i8 %14, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !897
  %22 = lshr i64 %13, 1
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !898
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoFPREM1EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %6 = load double, double* %5, align 8, !tbaa !886
  %7 = tail call double @remainder(double %4, double %6) #24
  store double %7, double* %3, align 8, !tbaa !873
  %8 = fdiv double %4, %6
  %9 = tail call double @llvm.fabs.f64(double %8) #23
  %10 = fcmp ogt double %9, 0x43E0000000000000
  %11 = fptosi double %8 to i64
  %12 = select i1 %10, i64 -9223372036854775808, i64 %11
  %13 = icmp slt i64 %12, 0
  %14 = sub nsw i64 0, %12
  %15 = select i1 %13, i64 %14, i64 %12
  %16 = trunc i64 %15 to i8
  %17 = lshr i64 %15, 2
  %18 = trunc i64 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !895
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %21, align 1, !tbaa !896
  %22 = and i8 %16, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !897
  %24 = lshr i64 %15, 1
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !898
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSUBI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %7 = fpext float %6 to double
  %8 = fsub double %3, %7
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSUBI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %7 = fsub double %3, %6
  store double %7, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSUBI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fsub double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FSUBPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fsub double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  store i64 %9, i64* %29, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FSUBRI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %7 = fpext float %6 to double
  %8 = fsub double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FSUBRI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %7 = fsub double %6, %3
  store double %7, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FSUBRI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fsub double %4, %3
  store double %6, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FSUBRPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fsub double %4, %3
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  store i64 %9, i64* %29, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FISUBI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i32 %6 to double
  %8 = fsub double %3, %7
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FISUBI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i16 %6 to double
  %8 = fsub double %3, %7
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FISUBRI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i32 %6 to double
  %8 = fsub double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FISUBRI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i16 %6 to double
  %8 = fsub double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FADDI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %7 = fpext float %6 to double
  %8 = fadd double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %9, align 1, !tbaa !895
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %10, align 1, !tbaa !896
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %11, align 1, !tbaa !898
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FADDI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #0 {
  %6 = fadd double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %7, align 1, !tbaa !895
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %8, align 1, !tbaa !896
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %9, align 1, !tbaa !898
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FADDI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %7 = fadd double %6, %3
  store double %7, double* %2, align 8, !tbaa !873
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %8, align 1, !tbaa !895
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %9, align 1, !tbaa !896
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %10, align 1, !tbaa !898
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FADDPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #0 {
  %6 = fadd double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 0, i8* %7, align 1, !tbaa !895
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %8, align 1, !tbaa !896
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %9, align 1, !tbaa !898
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %32 = bitcast double* %31 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !886
  store i64 %33, i64* %29, align 8, !tbaa !886
  store i64 %12, i64* %32, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIADDI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i32 %6 to double
  %8 = fadd double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIADDI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i16 %6 to double
  %8 = fadd double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FMULI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %7 = fpext float %6 to double
  %8 = fmul double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FMULI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fmul double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FMULI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %7 = fmul double %6, %3
  store double %7, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FMULPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fmul double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  store i64 %9, i64* %29, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIMULI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIMULI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i16 %6 to double
  %8 = fmul double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FDIVI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %7 = fpext float %6 to double
  %8 = fdiv double %3, %7
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FDIVI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %7 = fdiv double %3, %6
  store double %7, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FDIVI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fdiv double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FDIVPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fdiv double %3, %4
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  store i64 %9, i64* %29, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FDIVRI2MnIfEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %4) #22
  %7 = fpext float %6 to double
  %8 = fdiv double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FDIVRI2MnIdEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %4) #22
  %7 = fdiv double %6, %3
  store double %7, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FDIVRI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fdiv double %4, %3
  store double %6, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FDIVRPI2RnIdEEEP6MemoryS4_R5State3RnWIdES2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double, double) #2 {
  %6 = fdiv double %4, %3
  store double %6, double* %2, align 8, !tbaa !873
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  store i64 %9, i64* %29, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIDIVI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i32 %6 to double
  %8 = fdiv double %3, %7
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FIDIVI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i16 %6 to double
  %8 = fdiv double %3, %7
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FIDIVRI2MnIjEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call i32 @__remill_read_memory_32(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i32 %6 to double
  %8 = fdiv double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FIDIVRI2MnItEEEP6MemoryS4_R5State3RnWIdE2RnIdET_(%struct.Memory* returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, i64) #0 {
  %6 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %4) #22
  %7 = sitofp i16 %6 to double
  %8 = fdiv double %7, %3
  store double %8, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSTPI3MnWIfEEEP6MemoryS4_R5StateT_2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = fptrunc double %3 to float
  %6 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %0, i64 %2, float %5) #22
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  store i64 %9, i64* %29, align 8, !tbaa !886
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSTPI3MnWI9float80_tEEEP6MemoryS5_R5StateT_2RnIdE(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call %struct.Memory* @__remill_write_memory_f80(%struct.Memory* %0, i64 %2, double %3) #25
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !886
  store i64 %11, i64* %7, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %10, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  store i64 %8, i64* %28, align 8, !tbaa !886
  ret %struct.Memory* %5
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #3

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSTPI3MnWIdEEEP6MemoryS4_R5StateT_2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %0, i64 %2, double %3) #22
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !886
  store i64 %11, i64* %7, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %10, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  store i64 %8, i64* %28, align 8, !tbaa !886
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FSTPI3RnWIdEEEP6MemoryS4_R5StateT_2RnIdE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double* nocapture, double) #2 {
  store double %3, double* %2, align 8, !tbaa !873
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %6 = bitcast double* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !886
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %9 = bitcast double* %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !886
  store i64 %10, i64* %6, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %9, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  store i64 %7, i64* %27, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FSTI3MnWIfEEEP6MemoryS4_R5StateT_2RnIdE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, double) #8 {
  %5 = fptrunc double %3 to float
  %6 = tail call %struct.Memory* @__remill_write_memory_f32(%struct.Memory* %0, i64 %2, float %5) #22
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FSTI3MnWIdEEEP6MemoryS4_R5StateT_2RnIdE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, double) #8 {
  %5 = tail call %struct.Memory* @__remill_write_memory_f64(%struct.Memory* %0, i64 %2, double %3) #22
  ret %struct.Memory* %5
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L3FSTI3RnWIdEEEP6MemoryS4_R5StateT_2RnIdE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double) #2 {
  store double %3, double* %2, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FISTm16EP6MemoryR5State3MnWItE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, double) #8 {
  %5 = tail call double @llvm.nearbyint.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 3.276700e+04
  %8 = fptosi double %5 to i16
  %9 = select i1 %7, i16 -32768, i16 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %9) #22
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FISTm32EP6MemoryR5State3MnWIjE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64, double) #8 {
  %5 = tail call double @llvm.nearbyint.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fptosi double %5 to i32
  %9 = select i1 %7, i32 -2147483648, i32 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %9) #22
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FISTPm16EP6MemoryR5State3MnWItE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call double @llvm.nearbyint.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 3.276700e+04
  %8 = fptosi double %5 to i16
  %9 = select i1 %7, i16 -32768, i16 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  store i64 %13, i64* %33, align 8, !tbaa !886
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FISTPm32EP6MemoryR5State3MnWIjE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call double @llvm.nearbyint.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fptosi double %5 to i32
  %9 = select i1 %7, i32 -2147483648, i32 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  store i64 %13, i64* %33, align 8, !tbaa !886
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8FISTPm64EP6MemoryR5State3MnWImE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call double @llvm.nearbyint.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 0x43E0000000000000
  %8 = fptosi double %5 to i64
  %9 = select i1 %7, i64 -9223372036854775808, i64 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  store i64 %13, i64* %33, align 8, !tbaa !886
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFDECSTPEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  store i64 %8, i64* %4, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !886
  store i64 %11, i64* %7, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %10, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  store i64 %5, i64* %25, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFINCSTPEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = bitcast double* %3 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !886
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %7 = bitcast double* %6 to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !886
  store i64 %8, i64* %4, align 8, !tbaa !886
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !886
  store i64 %11, i64* %7, align 8, !tbaa !886
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %13 = bitcast double* %12 to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !886
  store i64 %14, i64* %10, align 8, !tbaa !886
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %16 = bitcast double* %15 to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !886
  store i64 %17, i64* %13, align 8, !tbaa !886
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !886
  store i64 %20, i64* %16, align 8, !tbaa !886
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %22 = bitcast double* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !886
  store i64 %23, i64* %19, align 8, !tbaa !886
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  store i64 %26, i64* %22, align 8, !tbaa !886
  store i64 %5, i64* %25, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9FISTTPm16EP6MemoryR5State3MnWItE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call double @llvm.trunc.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 3.276700e+04
  %8 = fptosi double %5 to i16
  %9 = select i1 %7, i16 -32768, i16 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  store i64 %13, i64* %33, align 8, !tbaa !886
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9FISTTPm32EP6MemoryR5State3MnWIjE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call double @llvm.trunc.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fptosi double %5 to i32
  %9 = select i1 %7, i32 -2147483648, i32 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_32(%struct.Memory* %0, i64 %2, i32 %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  store i64 %13, i64* %33, align 8, !tbaa !886
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9FISTTPm64EP6MemoryR5State3MnWImE2RnIdE(%struct.Memory* readnone, %struct.State* nocapture dereferenceable(2688), i64, double) #0 {
  %5 = tail call double @llvm.trunc.f64(double %3) #23
  %6 = tail call double @llvm.fabs.f64(double %5) #23
  %7 = fcmp ogt double %6, 0x43E0000000000000
  %8 = fptosi double %5 to i64
  %9 = select i1 %7, i64 -9223372036854775808, i64 %8
  %10 = tail call %struct.Memory* @__remill_write_memory_64(%struct.Memory* %0, i64 %2, i64 %9) #22
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  store i64 %13, i64* %33, align 8, !tbaa !886
  ret %struct.Memory* %10
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L4FXCHEP6MemoryR5State3RnWIdE2RnIdES5_S7_(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double* nocapture, double, double* nocapture, double) #2 {
  store double %5, double* %2, align 8, !tbaa !873
  store double %3, double* %4, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFXAMEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = bitcast double %4 to i64
  %6 = lshr i64 %5, 63
  %7 = trunc i64 %6 to i8
  %8 = fcmp oeq double %4, 0.000000e+00
  br i1 %8, label %17, label %12

; <label>:9:                                      ; preds = %14
  %10 = fcmp olt double %15, 0x10000000000000
  %11 = zext i1 %10 to i8
  br label %17

; <label>:12:                                     ; preds = %2
  %13 = fcmp uno double %4, 0.000000e+00
  br i1 %13, label %17, label %14

; <label>:14:                                     ; preds = %12
  %15 = tail call double @llvm.fabs.f64(double %4) #26
  %16 = fcmp oeq double %15, 0x7FF0000000000000
  br i1 %16, label %17, label %9

; <label>:17:                                     ; preds = %14, %12, %9, %2
  %18 = phi i8 [ 1, %14 ], [ 0, %9 ], [ 1, %12 ], [ 0, %2 ]
  %19 = phi i8 [ 0, %14 ], [ %7, %9 ], [ 0, %12 ], [ 0, %2 ]
  %20 = phi i8 [ 1, %14 ], [ 1, %9 ], [ 0, %12 ], [ 0, %2 ]
  %21 = phi i8 [ 0, %14 ], [ %11, %9 ], [ 0, %12 ], [ 1, %2 ]
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 %18, i8* %22, align 1, !tbaa !895
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 %19, i8* %23, align 1, !tbaa !897
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 %20, i8* %24, align 1, !tbaa !896
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 %21, i8* %25, align 1, !tbaa !898
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6DoFTSTEP6MemoryR5State(%struct.Memory*, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %5, align 1, !tbaa !897
  %6 = fcmp uno double %4, 0.000000e+00
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %8, align 1, !tbaa !895
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %9, align 1, !tbaa !896
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %10, align 1, !tbaa !898
  br label %22

; <label>:11:                                     ; preds = %2
  %12 = fcmp olt double %4, 0.000000e+00
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %12, label %14, label %17

; <label>:14:                                     ; preds = %11
  store i8 1, i8* %13, align 1, !tbaa !895
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %15, align 1, !tbaa !896
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %16, align 1, !tbaa !898
  br label %22

; <label>:17:                                     ; preds = %11
  store i8 0, i8* %13, align 1, !tbaa !895
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %18, align 1, !tbaa !896
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %20 = fcmp ule double %4, 0.000000e+00
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1, !tbaa !898
  br label %22

; <label>:22:                                     ; preds = %17, %14, %7
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FUCOMI2RnIdEEEP6MemoryS4_R5StateS2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double, double) #2 {
  %5 = fcmp uno double %2, %3
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %4
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %7, align 1, !tbaa !895
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %8, align 1, !tbaa !896
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %9, align 1, !tbaa !898
  br label %21

; <label>:10:                                     ; preds = %4
  %11 = fcmp olt double %2, %3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %11, label %13, label %16

; <label>:13:                                     ; preds = %10
  store i8 1, i8* %12, align 1, !tbaa !895
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %14, align 1, !tbaa !896
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %15, align 1, !tbaa !898
  br label %21

; <label>:16:                                     ; preds = %10
  store i8 0, i8* %12, align 1, !tbaa !895
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %17, align 1, !tbaa !896
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %19 = fcmp ule double %2, %3
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %18, align 1, !tbaa !898
  br label %21

; <label>:21:                                     ; preds = %16, %13, %6
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FUCOMPI2RnIdEEEP6MemoryS4_R5StateS2_T_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double, double) #2 {
  %5 = fcmp uno double %2, %3
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %4
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %7, align 1, !tbaa !895
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %8, align 1, !tbaa !896
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %9, align 1, !tbaa !898
  br label %21

; <label>:10:                                     ; preds = %4
  %11 = fcmp olt double %2, %3
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %11, label %13, label %16

; <label>:13:                                     ; preds = %10
  store i8 1, i8* %12, align 1, !tbaa !895
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %14, align 1, !tbaa !896
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %15, align 1, !tbaa !898
  br label %21

; <label>:16:                                     ; preds = %10
  store i8 0, i8* %12, align 1, !tbaa !895
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %17, align 1, !tbaa !896
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %19 = fcmp ule double %2, %3
  %20 = zext i1 %19 to i8
  store i8 %20, i8* %18, align 1, !tbaa !898
  br label %21

; <label>:21:                                     ; preds = %16, %13, %6
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  %28 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %29 = bitcast double* %28 to i64*
  %30 = load i64, i64* %29, align 8, !tbaa !886
  store i64 %30, i64* %26, align 8, !tbaa !886
  %31 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %32 = bitcast double* %31 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !886
  store i64 %33, i64* %29, align 8, !tbaa !886
  %34 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %35 = bitcast double* %34 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !886
  store i64 %36, i64* %32, align 8, !tbaa !886
  %37 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %38 = bitcast double* %37 to i64*
  %39 = load i64, i64* %38, align 8, !tbaa !886
  store i64 %39, i64* %35, align 8, !tbaa !886
  %40 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %41 = bitcast double* %40 to i64*
  %42 = load i64, i64* %41, align 8, !tbaa !886
  store i64 %42, i64* %38, align 8, !tbaa !886
  %43 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %44 = bitcast double* %43 to i64*
  %45 = load i64, i64* %44, align 8, !tbaa !886
  store i64 %45, i64* %41, align 8, !tbaa !886
  store i64 %24, i64* %44, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFUCOMPPEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #2 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %6 = load double, double* %5, align 8, !tbaa !886
  %7 = fcmp uno double %4, %6
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %9, align 1, !tbaa !895
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %10, align 1, !tbaa !896
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %11, align 1, !tbaa !898
  br label %23

; <label>:12:                                     ; preds = %2
  %13 = fcmp olt double %4, %6
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %13, label %15, label %18

; <label>:15:                                     ; preds = %12
  store i8 1, i8* %14, align 1, !tbaa !895
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %16, align 1, !tbaa !896
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %17, align 1, !tbaa !898
  br label %23

; <label>:18:                                     ; preds = %12
  store i8 0, i8* %14, align 1, !tbaa !895
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %19, align 1, !tbaa !896
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %21 = fcmp ule double %4, %6
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !898
  br label %23

; <label>:23:                                     ; preds = %18, %15, %8
  %24 = bitcast double* %3 to i64*
  %25 = bitcast double* %5 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !886
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %39 = bitcast double* %38 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !886
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %42 = bitcast double* %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  store i64 %31, i64* %25, align 8, !tbaa !886
  store i64 %34, i64* %27, align 8, !tbaa !886
  store i64 %37, i64* %30, align 8, !tbaa !886
  store i64 %40, i64* %33, align 8, !tbaa !886
  store i64 %43, i64* %36, align 8, !tbaa !886
  store double %4, double* %38, align 8, !tbaa !886
  store double %6, double* %41, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FUCOMIEP6MemoryR5State2RnIdES5_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %5, align 1, !tbaa !897
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1, !tbaa !867
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1, !tbaa !866
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !864
  %9 = fcmp uno double %2, %3
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %4
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %11, align 1, !tbaa !850
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1, !tbaa !863
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %13, align 1, !tbaa !865
  br label %25

; <label>:14:                                     ; preds = %4
  %15 = fcmp olt double %2, %3
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  br i1 %15, label %17, label %20

; <label>:17:                                     ; preds = %14
  store i8 1, i8* %16, align 1, !tbaa !850
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %18, align 1, !tbaa !863
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %19, align 1, !tbaa !865
  br label %25

; <label>:20:                                     ; preds = %14
  store i8 0, i8* %16, align 1, !tbaa !850
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %21, align 1, !tbaa !863
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %23 = fcmp ule double %2, %3
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %22, align 1, !tbaa !865
  br label %25

; <label>:25:                                     ; preds = %20, %17, %10
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7FUCOMIPEP6MemoryR5State2RnIdES5_(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double, double) #2 {
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  store i8 0, i8* %5, align 1, !tbaa !897
  %6 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 13
  store i8 0, i8* %6, align 1, !tbaa !867
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 9
  store i8 0, i8* %7, align 1, !tbaa !866
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !864
  %9 = fcmp uno double %2, %3
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %4
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  store i8 1, i8* %11, align 1, !tbaa !850
  %12 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1, !tbaa !863
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 1, i8* %13, align 1, !tbaa !865
  br label %25

; <label>:14:                                     ; preds = %4
  %15 = fcmp olt double %2, %3
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 1
  br i1 %15, label %17, label %20

; <label>:17:                                     ; preds = %14
  store i8 1, i8* %16, align 1, !tbaa !850
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %18, align 1, !tbaa !863
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  store i8 0, i8* %19, align 1, !tbaa !865
  br label %25

; <label>:20:                                     ; preds = %14
  store i8 0, i8* %16, align 1, !tbaa !850
  %21 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 3
  store i8 0, i8* %21, align 1, !tbaa !863
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 2, i32 7
  %23 = fcmp ule double %2, %3
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %22, align 1, !tbaa !865
  br label %25

; <label>:25:                                     ; preds = %20, %17, %10
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !886
  store i64 %37, i64* %33, align 8, !tbaa !886
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %39 = bitcast double* %38 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !886
  store i64 %40, i64* %36, align 8, !tbaa !886
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %42 = bitcast double* %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !886
  store i64 %43, i64* %39, align 8, !tbaa !886
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !886
  store i64 %46, i64* %42, align 8, !tbaa !886
  %47 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %48 = bitcast double* %47 to i64*
  %49 = load i64, i64* %48, align 8, !tbaa !886
  store i64 %49, i64* %45, align 8, !tbaa !886
  store i64 %28, i64* %48, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FUCOMI2MnIfEEEP6MemoryS4_R5State2RnIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = fpext float %5 to double
  %7 = fcmp uno double %6, %2
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %9, align 1, !tbaa !895
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %10, align 1, !tbaa !896
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %11, align 1, !tbaa !898
  br label %23

; <label>:12:                                     ; preds = %4
  %13 = fcmp ogt double %6, %2
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %13, label %15, label %18

; <label>:15:                                     ; preds = %12
  store i8 1, i8* %14, align 1, !tbaa !895
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %16, align 1, !tbaa !896
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %17, align 1, !tbaa !898
  br label %23

; <label>:18:                                     ; preds = %12
  store i8 0, i8* %14, align 1, !tbaa !895
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %19, align 1, !tbaa !896
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %21 = fcmp uge double %6, %2
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !898
  br label %23

; <label>:23:                                     ; preds = %18, %15, %8
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FUCOMI2MnIdEEEP6MemoryS4_R5State2RnIdET_(%struct.Memory*, %struct.State* nocapture dereferenceable(2688), double, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = fcmp uno double %5, %2
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %8, align 1, !tbaa !895
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %9, align 1, !tbaa !896
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %10, align 1, !tbaa !898
  br label %22

; <label>:11:                                     ; preds = %4
  %12 = fcmp ogt double %5, %2
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %12, label %14, label %17

; <label>:14:                                     ; preds = %11
  store i8 1, i8* %13, align 1, !tbaa !895
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %15, align 1, !tbaa !896
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %16, align 1, !tbaa !898
  br label %22

; <label>:17:                                     ; preds = %11
  store i8 0, i8* %13, align 1, !tbaa !895
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %18, align 1, !tbaa !896
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %20 = fcmp uge double %5, %2
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1, !tbaa !898
  br label %22

; <label>:22:                                     ; preds = %17, %14, %7
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FUCOMPI2MnIfEEEP6MemoryS4_R5State2RnIdET_(%struct.Memory* returned, %struct.State* nocapture dereferenceable(2688), double, i64) #0 {
  %5 = tail call float @__remill_read_memory_f32(%struct.Memory* %0, i64 %3) #22
  %6 = fpext float %5 to double
  %7 = fcmp uno double %6, %2
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %9, align 1, !tbaa !895
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %10, align 1, !tbaa !896
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %11, align 1, !tbaa !898
  br label %23

; <label>:12:                                     ; preds = %4
  %13 = fcmp ogt double %6, %2
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %13, label %15, label %18

; <label>:15:                                     ; preds = %12
  store i8 1, i8* %14, align 1, !tbaa !895
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %16, align 1, !tbaa !896
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %17, align 1, !tbaa !898
  br label %23

; <label>:18:                                     ; preds = %12
  store i8 0, i8* %14, align 1, !tbaa !895
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %19, align 1, !tbaa !896
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %21 = fcmp uge double %6, %2
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1, !tbaa !898
  br label %23

; <label>:23:                                     ; preds = %18, %15, %8
  %24 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !886
  %27 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !886
  store i64 %29, i64* %25, align 8, !tbaa !886
  %30 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %31 = bitcast double* %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !886
  store i64 %32, i64* %28, align 8, !tbaa !886
  %33 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !886
  store i64 %35, i64* %31, align 8, !tbaa !886
  %36 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %37 = bitcast double* %36 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !886
  store i64 %38, i64* %34, align 8, !tbaa !886
  %39 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %40 = bitcast double* %39 to i64*
  %41 = load i64, i64* %40, align 8, !tbaa !886
  store i64 %41, i64* %37, align 8, !tbaa !886
  %42 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %43 = bitcast double* %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !886
  store i64 %44, i64* %40, align 8, !tbaa !886
  %45 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %46 = bitcast double* %45 to i64*
  %47 = load i64, i64* %46, align 8, !tbaa !886
  store i64 %47, i64* %43, align 8, !tbaa !886
  store i64 %26, i64* %46, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FUCOMPI2MnIdEEEP6MemoryS4_R5State2RnIdET_(%struct.Memory* returned, %struct.State* nocapture dereferenceable(2688), double, i64) #0 {
  %5 = tail call double @__remill_read_memory_f64(%struct.Memory* %0, i64 %3) #22
  %6 = fcmp uno double %5, %2
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  store i8 1, i8* %8, align 1, !tbaa !895
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 1, i8* %9, align 1, !tbaa !896
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 1, i8* %10, align 1, !tbaa !898
  br label %22

; <label>:11:                                     ; preds = %4
  %12 = fcmp ogt double %5, %2
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  br i1 %12, label %14, label %17

; <label>:14:                                     ; preds = %11
  store i8 1, i8* %13, align 1, !tbaa !895
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %15, align 1, !tbaa !896
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  store i8 0, i8* %16, align 1, !tbaa !898
  br label %22

; <label>:17:                                     ; preds = %11
  store i8 0, i8* %13, align 1, !tbaa !895
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  store i8 0, i8* %18, align 1, !tbaa !896
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %20 = fcmp uge double %5, %2
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1, !tbaa !898
  br label %22

; <label>:22:                                     ; preds = %17, %14, %7
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  %29 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !886
  store i64 %31, i64* %27, align 8, !tbaa !886
  %32 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !886
  store i64 %34, i64* %30, align 8, !tbaa !886
  %35 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %36 = bitcast double* %35 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !886
  store i64 %37, i64* %33, align 8, !tbaa !886
  %38 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %39 = bitcast double* %38 to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !886
  store i64 %40, i64* %36, align 8, !tbaa !886
  %41 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %42 = bitcast double* %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !886
  store i64 %43, i64* %39, align 8, !tbaa !886
  %44 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8, !tbaa !886
  store i64 %46, i64* %42, align 8, !tbaa !886
  store i64 %25, i64* %45, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FNSTSWI3MnWItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone, %struct.State* nocapture readonly dereferenceable(2688), i64) #6 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !895
  %6 = and i8 %5, 1
  %7 = zext i8 %6 to i16
  %8 = shl nuw nsw i16 %7, 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  %10 = load i8, i8* %9, align 1, !tbaa !897
  %11 = and i8 %10, 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw nsw i16 %12, 9
  %14 = and i16 %8, 256
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  %16 = load i8, i8* %15, align 1, !tbaa !896
  %17 = and i8 %16, 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw nsw i16 %18, 10
  %20 = and i16 %13, 512
  %21 = or i16 %20, %14
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %23 = load i8, i8* %22, align 1, !tbaa !898
  %24 = and i8 %23, 1
  %25 = zext i8 %24 to i16
  %26 = shl nuw nsw i16 %25, 14
  %27 = and i16 %19, 1024
  %28 = or i16 %21, %27
  %29 = or i16 %28, %26
  %30 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %29) #22
  ret %struct.Memory* %30
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FNSTSWI3RnWItEEEP6MemoryS4_R5StateT_(%struct.Memory* readnone returned, %struct.State* nocapture readonly dereferenceable(2688), i16* nocapture) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 1
  %5 = load i8, i8* %4, align 1, !tbaa !895
  %6 = and i8 %5, 1
  %7 = zext i8 %6 to i16
  %8 = shl nuw nsw i16 %7, 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 3
  %10 = load i8, i8* %9, align 1, !tbaa !897
  %11 = and i8 %10, 1
  %12 = zext i8 %11 to i16
  %13 = shl nuw nsw i16 %12, 9
  %14 = and i16 %8, 256
  %15 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 5
  %16 = load i8, i8* %15, align 1, !tbaa !896
  %17 = and i8 %16, 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw nsw i16 %18, 10
  %20 = and i16 %13, 512
  %21 = or i16 %20, %14
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 9, i32 7
  %23 = load i8, i8* %22, align 1, !tbaa !898
  %24 = and i8 %23, 1
  %25 = zext i8 %24 to i16
  %26 = shl nuw nsw i16 %25, 14
  %27 = and i16 %19, 1024
  %28 = or i16 %21, %27
  %29 = or i16 %28, %26
  store i16 %29, i16* %2, align 2, !tbaa !869
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind readonly
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FNSTCWEP6MemoryR5State3MnWItE(%struct.Memory* readnone, %struct.State* nocapture readnone dereferenceable(2688), i64) #6 {
  %4 = tail call i32 @fegetround() #27
  %5 = lshr i32 %4, 10
  %6 = shl i32 %4, 22
  %7 = or i32 %5, %6
  %8 = add i32 %7, -1
  %9 = icmp ult i32 %8, 3
  %10 = trunc i32 %8 to i16
  %11 = shl i16 %10, 10
  %12 = add i16 %11, 1663
  %13 = select i1 %9, i16 %12, i16 639
  %14 = tail call %struct.Memory* @__remill_write_memory_16(%struct.Memory* %0, i64 %2, i16 zeroext %13) #22
  ret %struct.Memory* %14
}

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #12

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FLDCWEP6MemoryR5State2MnItE(%struct.Memory*, %struct.State* nocapture readnone dereferenceable(2688), i64) #0 {
  %4 = tail call zeroext i16 @__remill_read_memory_16(%struct.Memory* %0, i64 %2) #22
  %5 = lshr i16 %4, 10
  %6 = and i16 %5, 3
  %7 = xor i16 %6, 2
  %8 = zext i16 %7 to i64
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = tail call i32 @fesetround(i32 %10) #21
  ret %struct.Memory* %0
}

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #11

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFRNDINTEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = tail call double @llvm.nearbyint.f64(double %4) #23
  store double %5, double* %3, align 8, !tbaa !873
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L7DoFYL2XEP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %6 = load double, double* %5, align 8, !tbaa !886
  %7 = tail call double @log2(double %4) #24
  %8 = fmul double %6, %7
  %9 = bitcast double* %5 to i64*
  store double %8, double* %3, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %9, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  store double %4, double* %25, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #10

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L9DoFYL2XP1EP6MemoryR5State(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %4 = load double, double* %3, align 8, !tbaa !886
  %5 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %6 = load double, double* %5, align 8, !tbaa !886
  %7 = fadd double %4, 1.000000e+00
  %8 = tail call double @log2(double %7) #24
  %9 = fmul double %6, %8
  %10 = bitcast double* %5 to i64*
  store double %9, double* %3, align 8, !tbaa !886
  %11 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !886
  store i64 %13, i64* %10, align 8, !tbaa !886
  %14 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !886
  store i64 %16, i64* %12, align 8, !tbaa !886
  %17 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !886
  store i64 %19, i64* %15, align 8, !tbaa !886
  %20 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %21 = bitcast double* %20 to i64*
  %22 = load i64, i64* %21, align 8, !tbaa !886
  store i64 %22, i64* %18, align 8, !tbaa !886
  %23 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %24 = bitcast double* %23 to i64*
  %25 = load i64, i64* %24, align 8, !tbaa !886
  store i64 %25, i64* %21, align 8, !tbaa !886
  %26 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %27 = bitcast double* %26 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !886
  store i64 %28, i64* %24, align 8, !tbaa !886
  store double %4, double* %26, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L5FFREEEP6MemoryR5State2RnIdE(%struct.Memory* readnone returned, %struct.State* nocapture readnone dereferenceable(2688), double) #9 {
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline norecurse nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L6FFREEPEP6MemoryR5State2RnIdE(%struct.Memory* readnone returned, %struct.State* nocapture dereferenceable(2688), double) #2 {
  %4 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 0, i32 1
  %5 = bitcast double* %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !886
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 1, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8, !tbaa !886
  store i64 %9, i64* %5, align 8, !tbaa !886
  %10 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 2, i32 1
  %11 = bitcast double* %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !886
  store i64 %12, i64* %8, align 8, !tbaa !886
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 3, i32 1
  %14 = bitcast double* %13 to i64*
  %15 = load i64, i64* %14, align 8, !tbaa !886
  store i64 %15, i64* %11, align 8, !tbaa !886
  %16 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 4, i32 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !886
  store i64 %18, i64* %14, align 8, !tbaa !886
  %19 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 5, i32 1
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !886
  store i64 %21, i64* %17, align 8, !tbaa !886
  %22 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 6, i32 1
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8, !tbaa !886
  store i64 %24, i64* %20, align 8, !tbaa !886
  %25 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 7, i32 0, i64 7, i32 1
  %26 = bitcast double* %25 to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !886
  store i64 %27, i64* %23, align 8, !tbaa !886
  store i64 %6, i64* %26, align 8, !tbaa !886
  ret %struct.Memory* %0
}

; Function Attrs: alwaysinline nounwind
define internal %struct.Memory* @_ZN12_GLOBAL__N_1L8DoXGETBVEP6MemoryR5State(%struct.Memory*, %struct.State* dereferenceable(2688)) #0 {
  %3 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 5, i32 0
  %4 = bitcast %union.Flags* %3 to i32*
  %5 = load i32, i32* %4, align 8, !tbaa !877
  switch i32 %5, label %17 [
    i32 0, label %6
    i32 1, label %21
  ]

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 10
  %9 = bitcast %union.Flags* %8 to %struct.anon.4*
  %10 = bitcast %union.Flags* %8 to i32*
  %11 = load i32, i32* %10, align 8, !tbaa !899
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %7, align 8, !tbaa !870
  %13 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 7, i32 0, i32 0
  %14 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %9, i64 0, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !901
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %13, align 8, !tbaa !870
  br label %21

; <label>:17:                                     ; preds = %2
  %18 = getelementptr inbounds %struct.State, %struct.State* %1, i64 0, i32 6, i32 33, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !870
  %20 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(2688) %1, i64 %19, %struct.Memory* %0) #21
  br label %21

; <label>:21:                                     ; preds = %17, %6, %2
  %22 = phi %struct.Memory* [ %20, %17 ], [ %0, %6 ], [ %0, %2 ]
  ret %struct.Memory* %22
}

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #13 !dbg !902 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %branch_taken = alloca i8, align 1
  %zero = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %PC = alloca i64*, align 8
  %BRANCH_TAKEN = alloca i8*, align 8
  %AH = alloca i8*, align 8
  %BH = alloca i8*, align 8
  %CH = alloca i8*, align 8
  %DH = alloca i8*, align 8
  %AL = alloca i8*, align 8
  %BL = alloca i8*, align 8
  %CL = alloca i8*, align 8
  %DL = alloca i8*, align 8
  %SIL = alloca i8*, align 8
  %DIL = alloca i8*, align 8
  %SPL = alloca i8*, align 8
  %BPL = alloca i8*, align 8
  %R8B = alloca i8*, align 8
  %R9B = alloca i8*, align 8
  %R10B = alloca i8*, align 8
  %R11B = alloca i8*, align 8
  %R12B = alloca i8*, align 8
  %R13B = alloca i8*, align 8
  %R14B = alloca i8*, align 8
  %R15B = alloca i8*, align 8
  %AX = alloca i16*, align 8
  %BX = alloca i16*, align 8
  %CX = alloca i16*, align 8
  %DX = alloca i16*, align 8
  %SI = alloca i16*, align 8
  %DI = alloca i16*, align 8
  %SP = alloca i16*, align 8
  %BP = alloca i16*, align 8
  %R8W = alloca i16*, align 8
  %R9W = alloca i16*, align 8
  %R10W = alloca i16*, align 8
  %R11W = alloca i16*, align 8
  %R12W = alloca i16*, align 8
  %R13W = alloca i16*, align 8
  %R14W = alloca i16*, align 8
  %R15W = alloca i16*, align 8
  %IP = alloca i16*, align 8
  %EAX = alloca i32*, align 8
  %EBX = alloca i32*, align 8
  %ECX = alloca i32*, align 8
  %EDX = alloca i32*, align 8
  %ESI = alloca i32*, align 8
  %EDI = alloca i32*, align 8
  %ESP = alloca i32*, align 8
  %EBP = alloca i32*, align 8
  %EIP = alloca i32*, align 8
  %R8D = alloca i32*, align 8
  %R9D = alloca i32*, align 8
  %R10D = alloca i32*, align 8
  %R11D = alloca i32*, align 8
  %R12D = alloca i32*, align 8
  %R13D = alloca i32*, align 8
  %R14D = alloca i32*, align 8
  %R15D = alloca i32*, align 8
  %RAX = alloca i64*, align 8
  %RBX = alloca i64*, align 8
  %RCX = alloca i64*, align 8
  %RDX = alloca i64*, align 8
  %RSI = alloca i64*, align 8
  %RDI = alloca i64*, align 8
  %RSP = alloca i64*, align 8
  %RBP = alloca i64*, align 8
  %R8 = alloca i64*, align 8
  %R9 = alloca i64*, align 8
  %R10 = alloca i64*, align 8
  %R11 = alloca i64*, align 8
  %R12 = alloca i64*, align 8
  %R13 = alloca i64*, align 8
  %R14 = alloca i64*, align 8
  %R15 = alloca i64*, align 8
  %RIP = alloca i64*, align 8
  %SS = alloca i16*, align 8
  %ES = alloca i16*, align 8
  %GS = alloca i16*, align 8
  %FS = alloca i16*, align 8
  %DS = alloca i16*, align 8
  %CS = alloca i16*, align 8
  %SS_BASE = alloca i64*, align 8
  %ES_BASE = alloca i64*, align 8
  %GS_BASE = alloca i64*, align 8
  %FS_BASE = alloca i64*, align 8
  %DS_BASE = alloca i64*, align 8
  %CS_BASE = alloca i64*, align 8
  %XMM0 = alloca %union.vec128_t*, align 8
  %XMM1 = alloca %union.vec128_t*, align 8
  %XMM2 = alloca %union.vec128_t*, align 8
  %XMM3 = alloca %union.vec128_t*, align 8
  %XMM4 = alloca %union.vec128_t*, align 8
  %XMM5 = alloca %union.vec128_t*, align 8
  %XMM6 = alloca %union.vec128_t*, align 8
  %XMM7 = alloca %union.vec128_t*, align 8
  %XMM8 = alloca %union.vec128_t*, align 8
  %XMM9 = alloca %union.vec128_t*, align 8
  %XMM10 = alloca %union.vec128_t*, align 8
  %XMM11 = alloca %union.vec128_t*, align 8
  %XMM12 = alloca %union.vec128_t*, align 8
  %XMM13 = alloca %union.vec128_t*, align 8
  %XMM14 = alloca %union.vec128_t*, align 8
  %XMM15 = alloca %union.vec128_t*, align 8
  %ST0 = alloca double*, align 8
  %ST1 = alloca double*, align 8
  %ST2 = alloca double*, align 8
  %ST3 = alloca double*, align 8
  %ST4 = alloca double*, align 8
  %ST5 = alloca double*, align 8
  %ST6 = alloca double*, align 8
  %ST7 = alloca double*, align 8
  %MMX0 = alloca i64*, align 8
  %MMX1 = alloca i64*, align 8
  %MMX2 = alloca i64*, align 8
  %MMX3 = alloca i64*, align 8
  %MMX4 = alloca i64*, align 8
  %MMX5 = alloca i64*, align 8
  %MMX6 = alloca i64*, align 8
  %MMX7 = alloca i64*, align 8
  %AF = alloca i8*, align 8
  %CF = alloca i8*, align 8
  %DF = alloca i8*, align 8
  %OF = alloca i8*, align 8
  %PF = alloca i8*, align 8
  %SF = alloca i8*, align 8
  %ZF = alloca i8*, align 8
  store %struct.State* %state2, %struct.State** %state, align 8
  call void @llvm.dbg.declare(metadata %struct.State** %state, metadata !1369, metadata !1370), !dbg !1371
  store i64 %pc, i64* %curr_pc, align 8
  call void @llvm.dbg.declare(metadata i64* %curr_pc, metadata !1372, metadata !1370), !dbg !1373
  store %struct.Memory* %memory1, %struct.Memory** %memory, align 8
  call void @llvm.dbg.declare(metadata %struct.Memory** %memory, metadata !1374, metadata !1370), !dbg !1375
  call void @llvm.dbg.declare(metadata i8* %branch_taken, metadata !1376, metadata !1370), !dbg !1377
  store i8 0, i8* %branch_taken, align 1, !dbg !1377
  call void @llvm.dbg.declare(metadata i64* %zero, metadata !1378, metadata !1370), !dbg !1379
  store i64 0, i64* %zero, align 8, !dbg !1379
  call void @llvm.dbg.declare(metadata %struct.State** %STATE, metadata !1380, metadata !1370), !dbg !1381
  %1 = load %struct.State*, %struct.State** %state, align 8, !dbg !1382
  store %struct.State* %1, %struct.State** %STATE, align 8, !dbg !1381
  call void @llvm.dbg.declare(metadata %struct.Memory** %MEMORY, metadata !1383, metadata !1370), !dbg !1385
  %2 = load %struct.Memory*, %struct.Memory** %memory, align 8, !dbg !1386
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1385
  call void @llvm.dbg.declare(metadata i64** %PC, metadata !1387, metadata !1370), !dbg !1389
  %3 = load %struct.State*, %struct.State** %state, align 8, !dbg !1390
  %4 = getelementptr inbounds %struct.State, %struct.State* %3, i32 0, i32 6, !dbg !1391
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1392
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1393
  %7 = bitcast %union.Flags* %6 to i64*, !dbg !1393
  store i64* %7, i64** %PC, align 8, !dbg !1389
  call void @llvm.dbg.declare(metadata i8** %BRANCH_TAKEN, metadata !1394, metadata !1370), !dbg !1396
  store i8* %branch_taken, i8** %BRANCH_TAKEN, align 8, !dbg !1396
  %8 = load i64, i64* %curr_pc, align 8, !dbg !1397
  %9 = load i64*, i64** %PC, align 8, !dbg !1398
  store i64 %8, i64* %9, align 8, !dbg !1399
  call void @llvm.dbg.declare(metadata i8** %AH, metadata !1400, metadata !1370), !dbg !1402
  %10 = load %struct.State*, %struct.State** %state, align 8, !dbg !1403
  %11 = getelementptr inbounds %struct.State, %struct.State* %10, i32 0, i32 6, !dbg !1404
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 1, !dbg !1405
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1406
  %14 = bitcast %union.Flags* %13 to %struct.anon.1*, !dbg !1406
  %15 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %14, i32 0, i32 1, !dbg !1407
  store i8* %15, i8** %AH, align 8, !dbg !1402
  call void @llvm.dbg.declare(metadata i8** %BH, metadata !1408, metadata !1370), !dbg !1409
  %16 = load %struct.State*, %struct.State** %state, align 8, !dbg !1410
  %17 = getelementptr inbounds %struct.State, %struct.State* %16, i32 0, i32 6, !dbg !1411
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 3, !dbg !1412
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0, !dbg !1413
  %20 = bitcast %union.Flags* %19 to %struct.anon.1*, !dbg !1413
  %21 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %20, i32 0, i32 1, !dbg !1414
  store i8* %21, i8** %BH, align 8, !dbg !1409
  call void @llvm.dbg.declare(metadata i8** %CH, metadata !1415, metadata !1370), !dbg !1416
  %22 = load %struct.State*, %struct.State** %state, align 8, !dbg !1417
  %23 = getelementptr inbounds %struct.State, %struct.State* %22, i32 0, i32 6, !dbg !1418
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 5, !dbg !1419
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1420
  %26 = bitcast %union.Flags* %25 to %struct.anon.1*, !dbg !1420
  %27 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %26, i32 0, i32 1, !dbg !1421
  store i8* %27, i8** %CH, align 8, !dbg !1416
  call void @llvm.dbg.declare(metadata i8** %DH, metadata !1422, metadata !1370), !dbg !1423
  %28 = load %struct.State*, %struct.State** %state, align 8, !dbg !1424
  %29 = getelementptr inbounds %struct.State, %struct.State* %28, i32 0, i32 6, !dbg !1425
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 7, !dbg !1426
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0, !dbg !1427
  %32 = bitcast %union.Flags* %31 to %struct.anon.1*, !dbg !1427
  %33 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %32, i32 0, i32 1, !dbg !1428
  store i8* %33, i8** %DH, align 8, !dbg !1423
  call void @llvm.dbg.declare(metadata i8** %AL, metadata !1429, metadata !1370), !dbg !1430
  %34 = load %struct.State*, %struct.State** %state, align 8, !dbg !1431
  %35 = getelementptr inbounds %struct.State, %struct.State* %34, i32 0, i32 6, !dbg !1432
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 1, !dbg !1433
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1434
  %38 = bitcast %union.Flags* %37 to %struct.anon.1*, !dbg !1434
  %39 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %38, i32 0, i32 0, !dbg !1435
  store i8* %39, i8** %AL, align 8, !dbg !1430
  call void @llvm.dbg.declare(metadata i8** %BL, metadata !1436, metadata !1370), !dbg !1437
  %40 = load %struct.State*, %struct.State** %state, align 8, !dbg !1438
  %41 = getelementptr inbounds %struct.State, %struct.State* %40, i32 0, i32 6, !dbg !1439
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 3, !dbg !1440
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0, !dbg !1441
  %44 = bitcast %union.Flags* %43 to %struct.anon.1*, !dbg !1441
  %45 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %44, i32 0, i32 0, !dbg !1442
  store i8* %45, i8** %BL, align 8, !dbg !1437
  call void @llvm.dbg.declare(metadata i8** %CL, metadata !1443, metadata !1370), !dbg !1444
  %46 = load %struct.State*, %struct.State** %state, align 8, !dbg !1445
  %47 = getelementptr inbounds %struct.State, %struct.State* %46, i32 0, i32 6, !dbg !1446
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 5, !dbg !1447
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !1448
  %50 = bitcast %union.Flags* %49 to %struct.anon.1*, !dbg !1448
  %51 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %50, i32 0, i32 0, !dbg !1449
  store i8* %51, i8** %CL, align 8, !dbg !1444
  call void @llvm.dbg.declare(metadata i8** %DL, metadata !1450, metadata !1370), !dbg !1451
  %52 = load %struct.State*, %struct.State** %state, align 8, !dbg !1452
  %53 = getelementptr inbounds %struct.State, %struct.State* %52, i32 0, i32 6, !dbg !1453
  %54 = getelementptr inbounds %struct.GPR, %struct.GPR* %53, i32 0, i32 7, !dbg !1454
  %55 = getelementptr inbounds %struct.Reg, %struct.Reg* %54, i32 0, i32 0, !dbg !1455
  %56 = bitcast %union.Flags* %55 to %struct.anon.1*, !dbg !1455
  %57 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %56, i32 0, i32 0, !dbg !1456
  store i8* %57, i8** %DL, align 8, !dbg !1451
  call void @llvm.dbg.declare(metadata i8** %SIL, metadata !1457, metadata !1370), !dbg !1458
  %58 = load %struct.State*, %struct.State** %state, align 8, !dbg !1459
  %59 = getelementptr inbounds %struct.State, %struct.State* %58, i32 0, i32 6, !dbg !1460
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 9, !dbg !1461
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !1462
  %62 = bitcast %union.Flags* %61 to %struct.anon.1*, !dbg !1462
  %63 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %62, i32 0, i32 0, !dbg !1463
  store i8* %63, i8** %SIL, align 8, !dbg !1458
  call void @llvm.dbg.declare(metadata i8** %DIL, metadata !1464, metadata !1370), !dbg !1465
  %64 = load %struct.State*, %struct.State** %state, align 8, !dbg !1466
  %65 = getelementptr inbounds %struct.State, %struct.State* %64, i32 0, i32 6, !dbg !1467
  %66 = getelementptr inbounds %struct.GPR, %struct.GPR* %65, i32 0, i32 11, !dbg !1468
  %67 = getelementptr inbounds %struct.Reg, %struct.Reg* %66, i32 0, i32 0, !dbg !1469
  %68 = bitcast %union.Flags* %67 to %struct.anon.1*, !dbg !1469
  %69 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %68, i32 0, i32 0, !dbg !1470
  store i8* %69, i8** %DIL, align 8, !dbg !1465
  call void @llvm.dbg.declare(metadata i8** %SPL, metadata !1471, metadata !1370), !dbg !1472
  %70 = load %struct.State*, %struct.State** %state, align 8, !dbg !1473
  %71 = getelementptr inbounds %struct.State, %struct.State* %70, i32 0, i32 6, !dbg !1474
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 13, !dbg !1475
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !1476
  %74 = bitcast %union.Flags* %73 to %struct.anon.1*, !dbg !1476
  %75 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %74, i32 0, i32 0, !dbg !1477
  store i8* %75, i8** %SPL, align 8, !dbg !1472
  call void @llvm.dbg.declare(metadata i8** %BPL, metadata !1478, metadata !1370), !dbg !1479
  %76 = load %struct.State*, %struct.State** %state, align 8, !dbg !1480
  %77 = getelementptr inbounds %struct.State, %struct.State* %76, i32 0, i32 6, !dbg !1481
  %78 = getelementptr inbounds %struct.GPR, %struct.GPR* %77, i32 0, i32 15, !dbg !1482
  %79 = getelementptr inbounds %struct.Reg, %struct.Reg* %78, i32 0, i32 0, !dbg !1483
  %80 = bitcast %union.Flags* %79 to %struct.anon.1*, !dbg !1483
  %81 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %80, i32 0, i32 0, !dbg !1484
  store i8* %81, i8** %BPL, align 8, !dbg !1479
  call void @llvm.dbg.declare(metadata i8** %R8B, metadata !1485, metadata !1370), !dbg !1486
  %82 = load %struct.State*, %struct.State** %state, align 8, !dbg !1487
  %83 = getelementptr inbounds %struct.State, %struct.State* %82, i32 0, i32 6, !dbg !1488
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 17, !dbg !1489
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !1490
  %86 = bitcast %union.Flags* %85 to %struct.anon.1*, !dbg !1490
  %87 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %86, i32 0, i32 0, !dbg !1491
  store i8* %87, i8** %R8B, align 8, !dbg !1486
  call void @llvm.dbg.declare(metadata i8** %R9B, metadata !1492, metadata !1370), !dbg !1493
  %88 = load %struct.State*, %struct.State** %state, align 8, !dbg !1494
  %89 = getelementptr inbounds %struct.State, %struct.State* %88, i32 0, i32 6, !dbg !1495
  %90 = getelementptr inbounds %struct.GPR, %struct.GPR* %89, i32 0, i32 19, !dbg !1496
  %91 = getelementptr inbounds %struct.Reg, %struct.Reg* %90, i32 0, i32 0, !dbg !1497
  %92 = bitcast %union.Flags* %91 to %struct.anon.1*, !dbg !1497
  %93 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %92, i32 0, i32 0, !dbg !1498
  store i8* %93, i8** %R9B, align 8, !dbg !1493
  call void @llvm.dbg.declare(metadata i8** %R10B, metadata !1499, metadata !1370), !dbg !1500
  %94 = load %struct.State*, %struct.State** %state, align 8, !dbg !1501
  %95 = getelementptr inbounds %struct.State, %struct.State* %94, i32 0, i32 6, !dbg !1502
  %96 = getelementptr inbounds %struct.GPR, %struct.GPR* %95, i32 0, i32 21, !dbg !1503
  %97 = getelementptr inbounds %struct.Reg, %struct.Reg* %96, i32 0, i32 0, !dbg !1504
  %98 = bitcast %union.Flags* %97 to %struct.anon.1*, !dbg !1504
  %99 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %98, i32 0, i32 0, !dbg !1505
  store i8* %99, i8** %R10B, align 8, !dbg !1500
  call void @llvm.dbg.declare(metadata i8** %R11B, metadata !1506, metadata !1370), !dbg !1507
  %100 = load %struct.State*, %struct.State** %state, align 8, !dbg !1508
  %101 = getelementptr inbounds %struct.State, %struct.State* %100, i32 0, i32 6, !dbg !1509
  %102 = getelementptr inbounds %struct.GPR, %struct.GPR* %101, i32 0, i32 23, !dbg !1510
  %103 = getelementptr inbounds %struct.Reg, %struct.Reg* %102, i32 0, i32 0, !dbg !1511
  %104 = bitcast %union.Flags* %103 to %struct.anon.1*, !dbg !1511
  %105 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %104, i32 0, i32 0, !dbg !1512
  store i8* %105, i8** %R11B, align 8, !dbg !1507
  call void @llvm.dbg.declare(metadata i8** %R12B, metadata !1513, metadata !1370), !dbg !1514
  %106 = load %struct.State*, %struct.State** %state, align 8, !dbg !1515
  %107 = getelementptr inbounds %struct.State, %struct.State* %106, i32 0, i32 6, !dbg !1516
  %108 = getelementptr inbounds %struct.GPR, %struct.GPR* %107, i32 0, i32 25, !dbg !1517
  %109 = getelementptr inbounds %struct.Reg, %struct.Reg* %108, i32 0, i32 0, !dbg !1518
  %110 = bitcast %union.Flags* %109 to %struct.anon.1*, !dbg !1518
  %111 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %110, i32 0, i32 0, !dbg !1519
  store i8* %111, i8** %R12B, align 8, !dbg !1514
  call void @llvm.dbg.declare(metadata i8** %R13B, metadata !1520, metadata !1370), !dbg !1521
  %112 = load %struct.State*, %struct.State** %state, align 8, !dbg !1522
  %113 = getelementptr inbounds %struct.State, %struct.State* %112, i32 0, i32 6, !dbg !1523
  %114 = getelementptr inbounds %struct.GPR, %struct.GPR* %113, i32 0, i32 27, !dbg !1524
  %115 = getelementptr inbounds %struct.Reg, %struct.Reg* %114, i32 0, i32 0, !dbg !1525
  %116 = bitcast %union.Flags* %115 to %struct.anon.1*, !dbg !1525
  %117 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %116, i32 0, i32 0, !dbg !1526
  store i8* %117, i8** %R13B, align 8, !dbg !1521
  call void @llvm.dbg.declare(metadata i8** %R14B, metadata !1527, metadata !1370), !dbg !1528
  %118 = load %struct.State*, %struct.State** %state, align 8, !dbg !1529
  %119 = getelementptr inbounds %struct.State, %struct.State* %118, i32 0, i32 6, !dbg !1530
  %120 = getelementptr inbounds %struct.GPR, %struct.GPR* %119, i32 0, i32 29, !dbg !1531
  %121 = getelementptr inbounds %struct.Reg, %struct.Reg* %120, i32 0, i32 0, !dbg !1532
  %122 = bitcast %union.Flags* %121 to %struct.anon.1*, !dbg !1532
  %123 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %122, i32 0, i32 0, !dbg !1533
  store i8* %123, i8** %R14B, align 8, !dbg !1528
  call void @llvm.dbg.declare(metadata i8** %R15B, metadata !1534, metadata !1370), !dbg !1535
  %124 = load %struct.State*, %struct.State** %state, align 8, !dbg !1536
  %125 = getelementptr inbounds %struct.State, %struct.State* %124, i32 0, i32 6, !dbg !1537
  %126 = getelementptr inbounds %struct.GPR, %struct.GPR* %125, i32 0, i32 31, !dbg !1538
  %127 = getelementptr inbounds %struct.Reg, %struct.Reg* %126, i32 0, i32 0, !dbg !1539
  %128 = bitcast %union.Flags* %127 to %struct.anon.1*, !dbg !1539
  %129 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %128, i32 0, i32 0, !dbg !1540
  store i8* %129, i8** %R15B, align 8, !dbg !1535
  call void @llvm.dbg.declare(metadata i16** %AX, metadata !1541, metadata !1370), !dbg !1543
  %130 = load %struct.State*, %struct.State** %state, align 8, !dbg !1544
  %131 = getelementptr inbounds %struct.State, %struct.State* %130, i32 0, i32 6, !dbg !1545
  %132 = getelementptr inbounds %struct.GPR, %struct.GPR* %131, i32 0, i32 1, !dbg !1546
  %133 = getelementptr inbounds %struct.Reg, %struct.Reg* %132, i32 0, i32 0, !dbg !1547
  %134 = bitcast %union.Flags* %133 to i16*, !dbg !1547
  store i16* %134, i16** %AX, align 8, !dbg !1543
  call void @llvm.dbg.declare(metadata i16** %BX, metadata !1548, metadata !1370), !dbg !1549
  %135 = load %struct.State*, %struct.State** %state, align 8, !dbg !1550
  %136 = getelementptr inbounds %struct.State, %struct.State* %135, i32 0, i32 6, !dbg !1551
  %137 = getelementptr inbounds %struct.GPR, %struct.GPR* %136, i32 0, i32 3, !dbg !1552
  %138 = getelementptr inbounds %struct.Reg, %struct.Reg* %137, i32 0, i32 0, !dbg !1553
  %139 = bitcast %union.Flags* %138 to i16*, !dbg !1553
  store i16* %139, i16** %BX, align 8, !dbg !1549
  call void @llvm.dbg.declare(metadata i16** %CX, metadata !1554, metadata !1370), !dbg !1555
  %140 = load %struct.State*, %struct.State** %state, align 8, !dbg !1556
  %141 = getelementptr inbounds %struct.State, %struct.State* %140, i32 0, i32 6, !dbg !1557
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 5, !dbg !1558
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !1559
  %144 = bitcast %union.Flags* %143 to i16*, !dbg !1559
  store i16* %144, i16** %CX, align 8, !dbg !1555
  call void @llvm.dbg.declare(metadata i16** %DX, metadata !1560, metadata !1370), !dbg !1561
  %145 = load %struct.State*, %struct.State** %state, align 8, !dbg !1562
  %146 = getelementptr inbounds %struct.State, %struct.State* %145, i32 0, i32 6, !dbg !1563
  %147 = getelementptr inbounds %struct.GPR, %struct.GPR* %146, i32 0, i32 7, !dbg !1564
  %148 = getelementptr inbounds %struct.Reg, %struct.Reg* %147, i32 0, i32 0, !dbg !1565
  %149 = bitcast %union.Flags* %148 to i16*, !dbg !1565
  store i16* %149, i16** %DX, align 8, !dbg !1561
  call void @llvm.dbg.declare(metadata i16** %SI, metadata !1566, metadata !1370), !dbg !1567
  %150 = load %struct.State*, %struct.State** %state, align 8, !dbg !1568
  %151 = getelementptr inbounds %struct.State, %struct.State* %150, i32 0, i32 6, !dbg !1569
  %152 = getelementptr inbounds %struct.GPR, %struct.GPR* %151, i32 0, i32 9, !dbg !1570
  %153 = getelementptr inbounds %struct.Reg, %struct.Reg* %152, i32 0, i32 0, !dbg !1571
  %154 = bitcast %union.Flags* %153 to i16*, !dbg !1571
  store i16* %154, i16** %SI, align 8, !dbg !1567
  call void @llvm.dbg.declare(metadata i16** %DI, metadata !1572, metadata !1370), !dbg !1573
  %155 = load %struct.State*, %struct.State** %state, align 8, !dbg !1574
  %156 = getelementptr inbounds %struct.State, %struct.State* %155, i32 0, i32 6, !dbg !1575
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 11, !dbg !1576
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !1577
  %159 = bitcast %union.Flags* %158 to i16*, !dbg !1577
  store i16* %159, i16** %DI, align 8, !dbg !1573
  call void @llvm.dbg.declare(metadata i16** %SP, metadata !1578, metadata !1370), !dbg !1579
  %160 = load %struct.State*, %struct.State** %state, align 8, !dbg !1580
  %161 = getelementptr inbounds %struct.State, %struct.State* %160, i32 0, i32 6, !dbg !1581
  %162 = getelementptr inbounds %struct.GPR, %struct.GPR* %161, i32 0, i32 13, !dbg !1582
  %163 = getelementptr inbounds %struct.Reg, %struct.Reg* %162, i32 0, i32 0, !dbg !1583
  %164 = bitcast %union.Flags* %163 to i16*, !dbg !1583
  store i16* %164, i16** %SP, align 8, !dbg !1579
  call void @llvm.dbg.declare(metadata i16** %BP, metadata !1584, metadata !1370), !dbg !1585
  %165 = load %struct.State*, %struct.State** %state, align 8, !dbg !1586
  %166 = getelementptr inbounds %struct.State, %struct.State* %165, i32 0, i32 6, !dbg !1587
  %167 = getelementptr inbounds %struct.GPR, %struct.GPR* %166, i32 0, i32 15, !dbg !1588
  %168 = getelementptr inbounds %struct.Reg, %struct.Reg* %167, i32 0, i32 0, !dbg !1589
  %169 = bitcast %union.Flags* %168 to i16*, !dbg !1589
  store i16* %169, i16** %BP, align 8, !dbg !1585
  call void @llvm.dbg.declare(metadata i16** %R8W, metadata !1590, metadata !1370), !dbg !1591
  %170 = load %struct.State*, %struct.State** %state, align 8, !dbg !1592
  %171 = getelementptr inbounds %struct.State, %struct.State* %170, i32 0, i32 6, !dbg !1593
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 17, !dbg !1594
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !1595
  %174 = bitcast %union.Flags* %173 to i16*, !dbg !1595
  store i16* %174, i16** %R8W, align 8, !dbg !1591
  call void @llvm.dbg.declare(metadata i16** %R9W, metadata !1596, metadata !1370), !dbg !1597
  %175 = load %struct.State*, %struct.State** %state, align 8, !dbg !1598
  %176 = getelementptr inbounds %struct.State, %struct.State* %175, i32 0, i32 6, !dbg !1599
  %177 = getelementptr inbounds %struct.GPR, %struct.GPR* %176, i32 0, i32 19, !dbg !1600
  %178 = getelementptr inbounds %struct.Reg, %struct.Reg* %177, i32 0, i32 0, !dbg !1601
  %179 = bitcast %union.Flags* %178 to i16*, !dbg !1601
  store i16* %179, i16** %R9W, align 8, !dbg !1597
  call void @llvm.dbg.declare(metadata i16** %R10W, metadata !1602, metadata !1370), !dbg !1603
  %180 = load %struct.State*, %struct.State** %state, align 8, !dbg !1604
  %181 = getelementptr inbounds %struct.State, %struct.State* %180, i32 0, i32 6, !dbg !1605
  %182 = getelementptr inbounds %struct.GPR, %struct.GPR* %181, i32 0, i32 21, !dbg !1606
  %183 = getelementptr inbounds %struct.Reg, %struct.Reg* %182, i32 0, i32 0, !dbg !1607
  %184 = bitcast %union.Flags* %183 to i16*, !dbg !1607
  store i16* %184, i16** %R10W, align 8, !dbg !1603
  call void @llvm.dbg.declare(metadata i16** %R11W, metadata !1608, metadata !1370), !dbg !1609
  %185 = load %struct.State*, %struct.State** %state, align 8, !dbg !1610
  %186 = getelementptr inbounds %struct.State, %struct.State* %185, i32 0, i32 6, !dbg !1611
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 23, !dbg !1612
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !1613
  %189 = bitcast %union.Flags* %188 to i16*, !dbg !1613
  store i16* %189, i16** %R11W, align 8, !dbg !1609
  call void @llvm.dbg.declare(metadata i16** %R12W, metadata !1614, metadata !1370), !dbg !1615
  %190 = load %struct.State*, %struct.State** %state, align 8, !dbg !1616
  %191 = getelementptr inbounds %struct.State, %struct.State* %190, i32 0, i32 6, !dbg !1617
  %192 = getelementptr inbounds %struct.GPR, %struct.GPR* %191, i32 0, i32 25, !dbg !1618
  %193 = getelementptr inbounds %struct.Reg, %struct.Reg* %192, i32 0, i32 0, !dbg !1619
  %194 = bitcast %union.Flags* %193 to i16*, !dbg !1619
  store i16* %194, i16** %R12W, align 8, !dbg !1615
  call void @llvm.dbg.declare(metadata i16** %R13W, metadata !1620, metadata !1370), !dbg !1621
  %195 = load %struct.State*, %struct.State** %state, align 8, !dbg !1622
  %196 = getelementptr inbounds %struct.State, %struct.State* %195, i32 0, i32 6, !dbg !1623
  %197 = getelementptr inbounds %struct.GPR, %struct.GPR* %196, i32 0, i32 27, !dbg !1624
  %198 = getelementptr inbounds %struct.Reg, %struct.Reg* %197, i32 0, i32 0, !dbg !1625
  %199 = bitcast %union.Flags* %198 to i16*, !dbg !1625
  store i16* %199, i16** %R13W, align 8, !dbg !1621
  call void @llvm.dbg.declare(metadata i16** %R14W, metadata !1626, metadata !1370), !dbg !1627
  %200 = load %struct.State*, %struct.State** %state, align 8, !dbg !1628
  %201 = getelementptr inbounds %struct.State, %struct.State* %200, i32 0, i32 6, !dbg !1629
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 29, !dbg !1630
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !1631
  %204 = bitcast %union.Flags* %203 to i16*, !dbg !1631
  store i16* %204, i16** %R14W, align 8, !dbg !1627
  call void @llvm.dbg.declare(metadata i16** %R15W, metadata !1632, metadata !1370), !dbg !1633
  %205 = load %struct.State*, %struct.State** %state, align 8, !dbg !1634
  %206 = getelementptr inbounds %struct.State, %struct.State* %205, i32 0, i32 6, !dbg !1635
  %207 = getelementptr inbounds %struct.GPR, %struct.GPR* %206, i32 0, i32 31, !dbg !1636
  %208 = getelementptr inbounds %struct.Reg, %struct.Reg* %207, i32 0, i32 0, !dbg !1637
  %209 = bitcast %union.Flags* %208 to i16*, !dbg !1637
  store i16* %209, i16** %R15W, align 8, !dbg !1633
  call void @llvm.dbg.declare(metadata i16** %IP, metadata !1638, metadata !1370), !dbg !1639
  %210 = load %struct.State*, %struct.State** %state, align 8, !dbg !1640
  %211 = getelementptr inbounds %struct.State, %struct.State* %210, i32 0, i32 6, !dbg !1641
  %212 = getelementptr inbounds %struct.GPR, %struct.GPR* %211, i32 0, i32 33, !dbg !1642
  %213 = getelementptr inbounds %struct.Reg, %struct.Reg* %212, i32 0, i32 0, !dbg !1643
  %214 = bitcast %union.Flags* %213 to i16*, !dbg !1643
  store i16* %214, i16** %IP, align 8, !dbg !1639
  call void @llvm.dbg.declare(metadata i32** %EAX, metadata !1644, metadata !1370), !dbg !1646
  %215 = load %struct.State*, %struct.State** %state, align 8, !dbg !1647
  %216 = getelementptr inbounds %struct.State, %struct.State* %215, i32 0, i32 6, !dbg !1648
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 1, !dbg !1649
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !1650
  %219 = bitcast %union.Flags* %218 to i32*, !dbg !1650
  store i32* %219, i32** %EAX, align 8, !dbg !1646
  call void @llvm.dbg.declare(metadata i32** %EBX, metadata !1651, metadata !1370), !dbg !1652
  %220 = load %struct.State*, %struct.State** %state, align 8, !dbg !1653
  %221 = getelementptr inbounds %struct.State, %struct.State* %220, i32 0, i32 6, !dbg !1654
  %222 = getelementptr inbounds %struct.GPR, %struct.GPR* %221, i32 0, i32 3, !dbg !1655
  %223 = getelementptr inbounds %struct.Reg, %struct.Reg* %222, i32 0, i32 0, !dbg !1656
  %224 = bitcast %union.Flags* %223 to i32*, !dbg !1656
  store i32* %224, i32** %EBX, align 8, !dbg !1652
  call void @llvm.dbg.declare(metadata i32** %ECX, metadata !1657, metadata !1370), !dbg !1658
  %225 = load %struct.State*, %struct.State** %state, align 8, !dbg !1659
  %226 = getelementptr inbounds %struct.State, %struct.State* %225, i32 0, i32 6, !dbg !1660
  %227 = getelementptr inbounds %struct.GPR, %struct.GPR* %226, i32 0, i32 5, !dbg !1661
  %228 = getelementptr inbounds %struct.Reg, %struct.Reg* %227, i32 0, i32 0, !dbg !1662
  %229 = bitcast %union.Flags* %228 to i32*, !dbg !1662
  store i32* %229, i32** %ECX, align 8, !dbg !1658
  call void @llvm.dbg.declare(metadata i32** %EDX, metadata !1663, metadata !1370), !dbg !1664
  %230 = load %struct.State*, %struct.State** %state, align 8, !dbg !1665
  %231 = getelementptr inbounds %struct.State, %struct.State* %230, i32 0, i32 6, !dbg !1666
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 7, !dbg !1667
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !1668
  %234 = bitcast %union.Flags* %233 to i32*, !dbg !1668
  store i32* %234, i32** %EDX, align 8, !dbg !1664
  call void @llvm.dbg.declare(metadata i32** %ESI, metadata !1669, metadata !1370), !dbg !1670
  %235 = load %struct.State*, %struct.State** %state, align 8, !dbg !1671
  %236 = getelementptr inbounds %struct.State, %struct.State* %235, i32 0, i32 6, !dbg !1672
  %237 = getelementptr inbounds %struct.GPR, %struct.GPR* %236, i32 0, i32 9, !dbg !1673
  %238 = getelementptr inbounds %struct.Reg, %struct.Reg* %237, i32 0, i32 0, !dbg !1674
  %239 = bitcast %union.Flags* %238 to i32*, !dbg !1674
  store i32* %239, i32** %ESI, align 8, !dbg !1670
  call void @llvm.dbg.declare(metadata i32** %EDI, metadata !1675, metadata !1370), !dbg !1676
  %240 = load %struct.State*, %struct.State** %state, align 8, !dbg !1677
  %241 = getelementptr inbounds %struct.State, %struct.State* %240, i32 0, i32 6, !dbg !1678
  %242 = getelementptr inbounds %struct.GPR, %struct.GPR* %241, i32 0, i32 11, !dbg !1679
  %243 = getelementptr inbounds %struct.Reg, %struct.Reg* %242, i32 0, i32 0, !dbg !1680
  %244 = bitcast %union.Flags* %243 to i32*, !dbg !1680
  store i32* %244, i32** %EDI, align 8, !dbg !1676
  call void @llvm.dbg.declare(metadata i32** %ESP, metadata !1681, metadata !1370), !dbg !1682
  %245 = load %struct.State*, %struct.State** %state, align 8, !dbg !1683
  %246 = getelementptr inbounds %struct.State, %struct.State* %245, i32 0, i32 6, !dbg !1684
  %247 = getelementptr inbounds %struct.GPR, %struct.GPR* %246, i32 0, i32 13, !dbg !1685
  %248 = getelementptr inbounds %struct.Reg, %struct.Reg* %247, i32 0, i32 0, !dbg !1686
  %249 = bitcast %union.Flags* %248 to i32*, !dbg !1686
  store i32* %249, i32** %ESP, align 8, !dbg !1682
  call void @llvm.dbg.declare(metadata i32** %EBP, metadata !1687, metadata !1370), !dbg !1688
  %250 = load %struct.State*, %struct.State** %state, align 8, !dbg !1689
  %251 = getelementptr inbounds %struct.State, %struct.State* %250, i32 0, i32 6, !dbg !1690
  %252 = getelementptr inbounds %struct.GPR, %struct.GPR* %251, i32 0, i32 15, !dbg !1691
  %253 = getelementptr inbounds %struct.Reg, %struct.Reg* %252, i32 0, i32 0, !dbg !1692
  %254 = bitcast %union.Flags* %253 to i32*, !dbg !1692
  store i32* %254, i32** %EBP, align 8, !dbg !1688
  call void @llvm.dbg.declare(metadata i32** %EIP, metadata !1693, metadata !1370), !dbg !1694
  %255 = load %struct.State*, %struct.State** %state, align 8, !dbg !1695
  %256 = getelementptr inbounds %struct.State, %struct.State* %255, i32 0, i32 6, !dbg !1696
  %257 = getelementptr inbounds %struct.GPR, %struct.GPR* %256, i32 0, i32 33, !dbg !1697
  %258 = getelementptr inbounds %struct.Reg, %struct.Reg* %257, i32 0, i32 0, !dbg !1698
  %259 = bitcast %union.Flags* %258 to i32*, !dbg !1698
  store i32* %259, i32** %EIP, align 8, !dbg !1694
  call void @llvm.dbg.declare(metadata i32** %R8D, metadata !1699, metadata !1370), !dbg !1700
  %260 = load %struct.State*, %struct.State** %state, align 8, !dbg !1701
  %261 = getelementptr inbounds %struct.State, %struct.State* %260, i32 0, i32 6, !dbg !1702
  %262 = getelementptr inbounds %struct.GPR, %struct.GPR* %261, i32 0, i32 17, !dbg !1703
  %263 = getelementptr inbounds %struct.Reg, %struct.Reg* %262, i32 0, i32 0, !dbg !1704
  %264 = bitcast %union.Flags* %263 to i32*, !dbg !1704
  store i32* %264, i32** %R8D, align 8, !dbg !1700
  call void @llvm.dbg.declare(metadata i32** %R9D, metadata !1705, metadata !1370), !dbg !1706
  %265 = load %struct.State*, %struct.State** %state, align 8, !dbg !1707
  %266 = getelementptr inbounds %struct.State, %struct.State* %265, i32 0, i32 6, !dbg !1708
  %267 = getelementptr inbounds %struct.GPR, %struct.GPR* %266, i32 0, i32 19, !dbg !1709
  %268 = getelementptr inbounds %struct.Reg, %struct.Reg* %267, i32 0, i32 0, !dbg !1710
  %269 = bitcast %union.Flags* %268 to i32*, !dbg !1710
  store i32* %269, i32** %R9D, align 8, !dbg !1706
  call void @llvm.dbg.declare(metadata i32** %R10D, metadata !1711, metadata !1370), !dbg !1712
  %270 = load %struct.State*, %struct.State** %state, align 8, !dbg !1713
  %271 = getelementptr inbounds %struct.State, %struct.State* %270, i32 0, i32 6, !dbg !1714
  %272 = getelementptr inbounds %struct.GPR, %struct.GPR* %271, i32 0, i32 21, !dbg !1715
  %273 = getelementptr inbounds %struct.Reg, %struct.Reg* %272, i32 0, i32 0, !dbg !1716
  %274 = bitcast %union.Flags* %273 to i32*, !dbg !1716
  store i32* %274, i32** %R10D, align 8, !dbg !1712
  call void @llvm.dbg.declare(metadata i32** %R11D, metadata !1717, metadata !1370), !dbg !1718
  %275 = load %struct.State*, %struct.State** %state, align 8, !dbg !1719
  %276 = getelementptr inbounds %struct.State, %struct.State* %275, i32 0, i32 6, !dbg !1720
  %277 = getelementptr inbounds %struct.GPR, %struct.GPR* %276, i32 0, i32 23, !dbg !1721
  %278 = getelementptr inbounds %struct.Reg, %struct.Reg* %277, i32 0, i32 0, !dbg !1722
  %279 = bitcast %union.Flags* %278 to i32*, !dbg !1722
  store i32* %279, i32** %R11D, align 8, !dbg !1718
  call void @llvm.dbg.declare(metadata i32** %R12D, metadata !1723, metadata !1370), !dbg !1724
  %280 = load %struct.State*, %struct.State** %state, align 8, !dbg !1725
  %281 = getelementptr inbounds %struct.State, %struct.State* %280, i32 0, i32 6, !dbg !1726
  %282 = getelementptr inbounds %struct.GPR, %struct.GPR* %281, i32 0, i32 25, !dbg !1727
  %283 = getelementptr inbounds %struct.Reg, %struct.Reg* %282, i32 0, i32 0, !dbg !1728
  %284 = bitcast %union.Flags* %283 to i32*, !dbg !1728
  store i32* %284, i32** %R12D, align 8, !dbg !1724
  call void @llvm.dbg.declare(metadata i32** %R13D, metadata !1729, metadata !1370), !dbg !1730
  %285 = load %struct.State*, %struct.State** %state, align 8, !dbg !1731
  %286 = getelementptr inbounds %struct.State, %struct.State* %285, i32 0, i32 6, !dbg !1732
  %287 = getelementptr inbounds %struct.GPR, %struct.GPR* %286, i32 0, i32 27, !dbg !1733
  %288 = getelementptr inbounds %struct.Reg, %struct.Reg* %287, i32 0, i32 0, !dbg !1734
  %289 = bitcast %union.Flags* %288 to i32*, !dbg !1734
  store i32* %289, i32** %R13D, align 8, !dbg !1730
  call void @llvm.dbg.declare(metadata i32** %R14D, metadata !1735, metadata !1370), !dbg !1736
  %290 = load %struct.State*, %struct.State** %state, align 8, !dbg !1737
  %291 = getelementptr inbounds %struct.State, %struct.State* %290, i32 0, i32 6, !dbg !1738
  %292 = getelementptr inbounds %struct.GPR, %struct.GPR* %291, i32 0, i32 29, !dbg !1739
  %293 = getelementptr inbounds %struct.Reg, %struct.Reg* %292, i32 0, i32 0, !dbg !1740
  %294 = bitcast %union.Flags* %293 to i32*, !dbg !1740
  store i32* %294, i32** %R14D, align 8, !dbg !1736
  call void @llvm.dbg.declare(metadata i32** %R15D, metadata !1741, metadata !1370), !dbg !1742
  %295 = load %struct.State*, %struct.State** %state, align 8, !dbg !1743
  %296 = getelementptr inbounds %struct.State, %struct.State* %295, i32 0, i32 6, !dbg !1744
  %297 = getelementptr inbounds %struct.GPR, %struct.GPR* %296, i32 0, i32 31, !dbg !1745
  %298 = getelementptr inbounds %struct.Reg, %struct.Reg* %297, i32 0, i32 0, !dbg !1746
  %299 = bitcast %union.Flags* %298 to i32*, !dbg !1746
  store i32* %299, i32** %R15D, align 8, !dbg !1742
  call void @llvm.dbg.declare(metadata i64** %RAX, metadata !1747, metadata !1370), !dbg !1748
  %300 = load %struct.State*, %struct.State** %state, align 8, !dbg !1749
  %301 = getelementptr inbounds %struct.State, %struct.State* %300, i32 0, i32 6, !dbg !1750
  %302 = getelementptr inbounds %struct.GPR, %struct.GPR* %301, i32 0, i32 1, !dbg !1751
  %303 = getelementptr inbounds %struct.Reg, %struct.Reg* %302, i32 0, i32 0, !dbg !1752
  %304 = bitcast %union.Flags* %303 to i64*, !dbg !1752
  store i64* %304, i64** %RAX, align 8, !dbg !1748
  call void @llvm.dbg.declare(metadata i64** %RBX, metadata !1753, metadata !1370), !dbg !1754
  %305 = load %struct.State*, %struct.State** %state, align 8, !dbg !1755
  %306 = getelementptr inbounds %struct.State, %struct.State* %305, i32 0, i32 6, !dbg !1756
  %307 = getelementptr inbounds %struct.GPR, %struct.GPR* %306, i32 0, i32 3, !dbg !1757
  %308 = getelementptr inbounds %struct.Reg, %struct.Reg* %307, i32 0, i32 0, !dbg !1758
  %309 = bitcast %union.Flags* %308 to i64*, !dbg !1758
  store i64* %309, i64** %RBX, align 8, !dbg !1754
  call void @llvm.dbg.declare(metadata i64** %RCX, metadata !1759, metadata !1370), !dbg !1760
  %310 = load %struct.State*, %struct.State** %state, align 8, !dbg !1761
  %311 = getelementptr inbounds %struct.State, %struct.State* %310, i32 0, i32 6, !dbg !1762
  %312 = getelementptr inbounds %struct.GPR, %struct.GPR* %311, i32 0, i32 5, !dbg !1763
  %313 = getelementptr inbounds %struct.Reg, %struct.Reg* %312, i32 0, i32 0, !dbg !1764
  %314 = bitcast %union.Flags* %313 to i64*, !dbg !1764
  store i64* %314, i64** %RCX, align 8, !dbg !1760
  call void @llvm.dbg.declare(metadata i64** %RDX, metadata !1765, metadata !1370), !dbg !1766
  %315 = load %struct.State*, %struct.State** %state, align 8, !dbg !1767
  %316 = getelementptr inbounds %struct.State, %struct.State* %315, i32 0, i32 6, !dbg !1768
  %317 = getelementptr inbounds %struct.GPR, %struct.GPR* %316, i32 0, i32 7, !dbg !1769
  %318 = getelementptr inbounds %struct.Reg, %struct.Reg* %317, i32 0, i32 0, !dbg !1770
  %319 = bitcast %union.Flags* %318 to i64*, !dbg !1770
  store i64* %319, i64** %RDX, align 8, !dbg !1766
  call void @llvm.dbg.declare(metadata i64** %RSI, metadata !1771, metadata !1370), !dbg !1772
  %320 = load %struct.State*, %struct.State** %state, align 8, !dbg !1773
  %321 = getelementptr inbounds %struct.State, %struct.State* %320, i32 0, i32 6, !dbg !1774
  %322 = getelementptr inbounds %struct.GPR, %struct.GPR* %321, i32 0, i32 9, !dbg !1775
  %323 = getelementptr inbounds %struct.Reg, %struct.Reg* %322, i32 0, i32 0, !dbg !1776
  %324 = bitcast %union.Flags* %323 to i64*, !dbg !1776
  store i64* %324, i64** %RSI, align 8, !dbg !1772
  call void @llvm.dbg.declare(metadata i64** %RDI, metadata !1777, metadata !1370), !dbg !1778
  %325 = load %struct.State*, %struct.State** %state, align 8, !dbg !1779
  %326 = getelementptr inbounds %struct.State, %struct.State* %325, i32 0, i32 6, !dbg !1780
  %327 = getelementptr inbounds %struct.GPR, %struct.GPR* %326, i32 0, i32 11, !dbg !1781
  %328 = getelementptr inbounds %struct.Reg, %struct.Reg* %327, i32 0, i32 0, !dbg !1782
  %329 = bitcast %union.Flags* %328 to i64*, !dbg !1782
  store i64* %329, i64** %RDI, align 8, !dbg !1778
  call void @llvm.dbg.declare(metadata i64** %RSP, metadata !1783, metadata !1370), !dbg !1784
  %330 = load %struct.State*, %struct.State** %state, align 8, !dbg !1785
  %331 = getelementptr inbounds %struct.State, %struct.State* %330, i32 0, i32 6, !dbg !1786
  %332 = getelementptr inbounds %struct.GPR, %struct.GPR* %331, i32 0, i32 13, !dbg !1787
  %333 = getelementptr inbounds %struct.Reg, %struct.Reg* %332, i32 0, i32 0, !dbg !1788
  %334 = bitcast %union.Flags* %333 to i64*, !dbg !1788
  store i64* %334, i64** %RSP, align 8, !dbg !1784
  call void @llvm.dbg.declare(metadata i64** %RBP, metadata !1789, metadata !1370), !dbg !1790
  %335 = load %struct.State*, %struct.State** %state, align 8, !dbg !1791
  %336 = getelementptr inbounds %struct.State, %struct.State* %335, i32 0, i32 6, !dbg !1792
  %337 = getelementptr inbounds %struct.GPR, %struct.GPR* %336, i32 0, i32 15, !dbg !1793
  %338 = getelementptr inbounds %struct.Reg, %struct.Reg* %337, i32 0, i32 0, !dbg !1794
  %339 = bitcast %union.Flags* %338 to i64*, !dbg !1794
  store i64* %339, i64** %RBP, align 8, !dbg !1790
  call void @llvm.dbg.declare(metadata i64** %R8, metadata !1795, metadata !1370), !dbg !1796
  %340 = load %struct.State*, %struct.State** %state, align 8, !dbg !1797
  %341 = getelementptr inbounds %struct.State, %struct.State* %340, i32 0, i32 6, !dbg !1798
  %342 = getelementptr inbounds %struct.GPR, %struct.GPR* %341, i32 0, i32 17, !dbg !1799
  %343 = getelementptr inbounds %struct.Reg, %struct.Reg* %342, i32 0, i32 0, !dbg !1800
  %344 = bitcast %union.Flags* %343 to i64*, !dbg !1800
  store i64* %344, i64** %R8, align 8, !dbg !1796
  call void @llvm.dbg.declare(metadata i64** %R9, metadata !1801, metadata !1370), !dbg !1802
  %345 = load %struct.State*, %struct.State** %state, align 8, !dbg !1803
  %346 = getelementptr inbounds %struct.State, %struct.State* %345, i32 0, i32 6, !dbg !1804
  %347 = getelementptr inbounds %struct.GPR, %struct.GPR* %346, i32 0, i32 19, !dbg !1805
  %348 = getelementptr inbounds %struct.Reg, %struct.Reg* %347, i32 0, i32 0, !dbg !1806
  %349 = bitcast %union.Flags* %348 to i64*, !dbg !1806
  store i64* %349, i64** %R9, align 8, !dbg !1802
  call void @llvm.dbg.declare(metadata i64** %R10, metadata !1807, metadata !1370), !dbg !1808
  %350 = load %struct.State*, %struct.State** %state, align 8, !dbg !1809
  %351 = getelementptr inbounds %struct.State, %struct.State* %350, i32 0, i32 6, !dbg !1810
  %352 = getelementptr inbounds %struct.GPR, %struct.GPR* %351, i32 0, i32 21, !dbg !1811
  %353 = getelementptr inbounds %struct.Reg, %struct.Reg* %352, i32 0, i32 0, !dbg !1812
  %354 = bitcast %union.Flags* %353 to i64*, !dbg !1812
  store i64* %354, i64** %R10, align 8, !dbg !1808
  call void @llvm.dbg.declare(metadata i64** %R11, metadata !1813, metadata !1370), !dbg !1814
  %355 = load %struct.State*, %struct.State** %state, align 8, !dbg !1815
  %356 = getelementptr inbounds %struct.State, %struct.State* %355, i32 0, i32 6, !dbg !1816
  %357 = getelementptr inbounds %struct.GPR, %struct.GPR* %356, i32 0, i32 23, !dbg !1817
  %358 = getelementptr inbounds %struct.Reg, %struct.Reg* %357, i32 0, i32 0, !dbg !1818
  %359 = bitcast %union.Flags* %358 to i64*, !dbg !1818
  store i64* %359, i64** %R11, align 8, !dbg !1814
  call void @llvm.dbg.declare(metadata i64** %R12, metadata !1819, metadata !1370), !dbg !1820
  %360 = load %struct.State*, %struct.State** %state, align 8, !dbg !1821
  %361 = getelementptr inbounds %struct.State, %struct.State* %360, i32 0, i32 6, !dbg !1822
  %362 = getelementptr inbounds %struct.GPR, %struct.GPR* %361, i32 0, i32 25, !dbg !1823
  %363 = getelementptr inbounds %struct.Reg, %struct.Reg* %362, i32 0, i32 0, !dbg !1824
  %364 = bitcast %union.Flags* %363 to i64*, !dbg !1824
  store i64* %364, i64** %R12, align 8, !dbg !1820
  call void @llvm.dbg.declare(metadata i64** %R13, metadata !1825, metadata !1370), !dbg !1826
  %365 = load %struct.State*, %struct.State** %state, align 8, !dbg !1827
  %366 = getelementptr inbounds %struct.State, %struct.State* %365, i32 0, i32 6, !dbg !1828
  %367 = getelementptr inbounds %struct.GPR, %struct.GPR* %366, i32 0, i32 27, !dbg !1829
  %368 = getelementptr inbounds %struct.Reg, %struct.Reg* %367, i32 0, i32 0, !dbg !1830
  %369 = bitcast %union.Flags* %368 to i64*, !dbg !1830
  store i64* %369, i64** %R13, align 8, !dbg !1826
  call void @llvm.dbg.declare(metadata i64** %R14, metadata !1831, metadata !1370), !dbg !1832
  %370 = load %struct.State*, %struct.State** %state, align 8, !dbg !1833
  %371 = getelementptr inbounds %struct.State, %struct.State* %370, i32 0, i32 6, !dbg !1834
  %372 = getelementptr inbounds %struct.GPR, %struct.GPR* %371, i32 0, i32 29, !dbg !1835
  %373 = getelementptr inbounds %struct.Reg, %struct.Reg* %372, i32 0, i32 0, !dbg !1836
  %374 = bitcast %union.Flags* %373 to i64*, !dbg !1836
  store i64* %374, i64** %R14, align 8, !dbg !1832
  call void @llvm.dbg.declare(metadata i64** %R15, metadata !1837, metadata !1370), !dbg !1838
  %375 = load %struct.State*, %struct.State** %state, align 8, !dbg !1839
  %376 = getelementptr inbounds %struct.State, %struct.State* %375, i32 0, i32 6, !dbg !1840
  %377 = getelementptr inbounds %struct.GPR, %struct.GPR* %376, i32 0, i32 31, !dbg !1841
  %378 = getelementptr inbounds %struct.Reg, %struct.Reg* %377, i32 0, i32 0, !dbg !1842
  %379 = bitcast %union.Flags* %378 to i64*, !dbg !1842
  store i64* %379, i64** %R15, align 8, !dbg !1838
  call void @llvm.dbg.declare(metadata i64** %RIP, metadata !1843, metadata !1370), !dbg !1844
  %380 = load %struct.State*, %struct.State** %state, align 8, !dbg !1845
  %381 = getelementptr inbounds %struct.State, %struct.State* %380, i32 0, i32 6, !dbg !1846
  %382 = getelementptr inbounds %struct.GPR, %struct.GPR* %381, i32 0, i32 33, !dbg !1847
  %383 = getelementptr inbounds %struct.Reg, %struct.Reg* %382, i32 0, i32 0, !dbg !1848
  %384 = bitcast %union.Flags* %383 to i64*, !dbg !1848
  store i64* %384, i64** %RIP, align 8, !dbg !1844
  call void @llvm.dbg.declare(metadata i16** %SS, metadata !1849, metadata !1370), !dbg !1850
  %385 = load %struct.State*, %struct.State** %state, align 8, !dbg !1851
  %386 = getelementptr inbounds %struct.State, %struct.State* %385, i32 0, i32 4, !dbg !1852
  %387 = getelementptr inbounds %struct.Segments, %struct.Segments* %386, i32 0, i32 1, !dbg !1853
  %388 = bitcast %union.SegmentSelector* %387 to i16*, !dbg !1854
  store i16* %388, i16** %SS, align 8, !dbg !1850
  call void @llvm.dbg.declare(metadata i16** %ES, metadata !1855, metadata !1370), !dbg !1856
  %389 = load %struct.State*, %struct.State** %state, align 8, !dbg !1857
  %390 = getelementptr inbounds %struct.State, %struct.State* %389, i32 0, i32 4, !dbg !1858
  %391 = getelementptr inbounds %struct.Segments, %struct.Segments* %390, i32 0, i32 3, !dbg !1859
  %392 = bitcast %union.SegmentSelector* %391 to i16*, !dbg !1860
  store i16* %392, i16** %ES, align 8, !dbg !1856
  call void @llvm.dbg.declare(metadata i16** %GS, metadata !1861, metadata !1370), !dbg !1862
  %393 = load %struct.State*, %struct.State** %state, align 8, !dbg !1863
  %394 = getelementptr inbounds %struct.State, %struct.State* %393, i32 0, i32 4, !dbg !1864
  %395 = getelementptr inbounds %struct.Segments, %struct.Segments* %394, i32 0, i32 5, !dbg !1865
  %396 = bitcast %union.SegmentSelector* %395 to i16*, !dbg !1866
  store i16* %396, i16** %GS, align 8, !dbg !1862
  call void @llvm.dbg.declare(metadata i16** %FS, metadata !1867, metadata !1370), !dbg !1868
  %397 = load %struct.State*, %struct.State** %state, align 8, !dbg !1869
  %398 = getelementptr inbounds %struct.State, %struct.State* %397, i32 0, i32 4, !dbg !1870
  %399 = getelementptr inbounds %struct.Segments, %struct.Segments* %398, i32 0, i32 7, !dbg !1871
  %400 = bitcast %union.SegmentSelector* %399 to i16*, !dbg !1872
  store i16* %400, i16** %FS, align 8, !dbg !1868
  call void @llvm.dbg.declare(metadata i16** %DS, metadata !1873, metadata !1370), !dbg !1874
  %401 = load %struct.State*, %struct.State** %state, align 8, !dbg !1875
  %402 = getelementptr inbounds %struct.State, %struct.State* %401, i32 0, i32 4, !dbg !1876
  %403 = getelementptr inbounds %struct.Segments, %struct.Segments* %402, i32 0, i32 9, !dbg !1877
  %404 = bitcast %union.SegmentSelector* %403 to i16*, !dbg !1878
  store i16* %404, i16** %DS, align 8, !dbg !1874
  call void @llvm.dbg.declare(metadata i16** %CS, metadata !1879, metadata !1370), !dbg !1880
  %405 = load %struct.State*, %struct.State** %state, align 8, !dbg !1881
  %406 = getelementptr inbounds %struct.State, %struct.State* %405, i32 0, i32 4, !dbg !1882
  %407 = getelementptr inbounds %struct.Segments, %struct.Segments* %406, i32 0, i32 11, !dbg !1883
  %408 = bitcast %union.SegmentSelector* %407 to i16*, !dbg !1884
  store i16* %408, i16** %CS, align 8, !dbg !1880
  call void @llvm.dbg.declare(metadata i64** %SS_BASE, metadata !1885, metadata !1370), !dbg !1886
  store i64* %zero, i64** %SS_BASE, align 8, !dbg !1886
  call void @llvm.dbg.declare(metadata i64** %ES_BASE, metadata !1887, metadata !1370), !dbg !1888
  store i64* %zero, i64** %ES_BASE, align 8, !dbg !1888
  call void @llvm.dbg.declare(metadata i64** %GS_BASE, metadata !1889, metadata !1370), !dbg !1890
  %409 = load %struct.State*, %struct.State** %state, align 8, !dbg !1891
  %410 = getelementptr inbounds %struct.State, %struct.State* %409, i32 0, i32 5, !dbg !1892
  %411 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %410, i32 0, i32 3, !dbg !1893
  %412 = getelementptr inbounds %struct.Reg, %struct.Reg* %411, i32 0, i32 0, !dbg !1894
  %413 = bitcast %union.Flags* %412 to i64*, !dbg !1894
  store i64* %413, i64** %GS_BASE, align 8, !dbg !1890
  call void @llvm.dbg.declare(metadata i64** %FS_BASE, metadata !1895, metadata !1370), !dbg !1896
  %414 = load %struct.State*, %struct.State** %state, align 8, !dbg !1897
  %415 = getelementptr inbounds %struct.State, %struct.State* %414, i32 0, i32 5, !dbg !1898
  %416 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %415, i32 0, i32 1, !dbg !1899
  %417 = getelementptr inbounds %struct.Reg, %struct.Reg* %416, i32 0, i32 0, !dbg !1900
  %418 = bitcast %union.Flags* %417 to i64*, !dbg !1900
  store i64* %418, i64** %FS_BASE, align 8, !dbg !1896
  call void @llvm.dbg.declare(metadata i64** %DS_BASE, metadata !1901, metadata !1370), !dbg !1902
  store i64* %zero, i64** %DS_BASE, align 8, !dbg !1902
  call void @llvm.dbg.declare(metadata i64** %CS_BASE, metadata !1903, metadata !1370), !dbg !1904
  store i64* %zero, i64** %CS_BASE, align 8, !dbg !1904
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM0, metadata !1905, metadata !1370), !dbg !1907
  %419 = load %struct.State*, %struct.State** %state, align 8, !dbg !1908
  %420 = getelementptr inbounds %struct.State, %struct.State* %419, i32 0, i32 1, !dbg !1909
  %421 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %420, i64 0, i64 0, !dbg !1908
  %422 = bitcast %union.VectorReg* %421 to %union.vec128_t*, !dbg !1910
  store %union.vec128_t* %422, %union.vec128_t** %XMM0, align 8, !dbg !1907
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM1, metadata !1911, metadata !1370), !dbg !1912
  %423 = load %struct.State*, %struct.State** %state, align 8, !dbg !1913
  %424 = getelementptr inbounds %struct.State, %struct.State* %423, i32 0, i32 1, !dbg !1914
  %425 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %424, i64 0, i64 1, !dbg !1913
  %426 = bitcast %union.VectorReg* %425 to %union.vec128_t*, !dbg !1915
  store %union.vec128_t* %426, %union.vec128_t** %XMM1, align 8, !dbg !1912
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM2, metadata !1916, metadata !1370), !dbg !1917
  %427 = load %struct.State*, %struct.State** %state, align 8, !dbg !1918
  %428 = getelementptr inbounds %struct.State, %struct.State* %427, i32 0, i32 1, !dbg !1919
  %429 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %428, i64 0, i64 2, !dbg !1918
  %430 = bitcast %union.VectorReg* %429 to %union.vec128_t*, !dbg !1920
  store %union.vec128_t* %430, %union.vec128_t** %XMM2, align 8, !dbg !1917
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM3, metadata !1921, metadata !1370), !dbg !1922
  %431 = load %struct.State*, %struct.State** %state, align 8, !dbg !1923
  %432 = getelementptr inbounds %struct.State, %struct.State* %431, i32 0, i32 1, !dbg !1924
  %433 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %432, i64 0, i64 3, !dbg !1923
  %434 = bitcast %union.VectorReg* %433 to %union.vec128_t*, !dbg !1925
  store %union.vec128_t* %434, %union.vec128_t** %XMM3, align 8, !dbg !1922
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM4, metadata !1926, metadata !1370), !dbg !1927
  %435 = load %struct.State*, %struct.State** %state, align 8, !dbg !1928
  %436 = getelementptr inbounds %struct.State, %struct.State* %435, i32 0, i32 1, !dbg !1929
  %437 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %436, i64 0, i64 4, !dbg !1928
  %438 = bitcast %union.VectorReg* %437 to %union.vec128_t*, !dbg !1930
  store %union.vec128_t* %438, %union.vec128_t** %XMM4, align 8, !dbg !1927
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM5, metadata !1931, metadata !1370), !dbg !1932
  %439 = load %struct.State*, %struct.State** %state, align 8, !dbg !1933
  %440 = getelementptr inbounds %struct.State, %struct.State* %439, i32 0, i32 1, !dbg !1934
  %441 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %440, i64 0, i64 5, !dbg !1933
  %442 = bitcast %union.VectorReg* %441 to %union.vec128_t*, !dbg !1935
  store %union.vec128_t* %442, %union.vec128_t** %XMM5, align 8, !dbg !1932
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM6, metadata !1936, metadata !1370), !dbg !1937
  %443 = load %struct.State*, %struct.State** %state, align 8, !dbg !1938
  %444 = getelementptr inbounds %struct.State, %struct.State* %443, i32 0, i32 1, !dbg !1939
  %445 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %444, i64 0, i64 6, !dbg !1938
  %446 = bitcast %union.VectorReg* %445 to %union.vec128_t*, !dbg !1940
  store %union.vec128_t* %446, %union.vec128_t** %XMM6, align 8, !dbg !1937
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM7, metadata !1941, metadata !1370), !dbg !1942
  %447 = load %struct.State*, %struct.State** %state, align 8, !dbg !1943
  %448 = getelementptr inbounds %struct.State, %struct.State* %447, i32 0, i32 1, !dbg !1944
  %449 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %448, i64 0, i64 7, !dbg !1943
  %450 = bitcast %union.VectorReg* %449 to %union.vec128_t*, !dbg !1945
  store %union.vec128_t* %450, %union.vec128_t** %XMM7, align 8, !dbg !1942
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM8, metadata !1946, metadata !1370), !dbg !1947
  %451 = load %struct.State*, %struct.State** %state, align 8, !dbg !1948
  %452 = getelementptr inbounds %struct.State, %struct.State* %451, i32 0, i32 1, !dbg !1949
  %453 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %452, i64 0, i64 8, !dbg !1948
  %454 = bitcast %union.VectorReg* %453 to %union.vec128_t*, !dbg !1950
  store %union.vec128_t* %454, %union.vec128_t** %XMM8, align 8, !dbg !1947
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM9, metadata !1951, metadata !1370), !dbg !1952
  %455 = load %struct.State*, %struct.State** %state, align 8, !dbg !1953
  %456 = getelementptr inbounds %struct.State, %struct.State* %455, i32 0, i32 1, !dbg !1954
  %457 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %456, i64 0, i64 9, !dbg !1953
  %458 = bitcast %union.VectorReg* %457 to %union.vec128_t*, !dbg !1955
  store %union.vec128_t* %458, %union.vec128_t** %XMM9, align 8, !dbg !1952
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM10, metadata !1956, metadata !1370), !dbg !1957
  %459 = load %struct.State*, %struct.State** %state, align 8, !dbg !1958
  %460 = getelementptr inbounds %struct.State, %struct.State* %459, i32 0, i32 1, !dbg !1959
  %461 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %460, i64 0, i64 10, !dbg !1958
  %462 = bitcast %union.VectorReg* %461 to %union.vec128_t*, !dbg !1960
  store %union.vec128_t* %462, %union.vec128_t** %XMM10, align 8, !dbg !1957
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM11, metadata !1961, metadata !1370), !dbg !1962
  %463 = load %struct.State*, %struct.State** %state, align 8, !dbg !1963
  %464 = getelementptr inbounds %struct.State, %struct.State* %463, i32 0, i32 1, !dbg !1964
  %465 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %464, i64 0, i64 11, !dbg !1963
  %466 = bitcast %union.VectorReg* %465 to %union.vec128_t*, !dbg !1965
  store %union.vec128_t* %466, %union.vec128_t** %XMM11, align 8, !dbg !1962
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM12, metadata !1966, metadata !1370), !dbg !1967
  %467 = load %struct.State*, %struct.State** %state, align 8, !dbg !1968
  %468 = getelementptr inbounds %struct.State, %struct.State* %467, i32 0, i32 1, !dbg !1969
  %469 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %468, i64 0, i64 12, !dbg !1968
  %470 = bitcast %union.VectorReg* %469 to %union.vec128_t*, !dbg !1970
  store %union.vec128_t* %470, %union.vec128_t** %XMM12, align 8, !dbg !1967
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM13, metadata !1971, metadata !1370), !dbg !1972
  %471 = load %struct.State*, %struct.State** %state, align 8, !dbg !1973
  %472 = getelementptr inbounds %struct.State, %struct.State* %471, i32 0, i32 1, !dbg !1974
  %473 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %472, i64 0, i64 13, !dbg !1973
  %474 = bitcast %union.VectorReg* %473 to %union.vec128_t*, !dbg !1975
  store %union.vec128_t* %474, %union.vec128_t** %XMM13, align 8, !dbg !1972
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM14, metadata !1976, metadata !1370), !dbg !1977
  %475 = load %struct.State*, %struct.State** %state, align 8, !dbg !1978
  %476 = getelementptr inbounds %struct.State, %struct.State* %475, i32 0, i32 1, !dbg !1979
  %477 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %476, i64 0, i64 14, !dbg !1978
  %478 = bitcast %union.VectorReg* %477 to %union.vec128_t*, !dbg !1980
  store %union.vec128_t* %478, %union.vec128_t** %XMM14, align 8, !dbg !1977
  call void @llvm.dbg.declare(metadata %union.vec128_t** %XMM15, metadata !1981, metadata !1370), !dbg !1982
  %479 = load %struct.State*, %struct.State** %state, align 8, !dbg !1983
  %480 = getelementptr inbounds %struct.State, %struct.State* %479, i32 0, i32 1, !dbg !1984
  %481 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %480, i64 0, i64 15, !dbg !1983
  %482 = bitcast %union.VectorReg* %481 to %union.vec128_t*, !dbg !1985
  store %union.vec128_t* %482, %union.vec128_t** %XMM15, align 8, !dbg !1982
  call void @llvm.dbg.declare(metadata double** %ST0, metadata !1986, metadata !1370), !dbg !1988
  %483 = load %struct.State*, %struct.State** %state, align 8, !dbg !1989
  %484 = getelementptr inbounds %struct.State, %struct.State* %483, i32 0, i32 7, !dbg !1990
  %485 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %484, i32 0, i32 0, !dbg !1991
  %486 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %485, i64 0, i64 0, !dbg !1989
  %487 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %486, i32 0, i32 1, !dbg !1992
  store double* %487, double** %ST0, align 8, !dbg !1988
  call void @llvm.dbg.declare(metadata double** %ST1, metadata !1993, metadata !1370), !dbg !1994
  %488 = load %struct.State*, %struct.State** %state, align 8, !dbg !1995
  %489 = getelementptr inbounds %struct.State, %struct.State* %488, i32 0, i32 7, !dbg !1996
  %490 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %489, i32 0, i32 0, !dbg !1997
  %491 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %490, i64 0, i64 1, !dbg !1995
  %492 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %491, i32 0, i32 1, !dbg !1998
  store double* %492, double** %ST1, align 8, !dbg !1994
  call void @llvm.dbg.declare(metadata double** %ST2, metadata !1999, metadata !1370), !dbg !2000
  %493 = load %struct.State*, %struct.State** %state, align 8, !dbg !2001
  %494 = getelementptr inbounds %struct.State, %struct.State* %493, i32 0, i32 7, !dbg !2002
  %495 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %494, i32 0, i32 0, !dbg !2003
  %496 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %495, i64 0, i64 2, !dbg !2001
  %497 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %496, i32 0, i32 1, !dbg !2004
  store double* %497, double** %ST2, align 8, !dbg !2000
  call void @llvm.dbg.declare(metadata double** %ST3, metadata !2005, metadata !1370), !dbg !2006
  %498 = load %struct.State*, %struct.State** %state, align 8, !dbg !2007
  %499 = getelementptr inbounds %struct.State, %struct.State* %498, i32 0, i32 7, !dbg !2008
  %500 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %499, i32 0, i32 0, !dbg !2009
  %501 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %500, i64 0, i64 3, !dbg !2007
  %502 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %501, i32 0, i32 1, !dbg !2010
  store double* %502, double** %ST3, align 8, !dbg !2006
  call void @llvm.dbg.declare(metadata double** %ST4, metadata !2011, metadata !1370), !dbg !2012
  %503 = load %struct.State*, %struct.State** %state, align 8, !dbg !2013
  %504 = getelementptr inbounds %struct.State, %struct.State* %503, i32 0, i32 7, !dbg !2014
  %505 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %504, i32 0, i32 0, !dbg !2015
  %506 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %505, i64 0, i64 4, !dbg !2013
  %507 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %506, i32 0, i32 1, !dbg !2016
  store double* %507, double** %ST4, align 8, !dbg !2012
  call void @llvm.dbg.declare(metadata double** %ST5, metadata !2017, metadata !1370), !dbg !2018
  %508 = load %struct.State*, %struct.State** %state, align 8, !dbg !2019
  %509 = getelementptr inbounds %struct.State, %struct.State* %508, i32 0, i32 7, !dbg !2020
  %510 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %509, i32 0, i32 0, !dbg !2021
  %511 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %510, i64 0, i64 5, !dbg !2019
  %512 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %511, i32 0, i32 1, !dbg !2022
  store double* %512, double** %ST5, align 8, !dbg !2018
  call void @llvm.dbg.declare(metadata double** %ST6, metadata !2023, metadata !1370), !dbg !2024
  %513 = load %struct.State*, %struct.State** %state, align 8, !dbg !2025
  %514 = getelementptr inbounds %struct.State, %struct.State* %513, i32 0, i32 7, !dbg !2026
  %515 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %514, i32 0, i32 0, !dbg !2027
  %516 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %515, i64 0, i64 6, !dbg !2025
  %517 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %516, i32 0, i32 1, !dbg !2028
  store double* %517, double** %ST6, align 8, !dbg !2024
  call void @llvm.dbg.declare(metadata double** %ST7, metadata !2029, metadata !1370), !dbg !2030
  %518 = load %struct.State*, %struct.State** %state, align 8, !dbg !2031
  %519 = getelementptr inbounds %struct.State, %struct.State* %518, i32 0, i32 7, !dbg !2032
  %520 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %519, i32 0, i32 0, !dbg !2033
  %521 = getelementptr inbounds [8 x %struct.anon.2], [8 x %struct.anon.2]* %520, i64 0, i64 7, !dbg !2031
  %522 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %521, i32 0, i32 1, !dbg !2034
  store double* %522, double** %ST7, align 8, !dbg !2030
  call void @llvm.dbg.declare(metadata i64** %MMX0, metadata !2035, metadata !1370), !dbg !2036
  %523 = load %struct.State*, %struct.State** %state, align 8, !dbg !2037
  %524 = getelementptr inbounds %struct.State, %struct.State* %523, i32 0, i32 8, !dbg !2038
  %525 = getelementptr inbounds %struct.MMX, %struct.MMX* %524, i32 0, i32 0, !dbg !2039
  %526 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %525, i64 0, i64 0, !dbg !2037
  %527 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %526, i32 0, i32 1, !dbg !2040
  %528 = bitcast %union.vec64_t* %527 to %struct.uint64v1_t*, !dbg !2041
  %529 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %528, i32 0, i32 0, !dbg !2042
  %530 = getelementptr inbounds [1 x i64], [1 x i64]* %529, i64 0, i64 0, !dbg !2037
  store i64* %530, i64** %MMX0, align 8, !dbg !2036
  call void @llvm.dbg.declare(metadata i64** %MMX1, metadata !2043, metadata !1370), !dbg !2044
  %531 = load %struct.State*, %struct.State** %state, align 8, !dbg !2045
  %532 = getelementptr inbounds %struct.State, %struct.State* %531, i32 0, i32 8, !dbg !2046
  %533 = getelementptr inbounds %struct.MMX, %struct.MMX* %532, i32 0, i32 0, !dbg !2047
  %534 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %533, i64 0, i64 1, !dbg !2045
  %535 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %534, i32 0, i32 1, !dbg !2048
  %536 = bitcast %union.vec64_t* %535 to %struct.uint64v1_t*, !dbg !2049
  %537 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %536, i32 0, i32 0, !dbg !2050
  %538 = getelementptr inbounds [1 x i64], [1 x i64]* %537, i64 0, i64 0, !dbg !2045
  store i64* %538, i64** %MMX1, align 8, !dbg !2044
  call void @llvm.dbg.declare(metadata i64** %MMX2, metadata !2051, metadata !1370), !dbg !2052
  %539 = load %struct.State*, %struct.State** %state, align 8, !dbg !2053
  %540 = getelementptr inbounds %struct.State, %struct.State* %539, i32 0, i32 8, !dbg !2054
  %541 = getelementptr inbounds %struct.MMX, %struct.MMX* %540, i32 0, i32 0, !dbg !2055
  %542 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %541, i64 0, i64 2, !dbg !2053
  %543 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %542, i32 0, i32 1, !dbg !2056
  %544 = bitcast %union.vec64_t* %543 to %struct.uint64v1_t*, !dbg !2057
  %545 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %544, i32 0, i32 0, !dbg !2058
  %546 = getelementptr inbounds [1 x i64], [1 x i64]* %545, i64 0, i64 0, !dbg !2053
  store i64* %546, i64** %MMX2, align 8, !dbg !2052
  call void @llvm.dbg.declare(metadata i64** %MMX3, metadata !2059, metadata !1370), !dbg !2060
  %547 = load %struct.State*, %struct.State** %state, align 8, !dbg !2061
  %548 = getelementptr inbounds %struct.State, %struct.State* %547, i32 0, i32 8, !dbg !2062
  %549 = getelementptr inbounds %struct.MMX, %struct.MMX* %548, i32 0, i32 0, !dbg !2063
  %550 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %549, i64 0, i64 3, !dbg !2061
  %551 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %550, i32 0, i32 1, !dbg !2064
  %552 = bitcast %union.vec64_t* %551 to %struct.uint64v1_t*, !dbg !2065
  %553 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %552, i32 0, i32 0, !dbg !2066
  %554 = getelementptr inbounds [1 x i64], [1 x i64]* %553, i64 0, i64 0, !dbg !2061
  store i64* %554, i64** %MMX3, align 8, !dbg !2060
  call void @llvm.dbg.declare(metadata i64** %MMX4, metadata !2067, metadata !1370), !dbg !2068
  %555 = load %struct.State*, %struct.State** %state, align 8, !dbg !2069
  %556 = getelementptr inbounds %struct.State, %struct.State* %555, i32 0, i32 8, !dbg !2070
  %557 = getelementptr inbounds %struct.MMX, %struct.MMX* %556, i32 0, i32 0, !dbg !2071
  %558 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %557, i64 0, i64 4, !dbg !2069
  %559 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %558, i32 0, i32 1, !dbg !2072
  %560 = bitcast %union.vec64_t* %559 to %struct.uint64v1_t*, !dbg !2073
  %561 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %560, i32 0, i32 0, !dbg !2074
  %562 = getelementptr inbounds [1 x i64], [1 x i64]* %561, i64 0, i64 0, !dbg !2069
  store i64* %562, i64** %MMX4, align 8, !dbg !2068
  call void @llvm.dbg.declare(metadata i64** %MMX5, metadata !2075, metadata !1370), !dbg !2076
  %563 = load %struct.State*, %struct.State** %state, align 8, !dbg !2077
  %564 = getelementptr inbounds %struct.State, %struct.State* %563, i32 0, i32 8, !dbg !2078
  %565 = getelementptr inbounds %struct.MMX, %struct.MMX* %564, i32 0, i32 0, !dbg !2079
  %566 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %565, i64 0, i64 5, !dbg !2077
  %567 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %566, i32 0, i32 1, !dbg !2080
  %568 = bitcast %union.vec64_t* %567 to %struct.uint64v1_t*, !dbg !2081
  %569 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %568, i32 0, i32 0, !dbg !2082
  %570 = getelementptr inbounds [1 x i64], [1 x i64]* %569, i64 0, i64 0, !dbg !2077
  store i64* %570, i64** %MMX5, align 8, !dbg !2076
  call void @llvm.dbg.declare(metadata i64** %MMX6, metadata !2083, metadata !1370), !dbg !2084
  %571 = load %struct.State*, %struct.State** %state, align 8, !dbg !2085
  %572 = getelementptr inbounds %struct.State, %struct.State* %571, i32 0, i32 8, !dbg !2086
  %573 = getelementptr inbounds %struct.MMX, %struct.MMX* %572, i32 0, i32 0, !dbg !2087
  %574 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %573, i64 0, i64 6, !dbg !2085
  %575 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %574, i32 0, i32 1, !dbg !2088
  %576 = bitcast %union.vec64_t* %575 to %struct.uint64v1_t*, !dbg !2089
  %577 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %576, i32 0, i32 0, !dbg !2090
  %578 = getelementptr inbounds [1 x i64], [1 x i64]* %577, i64 0, i64 0, !dbg !2085
  store i64* %578, i64** %MMX6, align 8, !dbg !2084
  call void @llvm.dbg.declare(metadata i64** %MMX7, metadata !2091, metadata !1370), !dbg !2092
  %579 = load %struct.State*, %struct.State** %state, align 8, !dbg !2093
  %580 = getelementptr inbounds %struct.State, %struct.State* %579, i32 0, i32 8, !dbg !2094
  %581 = getelementptr inbounds %struct.MMX, %struct.MMX* %580, i32 0, i32 0, !dbg !2095
  %582 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %581, i64 0, i64 7, !dbg !2093
  %583 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %582, i32 0, i32 1, !dbg !2096
  %584 = bitcast %union.vec64_t* %583 to %struct.uint64v1_t*, !dbg !2097
  %585 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %584, i32 0, i32 0, !dbg !2098
  %586 = getelementptr inbounds [1 x i64], [1 x i64]* %585, i64 0, i64 0, !dbg !2093
  store i64* %586, i64** %MMX7, align 8, !dbg !2092
  call void @llvm.dbg.declare(metadata i8** %AF, metadata !2099, metadata !1370), !dbg !2100
  %587 = load %struct.State*, %struct.State** %state, align 8, !dbg !2101
  %588 = getelementptr inbounds %struct.State, %struct.State* %587, i32 0, i32 2, !dbg !2102
  %589 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %588, i32 0, i32 5, !dbg !2103
  store i8* %589, i8** %AF, align 8, !dbg !2100
  call void @llvm.dbg.declare(metadata i8** %CF, metadata !2104, metadata !1370), !dbg !2105
  %590 = load %struct.State*, %struct.State** %state, align 8, !dbg !2106
  %591 = getelementptr inbounds %struct.State, %struct.State* %590, i32 0, i32 2, !dbg !2107
  %592 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %591, i32 0, i32 1, !dbg !2108
  store i8* %592, i8** %CF, align 8, !dbg !2105
  call void @llvm.dbg.declare(metadata i8** %DF, metadata !2109, metadata !1370), !dbg !2110
  %593 = load %struct.State*, %struct.State** %state, align 8, !dbg !2111
  %594 = getelementptr inbounds %struct.State, %struct.State* %593, i32 0, i32 2, !dbg !2112
  %595 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %594, i32 0, i32 11, !dbg !2113
  store i8* %595, i8** %DF, align 8, !dbg !2110
  call void @llvm.dbg.declare(metadata i8** %OF, metadata !2114, metadata !1370), !dbg !2115
  %596 = load %struct.State*, %struct.State** %state, align 8, !dbg !2116
  %597 = getelementptr inbounds %struct.State, %struct.State* %596, i32 0, i32 2, !dbg !2117
  %598 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %597, i32 0, i32 13, !dbg !2118
  store i8* %598, i8** %OF, align 8, !dbg !2115
  call void @llvm.dbg.declare(metadata i8** %PF, metadata !2119, metadata !1370), !dbg !2120
  %599 = load %struct.State*, %struct.State** %state, align 8, !dbg !2121
  %600 = getelementptr inbounds %struct.State, %struct.State* %599, i32 0, i32 2, !dbg !2122
  %601 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %600, i32 0, i32 3, !dbg !2123
  store i8* %601, i8** %PF, align 8, !dbg !2120
  call void @llvm.dbg.declare(metadata i8** %SF, metadata !2124, metadata !1370), !dbg !2125
  %602 = load %struct.State*, %struct.State** %state, align 8, !dbg !2126
  %603 = getelementptr inbounds %struct.State, %struct.State* %602, i32 0, i32 2, !dbg !2127
  %604 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %603, i32 0, i32 9, !dbg !2128
  store i8* %604, i8** %SF, align 8, !dbg !2125
  call void @llvm.dbg.declare(metadata i8** %ZF, metadata !2129, metadata !1370), !dbg !2130
  %605 = load %struct.State*, %struct.State** %state, align 8, !dbg !2131
  %606 = getelementptr inbounds %struct.State, %struct.State* %605, i32 0, i32 2, !dbg !2132
  %607 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %606, i32 0, i32 7, !dbg !2133
  store i8* %607, i8** %ZF, align 8, !dbg !2130
  %608 = load %struct.Memory*, %struct.Memory** %memory, align 8, !dbg !2134
  ret %struct.Memory* %608, !dbg !2135
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #14 !dbg !2136 {
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_basic_block to i8*)) #28, !dbg !2138
  call void @__remill_mark_as_used(i8* bitcast (i8 (%struct.Memory*, i64)* @__remill_read_memory_8 to i8*)) #28, !dbg !2139
  call void @__remill_mark_as_used(i8* bitcast (i16 (%struct.Memory*, i64)* @__remill_read_memory_16 to i8*)) #28, !dbg !2140
  call void @__remill_mark_as_used(i8* bitcast (i32 (%struct.Memory*, i64)* @__remill_read_memory_32 to i8*)) #28, !dbg !2141
  call void @__remill_mark_as_used(i8* bitcast (i64 (%struct.Memory*, i64)* @__remill_read_memory_64 to i8*)) #28, !dbg !2142
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, i8)* @__remill_write_memory_8 to i8*)) #28, !dbg !2143
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, i16)* @__remill_write_memory_16 to i8*)) #28, !dbg !2144
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, i32)* @__remill_write_memory_32 to i8*)) #28, !dbg !2145
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, i64)* @__remill_write_memory_64 to i8*)) #28, !dbg !2146
  call void @__remill_mark_as_used(i8* bitcast (float (%struct.Memory*, i64)* @__remill_read_memory_f32 to i8*)) #28, !dbg !2147
  call void @__remill_mark_as_used(i8* bitcast (double (%struct.Memory*, i64)* @__remill_read_memory_f64 to i8*)) #28, !dbg !2148
  call void @__remill_mark_as_used(i8* bitcast (double (%struct.Memory*, i64)* @__remill_read_memory_f80 to i8*)) #28, !dbg !2149
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, float)* @__remill_write_memory_f32 to i8*)) #28, !dbg !2150
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, double)* @__remill_write_memory_f64 to i8*)) #28, !dbg !2151
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*, i64, double)* @__remill_write_memory_f80 to i8*)) #28, !dbg !2152
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*)* @__remill_barrier_load_load to i8*)) #28, !dbg !2153
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*)* @__remill_barrier_load_store to i8*)) #28, !dbg !2154
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*)* @__remill_barrier_store_load to i8*)) #28, !dbg !2155
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*)* @__remill_barrier_store_store to i8*)) #28, !dbg !2156
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*)* @__remill_atomic_begin to i8*)) #28, !dbg !2157
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.Memory*)* @__remill_atomic_end to i8*)) #28, !dbg !2158
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_error to i8*)) #28, !dbg !2159
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_function_call to i8*)) #28, !dbg !2160
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_function_return to i8*)) #28, !dbg !2161
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_jump to i8*)) #28, !dbg !2162
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_missing_block to i8*)) #28, !dbg !2163
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, i64, %struct.Memory*)* @__remill_async_hyper_call to i8*)) #28, !dbg !2164
  call void @__remill_mark_as_used(i8* bitcast (%struct.Memory* (%struct.State*, %struct.Memory*, i32)* @__remill_sync_hyper_call to i8*)) #28, !dbg !2165
  call void @__remill_mark_as_used(i8* bitcast (i8 ()* @__remill_undefined_8 to i8*)) #28, !dbg !2166
  call void @__remill_mark_as_used(i8* bitcast (i16 ()* @__remill_undefined_16 to i8*)) #28, !dbg !2167
  call void @__remill_mark_as_used(i8* bitcast (i32 ()* @__remill_undefined_32 to i8*)) #28, !dbg !2168
  call void @__remill_mark_as_used(i8* bitcast (i64 ()* @__remill_undefined_64 to i8*)) #28, !dbg !2169
  call void @__remill_mark_as_used(i8* bitcast (float ()* @__remill_undefined_f32 to i8*)) #28, !dbg !2170
  call void @__remill_mark_as_used(i8* bitcast (double ()* @__remill_undefined_f64 to i8*)) #28, !dbg !2171
  ret void, !dbg !2172
}

; Function Attrs: alwaysinline inlinehint
define internal void @__remill_mark_as_used(i8*) #15 {
  ret void
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #16

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #16

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #16

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(2688), i64, %struct.Memory*) #17

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(2688), i64, %struct.Memory*) #17

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(2688), i64, %struct.Memory*) #17

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(2688), i64, %struct.Memory*) #17

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(2688), i64, %struct.Memory*) #17

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #16

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #16

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #16

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #18

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #18

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4005c0___libc_csu_fini(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4005c0:
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = load i64, i64* %3
  %5 = add i64 %4, 2
  store i64 %5, i64* %3
  %6 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %memory1, %struct.State* %state2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_400460_register_tm_clones(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_400460:
  %branch_taken = alloca i8, align 1
  store i8 0, i8* %branch_taken, align 1
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i64*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 9
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %15 = bitcast %union.Flags* %14 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %19 = bitcast %union.Flags* %18 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 15
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %23 = bitcast %union.Flags* %22 to i64*
  %24 = load i64, i64* %3
  %25 = add i64 %24, 5
  store i64 %25, i64* %3
  %26 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %memory1, %struct.State* %state2, i64* %11, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %27 = load i64, i64* %23
  %28 = load i64, i64* %3
  %29 = add i64 %28, 1
  store i64 %29, i64* %3
  %30 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %26, %struct.State* %state2, i64 %27)
  %31 = load i64, i64* %11
  %32 = load i64, i64* %3
  %33 = add i64 %32, 7
  store i64 %33, i64* %3
  %34 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %30, %struct.State* %state2, i64* %11, i64 %31, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %35 = load i64, i64* %11
  %36 = load i64, i64* %3
  %37 = add i64 %36, 4
  store i64 %37, i64* %3
  %38 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %34, %struct.State* %state2, i64* %11, i64 %35, i64 3)
  %39 = load i64, i64* %19
  %40 = load i64, i64* %3
  %41 = add i64 %40, 3
  store i64 %41, i64* %3
  %42 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %38, %struct.State* %state2, i64* %23, i64 %39)
  %43 = load i64, i64* %11
  %44 = load i64, i64* %3
  %45 = add i64 %44, 3
  store i64 %45, i64* %3
  %46 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %42, %struct.State* %state2, i64* %7, i64 %43)
  %47 = load i64, i64* %7
  %48 = load i64, i64* %3
  %49 = add i64 %48, 4
  store i64 %49, i64* %3
  %50 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SHRI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %46, %struct.State* %state2, i64* %7, i64 %47, i64 63)
  %51 = load i64, i64* %11
  %52 = load i64, i64* %7
  %53 = load i64, i64* %3
  %54 = add i64 %53, 3
  store i64 %54, i64* %3
  %55 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %50, %struct.State* %state2, i64* %11, i64 %51, i64 %52)
  %56 = load i64, i64* %11
  %57 = load i64, i64* %3
  %58 = add i64 %57, 3
  store i64 %58, i64* %3
  %59 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %55, %struct.State* %state2, i64* %11, i64 %56, i64 1)
  %60 = load i64, i64* %3
  %61 = add i64 %60, 23
  %62 = load i64, i64* %3
  %63 = add i64 %62, 2
  %64 = load i64, i64* %3
  %65 = add i64 %64, 2
  store i64 %65, i64* %3
  %66 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %59, %struct.State* %state2, i8* %branch_taken, i64 %61, i64 %63)
  %67 = load i8, i8* %branch_taken
  %68 = icmp eq i8 %67, 1
  br i1 %68, label %block_400498, label %block_400483

block_400498:                                     ; preds = %block_400483, %block_400460
  %MEMORY.0 = phi %struct.Memory* [ %66, %block_400460 ], [ %101, %block_400483 ]
  %69 = load i64, i64* %3
  %70 = add i64 %69, 1
  store i64 %70, i64* %3
  %71 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %state2, i64* %23)
  %72 = load i64, i64* %3
  %73 = add i64 %72, 1
  store i64 %73, i64* %3
  %74 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %71, %struct.State* %state2)
  ret %struct.Memory* %74

block_40048d:                                     ; preds = %block_400483
  %75 = load i64, i64* %3
  %76 = add i64 %75, 1
  store i64 %76, i64* %3
  %77 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %101, %struct.State* %state2, i64* %23)
  %78 = load i64, i64* %3
  %79 = add i64 %78, 5
  store i64 %79, i64* %3
  %80 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %77, %struct.State* %state2, i64* %15, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %81 = load i64, i64* %7
  %82 = load i64, i64* %3
  %83 = add i64 %82, 2
  store i64 %83, i64* %3
  %84 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* %80, %struct.State* %state2, i64 %81)
  %85 = load i64, i64* %3
  %86 = call %struct.Memory* @__remill_jump(%struct.State* %state2, i64 %85, %struct.Memory* %84)
  ret %struct.Memory* %86

block_400483:                                     ; preds = %block_400460
  %87 = load i64, i64* %3
  %88 = add i64 %87, 5
  store i64 %88, i64* %3
  %89 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %66, %struct.State* %state2, i64* %7, i64 0)
  %90 = load i64, i64* %7
  %91 = load i64, i64* %7
  %92 = load i64, i64* %3
  %93 = add i64 %92, 3
  store i64 %93, i64* %3
  %94 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %89, %struct.State* %state2, i64 %90, i64 %91)
  %95 = load i64, i64* %3
  %96 = add i64 %95, 13
  %97 = load i64, i64* %3
  %98 = add i64 %97, 2
  %99 = load i64, i64* %3
  %100 = add i64 %99, 2
  store i64 %100, i64* %3
  %101 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %94, %struct.State* %state2, i8* %branch_taken, i64 %96, i64 %98)
  %102 = load i8, i8* %branch_taken
  %103 = icmp eq i8 %102, 1
  br i1 %103, label %block_400498, label %block_40048d
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4005c4__term_proc(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4005c4:
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 13
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i64*
  %8 = load i64, i64* %7
  %9 = load i64, i64* %3
  %10 = add i64 %9, 4
  store i64 %10, i64* %3
  %11 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %memory1, %struct.State* %state2, i64* %7, i64 %8, i64 8)
  %12 = load i64, i64* %7
  %13 = load i64, i64* %3
  %14 = add i64 %13, 4
  store i64 %14, i64* %3
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %11, %struct.State* %state2, i64* %7, i64 %12, i64 8)
  %16 = load i64, i64* %3
  %17 = add i64 %16, 1
  store i64 %17, i64* %3
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %15, %struct.State* %state2)
  ret %struct.Memory* %18
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4003b8__init_proc(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4003b8:
  %branch_taken = alloca i8, align 1
  store i8 0, i8* %branch_taken, align 1
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i64*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 13
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i64*
  %12 = load i64, i64* %11
  %13 = load i64, i64* %3
  %14 = add i64 %13, 4
  store i64 %14, i64* %3
  %15 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %memory1, %struct.State* %state2, i64* %11, i64 %12, i64 8)
  %16 = load i64, i64* %3
  %17 = add i64 %16, 7
  store i64 %17, i64* %3
  %18 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %15, %struct.State* %state2, i64* %7, i64 add (i64 ptrtoint (%seg_600ff0__got_type* @seg_600ff0__got to i64), i64 8))
  %19 = load i64, i64* %7
  %20 = load i64, i64* %7
  %21 = load i64, i64* %3
  %22 = add i64 %21, 3
  store i64 %22, i64* %3
  %23 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %18, %struct.State* %state2, i64 %19, i64 %20)
  %24 = load i64, i64* %3
  %25 = add i64 %24, 4
  %26 = load i64, i64* %3
  %27 = add i64 %26, 2
  %28 = load i64, i64* %3
  %29 = add i64 %28, 2
  store i64 %29, i64* %3
  %30 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %23, %struct.State* %state2, i8* %branch_taken, i64 %25, i64 %27)
  %31 = load i8, i8* %branch_taken
  %32 = icmp eq i8 %31, 1
  br i1 %32, label %block_4003ca, label %block_4003c8

block_4003ca:                                     ; preds = %block_4003c8, %block_4003b8
  %MEMORY.0 = phi %struct.Memory* [ %30, %block_4003b8 ], [ %47, %block_4003c8 ]
  %33 = load i64, i64* %11
  %34 = load i64, i64* %3
  %35 = add i64 %34, 4
  store i64 %35, i64* %3
  %36 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %MEMORY.0, %struct.State* %state2, i64* %11, i64 %33, i64 8)
  %37 = load i64, i64* %3
  %38 = add i64 %37, 1
  store i64 %38, i64* %3
  %39 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %36, %struct.State* %state2)
  ret %struct.Memory* %39

block_4003c8:                                     ; preds = %block_4003b8
  %40 = load i64, i64* %7
  %41 = load i64, i64* %3
  %42 = add i64 %41, 2
  %43 = load i64, i64* %3
  %44 = add i64 %43, 2
  store i64 %44, i64* %3
  %45 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2RnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %30, %struct.State* %state2, i64 %40, i64 %42)
  %46 = load i64, i64* %3
  %47 = call %struct.Memory* @__remill_function_call(%struct.State* %state2, i64 %46, %struct.Memory* %45)
  br label %block_4003ca
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_400550___libc_csu_init(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_400550:
  %branch_taken = alloca i8, align 1
  store i8 0, i8* %branch_taken, align 1
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 3
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %15 = bitcast %union.Flags* %14 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 31
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %19 = bitcast %union.Flags* %18 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %23 = bitcast %union.Flags* %22 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 3
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %27 = bitcast %union.Flags* %26 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %31 = bitcast %union.Flags* %30 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 9
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %35 = bitcast %union.Flags* %34 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %39 = bitcast %union.Flags* %38 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 13
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %43 = bitcast %union.Flags* %42 to i64*
  %44 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %45 = getelementptr inbounds %struct.GPR, %struct.GPR* %44, i32 0, i32 15
  %46 = getelementptr inbounds %struct.Reg, %struct.Reg* %45, i32 0, i32 0
  %47 = bitcast %union.Flags* %46 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %51 = bitcast %union.Flags* %50 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 27
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %55 = bitcast %union.Flags* %54 to i64*
  %56 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %57 = getelementptr inbounds %struct.GPR, %struct.GPR* %56, i32 0, i32 29
  %58 = getelementptr inbounds %struct.Reg, %struct.Reg* %57, i32 0, i32 0
  %59 = bitcast %union.Flags* %58 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %61 = getelementptr inbounds %struct.GPR, %struct.GPR* %60, i32 0, i32 31
  %62 = getelementptr inbounds %struct.Reg, %struct.Reg* %61, i32 0, i32 0
  %63 = bitcast %union.Flags* %62 to i64*
  %64 = load i64, i64* %63
  %65 = load i64, i64* %3
  %66 = add i64 %65, 2
  store i64 %66, i64* %3
  %67 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %memory1, %struct.State* %state2, i64 %64)
  %68 = load i64, i64* %59
  %69 = load i64, i64* %3
  %70 = add i64 %69, 2
  store i64 %70, i64* %3
  %71 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %67, %struct.State* %state2, i64 %68)
  %72 = bitcast i32* %19 to i64*
  %73 = load i32, i32* %15
  %74 = zext i32 %73 to i64
  %75 = load i64, i64* %3
  %76 = add i64 %75, 3
  store i64 %76, i64* %3
  %77 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %71, %struct.State* %state2, i64* %72, i64 %74)
  %78 = load i64, i64* %55
  %79 = load i64, i64* %3
  %80 = add i64 %79, 2
  store i64 %80, i64* %3
  %81 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %77, %struct.State* %state2, i64 %78)
  %82 = load i64, i64* %51
  %83 = load i64, i64* %3
  %84 = add i64 %83, 2
  store i64 %84, i64* %3
  %85 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %81, %struct.State* %state2, i64 %82)
  %86 = load i64, i64* %3
  %87 = add i64 %86, 7
  store i64 %87, i64* %3
  %88 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %85, %struct.State* %state2, i64* %51, i64 ptrtoint (%seg_600df8__init_array_type* @seg_600df8__init_array to i64))
  %89 = load i64, i64* %47
  %90 = load i64, i64* %3
  %91 = add i64 %90, 1
  store i64 %91, i64* %3
  %92 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %88, %struct.State* %state2, i64 %89)
  %93 = load i64, i64* %3
  %94 = add i64 %93, 7
  store i64 %94, i64* %3
  %95 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %92, %struct.State* %state2, i64* %47, i64 ptrtoint (%seg_600e00__fini_array_type* @seg_600e00__fini_array to i64))
  %96 = load i64, i64* %27
  %97 = load i64, i64* %3
  %98 = add i64 %97, 1
  store i64 %98, i64* %3
  %99 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %95, %struct.State* %state2, i64 %96)
  %100 = load i64, i64* %35
  %101 = load i64, i64* %3
  %102 = add i64 %101, 3
  store i64 %102, i64* %3
  %103 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %99, %struct.State* %state2, i64* %59, i64 %100)
  %104 = load i64, i64* %31
  %105 = load i64, i64* %3
  %106 = add i64 %105, 3
  store i64 %106, i64* %3
  %107 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %103, %struct.State* %state2, i64* %55, i64 %104)
  %108 = load i64, i64* %47
  %109 = load i64, i64* %51
  %110 = load i64, i64* %3
  %111 = add i64 %110, 3
  store i64 %111, i64* %3
  %112 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %107, %struct.State* %state2, i64* %47, i64 %108, i64 %109)
  %113 = load i64, i64* %43
  %114 = load i64, i64* %3
  %115 = add i64 %114, 4
  store i64 %115, i64* %3
  %116 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %112, %struct.State* %state2, i64* %43, i64 %113, i64 8)
  %117 = load i64, i64* %47
  %118 = load i64, i64* %3
  %119 = add i64 %118, 4
  store i64 %119, i64* %3
  %120 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SARI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %116, %struct.State* %state2, i64* %47, i64 %117, i64 3)
  %121 = load i64, i64* %3
  %122 = sub i64 %121, 452
  %123 = load i64, i64* %3
  %124 = add i64 %123, 5
  %125 = load i64, i64* %3
  %126 = add i64 %125, 5
  store i64 %126, i64* %3
  %127 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %120, %struct.State* %state2, i64 %122, i64 %124)
  %128 = load i64, i64* %3
  %129 = call %struct.Memory* @sub_4003b8__init_proc(%struct.State* %state2, i64 %128, %struct.Memory* %127)
  %130 = load i64, i64* %47
  %131 = load i64, i64* %47
  %132 = load i64, i64* %3
  %133 = add i64 %132, 3
  store i64 %133, i64* %3
  %134 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %129, %struct.State* %state2, i64 %130, i64 %131)
  %135 = load i64, i64* %3
  %136 = add i64 %135, 34
  %137 = load i64, i64* %3
  %138 = add i64 %137, 2
  %139 = load i64, i64* %3
  %140 = add i64 %139, 2
  store i64 %140, i64* %3
  %141 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %134, %struct.State* %state2, i8* %branch_taken, i64 %136, i64 %138)
  %142 = load i8, i8* %branch_taken
  %143 = icmp eq i8 %142, 1
  br i1 %143, label %block_4005a6, label %block_400586

block_4005a6:                                     ; preds = %block_400590, %block_400550
  %MEMORY.0 = phi %struct.Memory* [ %141, %block_400550 ], [ %222, %block_400590 ]
  %144 = load i64, i64* %43
  %145 = load i64, i64* %3
  %146 = add i64 %145, 4
  store i64 %146, i64* %3
  %147 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %MEMORY.0, %struct.State* %state2, i64* %43, i64 %144, i64 8)
  %148 = load i64, i64* %3
  %149 = add i64 %148, 1
  store i64 %149, i64* %3
  %150 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %147, %struct.State* %state2, i64* %27)
  %151 = load i64, i64* %3
  %152 = add i64 %151, 1
  store i64 %152, i64* %3
  %153 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %150, %struct.State* %state2, i64* %47)
  %154 = load i64, i64* %3
  %155 = add i64 %154, 2
  store i64 %155, i64* %3
  %156 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %153, %struct.State* %state2, i64* %51)
  %157 = load i64, i64* %3
  %158 = add i64 %157, 2
  store i64 %158, i64* %3
  %159 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %156, %struct.State* %state2, i64* %55)
  %160 = load i64, i64* %3
  %161 = add i64 %160, 2
  store i64 %161, i64* %3
  %162 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %159, %struct.State* %state2, i64* %59)
  %163 = load i64, i64* %3
  %164 = add i64 %163, 2
  store i64 %164, i64* %3
  %165 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %162, %struct.State* %state2, i64* %63)
  %166 = load i64, i64* %3
  %167 = add i64 %166, 1
  store i64 %167, i64* %3
  %168 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %165, %struct.State* %state2)
  ret %struct.Memory* %168

block_400586:                                     ; preds = %block_400550
  %169 = load i64, i64* %27
  %170 = load i32, i32* %11
  %171 = zext i32 %170 to i64
  %172 = load i64, i64* %3
  %173 = add i64 %172, 2
  store i64 %173, i64* %3
  %174 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %141, %struct.State* %state2, i64* %27, i64 %169, i64 %171)
  %175 = load i64, i64* %23
  %176 = load i64, i64* %23
  %177 = add i64 %176, %175
  %178 = load i32, i32* %7
  %179 = zext i32 %178 to i64
  %180 = load i64, i64* %3
  %181 = add i64 %180, 8
  store i64 %181, i64* %3
  %182 = call %struct.Memory* @_ZN12_GLOBAL__N_1L8NOP_IMPLIJ2MnIjE2RnIjEEEEP6MemoryS6_R5StateDpT_(%struct.Memory* %174, %struct.State* %state2, i64 %177, i64 %179)
  br label %block_400590

block_400590:                                     ; preds = %block_400590, %block_400586
  %MEMORY.1 = phi %struct.Memory* [ %182, %block_400586 ], [ %222, %block_400590 ]
  %183 = load i64, i64* %55
  %184 = load i64, i64* %3
  %185 = add i64 %184, 3
  store i64 %185, i64* %3
  %186 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %MEMORY.1, %struct.State* %state2, i64* %31, i64 %183)
  %187 = load i64, i64* %59
  %188 = load i64, i64* %3
  %189 = add i64 %188, 3
  store i64 %189, i64* %3
  %190 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %186, %struct.State* %state2, i64* %35, i64 %187)
  %191 = load i32, i32* %19
  %192 = zext i32 %191 to i64
  %193 = load i64, i64* %3
  %194 = add i64 %193, 3
  store i64 %194, i64* %3
  %195 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %190, %struct.State* %state2, i64* %39, i64 %192)
  %196 = load i64, i64* %51
  %197 = load i64, i64* %27
  %198 = mul i64 %197, 8
  %199 = add i64 %198, %196
  %200 = load i64, i64* %3
  %201 = add i64 %200, 4
  %202 = load i64, i64* %3
  %203 = add i64 %202, 4
  store i64 %203, i64* %3
  %204 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2MnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %195, %struct.State* %state2, i64 %199, i64 %201)
  %205 = load i64, i64* %3
  %206 = call %struct.Memory* @__remill_function_call(%struct.State* %state2, i64 %205, %struct.Memory* %204)
  %207 = load i64, i64* %27
  %208 = load i64, i64* %3
  %209 = add i64 %208, 4
  store i64 %209, i64* %3
  %210 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %206, %struct.State* %state2, i64* %27, i64 %207, i64 1)
  %211 = load i64, i64* %47
  %212 = load i64, i64* %27
  %213 = load i64, i64* %3
  %214 = add i64 %213, 3
  store i64 %214, i64* %3
  %215 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %210, %struct.State* %state2, i64 %211, i64 %212)
  %216 = load i64, i64* %3
  %217 = sub i64 %216, 20
  %218 = load i64, i64* %3
  %219 = add i64 %218, 2
  %220 = load i64, i64* %3
  %221 = add i64 %220, 2
  store i64 %221, i64* %3
  %222 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %215, %struct.State* %state2, i8* %branch_taken, i64 %217, i64 %219)
  %223 = load i8, i8* %branch_taken
  %224 = icmp eq i8 %223, 1
  br i1 %224, label %block_400590, label %block_4005a6
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4004f0_main(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4004f0:
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to %struct.anon.1*
  %8 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %12 = bitcast %union.Flags* %11 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %16 = bitcast %union.Flags* %15 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %20 = bitcast %union.Flags* %19 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %24 = bitcast %union.Flags* %23 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %28 = bitcast %union.Flags* %27 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 13
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %32 = bitcast %union.Flags* %31 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %36 = bitcast %union.Flags* %35 to i64*
  %37 = load i64, i64* %36
  %38 = load i64, i64* %3
  %39 = add i64 %38, 1
  store i64 %39, i64* %3
  %40 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %memory1, %struct.State* %state2, i64 %37)
  %41 = load i64, i64* %32
  %42 = load i64, i64* %3
  %43 = add i64 %42, 3
  store i64 %43, i64* %3
  %44 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %40, %struct.State* %state2, i64* %36, i64 %41)
  %45 = load i64, i64* %32
  %46 = load i64, i64* %3
  %47 = add i64 %46, 4
  store i64 %47, i64* %3
  %48 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %44, %struct.State* %state2, i64* %32, i64 %45, i64 32)
  %49 = load i64, i64* %3
  %50 = add i64 %49, 10
  store i64 %50, i64* %3
  %51 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %48, %struct.State* %state2, i64* %28, i64 add (i64 ptrtoint (%seg_4005d0__rodata_type* @seg_4005d0__rodata to i64), i64 4))
  %52 = load i64, i64* %36
  %53 = sub i64 %52, 16
  %54 = load i64, i64* %3
  %55 = add i64 %54, 4
  store i64 %55, i64* %3
  %56 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3LEAI3RnWImE2MnIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %51, %struct.State* %state2, i64* %20, i64 %53)
  %57 = load i64, i64* %36
  %58 = sub i64 %57, 4
  %59 = load i64, i64* %3
  %60 = add i64 %59, 7
  store i64 %60, i64* %3
  %61 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %56, %struct.State* %state2, i64 %58, i64 0)
  %62 = load i64, i64* %36
  %63 = sub i64 %62, 24
  %64 = load i64, i64* %20
  %65 = load i64, i64* %3
  %66 = add i64 %65, 4
  store i64 %66, i64* %3
  %67 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %61, %struct.State* %state2, i64 %63, i64 %64)
  %68 = load i64, i64* %36
  %69 = sub i64 %68, 24
  %70 = load i64, i64* %3
  %71 = add i64 %70, 4
  store i64 %71, i64* %3
  %72 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %67, %struct.State* %state2, i64* %20, i64 %69)
  %73 = load i64, i64* %20
  %74 = load i64, i64* %3
  %75 = add i64 %74, 6
  store i64 %75, i64* %3
  %76 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %72, %struct.State* %state2, i64 %73, i64 1)
  %77 = load i64, i64* %36
  %78 = sub i64 %77, 24
  %79 = load i64, i64* %3
  %80 = add i64 %79, 4
  store i64 %80, i64* %3
  %81 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %76, %struct.State* %state2, i64* %20, i64 %78)
  %82 = load i64, i64* %20
  %83 = add i64 %82, 4
  %84 = load i64, i64* %3
  %85 = add i64 %84, 7
  store i64 %85, i64* %3
  %86 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %81, %struct.State* %state2, i64 %83, i64 2)
  %87 = load i64, i64* %36
  %88 = sub i64 %87, 24
  %89 = load i64, i64* %3
  %90 = add i64 %89, 4
  store i64 %90, i64* %3
  %91 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %86, %struct.State* %state2, i64* %20, i64 %88)
  %92 = load i64, i64* %20
  %93 = add i64 %92, 4
  %94 = load i64, i64* %3
  %95 = add i64 %94, 3
  store i64 %95, i64* %3
  %96 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %91, %struct.State* %state2, i64* %24, i64 %93)
  %97 = load i64, i64* %3
  %98 = add i64 %97, 2
  store i64 %98, i64* %3
  %99 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %96, %struct.State* %state2, i8* %8, i64 0)
  %100 = load i64, i64* %3
  %101 = sub i64 %100, 335
  %102 = load i64, i64* %3
  %103 = add i64 %102, 5
  %104 = load i64, i64* %3
  %105 = add i64 %104, 5
  store i64 %105, i64* %3
  %106 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %99, %struct.State* %state2, i64 %101, i64 %103)
  %107 = load i64, i64* %3
  %108 = call %struct.Memory* @ext_601048_printf(%struct.State* %state2, i64 %107, %struct.Memory* %106)
  %109 = load i64, i64* %36
  %110 = sub i64 %109, 24
  %111 = load i64, i64* %3
  %112 = add i64 %111, 4
  store i64 %112, i64* %3
  %113 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %108, %struct.State* %state2, i64* %28, i64 %110)
  %114 = load i64, i64* %28
  %115 = add i64 %114, 4
  %116 = load i64, i64* %3
  %117 = add i64 %116, 3
  store i64 %117, i64* %3
  %118 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2MnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %113, %struct.State* %state2, i64* %24, i64 %115)
  %119 = load i64, i64* %36
  %120 = sub i64 %119, 28
  %121 = load i32, i32* %12
  %122 = zext i32 %121 to i64
  %123 = load i64, i64* %3
  %124 = add i64 %123, 3
  store i64 %124, i64* %3
  %125 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIjE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %118, %struct.State* %state2, i64 %120, i64 %122)
  %126 = load i32, i32* %16
  %127 = zext i32 %126 to i64
  %128 = load i64, i64* %3
  %129 = add i64 %128, 2
  store i64 %129, i64* %3
  %130 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %125, %struct.State* %state2, i64* %20, i64 %127)
  %131 = load i64, i64* %32
  %132 = load i64, i64* %3
  %133 = add i64 %132, 4
  store i64 %133, i64* %3
  %134 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ADDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %130, %struct.State* %state2, i64* %32, i64 %131, i64 32)
  %135 = load i64, i64* %3
  %136 = add i64 %135, 1
  store i64 %136, i64* %3
  %137 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %134, %struct.State* %state2, i64* %36)
  %138 = load i64, i64* %3
  %139 = add i64 %138, 1
  store i64 %139, i64* %3
  %140 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %137, %struct.State* %state2)
  ret %struct.Memory* %140
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4003f0__start(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4003f0:
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 15
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 1
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %15 = bitcast %union.Flags* %14 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %19 = bitcast %union.Flags* %18 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 9
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %23 = bitcast %union.Flags* %22 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %27 = bitcast %union.Flags* %26 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %31 = bitcast %union.Flags* %30 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 15
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %35 = bitcast %union.Flags* %34 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %39 = bitcast %union.Flags* %38 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 19
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %43 = bitcast %union.Flags* %42 to i64*
  %44 = load i64, i64* %35
  %45 = load i32, i32* %7
  %46 = zext i32 %45 to i64
  %47 = load i64, i64* %3
  %48 = add i64 %47, 2
  store i64 %48, i64* %3
  %49 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3XORI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_(%struct.Memory* %memory1, %struct.State* %state2, i64* %35, i64 %44, i64 %46)
  %50 = load i64, i64* %19
  %51 = load i64, i64* %3
  %52 = add i64 %51, 3
  store i64 %52, i64* %3
  %53 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %49, %struct.State* %state2, i64* %43, i64 %50)
  %54 = load i64, i64* %3
  %55 = add i64 %54, 1
  store i64 %55, i64* %3
  %56 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %53, %struct.State* %state2, i64* %23)
  %57 = load i64, i64* %31
  %58 = load i64, i64* %3
  %59 = add i64 %58, 3
  store i64 %59, i64* %3
  %60 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %56, %struct.State* %state2, i64* %19, i64 %57)
  %61 = load i64, i64* %31
  %62 = load i64, i64* %3
  %63 = add i64 %62, 4
  store i64 %63, i64* %3
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3ANDI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %60, %struct.State* %state2, i64* %31, i64 %61, i64 -16)
  %65 = load i64, i64* %11
  %66 = load i64, i64* %3
  %67 = add i64 %66, 1
  store i64 %67, i64* %3
  %68 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %64, %struct.State* %state2, i64 %65)
  %69 = load i64, i64* %31
  %70 = load i64, i64* %3
  %71 = add i64 %70, 1
  store i64 %71, i64* %3
  %72 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %68, %struct.State* %state2, i64 %69)
  %73 = load i64, i64* %3
  %74 = add i64 %73, 7
  store i64 %74, i64* %3
  %75 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %72, %struct.State* %state2, i64* %39, i64 ptrtoint (void ()* @callback_sub_4005c0___libc_csu_fini to i64))
  %76 = load i64, i64* %3
  %77 = add i64 %76, 7
  store i64 %77, i64* %3
  %78 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %75, %struct.State* %state2, i64* %15, i64 ptrtoint (void ()* @callback_sub_400550___libc_csu_init to i64))
  %79 = load i64, i64* %3
  %80 = add i64 %79, 7
  store i64 %80, i64* %3
  %81 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %78, %struct.State* %state2, i64* %27, i64 ptrtoint (void ()* @main to i64))
  %82 = load i64, i64* %3
  %83 = add i64 %82, 6
  %84 = load i64, i64* %3
  %85 = add i64 %84, 6
  store i64 %85, i64* %3
  %86 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2MnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %81, %struct.State* %state2, i64 ptrtoint (%seg_600ff0__got_type* @seg_600ff0__got to i64), i64 %83)
  %87 = load i64, i64* %3
  %88 = call %struct.Memory* @__remill_function_call(%struct.State* %state2, i64 %87, %struct.Memory* %86)
  %89 = load i64, i64* %3
  %90 = add i64 %89, 1
  store i64 %90, i64* %3
  %91 = call %struct.Memory* @_ZN12_GLOBAL__N_1L24HandleInvalidInstructionEP6MemoryR5State(%struct.Memory* %88, %struct.State* %state2)
  %92 = load i64, i64* %3
  %93 = call %struct.Memory* @__remill_error(%struct.State* %state2, i64 %92, %struct.Memory* %91)
  ret %struct.Memory* %93
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4004a0___do_global_dtors_aux(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4004a0:
  %branch_taken = alloca i8, align 1
  store i8 0, i8* %branch_taken, align 1
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 13
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i64*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 15
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i64*
  %12 = load i64, i64* %3
  %13 = add i64 %12, 7
  store i64 %13, i64* %3
  %14 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %memory1, %struct.State* %state2, i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 0)
  %15 = load i64, i64* %3
  %16 = add i64 %15, 19
  %17 = load i64, i64* %3
  %18 = add i64 %17, 2
  %19 = load i64, i64* %3
  %20 = add i64 %19, 2
  store i64 %20, i64* %3
  %21 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %14, %struct.State* %state2, i8* %branch_taken, i64 %16, i64 %18)
  %22 = load i8, i8* %branch_taken
  %23 = icmp eq i8 %22, 1
  br i1 %23, label %block_4004ba, label %block_4004a9

block_4004ba:                                     ; preds = %block_4004a9, %block_4004a0
  %MEMORY.0 = phi %struct.Memory* [ %21, %block_4004a0 ], [ %49, %block_4004a9 ]
  %24 = load i64, i64* %3
  %25 = add i64 %24, 2
  store i64 %25, i64* %3
  %26 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %MEMORY.0, %struct.State* %state2)
  ret %struct.Memory* %26

block_4004a9:                                     ; preds = %block_4004a0
  %27 = load i64, i64* %11
  %28 = load i64, i64* %3
  %29 = add i64 %28, 1
  store i64 %29, i64* %3
  %30 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %21, %struct.State* %state2, i64 %27)
  %31 = load i64, i64* %7
  %32 = load i64, i64* %3
  %33 = add i64 %32, 3
  store i64 %33, i64* %3
  %34 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %30, %struct.State* %state2, i64* %11, i64 %31)
  %35 = load i64, i64* %3
  %36 = sub i64 %35, 141
  %37 = load i64, i64* %3
  %38 = add i64 %37, 5
  %39 = load i64, i64* %3
  %40 = add i64 %39, 5
  store i64 %40, i64* %3
  %41 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2InImEEEP6MemoryS4_R5StateT_S2_(%struct.Memory* %34, %struct.State* %state2, i64 %36, i64 %38)
  %42 = load i64, i64* %3
  %43 = call %struct.Memory* @sub_400420_deregister_tm_clones(%struct.State* %state2, i64 %42, %struct.Memory* %41)
  %44 = load i64, i64* %3
  %45 = add i64 %44, 1
  store i64 %45, i64* %3
  %46 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %43, %struct.State* %state2, i64* %11)
  %47 = load i64, i64* %3
  %48 = add i64 %47, 7
  store i64 %48, i64* %3
  %49 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3MnWIhE2InIhEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %46, %struct.State* %state2, i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 1)
  br label %block_4004ba
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_400420_deregister_tm_clones(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_400420:
  %branch_taken = alloca i8, align 1
  store i8 0, i8* %branch_taken, align 1
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i64*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 11
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %15 = bitcast %union.Flags* %14 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %19 = bitcast %union.Flags* %18 to i64*
  %20 = load i64, i64* %3
  %21 = add i64 %20, 5
  store i64 %21, i64* %3
  %22 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %memory1, %struct.State* %state2, i64* %7, i64 add (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 7))
  %23 = load i64, i64* %19
  %24 = load i64, i64* %3
  %25 = add i64 %24, 1
  store i64 %25, i64* %3
  %26 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %22, %struct.State* %state2, i64 %23)
  %27 = load i64, i64* %7
  %28 = load i64, i64* %3
  %29 = add i64 %28, 6
  store i64 %29, i64* %3
  %30 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3SUBI3RnWImE2RnImE2InImEEEP6MemoryS8_R5StateT_T0_T1_(%struct.Memory* %26, %struct.State* %state2, i64* %7, i64 %27, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %31 = load i64, i64* %7
  %32 = load i64, i64* %3
  %33 = add i64 %32, 4
  store i64 %33, i64* %3
  %34 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2RnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %30, %struct.State* %state2, i64 %31, i64 14)
  %35 = load i64, i64* %15
  %36 = load i64, i64* %3
  %37 = add i64 %36, 3
  store i64 %37, i64* %3
  %38 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %34, %struct.State* %state2, i64* %19, i64 %35)
  %39 = load i64, i64* %3
  %40 = add i64 %39, 29
  %41 = load i64, i64* %3
  %42 = add i64 %41, 2
  %43 = load i64, i64* %3
  %44 = add i64 %43, 2
  store i64 %44, i64* %3
  %45 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JBEEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %38, %struct.State* %state2, i8* %branch_taken, i64 %40, i64 %42)
  %46 = load i8, i8* %branch_taken
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400450, label %block_400435

block_40043f:                                     ; preds = %block_400435
  %48 = load i64, i64* %3
  %49 = add i64 %48, 1
  store i64 %49, i64* %3
  %50 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %74, %struct.State* %state2, i64* %19)
  %51 = load i64, i64* %3
  %52 = add i64 %51, 5
  store i64 %52, i64* %3
  %53 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %50, %struct.State* %state2, i64* %11, i64 ptrtoint (%__bss_start_type* @__bss_start to i64))
  %54 = load i64, i64* %7
  %55 = load i64, i64* %3
  %56 = add i64 %55, 2
  store i64 %56, i64* %3
  %57 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2RnImEEEP6MemoryS4_R5StateT_(%struct.Memory* %53, %struct.State* %state2, i64 %54)
  %58 = load i64, i64* %3
  %59 = call %struct.Memory* @__remill_jump(%struct.State* %state2, i64 %58, %struct.Memory* %57)
  ret %struct.Memory* %59

block_400435:                                     ; preds = %block_400420
  %60 = load i64, i64* %3
  %61 = add i64 %60, 5
  store i64 %61, i64* %3
  %62 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %45, %struct.State* %state2, i64* %7, i64 0)
  %63 = load i64, i64* %7
  %64 = load i64, i64* %7
  %65 = load i64, i64* %3
  %66 = add i64 %65, 3
  store i64 %66, i64* %3
  %67 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %62, %struct.State* %state2, i64 %63, i64 %64)
  %68 = load i64, i64* %3
  %69 = add i64 %68, 19
  %70 = load i64, i64* %3
  %71 = add i64 %70, 2
  %72 = load i64, i64* %3
  %73 = add i64 %72, 2
  store i64 %73, i64* %3
  %74 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %67, %struct.State* %state2, i8* %branch_taken, i64 %69, i64 %71)
  %75 = load i8, i8* %branch_taken
  %76 = icmp eq i8 %75, 1
  br i1 %76, label %block_400450, label %block_40043f

block_400450:                                     ; preds = %block_400435, %block_400420
  %MEMORY.0 = phi %struct.Memory* [ %45, %block_400420 ], [ %74, %block_400435 ]
  %77 = load i64, i64* %3
  %78 = add i64 %77, 1
  store i64 %78, i64* %3
  %79 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %state2, i64* %19)
  %80 = load i64, i64* %3
  %81 = add i64 %80, 1
  store i64 %81, i64* %3
  %82 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3RETEP6MemoryR5State(%struct.Memory* %79, %struct.State* %state2)
  ret %struct.Memory* %82
}

; Function Attrs: noinline nounwind
define internal %struct.Memory* @sub_4004c0_frame_dummy(%struct.State* dereferenceable(2688) %state2, i64 %pc, %struct.Memory* %memory1) #19 {
block_4004c0:
  %branch_taken = alloca i8, align 1
  store i8 0, i8* %branch_taken, align 1
  %0 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %1 = getelementptr inbounds %struct.GPR, %struct.GPR* %0, i32 0, i32 33
  %2 = getelementptr inbounds %struct.Reg, %struct.Reg* %1, i32 0, i32 0
  %3 = bitcast %union.Flags* %2 to i64*
  store i64 %pc, i64* %3, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %7 = bitcast %union.Flags* %6 to i64*
  %8 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %9 = getelementptr inbounds %struct.GPR, %struct.GPR* %8, i32 0, i32 11
  %10 = getelementptr inbounds %struct.Reg, %struct.Reg* %9, i32 0, i32 0
  %11 = bitcast %union.Flags* %10 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %15 = bitcast %union.Flags* %14 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %state2, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 15
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %19 = bitcast %union.Flags* %18 to i64*
  %20 = load i64, i64* %3
  %21 = add i64 %20, 5
  store i64 %21, i64* %3
  %22 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %memory1, %struct.State* %state2, i64* %11, i64 ptrtoint (%seg_600e08__jcr_type* @seg_600e08__jcr to i64))
  %23 = load i64, i64* %11
  %24 = load i64, i64* %3
  %25 = add i64 %24, 4
  store i64 %25, i64* %3
  %26 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3CMPI2MnImE2InImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %22, %struct.State* %state2, i64 %23, i64 0)
  %27 = load i64, i64* %3
  %28 = add i64 %27, 7
  %29 = load i64, i64* %3
  %30 = add i64 %29, 2
  %31 = load i64, i64* %3
  %32 = add i64 %31, 2
  store i64 %32, i64* %3
  %33 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JNZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %26, %struct.State* %state2, i8* %branch_taken, i64 %28, i64 %30)
  %34 = load i8, i8* %branch_taken
  %35 = icmp eq i8 %34, 1
  br i1 %35, label %block_4004d0, label %block_4004cb

block_4004cb:                                     ; preds = %block_4004d0, %block_4004c0
  %MEMORY.0 = phi %struct.Memory* [ %79, %block_4004d0 ], [ %33, %block_4004c0 ]
  %36 = load i64, i64* %3
  %37 = sub i64 %36, 107
  %38 = load i64, i64* %3
  %39 = add i64 %38, 2
  store i64 %39, i64* %3
  %40 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %MEMORY.0, %struct.State* %state2, i64 %37)
  br label %block_400460

block_4004da:                                     ; preds = %block_4004d0
  %41 = load i64, i64* %19
  %42 = load i64, i64* %3
  %43 = add i64 %42, 1
  store i64 %43, i64* %3
  %44 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4PUSHI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %79, %struct.State* %state2, i64 %41)
  %45 = load i64, i64* %15
  %46 = load i64, i64* %3
  %47 = add i64 %46, 3
  store i64 %47, i64* %3
  %48 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2RnImEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %44, %struct.State* %state2, i64* %19, i64 %45)
  %49 = load i64, i64* %7
  %50 = load i64, i64* %3
  %51 = add i64 %50, 2
  %52 = load i64, i64* %3
  %53 = add i64 %52, 2
  store i64 %53, i64* %3
  %54 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4CALLI2RnImEEEP6MemoryS4_R5StateT_2InImE(%struct.Memory* %48, %struct.State* %state2, i64 %49, i64 %51)
  %55 = load i64, i64* %3
  %56 = call %struct.Memory* @__remill_function_call(%struct.State* %state2, i64 %55, %struct.Memory* %54)
  %57 = load i64, i64* %3
  %58 = add i64 %57, 1
  store i64 %58, i64* %3
  %59 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3POPI3RnWImEEEP6MemoryS4_R5StateT_(%struct.Memory* %56, %struct.State* %state2, i64* %19)
  %60 = load i64, i64* %3
  %61 = sub i64 %60, 129
  %62 = load i64, i64* %3
  %63 = add i64 %62, 5
  store i64 %63, i64* %3
  %64 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3JMPI2InImEEEP6MemoryS4_R5StateT_(%struct.Memory* %59, %struct.State* %state2, i64 %61)
  br label %block_400460

block_4004d0:                                     ; preds = %block_4004c0
  %65 = load i64, i64* %3
  %66 = add i64 %65, 5
  store i64 %66, i64* %3
  %67 = call %struct.Memory* @_ZN12_GLOBAL__N_1L3MOVI3RnWImE2InIjEEEP6MemoryS6_R5StateT_T0_(%struct.Memory* %33, %struct.State* %state2, i64* %7, i64 0)
  %68 = load i64, i64* %7
  %69 = load i64, i64* %7
  %70 = load i64, i64* %3
  %71 = add i64 %70, 3
  store i64 %71, i64* %3
  %72 = call %struct.Memory* @_ZN12_GLOBAL__N_1L4TESTI2RnImES2_EEP6MemoryS4_R5StateT_T0_(%struct.Memory* %67, %struct.State* %state2, i64 %68, i64 %69)
  %73 = load i64, i64* %3
  %74 = sub i64 %73, 13
  %75 = load i64, i64* %3
  %76 = add i64 %75, 2
  %77 = load i64, i64* %3
  %78 = add i64 %77, 2
  store i64 %78, i64* %3
  %79 = call %struct.Memory* @_ZN12_GLOBAL__N_1L2JZEP6MemoryR5State3RnWIhE2InImES7_(%struct.Memory* %72, %struct.State* %state2, i8* %branch_taken, i64 %74, i64 %76)
  %80 = load i8, i8* %branch_taken
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_4004cb, label %block_4004da

block_400460:                                     ; preds = %block_4004da, %block_4004cb
  %MEMORY.1 = phi %struct.Memory* [ %40, %block_4004cb ], [ %64, %block_4004da ]
  %82 = load i64, i64* %3
  %83 = call %struct.Memory* @sub_400460_register_tm_clones(%struct.State* %state2, i64 %82, %struct.Memory* %MEMORY.1)
  ret %struct.Memory* %83
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #18

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004c0_frame_dummy() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x4004c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @0, void ()** @1)
  ret void
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004a0___do_global_dtors_aux() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x4004a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @2, void ()** @1)
  ret void
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_601048_printf(%struct.State*, i64, %struct.Memory*) #18 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005c0___libc_csu_fini() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x4005c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @1)
  ret void
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400550___libc_csu_init() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x400550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @1)
  ret void
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x4004f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @1)
  ret void
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x4003b8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @1)
  ret void
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #20 {
  call void asm sideeffect "pushq $0;pushq $$0x4005c4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @1)
  ret void
}

attributes #0 = { alwaysinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { alwaysinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { alwaysinline nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { alwaysinline nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { alwaysinline norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noinline }
attributes #19 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { naked nobuiltin noinline }
attributes #21 = { alwaysinline nobuiltin nounwind }
attributes #22 = { nobuiltin nounwind readnone }
attributes #23 = { nounwind }
attributes #24 = { alwaysinline nobuiltin nounwind readnone }
attributes #25 = { nobuiltin nounwind }
attributes #26 = { readnone }
attributes #27 = { alwaysinline nobuiltin nounwind readonly }
attributes #28 = { nobuiltin }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!842, !843}

!0 = !{!"clang version 4.0.1 (https://github.com/llvm-mirror/clang.git 3c8961bedc65c9a15cbe67a2ef385a0938f7cfef) (https://github.com/llvm-mirror/llvm.git c8fccc53ed66d505898f8850bcc690c977a7c9a7)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (https://github.com/llvm-mirror/clang.git 3c8961bedc65c9a15cbe67a2ef385a0938f7cfef) (https://github.com/llvm-mirror/llvm.git c8fccc53ed66d505898f8850bcc690c977a7c9a7)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !38, imports: !41)
!2 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !25, !34}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 51, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 49, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 11)
!24 = !DIEnumerator(name: "kInvalidInstruction", value: 12)
!25 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !26, line: 381, baseType: !27, size: 16, elements: !29, identifier: "_ZTS21RequestPrivilegeLevel")
!26 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !28)
!28 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!29 = !{!30, !31, !32, !33}
!30 = !DIEnumerator(name: "kRingZero", value: 0)
!31 = !DIEnumerator(name: "kRingOne", value: 1)
!32 = !DIEnumerator(name: "kRingTwo", value: 2)
!33 = !DIEnumerator(name: "kRingThree", value: 3)
!34 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !26, line: 388, baseType: !27, size: 16, elements: !35, identifier: "_ZTS14TableIndicator")
!35 = !{!36, !37}
!36 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!37 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!38 = !{!39}
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!40 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!41 = !{!42, !47, !50, !53, !56, !58, !60, !62, !64, !66, !68, !70, !72, !74, !76, !79, !80, !81, !84, !86, !88, !90, !92, !94, !96, !98, !100, !102, !104, !159, !163, !167, !183, !186, !190, !198, !206, !210, !217, !221, !225, !227, !229, !233, !243, !247, !253, !259, !261, !265, !269, !273, !277, !288, !290, !294, !298, !302, !304, !310, !314, !318, !320, !322, !326, !334, !338, !342, !346, !348, !354, !356, !363, !368, !372, !376, !380, !384, !388, !390, !392, !396, !400, !404, !406, !410, !414, !416, !418, !422, !428, !433, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !450, !452, !455, !459, !464, !469, !471, !473, !475, !477, !479, !481, !483, !485, !487, !489, !491, !493, !495, !499, !505, !509, !511, !516, !518, !522, !526, !530, !538, !542, !546, !550, !554, !558, !562, !566, !570, !574, !578, !582, !586, !588, !592, !596, !600, !606, !610, !614, !616, !620, !624, !630, !632, !636, !640, !644, !648, !652, !656, !660, !661, !662, !663, !666, !667, !668, !669, !670, !671, !672, !674, !679, !684, !688, !690, !692, !694, !696, !703, !707, !711, !715, !719, !723, !728, !732, !734, !738, !744, !748, !753, !755, !757, !761, !765, !769, !771, !773, !775, !777, !781, !783, !785, !789, !793, !797, !801, !805, !807, !809, !813, !817, !821, !825, !827, !829, !833, !837, !838, !839, !840, !841}
!42 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !45, line: 48)
!43 = !DINamespace(name: "std", scope: null, file: !44, line: 199)
!44 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/x86_64-linux-gnu/c++/6.3.0/bits/c++config.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !46)
!46 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !48, line: 49)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !49)
!49 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!50 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !51, line: 50)
!51 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !52)
!52 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!53 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !54, line: 51)
!54 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !55)
!55 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!56 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !57, line: 53)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !45)
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !59, line: 54)
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !48)
!60 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !61, line: 55)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !51)
!62 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !63, line: 56)
!63 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !54)
!64 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !65, line: 58)
!65 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !45)
!66 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !67, line: 59)
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !48)
!68 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !69, line: 60)
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !51)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !71, line: 61)
!71 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !54)
!72 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !73, line: 63)
!73 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !55)
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !75, line: 64)
!75 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !54)
!76 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !77, line: 66)
!77 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !78)
!78 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!79 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !27, line: 67)
!80 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !8, line: 68)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !82, line: 69)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !83)
!83 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !85, line: 71)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !77)
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !87, line: 72)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !27)
!88 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !89, line: 73)
!89 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!90 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !91, line: 74)
!91 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !82)
!92 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !93, line: 76)
!93 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !77)
!94 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !95, line: 77)
!95 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !27)
!96 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !97, line: 78)
!97 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!98 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !99, line: 79)
!99 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !82)
!100 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !101, line: 81)
!101 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !83)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !103, line: 82)
!103 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !82)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !105, line: 58)
!105 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !107, file: !106, line: 77, size: 64, elements: !108, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!106 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/bits/exception_ptr.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!107 = !DINamespace(name: "__exception_ptr", scope: !43, file: !106, line: 53)
!108 = !{!109, !111, !115, !118, !119, !124, !125, !129, !134, !138, !142, !145, !146, !149, !153}
!109 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !105, file: !106, line: 79, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!111 = !DISubprogram(name: "exception_ptr", scope: !105, file: !106, line: 81, type: !112, isLocal: false, isDefinition: false, scopeLine: 81, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!112 = !DISubroutineType(types: !113)
!113 = !{null, !114, !110}
!114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!115 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !105, file: !106, line: 83, type: !116, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagPrototyped, isOptimized: false)
!116 = !DISubroutineType(types: !117)
!117 = !{null, !114}
!118 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !105, file: !106, line: 84, type: !116, isLocal: false, isDefinition: false, scopeLine: 84, flags: DIFlagPrototyped, isOptimized: false)
!119 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !105, file: !106, line: 86, type: !120, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!120 = !DISubroutineType(types: !121)
!121 = !{!110, !122}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !123, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!123 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !105)
!124 = !DISubprogram(name: "exception_ptr", scope: !105, file: !106, line: 92, type: !116, isLocal: false, isDefinition: false, scopeLine: 92, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!125 = !DISubprogram(name: "exception_ptr", scope: !105, file: !106, line: 94, type: !126, isLocal: false, isDefinition: false, scopeLine: 94, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !114, !128}
!128 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !123, size: 64)
!129 = !DISubprogram(name: "exception_ptr", scope: !105, file: !106, line: 97, type: !130, isLocal: false, isDefinition: false, scopeLine: 97, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !114, !132}
!132 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !43, file: !44, line: 205, baseType: !133)
!133 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!134 = !DISubprogram(name: "exception_ptr", scope: !105, file: !106, line: 101, type: !135, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!135 = !DISubroutineType(types: !136)
!136 = !{null, !114, !137}
!137 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !105, size: 64)
!138 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !105, file: !106, line: 114, type: !139, isLocal: false, isDefinition: false, scopeLine: 114, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!139 = !DISubroutineType(types: !140)
!140 = !{!141, !114, !128}
!141 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !105, size: 64)
!142 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !105, file: !106, line: 118, type: !143, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!143 = !DISubroutineType(types: !144)
!144 = !{!141, !114, !137}
!145 = !DISubprogram(name: "~exception_ptr", scope: !105, file: !106, line: 125, type: !116, isLocal: false, isDefinition: false, scopeLine: 125, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!146 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !105, file: !106, line: 128, type: !147, isLocal: false, isDefinition: false, scopeLine: 128, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!147 = !DISubroutineType(types: !148)
!148 = !{null, !114, !141}
!149 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !105, file: !106, line: 140, type: !150, isLocal: false, isDefinition: false, scopeLine: 140, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !122}
!152 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!153 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !105, file: !106, line: 149, type: !154, isLocal: false, isDefinition: false, scopeLine: 149, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!154 = !DISubroutineType(types: !155)
!155 = !{!156, !122}
!156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !157, size: 64)
!157 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!158 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !43, file: !106, line: 47, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !107, entity: !160, line: 71)
!160 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !43, file: !106, line: 67, type: !161, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!161 = !DISubroutineType(types: !162)
!162 = !{null, !105}
!163 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !164, entity: !166, line: 58)
!164 = !DINamespace(name: "__gnu_debug", scope: null, file: !165, line: 56)
!165 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/debug/debug.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!166 = !DINamespace(name: "__debug", scope: !43, file: !165, line: 50)
!167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !168, line: 64)
!168 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !169, line: 106, baseType: !170)
!169 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!170 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !169, line: 94, baseType: !171)
!171 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !169, line: 82, size: 64, elements: !172, identifier: "_ZTS11__mbstate_t")
!172 = !{!173, !174}
!173 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !171, file: !169, line: 84, baseType: !52, size: 32)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !171, file: !169, line: 93, baseType: !175, size: 32, offset: 32)
!175 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !171, file: !169, line: 85, size: 32, elements: !176, identifier: "_ZTSN11__mbstate_tUt_E")
!176 = !{!177, !178}
!177 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !175, file: !169, line: 88, baseType: !10, size: 32)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !175, file: !169, line: 92, baseType: !179, size: 32)
!179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !180, size: 32, elements: !181)
!180 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!181 = !{!182}
!182 = !DISubrange(count: 4)
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !184, line: 139)
!184 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !185, line: 132, baseType: !10)
!185 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!186 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !187, line: 141)
!187 = !DISubprogram(name: "btowc", scope: !169, file: !169, line: 356, type: !188, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!188 = !DISubroutineType(types: !189)
!189 = !{!184, !52}
!190 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !191, line: 142)
!191 = !DISubprogram(name: "fgetwc", scope: !169, file: !169, line: 748, type: !192, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!192 = !DISubroutineType(types: !193)
!193 = !{!184, !194}
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !195, size: 64)
!195 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !196, line: 64, baseType: !197)
!196 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !196, line: 44, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!198 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !199, line: 143)
!199 = !DISubprogram(name: "fgetws", scope: !169, file: !169, line: 777, type: !200, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!200 = !DISubroutineType(types: !201)
!201 = !{!202, !204, !52, !205}
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !203, size: 64)
!203 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!204 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !202)
!205 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !194)
!206 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !207, line: 144)
!207 = !DISubprogram(name: "fputwc", scope: !169, file: !169, line: 762, type: !208, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!208 = !DISubroutineType(types: !209)
!209 = !{!184, !203, !194}
!210 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !211, line: 145)
!211 = !DISubprogram(name: "fputws", scope: !169, file: !169, line: 784, type: !212, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!212 = !DISubroutineType(types: !213)
!213 = !{!52, !214, !205}
!214 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !215)
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !216, size: 64)
!216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !203)
!217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !218, line: 146)
!218 = !DISubprogram(name: "fwide", scope: !169, file: !169, line: 590, type: !219, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!219 = !DISubroutineType(types: !220)
!220 = !{!52, !194, !52}
!221 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !222, line: 147)
!222 = !DISubprogram(name: "fwprintf", scope: !169, file: !169, line: 597, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!223 = !DISubroutineType(types: !224)
!224 = !{!52, !205, !214, null}
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !226, line: 148)
!226 = !DISubprogram(name: "fwscanf", scope: !169, file: !169, line: 638, type: !223, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !228, line: 149)
!228 = !DISubprogram(name: "getwc", scope: !169, file: !169, line: 749, type: !192, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !230, line: 150)
!230 = !DISubprogram(name: "getwchar", scope: !169, file: !169, line: 755, type: !231, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!231 = !DISubroutineType(types: !232)
!232 = !{!184}
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !234, line: 151)
!234 = !DISubprogram(name: "mbrlen", scope: !169, file: !169, line: 379, type: !235, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!235 = !DISubroutineType(types: !236)
!236 = !{!237, !238, !237, !241}
!237 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !185, line: 62, baseType: !83)
!238 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !239)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !240, size: 64)
!240 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !180)
!241 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !242)
!242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !244, line: 152)
!244 = !DISubprogram(name: "mbrtowc", scope: !169, file: !169, line: 368, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!237, !204, !238, !237, !241}
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !248, line: 153)
!248 = !DISubprogram(name: "mbsinit", scope: !169, file: !169, line: 364, type: !249, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!249 = !DISubroutineType(types: !250)
!250 = !{!52, !251}
!251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !252, size: 64)
!252 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !168)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !254, line: 154)
!254 = !DISubprogram(name: "mbsrtowcs", scope: !169, file: !169, line: 411, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!237, !204, !257, !237, !241}
!257 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !258)
!258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !239, size: 64)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !260, line: 155)
!260 = !DISubprogram(name: "putwc", scope: !169, file: !169, line: 763, type: !208, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !262, line: 156)
!262 = !DISubprogram(name: "putwchar", scope: !169, file: !169, line: 769, type: !263, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!263 = !DISubroutineType(types: !264)
!264 = !{!184, !203}
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !266, line: 158)
!266 = !DISubprogram(name: "swprintf", scope: !169, file: !169, line: 607, type: !267, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!267 = !DISubroutineType(types: !268)
!268 = !{!52, !204, !237, !214, null}
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !270, line: 160)
!270 = !DISubprogram(name: "swscanf", scope: !169, file: !169, line: 648, type: !271, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!271 = !DISubroutineType(types: !272)
!272 = !{!52, !214, !214, null}
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !274, line: 161)
!274 = !DISubprogram(name: "ungetwc", scope: !169, file: !169, line: 792, type: !275, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!275 = !DISubroutineType(types: !276)
!276 = !{!184, !184, !194}
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !278, line: 162)
!278 = !DISubprogram(name: "vfwprintf", scope: !169, file: !169, line: 615, type: !279, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!279 = !DISubroutineType(types: !280)
!280 = !{!52, !205, !214, !281}
!281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !282, size: 64)
!282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !283, identifier: "_ZTS13__va_list_tag")
!283 = !{!284, !285, !286, !287}
!284 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !282, file: !2, baseType: !10, size: 32)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !282, file: !2, baseType: !10, size: 32, offset: 32)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !282, file: !2, baseType: !110, size: 64, offset: 64)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !282, file: !2, baseType: !110, size: 64, offset: 128)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !289, line: 164)
!289 = !DISubprogram(name: "vfwscanf", scope: !169, file: !169, line: 692, type: !279, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !291, line: 167)
!291 = !DISubprogram(name: "vswprintf", scope: !169, file: !169, line: 628, type: !292, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!292 = !DISubroutineType(types: !293)
!293 = !{!52, !204, !237, !214, !281}
!294 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !295, line: 170)
!295 = !DISubprogram(name: "vswscanf", scope: !169, file: !169, line: 704, type: !296, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!296 = !DISubroutineType(types: !297)
!297 = !{!52, !214, !214, !281}
!298 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !299, line: 172)
!299 = !DISubprogram(name: "vwprintf", scope: !169, file: !169, line: 623, type: !300, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!300 = !DISubroutineType(types: !301)
!301 = !{!52, !214, !281}
!302 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !303, line: 174)
!303 = !DISubprogram(name: "vwscanf", scope: !169, file: !169, line: 700, type: !300, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!304 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !305, line: 176)
!305 = !DISubprogram(name: "wcrtomb", scope: !169, file: !169, line: 373, type: !306, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!306 = !DISubroutineType(types: !307)
!307 = !{!237, !308, !203, !241}
!308 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !309)
!309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!310 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !311, line: 177)
!311 = !DISubprogram(name: "wcscat", scope: !169, file: !169, line: 157, type: !312, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!312 = !DISubroutineType(types: !313)
!313 = !{!202, !204, !214}
!314 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !315, line: 178)
!315 = !DISubprogram(name: "wcscmp", scope: !169, file: !169, line: 166, type: !316, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!316 = !DISubroutineType(types: !317)
!317 = !{!52, !215, !215}
!318 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !319, line: 179)
!319 = !DISubprogram(name: "wcscoll", scope: !169, file: !169, line: 195, type: !316, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!320 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !321, line: 180)
!321 = !DISubprogram(name: "wcscpy", scope: !169, file: !169, line: 147, type: !312, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!322 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !323, line: 181)
!323 = !DISubprogram(name: "wcscspn", scope: !169, file: !169, line: 255, type: !324, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!324 = !DISubroutineType(types: !325)
!325 = !{!237, !215, !215}
!326 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !327, line: 182)
!327 = !DISubprogram(name: "wcsftime", scope: !169, file: !169, line: 858, type: !328, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!328 = !DISubroutineType(types: !329)
!329 = !{!237, !204, !237, !214, !330}
!330 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !331)
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !169, line: 137, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!334 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !335, line: 183)
!335 = !DISubprogram(name: "wcslen", scope: !169, file: !169, line: 290, type: !336, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!336 = !DISubroutineType(types: !337)
!337 = !{!237, !215}
!338 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !339, line: 184)
!339 = !DISubprogram(name: "wcsncat", scope: !169, file: !169, line: 161, type: !340, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!340 = !DISubroutineType(types: !341)
!341 = !{!202, !204, !214, !237}
!342 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !343, line: 185)
!343 = !DISubprogram(name: "wcsncmp", scope: !169, file: !169, line: 169, type: !344, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!344 = !DISubroutineType(types: !345)
!345 = !{!52, !215, !215, !237}
!346 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !347, line: 186)
!347 = !DISubprogram(name: "wcsncpy", scope: !169, file: !169, line: 152, type: !340, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!348 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !349, line: 187)
!349 = !DISubprogram(name: "wcsrtombs", scope: !169, file: !169, line: 417, type: !350, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!350 = !DISubroutineType(types: !351)
!351 = !{!237, !308, !352, !237, !241}
!352 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !353)
!353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !215, size: 64)
!354 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !355, line: 188)
!355 = !DISubprogram(name: "wcsspn", scope: !169, file: !169, line: 259, type: !324, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!356 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !357, line: 189)
!357 = !DISubprogram(name: "wcstod", scope: !169, file: !169, line: 453, type: !358, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!358 = !DISubroutineType(types: !359)
!359 = !{!360, !214, !361}
!360 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!361 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !362)
!362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !202, size: 64)
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !364, line: 191)
!364 = !DISubprogram(name: "wcstof", scope: !169, file: !169, line: 460, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!367, !214, !361}
!367 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!368 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !369, line: 193)
!369 = !DISubprogram(name: "wcstok", scope: !169, file: !169, line: 285, type: !370, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!370 = !DISubroutineType(types: !371)
!371 = !{!202, !204, !214, !361}
!372 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !373, line: 194)
!373 = !DISubprogram(name: "wcstol", scope: !169, file: !169, line: 471, type: !374, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!374 = !DISubroutineType(types: !375)
!375 = !{!55, !214, !361, !52}
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !377, line: 195)
!377 = !DISubprogram(name: "wcstoul", scope: !169, file: !169, line: 476, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!83, !214, !361, !52}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !381, line: 196)
!381 = !DISubprogram(name: "wcsxfrm", scope: !169, file: !169, line: 199, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!237, !204, !214, !237}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !385, line: 197)
!385 = !DISubprogram(name: "wctob", scope: !169, file: !169, line: 360, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!52, !184}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !389, line: 198)
!389 = !DISubprogram(name: "wmemcmp", scope: !169, file: !169, line: 328, type: !344, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !391, line: 199)
!391 = !DISubprogram(name: "wmemcpy", scope: !169, file: !169, line: 332, type: !340, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !393, line: 200)
!393 = !DISubprogram(name: "wmemmove", scope: !169, file: !169, line: 337, type: !394, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DISubroutineType(types: !395)
!395 = !{!202, !202, !215, !237}
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !397, line: 201)
!397 = !DISubprogram(name: "wmemset", scope: !169, file: !169, line: 341, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!202, !202, !203, !237}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !401, line: 202)
!401 = !DISubprogram(name: "wprintf", scope: !169, file: !169, line: 604, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!52, !214, null}
!404 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !405, line: 203)
!405 = !DISubprogram(name: "wscanf", scope: !169, file: !169, line: 645, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !407, line: 204)
!407 = !DISubprogram(name: "wcschr", scope: !169, file: !169, line: 230, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!202, !215, !203}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !411, line: 205)
!411 = !DISubprogram(name: "wcspbrk", scope: !169, file: !169, line: 269, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!202, !215, !215}
!414 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !415, line: 206)
!415 = !DISubprogram(name: "wcsrchr", scope: !169, file: !169, line: 240, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !417, line: 207)
!417 = !DISubprogram(name: "wcsstr", scope: !169, file: !169, line: 280, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !419, line: 208)
!419 = !DISubprogram(name: "wmemchr", scope: !169, file: !169, line: 323, type: !420, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!420 = !DISubroutineType(types: !421)
!421 = !{!202, !215, !203, !237}
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !424, line: 248)
!423 = !DINamespace(name: "__gnu_cxx", scope: null, file: !44, line: 225)
!424 = !DISubprogram(name: "wcstold", scope: !169, file: !169, line: 462, type: !425, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!425 = !DISubroutineType(types: !426)
!426 = !{!427, !214, !361}
!427 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !429, line: 257)
!429 = !DISubprogram(name: "wcstoll", scope: !169, file: !169, line: 486, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!432, !214, !361, !52}
!432 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!433 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !434, line: 258)
!434 = !DISubprogram(name: "wcstoull", scope: !169, file: !169, line: 493, type: !435, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!435 = !DISubroutineType(types: !436)
!436 = !{!437, !214, !361, !52}
!437 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!438 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !424, line: 264)
!439 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !429, line: 265)
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !434, line: 266)
!441 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !364, line: 280)
!442 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !289, line: 283)
!443 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !295, line: 286)
!444 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !303, line: 289)
!445 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !424, line: 293)
!446 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !429, line: 294)
!447 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !434, line: 295)
!448 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !449, line: 44)
!449 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !43, file: !44, line: 201, baseType: !83)
!450 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !451, line: 45)
!451 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !43, file: !44, line: 202, baseType: !55)
!452 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !453, line: 53)
!453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !454, line: 53, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!454 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!455 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !456, line: 54)
!456 = !DISubprogram(name: "setlocale", scope: !454, file: !454, line: 124, type: !457, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!457 = !DISubroutineType(types: !458)
!458 = !{!309, !52, !239}
!459 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !460, line: 55)
!460 = !DISubprogram(name: "localeconv", scope: !454, file: !454, line: 127, type: !461, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!461 = !DISubroutineType(types: !462)
!462 = !{!463}
!463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !453, size: 64)
!464 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !465, line: 64)
!465 = !DISubprogram(name: "isalnum", scope: !466, file: !466, line: 110, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!466 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!467 = !DISubroutineType(types: !468)
!468 = !{!52, !52}
!469 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !470, line: 65)
!470 = !DISubprogram(name: "isalpha", scope: !466, file: !466, line: 111, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !472, line: 66)
!472 = !DISubprogram(name: "iscntrl", scope: !466, file: !466, line: 112, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !474, line: 67)
!474 = !DISubprogram(name: "isdigit", scope: !466, file: !466, line: 113, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !476, line: 68)
!476 = !DISubprogram(name: "isgraph", scope: !466, file: !466, line: 115, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !478, line: 69)
!478 = !DISubprogram(name: "islower", scope: !466, file: !466, line: 114, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !480, line: 70)
!480 = !DISubprogram(name: "isprint", scope: !466, file: !466, line: 116, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !482, line: 71)
!482 = !DISubprogram(name: "ispunct", scope: !466, file: !466, line: 117, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !484, line: 72)
!484 = !DISubprogram(name: "isspace", scope: !466, file: !466, line: 118, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !486, line: 73)
!486 = !DISubprogram(name: "isupper", scope: !466, file: !466, line: 119, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !488, line: 74)
!488 = !DISubprogram(name: "isxdigit", scope: !466, file: !466, line: 120, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !490, line: 75)
!490 = !DISubprogram(name: "tolower", scope: !466, file: !466, line: 124, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!491 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !492, line: 76)
!492 = !DISubprogram(name: "toupper", scope: !466, file: !466, line: 127, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!493 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !494, line: 87)
!494 = !DISubprogram(name: "isblank", scope: !466, file: !466, line: 136, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !496, line: 124)
!496 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !497, line: 62, baseType: !498)
!497 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!498 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !497, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !500, line: 125)
!500 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !497, line: 70, baseType: !501)
!501 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !497, line: 66, size: 128, elements: !502, identifier: "_ZTS6ldiv_t")
!502 = !{!503, !504}
!503 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !501, file: !497, line: 68, baseType: !55, size: 64)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !501, file: !497, line: 69, baseType: !55, size: 64, offset: 64)
!505 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !506, line: 127)
!506 = !DISubprogram(name: "abort", scope: !497, file: !497, line: 476, type: !507, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!507 = !DISubroutineType(types: !508)
!508 = !{null}
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !510, line: 128)
!510 = !DISubprogram(name: "abs", scope: !497, file: !497, line: 735, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !512, line: 129)
!512 = !DISubprogram(name: "atexit", scope: !497, file: !497, line: 480, type: !513, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!513 = !DISubroutineType(types: !514)
!514 = !{!52, !515}
!515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !507, size: 64)
!516 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !517, line: 132)
!517 = !DISubprogram(name: "at_quick_exit", scope: !497, file: !497, line: 485, type: !513, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!518 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !519, line: 135)
!519 = !DISubprogram(name: "atof", scope: !497, file: !497, line: 105, type: !520, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!520 = !DISubroutineType(types: !521)
!521 = !{!360, !239}
!522 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !523, line: 136)
!523 = !DISubprogram(name: "atoi", scope: !497, file: !497, line: 108, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!524 = !DISubroutineType(types: !525)
!525 = !{!52, !239}
!526 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !527, line: 137)
!527 = !DISubprogram(name: "atol", scope: !497, file: !497, line: 111, type: !528, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!528 = !DISubroutineType(types: !529)
!529 = !{!55, !239}
!530 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !531, line: 138)
!531 = !DISubprogram(name: "bsearch", scope: !497, file: !497, line: 715, type: !532, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!532 = !DISubroutineType(types: !533)
!533 = !{!110, !39, !39, !237, !237, !534}
!534 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !497, line: 702, baseType: !535)
!535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !536, size: 64)
!536 = !DISubroutineType(types: !537)
!537 = !{!52, !39, !39}
!538 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !539, line: 139)
!539 = !DISubprogram(name: "calloc", scope: !497, file: !497, line: 429, type: !540, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!540 = !DISubroutineType(types: !541)
!541 = !{!110, !237, !237}
!542 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !543, line: 140)
!543 = !DISubprogram(name: "div", scope: !497, file: !497, line: 749, type: !544, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!544 = !DISubroutineType(types: !545)
!545 = !{!496, !52, !52}
!546 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !547, line: 141)
!547 = !DISubprogram(name: "exit", scope: !497, file: !497, line: 504, type: !548, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!548 = !DISubroutineType(types: !549)
!549 = !{null, !52}
!550 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !551, line: 142)
!551 = !DISubprogram(name: "free", scope: !497, file: !497, line: 444, type: !552, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!552 = !DISubroutineType(types: !553)
!553 = !{null, !110}
!554 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !555, line: 143)
!555 = !DISubprogram(name: "getenv", scope: !497, file: !497, line: 525, type: !556, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!556 = !DISubroutineType(types: !557)
!557 = !{!309, !239}
!558 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !559, line: 144)
!559 = !DISubprogram(name: "labs", scope: !497, file: !497, line: 736, type: !560, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!560 = !DISubroutineType(types: !561)
!561 = !{!55, !55}
!562 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !563, line: 145)
!563 = !DISubprogram(name: "ldiv", scope: !497, file: !497, line: 751, type: !564, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!564 = !DISubroutineType(types: !565)
!565 = !{!500, !55, !55}
!566 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !567, line: 146)
!567 = !DISubprogram(name: "malloc", scope: !497, file: !497, line: 427, type: !568, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!568 = !DISubroutineType(types: !569)
!569 = !{!110, !237}
!570 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !571, line: 148)
!571 = !DISubprogram(name: "mblen", scope: !497, file: !497, line: 823, type: !572, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!572 = !DISubroutineType(types: !573)
!573 = !{!52, !239, !237}
!574 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !575, line: 149)
!575 = !DISubprogram(name: "mbstowcs", scope: !497, file: !497, line: 834, type: !576, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!576 = !DISubroutineType(types: !577)
!577 = !{!237, !204, !238, !237}
!578 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !579, line: 150)
!579 = !DISubprogram(name: "mbtowc", scope: !497, file: !497, line: 826, type: !580, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!580 = !DISubroutineType(types: !581)
!581 = !{!52, !204, !238, !237}
!582 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !583, line: 152)
!583 = !DISubprogram(name: "qsort", scope: !497, file: !497, line: 725, type: !584, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!584 = !DISubroutineType(types: !585)
!585 = !{null, !110, !237, !237, !534}
!586 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !587, line: 155)
!587 = !DISubprogram(name: "quick_exit", scope: !497, file: !497, line: 510, type: !548, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!588 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !589, line: 158)
!589 = !DISubprogram(name: "rand", scope: !497, file: !497, line: 335, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!590 = !DISubroutineType(types: !591)
!591 = !{!52}
!592 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !593, line: 159)
!593 = !DISubprogram(name: "realloc", scope: !497, file: !497, line: 441, type: !594, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!594 = !DISubroutineType(types: !595)
!595 = !{!110, !110, !237}
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !597, line: 160)
!597 = !DISubprogram(name: "srand", scope: !497, file: !497, line: 337, type: !598, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!598 = !DISubroutineType(types: !599)
!599 = !{null, !10}
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !601, line: 161)
!601 = !DISubprogram(name: "strtod", scope: !497, file: !497, line: 125, type: !602, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!602 = !DISubroutineType(types: !603)
!603 = !{!360, !238, !604}
!604 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !605)
!605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !309, size: 64)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !607, line: 162)
!607 = !DISubprogram(name: "strtol", scope: !497, file: !497, line: 144, type: !608, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!608 = !DISubroutineType(types: !609)
!609 = !{!55, !238, !604, !52}
!610 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !611, line: 163)
!611 = !DISubprogram(name: "strtoul", scope: !497, file: !497, line: 148, type: !612, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!612 = !DISubroutineType(types: !613)
!613 = !{!83, !238, !604, !52}
!614 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !615, line: 164)
!615 = !DISubprogram(name: "system", scope: !497, file: !497, line: 677, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!616 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !617, line: 166)
!617 = !DISubprogram(name: "wcstombs", scope: !497, file: !497, line: 837, type: !618, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!618 = !DISubroutineType(types: !619)
!619 = !{!237, !308, !214, !237}
!620 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !621, line: 167)
!621 = !DISubprogram(name: "wctomb", scope: !497, file: !497, line: 830, type: !622, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!622 = !DISubroutineType(types: !623)
!623 = !{!52, !309, !203}
!624 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !625, line: 220)
!625 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !497, line: 82, baseType: !626)
!626 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !497, line: 78, size: 128, elements: !627, identifier: "_ZTS7lldiv_t")
!627 = !{!628, !629}
!628 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !626, file: !497, line: 80, baseType: !432, size: 64)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !626, file: !497, line: 81, baseType: !432, size: 64, offset: 64)
!630 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !631, line: 226)
!631 = !DISubprogram(name: "_Exit", scope: !497, file: !497, line: 518, type: !548, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!632 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !633, line: 230)
!633 = !DISubprogram(name: "llabs", scope: !497, file: !497, line: 740, type: !634, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!634 = !DISubroutineType(types: !635)
!635 = !{!432, !432}
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !637, line: 236)
!637 = !DISubprogram(name: "lldiv", scope: !497, file: !497, line: 757, type: !638, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!638 = !DISubroutineType(types: !639)
!639 = !{!625, !432, !432}
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !641, line: 247)
!641 = !DISubprogram(name: "atoll", scope: !497, file: !497, line: 118, type: !642, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!642 = !DISubroutineType(types: !643)
!643 = !{!432, !239}
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !645, line: 248)
!645 = !DISubprogram(name: "strtoll", scope: !497, file: !497, line: 170, type: !646, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!646 = !DISubroutineType(types: !647)
!647 = !{!432, !238, !604, !52}
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !649, line: 249)
!649 = !DISubprogram(name: "strtoull", scope: !497, file: !497, line: 175, type: !650, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!650 = !DISubroutineType(types: !651)
!651 = !{!437, !238, !604, !52}
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !653, line: 251)
!653 = !DISubprogram(name: "strtof", scope: !497, file: !497, line: 133, type: !654, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!654 = !DISubroutineType(types: !655)
!655 = !{!367, !238, !604}
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !657, line: 252)
!657 = !DISubprogram(name: "strtold", scope: !497, file: !497, line: 136, type: !658, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!658 = !DISubroutineType(types: !659)
!659 = !{!427, !238, !604}
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !625, line: 260)
!661 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !631, line: 262)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !633, line: 264)
!663 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !664, line: 265)
!664 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !423, file: !665, line: 233, type: !638, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!665 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/cstdlib", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!666 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !637, line: 266)
!667 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !641, line: 268)
!668 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !653, line: 269)
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !645, line: 270)
!670 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !649, line: 271)
!671 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !657, line: 272)
!672 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !673, line: 98)
!673 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !196, line: 48, baseType: !197)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !675, line: 99)
!675 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !196, line: 112, baseType: !676)
!676 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !677, line: 25, baseType: !678)
!677 = !DIFile(filename: "/usr/include/_G_config.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!678 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !677, line: 21, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !680, line: 101)
!680 = !DISubprogram(name: "clearerr", scope: !196, file: !196, line: 828, type: !681, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DISubroutineType(types: !682)
!682 = !{null, !683}
!683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !673, size: 64)
!684 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !685, line: 102)
!685 = !DISubprogram(name: "fclose", scope: !196, file: !196, line: 239, type: !686, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!686 = !DISubroutineType(types: !687)
!687 = !{!52, !683}
!688 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !689, line: 103)
!689 = !DISubprogram(name: "feof", scope: !196, file: !196, line: 830, type: !686, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!690 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !691, line: 104)
!691 = !DISubprogram(name: "ferror", scope: !196, file: !196, line: 832, type: !686, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!692 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !693, line: 105)
!693 = !DISubprogram(name: "fflush", scope: !196, file: !196, line: 244, type: !686, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!694 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !695, line: 106)
!695 = !DISubprogram(name: "fgetc", scope: !196, file: !196, line: 533, type: !686, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!696 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !697, line: 107)
!697 = !DISubprogram(name: "fgetpos", scope: !196, file: !196, line: 800, type: !698, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!698 = !DISubroutineType(types: !699)
!699 = !{!52, !700, !701}
!700 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !683)
!701 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !702)
!702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !675, size: 64)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !704, line: 108)
!704 = !DISubprogram(name: "fgets", scope: !196, file: !196, line: 624, type: !705, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!705 = !DISubroutineType(types: !706)
!706 = !{!309, !308, !52, !700}
!707 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !708, line: 109)
!708 = !DISubprogram(name: "fopen", scope: !196, file: !196, line: 274, type: !709, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!709 = !DISubroutineType(types: !710)
!710 = !{!683, !238, !238}
!711 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !712, line: 110)
!712 = !DISubprogram(name: "fprintf", scope: !196, file: !196, line: 358, type: !713, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!713 = !DISubroutineType(types: !714)
!714 = !{!52, !700, !238, null}
!715 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !716, line: 111)
!716 = !DISubprogram(name: "fputc", scope: !196, file: !196, line: 575, type: !717, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!717 = !DISubroutineType(types: !718)
!718 = !{!52, !52, !683}
!719 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !720, line: 112)
!720 = !DISubprogram(name: "fputs", scope: !196, file: !196, line: 691, type: !721, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!721 = !DISubroutineType(types: !722)
!722 = !{!52, !238, !700}
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !724, line: 113)
!724 = !DISubprogram(name: "fread", scope: !196, file: !196, line: 711, type: !725, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DISubroutineType(types: !726)
!726 = !{!237, !727, !237, !237, !700}
!727 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !110)
!728 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !729, line: 114)
!729 = !DISubprogram(name: "freopen", scope: !196, file: !196, line: 280, type: !730, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!730 = !DISubroutineType(types: !731)
!731 = !{!683, !238, !238, !700}
!732 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !733, line: 115)
!733 = !DISubprogram(name: "fscanf", scope: !196, file: !196, line: 427, type: !713, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!734 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !735, line: 116)
!735 = !DISubprogram(name: "fseek", scope: !196, file: !196, line: 751, type: !736, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!736 = !DISubroutineType(types: !737)
!737 = !{!52, !683, !55, !52}
!738 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !739, line: 117)
!739 = !DISubprogram(name: "fsetpos", scope: !196, file: !196, line: 805, type: !740, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!740 = !DISubroutineType(types: !741)
!741 = !{!52, !683, !742}
!742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !743, size: 64)
!743 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !675)
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !745, line: 118)
!745 = !DISubprogram(name: "ftell", scope: !196, file: !196, line: 756, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!55, !683}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !749, line: 119)
!749 = !DISubprogram(name: "fwrite", scope: !196, file: !196, line: 717, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!237, !752, !237, !237, !700}
!752 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !39)
!753 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !754, line: 120)
!754 = !DISubprogram(name: "getc", scope: !196, file: !196, line: 534, type: !686, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!755 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !756, line: 121)
!756 = !DISubprogram(name: "getchar", scope: !196, file: !196, line: 540, type: !590, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!757 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !758, line: 124)
!758 = !DISubprogram(name: "gets", scope: !196, file: !196, line: 640, type: !759, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!759 = !DISubroutineType(types: !760)
!760 = !{!309, !309}
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !762, line: 126)
!762 = !DISubprogram(name: "perror", scope: !196, file: !196, line: 848, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{null, !239}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !766, line: 127)
!766 = !DISubprogram(name: "printf", scope: !196, file: !196, line: 364, type: !767, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DISubroutineType(types: !768)
!768 = !{!52, !238, null}
!769 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !770, line: 128)
!770 = !DISubprogram(name: "putc", scope: !196, file: !196, line: 576, type: !717, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !772, line: 129)
!772 = !DISubprogram(name: "putchar", scope: !196, file: !196, line: 582, type: !467, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !774, line: 130)
!774 = !DISubprogram(name: "puts", scope: !196, file: !196, line: 697, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!775 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !776, line: 131)
!776 = !DISubprogram(name: "remove", scope: !196, file: !196, line: 180, type: !524, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !778, line: 132)
!778 = !DISubprogram(name: "rename", scope: !196, file: !196, line: 182, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!52, !239, !239}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !782, line: 133)
!782 = !DISubprogram(name: "rewind", scope: !196, file: !196, line: 761, type: !681, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !784, line: 134)
!784 = !DISubprogram(name: "scanf", scope: !196, file: !196, line: 433, type: !767, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!785 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !786, line: 135)
!786 = !DISubprogram(name: "setbuf", scope: !196, file: !196, line: 334, type: !787, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!787 = !DISubroutineType(types: !788)
!788 = !{null, !700, !308}
!789 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !790, line: 136)
!790 = !DISubprogram(name: "setvbuf", scope: !196, file: !196, line: 338, type: !791, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!791 = !DISubroutineType(types: !792)
!792 = !{!52, !700, !308, !52, !237}
!793 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !794, line: 137)
!794 = !DISubprogram(name: "sprintf", scope: !196, file: !196, line: 366, type: !795, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!795 = !DISubroutineType(types: !796)
!796 = !{!52, !308, !238, null}
!797 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !798, line: 138)
!798 = !DISubprogram(name: "sscanf", scope: !196, file: !196, line: 435, type: !799, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!799 = !DISubroutineType(types: !800)
!800 = !{!52, !238, !238, null}
!801 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !802, line: 139)
!802 = !DISubprogram(name: "tmpfile", scope: !196, file: !196, line: 197, type: !803, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!803 = !DISubroutineType(types: !804)
!804 = !{!683}
!805 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !806, line: 141)
!806 = !DISubprogram(name: "tmpnam", scope: !196, file: !196, line: 211, type: !759, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!807 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !808, line: 143)
!808 = !DISubprogram(name: "ungetc", scope: !196, file: !196, line: 704, type: !717, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!809 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !810, line: 144)
!810 = !DISubprogram(name: "vfprintf", scope: !196, file: !196, line: 373, type: !811, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!811 = !DISubroutineType(types: !812)
!812 = !{!52, !700, !238, !281}
!813 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !814, line: 145)
!814 = !DISubprogram(name: "vprintf", scope: !196, file: !196, line: 379, type: !815, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!815 = !DISubroutineType(types: !816)
!816 = !{!52, !238, !281}
!817 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !818, line: 146)
!818 = !DISubprogram(name: "vsprintf", scope: !196, file: !196, line: 381, type: !819, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!819 = !DISubroutineType(types: !820)
!820 = !{!52, !308, !238, !281}
!821 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !822, line: 175)
!822 = !DISubprogram(name: "snprintf", scope: !196, file: !196, line: 388, type: !823, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!823 = !DISubroutineType(types: !824)
!824 = !{!52, !308, !237, !238, null}
!825 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !826, line: 176)
!826 = !DISubprogram(name: "vfscanf", scope: !196, file: !196, line: 473, type: !811, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!827 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !828, line: 177)
!828 = !DISubprogram(name: "vscanf", scope: !196, file: !196, line: 481, type: !815, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!829 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !830, line: 178)
!830 = !DISubprogram(name: "vsnprintf", scope: !196, file: !196, line: 392, type: !831, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!831 = !DISubroutineType(types: !832)
!832 = !{!52, !308, !237, !238, !281}
!833 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !423, entity: !834, line: 179)
!834 = !DISubprogram(name: "vsscanf", scope: !196, file: !196, line: 485, type: !835, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!835 = !DISubroutineType(types: !836)
!836 = !{!52, !238, !238, !281}
!837 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !822, line: 185)
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !826, line: 186)
!839 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !828, line: 187)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !830, line: 188)
!841 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !43, entity: !834, line: 189)
!842 = !{i32 2, !"Dwarf Version", i32 4}
!843 = !{i32 2, !"Debug Info Version", i32 3}
!844 = !{!845, !846, i64 0}
!845 = !{!"_ZTS9ArchState", !846, i64 0, !849, i64 4, !849, i64 8, !849, i64 12}
!846 = !{!"_ZTSN14AsyncHyperCall4NameE", !847, i64 0}
!847 = !{!"omnipotent char", !848, i64 0}
!848 = !{!"Simple C++ TBAA"}
!849 = !{!"int", !847, i64 0}
!850 = !{!851, !847, i64 2065}
!851 = !{!"_ZTS5State", !847, i64 16, !852, i64 2064, !847, i64 2080, !854, i64 2088, !856, i64 2112, !859, i64 2144, !860, i64 2416, !861, i64 2544, !862, i64 2672, !847, i64 2680}
!852 = !{!"_ZTS10ArithFlags", !853, i64 0, !847, i64 1, !853, i64 2, !847, i64 3, !853, i64 4, !847, i64 5, !853, i64 6, !847, i64 7, !853, i64 8, !847, i64 9, !853, i64 10, !847, i64 11, !853, i64 12, !847, i64 13, !853, i64 14, !853, i64 15}
!853 = !{!"bool", !847, i64 0}
!854 = !{!"_ZTS8Segments", !855, i64 0, !847, i64 2, !855, i64 4, !847, i64 6, !855, i64 8, !847, i64 10, !855, i64 12, !847, i64 14, !855, i64 16, !847, i64 18, !855, i64 20, !847, i64 22}
!855 = !{!"short", !847, i64 0}
!856 = !{!"_ZTS12AddressSpace", !857, i64 0, !858, i64 8, !857, i64 16, !858, i64 24}
!857 = !{!"long", !847, i64 0}
!858 = !{!"_ZTS3Reg", !847, i64 0}
!859 = !{!"_ZTS3GPR", !857, i64 0, !858, i64 8, !857, i64 16, !858, i64 24, !857, i64 32, !858, i64 40, !857, i64 48, !858, i64 56, !857, i64 64, !858, i64 72, !857, i64 80, !858, i64 88, !857, i64 96, !858, i64 104, !857, i64 112, !858, i64 120, !857, i64 128, !858, i64 136, !857, i64 144, !858, i64 152, !857, i64 160, !858, i64 168, !857, i64 176, !858, i64 184, !857, i64 192, !858, i64 200, !857, i64 208, !858, i64 216, !857, i64 224, !858, i64 232, !857, i64 240, !858, i64 248, !857, i64 256, !858, i64 264}
!860 = !{!"_ZTS8X87Stack", !847, i64 0}
!861 = !{!"_ZTS3MMX", !847, i64 0}
!862 = !{!"_ZTS14FPUStatusFlags", !847, i64 0, !847, i64 1, !847, i64 2, !847, i64 3, !847, i64 4, !847, i64 5, !847, i64 6, !847, i64 7}
!863 = !{!851, !847, i64 2067}
!864 = !{!851, !847, i64 2069}
!865 = !{!851, !847, i64 2071}
!866 = !{!851, !847, i64 2073}
!867 = !{!851, !847, i64 2077}
!868 = !{!847, !847, i64 0}
!869 = !{!855, !855, i64 0}
!870 = !{!857, !857, i64 0}
!871 = !{!872, !872, i64 0}
!872 = !{!"float", !847, i64 0}
!873 = !{!874, !874, i64 0}
!874 = !{!"double", !847, i64 0}
!875 = !{!876, !847, i64 0}
!876 = !{!"_ZTSN3RegUt_Ut_E", !847, i64 0, !847, i64 1}
!877 = !{!849, !849, i64 0}
!878 = !{!876, !847, i64 1}
!879 = !{!880, !880, i64 0}
!880 = !{!"__int128", !847, i64 0}
!881 = !{!845, !849, i64 8}
!882 = !{!851, !847, i64 2075}
!883 = distinct !{!883, !884}
!884 = !{!"llvm.loop.unroll.enable"}
!885 = distinct !{!885, !884}
!886 = !{!887, !874, i64 8}
!887 = !{!"_ZTSN8X87StackUt_E", !857, i64 0, !874, i64 8}
!888 = distinct !{!888, !884}
!889 = distinct !{!889, !884}
!890 = distinct !{!890, !884}
!891 = distinct !{!891, !884}
!892 = distinct !{!892, !884}
!893 = distinct !{!893, !884}
!894 = distinct !{!894, !884}
!895 = !{!851, !847, i64 2673}
!896 = !{!851, !847, i64 2677}
!897 = !{!851, !847, i64 2675}
!898 = !{!851, !847, i64 2679}
!899 = !{!900, !849, i64 0}
!900 = !{!"_ZTSN4XCR0Ut_E", !849, i64 0, !849, i64 4}
!901 = !{!900, !849, i64 4}
!902 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 29, type: !903, isLocal: false, isDefinition: true, scopeLine: 29, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!903 = !DISubroutineType(types: !904)
!904 = !{!905, !908, !1367, !905}
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !906, size: 64)
!906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !907, line: 37, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!907 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!908 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !909, size: 64)
!909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !26, line: 551, size: 21504, align: 128, elements: !910, identifier: "_ZTS5State")
!910 = !{!911, !919, !1128, !1148, !1178, !1203, !1224, !1261, !1271, !1332, !1343}
!911 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !909, baseType: !912)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !913, line: 22, size: 128, elements: !914, identifier: "_ZTS9ArchState")
!913 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!914 = !{!915, !916, !917, !918}
!915 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !912, file: !913, line: 24, baseType: !4, size: 32)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !912, file: !913, line: 25, baseType: !8, size: 32, offset: 32)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !912, file: !913, line: 31, baseType: !8, size: 32, offset: 64)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !912, file: !913, line: 32, baseType: !8, size: 32, offset: 96)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !909, file: !26, line: 556, baseType: !920, size: 16384, offset: 128)
!920 = !DICompositeType(tag: DW_TAG_array_type, baseType: !921, size: 16384, elements: !1006)
!921 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !26, line: 453, size: 512, align: 128, elements: !922, identifier: "_ZTS9VectorReg")
!922 = !{!923, !998, !1063}
!923 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !921, file: !26, line: 454, baseType: !924, size: 128, align: 128)
!924 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !907, line: 292, size: 128, elements: !925, identifier: "_ZTS8vec128_t")
!925 = !{!926, !935, !942, !949, !954, !961, !966, !971, !976, !981, !986, !991}
!926 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !924, file: !907, line: 296, baseType: !927, size: 128)
!927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !907, line: 180, size: 128, elements: !928, identifier: "_ZTS11uint128v1_t")
!928 = !{!929}
!929 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !927, file: !907, line: 180, baseType: !930, size: 128)
!930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 128, elements: !933)
!931 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !907, line: 47, baseType: !932)
!932 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!933 = !{!934}
!934 = !DISubrange(count: 1)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !924, file: !907, line: 298, baseType: !936, size: 128)
!936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !907, line: 157, size: 128, elements: !937, identifier: "_ZTS10uint8v16_t")
!937 = !{!938}
!938 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !936, file: !907, line: 157, baseType: !939, size: 128)
!939 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 128, elements: !940)
!940 = !{!941}
!941 = !DISubrange(count: 16)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !924, file: !907, line: 299, baseType: !943, size: 128)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !907, line: 164, size: 128, elements: !944, identifier: "_ZTS10uint16v8_t")
!944 = !{!945}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !943, file: !907, line: 164, baseType: !946, size: 128)
!946 = !DICompositeType(tag: DW_TAG_array_type, baseType: !27, size: 128, elements: !947)
!947 = !{!948}
!948 = !DISubrange(count: 8)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !924, file: !907, line: 300, baseType: !950, size: 128)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !907, line: 170, size: 128, elements: !951, identifier: "_ZTS10uint32v4_t")
!951 = !{!952}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !950, file: !907, line: 170, baseType: !953, size: 128)
!953 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !181)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !924, file: !907, line: 301, baseType: !955, size: 128)
!955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !907, line: 175, size: 128, elements: !956, identifier: "_ZTS10uint64v2_t")
!956 = !{!957}
!957 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !955, file: !907, line: 175, baseType: !958, size: 128)
!958 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 128, elements: !959)
!959 = !{!960}
!960 = !DISubrange(count: 2)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !924, file: !907, line: 302, baseType: !962, size: 128)
!962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !907, line: 217, size: 128, elements: !963, identifier: "_ZTS11float32v4_t")
!963 = !{!964}
!964 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !962, file: !907, line: 217, baseType: !965, size: 128)
!965 = !DICompositeType(tag: DW_TAG_array_type, baseType: !367, size: 128, elements: !181)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !924, file: !907, line: 303, baseType: !967, size: 128)
!967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !907, line: 222, size: 128, elements: !968, identifier: "_ZTS11float64v2_t")
!968 = !{!969}
!969 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !967, file: !907, line: 222, baseType: !970, size: 128)
!970 = !DICompositeType(tag: DW_TAG_array_type, baseType: !360, size: 128, elements: !959)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !924, file: !907, line: 305, baseType: !972, size: 128)
!972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !907, line: 188, size: 128, elements: !973, identifier: "_ZTS9int8v16_t")
!973 = !{!974}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !972, file: !907, line: 188, baseType: !975, size: 128)
!975 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 128, elements: !940)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !924, file: !907, line: 306, baseType: !977, size: 128)
!977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !907, line: 195, size: 128, elements: !978, identifier: "_ZTS9int16v8_t")
!978 = !{!979}
!979 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !977, file: !907, line: 195, baseType: !980, size: 128)
!980 = !DICompositeType(tag: DW_TAG_array_type, baseType: !48, size: 128, elements: !947)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !924, file: !907, line: 307, baseType: !982, size: 128)
!982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !907, line: 201, size: 128, elements: !983, identifier: "_ZTS9int32v4_t")
!983 = !{!984}
!984 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !982, file: !907, line: 201, baseType: !985, size: 128)
!985 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 128, elements: !181)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !924, file: !907, line: 308, baseType: !987, size: 128)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !907, line: 206, size: 128, elements: !988, identifier: "_ZTS9int64v2_t")
!988 = !{!989}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !987, file: !907, line: 206, baseType: !990, size: 128)
!990 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 128, elements: !959)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !924, file: !907, line: 309, baseType: !992, size: 128)
!992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !907, line: 211, size: 128, elements: !993, identifier: "_ZTS10int128v1_t")
!993 = !{!994}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !992, file: !907, line: 211, baseType: !995, size: 128)
!995 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 128, elements: !933)
!996 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !907, line: 48, baseType: !997)
!997 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !921, file: !26, line: 455, baseType: !999, size: 256, align: 128)
!999 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !907, line: 315, size: 256, elements: !1000, identifier: "_ZTS8vec256_t")
!1000 = !{!1001, !1008, !1013, !1018, !1023, !1028, !1033, !1038, !1043, !1048, !1053, !1058}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !999, file: !907, line: 316, baseType: !1002, size: 256)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !907, line: 158, size: 256, elements: !1003, identifier: "_ZTS10uint8v32_t")
!1003 = !{!1004}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1002, file: !907, line: 158, baseType: !1005, size: 256)
!1005 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 256, elements: !1006)
!1006 = !{!1007}
!1007 = !DISubrange(count: 32)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !999, file: !907, line: 317, baseType: !1009, size: 256)
!1009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !907, line: 165, size: 256, elements: !1010, identifier: "_ZTS11uint16v16_t")
!1010 = !{!1011}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1009, file: !907, line: 165, baseType: !1012, size: 256)
!1012 = !DICompositeType(tag: DW_TAG_array_type, baseType: !27, size: 256, elements: !940)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !999, file: !907, line: 318, baseType: !1014, size: 256)
!1014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !907, line: 171, size: 256, elements: !1015, identifier: "_ZTS10uint32v8_t")
!1015 = !{!1016}
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1014, file: !907, line: 171, baseType: !1017, size: 256)
!1017 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !947)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !999, file: !907, line: 319, baseType: !1019, size: 256)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !907, line: 176, size: 256, elements: !1020, identifier: "_ZTS10uint64v4_t")
!1020 = !{!1021}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1019, file: !907, line: 176, baseType: !1022, size: 256)
!1022 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 256, elements: !181)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !999, file: !907, line: 320, baseType: !1024, size: 256)
!1024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !907, line: 181, size: 256, elements: !1025, identifier: "_ZTS11uint128v2_t")
!1025 = !{!1026}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1024, file: !907, line: 181, baseType: !1027, size: 256)
!1027 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 256, elements: !959)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !999, file: !907, line: 321, baseType: !1029, size: 256)
!1029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !907, line: 218, size: 256, elements: !1030, identifier: "_ZTS11float32v8_t")
!1030 = !{!1031}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1029, file: !907, line: 218, baseType: !1032, size: 256)
!1032 = !DICompositeType(tag: DW_TAG_array_type, baseType: !367, size: 256, elements: !947)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !999, file: !907, line: 322, baseType: !1034, size: 256)
!1034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !907, line: 223, size: 256, elements: !1035, identifier: "_ZTS11float64v4_t")
!1035 = !{!1036}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1034, file: !907, line: 223, baseType: !1037, size: 256)
!1037 = !DICompositeType(tag: DW_TAG_array_type, baseType: !360, size: 256, elements: !181)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !999, file: !907, line: 324, baseType: !1039, size: 256)
!1039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !907, line: 189, size: 256, elements: !1040, identifier: "_ZTS9int8v32_t")
!1040 = !{!1041}
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1039, file: !907, line: 189, baseType: !1042, size: 256)
!1042 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 256, elements: !1006)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !999, file: !907, line: 325, baseType: !1044, size: 256)
!1044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !907, line: 196, size: 256, elements: !1045, identifier: "_ZTS10int16v16_t")
!1045 = !{!1046}
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1044, file: !907, line: 196, baseType: !1047, size: 256)
!1047 = !DICompositeType(tag: DW_TAG_array_type, baseType: !48, size: 256, elements: !940)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !999, file: !907, line: 326, baseType: !1049, size: 256)
!1049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !907, line: 202, size: 256, elements: !1050, identifier: "_ZTS9int32v8_t")
!1050 = !{!1051}
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1049, file: !907, line: 202, baseType: !1052, size: 256)
!1052 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 256, elements: !947)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !999, file: !907, line: 327, baseType: !1054, size: 256)
!1054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !907, line: 207, size: 256, elements: !1055, identifier: "_ZTS9int64v4_t")
!1055 = !{!1056}
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1054, file: !907, line: 207, baseType: !1057, size: 256)
!1057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 256, elements: !181)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !999, file: !907, line: 328, baseType: !1059, size: 256)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !907, line: 212, size: 256, elements: !1060, identifier: "_ZTS10int128v2_t")
!1060 = !{!1061}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1059, file: !907, line: 212, baseType: !1062, size: 256)
!1062 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 256, elements: !959)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !921, file: !26, line: 456, baseType: !1064, size: 512, align: 128)
!1064 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !907, line: 334, size: 512, elements: !1065, identifier: "_ZTS8vec512_t")
!1065 = !{!1066, !1073, !1078, !1083, !1088, !1093, !1098, !1103, !1108, !1113, !1118, !1123}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1064, file: !907, line: 335, baseType: !1067, size: 512)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !907, line: 159, size: 512, elements: !1068, identifier: "_ZTS10uint8v64_t")
!1068 = !{!1069}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1067, file: !907, line: 159, baseType: !1070, size: 512)
!1070 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 512, elements: !1071)
!1071 = !{!1072}
!1072 = !DISubrange(count: 64)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1064, file: !907, line: 336, baseType: !1074, size: 512)
!1074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !907, line: 166, size: 512, elements: !1075, identifier: "_ZTS11uint16v32_t")
!1075 = !{!1076}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1074, file: !907, line: 166, baseType: !1077, size: 512)
!1077 = !DICompositeType(tag: DW_TAG_array_type, baseType: !27, size: 512, elements: !1006)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1064, file: !907, line: 337, baseType: !1079, size: 512)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !907, line: 172, size: 512, elements: !1080, identifier: "_ZTS11uint32v16_t")
!1080 = !{!1081}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1079, file: !907, line: 172, baseType: !1082, size: 512)
!1082 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !940)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1064, file: !907, line: 338, baseType: !1084, size: 512)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !907, line: 177, size: 512, elements: !1085, identifier: "_ZTS10uint64v8_t")
!1085 = !{!1086}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1084, file: !907, line: 177, baseType: !1087, size: 512)
!1087 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 512, elements: !947)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1064, file: !907, line: 339, baseType: !1089, size: 512)
!1089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !907, line: 182, size: 512, elements: !1090, identifier: "_ZTS11uint128v4_t")
!1090 = !{!1091}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1089, file: !907, line: 182, baseType: !1092, size: 512)
!1092 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 512, elements: !181)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1064, file: !907, line: 340, baseType: !1094, size: 512)
!1094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !907, line: 219, size: 512, elements: !1095, identifier: "_ZTS12float32v16_t")
!1095 = !{!1096}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1094, file: !907, line: 219, baseType: !1097, size: 512)
!1097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !367, size: 512, elements: !940)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1064, file: !907, line: 341, baseType: !1099, size: 512)
!1099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !907, line: 224, size: 512, elements: !1100, identifier: "_ZTS11float64v8_t")
!1100 = !{!1101}
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1099, file: !907, line: 224, baseType: !1102, size: 512)
!1102 = !DICompositeType(tag: DW_TAG_array_type, baseType: !360, size: 512, elements: !947)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1064, file: !907, line: 343, baseType: !1104, size: 512)
!1104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !907, line: 190, size: 512, elements: !1105, identifier: "_ZTS9int8v64_t")
!1105 = !{!1106}
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1104, file: !907, line: 190, baseType: !1107, size: 512)
!1107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 512, elements: !1071)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1064, file: !907, line: 344, baseType: !1109, size: 512)
!1109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !907, line: 197, size: 512, elements: !1110, identifier: "_ZTS10int16v32_t")
!1110 = !{!1111}
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1109, file: !907, line: 197, baseType: !1112, size: 512)
!1112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !48, size: 512, elements: !1006)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1064, file: !907, line: 345, baseType: !1114, size: 512)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !907, line: 203, size: 512, elements: !1115, identifier: "_ZTS10int32v16_t")
!1115 = !{!1116}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1114, file: !907, line: 203, baseType: !1117, size: 512)
!1117 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 512, elements: !940)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1064, file: !907, line: 346, baseType: !1119, size: 512)
!1119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !907, line: 208, size: 512, elements: !1120, identifier: "_ZTS9int64v8_t")
!1120 = !{!1121}
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1119, file: !907, line: 208, baseType: !1122, size: 512)
!1122 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 512, elements: !947)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1064, file: !907, line: 347, baseType: !1124, size: 512)
!1124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !907, line: 213, size: 512, elements: !1125, identifier: "_ZTS10int128v4_t")
!1125 = !{!1126}
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1124, file: !907, line: 213, baseType: !1127, size: 512)
!1127 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 512, elements: !181)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !909, file: !26, line: 560, baseType: !1129, size: 128, align: 64, offset: 16512)
!1129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !26, line: 326, size: 128, align: 64, elements: !1130, identifier: "_ZTS10ArithFlags")
!1130 = !{!1131, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147}
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1129, file: !26, line: 328, baseType: !1132, size: 8)
!1132 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !152)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1129, file: !26, line: 329, baseType: !77, size: 8, offset: 8)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1129, file: !26, line: 330, baseType: !1132, size: 8, offset: 16)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1129, file: !26, line: 331, baseType: !77, size: 8, offset: 24)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1129, file: !26, line: 332, baseType: !1132, size: 8, offset: 32)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1129, file: !26, line: 333, baseType: !77, size: 8, offset: 40)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1129, file: !26, line: 334, baseType: !1132, size: 8, offset: 48)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1129, file: !26, line: 335, baseType: !77, size: 8, offset: 56)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1129, file: !26, line: 336, baseType: !1132, size: 8, offset: 64)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1129, file: !26, line: 337, baseType: !77, size: 8, offset: 72)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1129, file: !26, line: 338, baseType: !1132, size: 8, offset: 80)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1129, file: !26, line: 339, baseType: !77, size: 8, offset: 88)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1129, file: !26, line: 340, baseType: !1132, size: 8, offset: 96)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1129, file: !26, line: 341, baseType: !77, size: 8, offset: 104)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1129, file: !26, line: 342, baseType: !1132, size: 8, offset: 112)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1129, file: !26, line: 343, baseType: !1132, size: 8, offset: 120)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !909, file: !26, line: 561, baseType: !1149, size: 64, align: 64, offset: 16640)
!1149 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !26, line: 290, size: 64, align: 64, elements: !1150, identifier: "_ZTS5Flags")
!1150 = !{!1151, !1152}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1149, file: !26, line: 291, baseType: !82, size: 64)
!1152 = !DIDerivedType(tag: DW_TAG_member, scope: !1149, file: !26, line: 292, baseType: !1153, size: 64)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1149, file: !26, line: 292, size: 64, elements: !1154, identifier: "_ZTSN5FlagsUt_E")
!1154 = !{!1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177}
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1153, file: !26, line: 293, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1153, file: !26, line: 294, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1153, file: !26, line: 295, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1153, file: !26, line: 296, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1153, file: !26, line: 298, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1153, file: !26, line: 299, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1153, file: !26, line: 300, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1153, file: !26, line: 301, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1153, file: !26, line: 303, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1153, file: !26, line: 304, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1153, file: !26, line: 305, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1153, file: !26, line: 306, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1153, file: !26, line: 308, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1153, file: !26, line: 309, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1153, file: !26, line: 310, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1153, file: !26, line: 312, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1153, file: !26, line: 313, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1153, file: !26, line: 314, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1153, file: !26, line: 315, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1153, file: !26, line: 317, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1153, file: !26, line: 318, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1153, file: !26, line: 319, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1153, file: !26, line: 320, baseType: !8, size: 32, offset: 32)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !909, file: !26, line: 562, baseType: !1179, size: 192, align: 64, offset: 16704)
!1179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !26, line: 406, size: 192, align: 64, elements: !1180, identifier: "_ZTS8Segments")
!1180 = !{!1181, !1183, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1179, file: !26, line: 407, baseType: !1182, size: 16)
!1182 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !27)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1179, file: !26, line: 408, baseType: !1184, size: 16, offset: 16)
!1184 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !26, line: 394, size: 16, elements: !1185, identifier: "_ZTS15SegmentSelector")
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1184, file: !26, line: 395, baseType: !27, size: 16)
!1187 = !DIDerivedType(tag: DW_TAG_member, scope: !1184, file: !26, line: 396, baseType: !1188, size: 16)
!1188 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1184, file: !26, line: 396, size: 16, elements: !1189, identifier: "_ZTSN15SegmentSelectorUt_E")
!1189 = !{!1190, !1191, !1192}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1188, file: !26, line: 397, baseType: !25, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1188, file: !26, line: 398, baseType: !34, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1188, file: !26, line: 399, baseType: !27, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1179, file: !26, line: 409, baseType: !1182, size: 16, offset: 32)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1179, file: !26, line: 410, baseType: !1184, size: 16, offset: 48)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1179, file: !26, line: 411, baseType: !1182, size: 16, offset: 64)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1179, file: !26, line: 412, baseType: !1184, size: 16, offset: 80)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1179, file: !26, line: 413, baseType: !1182, size: 16, offset: 96)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1179, file: !26, line: 414, baseType: !1184, size: 16, offset: 112)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1179, file: !26, line: 415, baseType: !1182, size: 16, offset: 128)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1179, file: !26, line: 416, baseType: !1184, size: 16, offset: 144)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1179, file: !26, line: 417, baseType: !1182, size: 16, offset: 160)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1179, file: !26, line: 418, baseType: !1184, size: 16, offset: 176)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !909, file: !26, line: 563, baseType: !1204, size: 256, align: 64, offset: 16896)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !26, line: 471, size: 256, align: 64, elements: !1205, identifier: "_ZTS12AddressSpace")
!1205 = !{!1206, !1208, !1222, !1223}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1204, file: !26, line: 472, baseType: !1207, size: 64)
!1207 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !82)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1204, file: !26, line: 473, baseType: !1209, size: 64, offset: 64)
!1209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !26, line: 427, size: 64, elements: !1210, identifier: "_ZTS3Reg")
!1210 = !{!1211}
!1211 = !DIDerivedType(tag: DW_TAG_member, scope: !1209, file: !26, line: 428, baseType: !1212, size: 64)
!1212 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1209, file: !26, line: 428, size: 64, elements: !1213, identifier: "_ZTSN3RegUt_E")
!1213 = !{!1214, !1219, !1220, !1221}
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1212, file: !26, line: 432, baseType: !1215, size: 16, align: 8)
!1215 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1212, file: !26, line: 429, size: 16, elements: !1216, identifier: "_ZTSN3RegUt_Ut_E")
!1216 = !{!1217, !1218}
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1215, file: !26, line: 430, baseType: !77, size: 8)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1215, file: !26, line: 431, baseType: !77, size: 8, offset: 8)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1212, file: !26, line: 433, baseType: !27, size: 16, align: 16)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1212, file: !26, line: 434, baseType: !8, size: 32, align: 32)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1212, file: !26, line: 435, baseType: !82, size: 64, align: 64)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1204, file: !26, line: 474, baseType: !1207, size: 64, offset: 128)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1204, file: !26, line: 475, baseType: !1209, size: 64, offset: 192)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !909, file: !26, line: 564, baseType: !1225, size: 2176, align: 64, offset: 17152)
!1225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !26, line: 486, size: 2176, align: 64, elements: !1226, identifier: "_ZTS3GPR")
!1226 = !{!1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1225, file: !26, line: 488, baseType: !1207, size: 64)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1225, file: !26, line: 489, baseType: !1209, size: 64, offset: 64)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1225, file: !26, line: 490, baseType: !1207, size: 64, offset: 128)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1225, file: !26, line: 491, baseType: !1209, size: 64, offset: 192)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1225, file: !26, line: 492, baseType: !1207, size: 64, offset: 256)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1225, file: !26, line: 493, baseType: !1209, size: 64, offset: 320)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1225, file: !26, line: 494, baseType: !1207, size: 64, offset: 384)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1225, file: !26, line: 495, baseType: !1209, size: 64, offset: 448)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1225, file: !26, line: 496, baseType: !1207, size: 64, offset: 512)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1225, file: !26, line: 497, baseType: !1209, size: 64, offset: 576)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1225, file: !26, line: 498, baseType: !1207, size: 64, offset: 640)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1225, file: !26, line: 499, baseType: !1209, size: 64, offset: 704)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1225, file: !26, line: 500, baseType: !1207, size: 64, offset: 768)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1225, file: !26, line: 501, baseType: !1209, size: 64, offset: 832)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1225, file: !26, line: 502, baseType: !1207, size: 64, offset: 896)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1225, file: !26, line: 503, baseType: !1209, size: 64, offset: 960)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1225, file: !26, line: 504, baseType: !1207, size: 64, offset: 1024)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1225, file: !26, line: 505, baseType: !1209, size: 64, offset: 1088)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1225, file: !26, line: 506, baseType: !1207, size: 64, offset: 1152)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1225, file: !26, line: 507, baseType: !1209, size: 64, offset: 1216)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1225, file: !26, line: 508, baseType: !1207, size: 64, offset: 1280)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1225, file: !26, line: 509, baseType: !1209, size: 64, offset: 1344)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1225, file: !26, line: 510, baseType: !1207, size: 64, offset: 1408)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1225, file: !26, line: 511, baseType: !1209, size: 64, offset: 1472)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1225, file: !26, line: 512, baseType: !1207, size: 64, offset: 1536)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1225, file: !26, line: 513, baseType: !1209, size: 64, offset: 1600)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1225, file: !26, line: 514, baseType: !1207, size: 64, offset: 1664)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1225, file: !26, line: 515, baseType: !1209, size: 64, offset: 1728)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1225, file: !26, line: 516, baseType: !1207, size: 64, offset: 1792)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1225, file: !26, line: 517, baseType: !1209, size: 64, offset: 1856)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1225, file: !26, line: 518, baseType: !1207, size: 64, offset: 1920)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1225, file: !26, line: 519, baseType: !1209, size: 64, offset: 1984)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1225, file: !26, line: 520, baseType: !1207, size: 64, offset: 2048)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1225, file: !26, line: 523, baseType: !1209, size: 64, offset: 2112)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !909, file: !26, line: 565, baseType: !1262, size: 1024, align: 64, offset: 19328)
!1262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !26, line: 528, size: 1024, align: 64, elements: !1263, identifier: "_ZTS8X87Stack")
!1263 = !{!1264}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1262, file: !26, line: 532, baseType: !1265, size: 1024)
!1265 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1266, size: 1024, elements: !947)
!1266 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1262, file: !26, line: 529, size: 128, align: 64, elements: !1267, identifier: "_ZTSN8X87StackUt_E")
!1267 = !{!1268, !1269}
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1266, file: !26, line: 530, baseType: !82, size: 64)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1266, file: !26, line: 531, baseType: !1270, size: 64, offset: 64)
!1270 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !907, line: 62, baseType: !360)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !909, file: !26, line: 566, baseType: !1272, size: 1024, align: 64, offset: 20352)
!1272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !26, line: 538, size: 1024, align: 64, elements: !1273, identifier: "_ZTS3MMX")
!1273 = !{!1274}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1272, file: !26, line: 542, baseType: !1275, size: 1024)
!1275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1276, size: 1024, elements: !947)
!1276 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1272, file: !26, line: 539, size: 128, align: 64, elements: !1277, identifier: "_ZTSN3MMXUt_E")
!1277 = !{!1278, !1279}
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1276, file: !26, line: 540, baseType: !82, size: 64)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1276, file: !26, line: 541, baseType: !1280, size: 64, offset: 64)
!1280 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !907, line: 269, size: 64, elements: !1281, identifier: "_ZTS7vec64_t")
!1281 = !{!1282, !1287, !1292, !1297, !1302, !1307, !1312, !1317, !1322, !1327}
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1280, file: !907, line: 273, baseType: !1283, size: 64)
!1283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !907, line: 174, size: 64, elements: !1284, identifier: "_ZTS10uint64v1_t")
!1284 = !{!1285}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1283, file: !907, line: 174, baseType: !1286, size: 64)
!1286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 64, elements: !933)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1280, file: !907, line: 275, baseType: !1288, size: 64)
!1288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !907, line: 156, size: 64, elements: !1289, identifier: "_ZTS9uint8v8_t")
!1289 = !{!1290}
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1288, file: !907, line: 156, baseType: !1291, size: 64)
!1291 = !DICompositeType(tag: DW_TAG_array_type, baseType: !77, size: 64, elements: !947)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1280, file: !907, line: 276, baseType: !1293, size: 64)
!1293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !907, line: 163, size: 64, elements: !1294, identifier: "_ZTS10uint16v4_t")
!1294 = !{!1295}
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1293, file: !907, line: 163, baseType: !1296, size: 64)
!1296 = !DICompositeType(tag: DW_TAG_array_type, baseType: !27, size: 64, elements: !181)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1280, file: !907, line: 277, baseType: !1298, size: 64)
!1298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !907, line: 169, size: 64, elements: !1299, identifier: "_ZTS10uint32v2_t")
!1299 = !{!1300}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1298, file: !907, line: 169, baseType: !1301, size: 64)
!1301 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !959)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1280, file: !907, line: 278, baseType: !1303, size: 64)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !907, line: 216, size: 64, elements: !1304, identifier: "_ZTS11float32v2_t")
!1304 = !{!1305}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1303, file: !907, line: 216, baseType: !1306, size: 64)
!1306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !367, size: 64, elements: !959)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1280, file: !907, line: 279, baseType: !1308, size: 64)
!1308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !907, line: 221, size: 64, elements: !1309, identifier: "_ZTS11float64v1_t")
!1309 = !{!1310}
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1308, file: !907, line: 221, baseType: !1311, size: 64)
!1311 = !DICompositeType(tag: DW_TAG_array_type, baseType: !360, size: 64, elements: !933)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1280, file: !907, line: 281, baseType: !1313, size: 64)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !907, line: 187, size: 64, elements: !1314, identifier: "_ZTS8int8v8_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !907, line: 187, baseType: !1316, size: 64)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 64, elements: !947)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1280, file: !907, line: 282, baseType: !1318, size: 64)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !907, line: 194, size: 64, elements: !1319, identifier: "_ZTS9int16v4_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !907, line: 194, baseType: !1321, size: 64)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !48, size: 64, elements: !181)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1280, file: !907, line: 283, baseType: !1323, size: 64)
!1323 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !907, line: 200, size: 64, elements: !1324, identifier: "_ZTS9int32v2_t")
!1324 = !{!1325}
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1323, file: !907, line: 200, baseType: !1326, size: 64)
!1326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 64, elements: !959)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1280, file: !907, line: 284, baseType: !1328, size: 64)
!1328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !907, line: 205, size: 64, elements: !1329, identifier: "_ZTS9int64v1_t")
!1329 = !{!1330}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1328, file: !907, line: 205, baseType: !1331, size: 64)
!1331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 64, elements: !933)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !909, file: !26, line: 567, baseType: !1333, size: 64, offset: 21376)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !26, line: 276, size: 64, elements: !1334, identifier: "_ZTS14FPUStatusFlags")
!1334 = !{!1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1333, file: !26, line: 277, baseType: !77, size: 8)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1333, file: !26, line: 278, baseType: !77, size: 8, offset: 8)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1333, file: !26, line: 279, baseType: !77, size: 8, offset: 16)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1333, file: !26, line: 280, baseType: !77, size: 8, offset: 24)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1333, file: !26, line: 281, baseType: !77, size: 8, offset: 32)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1333, file: !26, line: 282, baseType: !77, size: 8, offset: 40)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1333, file: !26, line: 283, baseType: !77, size: 8, offset: 48)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1333, file: !26, line: 284, baseType: !77, size: 8, offset: 56)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !909, file: !26, line: 568, baseType: !1344, size: 64, offset: 21440)
!1344 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !26, line: 348, size: 64, elements: !1345, identifier: "_ZTS4XCR0")
!1345 = !{!1346, !1347, !1352}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1344, file: !26, line: 349, baseType: !82, size: 64)
!1347 = !DIDerivedType(tag: DW_TAG_member, scope: !1344, file: !26, line: 351, baseType: !1348, size: 64)
!1348 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1344, file: !26, line: 351, size: 64, elements: !1349, identifier: "_ZTSN4XCR0Ut_E")
!1349 = !{!1350, !1351}
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1348, file: !26, line: 352, baseType: !8, size: 32)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1348, file: !26, line: 353, baseType: !8, size: 32, offset: 32)
!1352 = !DIDerivedType(tag: DW_TAG_member, scope: !1344, file: !26, line: 357, baseType: !1353, size: 64)
!1353 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1344, file: !26, line: 357, size: 64, elements: !1354, identifier: "_ZTSN4XCR0Ut0_E")
!1354 = !{!1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1353, file: !26, line: 358, baseType: !82, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1353, file: !26, line: 359, baseType: !82, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1353, file: !26, line: 360, baseType: !82, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1353, file: !26, line: 361, baseType: !82, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1353, file: !26, line: 362, baseType: !82, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1353, file: !26, line: 363, baseType: !82, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1353, file: !26, line: 364, baseType: !82, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1353, file: !26, line: 365, baseType: !82, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1353, file: !26, line: 366, baseType: !82, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1353, file: !26, line: 367, baseType: !82, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1353, file: !26, line: 368, baseType: !82, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1353, file: !26, line: 369, baseType: !82, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1367 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !907, line: 43, baseType: !1368)
!1368 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !907, line: 42, baseType: !82)
!1369 = !DILocalVariable(name: "state", arg: 1, scope: !902, file: !2, line: 29, type: !908)
!1370 = !DIExpression()
!1371 = !DILocation(line: 29, column: 37, scope: !902)
!1372 = !DILocalVariable(name: "curr_pc", arg: 2, scope: !902, file: !2, line: 29, type: !1367)
!1373 = !DILocation(line: 29, column: 51, scope: !902)
!1374 = !DILocalVariable(name: "memory", arg: 3, scope: !902, file: !2, line: 29, type: !905)
!1375 = !DILocation(line: 29, column: 68, scope: !902)
!1376 = !DILocalVariable(name: "branch_taken", scope: !902, file: !2, line: 31, type: !152)
!1377 = !DILocation(line: 31, column: 8, scope: !902)
!1378 = !DILocalVariable(name: "zero", scope: !902, file: !2, line: 32, type: !1367)
!1379 = !DILocation(line: 32, column: 10, scope: !902)
!1380 = !DILocalVariable(name: "STATE", scope: !902, file: !2, line: 35, type: !908)
!1381 = !DILocation(line: 35, column: 9, scope: !902)
!1382 = !DILocation(line: 35, column: 17, scope: !902)
!1383 = !DILocalVariable(name: "MEMORY", scope: !902, file: !2, line: 36, type: !1384)
!1384 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !906, size: 64)
!1385 = !DILocation(line: 36, column: 9, scope: !902)
!1386 = !DILocation(line: 36, column: 19, scope: !902)
!1387 = !DILocalVariable(name: "PC", scope: !902, file: !2, line: 37, type: !1388)
!1388 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !83, size: 64)
!1389 = !DILocation(line: 37, column: 9, scope: !902)
!1390 = !DILocation(line: 37, column: 14, scope: !902)
!1391 = !DILocation(line: 37, column: 20, scope: !902)
!1392 = !DILocation(line: 37, column: 24, scope: !902)
!1393 = !DILocation(line: 37, column: 28, scope: !902)
!1394 = !DILocalVariable(name: "BRANCH_TAKEN", scope: !902, file: !2, line: 38, type: !1395)
!1395 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !152, size: 64)
!1396 = !DILocation(line: 38, column: 9, scope: !902)
!1397 = !DILocation(line: 43, column: 8, scope: !902)
!1398 = !DILocation(line: 43, column: 3, scope: !902)
!1399 = !DILocation(line: 43, column: 6, scope: !902)
!1400 = !DILocalVariable(name: "AH", scope: !902, file: !2, line: 48, type: !1401)
!1401 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !78, size: 64)
!1402 = !DILocation(line: 48, column: 9, scope: !902)
!1403 = !DILocation(line: 48, column: 14, scope: !902)
!1404 = !DILocation(line: 48, column: 20, scope: !902)
!1405 = !DILocation(line: 48, column: 24, scope: !902)
!1406 = !DILocation(line: 48, column: 28, scope: !902)
!1407 = !DILocation(line: 48, column: 33, scope: !902)
!1408 = !DILocalVariable(name: "BH", scope: !902, file: !2, line: 49, type: !1401)
!1409 = !DILocation(line: 49, column: 9, scope: !902)
!1410 = !DILocation(line: 49, column: 14, scope: !902)
!1411 = !DILocation(line: 49, column: 20, scope: !902)
!1412 = !DILocation(line: 49, column: 24, scope: !902)
!1413 = !DILocation(line: 49, column: 28, scope: !902)
!1414 = !DILocation(line: 49, column: 33, scope: !902)
!1415 = !DILocalVariable(name: "CH", scope: !902, file: !2, line: 50, type: !1401)
!1416 = !DILocation(line: 50, column: 9, scope: !902)
!1417 = !DILocation(line: 50, column: 14, scope: !902)
!1418 = !DILocation(line: 50, column: 20, scope: !902)
!1419 = !DILocation(line: 50, column: 24, scope: !902)
!1420 = !DILocation(line: 50, column: 28, scope: !902)
!1421 = !DILocation(line: 50, column: 33, scope: !902)
!1422 = !DILocalVariable(name: "DH", scope: !902, file: !2, line: 51, type: !1401)
!1423 = !DILocation(line: 51, column: 9, scope: !902)
!1424 = !DILocation(line: 51, column: 14, scope: !902)
!1425 = !DILocation(line: 51, column: 20, scope: !902)
!1426 = !DILocation(line: 51, column: 24, scope: !902)
!1427 = !DILocation(line: 51, column: 28, scope: !902)
!1428 = !DILocation(line: 51, column: 33, scope: !902)
!1429 = !DILocalVariable(name: "AL", scope: !902, file: !2, line: 52, type: !1401)
!1430 = !DILocation(line: 52, column: 9, scope: !902)
!1431 = !DILocation(line: 52, column: 14, scope: !902)
!1432 = !DILocation(line: 52, column: 20, scope: !902)
!1433 = !DILocation(line: 52, column: 24, scope: !902)
!1434 = !DILocation(line: 52, column: 28, scope: !902)
!1435 = !DILocation(line: 52, column: 33, scope: !902)
!1436 = !DILocalVariable(name: "BL", scope: !902, file: !2, line: 53, type: !1401)
!1437 = !DILocation(line: 53, column: 9, scope: !902)
!1438 = !DILocation(line: 53, column: 14, scope: !902)
!1439 = !DILocation(line: 53, column: 20, scope: !902)
!1440 = !DILocation(line: 53, column: 24, scope: !902)
!1441 = !DILocation(line: 53, column: 28, scope: !902)
!1442 = !DILocation(line: 53, column: 33, scope: !902)
!1443 = !DILocalVariable(name: "CL", scope: !902, file: !2, line: 54, type: !1401)
!1444 = !DILocation(line: 54, column: 9, scope: !902)
!1445 = !DILocation(line: 54, column: 14, scope: !902)
!1446 = !DILocation(line: 54, column: 20, scope: !902)
!1447 = !DILocation(line: 54, column: 24, scope: !902)
!1448 = !DILocation(line: 54, column: 28, scope: !902)
!1449 = !DILocation(line: 54, column: 33, scope: !902)
!1450 = !DILocalVariable(name: "DL", scope: !902, file: !2, line: 55, type: !1401)
!1451 = !DILocation(line: 55, column: 9, scope: !902)
!1452 = !DILocation(line: 55, column: 14, scope: !902)
!1453 = !DILocation(line: 55, column: 20, scope: !902)
!1454 = !DILocation(line: 55, column: 24, scope: !902)
!1455 = !DILocation(line: 55, column: 28, scope: !902)
!1456 = !DILocation(line: 55, column: 33, scope: !902)
!1457 = !DILocalVariable(name: "SIL", scope: !902, file: !2, line: 57, type: !1401)
!1458 = !DILocation(line: 57, column: 9, scope: !902)
!1459 = !DILocation(line: 57, column: 15, scope: !902)
!1460 = !DILocation(line: 57, column: 21, scope: !902)
!1461 = !DILocation(line: 57, column: 25, scope: !902)
!1462 = !DILocation(line: 57, column: 29, scope: !902)
!1463 = !DILocation(line: 57, column: 34, scope: !902)
!1464 = !DILocalVariable(name: "DIL", scope: !902, file: !2, line: 58, type: !1401)
!1465 = !DILocation(line: 58, column: 9, scope: !902)
!1466 = !DILocation(line: 58, column: 15, scope: !902)
!1467 = !DILocation(line: 58, column: 21, scope: !902)
!1468 = !DILocation(line: 58, column: 25, scope: !902)
!1469 = !DILocation(line: 58, column: 29, scope: !902)
!1470 = !DILocation(line: 58, column: 34, scope: !902)
!1471 = !DILocalVariable(name: "SPL", scope: !902, file: !2, line: 59, type: !1401)
!1472 = !DILocation(line: 59, column: 9, scope: !902)
!1473 = !DILocation(line: 59, column: 15, scope: !902)
!1474 = !DILocation(line: 59, column: 21, scope: !902)
!1475 = !DILocation(line: 59, column: 25, scope: !902)
!1476 = !DILocation(line: 59, column: 29, scope: !902)
!1477 = !DILocation(line: 59, column: 34, scope: !902)
!1478 = !DILocalVariable(name: "BPL", scope: !902, file: !2, line: 60, type: !1401)
!1479 = !DILocation(line: 60, column: 9, scope: !902)
!1480 = !DILocation(line: 60, column: 15, scope: !902)
!1481 = !DILocation(line: 60, column: 21, scope: !902)
!1482 = !DILocation(line: 60, column: 25, scope: !902)
!1483 = !DILocation(line: 60, column: 29, scope: !902)
!1484 = !DILocation(line: 60, column: 34, scope: !902)
!1485 = !DILocalVariable(name: "R8B", scope: !902, file: !2, line: 61, type: !1401)
!1486 = !DILocation(line: 61, column: 9, scope: !902)
!1487 = !DILocation(line: 61, column: 15, scope: !902)
!1488 = !DILocation(line: 61, column: 21, scope: !902)
!1489 = !DILocation(line: 61, column: 25, scope: !902)
!1490 = !DILocation(line: 61, column: 28, scope: !902)
!1491 = !DILocation(line: 61, column: 33, scope: !902)
!1492 = !DILocalVariable(name: "R9B", scope: !902, file: !2, line: 62, type: !1401)
!1493 = !DILocation(line: 62, column: 9, scope: !902)
!1494 = !DILocation(line: 62, column: 15, scope: !902)
!1495 = !DILocation(line: 62, column: 21, scope: !902)
!1496 = !DILocation(line: 62, column: 25, scope: !902)
!1497 = !DILocation(line: 62, column: 28, scope: !902)
!1498 = !DILocation(line: 62, column: 33, scope: !902)
!1499 = !DILocalVariable(name: "R10B", scope: !902, file: !2, line: 63, type: !1401)
!1500 = !DILocation(line: 63, column: 9, scope: !902)
!1501 = !DILocation(line: 63, column: 16, scope: !902)
!1502 = !DILocation(line: 63, column: 22, scope: !902)
!1503 = !DILocation(line: 63, column: 26, scope: !902)
!1504 = !DILocation(line: 63, column: 30, scope: !902)
!1505 = !DILocation(line: 63, column: 35, scope: !902)
!1506 = !DILocalVariable(name: "R11B", scope: !902, file: !2, line: 64, type: !1401)
!1507 = !DILocation(line: 64, column: 9, scope: !902)
!1508 = !DILocation(line: 64, column: 16, scope: !902)
!1509 = !DILocation(line: 64, column: 22, scope: !902)
!1510 = !DILocation(line: 64, column: 26, scope: !902)
!1511 = !DILocation(line: 64, column: 30, scope: !902)
!1512 = !DILocation(line: 64, column: 35, scope: !902)
!1513 = !DILocalVariable(name: "R12B", scope: !902, file: !2, line: 65, type: !1401)
!1514 = !DILocation(line: 65, column: 9, scope: !902)
!1515 = !DILocation(line: 65, column: 16, scope: !902)
!1516 = !DILocation(line: 65, column: 22, scope: !902)
!1517 = !DILocation(line: 65, column: 26, scope: !902)
!1518 = !DILocation(line: 65, column: 30, scope: !902)
!1519 = !DILocation(line: 65, column: 35, scope: !902)
!1520 = !DILocalVariable(name: "R13B", scope: !902, file: !2, line: 66, type: !1401)
!1521 = !DILocation(line: 66, column: 9, scope: !902)
!1522 = !DILocation(line: 66, column: 16, scope: !902)
!1523 = !DILocation(line: 66, column: 22, scope: !902)
!1524 = !DILocation(line: 66, column: 26, scope: !902)
!1525 = !DILocation(line: 66, column: 30, scope: !902)
!1526 = !DILocation(line: 66, column: 35, scope: !902)
!1527 = !DILocalVariable(name: "R14B", scope: !902, file: !2, line: 67, type: !1401)
!1528 = !DILocation(line: 67, column: 9, scope: !902)
!1529 = !DILocation(line: 67, column: 16, scope: !902)
!1530 = !DILocation(line: 67, column: 22, scope: !902)
!1531 = !DILocation(line: 67, column: 26, scope: !902)
!1532 = !DILocation(line: 67, column: 30, scope: !902)
!1533 = !DILocation(line: 67, column: 35, scope: !902)
!1534 = !DILocalVariable(name: "R15B", scope: !902, file: !2, line: 68, type: !1401)
!1535 = !DILocation(line: 68, column: 9, scope: !902)
!1536 = !DILocation(line: 68, column: 16, scope: !902)
!1537 = !DILocation(line: 68, column: 22, scope: !902)
!1538 = !DILocation(line: 68, column: 26, scope: !902)
!1539 = !DILocation(line: 68, column: 30, scope: !902)
!1540 = !DILocation(line: 68, column: 35, scope: !902)
!1541 = !DILocalVariable(name: "AX", scope: !902, file: !2, line: 70, type: !1542)
!1542 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !28, size: 64)
!1543 = !DILocation(line: 70, column: 9, scope: !902)
!1544 = !DILocation(line: 70, column: 14, scope: !902)
!1545 = !DILocation(line: 70, column: 20, scope: !902)
!1546 = !DILocation(line: 70, column: 24, scope: !902)
!1547 = !DILocation(line: 70, column: 28, scope: !902)
!1548 = !DILocalVariable(name: "BX", scope: !902, file: !2, line: 71, type: !1542)
!1549 = !DILocation(line: 71, column: 9, scope: !902)
!1550 = !DILocation(line: 71, column: 14, scope: !902)
!1551 = !DILocation(line: 71, column: 20, scope: !902)
!1552 = !DILocation(line: 71, column: 24, scope: !902)
!1553 = !DILocation(line: 71, column: 28, scope: !902)
!1554 = !DILocalVariable(name: "CX", scope: !902, file: !2, line: 72, type: !1542)
!1555 = !DILocation(line: 72, column: 9, scope: !902)
!1556 = !DILocation(line: 72, column: 14, scope: !902)
!1557 = !DILocation(line: 72, column: 20, scope: !902)
!1558 = !DILocation(line: 72, column: 24, scope: !902)
!1559 = !DILocation(line: 72, column: 28, scope: !902)
!1560 = !DILocalVariable(name: "DX", scope: !902, file: !2, line: 73, type: !1542)
!1561 = !DILocation(line: 73, column: 9, scope: !902)
!1562 = !DILocation(line: 73, column: 14, scope: !902)
!1563 = !DILocation(line: 73, column: 20, scope: !902)
!1564 = !DILocation(line: 73, column: 24, scope: !902)
!1565 = !DILocation(line: 73, column: 28, scope: !902)
!1566 = !DILocalVariable(name: "SI", scope: !902, file: !2, line: 74, type: !1542)
!1567 = !DILocation(line: 74, column: 9, scope: !902)
!1568 = !DILocation(line: 74, column: 14, scope: !902)
!1569 = !DILocation(line: 74, column: 20, scope: !902)
!1570 = !DILocation(line: 74, column: 24, scope: !902)
!1571 = !DILocation(line: 74, column: 28, scope: !902)
!1572 = !DILocalVariable(name: "DI", scope: !902, file: !2, line: 75, type: !1542)
!1573 = !DILocation(line: 75, column: 9, scope: !902)
!1574 = !DILocation(line: 75, column: 14, scope: !902)
!1575 = !DILocation(line: 75, column: 20, scope: !902)
!1576 = !DILocation(line: 75, column: 24, scope: !902)
!1577 = !DILocation(line: 75, column: 28, scope: !902)
!1578 = !DILocalVariable(name: "SP", scope: !902, file: !2, line: 76, type: !1542)
!1579 = !DILocation(line: 76, column: 9, scope: !902)
!1580 = !DILocation(line: 76, column: 14, scope: !902)
!1581 = !DILocation(line: 76, column: 20, scope: !902)
!1582 = !DILocation(line: 76, column: 24, scope: !902)
!1583 = !DILocation(line: 76, column: 28, scope: !902)
!1584 = !DILocalVariable(name: "BP", scope: !902, file: !2, line: 77, type: !1542)
!1585 = !DILocation(line: 77, column: 9, scope: !902)
!1586 = !DILocation(line: 77, column: 14, scope: !902)
!1587 = !DILocation(line: 77, column: 20, scope: !902)
!1588 = !DILocation(line: 77, column: 24, scope: !902)
!1589 = !DILocation(line: 77, column: 28, scope: !902)
!1590 = !DILocalVariable(name: "R8W", scope: !902, file: !2, line: 79, type: !1542)
!1591 = !DILocation(line: 79, column: 9, scope: !902)
!1592 = !DILocation(line: 79, column: 15, scope: !902)
!1593 = !DILocation(line: 79, column: 21, scope: !902)
!1594 = !DILocation(line: 79, column: 25, scope: !902)
!1595 = !DILocation(line: 79, column: 28, scope: !902)
!1596 = !DILocalVariable(name: "R9W", scope: !902, file: !2, line: 80, type: !1542)
!1597 = !DILocation(line: 80, column: 9, scope: !902)
!1598 = !DILocation(line: 80, column: 15, scope: !902)
!1599 = !DILocation(line: 80, column: 21, scope: !902)
!1600 = !DILocation(line: 80, column: 25, scope: !902)
!1601 = !DILocation(line: 80, column: 28, scope: !902)
!1602 = !DILocalVariable(name: "R10W", scope: !902, file: !2, line: 81, type: !1542)
!1603 = !DILocation(line: 81, column: 9, scope: !902)
!1604 = !DILocation(line: 81, column: 16, scope: !902)
!1605 = !DILocation(line: 81, column: 22, scope: !902)
!1606 = !DILocation(line: 81, column: 26, scope: !902)
!1607 = !DILocation(line: 81, column: 30, scope: !902)
!1608 = !DILocalVariable(name: "R11W", scope: !902, file: !2, line: 82, type: !1542)
!1609 = !DILocation(line: 82, column: 9, scope: !902)
!1610 = !DILocation(line: 82, column: 16, scope: !902)
!1611 = !DILocation(line: 82, column: 22, scope: !902)
!1612 = !DILocation(line: 82, column: 26, scope: !902)
!1613 = !DILocation(line: 82, column: 30, scope: !902)
!1614 = !DILocalVariable(name: "R12W", scope: !902, file: !2, line: 83, type: !1542)
!1615 = !DILocation(line: 83, column: 9, scope: !902)
!1616 = !DILocation(line: 83, column: 16, scope: !902)
!1617 = !DILocation(line: 83, column: 22, scope: !902)
!1618 = !DILocation(line: 83, column: 26, scope: !902)
!1619 = !DILocation(line: 83, column: 30, scope: !902)
!1620 = !DILocalVariable(name: "R13W", scope: !902, file: !2, line: 84, type: !1542)
!1621 = !DILocation(line: 84, column: 9, scope: !902)
!1622 = !DILocation(line: 84, column: 16, scope: !902)
!1623 = !DILocation(line: 84, column: 22, scope: !902)
!1624 = !DILocation(line: 84, column: 26, scope: !902)
!1625 = !DILocation(line: 84, column: 30, scope: !902)
!1626 = !DILocalVariable(name: "R14W", scope: !902, file: !2, line: 85, type: !1542)
!1627 = !DILocation(line: 85, column: 9, scope: !902)
!1628 = !DILocation(line: 85, column: 16, scope: !902)
!1629 = !DILocation(line: 85, column: 22, scope: !902)
!1630 = !DILocation(line: 85, column: 26, scope: !902)
!1631 = !DILocation(line: 85, column: 30, scope: !902)
!1632 = !DILocalVariable(name: "R15W", scope: !902, file: !2, line: 86, type: !1542)
!1633 = !DILocation(line: 86, column: 9, scope: !902)
!1634 = !DILocation(line: 86, column: 16, scope: !902)
!1635 = !DILocation(line: 86, column: 22, scope: !902)
!1636 = !DILocation(line: 86, column: 26, scope: !902)
!1637 = !DILocation(line: 86, column: 30, scope: !902)
!1638 = !DILocalVariable(name: "IP", scope: !902, file: !2, line: 88, type: !1542)
!1639 = !DILocation(line: 88, column: 9, scope: !902)
!1640 = !DILocation(line: 88, column: 14, scope: !902)
!1641 = !DILocation(line: 88, column: 20, scope: !902)
!1642 = !DILocation(line: 88, column: 24, scope: !902)
!1643 = !DILocation(line: 88, column: 28, scope: !902)
!1644 = !DILocalVariable(name: "EAX", scope: !902, file: !2, line: 90, type: !1645)
!1645 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !10, size: 64)
!1646 = !DILocation(line: 90, column: 9, scope: !902)
!1647 = !DILocation(line: 90, column: 15, scope: !902)
!1648 = !DILocation(line: 90, column: 21, scope: !902)
!1649 = !DILocation(line: 90, column: 25, scope: !902)
!1650 = !DILocation(line: 90, column: 29, scope: !902)
!1651 = !DILocalVariable(name: "EBX", scope: !902, file: !2, line: 91, type: !1645)
!1652 = !DILocation(line: 91, column: 9, scope: !902)
!1653 = !DILocation(line: 91, column: 15, scope: !902)
!1654 = !DILocation(line: 91, column: 21, scope: !902)
!1655 = !DILocation(line: 91, column: 25, scope: !902)
!1656 = !DILocation(line: 91, column: 29, scope: !902)
!1657 = !DILocalVariable(name: "ECX", scope: !902, file: !2, line: 92, type: !1645)
!1658 = !DILocation(line: 92, column: 9, scope: !902)
!1659 = !DILocation(line: 92, column: 15, scope: !902)
!1660 = !DILocation(line: 92, column: 21, scope: !902)
!1661 = !DILocation(line: 92, column: 25, scope: !902)
!1662 = !DILocation(line: 92, column: 29, scope: !902)
!1663 = !DILocalVariable(name: "EDX", scope: !902, file: !2, line: 93, type: !1645)
!1664 = !DILocation(line: 93, column: 9, scope: !902)
!1665 = !DILocation(line: 93, column: 15, scope: !902)
!1666 = !DILocation(line: 93, column: 21, scope: !902)
!1667 = !DILocation(line: 93, column: 25, scope: !902)
!1668 = !DILocation(line: 93, column: 29, scope: !902)
!1669 = !DILocalVariable(name: "ESI", scope: !902, file: !2, line: 94, type: !1645)
!1670 = !DILocation(line: 94, column: 9, scope: !902)
!1671 = !DILocation(line: 94, column: 15, scope: !902)
!1672 = !DILocation(line: 94, column: 21, scope: !902)
!1673 = !DILocation(line: 94, column: 25, scope: !902)
!1674 = !DILocation(line: 94, column: 29, scope: !902)
!1675 = !DILocalVariable(name: "EDI", scope: !902, file: !2, line: 95, type: !1645)
!1676 = !DILocation(line: 95, column: 9, scope: !902)
!1677 = !DILocation(line: 95, column: 15, scope: !902)
!1678 = !DILocation(line: 95, column: 21, scope: !902)
!1679 = !DILocation(line: 95, column: 25, scope: !902)
!1680 = !DILocation(line: 95, column: 29, scope: !902)
!1681 = !DILocalVariable(name: "ESP", scope: !902, file: !2, line: 96, type: !1645)
!1682 = !DILocation(line: 96, column: 9, scope: !902)
!1683 = !DILocation(line: 96, column: 15, scope: !902)
!1684 = !DILocation(line: 96, column: 21, scope: !902)
!1685 = !DILocation(line: 96, column: 25, scope: !902)
!1686 = !DILocation(line: 96, column: 29, scope: !902)
!1687 = !DILocalVariable(name: "EBP", scope: !902, file: !2, line: 97, type: !1645)
!1688 = !DILocation(line: 97, column: 9, scope: !902)
!1689 = !DILocation(line: 97, column: 15, scope: !902)
!1690 = !DILocation(line: 97, column: 21, scope: !902)
!1691 = !DILocation(line: 97, column: 25, scope: !902)
!1692 = !DILocation(line: 97, column: 29, scope: !902)
!1693 = !DILocalVariable(name: "EIP", scope: !902, file: !2, line: 98, type: !1645)
!1694 = !DILocation(line: 98, column: 9, scope: !902)
!1695 = !DILocation(line: 98, column: 15, scope: !902)
!1696 = !DILocation(line: 98, column: 21, scope: !902)
!1697 = !DILocation(line: 98, column: 25, scope: !902)
!1698 = !DILocation(line: 98, column: 29, scope: !902)
!1699 = !DILocalVariable(name: "R8D", scope: !902, file: !2, line: 101, type: !1645)
!1700 = !DILocation(line: 101, column: 9, scope: !902)
!1701 = !DILocation(line: 101, column: 15, scope: !902)
!1702 = !DILocation(line: 101, column: 21, scope: !902)
!1703 = !DILocation(line: 101, column: 25, scope: !902)
!1704 = !DILocation(line: 101, column: 28, scope: !902)
!1705 = !DILocalVariable(name: "R9D", scope: !902, file: !2, line: 102, type: !1645)
!1706 = !DILocation(line: 102, column: 9, scope: !902)
!1707 = !DILocation(line: 102, column: 15, scope: !902)
!1708 = !DILocation(line: 102, column: 21, scope: !902)
!1709 = !DILocation(line: 102, column: 25, scope: !902)
!1710 = !DILocation(line: 102, column: 28, scope: !902)
!1711 = !DILocalVariable(name: "R10D", scope: !902, file: !2, line: 103, type: !1645)
!1712 = !DILocation(line: 103, column: 9, scope: !902)
!1713 = !DILocation(line: 103, column: 16, scope: !902)
!1714 = !DILocation(line: 103, column: 22, scope: !902)
!1715 = !DILocation(line: 103, column: 26, scope: !902)
!1716 = !DILocation(line: 103, column: 30, scope: !902)
!1717 = !DILocalVariable(name: "R11D", scope: !902, file: !2, line: 104, type: !1645)
!1718 = !DILocation(line: 104, column: 9, scope: !902)
!1719 = !DILocation(line: 104, column: 16, scope: !902)
!1720 = !DILocation(line: 104, column: 22, scope: !902)
!1721 = !DILocation(line: 104, column: 26, scope: !902)
!1722 = !DILocation(line: 104, column: 30, scope: !902)
!1723 = !DILocalVariable(name: "R12D", scope: !902, file: !2, line: 105, type: !1645)
!1724 = !DILocation(line: 105, column: 9, scope: !902)
!1725 = !DILocation(line: 105, column: 16, scope: !902)
!1726 = !DILocation(line: 105, column: 22, scope: !902)
!1727 = !DILocation(line: 105, column: 26, scope: !902)
!1728 = !DILocation(line: 105, column: 30, scope: !902)
!1729 = !DILocalVariable(name: "R13D", scope: !902, file: !2, line: 106, type: !1645)
!1730 = !DILocation(line: 106, column: 9, scope: !902)
!1731 = !DILocation(line: 106, column: 16, scope: !902)
!1732 = !DILocation(line: 106, column: 22, scope: !902)
!1733 = !DILocation(line: 106, column: 26, scope: !902)
!1734 = !DILocation(line: 106, column: 30, scope: !902)
!1735 = !DILocalVariable(name: "R14D", scope: !902, file: !2, line: 107, type: !1645)
!1736 = !DILocation(line: 107, column: 9, scope: !902)
!1737 = !DILocation(line: 107, column: 16, scope: !902)
!1738 = !DILocation(line: 107, column: 22, scope: !902)
!1739 = !DILocation(line: 107, column: 26, scope: !902)
!1740 = !DILocation(line: 107, column: 30, scope: !902)
!1741 = !DILocalVariable(name: "R15D", scope: !902, file: !2, line: 108, type: !1645)
!1742 = !DILocation(line: 108, column: 9, scope: !902)
!1743 = !DILocation(line: 108, column: 16, scope: !902)
!1744 = !DILocation(line: 108, column: 22, scope: !902)
!1745 = !DILocation(line: 108, column: 26, scope: !902)
!1746 = !DILocation(line: 108, column: 30, scope: !902)
!1747 = !DILocalVariable(name: "RAX", scope: !902, file: !2, line: 110, type: !1388)
!1748 = !DILocation(line: 110, column: 9, scope: !902)
!1749 = !DILocation(line: 110, column: 15, scope: !902)
!1750 = !DILocation(line: 110, column: 21, scope: !902)
!1751 = !DILocation(line: 110, column: 25, scope: !902)
!1752 = !DILocation(line: 110, column: 29, scope: !902)
!1753 = !DILocalVariable(name: "RBX", scope: !902, file: !2, line: 111, type: !1388)
!1754 = !DILocation(line: 111, column: 9, scope: !902)
!1755 = !DILocation(line: 111, column: 15, scope: !902)
!1756 = !DILocation(line: 111, column: 21, scope: !902)
!1757 = !DILocation(line: 111, column: 25, scope: !902)
!1758 = !DILocation(line: 111, column: 29, scope: !902)
!1759 = !DILocalVariable(name: "RCX", scope: !902, file: !2, line: 112, type: !1388)
!1760 = !DILocation(line: 112, column: 9, scope: !902)
!1761 = !DILocation(line: 112, column: 15, scope: !902)
!1762 = !DILocation(line: 112, column: 21, scope: !902)
!1763 = !DILocation(line: 112, column: 25, scope: !902)
!1764 = !DILocation(line: 112, column: 29, scope: !902)
!1765 = !DILocalVariable(name: "RDX", scope: !902, file: !2, line: 113, type: !1388)
!1766 = !DILocation(line: 113, column: 9, scope: !902)
!1767 = !DILocation(line: 113, column: 15, scope: !902)
!1768 = !DILocation(line: 113, column: 21, scope: !902)
!1769 = !DILocation(line: 113, column: 25, scope: !902)
!1770 = !DILocation(line: 113, column: 29, scope: !902)
!1771 = !DILocalVariable(name: "RSI", scope: !902, file: !2, line: 114, type: !1388)
!1772 = !DILocation(line: 114, column: 9, scope: !902)
!1773 = !DILocation(line: 114, column: 15, scope: !902)
!1774 = !DILocation(line: 114, column: 21, scope: !902)
!1775 = !DILocation(line: 114, column: 25, scope: !902)
!1776 = !DILocation(line: 114, column: 29, scope: !902)
!1777 = !DILocalVariable(name: "RDI", scope: !902, file: !2, line: 115, type: !1388)
!1778 = !DILocation(line: 115, column: 9, scope: !902)
!1779 = !DILocation(line: 115, column: 15, scope: !902)
!1780 = !DILocation(line: 115, column: 21, scope: !902)
!1781 = !DILocation(line: 115, column: 25, scope: !902)
!1782 = !DILocation(line: 115, column: 29, scope: !902)
!1783 = !DILocalVariable(name: "RSP", scope: !902, file: !2, line: 116, type: !1388)
!1784 = !DILocation(line: 116, column: 9, scope: !902)
!1785 = !DILocation(line: 116, column: 15, scope: !902)
!1786 = !DILocation(line: 116, column: 21, scope: !902)
!1787 = !DILocation(line: 116, column: 25, scope: !902)
!1788 = !DILocation(line: 116, column: 29, scope: !902)
!1789 = !DILocalVariable(name: "RBP", scope: !902, file: !2, line: 117, type: !1388)
!1790 = !DILocation(line: 117, column: 9, scope: !902)
!1791 = !DILocation(line: 117, column: 15, scope: !902)
!1792 = !DILocation(line: 117, column: 21, scope: !902)
!1793 = !DILocation(line: 117, column: 25, scope: !902)
!1794 = !DILocation(line: 117, column: 29, scope: !902)
!1795 = !DILocalVariable(name: "R8", scope: !902, file: !2, line: 118, type: !1388)
!1796 = !DILocation(line: 118, column: 9, scope: !902)
!1797 = !DILocation(line: 118, column: 14, scope: !902)
!1798 = !DILocation(line: 118, column: 20, scope: !902)
!1799 = !DILocation(line: 118, column: 24, scope: !902)
!1800 = !DILocation(line: 118, column: 27, scope: !902)
!1801 = !DILocalVariable(name: "R9", scope: !902, file: !2, line: 119, type: !1388)
!1802 = !DILocation(line: 119, column: 9, scope: !902)
!1803 = !DILocation(line: 119, column: 14, scope: !902)
!1804 = !DILocation(line: 119, column: 20, scope: !902)
!1805 = !DILocation(line: 119, column: 24, scope: !902)
!1806 = !DILocation(line: 119, column: 27, scope: !902)
!1807 = !DILocalVariable(name: "R10", scope: !902, file: !2, line: 120, type: !1388)
!1808 = !DILocation(line: 120, column: 9, scope: !902)
!1809 = !DILocation(line: 120, column: 15, scope: !902)
!1810 = !DILocation(line: 120, column: 21, scope: !902)
!1811 = !DILocation(line: 120, column: 25, scope: !902)
!1812 = !DILocation(line: 120, column: 29, scope: !902)
!1813 = !DILocalVariable(name: "R11", scope: !902, file: !2, line: 121, type: !1388)
!1814 = !DILocation(line: 121, column: 9, scope: !902)
!1815 = !DILocation(line: 121, column: 15, scope: !902)
!1816 = !DILocation(line: 121, column: 21, scope: !902)
!1817 = !DILocation(line: 121, column: 25, scope: !902)
!1818 = !DILocation(line: 121, column: 29, scope: !902)
!1819 = !DILocalVariable(name: "R12", scope: !902, file: !2, line: 122, type: !1388)
!1820 = !DILocation(line: 122, column: 9, scope: !902)
!1821 = !DILocation(line: 122, column: 15, scope: !902)
!1822 = !DILocation(line: 122, column: 21, scope: !902)
!1823 = !DILocation(line: 122, column: 25, scope: !902)
!1824 = !DILocation(line: 122, column: 29, scope: !902)
!1825 = !DILocalVariable(name: "R13", scope: !902, file: !2, line: 123, type: !1388)
!1826 = !DILocation(line: 123, column: 9, scope: !902)
!1827 = !DILocation(line: 123, column: 15, scope: !902)
!1828 = !DILocation(line: 123, column: 21, scope: !902)
!1829 = !DILocation(line: 123, column: 25, scope: !902)
!1830 = !DILocation(line: 123, column: 29, scope: !902)
!1831 = !DILocalVariable(name: "R14", scope: !902, file: !2, line: 124, type: !1388)
!1832 = !DILocation(line: 124, column: 9, scope: !902)
!1833 = !DILocation(line: 124, column: 15, scope: !902)
!1834 = !DILocation(line: 124, column: 21, scope: !902)
!1835 = !DILocation(line: 124, column: 25, scope: !902)
!1836 = !DILocation(line: 124, column: 29, scope: !902)
!1837 = !DILocalVariable(name: "R15", scope: !902, file: !2, line: 125, type: !1388)
!1838 = !DILocation(line: 125, column: 9, scope: !902)
!1839 = !DILocation(line: 125, column: 15, scope: !902)
!1840 = !DILocation(line: 125, column: 21, scope: !902)
!1841 = !DILocation(line: 125, column: 25, scope: !902)
!1842 = !DILocation(line: 125, column: 29, scope: !902)
!1843 = !DILocalVariable(name: "RIP", scope: !902, file: !2, line: 126, type: !1388)
!1844 = !DILocation(line: 126, column: 9, scope: !902)
!1845 = !DILocation(line: 126, column: 15, scope: !902)
!1846 = !DILocation(line: 126, column: 21, scope: !902)
!1847 = !DILocation(line: 126, column: 25, scope: !902)
!1848 = !DILocation(line: 126, column: 29, scope: !902)
!1849 = !DILocalVariable(name: "SS", scope: !902, file: !2, line: 129, type: !1542)
!1850 = !DILocation(line: 129, column: 9, scope: !902)
!1851 = !DILocation(line: 129, column: 14, scope: !902)
!1852 = !DILocation(line: 129, column: 20, scope: !902)
!1853 = !DILocation(line: 129, column: 24, scope: !902)
!1854 = !DILocation(line: 129, column: 27, scope: !902)
!1855 = !DILocalVariable(name: "ES", scope: !902, file: !2, line: 130, type: !1542)
!1856 = !DILocation(line: 130, column: 9, scope: !902)
!1857 = !DILocation(line: 130, column: 14, scope: !902)
!1858 = !DILocation(line: 130, column: 20, scope: !902)
!1859 = !DILocation(line: 130, column: 24, scope: !902)
!1860 = !DILocation(line: 130, column: 27, scope: !902)
!1861 = !DILocalVariable(name: "GS", scope: !902, file: !2, line: 131, type: !1542)
!1862 = !DILocation(line: 131, column: 9, scope: !902)
!1863 = !DILocation(line: 131, column: 14, scope: !902)
!1864 = !DILocation(line: 131, column: 20, scope: !902)
!1865 = !DILocation(line: 131, column: 24, scope: !902)
!1866 = !DILocation(line: 131, column: 27, scope: !902)
!1867 = !DILocalVariable(name: "FS", scope: !902, file: !2, line: 132, type: !1542)
!1868 = !DILocation(line: 132, column: 9, scope: !902)
!1869 = !DILocation(line: 132, column: 14, scope: !902)
!1870 = !DILocation(line: 132, column: 20, scope: !902)
!1871 = !DILocation(line: 132, column: 24, scope: !902)
!1872 = !DILocation(line: 132, column: 27, scope: !902)
!1873 = !DILocalVariable(name: "DS", scope: !902, file: !2, line: 133, type: !1542)
!1874 = !DILocation(line: 133, column: 9, scope: !902)
!1875 = !DILocation(line: 133, column: 14, scope: !902)
!1876 = !DILocation(line: 133, column: 20, scope: !902)
!1877 = !DILocation(line: 133, column: 24, scope: !902)
!1878 = !DILocation(line: 133, column: 27, scope: !902)
!1879 = !DILocalVariable(name: "CS", scope: !902, file: !2, line: 134, type: !1542)
!1880 = !DILocation(line: 134, column: 9, scope: !902)
!1881 = !DILocation(line: 134, column: 14, scope: !902)
!1882 = !DILocation(line: 134, column: 20, scope: !902)
!1883 = !DILocation(line: 134, column: 24, scope: !902)
!1884 = !DILocation(line: 134, column: 27, scope: !902)
!1885 = !DILocalVariable(name: "SS_BASE", scope: !902, file: !2, line: 136, type: !1388)
!1886 = !DILocation(line: 136, column: 9, scope: !902)
!1887 = !DILocalVariable(name: "ES_BASE", scope: !902, file: !2, line: 137, type: !1388)
!1888 = !DILocation(line: 137, column: 9, scope: !902)
!1889 = !DILocalVariable(name: "GS_BASE", scope: !902, file: !2, line: 138, type: !1388)
!1890 = !DILocation(line: 138, column: 9, scope: !902)
!1891 = !DILocation(line: 138, column: 19, scope: !902)
!1892 = !DILocation(line: 138, column: 25, scope: !902)
!1893 = !DILocation(line: 138, column: 30, scope: !902)
!1894 = !DILocation(line: 138, column: 38, scope: !902)
!1895 = !DILocalVariable(name: "FS_BASE", scope: !902, file: !2, line: 139, type: !1388)
!1896 = !DILocation(line: 139, column: 9, scope: !902)
!1897 = !DILocation(line: 139, column: 19, scope: !902)
!1898 = !DILocation(line: 139, column: 25, scope: !902)
!1899 = !DILocation(line: 139, column: 30, scope: !902)
!1900 = !DILocation(line: 139, column: 38, scope: !902)
!1901 = !DILocalVariable(name: "DS_BASE", scope: !902, file: !2, line: 140, type: !1388)
!1902 = !DILocation(line: 140, column: 9, scope: !902)
!1903 = !DILocalVariable(name: "CS_BASE", scope: !902, file: !2, line: 141, type: !1388)
!1904 = !DILocation(line: 141, column: 9, scope: !902)
!1905 = !DILocalVariable(name: "XMM0", scope: !902, file: !2, line: 218, type: !1906)
!1906 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !924, size: 64)
!1907 = !DILocation(line: 218, column: 9, scope: !902)
!1908 = !DILocation(line: 218, column: 16, scope: !902)
!1909 = !DILocation(line: 218, column: 22, scope: !902)
!1910 = !DILocation(line: 218, column: 29, scope: !902)
!1911 = !DILocalVariable(name: "XMM1", scope: !902, file: !2, line: 219, type: !1906)
!1912 = !DILocation(line: 219, column: 9, scope: !902)
!1913 = !DILocation(line: 219, column: 16, scope: !902)
!1914 = !DILocation(line: 219, column: 22, scope: !902)
!1915 = !DILocation(line: 219, column: 29, scope: !902)
!1916 = !DILocalVariable(name: "XMM2", scope: !902, file: !2, line: 220, type: !1906)
!1917 = !DILocation(line: 220, column: 9, scope: !902)
!1918 = !DILocation(line: 220, column: 16, scope: !902)
!1919 = !DILocation(line: 220, column: 22, scope: !902)
!1920 = !DILocation(line: 220, column: 29, scope: !902)
!1921 = !DILocalVariable(name: "XMM3", scope: !902, file: !2, line: 221, type: !1906)
!1922 = !DILocation(line: 221, column: 9, scope: !902)
!1923 = !DILocation(line: 221, column: 16, scope: !902)
!1924 = !DILocation(line: 221, column: 22, scope: !902)
!1925 = !DILocation(line: 221, column: 29, scope: !902)
!1926 = !DILocalVariable(name: "XMM4", scope: !902, file: !2, line: 222, type: !1906)
!1927 = !DILocation(line: 222, column: 9, scope: !902)
!1928 = !DILocation(line: 222, column: 16, scope: !902)
!1929 = !DILocation(line: 222, column: 22, scope: !902)
!1930 = !DILocation(line: 222, column: 29, scope: !902)
!1931 = !DILocalVariable(name: "XMM5", scope: !902, file: !2, line: 223, type: !1906)
!1932 = !DILocation(line: 223, column: 9, scope: !902)
!1933 = !DILocation(line: 223, column: 16, scope: !902)
!1934 = !DILocation(line: 223, column: 22, scope: !902)
!1935 = !DILocation(line: 223, column: 29, scope: !902)
!1936 = !DILocalVariable(name: "XMM6", scope: !902, file: !2, line: 224, type: !1906)
!1937 = !DILocation(line: 224, column: 9, scope: !902)
!1938 = !DILocation(line: 224, column: 16, scope: !902)
!1939 = !DILocation(line: 224, column: 22, scope: !902)
!1940 = !DILocation(line: 224, column: 29, scope: !902)
!1941 = !DILocalVariable(name: "XMM7", scope: !902, file: !2, line: 225, type: !1906)
!1942 = !DILocation(line: 225, column: 9, scope: !902)
!1943 = !DILocation(line: 225, column: 16, scope: !902)
!1944 = !DILocation(line: 225, column: 22, scope: !902)
!1945 = !DILocation(line: 225, column: 29, scope: !902)
!1946 = !DILocalVariable(name: "XMM8", scope: !902, file: !2, line: 228, type: !1906)
!1947 = !DILocation(line: 228, column: 9, scope: !902)
!1948 = !DILocation(line: 228, column: 16, scope: !902)
!1949 = !DILocation(line: 228, column: 22, scope: !902)
!1950 = !DILocation(line: 228, column: 29, scope: !902)
!1951 = !DILocalVariable(name: "XMM9", scope: !902, file: !2, line: 229, type: !1906)
!1952 = !DILocation(line: 229, column: 9, scope: !902)
!1953 = !DILocation(line: 229, column: 16, scope: !902)
!1954 = !DILocation(line: 229, column: 22, scope: !902)
!1955 = !DILocation(line: 229, column: 29, scope: !902)
!1956 = !DILocalVariable(name: "XMM10", scope: !902, file: !2, line: 230, type: !1906)
!1957 = !DILocation(line: 230, column: 9, scope: !902)
!1958 = !DILocation(line: 230, column: 17, scope: !902)
!1959 = !DILocation(line: 230, column: 23, scope: !902)
!1960 = !DILocation(line: 230, column: 31, scope: !902)
!1961 = !DILocalVariable(name: "XMM11", scope: !902, file: !2, line: 231, type: !1906)
!1962 = !DILocation(line: 231, column: 9, scope: !902)
!1963 = !DILocation(line: 231, column: 17, scope: !902)
!1964 = !DILocation(line: 231, column: 23, scope: !902)
!1965 = !DILocation(line: 231, column: 31, scope: !902)
!1966 = !DILocalVariable(name: "XMM12", scope: !902, file: !2, line: 232, type: !1906)
!1967 = !DILocation(line: 232, column: 9, scope: !902)
!1968 = !DILocation(line: 232, column: 17, scope: !902)
!1969 = !DILocation(line: 232, column: 23, scope: !902)
!1970 = !DILocation(line: 232, column: 31, scope: !902)
!1971 = !DILocalVariable(name: "XMM13", scope: !902, file: !2, line: 233, type: !1906)
!1972 = !DILocation(line: 233, column: 9, scope: !902)
!1973 = !DILocation(line: 233, column: 17, scope: !902)
!1974 = !DILocation(line: 233, column: 23, scope: !902)
!1975 = !DILocation(line: 233, column: 31, scope: !902)
!1976 = !DILocalVariable(name: "XMM14", scope: !902, file: !2, line: 234, type: !1906)
!1977 = !DILocation(line: 234, column: 9, scope: !902)
!1978 = !DILocation(line: 234, column: 17, scope: !902)
!1979 = !DILocation(line: 234, column: 23, scope: !902)
!1980 = !DILocation(line: 234, column: 31, scope: !902)
!1981 = !DILocalVariable(name: "XMM15", scope: !902, file: !2, line: 235, type: !1906)
!1982 = !DILocation(line: 235, column: 9, scope: !902)
!1983 = !DILocation(line: 235, column: 17, scope: !902)
!1984 = !DILocation(line: 235, column: 23, scope: !902)
!1985 = !DILocation(line: 235, column: 31, scope: !902)
!1986 = !DILocalVariable(name: "ST0", scope: !902, file: !2, line: 258, type: !1987)
!1987 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !360, size: 64)
!1988 = !DILocation(line: 258, column: 9, scope: !902)
!1989 = !DILocation(line: 258, column: 15, scope: !902)
!1990 = !DILocation(line: 258, column: 21, scope: !902)
!1991 = !DILocation(line: 258, column: 24, scope: !902)
!1992 = !DILocation(line: 258, column: 33, scope: !902)
!1993 = !DILocalVariable(name: "ST1", scope: !902, file: !2, line: 259, type: !1987)
!1994 = !DILocation(line: 259, column: 9, scope: !902)
!1995 = !DILocation(line: 259, column: 15, scope: !902)
!1996 = !DILocation(line: 259, column: 21, scope: !902)
!1997 = !DILocation(line: 259, column: 24, scope: !902)
!1998 = !DILocation(line: 259, column: 33, scope: !902)
!1999 = !DILocalVariable(name: "ST2", scope: !902, file: !2, line: 260, type: !1987)
!2000 = !DILocation(line: 260, column: 9, scope: !902)
!2001 = !DILocation(line: 260, column: 15, scope: !902)
!2002 = !DILocation(line: 260, column: 21, scope: !902)
!2003 = !DILocation(line: 260, column: 24, scope: !902)
!2004 = !DILocation(line: 260, column: 33, scope: !902)
!2005 = !DILocalVariable(name: "ST3", scope: !902, file: !2, line: 261, type: !1987)
!2006 = !DILocation(line: 261, column: 9, scope: !902)
!2007 = !DILocation(line: 261, column: 15, scope: !902)
!2008 = !DILocation(line: 261, column: 21, scope: !902)
!2009 = !DILocation(line: 261, column: 24, scope: !902)
!2010 = !DILocation(line: 261, column: 33, scope: !902)
!2011 = !DILocalVariable(name: "ST4", scope: !902, file: !2, line: 262, type: !1987)
!2012 = !DILocation(line: 262, column: 9, scope: !902)
!2013 = !DILocation(line: 262, column: 15, scope: !902)
!2014 = !DILocation(line: 262, column: 21, scope: !902)
!2015 = !DILocation(line: 262, column: 24, scope: !902)
!2016 = !DILocation(line: 262, column: 33, scope: !902)
!2017 = !DILocalVariable(name: "ST5", scope: !902, file: !2, line: 263, type: !1987)
!2018 = !DILocation(line: 263, column: 9, scope: !902)
!2019 = !DILocation(line: 263, column: 15, scope: !902)
!2020 = !DILocation(line: 263, column: 21, scope: !902)
!2021 = !DILocation(line: 263, column: 24, scope: !902)
!2022 = !DILocation(line: 263, column: 33, scope: !902)
!2023 = !DILocalVariable(name: "ST6", scope: !902, file: !2, line: 264, type: !1987)
!2024 = !DILocation(line: 264, column: 9, scope: !902)
!2025 = !DILocation(line: 264, column: 15, scope: !902)
!2026 = !DILocation(line: 264, column: 21, scope: !902)
!2027 = !DILocation(line: 264, column: 24, scope: !902)
!2028 = !DILocation(line: 264, column: 33, scope: !902)
!2029 = !DILocalVariable(name: "ST7", scope: !902, file: !2, line: 265, type: !1987)
!2030 = !DILocation(line: 265, column: 9, scope: !902)
!2031 = !DILocation(line: 265, column: 15, scope: !902)
!2032 = !DILocation(line: 265, column: 21, scope: !902)
!2033 = !DILocation(line: 265, column: 24, scope: !902)
!2034 = !DILocation(line: 265, column: 33, scope: !902)
!2035 = !DILocalVariable(name: "MMX0", scope: !902, file: !2, line: 291, type: !1388)
!2036 = !DILocation(line: 291, column: 9, scope: !902)
!2037 = !DILocation(line: 291, column: 16, scope: !902)
!2038 = !DILocation(line: 291, column: 22, scope: !902)
!2039 = !DILocation(line: 291, column: 26, scope: !902)
!2040 = !DILocation(line: 291, column: 35, scope: !902)
!2041 = !DILocation(line: 291, column: 39, scope: !902)
!2042 = !DILocation(line: 291, column: 46, scope: !902)
!2043 = !DILocalVariable(name: "MMX1", scope: !902, file: !2, line: 292, type: !1388)
!2044 = !DILocation(line: 292, column: 9, scope: !902)
!2045 = !DILocation(line: 292, column: 16, scope: !902)
!2046 = !DILocation(line: 292, column: 22, scope: !902)
!2047 = !DILocation(line: 292, column: 26, scope: !902)
!2048 = !DILocation(line: 292, column: 35, scope: !902)
!2049 = !DILocation(line: 292, column: 39, scope: !902)
!2050 = !DILocation(line: 292, column: 46, scope: !902)
!2051 = !DILocalVariable(name: "MMX2", scope: !902, file: !2, line: 293, type: !1388)
!2052 = !DILocation(line: 293, column: 9, scope: !902)
!2053 = !DILocation(line: 293, column: 16, scope: !902)
!2054 = !DILocation(line: 293, column: 22, scope: !902)
!2055 = !DILocation(line: 293, column: 26, scope: !902)
!2056 = !DILocation(line: 293, column: 35, scope: !902)
!2057 = !DILocation(line: 293, column: 39, scope: !902)
!2058 = !DILocation(line: 293, column: 46, scope: !902)
!2059 = !DILocalVariable(name: "MMX3", scope: !902, file: !2, line: 294, type: !1388)
!2060 = !DILocation(line: 294, column: 9, scope: !902)
!2061 = !DILocation(line: 294, column: 16, scope: !902)
!2062 = !DILocation(line: 294, column: 22, scope: !902)
!2063 = !DILocation(line: 294, column: 26, scope: !902)
!2064 = !DILocation(line: 294, column: 35, scope: !902)
!2065 = !DILocation(line: 294, column: 39, scope: !902)
!2066 = !DILocation(line: 294, column: 46, scope: !902)
!2067 = !DILocalVariable(name: "MMX4", scope: !902, file: !2, line: 295, type: !1388)
!2068 = !DILocation(line: 295, column: 9, scope: !902)
!2069 = !DILocation(line: 295, column: 16, scope: !902)
!2070 = !DILocation(line: 295, column: 22, scope: !902)
!2071 = !DILocation(line: 295, column: 26, scope: !902)
!2072 = !DILocation(line: 295, column: 35, scope: !902)
!2073 = !DILocation(line: 295, column: 39, scope: !902)
!2074 = !DILocation(line: 295, column: 46, scope: !902)
!2075 = !DILocalVariable(name: "MMX5", scope: !902, file: !2, line: 296, type: !1388)
!2076 = !DILocation(line: 296, column: 9, scope: !902)
!2077 = !DILocation(line: 296, column: 16, scope: !902)
!2078 = !DILocation(line: 296, column: 22, scope: !902)
!2079 = !DILocation(line: 296, column: 26, scope: !902)
!2080 = !DILocation(line: 296, column: 35, scope: !902)
!2081 = !DILocation(line: 296, column: 39, scope: !902)
!2082 = !DILocation(line: 296, column: 46, scope: !902)
!2083 = !DILocalVariable(name: "MMX6", scope: !902, file: !2, line: 297, type: !1388)
!2084 = !DILocation(line: 297, column: 9, scope: !902)
!2085 = !DILocation(line: 297, column: 16, scope: !902)
!2086 = !DILocation(line: 297, column: 22, scope: !902)
!2087 = !DILocation(line: 297, column: 26, scope: !902)
!2088 = !DILocation(line: 297, column: 35, scope: !902)
!2089 = !DILocation(line: 297, column: 39, scope: !902)
!2090 = !DILocation(line: 297, column: 46, scope: !902)
!2091 = !DILocalVariable(name: "MMX7", scope: !902, file: !2, line: 298, type: !1388)
!2092 = !DILocation(line: 298, column: 9, scope: !902)
!2093 = !DILocation(line: 298, column: 16, scope: !902)
!2094 = !DILocation(line: 298, column: 22, scope: !902)
!2095 = !DILocation(line: 298, column: 26, scope: !902)
!2096 = !DILocation(line: 298, column: 35, scope: !902)
!2097 = !DILocation(line: 298, column: 39, scope: !902)
!2098 = !DILocation(line: 298, column: 46, scope: !902)
!2099 = !DILocalVariable(name: "AF", scope: !902, file: !2, line: 301, type: !1401)
!2100 = !DILocation(line: 301, column: 9, scope: !902)
!2101 = !DILocation(line: 301, column: 14, scope: !902)
!2102 = !DILocation(line: 301, column: 20, scope: !902)
!2103 = !DILocation(line: 301, column: 26, scope: !902)
!2104 = !DILocalVariable(name: "CF", scope: !902, file: !2, line: 302, type: !1401)
!2105 = !DILocation(line: 302, column: 9, scope: !902)
!2106 = !DILocation(line: 302, column: 14, scope: !902)
!2107 = !DILocation(line: 302, column: 20, scope: !902)
!2108 = !DILocation(line: 302, column: 26, scope: !902)
!2109 = !DILocalVariable(name: "DF", scope: !902, file: !2, line: 303, type: !1401)
!2110 = !DILocation(line: 303, column: 9, scope: !902)
!2111 = !DILocation(line: 303, column: 14, scope: !902)
!2112 = !DILocation(line: 303, column: 20, scope: !902)
!2113 = !DILocation(line: 303, column: 26, scope: !902)
!2114 = !DILocalVariable(name: "OF", scope: !902, file: !2, line: 304, type: !1401)
!2115 = !DILocation(line: 304, column: 9, scope: !902)
!2116 = !DILocation(line: 304, column: 14, scope: !902)
!2117 = !DILocation(line: 304, column: 20, scope: !902)
!2118 = !DILocation(line: 304, column: 26, scope: !902)
!2119 = !DILocalVariable(name: "PF", scope: !902, file: !2, line: 305, type: !1401)
!2120 = !DILocation(line: 305, column: 9, scope: !902)
!2121 = !DILocation(line: 305, column: 14, scope: !902)
!2122 = !DILocation(line: 305, column: 20, scope: !902)
!2123 = !DILocation(line: 305, column: 26, scope: !902)
!2124 = !DILocalVariable(name: "SF", scope: !902, file: !2, line: 306, type: !1401)
!2125 = !DILocation(line: 306, column: 9, scope: !902)
!2126 = !DILocation(line: 306, column: 14, scope: !902)
!2127 = !DILocation(line: 306, column: 20, scope: !902)
!2128 = !DILocation(line: 306, column: 26, scope: !902)
!2129 = !DILocalVariable(name: "ZF", scope: !902, file: !2, line: 307, type: !1401)
!2130 = !DILocation(line: 307, column: 9, scope: !902)
!2131 = !DILocation(line: 307, column: 14, scope: !902)
!2132 = !DILocation(line: 307, column: 20, scope: !902)
!2133 = !DILocation(line: 307, column: 26, scope: !902)
!2134 = !DILocation(line: 310, column: 10, scope: !902)
!2135 = !DILocation(line: 310, column: 3, scope: !902)
!2136 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2137, file: !2137, line: 36, type: !507, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2137 = !DIFile(filename: "/home/sdasgup3/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/sdasgup3/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2138 = !DILocation(line: 38, column: 3, scope: !2136)
!2139 = !DILocation(line: 40, column: 3, scope: !2136)
!2140 = !DILocation(line: 41, column: 3, scope: !2136)
!2141 = !DILocation(line: 42, column: 3, scope: !2136)
!2142 = !DILocation(line: 43, column: 3, scope: !2136)
!2143 = !DILocation(line: 45, column: 3, scope: !2136)
!2144 = !DILocation(line: 46, column: 3, scope: !2136)
!2145 = !DILocation(line: 47, column: 3, scope: !2136)
!2146 = !DILocation(line: 48, column: 3, scope: !2136)
!2147 = !DILocation(line: 50, column: 3, scope: !2136)
!2148 = !DILocation(line: 51, column: 3, scope: !2136)
!2149 = !DILocation(line: 52, column: 3, scope: !2136)
!2150 = !DILocation(line: 54, column: 3, scope: !2136)
!2151 = !DILocation(line: 55, column: 3, scope: !2136)
!2152 = !DILocation(line: 56, column: 3, scope: !2136)
!2153 = !DILocation(line: 58, column: 3, scope: !2136)
!2154 = !DILocation(line: 59, column: 3, scope: !2136)
!2155 = !DILocation(line: 60, column: 3, scope: !2136)
!2156 = !DILocation(line: 61, column: 3, scope: !2136)
!2157 = !DILocation(line: 63, column: 3, scope: !2136)
!2158 = !DILocation(line: 64, column: 3, scope: !2136)
!2159 = !DILocation(line: 68, column: 3, scope: !2136)
!2160 = !DILocation(line: 70, column: 3, scope: !2136)
!2161 = !DILocation(line: 71, column: 3, scope: !2136)
!2162 = !DILocation(line: 72, column: 3, scope: !2136)
!2163 = !DILocation(line: 73, column: 3, scope: !2136)
!2164 = !DILocation(line: 75, column: 3, scope: !2136)
!2165 = !DILocation(line: 76, column: 3, scope: !2136)
!2166 = !DILocation(line: 78, column: 3, scope: !2136)
!2167 = !DILocation(line: 79, column: 3, scope: !2136)
!2168 = !DILocation(line: 80, column: 3, scope: !2136)
!2169 = !DILocation(line: 81, column: 3, scope: !2136)
!2170 = !DILocation(line: 82, column: 3, scope: !2136)
!2171 = !DILocation(line: 83, column: 3, scope: !2136)
!2172 = !DILocation(line: 84, column: 1, scope: !2136)
