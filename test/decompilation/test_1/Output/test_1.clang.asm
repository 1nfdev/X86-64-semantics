;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-38F3-7EE4-0C			    |
; |			    University of Illinois			    |
; +-------------------------------------------------------------------------+
;
; Input	SHA256 : A1DFA1A06528C2F2DD2C75C09FAA88CB9D09FB0462B2FDC57070E1D53237405A
; Input	MD5    : 17B2A83C993DF967C55741F6F00940A2
; Input	CRC32  : D1D28FC5

; File Name   :	/home/dsand/Github/binary-decompilation/test/decompilation/test_1/Output/test_1.clang.o
; Format      :	ELF64 for x86-64 (Relocatable)
;
; Source File :	'test_1.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use64
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public foo
foo		proc near		; CODE XREF: main+19p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	rbp
		mov	rbp, rsp
		mov	[rbp+var_4], edi
		mov	[rbp+var_8], esi
		mov	esi, [rbp+var_4]
		add	esi, [rbp+var_8]
		mov	[rbp+var_C], esi

loc_13:					; CODE XREF: foo+65j
		cmp	[rbp+var_4], 0
		jl	loc_6A
		mov	eax, 2
		mov	ecx, [rbp+var_4]
		mov	[rbp+var_14], eax
		mov	eax, ecx
		cdq
		mov	ecx, [rbp+var_14]
		idiv	ecx
		cmp	edx, 0
		jnz	loc_4F
		mov	eax, [rbp+var_C]
		add	eax, 0Ah
		mov	[rbp+var_10], eax
		jmp	loc_5A
; ---------------------------------------------------------------------------

loc_4F:					; CODE XREF: foo+39j
		mov	eax, [rbp+var_C]
		sub	eax, 0Ah
		mov	[rbp+var_C], eax

loc_5A:					; CODE XREF: foo+4Aj
		mov	eax, [rbp+var_4]
		add	eax, 0FFFFFFFFh
		mov	[rbp+var_4], eax
		jmp	loc_13
; ---------------------------------------------------------------------------

loc_6A:					; CODE XREF: foo+1Aj
		mov	eax, [rbp+var_10]
		pop	rbp
		retn
foo		endp

; ---------------------------------------------------------------------------
unk_6F		db  90h	; ê		; DATA XREF: .eh_frame:00000000000000CCo

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	rbp
		mov	rbp, rsp
		sub	rsp, 10h
		mov	edi, 0Ah
		mov	esi, 14h
		mov	[rbp+var_4], 0
		call	foo
		mov	[rbp+var_8], eax
		mov	eax, [rbp+var_8]
		add	rsp, 10h
		pop	rbp

locret_99:				; DATA XREF: .eh_frame:00000000000000C8o
		retn
main		endp

_text		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use64
_data		ends

; ===========================================================================

; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use64
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame	segment	para public 'CONST' use64
		assume cs:_eh_frame
		;org 0A8h
		dq 14h,	110780100527A03h, 19008070C1Bh,	1C00000018h
		dd offset locret_99+0FFFFFE9Fh
		dd offset unk_6F
		dq 0D430286100E4100h, 1800000006h
		dq 0FFFFFF8C00000038h
		dq 100E41000000002Ah
		dq 60D430286h
_eh_frame	ends


		end
