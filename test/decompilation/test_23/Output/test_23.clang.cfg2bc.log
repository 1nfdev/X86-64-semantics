Looking up target...
Reading module ...
 TT x86-64 : x86_64-unknown-unknown 
Deserializing externs...
Deserializing externs...
Deserializing externs...
Deserializing functions...
set_ref_reloc_type: Adding  ref: IMM, to: 482, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 3e0, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 0, ro: 1, rt: CODE
set_ref_reloc_type: Adding  ref: IMM, to: 482, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 3e0, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 3e0, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 465, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 46f, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 3e0, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 432, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 45a, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: MEM, to: 320, ro: 0, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 3e0, ro: 2, rt: DATA
Deserializing functions...
set_ref_reloc_type: Adding  ref: IMM, to: 430, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 430, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 42d, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: IMM, to: 3e0, ro: 2, rt: DATA
Deserializing data...
Deserializing data...
Deserializing data...
Deserializing data...
Deserializing symbol at: 4b0, sub_0x0L, 4
cur_pos: 490
dse_base: 4b0
new_cur_pos: 4b4
Deserializing symbol at: 4cc, sub_0x0L, 4
cur_pos: 4b4
dse_base: 4cc
new_cur_pos: 4d0
Creating module...
Setting target...
Done setting target
Adding external funcs...
Adding external data...
Adding internal data...
Adding Offset Tables...
Adding entry points...
Returning modue...
Setting initial triples...
Getting LLVM module...
Converting to LLVM...
Inserted function: sub_b0
Inserted function: sub_0
inserting global data section named data_0x320
inserting global data section named data_0x3e0
inserting global data section named data_0x42d
inserting global data section named data_0x490
translate_CALLpcrel32: function is: read, cc is: 0
dataSectionToTypesContents: Found symbol: sub_0x0L
dataSectionToTypesContents: Found symbol: sub_0x0L
doCallPCExtern paramCount  : 3 : read
3 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: exit, cc is: 0
doCallPCExtern paramCount  : 1 : exit
1 : 2786690
translate_JMPr: jump table via register: 154
doJumpTableViaSwitchReg: Doing jumpt table via switch(reg)
doJumpTableViaSwitchReg: Mapping from 156 => block_0x156
doJumpTableViaSwitchReg: Mapping from 164 => block_0x164
doJumpTableViaSwitchReg: Mapping from 180 => block_0x180
doJumpTableViaSwitchReg: Mapping from 18e => block_0x18e
doJumpTableViaSwitchReg: Mapping from 172 => block_0x172
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: exit, cc is: 0
doCallPCExtern paramCount  : 1 : exit
1 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCtarget address : 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
translate_CALLpcrel32: function is: printf, cc is: 0
doCallPCExtern paramCount  : 2 : printf
2 : 2786690
Adding entry point: main
main is implemented by sub_b0
NOT doing post analysis passes.
