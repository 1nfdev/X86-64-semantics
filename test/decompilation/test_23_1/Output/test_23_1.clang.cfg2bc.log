Looking up target...
Reading module ...
 TT x86-64 : x86_64-unknown-unknown 
Deserializing externs...
Deserializing functions...
set_ref_reloc_type: Adding  ref: IMM, to: 169, ro: 2, rt: DATA
set_ref_reloc_type: Adding  ref: MEM, to: b0, ro: 0, rt: DATA
set_ref_reloc_type: Adding  ref: MEM, to: 168, ro: 0, rt: DATA
Deserializing data...
Deserializing data...
Deserializing data...
Deserializing symbol at: 190, sub_0x0L, 4
cur_pos: 170
dse_base: 190
new_cur_pos: 194
Creating module...
Setting target...
Done setting target
Adding external funcs...
Adding external data...
Adding internal data...
Adding Offset Tables...
Adding entry points...
Returning modue...
Setting initial triples...
Getting LLVM module...
Converting to LLVM...
Inserted function: sub_0
inserting global data section named data_0xb0
inserting global data section named data_0x169
inserting global data section named data_0x170
translate_CALLpcrel32: function is: printf, cc is: 0
dataSectionToTypesContents: Found symbol: sub_0x0L
doCallPCExtern paramCount  : 2 : printf
2 : 1dee690
translate_JMPr: jump table via register: 54
doJumpTableViaSwitchReg: Doing jumpt table via switch(reg)
doJumpTableViaSwitchReg: Mapping from 56 => block_0x56
doJumpTableViaSwitchReg: Mapping from 5b => block_0x5b
doJumpTableViaSwitchReg: Mapping from 65 => block_0x65
doJumpTableViaSwitchReg: Mapping from 6a => block_0x6a
doJumpTableViaSwitchReg: Mapping from 60 => block_0x60
Adding entry point: main
main is implemented by sub_0
NOT doing post analysis passes.
