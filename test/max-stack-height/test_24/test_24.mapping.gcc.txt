========================================================
Source line mapping for function: sub_0
========================================================

1 :   %R15_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
2 :   %STACK_LIMIT_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
3 :   %STACK_BASE_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
4 :   %XMM15_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
5 :   %XMM14_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
6 :   %XMM13_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
7 :   %XMM12_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
8 :   %XMM11_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
9 :   %XMM10_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
10 :   %XMM9_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
11 :   %XMM8_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
12 :   %XMM7_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
13 :   %XMM6_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
14 :   %XMM5_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
15 :   %XMM4_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
16 :   %XMM3_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
17 :   %XMM2_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
18 :   %XMM1_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
19 :   %XMM0_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
20 :   %FPU_LASTDATA_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
21 :   %FPU_LASTDATA_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
22 :   %FPU_LASTIP_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
23 :   %FPU_LASTIP_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
24 :   %FPU_TAG_val = alloca [8 x i2], !mcsema_real_eip !2 :          <0>	pushq	%rbp
25 :   %FPU_IM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
26 :   %FPU_DM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
27 :   %FPU_ZM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
28 :   %FPU_OM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
29 :   %FPU_UM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
30 :   %FPU_PM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
31 :   %FPU_PC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
32 :   %FPU_RC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
33 :   %FPU_X_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
34 :   %FPU_IE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
35 :   %FPU_DE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
36 :   %FPU_ZE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
37 :   %FPU_OE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
38 :   %FPU_UE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
39 :   %FPU_PE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
40 :   %FPU_SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
41 :   %FPU_ES_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
42 :   %FPU_C0_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
43 :   %FPU_C1_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
44 :   %FPU_C2_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
45 :   %FPU_TOP_val = alloca i3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
46 :   %FPU_C3_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
47 :   %FPU_B_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
48 :   %STi_val = alloca [8 x x86_fp80], !mcsema_real_eip !2 :          <0>	pushq	%rbp
49 :   %DF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
50 :   %OF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
51 :   %SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
52 :   %CF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
53 :   %AF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
54 :   %PF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
55 :   %ZF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
56 :   %RIP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
57 :   %R14_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
58 :   %R13_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
59 :   %R12_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
60 :   %R11_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
61 :   %R10_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
62 :   %R9_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
63 :   %R8_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
64 :   %RSP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
65 :   %RBP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
66 :   %RDI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
67 :   %RSI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
68 :   %RDX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
69 :   %RCX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
70 :   %RBX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
71 :   %RAX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
72 :   %RAX = getelementptr inbounds %struct.regs* %0, i64 0, i32 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
73 :   %1 = load i64* %RAX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
74 :   store i64 %1, i64* %RAX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
75 :   %RBX = getelementptr inbounds %struct.regs* %0, i64 0, i32 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
76 :   %2 = load i64* %RBX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
77 :   store i64 %2, i64* %RBX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
78 :   %RCX = getelementptr inbounds %struct.regs* %0, i64 0, i32 2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
79 :   %3 = load i64* %RCX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
80 :   store i64 %3, i64* %RCX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
81 :   %RDX = getelementptr inbounds %struct.regs* %0, i64 0, i32 3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
82 :   %4 = load i64* %RDX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
83 :   store i64 %4, i64* %RDX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
84 :   %RSI = getelementptr inbounds %struct.regs* %0, i64 0, i32 4, !mcsema_real_eip !2 :          <0>	pushq	%rbp
85 :   %5 = load i64* %RSI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
86 :   store i64 %5, i64* %RSI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
87 :   %RDI = getelementptr inbounds %struct.regs* %0, i64 0, i32 5, !mcsema_real_eip !2 :          <0>	pushq	%rbp
88 :   %6 = load i64* %RDI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
89 :   store i64 %6, i64* %RDI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
90 :   %RSP = getelementptr inbounds %struct.regs* %0, i64 0, i32 6, !mcsema_real_eip !2 :          <0>	pushq	%rbp
91 :   %7 = load i64* %RSP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
92 :   store i64 %7, i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
93 :   %RBP = getelementptr inbounds %struct.regs* %0, i64 0, i32 7, !mcsema_real_eip !2 :          <0>	pushq	%rbp
94 :   %8 = load i64* %RBP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
95 :   store i64 %8, i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
96 :   %R8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
97 :   %9 = load i64* %R8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
98 :   store i64 %9, i64* %R8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
99 :   %R9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
100 :   %10 = load i64* %R9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
101 :   store i64 %10, i64* %R9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
102 :   %R10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
103 :   %11 = load i64* %R10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
104 :   store i64 %11, i64* %R10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
105 :   %R11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
106 :   %12 = load i64* %R11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
107 :   store i64 %12, i64* %R11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
108 :   %R12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
109 :   %13 = load i64* %R12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
110 :   store i64 %13, i64* %R12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
111 :   %R13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
112 :   %14 = load i64* %R13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
113 :   store i64 %14, i64* %R13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
114 :   %R14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
115 :   %15 = load i64* %R14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
116 :   store i64 %15, i64* %R14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
117 :   %R15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
118 :   %16 = load i64* %R15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
119 :   store i64 %16, i64* %R15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
120 :   %RIP = getelementptr inbounds %struct.regs* %0, i64 0, i32 16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
121 :   %17 = load i64* %RIP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
122 :   store i64 %17, i64* %RIP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
123 :   %CF = getelementptr inbounds %struct.regs* %0, i64 0, i32 17, !mcsema_real_eip !2 :          <0>	pushq	%rbp
124 :   %18 = load i1* %CF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
125 :   store i1 %18, i1* %CF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
126 :   %PF = getelementptr inbounds %struct.regs* %0, i64 0, i32 18, !mcsema_real_eip !2 :          <0>	pushq	%rbp
127 :   %19 = load i1* %PF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
128 :   store i1 %19, i1* %PF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
129 :   %AF = getelementptr inbounds %struct.regs* %0, i64 0, i32 19, !mcsema_real_eip !2 :          <0>	pushq	%rbp
130 :   %20 = load i1* %AF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
131 :   store i1 %20, i1* %AF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
132 :   %ZF = getelementptr inbounds %struct.regs* %0, i64 0, i32 20, !mcsema_real_eip !2 :          <0>	pushq	%rbp
133 :   %21 = load i1* %ZF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
134 :   store i1 %21, i1* %ZF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
135 :   %SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 21, !mcsema_real_eip !2 :          <0>	pushq	%rbp
136 :   %22 = load i1* %SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
137 :   store i1 %22, i1* %SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
138 :   %OF = getelementptr inbounds %struct.regs* %0, i64 0, i32 22, !mcsema_real_eip !2 :          <0>	pushq	%rbp
139 :   %23 = load i1* %OF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
140 :   store i1 %23, i1* %OF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
141 :   %DF = getelementptr inbounds %struct.regs* %0, i64 0, i32 23, !mcsema_real_eip !2 :          <0>	pushq	%rbp
142 :   %24 = load i1* %DF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
143 :   store i1 %24, i1* %DF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
144 :   %25 = getelementptr inbounds %struct.regs* %0, i64 0, i32 24, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
145 :   %26 = bitcast x86_fp80* %25 to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
146 :   %27 = bitcast [8 x x86_fp80]* %STi_val to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
147 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !2 :          <0>	pushq	%rbp
148 :   %FPU_B = getelementptr inbounds %struct.regs* %0, i64 0, i32 25, !mcsema_real_eip !2 :          <0>	pushq	%rbp
149 :   %28 = load i1* %FPU_B, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
150 :   store i1 %28, i1* %FPU_B_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
151 :   %FPU_C3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 26, !mcsema_real_eip !2 :          <0>	pushq	%rbp
152 :   %29 = load i1* %FPU_C3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
153 :   store i1 %29, i1* %FPU_C3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
154 :   %FPU_TOP = getelementptr inbounds %struct.regs* %0, i64 0, i32 27, !mcsema_real_eip !2 :          <0>	pushq	%rbp
155 :   %30 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
156 :   store i3 %30, i3* %FPU_TOP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
157 :   %FPU_C2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 28, !mcsema_real_eip !2 :          <0>	pushq	%rbp
158 :   %31 = load i1* %FPU_C2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
159 :   store i1 %31, i1* %FPU_C2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
160 :   %FPU_C1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 29, !mcsema_real_eip !2 :          <0>	pushq	%rbp
161 :   %32 = load i1* %FPU_C1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
162 :   store i1 %32, i1* %FPU_C1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
163 :   %FPU_C0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 30, !mcsema_real_eip !2 :          <0>	pushq	%rbp
164 :   %33 = load i1* %FPU_C0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
165 :   store i1 %33, i1* %FPU_C0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
166 :   %FPU_ES = getelementptr inbounds %struct.regs* %0, i64 0, i32 31, !mcsema_real_eip !2 :          <0>	pushq	%rbp
167 :   %34 = load i1* %FPU_ES, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
168 :   store i1 %34, i1* %FPU_ES_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
169 :   %FPU_SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 32, !mcsema_real_eip !2 :          <0>	pushq	%rbp
170 :   %35 = load i1* %FPU_SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
171 :   store i1 %35, i1* %FPU_SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
172 :   %FPU_PE = getelementptr inbounds %struct.regs* %0, i64 0, i32 33, !mcsema_real_eip !2 :          <0>	pushq	%rbp
173 :   %36 = load i1* %FPU_PE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
174 :   store i1 %36, i1* %FPU_PE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
175 :   %FPU_UE = getelementptr inbounds %struct.regs* %0, i64 0, i32 34, !mcsema_real_eip !2 :          <0>	pushq	%rbp
176 :   %37 = load i1* %FPU_UE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
177 :   store i1 %37, i1* %FPU_UE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
178 :   %FPU_OE = getelementptr inbounds %struct.regs* %0, i64 0, i32 35, !mcsema_real_eip !2 :          <0>	pushq	%rbp
179 :   %38 = load i1* %FPU_OE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
180 :   store i1 %38, i1* %FPU_OE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
181 :   %FPU_ZE = getelementptr inbounds %struct.regs* %0, i64 0, i32 36, !mcsema_real_eip !2 :          <0>	pushq	%rbp
182 :   %39 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
183 :   store i1 %39, i1* %FPU_ZE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
184 :   %FPU_DE = getelementptr inbounds %struct.regs* %0, i64 0, i32 37, !mcsema_real_eip !2 :          <0>	pushq	%rbp
185 :   %40 = load i1* %FPU_DE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
186 :   store i1 %40, i1* %FPU_DE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
187 :   %FPU_IE = getelementptr inbounds %struct.regs* %0, i64 0, i32 38, !mcsema_real_eip !2 :          <0>	pushq	%rbp
188 :   %41 = load i1* %FPU_IE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
189 :   store i1 %41, i1* %FPU_IE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
190 :   %FPU_X = getelementptr inbounds %struct.regs* %0, i64 0, i32 39, !mcsema_real_eip !2 :          <0>	pushq	%rbp
191 :   %42 = load i1* %FPU_X, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
192 :   store i1 %42, i1* %FPU_X_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
193 :   %FPU_RC = getelementptr inbounds %struct.regs* %0, i64 0, i32 40, !mcsema_real_eip !2 :          <0>	pushq	%rbp
194 :   %43 = load i2* %FPU_RC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
195 :   store i2 %43, i2* %FPU_RC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
196 :   %FPU_PC = getelementptr inbounds %struct.regs* %0, i64 0, i32 41, !mcsema_real_eip !2 :          <0>	pushq	%rbp
197 :   %44 = load i2* %FPU_PC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
198 :   store i2 %44, i2* %FPU_PC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
199 :   %FPU_PM = getelementptr inbounds %struct.regs* %0, i64 0, i32 42, !mcsema_real_eip !2 :          <0>	pushq	%rbp
200 :   %45 = load i1* %FPU_PM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
201 :   store i1 %45, i1* %FPU_PM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
202 :   %FPU_UM = getelementptr inbounds %struct.regs* %0, i64 0, i32 43, !mcsema_real_eip !2 :          <0>	pushq	%rbp
203 :   %46 = load i1* %FPU_UM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
204 :   store i1 %46, i1* %FPU_UM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
205 :   %FPU_OM = getelementptr inbounds %struct.regs* %0, i64 0, i32 44, !mcsema_real_eip !2 :          <0>	pushq	%rbp
206 :   %47 = load i1* %FPU_OM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
207 :   store i1 %47, i1* %FPU_OM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
208 :   %FPU_ZM = getelementptr inbounds %struct.regs* %0, i64 0, i32 45, !mcsema_real_eip !2 :          <0>	pushq	%rbp
209 :   %48 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
210 :   store i1 %48, i1* %FPU_ZM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
211 :   %FPU_DM = getelementptr inbounds %struct.regs* %0, i64 0, i32 46, !mcsema_real_eip !2 :          <0>	pushq	%rbp
212 :   %49 = load i1* %FPU_DM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
213 :   store i1 %49, i1* %FPU_DM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
214 :   %FPU_IM = getelementptr inbounds %struct.regs* %0, i64 0, i32 47, !mcsema_real_eip !2 :          <0>	pushq	%rbp
215 :   %50 = load i1* %FPU_IM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
216 :   store i1 %50, i1* %FPU_IM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
217 :   %51 = getelementptr inbounds %struct.regs* %0, i64 0, i32 48, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp

218 :   %52 = bitcast i8* %51 to i64* : NIL
219 :   %53 = bitcast [8 x i2]* %FPU_TAG_val to i64* : NIL
220 :   %54 = load i64* %52, align 4 : NIL
221 :   store i64 %54, i64* %53, align 4 : NIL

222 :   %FPU_LASTIP_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 49, !mcsema_real_eip !2 :          <0>	pushq	%rbp
223 :   %55 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
224 :   store i16 %55, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
225 :   %FPU_LASTIP_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 50, !mcsema_real_eip !2 :          <0>	pushq	%rbp
226 :   %56 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
227 :   store i64 %56, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
228 :   %FPU_LASTDATA_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 51, !mcsema_real_eip !2 :          <0>	pushq	%rbp
229 :   %57 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
230 :   store i16 %57, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
231 :   %FPU_LASTDATA_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 52, !mcsema_real_eip !2 :          <0>	pushq	%rbp
232 :   %58 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
233 :   store i64 %58, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
234 :   %XMM0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 54, !mcsema_real_eip !2 :          <0>	pushq	%rbp
235 :   %59 = load i128* %XMM0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
236 :   store i128 %59, i128* %XMM0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
237 :   %XMM1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 55, !mcsema_real_eip !2 :          <0>	pushq	%rbp
238 :   %60 = load i128* %XMM1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
239 :   store i128 %60, i128* %XMM1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
240 :   %XMM2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 56, !mcsema_real_eip !2 :          <0>	pushq	%rbp
241 :   %61 = load i128* %XMM2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
242 :   store i128 %61, i128* %XMM2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
243 :   %XMM3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 57, !mcsema_real_eip !2 :          <0>	pushq	%rbp
244 :   %62 = load i128* %XMM3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
245 :   store i128 %62, i128* %XMM3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
246 :   %XMM4 = getelementptr inbounds %struct.regs* %0, i64 0, i32 58, !mcsema_real_eip !2 :          <0>	pushq	%rbp
247 :   %63 = load i128* %XMM4, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
248 :   store i128 %63, i128* %XMM4_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
249 :   %XMM5 = getelementptr inbounds %struct.regs* %0, i64 0, i32 59, !mcsema_real_eip !2 :          <0>	pushq	%rbp
250 :   %64 = load i128* %XMM5, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
251 :   store i128 %64, i128* %XMM5_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
252 :   %XMM6 = getelementptr inbounds %struct.regs* %0, i64 0, i32 60, !mcsema_real_eip !2 :          <0>	pushq	%rbp
253 :   %65 = load i128* %XMM6, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
254 :   store i128 %65, i128* %XMM6_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
255 :   %XMM7 = getelementptr inbounds %struct.regs* %0, i64 0, i32 61, !mcsema_real_eip !2 :          <0>	pushq	%rbp
256 :   %66 = load i128* %XMM7, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
257 :   store i128 %66, i128* %XMM7_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
258 :   %XMM8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 62, !mcsema_real_eip !2 :          <0>	pushq	%rbp
259 :   %67 = load i128* %XMM8, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
260 :   store i128 %67, i128* %XMM8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
261 :   %XMM9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 63, !mcsema_real_eip !2 :          <0>	pushq	%rbp
262 :   %68 = load i128* %XMM9, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
263 :   store i128 %68, i128* %XMM9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
264 :   %XMM10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
265 :   %69 = load i128* %XMM10, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
266 :   store i128 %69, i128* %XMM10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
267 :   %XMM11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 65, !mcsema_real_eip !2 :          <0>	pushq	%rbp
268 :   %70 = load i128* %XMM11, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
269 :   store i128 %70, i128* %XMM11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
270 :   %XMM12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 66, !mcsema_real_eip !2 :          <0>	pushq	%rbp
271 :   %71 = load i128* %XMM12, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
272 :   store i128 %71, i128* %XMM12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
273 :   %XMM13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 67, !mcsema_real_eip !2 :          <0>	pushq	%rbp
274 :   %72 = load i128* %XMM13, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
275 :   store i128 %72, i128* %XMM13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
276 :   %XMM14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 68, !mcsema_real_eip !2 :          <0>	pushq	%rbp
277 :   %73 = load i128* %XMM14, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
278 :   store i128 %73, i128* %XMM14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
279 :   %XMM15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 69, !mcsema_real_eip !2 :          <0>	pushq	%rbp
280 :   %74 = load i128* %XMM15, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
281 :   store i128 %74, i128* %XMM15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
282 :   %STACK_BASE = getelementptr inbounds %struct.regs* %0, i64 0, i32 70, !mcsema_real_eip !2 :          <0>	pushq	%rbp
283 :   %75 = load i64* %STACK_BASE, !mcsema_real_eip !2 :          <0>	pushq	%rbp
284 :   store i64 %75, i64* %STACK_BASE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
285 :   %STACK_LIMIT = getelementptr inbounds %struct.regs* %0, i64 0, i32 71, !mcsema_real_eip !2 :          <0>	pushq	%rbp
286 :   %76 = load i64* %STACK_LIMIT, !mcsema_real_eip !2 :          <0>	pushq	%rbp
287 :   store i64 %76, i64* %STACK_LIMIT_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <0>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <1>	movq	%rsp, %rbp

294 :   %81 = load i64* %RBX_val, !mcsema_real_eip !4 :          <4>	pushq	%rbx

295 :   %82 = add i64 %78, -16 : NIL

296 :   %83 = inttoptr i64 %82 to i64*, !mcsema_real_eip !4 :          <4>	pushq	%rbx
297 :   store i64 %81, i64* %83, !mcsema_real_eip !4 :          <4>	pushq	%rbx

298 :   %84 = add i64 %78, -88 : NIL

299 :   %85 = xor i64 %84, %82, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
300 :   %86 = and i64 %85, 16, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
301 :   %87 = icmp ne i64 %86, 0, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
302 :   store i1 %87, i1* %AF_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
303 :   %88 = trunc i64 %84 to i8, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
304 :   %89 = tail call i8 @llvm.ctpop.i8(i8 %88), !mcsema_real_eip !5 :          <5>	subq	$72, %rsp

305 :   %90 = and i8 %89, 1 : NIL
306 :   %91 = icmp eq i8 %90, 0 : NIL

307 :   store i1 %91, i1* %PF_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
308 :   %92 = icmp eq i64 %84, 0, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
309 :   store i1 %92, i1* %ZF_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp

310 :   %93 = icmp slt i64 %84, 0 : NIL

311 :   store i1 %93, i1* %SF_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
312 :   %94 = icmp ult i64 %82, 72, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
313 :   store i1 %94, i1* %CF_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
314 :   %95 = and i64 %85, %82, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp

315 :   %96 = icmp slt i64 %95, 0 : NIL

316 :   store i1 %96, i1* %OF_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp
317 :   store i64 %84, i64* %RSP_val, !mcsema_real_eip !5 :          <5>	subq	$72, %rsp

318 :   %97 = load i64* %RBP_val, !mcsema_real_eip !6 :          <9>	movq	%rdi, -72(%rbp)
319 :   %98 = add i64 %97, -72, !mcsema_real_eip !6 :          <9>	movq	%rdi, -72(%rbp)
320 :   %99 = inttoptr i64 %98 to i64*, !mcsema_real_eip !6 :          <9>	movq	%rdi, -72(%rbp)
321 :   %100 = load i64* %RDI_val, !mcsema_real_eip !6 :          <9>	movq	%rdi, -72(%rbp)
322 :   store i64 %100, i64* %99, !mcsema_real_eip !6 :          <9>	movq	%rdi, -72(%rbp)

323 :   %101 = load i64* %RBP_val, !mcsema_real_eip !7 :          <d>	movq	-72(%rbp), %rax
324 :   %102 = add i64 %101, -72, !mcsema_real_eip !7 :          <d>	movq	-72(%rbp), %rax
325 :   %103 = inttoptr i64 %102 to i64*, !mcsema_real_eip !7 :          <d>	movq	-72(%rbp), %rax
326 :   %104 = load i64* %103, !mcsema_real_eip !7 :          <d>	movq	-72(%rbp), %rax

327 :   store i64 %104, i64* %RDI_val, !mcsema_real_eip !8 :          <11>	movq	%rax, %rdi

328 :   %105 = tail call x86_64_sysvcc i64 @strlen(i64 %104), !mcsema_real_eip !9 :          <14>	callq	0
329 :   store i64 %105, i64* %RAX_val, !mcsema_real_eip !9 :          <14>	callq	0

330 :   %106 = load i64* %RBP_val, !mcsema_real_eip !10 :          <19>	movl	%eax, -24(%rbp)
331 :   %107 = add i64 %106, -24, !mcsema_real_eip !10 :          <19>	movl	%eax, -24(%rbp)
332 :   %108 = inttoptr i64 %107 to i64*, !mcsema_real_eip !10 :          <19>	movl	%eax, -24(%rbp)
333 :   %109 = trunc i64 %105 to i32, !mcsema_real_eip !10 :          <19>	movl	%eax, -24(%rbp)

334 :   %110 = bitcast i64* %108 to i32* : NIL

335 :   store i32 %109, i32* %110, !mcsema_real_eip !10 :          <19>	movl	%eax, -24(%rbp)

336 :   %111 = load i64* %RBP_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
337 :   %112 = add i64 %111, -24, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
338 :   %113 = inttoptr i64 %112 to i64*, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)

339 :   %114 = bitcast i64* %113 to i32* : NIL

340 :   %115 = load i32* %114, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)

341 :   %116 = add i32 %115, -37 : NIL

342 :   %117 = xor i32 %116, %115, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
343 :   %118 = and i32 %117, 16, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
344 :   %119 = icmp ne i32 %118, 0, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
345 :   store i1 %119, i1* %AF_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
346 :   %120 = trunc i32 %116 to i8, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
347 :   %121 = tail call i8 @llvm.ctpop.i8(i8 %120), !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)

348 :   %122 = and i8 %121, 1 : NIL
349 :   %123 = icmp eq i8 %122, 0 : NIL

350 :   store i1 %123, i1* %PF_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
351 :   %124 = icmp eq i32 %116, 0, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
352 :   store i1 %124, i1* %ZF_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)

353 :   %125 = icmp slt i32 %116, 0 : NIL

354 :   store i1 %125, i1* %SF_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
355 :   %126 = icmp ult i32 %115, 37, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
356 :   store i1 %126, i1* %CF_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)
357 :   %127 = and i32 %117, %115, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)

358 :   %128 = icmp slt i32 %127, 0 : NIL

359 :   store i1 %128, i1* %OF_val, !mcsema_real_eip !11 :          <1c>	cmpl	$37, -24(%rbp)

360 :   %129 = load i1* %ZF_val, !mcsema_real_eip !12 :          <20>	je	8

361 :   %130 = load i64* %RBP_val, !mcsema_real_eip !13 :          <2f>	movq	-72(%rbp), %rax

362 :   br i1 %129, label %block_0x2a, label %block_0x22, !mcsema_real_eip !12 :          <20>	je	8

363 :   %131 = add i64 %130, -72, !mcsema_real_eip !13 :          <2f>	movq	-72(%rbp), %rax
364 :   %132 = inttoptr i64 %131 to i64*, !mcsema_real_eip !13 :          <2f>	movq	-72(%rbp), %rax
365 :   %133 = load i64* %132, !mcsema_real_eip !13 :          <2f>	movq	-72(%rbp), %rax
366 :   store i64 %133, i64* %RAX_val, !mcsema_real_eip !13 :          <2f>	movq	-72(%rbp), %rax

367 :   %134 = inttoptr i64 %133 to i64*, !mcsema_real_eip !14 :          <33>	movzbl	(%rax), %eax

368 :   %135 = bitcast i64* %134 to i8* : NIL

369 :   %136 = load i8* %135, !mcsema_real_eip !14 :          <33>	movzbl	(%rax), %eax

370 :   %137 = zext i8 %136 to i64 : NIL

371 :   store i64 %137, i64* %RAX_val, !mcsema_real_eip !14 :          <33>	movzbl	(%rax), %eax

372 :   %138 = add i8 %136, -100 : NIL

373 :   %139 = xor i8 %138, %136, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
374 :   %140 = and i8 %139, 16, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
375 :   %141 = icmp ne i8 %140, 0, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
376 :   store i1 %141, i1* %AF_val, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
377 :   %142 = tail call i8 @llvm.ctpop.i8(i8 %138), !mcsema_real_eip !15 :          <36>	cmpb	$100, %al

378 :   %143 = and i8 %142, 1 : NIL
379 :   %144 = icmp eq i8 %143, 0 : NIL

380 :   store i1 %144, i1* %PF_val, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
381 :   %145 = icmp eq i8 %138, 0, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
382 :   store i1 %145, i1* %ZF_val, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al

383 :   %146 = icmp slt i8 %138, 0 : NIL

384 :   store i1 %146, i1* %SF_val, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
385 :   %147 = icmp ult i8 %136, 100, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
386 :   store i1 %147, i1* %CF_val, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al
387 :   %148 = and i8 %139, %136, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al

388 :   %149 = icmp slt i8 %148, 0 : NIL

389 :   store i1 %149, i1* %OF_val, !mcsema_real_eip !15 :          <36>	cmpb	$100, %al

390 :   %150 = load i1* %ZF_val, !mcsema_real_eip !16 :          <38>	je	10
391 :   br i1 %150, label %block_0x44, label %block_0x3a, !mcsema_real_eip !16 :          <38>	je	10

392 :   %151 = add i64 %130, -24, !mcsema_real_eip !17 :          <22>	movl	-24(%rbp), %eax
393 :   %152 = inttoptr i64 %151 to i64*, !mcsema_real_eip !17 :          <22>	movl	-24(%rbp), %eax

394 :   %153 = bitcast i64* %152 to i32* : NIL

395 :   %154 = load i32* %153, !mcsema_real_eip !17 :          <22>	movl	-24(%rbp), %eax
396 :   %155 = zext i32 %154 to i64, !mcsema_real_eip !17 :          <22>	movl	-24(%rbp), %eax
397 :   store i64 %155, i64* %RAX_val, !mcsema_real_eip !17 :          <22>	movl	-24(%rbp), %eax

398 :   br label %block_0x391, !mcsema_real_eip !18 :          <25>	jmp	871

399 :   %156 = load i64* %RSP_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

400 :   %uadd = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %156, i64 72) : NIL
401 :   %157 = extractvalue { i64, i1 } %uadd, 0 : NIL

402 :   %158 = xor i64 %157, %156, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
403 :   %159 = and i64 %158, 16, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
404 :   %160 = icmp ne i64 %159, 0, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
405 :   store i1 %160, i1* %AF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

406 :   %161 = icmp slt i64 %157, 0 : NIL

407 :   store i1 %161, i1* %SF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
408 :   %162 = icmp eq i64 %157, 0, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
409 :   store i1 %162, i1* %ZF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
410 :   %163 = xor i64 %156, -9223372036854775808, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
411 :   %164 = and i64 %158, %163, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

412 :   %165 = icmp slt i64 %164, 0 : NIL

413 :   store i1 %165, i1* %OF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
414 :   %166 = trunc i64 %157 to i8, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
415 :   %167 = tail call i8 @llvm.ctpop.i8(i8 %166), !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

416 :   %168 = and i8 %167, 1 : NIL
417 :   %169 = icmp eq i8 %168, 0 : NIL

418 :   store i1 %169, i1* %PF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

419 :   %170 = extractvalue { i64, i1 } %uadd, 1 : NIL

420 :   store i1 %170, i1* %CF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
421 :   store i64 %157, i64* %RSP_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

422 :   %171 = inttoptr i64 %157 to i64*, !mcsema_real_eip !20 :          <395>	popq	%rbx
423 :   %172 = load i64* %171, !mcsema_real_eip !20 :          <395>	popq	%rbx
424 :   store i64 %172, i64* %RBX_val, !mcsema_real_eip !20 :          <395>	popq	%rbx
425 :   %173 = add i64 %157, 8, !mcsema_real_eip !20 :          <395>	popq	%rbx
426 :   store i64 %173, i64* %RSP_val, !mcsema_real_eip !20 :          <395>	popq	%rbx

427 :   %174 = inttoptr i64 %173 to i64*, !mcsema_real_eip !21 :          <396>	popq	%rbp
428 :   %175 = load i64* %174, !mcsema_real_eip !21 :          <396>	popq	%rbp
429 :   store i64 %175, i64* %RBP_val, !mcsema_real_eip !21 :          <396>	popq	%rbp

430 :   %176 = add i64 %157, 24, !mcsema_real_eip !22 :          <397>	retq
431 :   store i64 %176, i64* %RSP_val, !mcsema_real_eip !22 :          <397>	retq
432 :   %177 = load i64* %RAX_val, !mcsema_real_eip !22 :          <397>	retq
433 :   store i64 %177, i64* %RAX, !mcsema_real_eip !22 :          <397>	retq
434 :   %178 = load i64* %RBX_val, !mcsema_real_eip !22 :          <397>	retq
435 :   store i64 %178, i64* %RBX, !mcsema_real_eip !22 :          <397>	retq
436 :   %179 = load i64* %RCX_val, !mcsema_real_eip !22 :          <397>	retq
437 :   store i64 %179, i64* %RCX, !mcsema_real_eip !22 :          <397>	retq
438 :   %180 = load i64* %RDX_val, !mcsema_real_eip !22 :          <397>	retq
439 :   store i64 %180, i64* %RDX, !mcsema_real_eip !22 :          <397>	retq
440 :   %181 = load i64* %RSI_val, !mcsema_real_eip !22 :          <397>	retq
441 :   store i64 %181, i64* %RSI, !mcsema_real_eip !22 :          <397>	retq
442 :   %182 = load i64* %RDI_val, !mcsema_real_eip !22 :          <397>	retq
443 :   store i64 %182, i64* %RDI, !mcsema_real_eip !22 :          <397>	retq
444 :   %183 = load i64* %RSP_val, !mcsema_real_eip !22 :          <397>	retq
445 :   store i64 %183, i64* %RSP, !mcsema_real_eip !22 :          <397>	retq
446 :   %184 = load i64* %RBP_val, !mcsema_real_eip !22 :          <397>	retq
447 :   store i64 %184, i64* %RBP, !mcsema_real_eip !22 :          <397>	retq
448 :   %185 = load i64* %R8_val, !mcsema_real_eip !22 :          <397>	retq
449 :   store i64 %185, i64* %R8, !mcsema_real_eip !22 :          <397>	retq
450 :   %186 = load i64* %R9_val, !mcsema_real_eip !22 :          <397>	retq
451 :   store i64 %186, i64* %R9, !mcsema_real_eip !22 :          <397>	retq
452 :   %187 = load i64* %R10_val, !mcsema_real_eip !22 :          <397>	retq
453 :   store i64 %187, i64* %R10, !mcsema_real_eip !22 :          <397>	retq
454 :   %188 = load i64* %R11_val, !mcsema_real_eip !22 :          <397>	retq
455 :   store i64 %188, i64* %R11, !mcsema_real_eip !22 :          <397>	retq
456 :   %189 = load i64* %R12_val, !mcsema_real_eip !22 :          <397>	retq
457 :   store i64 %189, i64* %R12, !mcsema_real_eip !22 :          <397>	retq
458 :   %190 = load i64* %R13_val, !mcsema_real_eip !22 :          <397>	retq
459 :   store i64 %190, i64* %R13, !mcsema_real_eip !22 :          <397>	retq
460 :   %191 = load i64* %R14_val, !mcsema_real_eip !22 :          <397>	retq
461 :   store i64 %191, i64* %R14, !mcsema_real_eip !22 :          <397>	retq
462 :   %192 = load i64* %R15_val, !mcsema_real_eip !22 :          <397>	retq
463 :   store i64 %192, i64* %R15, !mcsema_real_eip !22 :          <397>	retq
464 :   %193 = load i64* %RIP_val, !mcsema_real_eip !22 :          <397>	retq
465 :   store i64 %193, i64* %RIP, !mcsema_real_eip !22 :          <397>	retq
466 :   %194 = load i1* %CF_val, !mcsema_real_eip !22 :          <397>	retq
467 :   store i1 %194, i1* %CF, align 1, !mcsema_real_eip !22 :          <397>	retq
468 :   %195 = load i1* %PF_val, !mcsema_real_eip !22 :          <397>	retq
469 :   store i1 %195, i1* %PF, align 1, !mcsema_real_eip !22 :          <397>	retq
470 :   %196 = load i1* %AF_val, !mcsema_real_eip !22 :          <397>	retq
471 :   store i1 %196, i1* %AF, align 1, !mcsema_real_eip !22 :          <397>	retq
472 :   %197 = load i1* %ZF_val, !mcsema_real_eip !22 :          <397>	retq
473 :   store i1 %197, i1* %ZF, align 1, !mcsema_real_eip !22 :          <397>	retq
474 :   %198 = load i1* %SF_val, !mcsema_real_eip !22 :          <397>	retq
475 :   store i1 %198, i1* %SF, align 1, !mcsema_real_eip !22 :          <397>	retq
476 :   %199 = load i1* %OF_val, !mcsema_real_eip !22 :          <397>	retq
477 :   store i1 %199, i1* %OF, align 1, !mcsema_real_eip !22 :          <397>	retq
478 :   %200 = load i1* %DF_val, !mcsema_real_eip !22 :          <397>	retq
479 :   store i1 %200, i1* %DF, align 1, !mcsema_real_eip !22 :          <397>	retq
480 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !22 :          <397>	retq
481 :   %201 = load i1* %FPU_B_val, !mcsema_real_eip !22 :          <397>	retq
482 :   store i1 %201, i1* %FPU_B, align 1, !mcsema_real_eip !22 :          <397>	retq
483 :   %202 = load i1* %FPU_C3_val, !mcsema_real_eip !22 :          <397>	retq
484 :   store i1 %202, i1* %FPU_C3, align 1, !mcsema_real_eip !22 :          <397>	retq
485 :   %203 = load i3* %FPU_TOP_val, !mcsema_real_eip !22 :          <397>	retq
486 :   store i3 %203, i3* %FPU_TOP, align 1, !mcsema_real_eip !22 :          <397>	retq
487 :   %204 = load i1* %FPU_C2_val, !mcsema_real_eip !22 :          <397>	retq
488 :   store i1 %204, i1* %FPU_C2, align 1, !mcsema_real_eip !22 :          <397>	retq
489 :   %205 = load i1* %FPU_C1_val, !mcsema_real_eip !22 :          <397>	retq
490 :   store i1 %205, i1* %FPU_C1, align 1, !mcsema_real_eip !22 :          <397>	retq
491 :   %206 = load i1* %FPU_C0_val, !mcsema_real_eip !22 :          <397>	retq
492 :   store i1 %206, i1* %FPU_C0, align 1, !mcsema_real_eip !22 :          <397>	retq
493 :   %207 = load i1* %FPU_ES_val, !mcsema_real_eip !22 :          <397>	retq
494 :   store i1 %207, i1* %FPU_ES, align 1, !mcsema_real_eip !22 :          <397>	retq
495 :   %208 = load i1* %FPU_SF_val, !mcsema_real_eip !22 :          <397>	retq
496 :   store i1 %208, i1* %FPU_SF, align 1, !mcsema_real_eip !22 :          <397>	retq
497 :   %209 = load i1* %FPU_PE_val, !mcsema_real_eip !22 :          <397>	retq
498 :   store i1 %209, i1* %FPU_PE, align 1, !mcsema_real_eip !22 :          <397>	retq
499 :   %210 = load i1* %FPU_UE_val, !mcsema_real_eip !22 :          <397>	retq
500 :   store i1 %210, i1* %FPU_UE, align 1, !mcsema_real_eip !22 :          <397>	retq
501 :   %211 = load i1* %FPU_OE_val, !mcsema_real_eip !22 :          <397>	retq
502 :   store i1 %211, i1* %FPU_OE, align 1, !mcsema_real_eip !22 :          <397>	retq
503 :   %212 = load i1* %FPU_ZE_val, !mcsema_real_eip !22 :          <397>	retq
504 :   store i1 %212, i1* %FPU_ZE, align 1, !mcsema_real_eip !22 :          <397>	retq
505 :   %213 = load i1* %FPU_DE_val, !mcsema_real_eip !22 :          <397>	retq
506 :   store i1 %213, i1* %FPU_DE, align 1, !mcsema_real_eip !22 :          <397>	retq
507 :   %214 = load i1* %FPU_IE_val, !mcsema_real_eip !22 :          <397>	retq
508 :   store i1 %214, i1* %FPU_IE, align 1, !mcsema_real_eip !22 :          <397>	retq
509 :   %215 = load i1* %FPU_X_val, !mcsema_real_eip !22 :          <397>	retq
510 :   store i1 %215, i1* %FPU_X, align 1, !mcsema_real_eip !22 :          <397>	retq
511 :   %216 = load i2* %FPU_RC_val, !mcsema_real_eip !22 :          <397>	retq
512 :   store i2 %216, i2* %FPU_RC, align 1, !mcsema_real_eip !22 :          <397>	retq
513 :   %217 = load i2* %FPU_PC_val, !mcsema_real_eip !22 :          <397>	retq
514 :   store i2 %217, i2* %FPU_PC, align 1, !mcsema_real_eip !22 :          <397>	retq
515 :   %218 = load i1* %FPU_PM_val, !mcsema_real_eip !22 :          <397>	retq
516 :   store i1 %218, i1* %FPU_PM, align 1, !mcsema_real_eip !22 :          <397>	retq
517 :   %219 = load i1* %FPU_UM_val, !mcsema_real_eip !22 :          <397>	retq
518 :   store i1 %219, i1* %FPU_UM, align 1, !mcsema_real_eip !22 :          <397>	retq
519 :   %220 = load i1* %FPU_OM_val, !mcsema_real_eip !22 :          <397>	retq
520 :   store i1 %220, i1* %FPU_OM, align 1, !mcsema_real_eip !22 :          <397>	retq
521 :   %221 = load i1* %FPU_ZM_val, !mcsema_real_eip !22 :          <397>	retq
522 :   store i1 %221, i1* %FPU_ZM, align 1, !mcsema_real_eip !22 :          <397>	retq
523 :   %222 = load i1* %FPU_DM_val, !mcsema_real_eip !22 :          <397>	retq
524 :   store i1 %222, i1* %FPU_DM, align 1, !mcsema_real_eip !22 :          <397>	retq
525 :   %223 = load i1* %FPU_IM_val, !mcsema_real_eip !22 :          <397>	retq
526 :   store i1 %223, i1* %FPU_IM, align 1, !mcsema_real_eip !22 :          <397>	retq

527 :   %224 = load i64* %53, align 4 : NIL
528 :   store i64 %224, i64* %52, align 4 : NIL

529 :   %225 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !22 :          <397>	retq
530 :   store i16 %225, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !22 :          <397>	retq
531 :   %226 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !22 :          <397>	retq
532 :   store i64 %226, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !22 :          <397>	retq
533 :   %227 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !22 :          <397>	retq
534 :   store i16 %227, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !22 :          <397>	retq
535 :   %228 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !22 :          <397>	retq
536 :   store i64 %228, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !22 :          <397>	retq
537 :   %229 = load i128* %XMM0_val, !mcsema_real_eip !22 :          <397>	retq
538 :   store i128 %229, i128* %XMM0, align 1, !mcsema_real_eip !22 :          <397>	retq
539 :   %230 = load i128* %XMM1_val, !mcsema_real_eip !22 :          <397>	retq
540 :   store i128 %230, i128* %XMM1, align 1, !mcsema_real_eip !22 :          <397>	retq
541 :   %231 = load i128* %XMM2_val, !mcsema_real_eip !22 :          <397>	retq
542 :   store i128 %231, i128* %XMM2, align 1, !mcsema_real_eip !22 :          <397>	retq
543 :   %232 = load i128* %XMM3_val, !mcsema_real_eip !22 :          <397>	retq
544 :   store i128 %232, i128* %XMM3, align 1, !mcsema_real_eip !22 :          <397>	retq
545 :   %233 = load i128* %XMM4_val, !mcsema_real_eip !22 :          <397>	retq
546 :   store i128 %233, i128* %XMM4, align 1, !mcsema_real_eip !22 :          <397>	retq
547 :   %234 = load i128* %XMM5_val, !mcsema_real_eip !22 :          <397>	retq
548 :   store i128 %234, i128* %XMM5, align 1, !mcsema_real_eip !22 :          <397>	retq
549 :   %235 = load i128* %XMM6_val, !mcsema_real_eip !22 :          <397>	retq
550 :   store i128 %235, i128* %XMM6, align 1, !mcsema_real_eip !22 :          <397>	retq
551 :   %236 = load i128* %XMM7_val, !mcsema_real_eip !22 :          <397>	retq
552 :   store i128 %236, i128* %XMM7, align 1, !mcsema_real_eip !22 :          <397>	retq
553 :   %237 = load i128* %XMM8_val, !mcsema_real_eip !22 :          <397>	retq
554 :   store i128 %237, i128* %XMM8, align 1, !mcsema_real_eip !22 :          <397>	retq
555 :   %238 = load i128* %XMM9_val, !mcsema_real_eip !22 :          <397>	retq
556 :   store i128 %238, i128* %XMM9, align 1, !mcsema_real_eip !22 :          <397>	retq
557 :   %239 = load i128* %XMM10_val, !mcsema_real_eip !22 :          <397>	retq
558 :   store i128 %239, i128* %XMM10, align 1, !mcsema_real_eip !22 :          <397>	retq
559 :   %240 = load i128* %XMM11_val, !mcsema_real_eip !22 :          <397>	retq
560 :   store i128 %240, i128* %XMM11, align 1, !mcsema_real_eip !22 :          <397>	retq
561 :   %241 = load i128* %XMM12_val, !mcsema_real_eip !22 :          <397>	retq
562 :   store i128 %241, i128* %XMM12, align 1, !mcsema_real_eip !22 :          <397>	retq
563 :   %242 = load i128* %XMM13_val, !mcsema_real_eip !22 :          <397>	retq
564 :   store i128 %242, i128* %XMM13, align 1, !mcsema_real_eip !22 :          <397>	retq
565 :   %243 = load i128* %XMM14_val, !mcsema_real_eip !22 :          <397>	retq
566 :   store i128 %243, i128* %XMM14, align 1, !mcsema_real_eip !22 :          <397>	retq
567 :   %244 = load i128* %XMM15_val, !mcsema_real_eip !22 :          <397>	retq
568 :   store i128 %244, i128* %XMM15, align 1, !mcsema_real_eip !22 :          <397>	retq
569 :   %245 = load i64* %STACK_BASE_val, !mcsema_real_eip !22 :          <397>	retq
570 :   store i64 %245, i64* %STACK_BASE, align 1, !mcsema_real_eip !22 :          <397>	retq
571 :   %246 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !22 :          <397>	retq
572 :   store i64 %246, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !22 :          <397>	retq
573 :   ret void, !mcsema_real_eip !22 :          <397>	retq

574 :   %247 = load i64* %RBP_val, !mcsema_real_eip !23 :          <44>	movq	-72(%rbp), %rax
575 :   %248 = add i64 %247, -72, !mcsema_real_eip !23 :          <44>	movq	-72(%rbp), %rax
576 :   %249 = inttoptr i64 %248 to i64*, !mcsema_real_eip !23 :          <44>	movq	-72(%rbp), %rax
577 :   %250 = load i64* %249, !mcsema_real_eip !23 :          <44>	movq	-72(%rbp), %rax

578 :   %uadd208 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %250, i64 1) : NIL
579 :   %251 = extractvalue { i64, i1 } %uadd208, 0 : NIL

580 :   %252 = xor i64 %251, %250, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
581 :   %253 = and i64 %252, 16, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
582 :   %254 = icmp ne i64 %253, 0, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
583 :   store i1 %254, i1* %AF_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax

584 :   %255 = icmp slt i64 %251, 0 : NIL

585 :   store i1 %255, i1* %SF_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
586 :   %256 = icmp eq i64 %251, 0, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
587 :   store i1 %256, i1* %ZF_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
588 :   %257 = xor i64 %250, -9223372036854775808, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
589 :   %258 = and i64 %252, %257, !mcsema_real_eip !24 :          <48>	addq	$1, %rax

590 :   %259 = icmp slt i64 %258, 0 : NIL

591 :   store i1 %259, i1* %OF_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
592 :   %260 = trunc i64 %251 to i8, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
593 :   %261 = tail call i8 @llvm.ctpop.i8(i8 %260), !mcsema_real_eip !24 :          <48>	addq	$1, %rax

594 :   %262 = and i8 %261, 1 : NIL
595 :   %263 = icmp eq i8 %262, 0 : NIL

596 :   store i1 %263, i1* %PF_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax

597 :   %264 = extractvalue { i64, i1 } %uadd208, 1 : NIL

598 :   store i1 %264, i1* %CF_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax
599 :   store i64 %251, i64* %RAX_val, !mcsema_real_eip !24 :          <48>	addq	$1, %rax

600 :   %265 = inttoptr i64 %251 to i64*, !mcsema_real_eip !25 :          <4c>	movzbl	(%rax), %eax

601 :   %266 = bitcast i64* %265 to i8* : NIL

602 :   %267 = load i8* %266, !mcsema_real_eip !25 :          <4c>	movzbl	(%rax), %eax

603 :   %268 = zext i8 %267 to i64 : NIL

604 :   store i64 %268, i64* %RDI_val, !mcsema_real_eip !26 :          <52>	movl	%eax, %edi

605 :   %269 = tail call x86_64_sysvcc i64 @to_byte(i64 %268), !mcsema_real_eip !27 :          <54>	callq	0
606 :   store i64 %269, i64* %RAX_val, !mcsema_real_eip !27 :          <54>	callq	0

607 :   %270 = trunc i64 %269 to i32, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax

608 :   %271 = add i32 %270, -9 : NIL

609 :   %272 = xor i32 %271, %270, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
610 :   %273 = and i32 %272, 16, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
611 :   %274 = icmp ne i32 %273, 0, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
612 :   store i1 %274, i1* %AF_val, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
613 :   %275 = trunc i32 %271 to i8, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
614 :   %276 = tail call i8 @llvm.ctpop.i8(i8 %275), !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax

615 :   %277 = and i8 %276, 1 : NIL
616 :   %278 = icmp eq i8 %277, 0 : NIL

617 :   store i1 %278, i1* %PF_val, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
618 :   %279 = icmp eq i32 %271, 0, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
619 :   store i1 %279, i1* %ZF_val, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax

620 :   %280 = icmp slt i32 %271, 0 : NIL

621 :   store i1 %280, i1* %SF_val, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
622 :   %281 = icmp ult i32 %270, 9, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
623 :   store i1 %281, i1* %CF_val, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax
624 :   %282 = and i32 %272, %270, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax

625 :   %283 = icmp slt i32 %282, 0 : NIL

626 :   store i1 %283, i1* %OF_val, !mcsema_real_eip !28 :          <59>	cmpl	$9, %eax

627 :   %284 = load i1* %ZF_val, !mcsema_real_eip !29 :          <5c>	je	10
628 :   br i1 %284, label %block_0x68, label %block_0x5e, !mcsema_real_eip !29 :          <5c>	je	10

629 :   store i64 4294967294, i64* %RAX_val, !mcsema_real_eip !30 :          <3a>	movl	$4294967294, %eax

630 :   br label %block_0x391, !mcsema_real_eip !31 :          <3f>	jmp	845

631 :   %285 = load i64* %RBP_val, !mcsema_real_eip !32 :          <68>	movq	-72(%rbp), %rax
632 :   %286 = add i64 %285, -72, !mcsema_real_eip !32 :          <68>	movq	-72(%rbp), %rax
633 :   %287 = inttoptr i64 %286 to i64*, !mcsema_real_eip !32 :          <68>	movq	-72(%rbp), %rax
634 :   %288 = load i64* %287, !mcsema_real_eip !32 :          <68>	movq	-72(%rbp), %rax

635 :   %uadd209 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %288, i64 2) : NIL
636 :   %289 = extractvalue { i64, i1 } %uadd209, 0 : NIL

637 :   %290 = xor i64 %289, %288, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
638 :   %291 = and i64 %290, 16, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
639 :   %292 = icmp ne i64 %291, 0, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
640 :   store i1 %292, i1* %AF_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax

641 :   %293 = icmp slt i64 %289, 0 : NIL

642 :   store i1 %293, i1* %SF_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
643 :   %294 = icmp eq i64 %289, 0, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
644 :   store i1 %294, i1* %ZF_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
645 :   %295 = xor i64 %288, -9223372036854775808, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
646 :   %296 = and i64 %290, %295, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax

647 :   %297 = icmp slt i64 %296, 0 : NIL

648 :   store i1 %297, i1* %OF_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
649 :   %298 = trunc i64 %289 to i8, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
650 :   %299 = tail call i8 @llvm.ctpop.i8(i8 %298), !mcsema_real_eip !33 :          <6c>	addq	$2, %rax

651 :   %300 = and i8 %299, 1 : NIL
652 :   %301 = icmp eq i8 %300, 0 : NIL

653 :   store i1 %301, i1* %PF_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax

654 :   %302 = extractvalue { i64, i1 } %uadd209, 1 : NIL

655 :   store i1 %302, i1* %CF_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax
656 :   store i64 %289, i64* %RAX_val, !mcsema_real_eip !33 :          <6c>	addq	$2, %rax

657 :   %303 = inttoptr i64 %289 to i64*, !mcsema_real_eip !34 :          <70>	movzbl	(%rax), %eax

658 :   %304 = bitcast i64* %303 to i8* : NIL

659 :   %305 = load i8* %304, !mcsema_real_eip !34 :          <70>	movzbl	(%rax), %eax

660 :   %306 = zext i8 %305 to i64 : NIL

661 :   store i64 %306, i64* %RDI_val, !mcsema_real_eip !35 :          <76>	movl	%eax, %edi

662 :   %307 = tail call x86_64_sysvcc i64 @to_byte(i64 %306), !mcsema_real_eip !36 :          <78>	callq	0
663 :   store i64 %307, i64* %RAX_val, !mcsema_real_eip !36 :          <78>	callq	0

664 :   %308 = load i64* %RBP_val, !mcsema_real_eip !37 :          <7d>	movl	%eax, -28(%rbp)
665 :   %309 = add i64 %308, -28, !mcsema_real_eip !37 :          <7d>	movl	%eax, -28(%rbp)
666 :   %310 = inttoptr i64 %309 to i64*, !mcsema_real_eip !37 :          <7d>	movl	%eax, -28(%rbp)
667 :   %311 = trunc i64 %307 to i32, !mcsema_real_eip !37 :          <7d>	movl	%eax, -28(%rbp)

668 :   %312 = bitcast i64* %310 to i32* : NIL

669 :   store i32 %311, i32* %312, !mcsema_real_eip !37 :          <7d>	movl	%eax, -28(%rbp)

670 :   %313 = load i64* %RBP_val, !mcsema_real_eip !38 :          <80>	movl	-28(%rbp), %eax
671 :   %314 = add i64 %313, -28, !mcsema_real_eip !38 :          <80>	movl	-28(%rbp), %eax
672 :   %315 = inttoptr i64 %314 to i64*, !mcsema_real_eip !38 :          <80>	movl	-28(%rbp), %eax

673 :   %316 = bitcast i64* %315 to i32* : NIL

674 :   %317 = load i32* %316, !mcsema_real_eip !38 :          <80>	movl	-28(%rbp), %eax

675 :   %318 = shl i32 %317, 1 : NIL

676 :   %319 = zext i32 %318 to i64, !mcsema_real_eip !39 :          <83>	addl	%eax, %eax
677 :   store i64 %319, i64* %RAX_val, !mcsema_real_eip !39 :          <83>	addl	%eax, %eax

678 :   %320 = add i32 %318, -26 : NIL

679 :   %321 = xor i32 %320, %318, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax

680 :   %322 = and i32 %321, 16 : NIL
681 :   %323 = icmp eq i32 %322, 0 : NIL

682 :   store i1 %323, i1* %AF_val, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
683 :   %324 = trunc i32 %320 to i8, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
684 :   %325 = tail call i8 @llvm.ctpop.i8(i8 %324), !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax

685 :   %326 = and i8 %325, 1 : NIL
686 :   %327 = icmp eq i8 %326, 0 : NIL

687 :   store i1 %327, i1* %PF_val, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
688 :   %328 = icmp eq i32 %320, 0, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
689 :   store i1 %328, i1* %ZF_val, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax

690 :   %329 = icmp slt i32 %320, 0 : NIL

691 :   store i1 %329, i1* %SF_val, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
692 :   %330 = icmp ult i32 %318, 26, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
693 :   store i1 %330, i1* %CF_val, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax
694 :   %331 = and i32 %321, %318, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax

695 :   %332 = icmp slt i32 %331, 0 : NIL

696 :   store i1 %332, i1* %OF_val, !mcsema_real_eip !40 :          <85>	cmpl	$26, %eax

697 :   %333 = load i1* %ZF_val, !mcsema_real_eip !41 :          <88>	je	10
698 :   br i1 %333, label %block_0x94, label %block_0x8a, !mcsema_real_eip !41 :          <88>	je	10

699 :   store i64 4294967293, i64* %RAX_val, !mcsema_real_eip !42 :          <5e>	movl	$4294967293, %eax

700 :   br label %block_0x391, !mcsema_real_eip !43 :          <63>	jmp	809

701 :   %334 = load i64* %RBP_val, !mcsema_real_eip !44 :          <94>	movq	-72(%rbp), %rax
702 :   %335 = add i64 %334, -72, !mcsema_real_eip !44 :          <94>	movq	-72(%rbp), %rax
703 :   %336 = inttoptr i64 %335 to i64*, !mcsema_real_eip !44 :          <94>	movq	-72(%rbp), %rax
704 :   %337 = load i64* %336, !mcsema_real_eip !44 :          <94>	movq	-72(%rbp), %rax

705 :   %uadd210 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %337, i64 3) : NIL
706 :   %338 = extractvalue { i64, i1 } %uadd210, 0 : NIL

707 :   %339 = xor i64 %338, %337, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
708 :   %340 = and i64 %339, 16, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
709 :   %341 = icmp ne i64 %340, 0, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
710 :   store i1 %341, i1* %AF_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax

711 :   %342 = icmp slt i64 %338, 0 : NIL

712 :   store i1 %342, i1* %SF_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
713 :   %343 = icmp eq i64 %338, 0, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
714 :   store i1 %343, i1* %ZF_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
715 :   %344 = xor i64 %337, -9223372036854775808, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
716 :   %345 = and i64 %339, %344, !mcsema_real_eip !45 :          <98>	addq	$3, %rax

717 :   %346 = icmp slt i64 %345, 0 : NIL

718 :   store i1 %346, i1* %OF_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
719 :   %347 = trunc i64 %338 to i8, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
720 :   %348 = tail call i8 @llvm.ctpop.i8(i8 %347), !mcsema_real_eip !45 :          <98>	addq	$3, %rax

721 :   %349 = and i8 %348, 1 : NIL
722 :   %350 = icmp eq i8 %349, 0 : NIL

723 :   store i1 %350, i1* %PF_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax

724 :   %351 = extractvalue { i64, i1 } %uadd210, 1 : NIL

725 :   store i1 %351, i1* %CF_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax
726 :   store i64 %338, i64* %RAX_val, !mcsema_real_eip !45 :          <98>	addq	$3, %rax

727 :   %352 = inttoptr i64 %338 to i64*, !mcsema_real_eip !46 :          <9c>	movzbl	(%rax), %eax

728 :   %353 = bitcast i64* %352 to i8* : NIL

729 :   %354 = load i8* %353, !mcsema_real_eip !46 :          <9c>	movzbl	(%rax), %eax

730 :   %355 = zext i8 %354 to i64 : NIL

731 :   store i64 %355, i64* %RDI_val, !mcsema_real_eip !47 :          <a2>	movl	%eax, %edi

732 :   %356 = tail call x86_64_sysvcc i64 @to_byte(i64 %355), !mcsema_real_eip !48 :          <a4>	callq	0
733 :   store i64 %356, i64* %RAX_val, !mcsema_real_eip !48 :          <a4>	callq	0

734 :   %357 = load i64* %RBP_val, !mcsema_real_eip !49 :          <a9>	movl	%eax, -32(%rbp)
735 :   %358 = add i64 %357, -32, !mcsema_real_eip !49 :          <a9>	movl	%eax, -32(%rbp)
736 :   %359 = inttoptr i64 %358 to i64*, !mcsema_real_eip !49 :          <a9>	movl	%eax, -32(%rbp)
737 :   %360 = trunc i64 %356 to i32, !mcsema_real_eip !49 :          <a9>	movl	%eax, -32(%rbp)

738 :   %361 = bitcast i64* %359 to i32* : NIL

739 :   store i32 %360, i32* %361, !mcsema_real_eip !49 :          <a9>	movl	%eax, -32(%rbp)

740 :   %362 = load i64* %RBP_val, !mcsema_real_eip !50 :          <ac>	movl	-32(%rbp), %eax
741 :   %363 = add i64 %362, -32, !mcsema_real_eip !50 :          <ac>	movl	-32(%rbp), %eax
742 :   %364 = inttoptr i64 %363 to i64*, !mcsema_real_eip !50 :          <ac>	movl	-32(%rbp), %eax

743 :   %365 = bitcast i64* %364 to i32* : NIL

744 :   %366 = load i32* %365, !mcsema_real_eip !50 :          <ac>	movl	-32(%rbp), %eax

745 :   %367 = add i32 %366, -13 : NIL

746 :   %368 = icmp eq i32 %367, 0, !mcsema_real_eip !51 :          <af>	subl	$13, %eax
747 :   %369 = zext i32 %367 to i64, !mcsema_real_eip !51 :          <af>	subl	$13, %eax
748 :   store i64 %369, i64* %RAX_val, !mcsema_real_eip !51 :          <af>	subl	$13, %eax

749 :   %370 = add i32 %366, -14 : NIL

750 :   %371 = xor i32 %370, %367, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
751 :   %372 = and i32 %371, 16, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
752 :   %373 = icmp ne i32 %372, 0, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
753 :   store i1 %373, i1* %AF_val, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
754 :   %374 = trunc i32 %370 to i8, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
755 :   %375 = tail call i8 @llvm.ctpop.i8(i8 %374), !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax

756 :   %376 = and i8 %375, 1 : NIL
757 :   %377 = icmp eq i8 %376, 0 : NIL

758 :   store i1 %377, i1* %PF_val, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
759 :   %378 = icmp eq i32 %370, 0, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
760 :   store i1 %378, i1* %ZF_val, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax

761 :   %379 = icmp slt i32 %370, 0 : NIL

762 :   store i1 %379, i1* %SF_val, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
763 :   store i1 %368, i1* %CF_val, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax
764 :   %380 = and i32 %371, %367, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax

765 :   %381 = icmp slt i32 %380, 0 : NIL

766 :   store i1 %381, i1* %OF_val, !mcsema_real_eip !52 :          <b2>	cmpl	$1, %eax

767 :   %382 = load i1* %ZF_val, !mcsema_real_eip !53 :          <b5>	jbe	10
768 :   %383 = or i1 %368, %382, !mcsema_real_eip !53 :          <b5>	jbe	10
769 :   br i1 %383, label %block_0xc1, label %block_0xb7, !mcsema_real_eip !53 :          <b5>	jbe	10

770 :   store i64 4294967292, i64* %RAX_val, !mcsema_real_eip !54 :          <8a>	movl	$4294967292, %eax

771 :   br label %block_0x391, !mcsema_real_eip !55 :          <8f>	jmp	765

772 :   %384 = load i64* %RBP_val, !mcsema_real_eip !56 :          <c1>	movq	-72(%rbp), %rax
773 :   %385 = add i64 %384, -72, !mcsema_real_eip !56 :          <c1>	movq	-72(%rbp), %rax
774 :   %386 = inttoptr i64 %385 to i64*, !mcsema_real_eip !56 :          <c1>	movq	-72(%rbp), %rax
775 :   %387 = load i64* %386, !mcsema_real_eip !56 :          <c1>	movq	-72(%rbp), %rax

776 :   %uadd211 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %387, i64 4) : NIL
777 :   %388 = extractvalue { i64, i1 } %uadd211, 0 : NIL

778 :   %389 = xor i64 %388, %387, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
779 :   %390 = and i64 %389, 16, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
780 :   %391 = icmp ne i64 %390, 0, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
781 :   store i1 %391, i1* %AF_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax

782 :   %392 = icmp slt i64 %388, 0 : NIL

783 :   store i1 %392, i1* %SF_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
784 :   %393 = icmp eq i64 %388, 0, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
785 :   store i1 %393, i1* %ZF_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
786 :   %394 = xor i64 %387, -9223372036854775808, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
787 :   %395 = and i64 %389, %394, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax

788 :   %396 = icmp slt i64 %395, 0 : NIL

789 :   store i1 %396, i1* %OF_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
790 :   %397 = trunc i64 %388 to i8, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
791 :   %398 = tail call i8 @llvm.ctpop.i8(i8 %397), !mcsema_real_eip !57 :          <c5>	addq	$4, %rax

792 :   %399 = and i8 %398, 1 : NIL
793 :   %400 = icmp eq i8 %399, 0 : NIL

794 :   store i1 %400, i1* %PF_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax

795 :   %401 = extractvalue { i64, i1 } %uadd211, 1 : NIL

796 :   store i1 %401, i1* %CF_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax
797 :   store i64 %388, i64* %RAX_val, !mcsema_real_eip !57 :          <c5>	addq	$4, %rax

798 :   %402 = inttoptr i64 %388 to i64*, !mcsema_real_eip !58 :          <c9>	movzbl	(%rax), %eax

799 :   %403 = bitcast i64* %402 to i8* : NIL

800 :   %404 = load i8* %403, !mcsema_real_eip !58 :          <c9>	movzbl	(%rax), %eax

801 :   %405 = zext i8 %404 to i32 : NIL

802 :   %406 = and i32 %405, 15, !mcsema_real_eip !59 :          <cf>	andl	$15, %eax
803 :   %407 = icmp eq i32 %406, 0, !mcsema_real_eip !59 :          <cf>	andl	$15, %eax
804 :   %408 = zext i32 %406 to i64, !mcsema_real_eip !59 :          <cf>	andl	$15, %eax
805 :   store i64 %408, i64* %RAX_val, !mcsema_real_eip !59 :          <cf>	andl	$15, %eax

806 :   %409 = add nsw i32 %406, -1 : NIL

807 :   %410 = and i32 %409, 16, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
808 :   %411 = icmp ne i32 %410, 0, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
809 :   store i1 %411, i1* %AF_val, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
810 :   %412 = trunc i32 %409 to i8, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
811 :   %413 = tail call i8 @llvm.ctpop.i8(i8 %412), !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax

812 :   %414 = and i8 %413, 1 : NIL
813 :   %415 = icmp eq i8 %414, 0 : NIL

814 :   store i1 %415, i1* %PF_val, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
815 :   %416 = icmp eq i32 %409, 0, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
816 :   store i1 %416, i1* %ZF_val, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
817 :   store i1 %407, i1* %SF_val, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
818 :   store i1 %407, i1* %CF_val, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax
819 :   store i1 false, i1* %OF_val, !mcsema_real_eip !60 :          <d2>	cmpl	$1, %eax

820 :   br i1 %416, label %block_0xd7, label %block_0x120, !mcsema_real_eip !61 :          <d5>	jne	73

821 :   store i64 4294967291, i64* %RAX_val, !mcsema_real_eip !62 :          <b7>	movl	$4294967291, %eax

822 :   br label %block_0x391, !mcsema_real_eip !63 :          <bc>	jmp	720

823 :   store i64 4294967290, i64* %RAX_val, !mcsema_real_eip !64 :          <120>	movl	$4294967290, %eax

824 :   br label %block_0x391, !mcsema_real_eip !65 :          <125>	jmp	615

825 :   %417 = load i64* %RBP_val, !mcsema_real_eip !66 :          <d7>	movq	-72(%rbp), %rax
826 :   %418 = add i64 %417, -72, !mcsema_real_eip !66 :          <d7>	movq	-72(%rbp), %rax
827 :   %419 = inttoptr i64 %418 to i64*, !mcsema_real_eip !66 :          <d7>	movq	-72(%rbp), %rax
828 :   %420 = load i64* %419, !mcsema_real_eip !66 :          <d7>	movq	-72(%rbp), %rax

829 :   %uadd212 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %420, i64 4) : NIL
830 :   %421 = extractvalue { i64, i1 } %uadd212, 0 : NIL

831 :   %422 = xor i64 %421, %420, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
832 :   %423 = and i64 %422, 16, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
833 :   %424 = icmp ne i64 %423, 0, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
834 :   store i1 %424, i1* %AF_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax

835 :   %425 = icmp slt i64 %421, 0 : NIL

836 :   store i1 %425, i1* %SF_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
837 :   %426 = icmp eq i64 %421, 0, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
838 :   store i1 %426, i1* %ZF_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
839 :   %427 = xor i64 %420, -9223372036854775808, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
840 :   %428 = and i64 %422, %427, !mcsema_real_eip !67 :          <db>	addq	$4, %rax

841 :   %429 = icmp slt i64 %428, 0 : NIL

842 :   store i1 %429, i1* %OF_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
843 :   %430 = trunc i64 %421 to i8, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
844 :   %431 = tail call i8 @llvm.ctpop.i8(i8 %430), !mcsema_real_eip !67 :          <db>	addq	$4, %rax

845 :   %432 = and i8 %431, 1 : NIL
846 :   %433 = icmp eq i8 %432, 0 : NIL

847 :   store i1 %433, i1* %PF_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax

848 :   %434 = extractvalue { i64, i1 } %uadd212, 1 : NIL

849 :   store i1 %434, i1* %CF_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax
850 :   store i64 %421, i64* %RAX_val, !mcsema_real_eip !67 :          <db>	addq	$4, %rax

851 :   %435 = inttoptr i64 %421 to i64*, !mcsema_real_eip !68 :          <df>	movzbl	(%rax), %eax

852 :   %436 = bitcast i64* %435 to i8* : NIL

853 :   %437 = load i8* %436, !mcsema_real_eip !68 :          <df>	movzbl	(%rax), %eax

854 :   %438 = sext i8 %437 to i32, !mcsema_real_eip !69 :          <e2>	movsbl	%al, %eax

855 :   %439 = and i32 %438, 240, !mcsema_real_eip !70 :          <e5>	andl	$240, %eax
856 :   %440 = zext i32 %439 to i64, !mcsema_real_eip !70 :          <e5>	andl	$240, %eax
857 :   store i64 %440, i64* %RAX_val, !mcsema_real_eip !70 :          <e5>	andl	$240, %eax

858 :   %441 = add nsw i32 %439, -48 : NIL

859 :   %442 = xor i32 %441, %438, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax

860 :   %443 = and i32 %442, 16 : NIL
861 :   %444 = icmp eq i32 %443, 0 : NIL

862 :   store i1 %444, i1* %AF_val, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
863 :   %445 = trunc i32 %441 to i8, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
864 :   %446 = tail call i8 @llvm.ctpop.i8(i8 %445), !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax

865 :   %447 = and i8 %446, 1 : NIL
866 :   %448 = icmp eq i8 %447, 0 : NIL

867 :   store i1 %448, i1* %PF_val, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
868 :   %449 = icmp eq i32 %441, 0, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
869 :   store i1 %449, i1* %ZF_val, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax

870 :   %450 = icmp slt i32 %441, 0 : NIL

871 :   store i1 %450, i1* %SF_val, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
872 :   %451 = icmp ult i32 %439, 48, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
873 :   store i1 %451, i1* %CF_val, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax
874 :   store i1 false, i1* %OF_val, !mcsema_real_eip !71 :          <ea>	cmpl	$48, %eax

875 :   br i1 %449, label %block_0xef, label %block_0x120, !mcsema_real_eip !72 :          <ed>	jne	49

876 :   %452 = load i64* %RBP_val, !mcsema_real_eip !73 :          <ef>	movl	$4294967292, -20(%rbp)
877 :   %453 = add i64 %452, -20, !mcsema_real_eip !73 :          <ef>	movl	$4294967292, -20(%rbp)
878 :   %454 = inttoptr i64 %453 to i64*, !mcsema_real_eip !73 :          <ef>	movl	$4294967292, -20(%rbp)

879 :   %455 = bitcast i64* %454 to i32* : NIL

880 :   store i32 -4, i32* %455, !mcsema_real_eip !73 :          <ef>	movl	$4294967292, -20(%rbp)

881 :   %456 = load i64* %RBP_val, !mcsema_real_eip !74 :          <f6>	movq	-72(%rbp), %rax
882 :   %457 = add i64 %456, -72, !mcsema_real_eip !74 :          <f6>	movq	-72(%rbp), %rax
883 :   %458 = inttoptr i64 %457 to i64*, !mcsema_real_eip !74 :          <f6>	movq	-72(%rbp), %rax
884 :   %459 = load i64* %458, !mcsema_real_eip !74 :          <f6>	movq	-72(%rbp), %rax

885 :   %uadd213 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %459, i64 5) : NIL
886 :   %460 = extractvalue { i64, i1 } %uadd213, 0 : NIL

887 :   %461 = xor i64 %460, %459, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
888 :   %462 = and i64 %461, 16, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
889 :   %463 = icmp ne i64 %462, 0, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
890 :   store i1 %463, i1* %AF_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax

891 :   %464 = icmp slt i64 %460, 0 : NIL

892 :   store i1 %464, i1* %SF_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
893 :   %465 = icmp eq i64 %460, 0, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
894 :   store i1 %465, i1* %ZF_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
895 :   %466 = xor i64 %459, -9223372036854775808, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
896 :   %467 = and i64 %461, %466, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax

897 :   %468 = icmp slt i64 %467, 0 : NIL

898 :   store i1 %468, i1* %OF_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
899 :   %469 = trunc i64 %460 to i8, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
900 :   %470 = tail call i8 @llvm.ctpop.i8(i8 %469), !mcsema_real_eip !75 :          <fa>	addq	$5, %rax

901 :   %471 = and i8 %470, 1 : NIL
902 :   %472 = icmp eq i8 %471, 0 : NIL

903 :   store i1 %472, i1* %PF_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax

904 :   %473 = extractvalue { i64, i1 } %uadd213, 1 : NIL

905 :   store i1 %473, i1* %CF_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax
906 :   store i64 %460, i64* %RAX_val, !mcsema_real_eip !75 :          <fa>	addq	$5, %rax

907 :   %474 = inttoptr i64 %460 to i64*, !mcsema_real_eip !76 :          <fe>	movzbl	(%rax), %eax

908 :   %475 = bitcast i64* %474 to i8* : NIL

909 :   %476 = load i8* %475, !mcsema_real_eip !76 :          <fe>	movzbl	(%rax), %eax

910 :   %477 = zext i8 %476 to i32 : NIL

911 :   %478 = and i32 %477, 15, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
912 :   store i1 false, i1* %SF_val, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
913 :   %479 = icmp eq i32 %478, 0, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
914 :   store i1 %479, i1* %ZF_val, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
915 :   %480 = trunc i32 %478 to i8, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
916 :   %481 = tail call i8 @llvm.ctpop.i8(i8 %480), !mcsema_real_eip !77 :          <101>	andl	$15, %eax

917 :   %482 = and i8 %481, 1 : NIL
918 :   %483 = icmp eq i8 %482, 0 : NIL

919 :   store i1 %483, i1* %PF_val, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
920 :   store i1 false, i1* %OF_val, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
921 :   store i1 false, i1* %CF_val, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
922 :   %484 = zext i32 %478 to i64, !mcsema_real_eip !77 :          <101>	andl	$15, %eax
923 :   store i64 %484, i64* %RAX_val, !mcsema_real_eip !77 :          <101>	andl	$15, %eax

924 :   %485 = load i64* %RBP_val, !mcsema_real_eip !78 :          <104>	movb	%al, -33(%rbp)
925 :   %486 = add i64 %485, -33, !mcsema_real_eip !78 :          <104>	movb	%al, -33(%rbp)
926 :   %487 = inttoptr i64 %486 to i64*, !mcsema_real_eip !78 :          <104>	movb	%al, -33(%rbp)

927 :   %488 = bitcast i64* %487 to i8* : NIL

928 :   store i8 %480, i8* %488, !mcsema_real_eip !78 :          <104>	movb	%al, -33(%rbp)

929 :   %489 = load i64* %RBP_val, !mcsema_real_eip !79 :          <107>	movq	-72(%rbp), %rax
930 :   %490 = add i64 %489, -72, !mcsema_real_eip !79 :          <107>	movq	-72(%rbp), %rax
931 :   %491 = inttoptr i64 %490 to i64*, !mcsema_real_eip !79 :          <107>	movq	-72(%rbp), %rax
932 :   %492 = load i64* %491, !mcsema_real_eip !79 :          <107>	movq	-72(%rbp), %rax

933 :   %uadd214 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %492, i64 5) : NIL
934 :   %493 = extractvalue { i64, i1 } %uadd214, 0 : NIL

935 :   %494 = xor i64 %493, %492, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
936 :   %495 = and i64 %494, 16, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
937 :   %496 = icmp ne i64 %495, 0, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
938 :   store i1 %496, i1* %AF_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax

939 :   %497 = icmp slt i64 %493, 0 : NIL

940 :   store i1 %497, i1* %SF_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
941 :   %498 = icmp eq i64 %493, 0, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
942 :   store i1 %498, i1* %ZF_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
943 :   %499 = xor i64 %492, -9223372036854775808, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
944 :   %500 = and i64 %494, %499, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax

945 :   %501 = icmp slt i64 %500, 0 : NIL

946 :   store i1 %501, i1* %OF_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
947 :   %502 = trunc i64 %493 to i8, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
948 :   %503 = tail call i8 @llvm.ctpop.i8(i8 %502), !mcsema_real_eip !80 :          <10b>	addq	$5, %rax

949 :   %504 = and i8 %503, 1 : NIL
950 :   %505 = icmp eq i8 %504, 0 : NIL

951 :   store i1 %505, i1* %PF_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax

952 :   %506 = extractvalue { i64, i1 } %uadd214, 1 : NIL

953 :   store i1 %506, i1* %CF_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax
954 :   store i64 %493, i64* %RAX_val, !mcsema_real_eip !80 :          <10b>	addq	$5, %rax

955 :   %507 = inttoptr i64 %493 to i64*, !mcsema_real_eip !81 :          <10f>	movzbl	(%rax), %eax

956 :   %508 = bitcast i64* %507 to i8* : NIL

957 :   %509 = load i8* %508, !mcsema_real_eip !81 :          <10f>	movzbl	(%rax), %eax

958 :   %510 = zext i8 %509 to i32 : NIL

959 :   %511 = and i32 %510, 240, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
960 :   store i1 false, i1* %SF_val, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
961 :   %512 = icmp eq i32 %511, 0, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
962 :   store i1 %512, i1* %ZF_val, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
963 :   %513 = trunc i32 %511 to i8, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
964 :   %514 = tail call i8 @llvm.ctpop.i8(i8 %513), !mcsema_real_eip !82 :          <112>	andl	$-16, %eax

965 :   %515 = and i8 %514, 1 : NIL
966 :   %516 = icmp eq i8 %515, 0 : NIL

967 :   store i1 %516, i1* %PF_val, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
968 :   store i1 false, i1* %OF_val, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
969 :   store i1 false, i1* %CF_val, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
970 :   %517 = zext i32 %511 to i64, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax
971 :   store i64 %517, i64* %RAX_val, !mcsema_real_eip !82 :          <112>	andl	$-16, %eax

972 :   %518 = load i64* %RBP_val, !mcsema_real_eip !83 :          <115>	movb	%al, -34(%rbp)
973 :   %519 = add i64 %518, -34, !mcsema_real_eip !83 :          <115>	movb	%al, -34(%rbp)
974 :   %520 = inttoptr i64 %519 to i64*, !mcsema_real_eip !83 :          <115>	movb	%al, -34(%rbp)

975 :   %521 = bitcast i64* %520 to i8* : NIL

976 :   store i8 %513, i8* %521, !mcsema_real_eip !83 :          <115>	movb	%al, -34(%rbp)

977 :   %522 = load i64* %RBP_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
978 :   %523 = add i64 %522, -33, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
979 :   %524 = inttoptr i64 %523 to i64*, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)

980 :   %525 = bitcast i64* %524 to i8* : NIL

981 :   %526 = load i8* %525, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)

982 :   %527 = add i8 %526, -3 : NIL

983 :   %528 = xor i8 %527, %526, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
984 :   %529 = and i8 %528, 16, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
985 :   %530 = icmp ne i8 %529, 0, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
986 :   store i1 %530, i1* %AF_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
987 :   %531 = tail call i8 @llvm.ctpop.i8(i8 %527), !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)

988 :   %532 = and i8 %531, 1 : NIL
989 :   %533 = icmp eq i8 %532, 0 : NIL

990 :   store i1 %533, i1* %PF_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
991 :   %534 = icmp eq i8 %527, 0, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
992 :   store i1 %534, i1* %ZF_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)

993 :   %535 = icmp slt i8 %527, 0 : NIL

994 :   store i1 %535, i1* %SF_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
995 :   %536 = icmp ult i8 %526, 3, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
996 :   store i1 %536, i1* %CF_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)
997 :   %537 = and i8 %528, %526, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)

998 :   %538 = icmp slt i8 %537, 0 : NIL

999 :   store i1 %538, i1* %OF_val, !mcsema_real_eip !84 :          <118>	cmpb	$3, -33(%rbp)

1000 :   %539 = load i1* %ZF_val, !mcsema_real_eip !85 :          <11c>	je	12
1001 :   br i1 %539, label %block_0x12a, label %block_0x136, !mcsema_real_eip !85 :          <11c>	je	12

1002 :   %540 = load i64* %RBP_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1003 :   %541 = add i64 %540, -34, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1004 :   %542 = inttoptr i64 %541 to i64*, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)

1005 :   %543 = bitcast i64* %542 to i8* : NIL

1006 :   %544 = load i8* %543, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)

1007 :   %545 = add i8 %544, -96 : NIL

1008 :   %546 = xor i8 %545, %544, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1009 :   %547 = and i8 %546, 16, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1010 :   %548 = icmp ne i8 %547, 0, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1011 :   store i1 %548, i1* %AF_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1012 :   %549 = tail call i8 @llvm.ctpop.i8(i8 %545), !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)

1013 :   %550 = and i8 %549, 1 : NIL
1014 :   %551 = icmp eq i8 %550, 0 : NIL

1015 :   store i1 %551, i1* %PF_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1016 :   %552 = icmp eq i8 %545, 0, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1017 :   store i1 %552, i1* %ZF_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)

1018 :   %553 = icmp slt i8 %545, 0 : NIL

1019 :   store i1 %553, i1* %SF_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1020 :   %554 = icmp ult i8 %544, 96, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1021 :   store i1 %554, i1* %CF_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)
1022 :   %555 = and i8 %546, %544, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)

1023 :   %556 = icmp slt i8 %555, 0 : NIL

1024 :   store i1 %556, i1* %OF_val, !mcsema_real_eip !86 :          <12a>	cmpb	$96, -34(%rbp)

1025 :   %557 = load i1* %ZF_val, !mcsema_real_eip !87 :          <12e>	jne	6
1026 :   br i1 %557, label %block_0x130, label %block_0x136, !mcsema_real_eip !87 :          <12e>	jne	6

1027 :   %558 = load i64* %RBP_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1028 :   %559 = add i64 %558, -20, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1029 :   %560 = inttoptr i64 %559 to i64*, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1030 :   %561 = bitcast i64* %560 to i32* : NIL

1031 :   %562 = load i32* %561, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1032 :   %uadd215 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %562, i32 5) : NIL
1033 :   %563 = extractvalue { i32, i1 } %uadd215, 0 : NIL

1034 :   %564 = xor i32 %563, %562, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1035 :   %565 = and i32 %564, 16, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1036 :   %566 = icmp ne i32 %565, 0, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1037 :   store i1 %566, i1* %AF_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1038 :   %567 = icmp slt i32 %563, 0 : NIL

1039 :   store i1 %567, i1* %SF_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1040 :   %568 = icmp eq i32 %563, 0, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1041 :   store i1 %568, i1* %ZF_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1042 :   %569 = xor i32 %562, -2147483648, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1043 :   %570 = and i32 %564, %569, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1044 :   %571 = icmp slt i32 %570, 0 : NIL

1045 :   store i1 %571, i1* %OF_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1046 :   %572 = trunc i32 %563 to i8, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1047 :   %573 = tail call i8 @llvm.ctpop.i8(i8 %572), !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1048 :   %574 = and i8 %573, 1 : NIL
1049 :   %575 = icmp eq i8 %574, 0 : NIL

1050 :   store i1 %575, i1* %PF_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1051 :   %576 = extractvalue { i32, i1 } %uadd215, 1 : NIL

1052 :   store i1 %576, i1* %CF_val, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)
1053 :   store i32 %563, i32* %561, !mcsema_real_eip !88 :          <136>	addl	$5, -20(%rbp)

1054 :   %577 = load i64* %RBP_val, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax
1055 :   %578 = add i64 %577, -72, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax
1056 :   %579 = inttoptr i64 %578 to i64*, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax
1057 :   %580 = load i64* %579, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax

1058 :   %uadd216 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %580, i64 6) : NIL
1059 :   %581 = extractvalue { i64, i1 } %uadd216, 0 : NIL

1060 :   %582 = xor i64 %581, %580, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1061 :   %583 = and i64 %582, 16, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1062 :   %584 = icmp ne i64 %583, 0, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1063 :   store i1 %584, i1* %AF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1064 :   %585 = icmp slt i64 %581, 0 : NIL

1065 :   store i1 %585, i1* %SF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1066 :   %586 = icmp eq i64 %581, 0, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1067 :   store i1 %586, i1* %ZF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1068 :   %587 = xor i64 %580, -9223372036854775808, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1069 :   %588 = and i64 %582, %587, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1070 :   %589 = icmp slt i64 %588, 0 : NIL

1071 :   store i1 %589, i1* %OF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1072 :   %590 = trunc i64 %581 to i8, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1073 :   %591 = tail call i8 @llvm.ctpop.i8(i8 %590), !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1074 :   %592 = and i8 %591, 1 : NIL
1075 :   %593 = icmp eq i8 %592, 0 : NIL

1076 :   store i1 %593, i1* %PF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1077 :   %594 = extractvalue { i64, i1 } %uadd216, 1 : NIL

1078 :   store i1 %594, i1* %CF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1079 :   store i64 %581, i64* %RAX_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1080 :   %595 = inttoptr i64 %581 to i64*, !mcsema_real_eip !91 :          <142>	movzbl	(%rax), %eax

1081 :   %596 = bitcast i64* %595 to i8* : NIL

1082 :   %597 = load i8* %596, !mcsema_real_eip !91 :          <142>	movzbl	(%rax), %eax

1083 :   %598 = zext i8 %597 to i64 : NIL

1084 :   store i64 %598, i64* %RDI_val, !mcsema_real_eip !92 :          <148>	movl	%eax, %edi

1085 :   %599 = tail call x86_64_sysvcc i64 @to_byte(i64 %598), !mcsema_real_eip !93 :          <14a>	callq	0
1086 :   store i64 %599, i64* %RAX_val, !mcsema_real_eip !93 :          <14a>	callq	0

1087 :   %600 = load i64* %RBP_val, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)
1088 :   %601 = add i64 %600, -35, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)
1089 :   %602 = inttoptr i64 %601 to i64*, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)
1090 :   %603 = trunc i64 %599 to i8, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)

1091 :   %604 = bitcast i64* %602 to i8* : NIL

1092 :   store i8 %603, i8* %604, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)

1093 :   %605 = load i64* %RBP_val, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax
1094 :   %606 = add i64 %605, -72, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax
1095 :   %607 = inttoptr i64 %606 to i64*, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax
1096 :   %608 = load i64* %607, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax

1097 :   %uadd217 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %608, i64 7) : NIL
1098 :   %609 = extractvalue { i64, i1 } %uadd217, 0 : NIL

1099 :   %610 = xor i64 %609, %608, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1100 :   %611 = and i64 %610, 16, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1101 :   %612 = icmp ne i64 %611, 0, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1102 :   store i1 %612, i1* %AF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1103 :   %613 = icmp slt i64 %609, 0 : NIL

1104 :   store i1 %613, i1* %SF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1105 :   %614 = icmp eq i64 %609, 0, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1106 :   store i1 %614, i1* %ZF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1107 :   %615 = xor i64 %608, -9223372036854775808, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1108 :   %616 = and i64 %610, %615, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1109 :   %617 = icmp slt i64 %616, 0 : NIL

1110 :   store i1 %617, i1* %OF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1111 :   %618 = trunc i64 %609 to i8, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1112 :   %619 = tail call i8 @llvm.ctpop.i8(i8 %618), !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1113 :   %620 = and i8 %619, 1 : NIL
1114 :   %621 = icmp eq i8 %620, 0 : NIL

1115 :   store i1 %621, i1* %PF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1116 :   %622 = extractvalue { i64, i1 } %uadd217, 1 : NIL

1117 :   store i1 %622, i1* %CF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1118 :   store i64 %609, i64* %RAX_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1119 :   %623 = inttoptr i64 %609 to i64*, !mcsema_real_eip !97 :          <15a>	movzbl	(%rax), %eax

1120 :   %624 = bitcast i64* %623 to i8* : NIL

1121 :   %625 = load i8* %624, !mcsema_real_eip !97 :          <15a>	movzbl	(%rax), %eax

1122 :   %626 = zext i8 %625 to i64 : NIL

1123 :   store i64 %626, i64* %RDI_val, !mcsema_real_eip !98 :          <160>	movl	%eax, %edi

1124 :   %627 = tail call x86_64_sysvcc i64 @to_byte(i64 %626), !mcsema_real_eip !99 :          <162>	callq	0
1125 :   store i64 %627, i64* %RAX_val, !mcsema_real_eip !99 :          <162>	callq	0

1126 :   %628 = load i64* %RBP_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1127 :   %629 = add i64 %628, -35, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1128 :   %630 = inttoptr i64 %629 to i64*, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1129 :   %631 = bitcast i64* %630 to i8* : NIL

1130 :   %632 = load i8* %631, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1131 :   %633 = trunc i64 %627 to i8, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1132 :   %634 = or i8 %632, %633, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1133 :   store i1 false, i1* %OF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1134 :   store i1 false, i1* %CF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1135 :   %635 = icmp slt i8 %634, 0 : NIL

1136 :   store i1 %635, i1* %SF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1137 :   %636 = icmp eq i8 %634, 0, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1138 :   store i1 %636, i1* %ZF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1139 :   %637 = tail call i8 @llvm.ctpop.i8(i8 %634), !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1140 :   %638 = and i8 %637, 1 : NIL
1141 :   %639 = icmp eq i8 %638, 0 : NIL

1142 :   store i1 %639, i1* %PF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1143 :   store i8 %634, i8* %631, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1144 :   %640 = load i64* %RBP_val, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax
1145 :   %641 = add i64 %640, -35, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax
1146 :   %642 = inttoptr i64 %641 to i64*, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax

1147 :   %643 = bitcast i64* %642 to i8* : NIL

1148 :   %644 = load i8* %643, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax

1149 :   %645 = zext i8 %644 to i64 : NIL

1150 :   store i64 %645, i64* %RAX_val, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax

1151 :   %646 = zext i8 %644 to i32 : NIL
1152 :   %647 = add nuw nsw i32 %646, 71 : NIL

1153 :   %648 = xor i32 %647, %646, !mcsema_real_eip !102 :          <16e>	cmpl	$-71, %eax

1154 :   br label %block_0x179 : NIL

1155 :   %649 = load i64* %RBP_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1156 :   %650 = add i64 %649, -20, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1157 :   %651 = inttoptr i64 %650 to i64*, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1158 :   %652 = bitcast i64* %651 to i32* : NIL

1159 :   %653 = load i32* %652, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1160 :   %uadd233 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %653, i32 4) : NIL
1161 :   %654 = extractvalue { i32, i1 } %uadd233, 0 : NIL

1162 :   %655 = xor i32 %654, %653, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1163 :   %656 = and i32 %655, 16, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1164 :   %657 = icmp ne i32 %656, 0, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1165 :   store i1 %657, i1* %AF_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1166 :   %658 = icmp slt i32 %654, 0 : NIL

1167 :   store i1 %658, i1* %SF_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1168 :   %659 = icmp eq i32 %654, 0, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1169 :   store i1 %659, i1* %ZF_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1170 :   %660 = xor i32 %653, -2147483648, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1171 :   %661 = and i32 %655, %660, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1172 :   %662 = icmp slt i32 %661, 0 : NIL

1173 :   store i1 %662, i1* %OF_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1174 :   %663 = trunc i32 %654 to i8, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1175 :   %664 = tail call i8 @llvm.ctpop.i8(i8 %663), !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1176 :   %665 = and i8 %664, 1 : NIL
1177 :   %666 = icmp eq i8 %665, 0 : NIL

1178 :   store i1 %666, i1* %PF_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1179 :   %667 = extractvalue { i32, i1 } %uadd233, 1 : NIL

1180 :   store i1 %667, i1* %CF_val, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)
1181 :   store i32 %654, i32* %652, !mcsema_real_eip !103 :          <130>	addl	$4, -20(%rbp)

1182 :   %668 = load i64* %RBP_val, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax
1183 :   %669 = add i64 %668, -72, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax
1184 :   %670 = inttoptr i64 %669 to i64*, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax
1185 :   %671 = load i64* %670, !mcsema_real_eip !89 :          <13a>	movq	-72(%rbp), %rax

1186 :   %uadd234 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %671, i64 6) : NIL
1187 :   %672 = extractvalue { i64, i1 } %uadd234, 0 : NIL

1188 :   %673 = xor i64 %672, %671, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1189 :   %674 = and i64 %673, 16, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1190 :   %675 = icmp ne i64 %674, 0, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1191 :   store i1 %675, i1* %AF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1192 :   %676 = icmp slt i64 %672, 0 : NIL

1193 :   store i1 %676, i1* %SF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1194 :   %677 = icmp eq i64 %672, 0, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1195 :   store i1 %677, i1* %ZF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1196 :   %678 = xor i64 %671, -9223372036854775808, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1197 :   %679 = and i64 %673, %678, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1198 :   %680 = icmp slt i64 %679, 0 : NIL

1199 :   store i1 %680, i1* %OF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1200 :   %681 = trunc i64 %672 to i8, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1201 :   %682 = tail call i8 @llvm.ctpop.i8(i8 %681), !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1202 :   %683 = and i8 %682, 1 : NIL
1203 :   %684 = icmp eq i8 %683, 0 : NIL

1204 :   store i1 %684, i1* %PF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1205 :   %685 = extractvalue { i64, i1 } %uadd234, 1 : NIL

1206 :   store i1 %685, i1* %CF_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax
1207 :   store i64 %672, i64* %RAX_val, !mcsema_real_eip !90 :          <13e>	addq	$6, %rax

1208 :   %686 = inttoptr i64 %672 to i64*, !mcsema_real_eip !91 :          <142>	movzbl	(%rax), %eax

1209 :   %687 = bitcast i64* %686 to i8* : NIL

1210 :   %688 = load i8* %687, !mcsema_real_eip !91 :          <142>	movzbl	(%rax), %eax

1211 :   %689 = zext i8 %688 to i64 : NIL

1212 :   store i64 %689, i64* %RDI_val, !mcsema_real_eip !92 :          <148>	movl	%eax, %edi

1213 :   %690 = tail call x86_64_sysvcc i64 @to_byte(i64 %689), !mcsema_real_eip !93 :          <14a>	callq	0
1214 :   store i64 %690, i64* %RAX_val, !mcsema_real_eip !93 :          <14a>	callq	0

1215 :   %691 = load i64* %RBP_val, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)
1216 :   %692 = add i64 %691, -35, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)
1217 :   %693 = inttoptr i64 %692 to i64*, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)
1218 :   %694 = trunc i64 %690 to i8, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)

1219 :   %695 = bitcast i64* %693 to i8* : NIL

1220 :   store i8 %694, i8* %695, !mcsema_real_eip !94 :          <14f>	movb	%al, -35(%rbp)

1221 :   %696 = load i64* %RBP_val, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax
1222 :   %697 = add i64 %696, -72, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax
1223 :   %698 = inttoptr i64 %697 to i64*, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax
1224 :   %699 = load i64* %698, !mcsema_real_eip !95 :          <152>	movq	-72(%rbp), %rax

1225 :   %uadd235 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %699, i64 7) : NIL
1226 :   %700 = extractvalue { i64, i1 } %uadd235, 0 : NIL

1227 :   %701 = xor i64 %700, %699, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1228 :   %702 = and i64 %701, 16, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1229 :   %703 = icmp ne i64 %702, 0, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1230 :   store i1 %703, i1* %AF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1231 :   %704 = icmp slt i64 %700, 0 : NIL

1232 :   store i1 %704, i1* %SF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1233 :   %705 = icmp eq i64 %700, 0, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1234 :   store i1 %705, i1* %ZF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1235 :   %706 = xor i64 %699, -9223372036854775808, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1236 :   %707 = and i64 %701, %706, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1237 :   %708 = icmp slt i64 %707, 0 : NIL

1238 :   store i1 %708, i1* %OF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1239 :   %709 = trunc i64 %700 to i8, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1240 :   %710 = tail call i8 @llvm.ctpop.i8(i8 %709), !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1241 :   %711 = and i8 %710, 1 : NIL
1242 :   %712 = icmp eq i8 %711, 0 : NIL

1243 :   store i1 %712, i1* %PF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1244 :   %713 = extractvalue { i64, i1 } %uadd235, 1 : NIL

1245 :   store i1 %713, i1* %CF_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax
1246 :   store i64 %700, i64* %RAX_val, !mcsema_real_eip !96 :          <156>	addq	$7, %rax

1247 :   %714 = inttoptr i64 %700 to i64*, !mcsema_real_eip !97 :          <15a>	movzbl	(%rax), %eax

1248 :   %715 = bitcast i64* %714 to i8* : NIL

1249 :   %716 = load i8* %715, !mcsema_real_eip !97 :          <15a>	movzbl	(%rax), %eax

1250 :   %717 = zext i8 %716 to i64 : NIL

1251 :   store i64 %717, i64* %RDI_val, !mcsema_real_eip !98 :          <160>	movl	%eax, %edi

1252 :   %718 = tail call x86_64_sysvcc i64 @to_byte(i64 %717), !mcsema_real_eip !99 :          <162>	callq	0
1253 :   store i64 %718, i64* %RAX_val, !mcsema_real_eip !99 :          <162>	callq	0

1254 :   %719 = load i64* %RBP_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1255 :   %720 = add i64 %719, -35, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1256 :   %721 = inttoptr i64 %720 to i64*, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1257 :   %722 = bitcast i64* %721 to i8* : NIL

1258 :   %723 = load i8* %722, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1259 :   %724 = trunc i64 %718 to i8, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1260 :   %725 = or i8 %723, %724, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1261 :   store i1 false, i1* %OF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1262 :   store i1 false, i1* %CF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1263 :   %726 = icmp slt i8 %725, 0 : NIL

1264 :   store i1 %726, i1* %SF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1265 :   %727 = icmp eq i8 %725, 0, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1266 :   store i1 %727, i1* %ZF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1267 :   %728 = tail call i8 @llvm.ctpop.i8(i8 %725), !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1268 :   %729 = and i8 %728, 1 : NIL
1269 :   %730 = icmp eq i8 %729, 0 : NIL

1270 :   store i1 %730, i1* %PF_val, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)
1271 :   store i8 %725, i8* %722, !mcsema_real_eip !100 :          <167>	orb	%al, -35(%rbp)

1272 :   %731 = load i64* %RBP_val, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax
1273 :   %732 = add i64 %731, -35, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax
1274 :   %733 = inttoptr i64 %732 to i64*, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax

1275 :   %734 = bitcast i64* %733 to i8* : NIL

1276 :   %735 = load i8* %734, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax

1277 :   %736 = zext i8 %735 to i64 : NIL

1278 :   store i64 %736, i64* %RAX_val, !mcsema_real_eip !101 :          <16a>	movzbl	-35(%rbp), %eax

1279 :   %737 = zext i8 %735 to i32 : NIL
1280 :   %738 = add nuw nsw i32 %737, 71 : NIL

1281 :   %739 = xor i32 %738, %737, !mcsema_real_eip !102 :          <16e>	cmpl	$-71, %eax

1282 :   br label %block_0x179 : NIL
1283 :   %storemerge237.in.in = phi i32 [ %648, %block_0x136 ], [ %739, %block_0x130 ] : NIL
1284 :   %.sink236 = phi i32 [ %647, %block_0x136 ], [ %738, %block_0x130 ] : NIL
1285 :   %storemerge237.in = and i32 %storemerge237.in.in, 16 : NIL
1286 :   %storemerge237 = icmp eq i32 %storemerge237.in, 0 : NIL
1287 :   store i1 %storemerge237, i1* %AF_val : NIL

1288 :   %740 = trunc i32 %.sink236 to i8, !mcsema_real_eip !102 :          <16e>	cmpl	$-71, %eax
1289 :   %741 = tail call i8 @llvm.ctpop.i8(i8 %740), !mcsema_real_eip !102 :          <16e>	cmpl	$-71, %eax

1290 :   %storemerge.in = and i8 %741, 1 : NIL
1291 :   %storemerge = icmp eq i8 %storemerge.in, 0 : NIL
1292 :   store i1 %storemerge, i1* %PF_val : NIL
1293 :   store i1 false, i1* %ZF_val : NIL
1294 :   store i1 false, i1* %SF_val : NIL
1295 :   store i1 true, i1* %CF_val : NIL
1296 :   store i1 false, i1* %OF_val : NIL

1297 :   %742 = load i64* %RBP_val, !mcsema_real_eip !104 :          <179>	movl	-20(%rbp), %eax
1298 :   %743 = add i64 %742, -20, !mcsema_real_eip !104 :          <179>	movl	-20(%rbp), %eax
1299 :   %744 = inttoptr i64 %743 to i64*, !mcsema_real_eip !104 :          <179>	movl	-20(%rbp), %eax

1300 :   %745 = bitcast i64* %744 to i32* : NIL

1301 :   %746 = load i32* %745, !mcsema_real_eip !104 :          <179>	movl	-20(%rbp), %eax
1302 :   %747 = zext i32 %746 to i64, !mcsema_real_eip !104 :          <179>	movl	-20(%rbp), %eax
1303 :   store i64 %747, i64* %RAX_val, !mcsema_real_eip !104 :          <179>	movl	-20(%rbp), %eax

1304 :   store i64 %747, i64* %RCX_val, !mcsema_real_eip !105 :          <17c>	movl	%eax, %ecx

1305 :   %748 = load i64* %RBP_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1306 :   %749 = add i64 %748, -20, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1307 :   %750 = inttoptr i64 %749 to i64*, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1308 :   %751 = bitcast i64* %750 to i32* : NIL

1309 :   %752 = load i32* %751, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1310 :   %753 = and i32 %746, 31, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1311 :   %754 = add i32 %746, -1 : NIL

1312 :   %755 = icmp ne i32 %753, 0, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1313 :   %756 = select i1 %755, i32 %754, i32 0, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1314 :   %757 = zext i1 %755 to i32 : NIL

1315 :   %758 = shl i32 %752, %756, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1316 :   %759 = icmp slt i32 %758, 0 : NIL

1317 :   %760 = load i1* %CF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1318 :   %761 = select i1 %755, i1 %759, i1 %760, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1319 :   %762 = shl i32 %758, %757, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1320 :   %763 = icmp eq i32 %753, 1, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1321 :   %764 = load i1* %OF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1322 :   %765 = icmp slt i32 %762, 0 : NIL

1323 :   %766 = xor i1 %765, %761, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1324 :   %767 = select i1 %763, i1 %766, i1 %764, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1325 :   store i1 %767, i1* %OF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1326 :   store i1 %761, i1* %CF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1327 :   %768 = load i1* %ZF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1328 :   %769 = icmp eq i32 %762, 0, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1329 :   %770 = select i1 %755, i1 %769, i1 %768, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1330 :   store i1 %770, i1* %ZF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1331 :   %771 = load i1* %SF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1332 :   %772 = select i1 %755, i1 %765, i1 %771, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1333 :   store i1 %772, i1* %SF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1334 :   %773 = load i1* %PF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1335 :   %774 = trunc i32 %762 to i8, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1336 :   %775 = tail call i8 @llvm.ctpop.i8(i8 %774), !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1337 :   %776 = and i8 %775, 1 : NIL
1338 :   %777 = icmp eq i8 %776, 0 : NIL

1339 :   %778 = select i1 %755, i1 %777, i1 %773, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1340 :   store i1 %778, i1* %PF_val, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)
1341 :   store i32 %762, i32* %751, !mcsema_real_eip !106 :          <17e>	shll	%cl, -20(%rbp)

1342 :   %779 = load i64* %RBP_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1343 :   %780 = add i64 %779, -20, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1344 :   %781 = inttoptr i64 %780 to i64*, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)

1345 :   %782 = bitcast i64* %781 to i32* : NIL

1346 :   %783 = load i32* %782, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1347 :   store i1 false, i1* %AF_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1348 :   %784 = trunc i32 %783 to i8, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1349 :   %785 = tail call i8 @llvm.ctpop.i8(i8 %784), !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)

1350 :   %786 = and i8 %785, 1 : NIL
1351 :   %787 = icmp eq i8 %786, 0 : NIL

1352 :   store i1 %787, i1* %PF_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1353 :   %788 = icmp eq i32 %783, 0, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1354 :   store i1 %788, i1* %ZF_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)

1355 :   %789 = icmp slt i32 %783, 0 : NIL

1356 :   store i1 %789, i1* %SF_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1357 :   store i1 false, i1* %CF_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)
1358 :   store i1 false, i1* %OF_val, !mcsema_real_eip !107 :          <181>	cmpl	$0, -20(%rbp)

1359 :   br i1 %788, label %block_0x191, label %block_0x187, !mcsema_real_eip !108 :          <185>	je	10

1360 :   %790 = load i64* %RBP_val, !mcsema_real_eip !109 :          <191>	movq	-72(%rbp), %rax
1361 :   %791 = add i64 %790, -72, !mcsema_real_eip !109 :          <191>	movq	-72(%rbp), %rax
1362 :   %792 = inttoptr i64 %791 to i64*, !mcsema_real_eip !109 :          <191>	movq	-72(%rbp), %rax
1363 :   %793 = load i64* %792, !mcsema_real_eip !109 :          <191>	movq	-72(%rbp), %rax

1364 :   %uadd218 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %793, i64 8) : NIL
1365 :   %794 = extractvalue { i64, i1 } %uadd218, 0 : NIL

1366 :   %795 = xor i64 %794, %793, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1367 :   %796 = and i64 %795, 16, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1368 :   %797 = icmp ne i64 %796, 0, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1369 :   store i1 %797, i1* %AF_val, !mcsema_real_eip !110 :          <195>	addq	$8, %rax

1370 :   %798 = icmp slt i64 %794, 0 : NIL

1371 :   store i1 %798, i1* %SF_val, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1372 :   %799 = icmp eq i64 %794, 0, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1373 :   store i1 %799, i1* %ZF_val, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1374 :   %800 = xor i64 %793, -9223372036854775808, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1375 :   %801 = and i64 %795, %800, !mcsema_real_eip !110 :          <195>	addq	$8, %rax

1376 :   %802 = icmp slt i64 %801, 0 : NIL

1377 :   store i1 %802, i1* %OF_val, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1378 :   %803 = trunc i64 %794 to i8, !mcsema_real_eip !110 :          <195>	addq	$8, %rax
1379 :   %804 = tail call i8 @llvm.ctpop.i8(i8 %803), !mcsema_real_eip !110 :          <195>	addq	$8, %rax

1380 :   %805 = and i8 %804, 1 : NIL
1381 :   %806 = icmp eq i8 %805, 0 : NIL

1382 :   store i1 %806, i1* %PF_val, !mcsema_real_eip !110 :          <195>	addq	$8, %rax

1383 :   %807 = extractvalue { i64, i1 } %uadd218, 1 : NIL

1384 :   store i1 %807, i1* %CF_val, !mcsema_real_eip !110 :          <195>	addq	$8, %rax

1385 :   store i64 4, i64* %RDX_val, !mcsema_real_eip !111 :          <199>	movl	$4, %edx

1386 :   store i64 %794, i64* %RSI_val, !mcsema_real_eip !112 :          <19e>	movq	%rax, %rsi

1387 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !113 :          <1a1>	movl	$0, %edi

1388 :   %808 = tail call x86_64_sysvcc i64 @read_bytes(i64 0, i64 %794, i64 4), !mcsema_real_eip !114 :          <1a6>	callq	0
1389 :   store i64 %808, i64* %RAX_val, !mcsema_real_eip !114 :          <1a6>	callq	0

1390 :   %809 = load i64* %RBP_val, !mcsema_real_eip !115 :          <1ab>	movw	%ax, -38(%rbp)
1391 :   %810 = add i64 %809, -38, !mcsema_real_eip !115 :          <1ab>	movw	%ax, -38(%rbp)
1392 :   %811 = inttoptr i64 %810 to i64*, !mcsema_real_eip !115 :          <1ab>	movw	%ax, -38(%rbp)
1393 :   %812 = trunc i64 %808 to i16, !mcsema_real_eip !115 :          <1ab>	movw	%ax, -38(%rbp)

1394 :   %813 = bitcast i64* %811 to i16* : NIL

1395 :   store i16 %812, i16* %813, !mcsema_real_eip !115 :          <1ab>	movw	%ax, -38(%rbp)

1396 :   %814 = load i64* %RBP_val, !mcsema_real_eip !116 :          <1af>	movzwl	-38(%rbp), %eax
1397 :   %815 = add i64 %814, -38, !mcsema_real_eip !116 :          <1af>	movzwl	-38(%rbp), %eax
1398 :   %816 = inttoptr i64 %815 to i64*, !mcsema_real_eip !116 :          <1af>	movzwl	-38(%rbp), %eax

1399 :   %817 = bitcast i64* %816 to i16* : NIL

1400 :   %818 = load i16* %817, !mcsema_real_eip !116 :          <1af>	movzwl	-38(%rbp), %eax

1401 :   %819 = or i16 %818, 21845, !mcsema_real_eip !117 :          <1b3>	orw	$21845, %ax
1402 :   %820 = zext i16 %819 to i64, !mcsema_real_eip !117 :          <1b3>	orw	$21845, %ax
1403 :   store i64 %820, i64* %RAX_val, !mcsema_real_eip !117 :          <1b3>	orw	$21845, %ax

1404 :   %821 = add i16 %819, 8873 : NIL

1405 :   %822 = xor i16 %821, %819, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax

1406 :   %823 = and i16 %822, 16 : NIL
1407 :   %824 = icmp eq i16 %823, 0 : NIL

1408 :   store i1 %824, i1* %AF_val, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1409 :   %825 = trunc i16 %821 to i8, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1410 :   %826 = tail call i8 @llvm.ctpop.i8(i8 %825), !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax

1411 :   %827 = and i8 %826, 1 : NIL
1412 :   %828 = icmp eq i8 %827, 0 : NIL

1413 :   store i1 %828, i1* %PF_val, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1414 :   %829 = icmp eq i16 %821, 0, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1415 :   store i1 %829, i1* %ZF_val, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax

1416 :   %830 = icmp slt i16 %821, 0 : NIL

1417 :   store i1 %830, i1* %SF_val, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1418 :   %831 = icmp ult i16 %819, -8873, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1419 :   store i1 %831, i1* %CF_val, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1420 :   %832 = xor i16 %818, -32768, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax
1421 :   %833 = and i16 %822, %832, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax

1422 :   %834 = icmp slt i16 %833, 0 : NIL

1423 :   store i1 %834, i1* %OF_val, !mcsema_real_eip !118 :          <1b7>	cmpw	$56663, %ax

1424 :   %835 = load i1* %ZF_val, !mcsema_real_eip !119 :          <1bb>	jne	23
1425 :   br i1 %835, label %block_0x1bd, label %block_0x1d4, !mcsema_real_eip !119 :          <1bb>	jne	23

1426 :   store i64 4294967289, i64* %RAX_val, !mcsema_real_eip !120 :          <187>	movl	$4294967289, %eax

1427 :   br label %block_0x391, !mcsema_real_eip !121 :          <18c>	jmp	512

1428 :   %836 = load i64* %RBP_val, !mcsema_real_eip !122 :          <1d4>	movl	$48059, -20(%rbp)
1429 :   %837 = add i64 %836, -20, !mcsema_real_eip !122 :          <1d4>	movl	$48059, -20(%rbp)
1430 :   %838 = inttoptr i64 %837 to i64*, !mcsema_real_eip !122 :          <1d4>	movl	$48059, -20(%rbp)

1431 :   %839 = bitcast i64* %838 to i32* : NIL

1432 :   store i32 48059, i32* %839, !mcsema_real_eip !122 :          <1d4>	movl	$48059, -20(%rbp)

1433 :   %840 = load i64* %RBP_val, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax
1434 :   %841 = add i64 %840, -72, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax
1435 :   %842 = inttoptr i64 %841 to i64*, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax
1436 :   %843 = load i64* %842, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax

1437 :   %uadd232 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %843, i64 12) : NIL
1438 :   %844 = extractvalue { i64, i1 } %uadd232, 0 : NIL

1439 :   %845 = xor i64 %844, %843, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1440 :   %846 = and i64 %845, 16, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1441 :   %847 = icmp ne i64 %846, 0, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1442 :   store i1 %847, i1* %AF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1443 :   %848 = icmp slt i64 %844, 0 : NIL

1444 :   store i1 %848, i1* %SF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1445 :   %849 = icmp eq i64 %844, 0, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1446 :   store i1 %849, i1* %ZF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1447 :   %850 = xor i64 %843, -9223372036854775808, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1448 :   %851 = and i64 %845, %850, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1449 :   %852 = icmp slt i64 %851, 0 : NIL

1450 :   store i1 %852, i1* %OF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1451 :   %853 = trunc i64 %844 to i8, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1452 :   %854 = tail call i8 @llvm.ctpop.i8(i8 %853), !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1453 :   %855 = and i8 %854, 1 : NIL
1454 :   %856 = icmp eq i8 %855, 0 : NIL

1455 :   store i1 %856, i1* %PF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1456 :   %857 = extractvalue { i64, i1 } %uadd232, 1 : NIL

1457 :   store i1 %857, i1* %CF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1458 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !125 :          <1e3>	movl	$8, %edx

1459 :   store i64 %844, i64* %RSI_val, !mcsema_real_eip !126 :          <1e8>	movq	%rax, %rsi

1460 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !127 :          <1eb>	movl	$0, %edi

1461 :   %858 = tail call x86_64_sysvcc i64 @read_bytes(i64 0, i64 %844, i64 8), !mcsema_real_eip !128 :          <1f0>	callq	0
1462 :   store i64 %858, i64* %RAX_val, !mcsema_real_eip !128 :          <1f0>	callq	0

1463 :   %859 = load i64* %RBP_val, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)
1464 :   %860 = add i64 %859, -44, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)
1465 :   %861 = inttoptr i64 %860 to i64*, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)
1466 :   %862 = trunc i64 %858 to i32, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)

1467 :   %863 = bitcast i64* %861 to i32* : NIL

1468 :   store i32 %862, i32* %863, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)

1469 :   %864 = load i64* %RBP_val, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax
1470 :   %865 = add i64 %864, -44, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax
1471 :   %866 = inttoptr i64 %865 to i64*, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax

1472 :   %867 = bitcast i64* %866 to i32* : NIL

1473 :   %868 = load i32* %867, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax

1474 :   %869 = xor i32 %868, -1534560611, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1475 :   store i1 false, i1* %CF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1476 :   store i1 false, i1* %OF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1477 :   %870 = icmp sgt i32 %868, -1 : NIL

1478 :   store i1 %870, i1* %SF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1479 :   %871 = icmp eq i32 %868, -1534560611 : NIL

1480 :   store i1 %871, i1* %ZF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1481 :   %872 = trunc i32 %869 to i8, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1482 :   %873 = tail call i8 @llvm.ctpop.i8(i8 %872), !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1483 :   %874 = and i8 %873, 1 : NIL
1484 :   %875 = icmp eq i8 %874, 0 : NIL

1485 :   store i1 %875, i1* %PF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1486 :   %876 = zext i32 %869 to i64, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1487 :   store i64 %876, i64* %RAX_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1488 :   %877 = load i64* %RBP_val, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)
1489 :   %878 = add i64 %877, -48, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)
1490 :   %879 = inttoptr i64 %878 to i64*, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)

1491 :   %880 = bitcast i64* %879 to i32* : NIL

1492 :   store i32 %869, i32* %880, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)

1493 :   %881 = load i64* %RBP_val, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax
1494 :   %882 = add i64 %881, -48, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax
1495 :   %883 = inttoptr i64 %882 to i64*, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax

1496 :   %884 = bitcast i64* %883 to i32* : NIL

1497 :   %885 = load i32* %884, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax

1498 :   %886 = and i32 %885, 32768, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1499 :   %887 = icmp ne i32 %886, 0, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax

1500 :   %888 = lshr i32 %885, 16 : NIL

1501 :   store i1 %887, i1* %CF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1502 :   %889 = icmp eq i32 %888, 0, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1503 :   store i1 %889, i1* %ZF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1504 :   store i1 false, i1* %SF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1505 :   %890 = trunc i32 %888 to i8, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1506 :   %891 = tail call i8 @llvm.ctpop.i8(i8 %890), !mcsema_real_eip !134 :          <206>	shrl	$16, %eax

1507 :   %892 = and i8 %891, 1 : NIL
1508 :   %893 = icmp eq i8 %892, 0 : NIL

1509 :   store i1 %893, i1* %PF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1510 :   %894 = zext i32 %888 to i64, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1511 :   store i64 %894, i64* %RAX_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax

1512 :   %895 = load i64* %RBP_val, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)
1513 :   %896 = add i64 %895, -52, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)
1514 :   %897 = inttoptr i64 %896 to i64*, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)

1515 :   %898 = bitcast i64* %897 to i32* : NIL

1516 :   store i32 %888, i32* %898, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)

1517 :   %899 = load i64* %RBP_val, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax
1518 :   %900 = add i64 %899, -48, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax
1519 :   %901 = inttoptr i64 %900 to i64*, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax

1520 :   %902 = bitcast i64* %901 to i32* : NIL

1521 :   %903 = load i32* %902, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax

1522 :   %904 = and i32 %903, 65535 : NIL

1523 :   %905 = zext i32 %904 to i64, !mcsema_real_eip !137 :          <20f>	movzwl	%ax, %eax
1524 :   store i64 %905, i64* %RAX_val, !mcsema_real_eip !137 :          <20f>	movzwl	%ax, %eax

1525 :   %906 = load i64* %RBP_val, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)
1526 :   %907 = add i64 %906, -56, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)
1527 :   %908 = inttoptr i64 %907 to i64*, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)

1528 :   %909 = bitcast i64* %908 to i32* : NIL

1529 :   store i32 %904, i32* %909, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)

1530 :   %910 = load i64* %RBP_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1531 :   %911 = add i64 %910, -52, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1532 :   %912 = inttoptr i64 %911 to i64*, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1533 :   %913 = bitcast i64* %912 to i32* : NIL

1534 :   %914 = load i32* %913, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1535 :   %915 = add i32 %914, -20299 : NIL

1536 :   %916 = xor i32 %915, %914, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1537 :   %917 = and i32 %916, 16, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1538 :   %918 = icmp ne i32 %917, 0, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1539 :   store i1 %918, i1* %AF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1540 :   %919 = trunc i32 %915 to i8, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1541 :   %920 = tail call i8 @llvm.ctpop.i8(i8 %919), !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1542 :   %921 = and i8 %920, 1 : NIL
1543 :   %922 = icmp eq i8 %921, 0 : NIL

1544 :   store i1 %922, i1* %PF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1545 :   %923 = icmp eq i32 %915, 0, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1546 :   store i1 %923, i1* %ZF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1547 :   %924 = icmp slt i32 %915, 0 : NIL

1548 :   store i1 %924, i1* %SF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1549 :   %925 = icmp ult i32 %914, 20299, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1550 :   store i1 %925, i1* %CF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1551 :   %926 = and i32 %916, %914, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1552 :   %927 = icmp slt i32 %926, 0 : NIL

1553 :   store i1 %927, i1* %OF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1554 :   %928 = load i1* %ZF_val, !mcsema_real_eip !140 :          <21c>	jne	17
1555 :   br i1 %928, label %block_0x21e, label %block_0x22f, !mcsema_real_eip !140 :          <21c>	jne	17

1556 :   %929 = load i64* %RBP_val, !mcsema_real_eip !141 :          <1bd>	movzwl	-38(%rbp), %eax
1557 :   %930 = add i64 %929, -38, !mcsema_real_eip !141 :          <1bd>	movzwl	-38(%rbp), %eax
1558 :   %931 = inttoptr i64 %930 to i64*, !mcsema_real_eip !141 :          <1bd>	movzwl	-38(%rbp), %eax

1559 :   %932 = bitcast i64* %931 to i16* : NIL

1560 :   %933 = load i16* %932, !mcsema_real_eip !141 :          <1bd>	movzwl	-38(%rbp), %eax

1561 :   %934 = or i16 %933, -21846, !mcsema_real_eip !142 :          <1c1>	orw	$43690, %ax
1562 :   %935 = zext i16 %934 to i64, !mcsema_real_eip !142 :          <1c1>	orw	$43690, %ax
1563 :   store i64 %935, i64* %RAX_val, !mcsema_real_eip !142 :          <1c1>	orw	$43690, %ax

1564 :   %936 = add nsw i16 %934, 325 : NIL

1565 :   %937 = xor i16 %936, %933, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax

1566 :   %938 = and i16 %937, 16 : NIL
1567 :   %939 = icmp eq i16 %938, 0 : NIL

1568 :   store i1 %939, i1* %AF_val, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1569 :   %940 = trunc i16 %936 to i8, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1570 :   %941 = tail call i8 @llvm.ctpop.i8(i8 %940), !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax

1571 :   %942 = and i8 %941, 1 : NIL
1572 :   %943 = icmp eq i8 %942, 0 : NIL

1573 :   store i1 %943, i1* %PF_val, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1574 :   %944 = icmp eq i16 %936, 0, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1575 :   store i1 %944, i1* %ZF_val, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax

1576 :   %945 = icmp slt i16 %936, 0 : NIL

1577 :   store i1 %945, i1* %SF_val, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1578 :   %946 = icmp ult i16 %934, -325, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1579 :   store i1 %946, i1* %CF_val, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax
1580 :   store i1 false, i1* %OF_val, !mcsema_real_eip !143 :          <1c5>	cmpw	$65211, %ax

1581 :   br i1 %944, label %block_0x1cb, label %block_0x1d4, !mcsema_real_eip !144 :          <1c9>	jne	9

1582 :   %947 = load i64* %RBP_val, !mcsema_real_eip !145 :          <1cb>	movl	$43690, -20(%rbp)
1583 :   %948 = add i64 %947, -20, !mcsema_real_eip !145 :          <1cb>	movl	$43690, -20(%rbp)
1584 :   %949 = inttoptr i64 %948 to i64*, !mcsema_real_eip !145 :          <1cb>	movl	$43690, -20(%rbp)

1585 :   %950 = bitcast i64* %949 to i32* : NIL

1586 :   store i32 43690, i32* %950, !mcsema_real_eip !145 :          <1cb>	movl	$43690, -20(%rbp)

1587 :   %951 = load i64* %RBP_val, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax
1588 :   %952 = add i64 %951, -72, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax
1589 :   %953 = inttoptr i64 %952 to i64*, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax
1590 :   %954 = load i64* %953, !mcsema_real_eip !123 :          <1db>	movq	-72(%rbp), %rax

1591 :   %uadd219 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %954, i64 12) : NIL
1592 :   %955 = extractvalue { i64, i1 } %uadd219, 0 : NIL

1593 :   %956 = xor i64 %955, %954, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1594 :   %957 = and i64 %956, 16, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1595 :   %958 = icmp ne i64 %957, 0, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1596 :   store i1 %958, i1* %AF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1597 :   %959 = icmp slt i64 %955, 0 : NIL

1598 :   store i1 %959, i1* %SF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1599 :   %960 = icmp eq i64 %955, 0, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1600 :   store i1 %960, i1* %ZF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1601 :   %961 = xor i64 %954, -9223372036854775808, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1602 :   %962 = and i64 %956, %961, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1603 :   %963 = icmp slt i64 %962, 0 : NIL

1604 :   store i1 %963, i1* %OF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1605 :   %964 = trunc i64 %955 to i8, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax
1606 :   %965 = tail call i8 @llvm.ctpop.i8(i8 %964), !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1607 :   %966 = and i8 %965, 1 : NIL
1608 :   %967 = icmp eq i8 %966, 0 : NIL

1609 :   store i1 %967, i1* %PF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1610 :   %968 = extractvalue { i64, i1 } %uadd219, 1 : NIL

1611 :   store i1 %968, i1* %CF_val, !mcsema_real_eip !124 :          <1df>	addq	$12, %rax

1612 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !125 :          <1e3>	movl	$8, %edx

1613 :   store i64 %955, i64* %RSI_val, !mcsema_real_eip !126 :          <1e8>	movq	%rax, %rsi

1614 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !127 :          <1eb>	movl	$0, %edi

1615 :   %969 = tail call x86_64_sysvcc i64 @read_bytes(i64 0, i64 %955, i64 8), !mcsema_real_eip !128 :          <1f0>	callq	0
1616 :   store i64 %969, i64* %RAX_val, !mcsema_real_eip !128 :          <1f0>	callq	0

1617 :   %970 = load i64* %RBP_val, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)
1618 :   %971 = add i64 %970, -44, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)
1619 :   %972 = inttoptr i64 %971 to i64*, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)
1620 :   %973 = trunc i64 %969 to i32, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)

1621 :   %974 = bitcast i64* %972 to i32* : NIL

1622 :   store i32 %973, i32* %974, !mcsema_real_eip !129 :          <1f5>	movl	%eax, -44(%rbp)

1623 :   %975 = load i64* %RBP_val, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax
1624 :   %976 = add i64 %975, -44, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax
1625 :   %977 = inttoptr i64 %976 to i64*, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax

1626 :   %978 = bitcast i64* %977 to i32* : NIL

1627 :   %979 = load i32* %978, !mcsema_real_eip !130 :          <1f8>	movl	-44(%rbp), %eax

1628 :   %980 = xor i32 %979, -1534560611, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1629 :   store i1 false, i1* %CF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1630 :   store i1 false, i1* %OF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1631 :   %981 = icmp sgt i32 %979, -1 : NIL

1632 :   store i1 %981, i1* %SF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1633 :   %982 = icmp eq i32 %979, -1534560611 : NIL

1634 :   store i1 %982, i1* %ZF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1635 :   %983 = trunc i32 %980 to i8, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1636 :   %984 = tail call i8 @llvm.ctpop.i8(i8 %983), !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1637 :   %985 = and i8 %984, 1 : NIL
1638 :   %986 = icmp eq i8 %985, 0 : NIL

1639 :   store i1 %986, i1* %PF_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1640 :   %987 = zext i32 %980 to i64, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax
1641 :   store i64 %987, i64* %RAX_val, !mcsema_real_eip !131 :          <1fb>	xorl	$2760406685, %eax

1642 :   %988 = load i64* %RBP_val, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)
1643 :   %989 = add i64 %988, -48, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)
1644 :   %990 = inttoptr i64 %989 to i64*, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)

1645 :   %991 = bitcast i64* %990 to i32* : NIL

1646 :   store i32 %980, i32* %991, !mcsema_real_eip !132 :          <200>	movl	%eax, -48(%rbp)

1647 :   %992 = load i64* %RBP_val, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax
1648 :   %993 = add i64 %992, -48, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax
1649 :   %994 = inttoptr i64 %993 to i64*, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax

1650 :   %995 = bitcast i64* %994 to i32* : NIL

1651 :   %996 = load i32* %995, !mcsema_real_eip !133 :          <203>	movl	-48(%rbp), %eax

1652 :   %997 = and i32 %996, 32768, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1653 :   %998 = icmp ne i32 %997, 0, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax

1654 :   %999 = lshr i32 %996, 16 : NIL

1655 :   store i1 %998, i1* %CF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1656 :   %1000 = icmp eq i32 %999, 0, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1657 :   store i1 %1000, i1* %ZF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1658 :   store i1 false, i1* %SF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1659 :   %1001 = trunc i32 %999 to i8, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1660 :   %1002 = tail call i8 @llvm.ctpop.i8(i8 %1001), !mcsema_real_eip !134 :          <206>	shrl	$16, %eax

1661 :   %1003 = and i8 %1002, 1 : NIL
1662 :   %1004 = icmp eq i8 %1003, 0 : NIL

1663 :   store i1 %1004, i1* %PF_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1664 :   %1005 = zext i32 %999 to i64, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax
1665 :   store i64 %1005, i64* %RAX_val, !mcsema_real_eip !134 :          <206>	shrl	$16, %eax

1666 :   %1006 = load i64* %RBP_val, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)
1667 :   %1007 = add i64 %1006, -52, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)
1668 :   %1008 = inttoptr i64 %1007 to i64*, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)

1669 :   %1009 = bitcast i64* %1008 to i32* : NIL

1670 :   store i32 %999, i32* %1009, !mcsema_real_eip !135 :          <209>	movl	%eax, -52(%rbp)

1671 :   %1010 = load i64* %RBP_val, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax
1672 :   %1011 = add i64 %1010, -48, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax
1673 :   %1012 = inttoptr i64 %1011 to i64*, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax

1674 :   %1013 = bitcast i64* %1012 to i32* : NIL

1675 :   %1014 = load i32* %1013, !mcsema_real_eip !136 :          <20c>	movl	-48(%rbp), %eax

1676 :   %1015 = and i32 %1014, 65535 : NIL

1677 :   %1016 = zext i32 %1015 to i64, !mcsema_real_eip !137 :          <20f>	movzwl	%ax, %eax
1678 :   store i64 %1016, i64* %RAX_val, !mcsema_real_eip !137 :          <20f>	movzwl	%ax, %eax

1679 :   %1017 = load i64* %RBP_val, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)
1680 :   %1018 = add i64 %1017, -56, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)
1681 :   %1019 = inttoptr i64 %1018 to i64*, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)

1682 :   %1020 = bitcast i64* %1019 to i32* : NIL

1683 :   store i32 %1015, i32* %1020, !mcsema_real_eip !138 :          <212>	movl	%eax, -56(%rbp)

1684 :   %1021 = load i64* %RBP_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1685 :   %1022 = add i64 %1021, -52, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1686 :   %1023 = inttoptr i64 %1022 to i64*, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1687 :   %1024 = bitcast i64* %1023 to i32* : NIL

1688 :   %1025 = load i32* %1024, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1689 :   %1026 = add i32 %1025, -20299 : NIL

1690 :   %1027 = xor i32 %1026, %1025, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1691 :   %1028 = and i32 %1027, 16, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1692 :   %1029 = icmp ne i32 %1028, 0, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1693 :   store i1 %1029, i1* %AF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1694 :   %1030 = trunc i32 %1026 to i8, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1695 :   %1031 = tail call i8 @llvm.ctpop.i8(i8 %1030), !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1696 :   %1032 = and i8 %1031, 1 : NIL
1697 :   %1033 = icmp eq i8 %1032, 0 : NIL

1698 :   store i1 %1033, i1* %PF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1699 :   %1034 = icmp eq i32 %1026, 0, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1700 :   store i1 %1034, i1* %ZF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1701 :   %1035 = icmp slt i32 %1026, 0 : NIL

1702 :   store i1 %1035, i1* %SF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1703 :   %1036 = icmp ult i32 %1025, 20299, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1704 :   store i1 %1036, i1* %CF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)
1705 :   %1037 = and i32 %1027, %1025, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1706 :   %1038 = icmp slt i32 %1037, 0 : NIL

1707 :   store i1 %1038, i1* %OF_val, !mcsema_real_eip !139 :          <215>	cmpl	$20299, -52(%rbp)

1708 :   %1039 = load i1* %ZF_val, !mcsema_real_eip !140 :          <21c>	jne	17
1709 :   br i1 %1039, label %block_0x21e, label %block_0x22f, !mcsema_real_eip !140 :          <21c>	jne	17

1710 :   %1040 = load i64* %RBP_val, !mcsema_real_eip !146 :          <22f>	movl	$48351, -20(%rbp)
1711 :   %1041 = add i64 %1040, -20, !mcsema_real_eip !146 :          <22f>	movl	$48351, -20(%rbp)
1712 :   %1042 = inttoptr i64 %1041 to i64*, !mcsema_real_eip !146 :          <22f>	movl	$48351, -20(%rbp)

1713 :   %1043 = bitcast i64* %1042 to i32* : NIL

1714 :   store i32 48351, i32* %1043, !mcsema_real_eip !146 :          <22f>	movl	$48351, -20(%rbp)

1715 :   %1044 = load i64* %RBP_val, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1716 :   %1045 = add i64 %1044, -72, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1717 :   %1046 = inttoptr i64 %1045 to i64*, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1718 :   %1047 = load i64* %1046, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1719 :   store i64 %1047, i64* %RAX_val, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax

1720 :   %1048 = add i64 %1047, 20, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx
1721 :   %1049 = inttoptr i64 %1048 to i64*, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx
1722 :   %1050 = ptrtoint i64* %1049 to i64, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx
1723 :   store i64 %1050, i64* %RCX_val, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx

1724 :   %1051 = load i64* %RBP_val, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax
1725 :   %1052 = add i64 %1051, -20, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax
1726 :   %1053 = inttoptr i64 %1052 to i64*, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax

1727 :   %1054 = bitcast i64* %1053 to i32* : NIL

1728 :   %1055 = load i32* %1054, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax
1729 :   %1056 = zext i32 %1055 to i64, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax

1730 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !150 :          <241>	movl	$8, %edx

1731 :   %1057 = load i64* %RCX_val, !mcsema_real_eip !151 :          <246>	movq	%rcx, %rsi
1732 :   store i64 %1057, i64* %RSI_val, !mcsema_real_eip !151 :          <246>	movq	%rcx, %rsi

1733 :   store i64 %1056, i64* %RDI_val, !mcsema_real_eip !152 :          <249>	movl	%eax, %edi

1734 :   %1058 = tail call x86_64_sysvcc i64 @read_bytes(i64 %1056, i64 %1057, i64 8), !mcsema_real_eip !153 :          <24b>	callq	0
1735 :   store i64 %1058, i64* %RAX_val, !mcsema_real_eip !153 :          <24b>	callq	0

1736 :   %1059 = load i64* %RBP_val, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)
1737 :   %1060 = add i64 %1059, -60, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)
1738 :   %1061 = inttoptr i64 %1060 to i64*, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)
1739 :   %1062 = trunc i64 %1058 to i32, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)

1740 :   %1063 = bitcast i64* %1061 to i32* : NIL

1741 :   store i32 %1062, i32* %1063, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)

1742 :   %1064 = load i64* %RBP_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1743 :   %1065 = add i64 %1064, -60, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1744 :   %1066 = inttoptr i64 %1065 to i64*, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1745 :   %1067 = bitcast i64* %1066 to i32* : NIL

1746 :   %1068 = load i32* %1067, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1747 :   %1069 = add i32 %1068, -3 : NIL

1748 :   %1070 = xor i32 %1069, %1068, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1749 :   %1071 = and i32 %1070, 16, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1750 :   %1072 = icmp ne i32 %1071, 0, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1751 :   store i1 %1072, i1* %AF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1752 :   %1073 = trunc i32 %1069 to i8, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1753 :   %1074 = tail call i8 @llvm.ctpop.i8(i8 %1073), !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1754 :   %1075 = and i8 %1074, 1 : NIL
1755 :   %1076 = icmp eq i8 %1075, 0 : NIL

1756 :   store i1 %1076, i1* %PF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1757 :   %1077 = icmp eq i32 %1069, 0, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1758 :   store i1 %1077, i1* %ZF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1759 :   %1078 = icmp slt i32 %1069, 0 : NIL

1760 :   store i1 %1078, i1* %SF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1761 :   %1079 = icmp ult i32 %1068, 3, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1762 :   store i1 %1079, i1* %CF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1763 :   %1080 = and i32 %1070, %1068, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1764 :   %1081 = icmp slt i32 %1080, 0 : NIL

1765 :   store i1 %1081, i1* %OF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1766 :   store i32 %1069, i32* %1067, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1767 :   %1082 = load i64* %RBP_val, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax
1768 :   %1083 = add i64 %1082, -60, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax
1769 :   %1084 = inttoptr i64 %1083 to i64*, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax

1770 :   %1085 = bitcast i64* %1084 to i32* : NIL

1771 :   %1086 = load i32* %1085, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax

1772 :   %1087 = and i32 %1086, 7, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1773 :   %1088 = icmp eq i32 %1087, 0, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1774 :   %1089 = trunc i32 %1087 to i8, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1775 :   %1090 = tail call i8 @llvm.ctpop.i8(i8 %1089), !mcsema_real_eip !157 :          <25a>	andl	$7, %eax

1776 :   %1091 = and i8 %1090, 1 : NIL
1777 :   %1092 = icmp eq i8 %1091, 0 : NIL

1778 :   %1093 = zext i32 %1087 to i64, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1779 :   store i64 %1093, i64* %RAX_val, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax

1780 :   store i1 %1088, i1* %ZF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1781 :   store i1 false, i1* %SF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1782 :   store i1 %1092, i1* %PF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1783 :   store i1 false, i1* %CF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1784 :   store i1 false, i1* %OF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax

1785 :   br i1 %1088, label %block_0x26b, label %block_0x261, !mcsema_real_eip !159 :          <25f>	je	10

1786 :   %1094 = load i64* %RBP_val, !mcsema_real_eip !160 :          <21e>	movl	-20(%rbp), %eax
1787 :   %1095 = add i64 %1094, -20, !mcsema_real_eip !160 :          <21e>	movl	-20(%rbp), %eax
1788 :   %1096 = inttoptr i64 %1095 to i64*, !mcsema_real_eip !160 :          <21e>	movl	-20(%rbp), %eax

1789 :   %1097 = bitcast i64* %1096 to i32* : NIL

1790 :   %1098 = load i32* %1097, !mcsema_real_eip !160 :          <21e>	movl	-20(%rbp), %eax
1791 :   %1099 = zext i32 %1098 to i64, !mcsema_real_eip !160 :          <21e>	movl	-20(%rbp), %eax
1792 :   store i64 %1099, i64* %RAX_val, !mcsema_real_eip !160 :          <21e>	movl	-20(%rbp), %eax

1793 :   %1100 = load i64* %RBP_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1794 :   %1101 = add i64 %1100, -56, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1795 :   %1102 = inttoptr i64 %1101 to i64*, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax

1796 :   %1103 = bitcast i64* %1102 to i32* : NIL

1797 :   %1104 = load i32* %1103, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1798 :   %1105 = sub i32 %1098, %1104, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1799 :   %1106 = xor i32 %1105, %1098, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1800 :   %1107 = xor i32 %1106, %1104, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1801 :   %1108 = and i32 %1107, 16, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1802 :   %1109 = icmp ne i32 %1108, 0, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1803 :   store i1 %1109, i1* %AF_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1804 :   %1110 = trunc i32 %1105 to i8, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1805 :   %1111 = tail call i8 @llvm.ctpop.i8(i8 %1110), !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax

1806 :   %1112 = and i8 %1111, 1 : NIL
1807 :   %1113 = icmp eq i8 %1112, 0 : NIL

1808 :   store i1 %1113, i1* %PF_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax

1809 :   %1114 = icmp eq i32 %1098, %1104 : NIL

1810 :   store i1 %1114, i1* %ZF_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax

1811 :   %1115 = icmp slt i32 %1105, 0 : NIL

1812 :   store i1 %1115, i1* %SF_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1813 :   %1116 = icmp ult i32 %1098, %1104, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1814 :   store i1 %1116, i1* %CF_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1815 :   %1117 = xor i32 %1104, %1098, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax
1816 :   %1118 = and i32 %1106, %1117, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax

1817 :   %1119 = icmp slt i32 %1118, 0 : NIL

1818 :   store i1 %1119, i1* %OF_val, !mcsema_real_eip !161 :          <221>	cmpl	-56(%rbp), %eax

1819 :   %1120 = load i1* %ZF_val, !mcsema_real_eip !162 :          <224>	jne	9
1820 :   br i1 %1120, label %block_0x226, label %block_0x22f, !mcsema_real_eip !162 :          <224>	jne	9

1821 :   %1121 = load i64* %RBP_val, !mcsema_real_eip !163 :          <226>	movl	$0, -20(%rbp)
1822 :   %1122 = add i64 %1121, -20, !mcsema_real_eip !163 :          <226>	movl	$0, -20(%rbp)
1823 :   %1123 = inttoptr i64 %1122 to i64*, !mcsema_real_eip !163 :          <226>	movl	$0, -20(%rbp)

1824 :   %1124 = bitcast i64* %1123 to i32* : NIL

1825 :   store i32 0, i32* %1124, !mcsema_real_eip !163 :          <226>	movl	$0, -20(%rbp)

1826 :   %1125 = load i64* %RBP_val, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1827 :   %1126 = add i64 %1125, -72, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1828 :   %1127 = inttoptr i64 %1126 to i64*, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1829 :   %1128 = load i64* %1127, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax
1830 :   store i64 %1128, i64* %RAX_val, !mcsema_real_eip !147 :          <236>	movq	-72(%rbp), %rax

1831 :   %1129 = add i64 %1128, 20, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx
1832 :   %1130 = inttoptr i64 %1129 to i64*, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx
1833 :   %1131 = ptrtoint i64* %1130 to i64, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx
1834 :   store i64 %1131, i64* %RCX_val, !mcsema_real_eip !148 :          <23a>	leaq	20(%rax), %rcx

1835 :   %1132 = load i64* %RBP_val, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax
1836 :   %1133 = add i64 %1132, -20, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax
1837 :   %1134 = inttoptr i64 %1133 to i64*, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax

1838 :   %1135 = bitcast i64* %1134 to i32* : NIL

1839 :   %1136 = load i32* %1135, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax
1840 :   %1137 = zext i32 %1136 to i64, !mcsema_real_eip !149 :          <23e>	movl	-20(%rbp), %eax

1841 :   store i64 8, i64* %RDX_val, !mcsema_real_eip !150 :          <241>	movl	$8, %edx

1842 :   %1138 = load i64* %RCX_val, !mcsema_real_eip !151 :          <246>	movq	%rcx, %rsi
1843 :   store i64 %1138, i64* %RSI_val, !mcsema_real_eip !151 :          <246>	movq	%rcx, %rsi

1844 :   store i64 %1137, i64* %RDI_val, !mcsema_real_eip !152 :          <249>	movl	%eax, %edi

1845 :   %1139 = tail call x86_64_sysvcc i64 @read_bytes(i64 %1137, i64 %1138, i64 8), !mcsema_real_eip !153 :          <24b>	callq	0
1846 :   store i64 %1139, i64* %RAX_val, !mcsema_real_eip !153 :          <24b>	callq	0

1847 :   %1140 = load i64* %RBP_val, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)
1848 :   %1141 = add i64 %1140, -60, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)
1849 :   %1142 = inttoptr i64 %1141 to i64*, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)
1850 :   %1143 = trunc i64 %1139 to i32, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)

1851 :   %1144 = bitcast i64* %1142 to i32* : NIL

1852 :   store i32 %1143, i32* %1144, !mcsema_real_eip !154 :          <250>	movl	%eax, -60(%rbp)

1853 :   %1145 = load i64* %RBP_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1854 :   %1146 = add i64 %1145, -60, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1855 :   %1147 = inttoptr i64 %1146 to i64*, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1856 :   %1148 = bitcast i64* %1147 to i32* : NIL

1857 :   %1149 = load i32* %1148, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1858 :   %1150 = add i32 %1149, -3 : NIL

1859 :   %1151 = xor i32 %1150, %1149, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1860 :   %1152 = and i32 %1151, 16, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1861 :   %1153 = icmp ne i32 %1152, 0, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1862 :   store i1 %1153, i1* %AF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1863 :   %1154 = trunc i32 %1150 to i8, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1864 :   %1155 = tail call i8 @llvm.ctpop.i8(i8 %1154), !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1865 :   %1156 = and i8 %1155, 1 : NIL
1866 :   %1157 = icmp eq i8 %1156, 0 : NIL

1867 :   store i1 %1157, i1* %PF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1868 :   %1158 = icmp eq i32 %1150, 0, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1869 :   store i1 %1158, i1* %ZF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1870 :   %1159 = icmp slt i32 %1150, 0 : NIL

1871 :   store i1 %1159, i1* %SF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1872 :   %1160 = icmp ult i32 %1149, 3, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1873 :   store i1 %1160, i1* %CF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1874 :   %1161 = and i32 %1151, %1149, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1875 :   %1162 = icmp slt i32 %1161, 0 : NIL

1876 :   store i1 %1162, i1* %OF_val, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)
1877 :   store i32 %1150, i32* %1148, !mcsema_real_eip !155 :          <253>	subl	$3, -60(%rbp)

1878 :   %1163 = load i64* %RBP_val, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax
1879 :   %1164 = add i64 %1163, -60, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax
1880 :   %1165 = inttoptr i64 %1164 to i64*, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax

1881 :   %1166 = bitcast i64* %1165 to i32* : NIL

1882 :   %1167 = load i32* %1166, !mcsema_real_eip !156 :          <257>	movl	-60(%rbp), %eax

1883 :   %1168 = and i32 %1167, 7, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1884 :   %1169 = icmp eq i32 %1168, 0, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1885 :   %1170 = trunc i32 %1168 to i8, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1886 :   %1171 = tail call i8 @llvm.ctpop.i8(i8 %1170), !mcsema_real_eip !157 :          <25a>	andl	$7, %eax

1887 :   %1172 = and i8 %1171, 1 : NIL
1888 :   %1173 = icmp eq i8 %1172, 0 : NIL

1889 :   %1174 = zext i32 %1168 to i64, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax
1890 :   store i64 %1174, i64* %RAX_val, !mcsema_real_eip !157 :          <25a>	andl	$7, %eax

1891 :   store i1 %1169, i1* %ZF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1892 :   store i1 false, i1* %SF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1893 :   store i1 %1173, i1* %PF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1894 :   store i1 false, i1* %CF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax
1895 :   store i1 false, i1* %OF_val, !mcsema_real_eip !158 :          <25d>	testl	%eax, %eax

1896 :   br i1 %1169, label %block_0x26b, label %block_0x261, !mcsema_real_eip !159 :          <25f>	je	10

1897 :   %1175 = load i64* %RBP_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1898 :   %1176 = add i64 %1175, -60, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1899 :   %1177 = inttoptr i64 %1176 to i64*, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1900 :   %1178 = bitcast i64* %1177 to i32* : NIL

1901 :   %1179 = load i32* %1178, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1902 :   %1180 = xor i32 %1179, -2147483648 : NIL

1903 :   store i1 false, i1* %AF_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1904 :   %1181 = icmp sgt i32 %1179, -1 : NIL

1905 :   store i1 %1181, i1* %SF_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1906 :   %1182 = icmp eq i32 %1179, -2147483648 : NIL

1907 :   store i1 %1182, i1* %ZF_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1908 :   %1183 = icmp slt i32 %1179, 0 : NIL

1909 :   store i1 %1183, i1* %OF_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1910 :   %1184 = trunc i32 %1179 to i8, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1911 :   %1185 = tail call i8 @llvm.ctpop.i8(i8 %1184), !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1912 :   %1186 = and i8 %1185, 1 : NIL
1913 :   %1187 = icmp eq i8 %1186, 0 : NIL

1914 :   store i1 %1187, i1* %PF_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1915 :   %1188 = icmp ult i32 %1180, %1179, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1916 :   store i1 %1188, i1* %CF_val, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)
1917 :   store i32 %1180, i32* %1178, !mcsema_real_eip !164 :          <26b>	addl	$2147483648, -60(%rbp)

1918 :   %1189 = load i64* %RBP_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1919 :   %1190 = add i64 %1189, -60, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1920 :   %1191 = inttoptr i64 %1190 to i64*, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1921 :   %1192 = bitcast i64* %1191 to i32* : NIL

1922 :   %1193 = load i32* %1192, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1923 :   %1194 = add i32 %1193, -268435455 : NIL

1924 :   %1195 = xor i32 %1194, %1193, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1925 :   %1196 = and i32 %1195, 16 : NIL
1926 :   %1197 = icmp eq i32 %1196, 0 : NIL

1927 :   store i1 %1197, i1* %AF_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1928 :   %1198 = trunc i32 %1194 to i8, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1929 :   %1199 = tail call i8 @llvm.ctpop.i8(i8 %1198), !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1930 :   %1200 = and i8 %1199, 1 : NIL
1931 :   %1201 = icmp eq i8 %1200, 0 : NIL

1932 :   store i1 %1201, i1* %PF_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1933 :   %1202 = icmp eq i32 %1194, 0, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1934 :   store i1 %1202, i1* %ZF_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1935 :   %1203 = icmp slt i32 %1194, 0 : NIL

1936 :   store i1 %1203, i1* %SF_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1937 :   %1204 = icmp ult i32 %1193, 268435455, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1938 :   store i1 %1204, i1* %CF_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)
1939 :   %1205 = and i32 %1195, %1193, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1940 :   %1206 = icmp slt i32 %1205, 0 : NIL

1941 :   store i1 %1206, i1* %OF_val, !mcsema_real_eip !165 :          <272>	cmpl	$268435455, -60(%rbp)

1942 :   %1207 = load i1* %ZF_val, !mcsema_real_eip !166 :          <279>	jbe	10
1943 :   %1208 = or i1 %1204, %1207, !mcsema_real_eip !166 :          <279>	jbe	10
1944 :   br i1 %1208, label %block_0x285, label %block_0x27b, !mcsema_real_eip !166 :          <279>	jbe	10

1945 :   store i64 4294967275, i64* %RAX_val, !mcsema_real_eip !167 :          <261>	movl	$4294967275, %eax

1946 :   br label %block_0x391, !mcsema_real_eip !168 :          <266>	jmp	294

1947 :   %1209 = load i64* %RBP_val, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1948 :   %1210 = add i64 %1209, -60, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1949 :   %1211 = inttoptr i64 %1210 to i64*, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)

1950 :   %1212 = bitcast i64* %1211 to i32* : NIL

1951 :   %1213 = load i32* %1212, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1952 :   %1214 = xor i32 %1213, 13631488, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1953 :   store i1 false, i1* %CF_val, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1954 :   store i1 false, i1* %OF_val, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)

1955 :   %1215 = icmp slt i32 %1213, 0 : NIL

1956 :   store i1 %1215, i1* %SF_val, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)

1957 :   %1216 = icmp eq i32 %1213, 13631488 : NIL

1958 :   store i1 %1216, i1* %ZF_val, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1959 :   %1217 = trunc i32 %1213 to i8, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1960 :   %1218 = tail call i8 @llvm.ctpop.i8(i8 %1217), !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)

1961 :   %1219 = and i8 %1218, 1 : NIL
1962 :   %1220 = icmp eq i8 %1219, 0 : NIL

1963 :   store i1 %1220, i1* %PF_val, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)
1964 :   store i32 %1214, i32* %1212, !mcsema_real_eip !169 :          <285>	xorl	$13631488, -60(%rbp)

1965 :   %1221 = load i64* %RBP_val, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1966 :   %1222 = add i64 %1221, -60, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1967 :   %1223 = inttoptr i64 %1222 to i64*, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)

1968 :   %1224 = bitcast i64* %1223 to i32* : NIL

1969 :   %1225 = load i32* %1224, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1970 :   %1226 = and i32 %1225, 8, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1971 :   %1227 = icmp ne i32 %1226, 0, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)

1972 :   %1228 = lshr i32 %1225, 4 : NIL

1973 :   store i1 %1227, i1* %CF_val, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1974 :   %1229 = icmp eq i32 %1228, 0, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1975 :   store i1 %1229, i1* %ZF_val, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1976 :   store i1 false, i1* %SF_val, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1977 :   %1230 = trunc i32 %1228 to i8, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1978 :   %1231 = tail call i8 @llvm.ctpop.i8(i8 %1230), !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)

1979 :   %1232 = and i8 %1231, 1 : NIL
1980 :   %1233 = icmp eq i8 %1232, 0 : NIL

1981 :   store i1 %1233, i1* %PF_val, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)
1982 :   store i32 %1228, i32* %1224, !mcsema_real_eip !170 :          <28c>	shrl	$4, -60(%rbp)

1983 :   %1234 = load i64* %RBP_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1984 :   %1235 = add i64 %1234, -60, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1985 :   %1236 = inttoptr i64 %1235 to i64*, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)

1986 :   %1237 = bitcast i64* %1236 to i32* : NIL

1987 :   %1238 = load i32* %1237, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)

1988 :   %1239 = add i32 %1238, -226 : NIL

1989 :   %1240 = xor i32 %1239, %1238, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1990 :   %1241 = and i32 %1240, 16, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1991 :   %1242 = icmp ne i32 %1241, 0, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1992 :   store i1 %1242, i1* %AF_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1993 :   %1243 = trunc i32 %1239 to i8, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1994 :   %1244 = tail call i8 @llvm.ctpop.i8(i8 %1243), !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)

1995 :   %1245 = and i8 %1244, 1 : NIL
1996 :   %1246 = icmp eq i8 %1245, 0 : NIL

1997 :   store i1 %1246, i1* %PF_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1998 :   %1247 = icmp eq i32 %1239, 0, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
1999 :   store i1 %1247, i1* %ZF_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)

2000 :   %1248 = icmp slt i32 %1239, 0 : NIL

2001 :   store i1 %1248, i1* %SF_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
2002 :   %1249 = icmp ult i32 %1238, 226, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
2003 :   store i1 %1249, i1* %CF_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
2004 :   %1250 = and i32 %1240, %1238, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)

2005 :   %1251 = icmp slt i32 %1250, 0 : NIL

2006 :   store i1 %1251, i1* %OF_val, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)
2007 :   store i32 %1239, i32* %1237, !mcsema_real_eip !171 :          <290>	subl	$226, -60(%rbp)

2008 :   %1252 = load i64* %RBP_val, !mcsema_real_eip !172 :          <297>	movl	-60(%rbp), %eax
2009 :   %1253 = add i64 %1252, -60, !mcsema_real_eip !172 :          <297>	movl	-60(%rbp), %eax
2010 :   %1254 = inttoptr i64 %1253 to i64*, !mcsema_real_eip !172 :          <297>	movl	-60(%rbp), %eax

2011 :   %1255 = bitcast i64* %1254 to i32* : NIL

2012 :   %1256 = load i32* %1255, !mcsema_real_eip !172 :          <297>	movl	-60(%rbp), %eax
2013 :   %1257 = zext i32 %1256 to i64, !mcsema_real_eip !172 :          <297>	movl	-60(%rbp), %eax

2014 :   %1258 = mul i64 %1257, 3518437209, !mcsema_real_eip !173 :          <29f>	mull	%edx
2015 :   %1259 = lshr i64 %1258, 32, !mcsema_real_eip !173 :          <29f>	mull	%edx

2016 :   %1260 = icmp ne i64 %1259, 0 : NIL

2017 :   store i1 %1260, i1* %OF_val, !mcsema_real_eip !173 :          <29f>	mull	%edx
2018 :   store i64 %1259, i64* %RDX_val, !mcsema_real_eip !173 :          <29f>	mull	%edx

2019 :   %1261 = and i64 %1258, 17592186044416 : NIL
2020 :   %1262 = icmp ne i64 %1261, 0 : NIL
2021 :   %1263 = lshr i64 %1258, 45 : NIL

2022 :   store i1 %1262, i1* %CF_val, !mcsema_real_eip !174 :          <2a3>	shrl	$13, %eax

2023 :   %1264 = icmp eq i64 %1263, 0 : NIL

2024 :   store i1 %1264, i1* %ZF_val, !mcsema_real_eip !174 :          <2a3>	shrl	$13, %eax
2025 :   store i1 false, i1* %SF_val, !mcsema_real_eip !174 :          <2a3>	shrl	$13, %eax

2026 :   %1265 = trunc i64 %1263 to i8 : NIL

2027 :   %1266 = tail call i8 @llvm.ctpop.i8(i8 %1265), !mcsema_real_eip !174 :          <2a3>	shrl	$13, %eax

2028 :   %1267 = and i8 %1266, 1 : NIL
2029 :   %1268 = icmp eq i8 %1267, 0 : NIL

2030 :   store i1 %1268, i1* %PF_val, !mcsema_real_eip !174 :          <2a3>	shrl	$13, %eax
2031 :   store i64 %1263, i64* %RAX_val, !mcsema_real_eip !174 :          <2a3>	shrl	$13, %eax

2032 :   %1269 = load i64* %RBP_val, !mcsema_real_eip !175 :          <2a6>	movl	%eax, -60(%rbp)
2033 :   %1270 = add i64 %1269, -60, !mcsema_real_eip !175 :          <2a6>	movl	%eax, -60(%rbp)
2034 :   %1271 = inttoptr i64 %1270 to i64*, !mcsema_real_eip !175 :          <2a6>	movl	%eax, -60(%rbp)
2035 :   %1272 = trunc i64 %1263 to i32, !mcsema_real_eip !175 :          <2a6>	movl	%eax, -60(%rbp)

2036 :   %1273 = bitcast i64* %1271 to i32* : NIL

2037 :   store i32 %1272, i32* %1273, !mcsema_real_eip !175 :          <2a6>	movl	%eax, -60(%rbp)

2038 :   %1274 = load i64* %RBP_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2039 :   %1275 = add i64 %1274, -60, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2040 :   %1276 = inttoptr i64 %1275 to i64*, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)

2041 :   %1277 = bitcast i64* %1276 to i32* : NIL

2042 :   %1278 = load i32* %1277, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)

2043 :   %1279 = add i32 %1278, -3 : NIL

2044 :   %1280 = xor i32 %1279, %1278, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2045 :   %1281 = and i32 %1280, 16, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2046 :   %1282 = icmp ne i32 %1281, 0, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2047 :   store i1 %1282, i1* %AF_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2048 :   %1283 = trunc i32 %1279 to i8, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2049 :   %1284 = tail call i8 @llvm.ctpop.i8(i8 %1283), !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)

2050 :   %1285 = and i8 %1284, 1 : NIL
2051 :   %1286 = icmp eq i8 %1285, 0 : NIL

2052 :   store i1 %1286, i1* %PF_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2053 :   %1287 = icmp eq i32 %1279, 0, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2054 :   store i1 %1287, i1* %ZF_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)

2055 :   %1288 = icmp slt i32 %1279, 0 : NIL

2056 :   store i1 %1288, i1* %SF_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2057 :   %1289 = icmp ult i32 %1278, 3, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2058 :   store i1 %1289, i1* %CF_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)
2059 :   %1290 = and i32 %1280, %1278, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)

2060 :   %1291 = icmp slt i32 %1290, 0 : NIL

2061 :   store i1 %1291, i1* %OF_val, !mcsema_real_eip !176 :          <2a9>	cmpl	$3, -60(%rbp)

2062 :   %1292 = load i1* %ZF_val, !mcsema_real_eip !177 :          <2ad>	je	8

2063 :   %1293 = load i64* %RBP_val, !mcsema_real_eip !178 :          <2b7>	movq	-72(%rbp), %rax

2064 :   br i1 %1292, label %block_0x2b7, label %block_0x2af, !mcsema_real_eip !177 :          <2ad>	je	8

2065 :   store i64 4294967274, i64* %RAX_val, !mcsema_real_eip !179 :          <27b>	movl	$4294967274, %eax

2066 :   br label %block_0x391, !mcsema_real_eip !180 :          <280>	jmp	268

2067 :   %1294 = add i64 %1293, -72, !mcsema_real_eip !178 :          <2b7>	movq	-72(%rbp), %rax
2068 :   %1295 = inttoptr i64 %1294 to i64*, !mcsema_real_eip !178 :          <2b7>	movq	-72(%rbp), %rax
2069 :   %1296 = load i64* %1295, !mcsema_real_eip !178 :          <2b7>	movq	-72(%rbp), %rax
2070 :   store i64 %1296, i64* %RAX_val, !mcsema_real_eip !178 :          <2b7>	movq	-72(%rbp), %rax

2071 :   %1297 = add i64 %1296, 28, !mcsema_real_eip !181 :          <2bb>	leaq	28(%rax), %rcx
2072 :   %1298 = inttoptr i64 %1297 to i64*, !mcsema_real_eip !181 :          <2bb>	leaq	28(%rax), %rcx
2073 :   %1299 = ptrtoint i64* %1298 to i64, !mcsema_real_eip !181 :          <2bb>	leaq	28(%rax), %rcx
2074 :   store i64 %1299, i64* %RCX_val, !mcsema_real_eip !181 :          <2bb>	leaq	28(%rax), %rcx

2075 :   %1300 = load i64* %RBP_val, !mcsema_real_eip !182 :          <2bf>	movl	-20(%rbp), %eax
2076 :   %1301 = add i64 %1300, -20, !mcsema_real_eip !182 :          <2bf>	movl	-20(%rbp), %eax
2077 :   %1302 = inttoptr i64 %1301 to i64*, !mcsema_real_eip !182 :          <2bf>	movl	-20(%rbp), %eax

2078 :   %1303 = bitcast i64* %1302 to i32* : NIL

2079 :   %1304 = load i32* %1303, !mcsema_real_eip !182 :          <2bf>	movl	-20(%rbp), %eax
2080 :   %1305 = zext i32 %1304 to i64, !mcsema_real_eip !182 :          <2bf>	movl	-20(%rbp), %eax

2081 :   store i64 4, i64* %RDX_val, !mcsema_real_eip !183 :          <2c2>	movl	$4, %edx

2082 :   %1306 = load i64* %RCX_val, !mcsema_real_eip !184 :          <2c7>	movq	%rcx, %rsi
2083 :   store i64 %1306, i64* %RSI_val, !mcsema_real_eip !184 :          <2c7>	movq	%rcx, %rsi

2084 :   store i64 %1305, i64* %RDI_val, !mcsema_real_eip !185 :          <2ca>	movl	%eax, %edi

2085 :   %1307 = tail call x86_64_sysvcc i64 @read_bytes(i64 %1305, i64 %1306, i64 4), !mcsema_real_eip !186 :          <2cc>	callq	0
2086 :   store i64 %1307, i64* %RAX_val, !mcsema_real_eip !186 :          <2cc>	callq	0

2087 :   %1308 = load i64* %RBP_val, !mcsema_real_eip !187 :          <2d1>	movl	%eax, -64(%rbp)
2088 :   %1309 = add i64 %1308, -64, !mcsema_real_eip !187 :          <2d1>	movl	%eax, -64(%rbp)
2089 :   %1310 = inttoptr i64 %1309 to i64*, !mcsema_real_eip !187 :          <2d1>	movl	%eax, -64(%rbp)
2090 :   %1311 = trunc i64 %1307 to i32, !mcsema_real_eip !187 :          <2d1>	movl	%eax, -64(%rbp)

2091 :   %1312 = bitcast i64* %1310 to i32* : NIL

2092 :   store i32 %1311, i32* %1312, !mcsema_real_eip !187 :          <2d1>	movl	%eax, -64(%rbp)

2093 :   %1313 = load i64* %RBP_val, !mcsema_real_eip !188 :          <2d4>	movq	-72(%rbp), %rax
2094 :   %1314 = add i64 %1313, -72, !mcsema_real_eip !188 :          <2d4>	movq	-72(%rbp), %rax
2095 :   %1315 = inttoptr i64 %1314 to i64*, !mcsema_real_eip !188 :          <2d4>	movq	-72(%rbp), %rax
2096 :   %1316 = load i64* %1315, !mcsema_real_eip !188 :          <2d4>	movq	-72(%rbp), %rax

2097 :   %uadd220 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1316, i64 28) : NIL
2098 :   %1317 = extractvalue { i64, i1 } %uadd220, 0 : NIL

2099 :   %1318 = xor i64 %1317, %1316, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax

2100 :   %1319 = and i64 %1318, 16 : NIL
2101 :   %1320 = icmp eq i64 %1319, 0 : NIL

2102 :   store i1 %1320, i1* %AF_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax

2103 :   %1321 = icmp slt i64 %1317, 0 : NIL

2104 :   store i1 %1321, i1* %SF_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2105 :   %1322 = icmp eq i64 %1317, 0, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2106 :   store i1 %1322, i1* %ZF_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2107 :   %1323 = xor i64 %1316, -9223372036854775808, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2108 :   %1324 = and i64 %1318, %1323, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax

2109 :   %1325 = icmp slt i64 %1324, 0 : NIL

2110 :   store i1 %1325, i1* %OF_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2111 :   %1326 = trunc i64 %1317 to i8, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2112 :   %1327 = tail call i8 @llvm.ctpop.i8(i8 %1326), !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax

2113 :   %1328 = and i8 %1327, 1 : NIL
2114 :   %1329 = icmp eq i8 %1328, 0 : NIL

2115 :   store i1 %1329, i1* %PF_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax

2116 :   %1330 = extractvalue { i64, i1 } %uadd220, 1 : NIL

2117 :   store i1 %1330, i1* %CF_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax
2118 :   store i64 %1317, i64* %RAX_val, !mcsema_real_eip !189 :          <2d8>	addq	$28, %rax

2119 :   %1331 = inttoptr i64 %1317 to i64*, !mcsema_real_eip !190 :          <2dc>	movzbl	(%rax), %eax

2120 :   %1332 = bitcast i64* %1331 to i8* : NIL

2121 :   %1333 = load i8* %1332, !mcsema_real_eip !190 :          <2dc>	movzbl	(%rax), %eax

2122 :   %1334 = zext i8 %1333 to i64 : NIL

2123 :   store i64 %1334, i64* %RAX_val, !mcsema_real_eip !190 :          <2dc>	movzbl	(%rax), %eax

2124 :   %1335 = add i8 %1333, -100 : NIL

2125 :   %1336 = xor i8 %1335, %1333, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2126 :   %1337 = and i8 %1336, 16, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2127 :   %1338 = icmp ne i8 %1337, 0, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2128 :   store i1 %1338, i1* %AF_val, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2129 :   %1339 = tail call i8 @llvm.ctpop.i8(i8 %1335), !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al

2130 :   %1340 = and i8 %1339, 1 : NIL
2131 :   %1341 = icmp eq i8 %1340, 0 : NIL

2132 :   store i1 %1341, i1* %PF_val, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2133 :   %1342 = icmp eq i8 %1335, 0, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2134 :   store i1 %1342, i1* %ZF_val, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al

2135 :   %1343 = icmp slt i8 %1335, 0 : NIL

2136 :   store i1 %1343, i1* %SF_val, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2137 :   %1344 = icmp ult i8 %1333, 100, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2138 :   store i1 %1344, i1* %CF_val, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al
2139 :   %1345 = and i8 %1336, %1333, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al

2140 :   %1346 = icmp slt i8 %1345, 0 : NIL

2141 :   store i1 %1346, i1* %OF_val, !mcsema_real_eip !191 :          <2df>	cmpb	$100, %al

2142 :   %1347 = load i1* %ZF_val, !mcsema_real_eip !192 :          <2e1>	jne	29
2143 :   br i1 %1347, label %block_0x2e3, label %block_0x300, !mcsema_real_eip !192 :          <2e1>	jne	29

2144 :   %1348 = add i64 %1293, -60, !mcsema_real_eip !193 :          <2af>	movl	-60(%rbp), %eax
2145 :   %1349 = inttoptr i64 %1348 to i64*, !mcsema_real_eip !193 :          <2af>	movl	-60(%rbp), %eax

2146 :   %1350 = bitcast i64* %1349 to i32* : NIL

2147 :   %1351 = load i32* %1350, !mcsema_real_eip !193 :          <2af>	movl	-60(%rbp), %eax
2148 :   %1352 = zext i32 %1351 to i64, !mcsema_real_eip !193 :          <2af>	movl	-60(%rbp), %eax
2149 :   store i64 %1352, i64* %RAX_val, !mcsema_real_eip !193 :          <2af>	movl	-60(%rbp), %eax

2150 :   br label %block_0x391, !mcsema_real_eip !194 :          <2b2>	jmp	218

2151 :   %1353 = load i64* %RBP_val, !mcsema_real_eip !195 :          <300>	movq	-72(%rbp), %rax
2152 :   %1354 = add i64 %1353, -72, !mcsema_real_eip !195 :          <300>	movq	-72(%rbp), %rax
2153 :   %1355 = inttoptr i64 %1354 to i64*, !mcsema_real_eip !195 :          <300>	movq	-72(%rbp), %rax
2154 :   %1356 = load i64* %1355, !mcsema_real_eip !195 :          <300>	movq	-72(%rbp), %rax

2155 :   %uadd223 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1356, i64 28) : NIL
2156 :   %1357 = extractvalue { i64, i1 } %uadd223, 0 : NIL

2157 :   %1358 = xor i64 %1357, %1356, !mcsema_real_eip !196 :          <304>	addq	$28, %rax

2158 :   %1359 = and i64 %1358, 16 : NIL
2159 :   %1360 = icmp eq i64 %1359, 0 : NIL

2160 :   store i1 %1360, i1* %AF_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax

2161 :   %1361 = icmp slt i64 %1357, 0 : NIL

2162 :   store i1 %1361, i1* %SF_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2163 :   %1362 = icmp eq i64 %1357, 0, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2164 :   store i1 %1362, i1* %ZF_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2165 :   %1363 = xor i64 %1356, -9223372036854775808, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2166 :   %1364 = and i64 %1358, %1363, !mcsema_real_eip !196 :          <304>	addq	$28, %rax

2167 :   %1365 = icmp slt i64 %1364, 0 : NIL

2168 :   store i1 %1365, i1* %OF_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2169 :   %1366 = trunc i64 %1357 to i8, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2170 :   %1367 = tail call i8 @llvm.ctpop.i8(i8 %1366), !mcsema_real_eip !196 :          <304>	addq	$28, %rax

2171 :   %1368 = and i8 %1367, 1 : NIL
2172 :   %1369 = icmp eq i8 %1368, 0 : NIL

2173 :   store i1 %1369, i1* %PF_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax

2174 :   %1370 = extractvalue { i64, i1 } %uadd223, 1 : NIL

2175 :   store i1 %1370, i1* %CF_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax
2176 :   store i64 %1357, i64* %RAX_val, !mcsema_real_eip !196 :          <304>	addq	$28, %rax

2177 :   %1371 = inttoptr i64 %1357 to i64*, !mcsema_real_eip !197 :          <308>	movzbl	(%rax), %edx

2178 :   %1372 = bitcast i64* %1371 to i8* : NIL

2179 :   %1373 = load i8* %1372, !mcsema_real_eip !197 :          <308>	movzbl	(%rax), %edx

2180 :   %1374 = zext i8 %1373 to i64 : NIL

2181 :   store i64 %1374, i64* %RDX_val, !mcsema_real_eip !197 :          <308>	movzbl	(%rax), %edx

2182 :   %1375 = load i64* %RBP_val, !mcsema_real_eip !198 :          <30b>	movq	-72(%rbp), %rax
2183 :   %1376 = add i64 %1375, -72, !mcsema_real_eip !198 :          <30b>	movq	-72(%rbp), %rax
2184 :   %1377 = inttoptr i64 %1376 to i64*, !mcsema_real_eip !198 :          <30b>	movq	-72(%rbp), %rax
2185 :   %1378 = load i64* %1377, !mcsema_real_eip !198 :          <30b>	movq	-72(%rbp), %rax

2186 :   %uadd224 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1378, i64 29) : NIL
2187 :   %1379 = extractvalue { i64, i1 } %uadd224, 0 : NIL

2188 :   %1380 = xor i64 %1379, %1378, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax

2189 :   %1381 = and i64 %1380, 16 : NIL
2190 :   %1382 = icmp eq i64 %1381, 0 : NIL

2191 :   store i1 %1382, i1* %AF_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax

2192 :   %1383 = icmp slt i64 %1379, 0 : NIL

2193 :   store i1 %1383, i1* %SF_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2194 :   %1384 = icmp eq i64 %1379, 0, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2195 :   store i1 %1384, i1* %ZF_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2196 :   %1385 = xor i64 %1378, -9223372036854775808, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2197 :   %1386 = and i64 %1380, %1385, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax

2198 :   %1387 = icmp slt i64 %1386, 0 : NIL

2199 :   store i1 %1387, i1* %OF_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2200 :   %1388 = trunc i64 %1379 to i8, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2201 :   %1389 = tail call i8 @llvm.ctpop.i8(i8 %1388), !mcsema_real_eip !199 :          <30f>	addq	$29, %rax

2202 :   %1390 = and i8 %1389, 1 : NIL
2203 :   %1391 = icmp eq i8 %1390, 0 : NIL

2204 :   store i1 %1391, i1* %PF_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax

2205 :   %1392 = extractvalue { i64, i1 } %uadd224, 1 : NIL

2206 :   store i1 %1392, i1* %CF_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax
2207 :   store i64 %1379, i64* %RAX_val, !mcsema_real_eip !199 :          <30f>	addq	$29, %rax

2208 :   %1393 = inttoptr i64 %1379 to i64*, !mcsema_real_eip !200 :          <313>	movzbl	(%rax), %eax

2209 :   %1394 = bitcast i64* %1393 to i8* : NIL

2210 :   %1395 = load i8* %1394, !mcsema_real_eip !200 :          <313>	movzbl	(%rax), %eax

2211 :   %1396 = zext i8 %1395 to i64 : NIL

2212 :   store i64 %1396, i64* %RAX_val, !mcsema_real_eip !200 :          <313>	movzbl	(%rax), %eax

2213 :   %1397 = load i64* %RDX_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2214 :   %1398 = trunc i64 %1397 to i8, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2215 :   %1399 = sub i8 %1398, %1395, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2216 :   %1400 = xor i8 %1399, %1398, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2217 :   %1401 = xor i8 %1400, %1395, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2218 :   %1402 = and i8 %1401, 16, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2219 :   %1403 = icmp ne i8 %1402, 0, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2220 :   store i1 %1403, i1* %AF_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2221 :   %1404 = tail call i8 @llvm.ctpop.i8(i8 %1399), !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl

2222 :   %1405 = and i8 %1404, 1 : NIL
2223 :   %1406 = icmp eq i8 %1405, 0 : NIL

2224 :   store i1 %1406, i1* %PF_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl

2225 :   %1407 = icmp eq i8 %1398, %1395 : NIL

2226 :   store i1 %1407, i1* %ZF_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl

2227 :   %1408 = icmp slt i8 %1399, 0 : NIL

2228 :   store i1 %1408, i1* %SF_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2229 :   %1409 = icmp ult i8 %1398, %1395, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2230 :   store i1 %1409, i1* %CF_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2231 :   %1410 = xor i8 %1398, %1395, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl
2232 :   %1411 = and i8 %1400, %1410, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl

2233 :   %1412 = icmp slt i8 %1411, 0 : NIL

2234 :   store i1 %1412, i1* %OF_val, !mcsema_real_eip !201 :          <316>	cmpb	%al, %dl

2235 :   %1413 = load i1* %ZF_val, !mcsema_real_eip !202 :          <318>	jne	110

2236 :   %1414 = load i64* %RBP_val, !mcsema_real_eip !203 :          <388>	movl	-64(%rbp), %eax

2237 :   br i1 %1413, label %block_0x31a, label %block_0x388, !mcsema_real_eip !202 :          <318>	jne	110

2238 :   %1415 = load i64* %RBP_val, !mcsema_real_eip !204 :          <2e3>	movq	-72(%rbp), %rax
2239 :   %1416 = add i64 %1415, -72, !mcsema_real_eip !204 :          <2e3>	movq	-72(%rbp), %rax
2240 :   %1417 = inttoptr i64 %1416 to i64*, !mcsema_real_eip !204 :          <2e3>	movq	-72(%rbp), %rax
2241 :   %1418 = load i64* %1417, !mcsema_real_eip !204 :          <2e3>	movq	-72(%rbp), %rax

2242 :   %uadd221 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1418, i64 29) : NIL
2243 :   %1419 = extractvalue { i64, i1 } %uadd221, 0 : NIL

2244 :   %1420 = xor i64 %1419, %1418, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax

2245 :   %1421 = and i64 %1420, 16 : NIL
2246 :   %1422 = icmp eq i64 %1421, 0 : NIL

2247 :   store i1 %1422, i1* %AF_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax

2248 :   %1423 = icmp slt i64 %1419, 0 : NIL

2249 :   store i1 %1423, i1* %SF_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2250 :   %1424 = icmp eq i64 %1419, 0, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2251 :   store i1 %1424, i1* %ZF_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2252 :   %1425 = xor i64 %1418, -9223372036854775808, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2253 :   %1426 = and i64 %1420, %1425, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax

2254 :   %1427 = icmp slt i64 %1426, 0 : NIL

2255 :   store i1 %1427, i1* %OF_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2256 :   %1428 = trunc i64 %1419 to i8, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2257 :   %1429 = tail call i8 @llvm.ctpop.i8(i8 %1428), !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax

2258 :   %1430 = and i8 %1429, 1 : NIL
2259 :   %1431 = icmp eq i8 %1430, 0 : NIL

2260 :   store i1 %1431, i1* %PF_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax

2261 :   %1432 = extractvalue { i64, i1 } %uadd221, 1 : NIL

2262 :   store i1 %1432, i1* %CF_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax
2263 :   store i64 %1419, i64* %RAX_val, !mcsema_real_eip !205 :          <2e7>	addq	$29, %rax

2264 :   %1433 = inttoptr i64 %1419 to i64*, !mcsema_real_eip !206 :          <2eb>	movzbl	(%rax), %eax

2265 :   %1434 = bitcast i64* %1433 to i8* : NIL

2266 :   %1435 = load i8* %1434, !mcsema_real_eip !206 :          <2eb>	movzbl	(%rax), %eax

2267 :   %1436 = zext i8 %1435 to i64 : NIL

2268 :   store i64 %1436, i64* %RAX_val, !mcsema_real_eip !206 :          <2eb>	movzbl	(%rax), %eax

2269 :   %1437 = add i8 %1435, -100 : NIL

2270 :   %1438 = xor i8 %1437, %1435, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2271 :   %1439 = and i8 %1438, 16, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2272 :   %1440 = icmp ne i8 %1439, 0, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2273 :   store i1 %1440, i1* %AF_val, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2274 :   %1441 = tail call i8 @llvm.ctpop.i8(i8 %1437), !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al

2275 :   %1442 = and i8 %1441, 1 : NIL
2276 :   %1443 = icmp eq i8 %1442, 0 : NIL

2277 :   store i1 %1443, i1* %PF_val, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2278 :   %1444 = icmp eq i8 %1437, 0, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2279 :   store i1 %1444, i1* %ZF_val, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al

2280 :   %1445 = icmp slt i8 %1437, 0 : NIL

2281 :   store i1 %1445, i1* %SF_val, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2282 :   %1446 = icmp ult i8 %1435, 100, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2283 :   store i1 %1446, i1* %CF_val, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al
2284 :   %1447 = and i8 %1438, %1435, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al

2285 :   %1448 = icmp slt i8 %1447, 0 : NIL

2286 :   store i1 %1448, i1* %OF_val, !mcsema_real_eip !207 :          <2ee>	cmpb	$100, %al

2287 :   %1449 = load i1* %ZF_val, !mcsema_real_eip !208 :          <2f0>	jne	14
2288 :   br i1 %1449, label %block_0x2f2, label %block_0x300, !mcsema_real_eip !208 :          <2f0>	jne	14

2289 :   %1450 = load i64* %RBP_val, !mcsema_real_eip !209 :          <2f2>	movl	-20(%rbp), %eax
2290 :   %1451 = add i64 %1450, -20, !mcsema_real_eip !209 :          <2f2>	movl	-20(%rbp), %eax
2291 :   %1452 = inttoptr i64 %1451 to i64*, !mcsema_real_eip !209 :          <2f2>	movl	-20(%rbp), %eax

2292 :   %1453 = bitcast i64* %1452 to i32* : NIL

2293 :   %1454 = load i32* %1453, !mcsema_real_eip !209 :          <2f2>	movl	-20(%rbp), %eax
2294 :   %1455 = zext i32 %1454 to i64, !mcsema_real_eip !209 :          <2f2>	movl	-20(%rbp), %eax
2295 :   store i64 %1455, i64* %RAX_val, !mcsema_real_eip !209 :          <2f2>	movl	-20(%rbp), %eax

2296 :   %1456 = load i64* %RBP_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2297 :   %1457 = add i64 %1456, -64, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2298 :   %1458 = inttoptr i64 %1457 to i64*, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax

2299 :   %1459 = bitcast i64* %1458 to i32* : NIL

2300 :   %1460 = load i32* %1459, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2301 :   %1461 = xor i32 %1460, %1454, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2302 :   store i1 false, i1* %CF_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2303 :   store i1 false, i1* %OF_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax

2304 :   %1462 = icmp slt i32 %1461, 0 : NIL

2305 :   store i1 %1462, i1* %SF_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax

2306 :   %1463 = icmp eq i32 %1460, %1454 : NIL

2307 :   store i1 %1463, i1* %ZF_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2308 :   %1464 = trunc i32 %1461 to i8, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2309 :   %1465 = tail call i8 @llvm.ctpop.i8(i8 %1464), !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax

2310 :   %1466 = and i8 %1465, 1 : NIL
2311 :   %1467 = icmp eq i8 %1466, 0 : NIL

2312 :   store i1 %1467, i1* %PF_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2313 :   %1468 = zext i32 %1461 to i64, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax
2314 :   store i64 %1468, i64* %RAX_val, !mcsema_real_eip !210 :          <2f5>	xorl	-64(%rbp), %eax

2315 :   %1469 = load i64* %RBP_val, !mcsema_real_eip !211 :          <2f8>	movl	%eax, -20(%rbp)
2316 :   %1470 = add i64 %1469, -20, !mcsema_real_eip !211 :          <2f8>	movl	%eax, -20(%rbp)
2317 :   %1471 = inttoptr i64 %1470 to i64*, !mcsema_real_eip !211 :          <2f8>	movl	%eax, -20(%rbp)

2318 :   %1472 = bitcast i64* %1471 to i32* : NIL

2319 :   store i32 %1461, i32* %1472, !mcsema_real_eip !211 :          <2f8>	movl	%eax, -20(%rbp)

2320 :   br label %block_0x38e, !mcsema_real_eip !212 :          <2fb>	jmp	142

2321 :   %1473 = add i64 %1414, -64, !mcsema_real_eip !203 :          <388>	movl	-64(%rbp), %eax
2322 :   %1474 = inttoptr i64 %1473 to i64*, !mcsema_real_eip !203 :          <388>	movl	-64(%rbp), %eax

2323 :   %1475 = bitcast i64* %1474 to i32* : NIL

2324 :   %1476 = load i32* %1475, !mcsema_real_eip !203 :          <388>	movl	-64(%rbp), %eax
2325 :   %1477 = zext i32 %1476 to i64, !mcsema_real_eip !203 :          <388>	movl	-64(%rbp), %eax
2326 :   store i64 %1477, i64* %RAX_val, !mcsema_real_eip !203 :          <388>	movl	-64(%rbp), %eax

2327 :   %1478 = load i64* %RBP_val, !mcsema_real_eip !213 :          <38b>	movl	%eax, -20(%rbp)
2328 :   %1479 = add i64 %1478, -20, !mcsema_real_eip !213 :          <38b>	movl	%eax, -20(%rbp)
2329 :   %1480 = inttoptr i64 %1479 to i64*, !mcsema_real_eip !213 :          <38b>	movl	%eax, -20(%rbp)

2330 :   %1481 = bitcast i64* %1480 to i32* : NIL

2331 :   store i32 %1476, i32* %1481, !mcsema_real_eip !213 :          <38b>	movl	%eax, -20(%rbp)

2332 :   %1482 = load i64* %RBP_val, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2333 :   %1483 = add i64 %1482, -20, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2334 :   %1484 = inttoptr i64 %1483 to i64*, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax

2335 :   %1485 = bitcast i64* %1484 to i32* : NIL

2336 :   %1486 = load i32* %1485, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2337 :   %1487 = zext i32 %1486 to i64, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2338 :   store i64 %1487, i64* %RAX_val, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax

2339 :   %1488 = load i64* %RSP_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2340 :   %uadd231 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1488, i64 72) : NIL
2341 :   %1489 = extractvalue { i64, i1 } %uadd231, 0 : NIL

2342 :   %1490 = xor i64 %1489, %1488, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2343 :   %1491 = and i64 %1490, 16, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2344 :   %1492 = icmp ne i64 %1491, 0, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2345 :   store i1 %1492, i1* %AF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2346 :   %1493 = icmp slt i64 %1489, 0 : NIL

2347 :   store i1 %1493, i1* %SF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2348 :   %1494 = icmp eq i64 %1489, 0, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2349 :   store i1 %1494, i1* %ZF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2350 :   %1495 = xor i64 %1488, -9223372036854775808, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2351 :   %1496 = and i64 %1490, %1495, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2352 :   %1497 = icmp slt i64 %1496, 0 : NIL

2353 :   store i1 %1497, i1* %OF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2354 :   %1498 = trunc i64 %1489 to i8, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2355 :   %1499 = tail call i8 @llvm.ctpop.i8(i8 %1498), !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2356 :   %1500 = and i8 %1499, 1 : NIL
2357 :   %1501 = icmp eq i8 %1500, 0 : NIL

2358 :   store i1 %1501, i1* %PF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2359 :   %1502 = extractvalue { i64, i1 } %uadd231, 1 : NIL

2360 :   store i1 %1502, i1* %CF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2361 :   store i64 %1489, i64* %RSP_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2362 :   %1503 = inttoptr i64 %1489 to i64*, !mcsema_real_eip !20 :          <395>	popq	%rbx
2363 :   %1504 = load i64* %1503, !mcsema_real_eip !20 :          <395>	popq	%rbx
2364 :   store i64 %1504, i64* %RBX_val, !mcsema_real_eip !20 :          <395>	popq	%rbx
2365 :   %1505 = add i64 %1489, 8, !mcsema_real_eip !20 :          <395>	popq	%rbx
2366 :   store i64 %1505, i64* %RSP_val, !mcsema_real_eip !20 :          <395>	popq	%rbx

2367 :   %1506 = inttoptr i64 %1505 to i64*, !mcsema_real_eip !21 :          <396>	popq	%rbp
2368 :   %1507 = load i64* %1506, !mcsema_real_eip !21 :          <396>	popq	%rbp
2369 :   store i64 %1507, i64* %RBP_val, !mcsema_real_eip !21 :          <396>	popq	%rbp

2370 :   %1508 = add i64 %1489, 24, !mcsema_real_eip !22 :          <397>	retq
2371 :   store i64 %1508, i64* %RSP_val, !mcsema_real_eip !22 :          <397>	retq
2372 :   %1509 = load i64* %RAX_val, !mcsema_real_eip !22 :          <397>	retq
2373 :   store i64 %1509, i64* %RAX, !mcsema_real_eip !22 :          <397>	retq
2374 :   %1510 = load i64* %RBX_val, !mcsema_real_eip !22 :          <397>	retq
2375 :   store i64 %1510, i64* %RBX, !mcsema_real_eip !22 :          <397>	retq
2376 :   %1511 = load i64* %RCX_val, !mcsema_real_eip !22 :          <397>	retq
2377 :   store i64 %1511, i64* %RCX, !mcsema_real_eip !22 :          <397>	retq
2378 :   %1512 = load i64* %RDX_val, !mcsema_real_eip !22 :          <397>	retq
2379 :   store i64 %1512, i64* %RDX, !mcsema_real_eip !22 :          <397>	retq
2380 :   %1513 = load i64* %RSI_val, !mcsema_real_eip !22 :          <397>	retq
2381 :   store i64 %1513, i64* %RSI, !mcsema_real_eip !22 :          <397>	retq
2382 :   %1514 = load i64* %RDI_val, !mcsema_real_eip !22 :          <397>	retq
2383 :   store i64 %1514, i64* %RDI, !mcsema_real_eip !22 :          <397>	retq
2384 :   %1515 = load i64* %RSP_val, !mcsema_real_eip !22 :          <397>	retq
2385 :   store i64 %1515, i64* %RSP, !mcsema_real_eip !22 :          <397>	retq
2386 :   %1516 = load i64* %RBP_val, !mcsema_real_eip !22 :          <397>	retq
2387 :   store i64 %1516, i64* %RBP, !mcsema_real_eip !22 :          <397>	retq
2388 :   %1517 = load i64* %R8_val, !mcsema_real_eip !22 :          <397>	retq
2389 :   store i64 %1517, i64* %R8, !mcsema_real_eip !22 :          <397>	retq
2390 :   %1518 = load i64* %R9_val, !mcsema_real_eip !22 :          <397>	retq
2391 :   store i64 %1518, i64* %R9, !mcsema_real_eip !22 :          <397>	retq
2392 :   %1519 = load i64* %R10_val, !mcsema_real_eip !22 :          <397>	retq
2393 :   store i64 %1519, i64* %R10, !mcsema_real_eip !22 :          <397>	retq
2394 :   %1520 = load i64* %R11_val, !mcsema_real_eip !22 :          <397>	retq
2395 :   store i64 %1520, i64* %R11, !mcsema_real_eip !22 :          <397>	retq
2396 :   %1521 = load i64* %R12_val, !mcsema_real_eip !22 :          <397>	retq
2397 :   store i64 %1521, i64* %R12, !mcsema_real_eip !22 :          <397>	retq
2398 :   %1522 = load i64* %R13_val, !mcsema_real_eip !22 :          <397>	retq
2399 :   store i64 %1522, i64* %R13, !mcsema_real_eip !22 :          <397>	retq
2400 :   %1523 = load i64* %R14_val, !mcsema_real_eip !22 :          <397>	retq
2401 :   store i64 %1523, i64* %R14, !mcsema_real_eip !22 :          <397>	retq
2402 :   %1524 = load i64* %R15_val, !mcsema_real_eip !22 :          <397>	retq
2403 :   store i64 %1524, i64* %R15, !mcsema_real_eip !22 :          <397>	retq
2404 :   %1525 = load i64* %RIP_val, !mcsema_real_eip !22 :          <397>	retq
2405 :   store i64 %1525, i64* %RIP, !mcsema_real_eip !22 :          <397>	retq
2406 :   %1526 = load i1* %CF_val, !mcsema_real_eip !22 :          <397>	retq
2407 :   store i1 %1526, i1* %CF, align 1, !mcsema_real_eip !22 :          <397>	retq
2408 :   %1527 = load i1* %PF_val, !mcsema_real_eip !22 :          <397>	retq
2409 :   store i1 %1527, i1* %PF, align 1, !mcsema_real_eip !22 :          <397>	retq
2410 :   %1528 = load i1* %AF_val, !mcsema_real_eip !22 :          <397>	retq
2411 :   store i1 %1528, i1* %AF, align 1, !mcsema_real_eip !22 :          <397>	retq
2412 :   %1529 = load i1* %ZF_val, !mcsema_real_eip !22 :          <397>	retq
2413 :   store i1 %1529, i1* %ZF, align 1, !mcsema_real_eip !22 :          <397>	retq
2414 :   %1530 = load i1* %SF_val, !mcsema_real_eip !22 :          <397>	retq
2415 :   store i1 %1530, i1* %SF, align 1, !mcsema_real_eip !22 :          <397>	retq
2416 :   %1531 = load i1* %OF_val, !mcsema_real_eip !22 :          <397>	retq
2417 :   store i1 %1531, i1* %OF, align 1, !mcsema_real_eip !22 :          <397>	retq
2418 :   %1532 = load i1* %DF_val, !mcsema_real_eip !22 :          <397>	retq
2419 :   store i1 %1532, i1* %DF, align 1, !mcsema_real_eip !22 :          <397>	retq
2420 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !22 :          <397>	retq
2421 :   %1533 = load i1* %FPU_B_val, !mcsema_real_eip !22 :          <397>	retq
2422 :   store i1 %1533, i1* %FPU_B, align 1, !mcsema_real_eip !22 :          <397>	retq
2423 :   %1534 = load i1* %FPU_C3_val, !mcsema_real_eip !22 :          <397>	retq
2424 :   store i1 %1534, i1* %FPU_C3, align 1, !mcsema_real_eip !22 :          <397>	retq
2425 :   %1535 = load i3* %FPU_TOP_val, !mcsema_real_eip !22 :          <397>	retq
2426 :   store i3 %1535, i3* %FPU_TOP, align 1, !mcsema_real_eip !22 :          <397>	retq
2427 :   %1536 = load i1* %FPU_C2_val, !mcsema_real_eip !22 :          <397>	retq
2428 :   store i1 %1536, i1* %FPU_C2, align 1, !mcsema_real_eip !22 :          <397>	retq
2429 :   %1537 = load i1* %FPU_C1_val, !mcsema_real_eip !22 :          <397>	retq
2430 :   store i1 %1537, i1* %FPU_C1, align 1, !mcsema_real_eip !22 :          <397>	retq
2431 :   %1538 = load i1* %FPU_C0_val, !mcsema_real_eip !22 :          <397>	retq
2432 :   store i1 %1538, i1* %FPU_C0, align 1, !mcsema_real_eip !22 :          <397>	retq
2433 :   %1539 = load i1* %FPU_ES_val, !mcsema_real_eip !22 :          <397>	retq
2434 :   store i1 %1539, i1* %FPU_ES, align 1, !mcsema_real_eip !22 :          <397>	retq
2435 :   %1540 = load i1* %FPU_SF_val, !mcsema_real_eip !22 :          <397>	retq
2436 :   store i1 %1540, i1* %FPU_SF, align 1, !mcsema_real_eip !22 :          <397>	retq
2437 :   %1541 = load i1* %FPU_PE_val, !mcsema_real_eip !22 :          <397>	retq
2438 :   store i1 %1541, i1* %FPU_PE, align 1, !mcsema_real_eip !22 :          <397>	retq
2439 :   %1542 = load i1* %FPU_UE_val, !mcsema_real_eip !22 :          <397>	retq
2440 :   store i1 %1542, i1* %FPU_UE, align 1, !mcsema_real_eip !22 :          <397>	retq
2441 :   %1543 = load i1* %FPU_OE_val, !mcsema_real_eip !22 :          <397>	retq
2442 :   store i1 %1543, i1* %FPU_OE, align 1, !mcsema_real_eip !22 :          <397>	retq
2443 :   %1544 = load i1* %FPU_ZE_val, !mcsema_real_eip !22 :          <397>	retq
2444 :   store i1 %1544, i1* %FPU_ZE, align 1, !mcsema_real_eip !22 :          <397>	retq
2445 :   %1545 = load i1* %FPU_DE_val, !mcsema_real_eip !22 :          <397>	retq
2446 :   store i1 %1545, i1* %FPU_DE, align 1, !mcsema_real_eip !22 :          <397>	retq
2447 :   %1546 = load i1* %FPU_IE_val, !mcsema_real_eip !22 :          <397>	retq
2448 :   store i1 %1546, i1* %FPU_IE, align 1, !mcsema_real_eip !22 :          <397>	retq
2449 :   %1547 = load i1* %FPU_X_val, !mcsema_real_eip !22 :          <397>	retq
2450 :   store i1 %1547, i1* %FPU_X, align 1, !mcsema_real_eip !22 :          <397>	retq
2451 :   %1548 = load i2* %FPU_RC_val, !mcsema_real_eip !22 :          <397>	retq
2452 :   store i2 %1548, i2* %FPU_RC, align 1, !mcsema_real_eip !22 :          <397>	retq
2453 :   %1549 = load i2* %FPU_PC_val, !mcsema_real_eip !22 :          <397>	retq
2454 :   store i2 %1549, i2* %FPU_PC, align 1, !mcsema_real_eip !22 :          <397>	retq
2455 :   %1550 = load i1* %FPU_PM_val, !mcsema_real_eip !22 :          <397>	retq
2456 :   store i1 %1550, i1* %FPU_PM, align 1, !mcsema_real_eip !22 :          <397>	retq
2457 :   %1551 = load i1* %FPU_UM_val, !mcsema_real_eip !22 :          <397>	retq
2458 :   store i1 %1551, i1* %FPU_UM, align 1, !mcsema_real_eip !22 :          <397>	retq
2459 :   %1552 = load i1* %FPU_OM_val, !mcsema_real_eip !22 :          <397>	retq
2460 :   store i1 %1552, i1* %FPU_OM, align 1, !mcsema_real_eip !22 :          <397>	retq
2461 :   %1553 = load i1* %FPU_ZM_val, !mcsema_real_eip !22 :          <397>	retq
2462 :   store i1 %1553, i1* %FPU_ZM, align 1, !mcsema_real_eip !22 :          <397>	retq
2463 :   %1554 = load i1* %FPU_DM_val, !mcsema_real_eip !22 :          <397>	retq
2464 :   store i1 %1554, i1* %FPU_DM, align 1, !mcsema_real_eip !22 :          <397>	retq
2465 :   %1555 = load i1* %FPU_IM_val, !mcsema_real_eip !22 :          <397>	retq
2466 :   store i1 %1555, i1* %FPU_IM, align 1, !mcsema_real_eip !22 :          <397>	retq

2467 :   %1556 = load i64* %53, align 4 : NIL
2468 :   store i64 %1556, i64* %52, align 4 : NIL

2469 :   %1557 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !22 :          <397>	retq
2470 :   store i16 %1557, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !22 :          <397>	retq
2471 :   %1558 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !22 :          <397>	retq
2472 :   store i64 %1558, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !22 :          <397>	retq
2473 :   %1559 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !22 :          <397>	retq
2474 :   store i16 %1559, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !22 :          <397>	retq
2475 :   %1560 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !22 :          <397>	retq
2476 :   store i64 %1560, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !22 :          <397>	retq
2477 :   %1561 = load i128* %XMM0_val, !mcsema_real_eip !22 :          <397>	retq
2478 :   store i128 %1561, i128* %XMM0, align 1, !mcsema_real_eip !22 :          <397>	retq
2479 :   %1562 = load i128* %XMM1_val, !mcsema_real_eip !22 :          <397>	retq
2480 :   store i128 %1562, i128* %XMM1, align 1, !mcsema_real_eip !22 :          <397>	retq
2481 :   %1563 = load i128* %XMM2_val, !mcsema_real_eip !22 :          <397>	retq
2482 :   store i128 %1563, i128* %XMM2, align 1, !mcsema_real_eip !22 :          <397>	retq
2483 :   %1564 = load i128* %XMM3_val, !mcsema_real_eip !22 :          <397>	retq
2484 :   store i128 %1564, i128* %XMM3, align 1, !mcsema_real_eip !22 :          <397>	retq
2485 :   %1565 = load i128* %XMM4_val, !mcsema_real_eip !22 :          <397>	retq
2486 :   store i128 %1565, i128* %XMM4, align 1, !mcsema_real_eip !22 :          <397>	retq
2487 :   %1566 = load i128* %XMM5_val, !mcsema_real_eip !22 :          <397>	retq
2488 :   store i128 %1566, i128* %XMM5, align 1, !mcsema_real_eip !22 :          <397>	retq
2489 :   %1567 = load i128* %XMM6_val, !mcsema_real_eip !22 :          <397>	retq
2490 :   store i128 %1567, i128* %XMM6, align 1, !mcsema_real_eip !22 :          <397>	retq
2491 :   %1568 = load i128* %XMM7_val, !mcsema_real_eip !22 :          <397>	retq
2492 :   store i128 %1568, i128* %XMM7, align 1, !mcsema_real_eip !22 :          <397>	retq
2493 :   %1569 = load i128* %XMM8_val, !mcsema_real_eip !22 :          <397>	retq
2494 :   store i128 %1569, i128* %XMM8, align 1, !mcsema_real_eip !22 :          <397>	retq
2495 :   %1570 = load i128* %XMM9_val, !mcsema_real_eip !22 :          <397>	retq
2496 :   store i128 %1570, i128* %XMM9, align 1, !mcsema_real_eip !22 :          <397>	retq
2497 :   %1571 = load i128* %XMM10_val, !mcsema_real_eip !22 :          <397>	retq
2498 :   store i128 %1571, i128* %XMM10, align 1, !mcsema_real_eip !22 :          <397>	retq
2499 :   %1572 = load i128* %XMM11_val, !mcsema_real_eip !22 :          <397>	retq
2500 :   store i128 %1572, i128* %XMM11, align 1, !mcsema_real_eip !22 :          <397>	retq
2501 :   %1573 = load i128* %XMM12_val, !mcsema_real_eip !22 :          <397>	retq
2502 :   store i128 %1573, i128* %XMM12, align 1, !mcsema_real_eip !22 :          <397>	retq
2503 :   %1574 = load i128* %XMM13_val, !mcsema_real_eip !22 :          <397>	retq
2504 :   store i128 %1574, i128* %XMM13, align 1, !mcsema_real_eip !22 :          <397>	retq
2505 :   %1575 = load i128* %XMM14_val, !mcsema_real_eip !22 :          <397>	retq
2506 :   store i128 %1575, i128* %XMM14, align 1, !mcsema_real_eip !22 :          <397>	retq
2507 :   %1576 = load i128* %XMM15_val, !mcsema_real_eip !22 :          <397>	retq
2508 :   store i128 %1576, i128* %XMM15, align 1, !mcsema_real_eip !22 :          <397>	retq
2509 :   %1577 = load i64* %STACK_BASE_val, !mcsema_real_eip !22 :          <397>	retq
2510 :   store i64 %1577, i64* %STACK_BASE, align 1, !mcsema_real_eip !22 :          <397>	retq
2511 :   %1578 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !22 :          <397>	retq
2512 :   store i64 %1578, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !22 :          <397>	retq
2513 :   ret void, !mcsema_real_eip !22 :          <397>	retq

2514 :   %1579 = add i64 %1414, -72, !mcsema_real_eip !215 :          <31a>	movq	-72(%rbp), %rax
2515 :   %1580 = inttoptr i64 %1579 to i64*, !mcsema_real_eip !215 :          <31a>	movq	-72(%rbp), %rax
2516 :   %1581 = load i64* %1580, !mcsema_real_eip !215 :          <31a>	movq	-72(%rbp), %rax

2517 :   %uadd225 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1581, i64 30) : NIL
2518 :   %1582 = extractvalue { i64, i1 } %uadd225, 0 : NIL

2519 :   %1583 = xor i64 %1582, %1581, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax

2520 :   %1584 = and i64 %1583, 16 : NIL
2521 :   %1585 = icmp eq i64 %1584, 0 : NIL

2522 :   store i1 %1585, i1* %AF_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax

2523 :   %1586 = icmp slt i64 %1582, 0 : NIL

2524 :   store i1 %1586, i1* %SF_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2525 :   %1587 = icmp eq i64 %1582, 0, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2526 :   store i1 %1587, i1* %ZF_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2527 :   %1588 = xor i64 %1581, -9223372036854775808, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2528 :   %1589 = and i64 %1583, %1588, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax

2529 :   %1590 = icmp slt i64 %1589, 0 : NIL

2530 :   store i1 %1590, i1* %OF_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2531 :   %1591 = trunc i64 %1582 to i8, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2532 :   %1592 = tail call i8 @llvm.ctpop.i8(i8 %1591), !mcsema_real_eip !216 :          <31e>	addq	$30, %rax

2533 :   %1593 = and i8 %1592, 1 : NIL
2534 :   %1594 = icmp eq i8 %1593, 0 : NIL

2535 :   store i1 %1594, i1* %PF_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax

2536 :   %1595 = extractvalue { i64, i1 } %uadd225, 1 : NIL

2537 :   store i1 %1595, i1* %CF_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax
2538 :   store i64 %1582, i64* %RAX_val, !mcsema_real_eip !216 :          <31e>	addq	$30, %rax

2539 :   %1596 = inttoptr i64 %1582 to i64*, !mcsema_real_eip !217 :          <322>	movzbl	(%rax), %eax

2540 :   %1597 = bitcast i64* %1596 to i8* : NIL

2541 :   %1598 = load i8* %1597, !mcsema_real_eip !217 :          <322>	movzbl	(%rax), %eax

2542 :   %1599 = zext i8 %1598 to i64 : NIL

2543 :   store i64 %1599, i64* %RAX_val, !mcsema_real_eip !217 :          <322>	movzbl	(%rax), %eax

2544 :   %1600 = sext i8 %1598 to i32, !mcsema_real_eip !218 :          <325>	movsbl	%al, %edx
2545 :   %1601 = zext i32 %1600 to i64, !mcsema_real_eip !218 :          <325>	movsbl	%al, %edx
2546 :   store i64 %1601, i64* %RDX_val, !mcsema_real_eip !218 :          <325>	movsbl	%al, %edx

2547 :   %1602 = load i64* %RBP_val, !mcsema_real_eip !219 :          <328>	movq	-72(%rbp), %rax
2548 :   %1603 = add i64 %1602, -72, !mcsema_real_eip !219 :          <328>	movq	-72(%rbp), %rax
2549 :   %1604 = inttoptr i64 %1603 to i64*, !mcsema_real_eip !219 :          <328>	movq	-72(%rbp), %rax
2550 :   %1605 = load i64* %1604, !mcsema_real_eip !219 :          <328>	movq	-72(%rbp), %rax

2551 :   %uadd226 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1605, i64 31) : NIL
2552 :   %1606 = extractvalue { i64, i1 } %uadd226, 0 : NIL

2553 :   %1607 = xor i64 %1606, %1605, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax

2554 :   %1608 = and i64 %1607, 16 : NIL
2555 :   %1609 = icmp eq i64 %1608, 0 : NIL

2556 :   store i1 %1609, i1* %AF_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax

2557 :   %1610 = icmp slt i64 %1606, 0 : NIL

2558 :   store i1 %1610, i1* %SF_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2559 :   %1611 = icmp eq i64 %1606, 0, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2560 :   store i1 %1611, i1* %ZF_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2561 :   %1612 = xor i64 %1605, -9223372036854775808, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2562 :   %1613 = and i64 %1607, %1612, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax

2563 :   %1614 = icmp slt i64 %1613, 0 : NIL

2564 :   store i1 %1614, i1* %OF_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2565 :   %1615 = trunc i64 %1606 to i8, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2566 :   %1616 = tail call i8 @llvm.ctpop.i8(i8 %1615), !mcsema_real_eip !220 :          <32c>	addq	$31, %rax

2567 :   %1617 = and i8 %1616, 1 : NIL
2568 :   %1618 = icmp eq i8 %1617, 0 : NIL

2569 :   store i1 %1618, i1* %PF_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax

2570 :   %1619 = extractvalue { i64, i1 } %uadd226, 1 : NIL

2571 :   store i1 %1619, i1* %CF_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax
2572 :   store i64 %1606, i64* %RAX_val, !mcsema_real_eip !220 :          <32c>	addq	$31, %rax

2573 :   %1620 = inttoptr i64 %1606 to i64*, !mcsema_real_eip !221 :          <330>	movzbl	(%rax), %eax

2574 :   %1621 = bitcast i64* %1620 to i8* : NIL

2575 :   %1622 = load i8* %1621, !mcsema_real_eip !221 :          <330>	movzbl	(%rax), %eax

2576 :   %1623 = sext i8 %1622 to i32, !mcsema_real_eip !222 :          <333>	movsbl	%al, %eax

2577 :   %1624 = load i64* %RDX_val, !mcsema_real_eip !223 :          <336>	subl	%eax, %edx
2578 :   %1625 = trunc i64 %1624 to i32, !mcsema_real_eip !223 :          <336>	subl	%eax, %edx
2579 :   %1626 = sub i32 %1625, %1623, !mcsema_real_eip !223 :          <336>	subl	%eax, %edx
2580 :   %1627 = zext i32 %1626 to i64, !mcsema_real_eip !223 :          <336>	subl	%eax, %edx
2581 :   store i64 %1627, i64* %RDX_val, !mcsema_real_eip !223 :          <336>	subl	%eax, %edx

2582 :   %uadd227 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %1626, i32 15) : NIL
2583 :   %1628 = extractvalue { i32, i1 } %uadd227, 0 : NIL

2584 :   %1629 = xor i32 %1628, %1626, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2585 :   %1630 = and i32 %1629, 16, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2586 :   %1631 = icmp ne i32 %1630, 0, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2587 :   store i1 %1631, i1* %AF_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax

2588 :   %1632 = icmp slt i32 %1628, 0 : NIL

2589 :   store i1 %1632, i1* %SF_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2590 :   %1633 = icmp eq i32 %1628, 0, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2591 :   store i1 %1633, i1* %ZF_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2592 :   %1634 = xor i32 %1626, -2147483648, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2593 :   %1635 = and i32 %1629, %1634, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax

2594 :   %1636 = icmp slt i32 %1635, 0 : NIL

2595 :   store i1 %1636, i1* %OF_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2596 :   %1637 = trunc i32 %1628 to i8, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2597 :   %1638 = tail call i8 @llvm.ctpop.i8(i8 %1637), !mcsema_real_eip !224 :          <33a>	addl	$15, %eax

2598 :   %1639 = and i8 %1638, 1 : NIL
2599 :   %1640 = icmp eq i8 %1639, 0 : NIL

2600 :   store i1 %1640, i1* %PF_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax

2601 :   %1641 = extractvalue { i32, i1 } %uadd227, 1 : NIL

2602 :   store i1 %1641, i1* %CF_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2603 :   %1642 = zext i32 %1628 to i64, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax
2604 :   store i64 %1642, i64* %RAX_val, !mcsema_real_eip !224 :          <33a>	addl	$15, %eax

2605 :   %1643 = load i64* %RBP_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2606 :   %1644 = add i64 %1643, -20, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2607 :   %1645 = inttoptr i64 %1644 to i64*, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2608 :   %1646 = bitcast i64* %1645 to i32* : NIL

2609 :   %1647 = load i32* %1646, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2610 :   %uadd228 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %1628, i32 %1647) : NIL
2611 :   %1648 = extractvalue { i32, i1 } %uadd228, 0 : NIL

2612 :   %1649 = xor i32 %1648, %1647, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2613 :   %1650 = xor i32 %1649, %1628, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2614 :   %1651 = and i32 %1650, 16, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2615 :   %1652 = icmp ne i32 %1651, 0, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2616 :   store i1 %1652, i1* %AF_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2617 :   %1653 = icmp slt i32 %1648, 0 : NIL

2618 :   store i1 %1653, i1* %SF_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2619 :   %1654 = icmp eq i32 %1648, 0, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2620 :   store i1 %1654, i1* %ZF_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2621 :   %1655 = xor i32 %1628, -2147483648, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2622 :   %1656 = xor i32 %1655, %1647, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2623 :   %1657 = and i32 %1649, %1656, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2624 :   %1658 = icmp slt i32 %1657, 0 : NIL

2625 :   store i1 %1658, i1* %OF_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2626 :   %1659 = trunc i32 %1648 to i8, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2627 :   %1660 = tail call i8 @llvm.ctpop.i8(i8 %1659), !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2628 :   %1661 = and i8 %1660, 1 : NIL
2629 :   %1662 = icmp eq i8 %1661, 0 : NIL

2630 :   store i1 %1662, i1* %PF_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2631 :   %1663 = extractvalue { i32, i1 } %uadd228, 1 : NIL

2632 :   store i1 %1663, i1* %CF_val, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)
2633 :   store i32 %1648, i32* %1646, !mcsema_real_eip !225 :          <33d>	addl	%eax, -20(%rbp)

2634 :   %1664 = load i64* %RBP_val, !mcsema_real_eip !226 :          <340>	movl	-20(%rbp), %ebx
2635 :   %1665 = add i64 %1664, -20, !mcsema_real_eip !226 :          <340>	movl	-20(%rbp), %ebx
2636 :   %1666 = inttoptr i64 %1665 to i64*, !mcsema_real_eip !226 :          <340>	movl	-20(%rbp), %ebx

2637 :   %1667 = bitcast i64* %1666 to i32* : NIL

2638 :   %1668 = load i32* %1667, !mcsema_real_eip !226 :          <340>	movl	-20(%rbp), %ebx
2639 :   %1669 = zext i32 %1668 to i64, !mcsema_real_eip !226 :          <340>	movl	-20(%rbp), %ebx
2640 :   store i64 %1669, i64* %RBX_val, !mcsema_real_eip !226 :          <340>	movl	-20(%rbp), %ebx

2641 :   %1670 = load i64* %RBP_val, !mcsema_real_eip !227 :          <343>	movq	-72(%rbp), %rax
2642 :   %1671 = add i64 %1670, -72, !mcsema_real_eip !227 :          <343>	movq	-72(%rbp), %rax
2643 :   %1672 = inttoptr i64 %1671 to i64*, !mcsema_real_eip !227 :          <343>	movq	-72(%rbp), %rax
2644 :   %1673 = load i64* %1672, !mcsema_real_eip !227 :          <343>	movq	-72(%rbp), %rax

2645 :   %uadd229 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1673, i64 28) : NIL
2646 :   %1674 = extractvalue { i64, i1 } %uadd229, 0 : NIL

2647 :   %1675 = xor i64 %1674, %1673, !mcsema_real_eip !228 :          <347>	addq	$28, %rax

2648 :   %1676 = and i64 %1675, 16 : NIL
2649 :   %1677 = icmp eq i64 %1676, 0 : NIL

2650 :   store i1 %1677, i1* %AF_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax

2651 :   %1678 = icmp slt i64 %1674, 0 : NIL

2652 :   store i1 %1678, i1* %SF_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2653 :   %1679 = icmp eq i64 %1674, 0, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2654 :   store i1 %1679, i1* %ZF_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2655 :   %1680 = xor i64 %1673, -9223372036854775808, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2656 :   %1681 = and i64 %1675, %1680, !mcsema_real_eip !228 :          <347>	addq	$28, %rax

2657 :   %1682 = icmp slt i64 %1681, 0 : NIL

2658 :   store i1 %1682, i1* %OF_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2659 :   %1683 = trunc i64 %1674 to i8, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2660 :   %1684 = tail call i8 @llvm.ctpop.i8(i8 %1683), !mcsema_real_eip !228 :          <347>	addq	$28, %rax

2661 :   %1685 = and i8 %1684, 1 : NIL
2662 :   %1686 = icmp eq i8 %1685, 0 : NIL

2663 :   store i1 %1686, i1* %PF_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax

2664 :   %1687 = extractvalue { i64, i1 } %uadd229, 1 : NIL

2665 :   store i1 %1687, i1* %CF_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax
2666 :   store i64 %1674, i64* %RAX_val, !mcsema_real_eip !228 :          <347>	addq	$28, %rax

2667 :   %1688 = inttoptr i64 %1674 to i64*, !mcsema_real_eip !229 :          <34b>	movzbl	(%rax), %eax

2668 :   %1689 = bitcast i64* %1688 to i8* : NIL

2669 :   %1690 = load i8* %1689, !mcsema_real_eip !229 :          <34b>	movzbl	(%rax), %eax

2670 :   %1691 = zext i8 %1690 to i64 : NIL

2671 :   store i64 %1691, i64* %RDI_val, !mcsema_real_eip !230 :          <351>	movl	%eax, %edi

2672 :   %1692 = tail call x86_64_sysvcc i64 @to_byte(i64 %1691), !mcsema_real_eip !231 :          <353>	callq	0

2673 :   %1693 = load i64* %RBX_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2674 :   %1694 = trunc i64 %1693 to i32, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2675 :   %1695 = trunc i64 %1692 to i32, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2676 :   %1696 = sub i32 %1694, %1695, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2677 :   %1697 = xor i32 %1696, %1694, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2678 :   %1698 = xor i32 %1697, %1695, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2679 :   %1699 = and i32 %1698, 16, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2680 :   %1700 = icmp ne i32 %1699, 0, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2681 :   store i1 %1700, i1* %AF_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2682 :   %1701 = trunc i32 %1696 to i8, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2683 :   %1702 = tail call i8 @llvm.ctpop.i8(i8 %1701), !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx

2684 :   %1703 = and i8 %1702, 1 : NIL
2685 :   %1704 = icmp eq i8 %1703, 0 : NIL

2686 :   store i1 %1704, i1* %PF_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx

2687 :   %1705 = icmp eq i32 %1694, %1695 : NIL

2688 :   store i1 %1705, i1* %ZF_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx

2689 :   %1706 = icmp slt i32 %1696, 0 : NIL

2690 :   store i1 %1706, i1* %SF_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2691 :   %1707 = icmp ult i32 %1694, %1695, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2692 :   store i1 %1707, i1* %CF_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx

2693 :   %1708 = xor i64 %1693, %1692 : NIL
2694 :   %1709 = trunc i64 %1708 to i32 : NIL

2695 :   %1710 = and i32 %1697, %1709, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx

2696 :   %1711 = icmp slt i32 %1710, 0 : NIL

2697 :   store i1 %1711, i1* %OF_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2698 :   %1712 = zext i32 %1696 to i64, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx
2699 :   store i64 %1712, i64* %RBX_val, !mcsema_real_eip !232 :          <358>	subl	%eax, %ebx

2700 :   store i64 %1712, i64* %RAX_val, !mcsema_real_eip !233 :          <35a>	movl	%ebx, %eax

2701 :   %1713 = load i64* %RBP_val, !mcsema_real_eip !234 :          <35c>	movl	%eax, -20(%rbp)
2702 :   %1714 = add i64 %1713, -20, !mcsema_real_eip !234 :          <35c>	movl	%eax, -20(%rbp)
2703 :   %1715 = inttoptr i64 %1714 to i64*, !mcsema_real_eip !234 :          <35c>	movl	%eax, -20(%rbp)

2704 :   %1716 = bitcast i64* %1715 to i32* : NIL

2705 :   store i32 %1696, i32* %1716, !mcsema_real_eip !234 :          <35c>	movl	%eax, -20(%rbp)

2706 :   %1717 = load i64* %RBP_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2707 :   %1718 = add i64 %1717, -20, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2708 :   %1719 = inttoptr i64 %1718 to i64*, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)

2709 :   %1720 = bitcast i64* %1719 to i32* : NIL

2710 :   %1721 = load i32* %1720, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2711 :   store i1 false, i1* %AF_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2712 :   %1722 = trunc i32 %1721 to i8, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2713 :   %1723 = tail call i8 @llvm.ctpop.i8(i8 %1722), !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)

2714 :   %1724 = and i8 %1723, 1 : NIL
2715 :   %1725 = icmp eq i8 %1724, 0 : NIL

2716 :   store i1 %1725, i1* %PF_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2717 :   %1726 = icmp eq i32 %1721, 0, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2718 :   store i1 %1726, i1* %ZF_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)

2719 :   %1727 = icmp slt i32 %1721, 0 : NIL

2720 :   store i1 %1727, i1* %SF_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2721 :   store i1 false, i1* %CF_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)
2722 :   store i1 false, i1* %OF_val, !mcsema_real_eip !235 :          <35f>	cmpl	$0, -20(%rbp)

2723 :   br i1 %1726, label %block_0x365, label %block_0x38e, !mcsema_real_eip !236 :          <363>	jne	41

2724 :   %1728 = load i64* %RBP_val, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2725 :   %1729 = add i64 %1728, -20, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2726 :   %1730 = inttoptr i64 %1729 to i64*, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax

2727 :   %1731 = bitcast i64* %1730 to i32* : NIL

2728 :   %1732 = load i32* %1731, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2729 :   %1733 = zext i32 %1732 to i64, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax
2730 :   store i64 %1733, i64* %RAX_val, !mcsema_real_eip !214 :          <38e>	movl	-20(%rbp), %eax

2731 :   %1734 = load i64* %RSP_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2732 :   %uadd222 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1734, i64 72) : NIL
2733 :   %1735 = extractvalue { i64, i1 } %uadd222, 0 : NIL

2734 :   %1736 = xor i64 %1735, %1734, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2735 :   %1737 = and i64 %1736, 16, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2736 :   %1738 = icmp ne i64 %1737, 0, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2737 :   store i1 %1738, i1* %AF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2738 :   %1739 = icmp slt i64 %1735, 0 : NIL

2739 :   store i1 %1739, i1* %SF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2740 :   %1740 = icmp eq i64 %1735, 0, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2741 :   store i1 %1740, i1* %ZF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2742 :   %1741 = xor i64 %1734, -9223372036854775808, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2743 :   %1742 = and i64 %1736, %1741, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2744 :   %1743 = icmp slt i64 %1742, 0 : NIL

2745 :   store i1 %1743, i1* %OF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2746 :   %1744 = trunc i64 %1735 to i8, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2747 :   %1745 = tail call i8 @llvm.ctpop.i8(i8 %1744), !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2748 :   %1746 = and i8 %1745, 1 : NIL
2749 :   %1747 = icmp eq i8 %1746, 0 : NIL

2750 :   store i1 %1747, i1* %PF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2751 :   %1748 = extractvalue { i64, i1 } %uadd222, 1 : NIL

2752 :   store i1 %1748, i1* %CF_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp
2753 :   store i64 %1735, i64* %RSP_val, !mcsema_real_eip !19 :          <391>	addq	$72, %rsp

2754 :   %1749 = inttoptr i64 %1735 to i64*, !mcsema_real_eip !20 :          <395>	popq	%rbx
2755 :   %1750 = load i64* %1749, !mcsema_real_eip !20 :          <395>	popq	%rbx
2756 :   store i64 %1750, i64* %RBX_val, !mcsema_real_eip !20 :          <395>	popq	%rbx
2757 :   %1751 = add i64 %1735, 8, !mcsema_real_eip !20 :          <395>	popq	%rbx
2758 :   store i64 %1751, i64* %RSP_val, !mcsema_real_eip !20 :          <395>	popq	%rbx

2759 :   %1752 = inttoptr i64 %1751 to i64*, !mcsema_real_eip !21 :          <396>	popq	%rbp
2760 :   %1753 = load i64* %1752, !mcsema_real_eip !21 :          <396>	popq	%rbp
2761 :   store i64 %1753, i64* %RBP_val, !mcsema_real_eip !21 :          <396>	popq	%rbp

2762 :   %1754 = add i64 %1735, 24, !mcsema_real_eip !22 :          <397>	retq
2763 :   store i64 %1754, i64* %RSP_val, !mcsema_real_eip !22 :          <397>	retq
2764 :   %1755 = load i64* %RAX_val, !mcsema_real_eip !22 :          <397>	retq
2765 :   store i64 %1755, i64* %RAX, !mcsema_real_eip !22 :          <397>	retq
2766 :   %1756 = load i64* %RBX_val, !mcsema_real_eip !22 :          <397>	retq
2767 :   store i64 %1756, i64* %RBX, !mcsema_real_eip !22 :          <397>	retq
2768 :   %1757 = load i64* %RCX_val, !mcsema_real_eip !22 :          <397>	retq
2769 :   store i64 %1757, i64* %RCX, !mcsema_real_eip !22 :          <397>	retq
2770 :   %1758 = load i64* %RDX_val, !mcsema_real_eip !22 :          <397>	retq
2771 :   store i64 %1758, i64* %RDX, !mcsema_real_eip !22 :          <397>	retq
2772 :   %1759 = load i64* %RSI_val, !mcsema_real_eip !22 :          <397>	retq
2773 :   store i64 %1759, i64* %RSI, !mcsema_real_eip !22 :          <397>	retq
2774 :   %1760 = load i64* %RDI_val, !mcsema_real_eip !22 :          <397>	retq
2775 :   store i64 %1760, i64* %RDI, !mcsema_real_eip !22 :          <397>	retq
2776 :   %1761 = load i64* %RSP_val, !mcsema_real_eip !22 :          <397>	retq
2777 :   store i64 %1761, i64* %RSP, !mcsema_real_eip !22 :          <397>	retq
2778 :   %1762 = load i64* %RBP_val, !mcsema_real_eip !22 :          <397>	retq
2779 :   store i64 %1762, i64* %RBP, !mcsema_real_eip !22 :          <397>	retq
2780 :   %1763 = load i64* %R8_val, !mcsema_real_eip !22 :          <397>	retq
2781 :   store i64 %1763, i64* %R8, !mcsema_real_eip !22 :          <397>	retq
2782 :   %1764 = load i64* %R9_val, !mcsema_real_eip !22 :          <397>	retq
2783 :   store i64 %1764, i64* %R9, !mcsema_real_eip !22 :          <397>	retq
2784 :   %1765 = load i64* %R10_val, !mcsema_real_eip !22 :          <397>	retq
2785 :   store i64 %1765, i64* %R10, !mcsema_real_eip !22 :          <397>	retq
2786 :   %1766 = load i64* %R11_val, !mcsema_real_eip !22 :          <397>	retq
2787 :   store i64 %1766, i64* %R11, !mcsema_real_eip !22 :          <397>	retq
2788 :   %1767 = load i64* %R12_val, !mcsema_real_eip !22 :          <397>	retq
2789 :   store i64 %1767, i64* %R12, !mcsema_real_eip !22 :          <397>	retq
2790 :   %1768 = load i64* %R13_val, !mcsema_real_eip !22 :          <397>	retq
2791 :   store i64 %1768, i64* %R13, !mcsema_real_eip !22 :          <397>	retq
2792 :   %1769 = load i64* %R14_val, !mcsema_real_eip !22 :          <397>	retq
2793 :   store i64 %1769, i64* %R14, !mcsema_real_eip !22 :          <397>	retq
2794 :   %1770 = load i64* %R15_val, !mcsema_real_eip !22 :          <397>	retq
2795 :   store i64 %1770, i64* %R15, !mcsema_real_eip !22 :          <397>	retq
2796 :   %1771 = load i64* %RIP_val, !mcsema_real_eip !22 :          <397>	retq
2797 :   store i64 %1771, i64* %RIP, !mcsema_real_eip !22 :          <397>	retq
2798 :   %1772 = load i1* %CF_val, !mcsema_real_eip !22 :          <397>	retq
2799 :   store i1 %1772, i1* %CF, align 1, !mcsema_real_eip !22 :          <397>	retq
2800 :   %1773 = load i1* %PF_val, !mcsema_real_eip !22 :          <397>	retq
2801 :   store i1 %1773, i1* %PF, align 1, !mcsema_real_eip !22 :          <397>	retq
2802 :   %1774 = load i1* %AF_val, !mcsema_real_eip !22 :          <397>	retq
2803 :   store i1 %1774, i1* %AF, align 1, !mcsema_real_eip !22 :          <397>	retq
2804 :   %1775 = load i1* %ZF_val, !mcsema_real_eip !22 :          <397>	retq
2805 :   store i1 %1775, i1* %ZF, align 1, !mcsema_real_eip !22 :          <397>	retq
2806 :   %1776 = load i1* %SF_val, !mcsema_real_eip !22 :          <397>	retq
2807 :   store i1 %1776, i1* %SF, align 1, !mcsema_real_eip !22 :          <397>	retq
2808 :   %1777 = load i1* %OF_val, !mcsema_real_eip !22 :          <397>	retq
2809 :   store i1 %1777, i1* %OF, align 1, !mcsema_real_eip !22 :          <397>	retq
2810 :   %1778 = load i1* %DF_val, !mcsema_real_eip !22 :          <397>	retq
2811 :   store i1 %1778, i1* %DF, align 1, !mcsema_real_eip !22 :          <397>	retq
2812 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !22 :          <397>	retq
2813 :   %1779 = load i1* %FPU_B_val, !mcsema_real_eip !22 :          <397>	retq
2814 :   store i1 %1779, i1* %FPU_B, align 1, !mcsema_real_eip !22 :          <397>	retq
2815 :   %1780 = load i1* %FPU_C3_val, !mcsema_real_eip !22 :          <397>	retq
2816 :   store i1 %1780, i1* %FPU_C3, align 1, !mcsema_real_eip !22 :          <397>	retq
2817 :   %1781 = load i3* %FPU_TOP_val, !mcsema_real_eip !22 :          <397>	retq
2818 :   store i3 %1781, i3* %FPU_TOP, align 1, !mcsema_real_eip !22 :          <397>	retq
2819 :   %1782 = load i1* %FPU_C2_val, !mcsema_real_eip !22 :          <397>	retq
2820 :   store i1 %1782, i1* %FPU_C2, align 1, !mcsema_real_eip !22 :          <397>	retq
2821 :   %1783 = load i1* %FPU_C1_val, !mcsema_real_eip !22 :          <397>	retq
2822 :   store i1 %1783, i1* %FPU_C1, align 1, !mcsema_real_eip !22 :          <397>	retq
2823 :   %1784 = load i1* %FPU_C0_val, !mcsema_real_eip !22 :          <397>	retq
2824 :   store i1 %1784, i1* %FPU_C0, align 1, !mcsema_real_eip !22 :          <397>	retq
2825 :   %1785 = load i1* %FPU_ES_val, !mcsema_real_eip !22 :          <397>	retq
2826 :   store i1 %1785, i1* %FPU_ES, align 1, !mcsema_real_eip !22 :          <397>	retq
2827 :   %1786 = load i1* %FPU_SF_val, !mcsema_real_eip !22 :          <397>	retq
2828 :   store i1 %1786, i1* %FPU_SF, align 1, !mcsema_real_eip !22 :          <397>	retq
2829 :   %1787 = load i1* %FPU_PE_val, !mcsema_real_eip !22 :          <397>	retq
2830 :   store i1 %1787, i1* %FPU_PE, align 1, !mcsema_real_eip !22 :          <397>	retq
2831 :   %1788 = load i1* %FPU_UE_val, !mcsema_real_eip !22 :          <397>	retq
2832 :   store i1 %1788, i1* %FPU_UE, align 1, !mcsema_real_eip !22 :          <397>	retq
2833 :   %1789 = load i1* %FPU_OE_val, !mcsema_real_eip !22 :          <397>	retq
2834 :   store i1 %1789, i1* %FPU_OE, align 1, !mcsema_real_eip !22 :          <397>	retq
2835 :   %1790 = load i1* %FPU_ZE_val, !mcsema_real_eip !22 :          <397>	retq
2836 :   store i1 %1790, i1* %FPU_ZE, align 1, !mcsema_real_eip !22 :          <397>	retq
2837 :   %1791 = load i1* %FPU_DE_val, !mcsema_real_eip !22 :          <397>	retq
2838 :   store i1 %1791, i1* %FPU_DE, align 1, !mcsema_real_eip !22 :          <397>	retq
2839 :   %1792 = load i1* %FPU_IE_val, !mcsema_real_eip !22 :          <397>	retq
2840 :   store i1 %1792, i1* %FPU_IE, align 1, !mcsema_real_eip !22 :          <397>	retq
2841 :   %1793 = load i1* %FPU_X_val, !mcsema_real_eip !22 :          <397>	retq
2842 :   store i1 %1793, i1* %FPU_X, align 1, !mcsema_real_eip !22 :          <397>	retq
2843 :   %1794 = load i2* %FPU_RC_val, !mcsema_real_eip !22 :          <397>	retq
2844 :   store i2 %1794, i2* %FPU_RC, align 1, !mcsema_real_eip !22 :          <397>	retq
2845 :   %1795 = load i2* %FPU_PC_val, !mcsema_real_eip !22 :          <397>	retq
2846 :   store i2 %1795, i2* %FPU_PC, align 1, !mcsema_real_eip !22 :          <397>	retq
2847 :   %1796 = load i1* %FPU_PM_val, !mcsema_real_eip !22 :          <397>	retq
2848 :   store i1 %1796, i1* %FPU_PM, align 1, !mcsema_real_eip !22 :          <397>	retq
2849 :   %1797 = load i1* %FPU_UM_val, !mcsema_real_eip !22 :          <397>	retq
2850 :   store i1 %1797, i1* %FPU_UM, align 1, !mcsema_real_eip !22 :          <397>	retq
2851 :   %1798 = load i1* %FPU_OM_val, !mcsema_real_eip !22 :          <397>	retq
2852 :   store i1 %1798, i1* %FPU_OM, align 1, !mcsema_real_eip !22 :          <397>	retq
2853 :   %1799 = load i1* %FPU_ZM_val, !mcsema_real_eip !22 :          <397>	retq
2854 :   store i1 %1799, i1* %FPU_ZM, align 1, !mcsema_real_eip !22 :          <397>	retq
2855 :   %1800 = load i1* %FPU_DM_val, !mcsema_real_eip !22 :          <397>	retq
2856 :   store i1 %1800, i1* %FPU_DM, align 1, !mcsema_real_eip !22 :          <397>	retq
2857 :   %1801 = load i1* %FPU_IM_val, !mcsema_real_eip !22 :          <397>	retq
2858 :   store i1 %1801, i1* %FPU_IM, align 1, !mcsema_real_eip !22 :          <397>	retq

2859 :   %1802 = load i64* %53, align 4 : NIL
2860 :   store i64 %1802, i64* %52, align 4 : NIL

2861 :   %1803 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !22 :          <397>	retq
2862 :   store i16 %1803, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !22 :          <397>	retq
2863 :   %1804 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !22 :          <397>	retq
2864 :   store i64 %1804, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !22 :          <397>	retq
2865 :   %1805 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !22 :          <397>	retq
2866 :   store i16 %1805, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !22 :          <397>	retq
2867 :   %1806 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !22 :          <397>	retq
2868 :   store i64 %1806, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !22 :          <397>	retq
2869 :   %1807 = load i128* %XMM0_val, !mcsema_real_eip !22 :          <397>	retq
2870 :   store i128 %1807, i128* %XMM0, align 1, !mcsema_real_eip !22 :          <397>	retq
2871 :   %1808 = load i128* %XMM1_val, !mcsema_real_eip !22 :          <397>	retq
2872 :   store i128 %1808, i128* %XMM1, align 1, !mcsema_real_eip !22 :          <397>	retq
2873 :   %1809 = load i128* %XMM2_val, !mcsema_real_eip !22 :          <397>	retq
2874 :   store i128 %1809, i128* %XMM2, align 1, !mcsema_real_eip !22 :          <397>	retq
2875 :   %1810 = load i128* %XMM3_val, !mcsema_real_eip !22 :          <397>	retq
2876 :   store i128 %1810, i128* %XMM3, align 1, !mcsema_real_eip !22 :          <397>	retq
2877 :   %1811 = load i128* %XMM4_val, !mcsema_real_eip !22 :          <397>	retq
2878 :   store i128 %1811, i128* %XMM4, align 1, !mcsema_real_eip !22 :          <397>	retq
2879 :   %1812 = load i128* %XMM5_val, !mcsema_real_eip !22 :          <397>	retq
2880 :   store i128 %1812, i128* %XMM5, align 1, !mcsema_real_eip !22 :          <397>	retq
2881 :   %1813 = load i128* %XMM6_val, !mcsema_real_eip !22 :          <397>	retq
2882 :   store i128 %1813, i128* %XMM6, align 1, !mcsema_real_eip !22 :          <397>	retq
2883 :   %1814 = load i128* %XMM7_val, !mcsema_real_eip !22 :          <397>	retq
2884 :   store i128 %1814, i128* %XMM7, align 1, !mcsema_real_eip !22 :          <397>	retq
2885 :   %1815 = load i128* %XMM8_val, !mcsema_real_eip !22 :          <397>	retq
2886 :   store i128 %1815, i128* %XMM8, align 1, !mcsema_real_eip !22 :          <397>	retq
2887 :   %1816 = load i128* %XMM9_val, !mcsema_real_eip !22 :          <397>	retq
2888 :   store i128 %1816, i128* %XMM9, align 1, !mcsema_real_eip !22 :          <397>	retq
2889 :   %1817 = load i128* %XMM10_val, !mcsema_real_eip !22 :          <397>	retq
2890 :   store i128 %1817, i128* %XMM10, align 1, !mcsema_real_eip !22 :          <397>	retq
2891 :   %1818 = load i128* %XMM11_val, !mcsema_real_eip !22 :          <397>	retq
2892 :   store i128 %1818, i128* %XMM11, align 1, !mcsema_real_eip !22 :          <397>	retq
2893 :   %1819 = load i128* %XMM12_val, !mcsema_real_eip !22 :          <397>	retq
2894 :   store i128 %1819, i128* %XMM12, align 1, !mcsema_real_eip !22 :          <397>	retq
2895 :   %1820 = load i128* %XMM13_val, !mcsema_real_eip !22 :          <397>	retq
2896 :   store i128 %1820, i128* %XMM13, align 1, !mcsema_real_eip !22 :          <397>	retq
2897 :   %1821 = load i128* %XMM14_val, !mcsema_real_eip !22 :          <397>	retq
2898 :   store i128 %1821, i128* %XMM14, align 1, !mcsema_real_eip !22 :          <397>	retq
2899 :   %1822 = load i128* %XMM15_val, !mcsema_real_eip !22 :          <397>	retq
2900 :   store i128 %1822, i128* %XMM15, align 1, !mcsema_real_eip !22 :          <397>	retq
2901 :   %1823 = load i64* %STACK_BASE_val, !mcsema_real_eip !22 :          <397>	retq
2902 :   store i64 %1823, i64* %STACK_BASE, align 1, !mcsema_real_eip !22 :          <397>	retq
2903 :   %1824 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !22 :          <397>	retq
2904 :   store i64 %1824, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !22 :          <397>	retq
2905 :   ret void, !mcsema_real_eip !22 :          <397>	retq

2906 :   %1825 = load i64* %RBP_val, !mcsema_real_eip !237 :          <365>	movq	-72(%rbp), %rax
2907 :   %1826 = add i64 %1825, -72, !mcsema_real_eip !237 :          <365>	movq	-72(%rbp), %rax
2908 :   %1827 = inttoptr i64 %1826 to i64*, !mcsema_real_eip !237 :          <365>	movq	-72(%rbp), %rax
2909 :   %1828 = load i64* %1827, !mcsema_real_eip !237 :          <365>	movq	-72(%rbp), %rax

2910 :   %uadd230 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1828, i64 31) : NIL
2911 :   %1829 = extractvalue { i64, i1 } %uadd230, 0 : NIL

2912 :   %1830 = xor i64 %1829, %1828, !mcsema_real_eip !238 :          <369>	addq	$31, %rax

2913 :   %1831 = and i64 %1830, 16 : NIL
2914 :   %1832 = icmp eq i64 %1831, 0 : NIL

2915 :   store i1 %1832, i1* %AF_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax

2916 :   %1833 = icmp slt i64 %1829, 0 : NIL

2917 :   store i1 %1833, i1* %SF_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2918 :   %1834 = icmp eq i64 %1829, 0, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2919 :   store i1 %1834, i1* %ZF_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2920 :   %1835 = xor i64 %1828, -9223372036854775808, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2921 :   %1836 = and i64 %1830, %1835, !mcsema_real_eip !238 :          <369>	addq	$31, %rax

2922 :   %1837 = icmp slt i64 %1836, 0 : NIL

2923 :   store i1 %1837, i1* %OF_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2924 :   %1838 = trunc i64 %1829 to i8, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2925 :   %1839 = tail call i8 @llvm.ctpop.i8(i8 %1838), !mcsema_real_eip !238 :          <369>	addq	$31, %rax

2926 :   %1840 = and i8 %1839, 1 : NIL
2927 :   %1841 = icmp eq i8 %1840, 0 : NIL

2928 :   store i1 %1841, i1* %PF_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax

2929 :   %1842 = extractvalue { i64, i1 } %uadd230, 1 : NIL

2930 :   store i1 %1842, i1* %CF_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax
2931 :   store i64 %1829, i64* %RAX_val, !mcsema_real_eip !238 :          <369>	addq	$31, %rax

2932 :   %1843 = inttoptr i64 %1829 to i64*, !mcsema_real_eip !239 :          <36d>	movzbl	(%rax), %eax

2933 :   %1844 = bitcast i64* %1843 to i8* : NIL

2934 :   %1845 = load i8* %1844, !mcsema_real_eip !239 :          <36d>	movzbl	(%rax), %eax

2935 :   %1846 = zext i8 %1845 to i64 : NIL

2936 :   store i64 %1846, i64* %RDI_val, !mcsema_real_eip !240 :          <373>	movl	%eax, %edi

2937 :   %1847 = tail call x86_64_sysvcc i64 @to_byte(i64 %1846), !mcsema_real_eip !241 :          <375>	callq	0
2938 :   store i64 %1847, i64* %RAX_val, !mcsema_real_eip !241 :          <375>	callq	0

2939 :   %1848 = trunc i64 %1847 to i32, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax

2940 :   %1849 = add i32 %1848, -4 : NIL

2941 :   %1850 = xor i32 %1849, %1848, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2942 :   %1851 = and i32 %1850, 16, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2943 :   %1852 = icmp ne i32 %1851, 0, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2944 :   store i1 %1852, i1* %AF_val, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2945 :   %1853 = trunc i32 %1849 to i8, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2946 :   %1854 = tail call i8 @llvm.ctpop.i8(i8 %1853), !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax

2947 :   %1855 = and i8 %1854, 1 : NIL
2948 :   %1856 = icmp eq i8 %1855, 0 : NIL

2949 :   store i1 %1856, i1* %PF_val, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2950 :   %1857 = icmp eq i32 %1849, 0, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2951 :   store i1 %1857, i1* %ZF_val, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax

2952 :   %1858 = icmp slt i32 %1849, 0 : NIL

2953 :   store i1 %1858, i1* %SF_val, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2954 :   %1859 = icmp ult i32 %1848, 4, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2955 :   store i1 %1859, i1* %CF_val, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax
2956 :   %1860 = and i32 %1850, %1848, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax

2957 :   %1861 = icmp slt i32 %1860, 0 : NIL

2958 :   store i1 %1861, i1* %OF_val, !mcsema_real_eip !242 :          <37a>	cmpl	$4, %eax

2959 :   %1862 = load i1* %ZF_val, !mcsema_real_eip !243 :          <37d>	je	15
2960 :   br i1 %1862, label %block_0x38e, label %block_0x37f, !mcsema_real_eip !243 :          <37d>	je	15

2961 :   %1863 = load i64* %RBP_val, !mcsema_real_eip !244 :          <37f>	movl	$4294967264, -20(%rbp)
2962 :   %1864 = add i64 %1863, -20, !mcsema_real_eip !244 :          <37f>	movl	$4294967264, -20(%rbp)
2963 :   %1865 = inttoptr i64 %1864 to i64*, !mcsema_real_eip !244 :          <37f>	movl	$4294967264, -20(%rbp)

2964 :   %1866 = bitcast i64* %1865 to i32* : NIL

2965 :   store i32 -32, i32* %1866, !mcsema_real_eip !244 :          <37f>	movl	$4294967264, -20(%rbp)

2966 :   br label %block_0x38e, !mcsema_real_eip !245 :          <386>	jmp	6
========================================================
Source line mapping for function: mcsema_main
========================================================

1 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0) : NIL
2 :   ret void : NIL
