========================================================
Source line mapping for function: sub_76
========================================================

1 :   %R15_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
2 :   %STACK_LIMIT_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
3 :   %STACK_BASE_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
4 :   %XMM15_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
5 :   %XMM14_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
6 :   %XMM13_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
7 :   %XMM12_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
8 :   %XMM11_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
9 :   %XMM10_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
10 :   %XMM9_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
11 :   %XMM8_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
12 :   %XMM7_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
13 :   %XMM6_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
14 :   %XMM5_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
15 :   %XMM4_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
16 :   %XMM3_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
17 :   %XMM2_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
18 :   %XMM1_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
19 :   %XMM0_val = alloca i128, !mcsema_real_eip !2 :          <76>	pushq	%rbp
20 :   %FPU_LASTDATA_OFF_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
21 :   %FPU_LASTDATA_SEG_val = alloca i16, !mcsema_real_eip !2 :          <76>	pushq	%rbp
22 :   %FPU_LASTIP_OFF_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
23 :   %FPU_LASTIP_SEG_val = alloca i16, !mcsema_real_eip !2 :          <76>	pushq	%rbp
24 :   %FPU_TAG_val = alloca [8 x i2], !mcsema_real_eip !2 :          <76>	pushq	%rbp
25 :   %FPU_IM_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
26 :   %FPU_DM_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
27 :   %FPU_ZM_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
28 :   %FPU_OM_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
29 :   %FPU_UM_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
30 :   %FPU_PM_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
31 :   %FPU_PC_val = alloca i2, !mcsema_real_eip !2 :          <76>	pushq	%rbp
32 :   %FPU_RC_val = alloca i2, !mcsema_real_eip !2 :          <76>	pushq	%rbp
33 :   %FPU_X_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
34 :   %FPU_IE_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
35 :   %FPU_DE_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
36 :   %FPU_ZE_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
37 :   %FPU_OE_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
38 :   %FPU_UE_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
39 :   %FPU_PE_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
40 :   %FPU_SF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
41 :   %FPU_ES_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
42 :   %FPU_C0_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
43 :   %FPU_C1_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
44 :   %FPU_C2_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
45 :   %FPU_TOP_val = alloca i3, !mcsema_real_eip !2 :          <76>	pushq	%rbp
46 :   %FPU_C3_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
47 :   %FPU_B_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
48 :   %STi_val = alloca [8 x x86_fp80], !mcsema_real_eip !2 :          <76>	pushq	%rbp
49 :   %DF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
50 :   %OF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
51 :   %SF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
52 :   %CF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
53 :   %AF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
54 :   %PF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
55 :   %ZF_val = alloca i1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
56 :   %RIP_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
57 :   %R14_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
58 :   %R13_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
59 :   %R12_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
60 :   %R11_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
61 :   %R10_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
62 :   %R9_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
63 :   %R8_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
64 :   %RSP_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
65 :   %RBP_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
66 :   %RDI_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
67 :   %RSI_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
68 :   %RDX_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
69 :   %RCX_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
70 :   %RBX_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
71 :   %RAX_val = alloca i64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
72 :   %RAX = getelementptr inbounds %struct.regs* %0, i64 0, i32 0, !mcsema_real_eip !2 :          <76>	pushq	%rbp
73 :   %1 = load i64* %RAX, !mcsema_real_eip !2 :          <76>	pushq	%rbp
74 :   store i64 %1, i64* %RAX_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
75 :   %RBX = getelementptr inbounds %struct.regs* %0, i64 0, i32 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
76 :   %2 = load i64* %RBX, !mcsema_real_eip !2 :          <76>	pushq	%rbp
77 :   store i64 %2, i64* %RBX_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
78 :   %RCX = getelementptr inbounds %struct.regs* %0, i64 0, i32 2, !mcsema_real_eip !2 :          <76>	pushq	%rbp
79 :   %3 = load i64* %RCX, !mcsema_real_eip !2 :          <76>	pushq	%rbp
80 :   store i64 %3, i64* %RCX_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
81 :   %RDX = getelementptr inbounds %struct.regs* %0, i64 0, i32 3, !mcsema_real_eip !2 :          <76>	pushq	%rbp
82 :   %4 = load i64* %RDX, !mcsema_real_eip !2 :          <76>	pushq	%rbp
83 :   store i64 %4, i64* %RDX_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
84 :   %RSI = getelementptr inbounds %struct.regs* %0, i64 0, i32 4, !mcsema_real_eip !2 :          <76>	pushq	%rbp
85 :   %5 = load i64* %RSI, !mcsema_real_eip !2 :          <76>	pushq	%rbp
86 :   store i64 %5, i64* %RSI_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
87 :   %RDI = getelementptr inbounds %struct.regs* %0, i64 0, i32 5, !mcsema_real_eip !2 :          <76>	pushq	%rbp
88 :   %6 = load i64* %RDI, !mcsema_real_eip !2 :          <76>	pushq	%rbp
89 :   store i64 %6, i64* %RDI_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
90 :   %RSP = getelementptr inbounds %struct.regs* %0, i64 0, i32 6, !mcsema_real_eip !2 :          <76>	pushq	%rbp
91 :   %7 = load i64* %RSP, !mcsema_real_eip !2 :          <76>	pushq	%rbp
92 :   store i64 %7, i64* %RSP_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
93 :   %RBP = getelementptr inbounds %struct.regs* %0, i64 0, i32 7, !mcsema_real_eip !2 :          <76>	pushq	%rbp
94 :   %8 = load i64* %RBP, !mcsema_real_eip !2 :          <76>	pushq	%rbp
95 :   store i64 %8, i64* %RBP_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
96 :   %R8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 8, !mcsema_real_eip !2 :          <76>	pushq	%rbp
97 :   %9 = load i64* %R8, !mcsema_real_eip !2 :          <76>	pushq	%rbp
98 :   store i64 %9, i64* %R8_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
99 :   %R9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 9, !mcsema_real_eip !2 :          <76>	pushq	%rbp
100 :   %10 = load i64* %R9, !mcsema_real_eip !2 :          <76>	pushq	%rbp
101 :   store i64 %10, i64* %R9_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
102 :   %R10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 10, !mcsema_real_eip !2 :          <76>	pushq	%rbp
103 :   %11 = load i64* %R10, !mcsema_real_eip !2 :          <76>	pushq	%rbp
104 :   store i64 %11, i64* %R10_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
105 :   %R11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 11, !mcsema_real_eip !2 :          <76>	pushq	%rbp
106 :   %12 = load i64* %R11, !mcsema_real_eip !2 :          <76>	pushq	%rbp
107 :   store i64 %12, i64* %R11_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
108 :   %R12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 12, !mcsema_real_eip !2 :          <76>	pushq	%rbp
109 :   %13 = load i64* %R12, !mcsema_real_eip !2 :          <76>	pushq	%rbp
110 :   store i64 %13, i64* %R12_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
111 :   %R13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 13, !mcsema_real_eip !2 :          <76>	pushq	%rbp
112 :   %14 = load i64* %R13, !mcsema_real_eip !2 :          <76>	pushq	%rbp
113 :   store i64 %14, i64* %R13_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
114 :   %R14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 14, !mcsema_real_eip !2 :          <76>	pushq	%rbp
115 :   %15 = load i64* %R14, !mcsema_real_eip !2 :          <76>	pushq	%rbp
116 :   store i64 %15, i64* %R14_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
117 :   %R15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 15, !mcsema_real_eip !2 :          <76>	pushq	%rbp
118 :   %16 = load i64* %R15, !mcsema_real_eip !2 :          <76>	pushq	%rbp
119 :   store i64 %16, i64* %R15_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
120 :   %RIP = getelementptr inbounds %struct.regs* %0, i64 0, i32 16, !mcsema_real_eip !2 :          <76>	pushq	%rbp
121 :   %17 = load i64* %RIP, !mcsema_real_eip !2 :          <76>	pushq	%rbp
122 :   store i64 %17, i64* %RIP_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
123 :   %CF = getelementptr inbounds %struct.regs* %0, i64 0, i32 17, !mcsema_real_eip !2 :          <76>	pushq	%rbp
124 :   %18 = load i1* %CF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
125 :   store i1 %18, i1* %CF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
126 :   %PF = getelementptr inbounds %struct.regs* %0, i64 0, i32 18, !mcsema_real_eip !2 :          <76>	pushq	%rbp
127 :   %19 = load i1* %PF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
128 :   store i1 %19, i1* %PF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
129 :   %AF = getelementptr inbounds %struct.regs* %0, i64 0, i32 19, !mcsema_real_eip !2 :          <76>	pushq	%rbp
130 :   %20 = load i1* %AF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
131 :   store i1 %20, i1* %AF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
132 :   %ZF = getelementptr inbounds %struct.regs* %0, i64 0, i32 20, !mcsema_real_eip !2 :          <76>	pushq	%rbp
133 :   %21 = load i1* %ZF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
134 :   store i1 %21, i1* %ZF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
135 :   %SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 21, !mcsema_real_eip !2 :          <76>	pushq	%rbp
136 :   %22 = load i1* %SF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
137 :   store i1 %22, i1* %SF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
138 :   %OF = getelementptr inbounds %struct.regs* %0, i64 0, i32 22, !mcsema_real_eip !2 :          <76>	pushq	%rbp
139 :   %23 = load i1* %OF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
140 :   store i1 %23, i1* %OF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
141 :   %DF = getelementptr inbounds %struct.regs* %0, i64 0, i32 23, !mcsema_real_eip !2 :          <76>	pushq	%rbp
142 :   %24 = load i1* %DF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
143 :   store i1 %24, i1* %DF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
144 :   %25 = getelementptr inbounds %struct.regs* %0, i64 0, i32 24, i64 0, !mcsema_real_eip !2 :          <76>	pushq	%rbp
145 :   %26 = bitcast x86_fp80* %25 to i8*, !mcsema_real_eip !2 :          <76>	pushq	%rbp
146 :   %27 = bitcast [8 x x86_fp80]* %STi_val to i8*, !mcsema_real_eip !2 :          <76>	pushq	%rbp
147 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !2 :          <76>	pushq	%rbp
148 :   %FPU_B = getelementptr inbounds %struct.regs* %0, i64 0, i32 25, !mcsema_real_eip !2 :          <76>	pushq	%rbp
149 :   %28 = load i1* %FPU_B, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
150 :   store i1 %28, i1* %FPU_B_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
151 :   %FPU_C3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 26, !mcsema_real_eip !2 :          <76>	pushq	%rbp
152 :   %29 = load i1* %FPU_C3, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
153 :   store i1 %29, i1* %FPU_C3_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
154 :   %FPU_TOP = getelementptr inbounds %struct.regs* %0, i64 0, i32 27, !mcsema_real_eip !2 :          <76>	pushq	%rbp
155 :   %30 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
156 :   store i3 %30, i3* %FPU_TOP_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
157 :   %FPU_C2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 28, !mcsema_real_eip !2 :          <76>	pushq	%rbp
158 :   %31 = load i1* %FPU_C2, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
159 :   store i1 %31, i1* %FPU_C2_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
160 :   %FPU_C1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 29, !mcsema_real_eip !2 :          <76>	pushq	%rbp
161 :   %32 = load i1* %FPU_C1, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
162 :   store i1 %32, i1* %FPU_C1_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
163 :   %FPU_C0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 30, !mcsema_real_eip !2 :          <76>	pushq	%rbp
164 :   %33 = load i1* %FPU_C0, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
165 :   store i1 %33, i1* %FPU_C0_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
166 :   %FPU_ES = getelementptr inbounds %struct.regs* %0, i64 0, i32 31, !mcsema_real_eip !2 :          <76>	pushq	%rbp
167 :   %34 = load i1* %FPU_ES, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
168 :   store i1 %34, i1* %FPU_ES_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
169 :   %FPU_SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 32, !mcsema_real_eip !2 :          <76>	pushq	%rbp
170 :   %35 = load i1* %FPU_SF, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
171 :   store i1 %35, i1* %FPU_SF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
172 :   %FPU_PE = getelementptr inbounds %struct.regs* %0, i64 0, i32 33, !mcsema_real_eip !2 :          <76>	pushq	%rbp
173 :   %36 = load i1* %FPU_PE, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
174 :   store i1 %36, i1* %FPU_PE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
175 :   %FPU_UE = getelementptr inbounds %struct.regs* %0, i64 0, i32 34, !mcsema_real_eip !2 :          <76>	pushq	%rbp
176 :   %37 = load i1* %FPU_UE, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
177 :   store i1 %37, i1* %FPU_UE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
178 :   %FPU_OE = getelementptr inbounds %struct.regs* %0, i64 0, i32 35, !mcsema_real_eip !2 :          <76>	pushq	%rbp
179 :   %38 = load i1* %FPU_OE, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
180 :   store i1 %38, i1* %FPU_OE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
181 :   %FPU_ZE = getelementptr inbounds %struct.regs* %0, i64 0, i32 36, !mcsema_real_eip !2 :          <76>	pushq	%rbp
182 :   %39 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
183 :   store i1 %39, i1* %FPU_ZE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
184 :   %FPU_DE = getelementptr inbounds %struct.regs* %0, i64 0, i32 37, !mcsema_real_eip !2 :          <76>	pushq	%rbp
185 :   %40 = load i1* %FPU_DE, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
186 :   store i1 %40, i1* %FPU_DE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
187 :   %FPU_IE = getelementptr inbounds %struct.regs* %0, i64 0, i32 38, !mcsema_real_eip !2 :          <76>	pushq	%rbp
188 :   %41 = load i1* %FPU_IE, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
189 :   store i1 %41, i1* %FPU_IE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
190 :   %FPU_X = getelementptr inbounds %struct.regs* %0, i64 0, i32 39, !mcsema_real_eip !2 :          <76>	pushq	%rbp
191 :   %42 = load i1* %FPU_X, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
192 :   store i1 %42, i1* %FPU_X_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
193 :   %FPU_RC = getelementptr inbounds %struct.regs* %0, i64 0, i32 40, !mcsema_real_eip !2 :          <76>	pushq	%rbp
194 :   %43 = load i2* %FPU_RC, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
195 :   store i2 %43, i2* %FPU_RC_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
196 :   %FPU_PC = getelementptr inbounds %struct.regs* %0, i64 0, i32 41, !mcsema_real_eip !2 :          <76>	pushq	%rbp
197 :   %44 = load i2* %FPU_PC, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
198 :   store i2 %44, i2* %FPU_PC_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
199 :   %FPU_PM = getelementptr inbounds %struct.regs* %0, i64 0, i32 42, !mcsema_real_eip !2 :          <76>	pushq	%rbp
200 :   %45 = load i1* %FPU_PM, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
201 :   store i1 %45, i1* %FPU_PM_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
202 :   %FPU_UM = getelementptr inbounds %struct.regs* %0, i64 0, i32 43, !mcsema_real_eip !2 :          <76>	pushq	%rbp
203 :   %46 = load i1* %FPU_UM, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
204 :   store i1 %46, i1* %FPU_UM_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
205 :   %FPU_OM = getelementptr inbounds %struct.regs* %0, i64 0, i32 44, !mcsema_real_eip !2 :          <76>	pushq	%rbp
206 :   %47 = load i1* %FPU_OM, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
207 :   store i1 %47, i1* %FPU_OM_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
208 :   %FPU_ZM = getelementptr inbounds %struct.regs* %0, i64 0, i32 45, !mcsema_real_eip !2 :          <76>	pushq	%rbp
209 :   %48 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
210 :   store i1 %48, i1* %FPU_ZM_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
211 :   %FPU_DM = getelementptr inbounds %struct.regs* %0, i64 0, i32 46, !mcsema_real_eip !2 :          <76>	pushq	%rbp
212 :   %49 = load i1* %FPU_DM, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
213 :   store i1 %49, i1* %FPU_DM_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
214 :   %FPU_IM = getelementptr inbounds %struct.regs* %0, i64 0, i32 47, !mcsema_real_eip !2 :          <76>	pushq	%rbp
215 :   %50 = load i1* %FPU_IM, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
216 :   store i1 %50, i1* %FPU_IM_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
217 :   %51 = getelementptr inbounds %struct.regs* %0, i64 0, i32 48, i64 0, !mcsema_real_eip !2 :          <76>	pushq	%rbp

218 :   %52 = bitcast i8* %51 to i64* : NIL
219 :   %53 = bitcast [8 x i2]* %FPU_TAG_val to i64* : NIL
220 :   %54 = load i64* %52, align 4 : NIL
221 :   store i64 %54, i64* %53, align 4 : NIL

222 :   %FPU_LASTIP_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 49, !mcsema_real_eip !2 :          <76>	pushq	%rbp
223 :   %55 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
224 :   store i16 %55, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
225 :   %FPU_LASTIP_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 50, !mcsema_real_eip !2 :          <76>	pushq	%rbp
226 :   %56 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !2 :          <76>	pushq	%rbp
227 :   store i64 %56, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
228 :   %FPU_LASTDATA_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 51, !mcsema_real_eip !2 :          <76>	pushq	%rbp
229 :   %57 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
230 :   store i16 %57, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
231 :   %FPU_LASTDATA_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 52, !mcsema_real_eip !2 :          <76>	pushq	%rbp
232 :   %58 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !2 :          <76>	pushq	%rbp
233 :   store i64 %58, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
234 :   %XMM0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 54, !mcsema_real_eip !2 :          <76>	pushq	%rbp
235 :   %59 = load i128* %XMM0, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
236 :   store i128 %59, i128* %XMM0_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
237 :   %XMM1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 55, !mcsema_real_eip !2 :          <76>	pushq	%rbp
238 :   %60 = load i128* %XMM1, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
239 :   store i128 %60, i128* %XMM1_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
240 :   %XMM2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 56, !mcsema_real_eip !2 :          <76>	pushq	%rbp
241 :   %61 = load i128* %XMM2, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
242 :   store i128 %61, i128* %XMM2_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
243 :   %XMM3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 57, !mcsema_real_eip !2 :          <76>	pushq	%rbp
244 :   %62 = load i128* %XMM3, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
245 :   store i128 %62, i128* %XMM3_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
246 :   %XMM4 = getelementptr inbounds %struct.regs* %0, i64 0, i32 58, !mcsema_real_eip !2 :          <76>	pushq	%rbp
247 :   %63 = load i128* %XMM4, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
248 :   store i128 %63, i128* %XMM4_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
249 :   %XMM5 = getelementptr inbounds %struct.regs* %0, i64 0, i32 59, !mcsema_real_eip !2 :          <76>	pushq	%rbp
250 :   %64 = load i128* %XMM5, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
251 :   store i128 %64, i128* %XMM5_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
252 :   %XMM6 = getelementptr inbounds %struct.regs* %0, i64 0, i32 60, !mcsema_real_eip !2 :          <76>	pushq	%rbp
253 :   %65 = load i128* %XMM6, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
254 :   store i128 %65, i128* %XMM6_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
255 :   %XMM7 = getelementptr inbounds %struct.regs* %0, i64 0, i32 61, !mcsema_real_eip !2 :          <76>	pushq	%rbp
256 :   %66 = load i128* %XMM7, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
257 :   store i128 %66, i128* %XMM7_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
258 :   %XMM8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 62, !mcsema_real_eip !2 :          <76>	pushq	%rbp
259 :   %67 = load i128* %XMM8, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
260 :   store i128 %67, i128* %XMM8_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
261 :   %XMM9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 63, !mcsema_real_eip !2 :          <76>	pushq	%rbp
262 :   %68 = load i128* %XMM9, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
263 :   store i128 %68, i128* %XMM9_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
264 :   %XMM10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 64, !mcsema_real_eip !2 :          <76>	pushq	%rbp
265 :   %69 = load i128* %XMM10, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
266 :   store i128 %69, i128* %XMM10_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
267 :   %XMM11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 65, !mcsema_real_eip !2 :          <76>	pushq	%rbp
268 :   %70 = load i128* %XMM11, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
269 :   store i128 %70, i128* %XMM11_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
270 :   %XMM12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 66, !mcsema_real_eip !2 :          <76>	pushq	%rbp
271 :   %71 = load i128* %XMM12, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
272 :   store i128 %71, i128* %XMM12_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
273 :   %XMM13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 67, !mcsema_real_eip !2 :          <76>	pushq	%rbp
274 :   %72 = load i128* %XMM13, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
275 :   store i128 %72, i128* %XMM13_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
276 :   %XMM14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 68, !mcsema_real_eip !2 :          <76>	pushq	%rbp
277 :   %73 = load i128* %XMM14, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
278 :   store i128 %73, i128* %XMM14_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
279 :   %XMM15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 69, !mcsema_real_eip !2 :          <76>	pushq	%rbp
280 :   %74 = load i128* %XMM15, align 1, !mcsema_real_eip !2 :          <76>	pushq	%rbp
281 :   store i128 %74, i128* %XMM15_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
282 :   %STACK_BASE = getelementptr inbounds %struct.regs* %0, i64 0, i32 70, !mcsema_real_eip !2 :          <76>	pushq	%rbp
283 :   %75 = load i64* %STACK_BASE, !mcsema_real_eip !2 :          <76>	pushq	%rbp
284 :   store i64 %75, i64* %STACK_BASE_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
285 :   %STACK_LIMIT = getelementptr inbounds %struct.regs* %0, i64 0, i32 71, !mcsema_real_eip !2 :          <76>	pushq	%rbp
286 :   %76 = load i64* %STACK_LIMIT, !mcsema_real_eip !2 :          <76>	pushq	%rbp
287 :   store i64 %76, i64* %STACK_LIMIT_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <76>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <76>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <76>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <77>	movq	%rsp, %rbp

294 :   %81 = add i64 %78, -72 : NIL

295 :   %82 = xor i64 %81, %79, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
296 :   %83 = and i64 %82, 16, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
297 :   %84 = icmp ne i64 %83, 0, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
298 :   store i1 %84, i1* %AF_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
299 :   %85 = trunc i64 %81 to i8, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
300 :   %86 = tail call i8 @llvm.ctpop.i8(i8 %85), !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp

301 :   %87 = and i8 %86, 1 : NIL
302 :   %88 = icmp eq i8 %87, 0 : NIL

303 :   store i1 %88, i1* %PF_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
304 :   %89 = icmp eq i64 %81, 0, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
305 :   store i1 %89, i1* %ZF_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp

306 :   %90 = icmp slt i64 %81, 0 : NIL

307 :   store i1 %90, i1* %SF_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
308 :   %91 = icmp ult i64 %79, 64, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
309 :   store i1 %91, i1* %CF_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
310 :   %92 = and i64 %82, %79, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp

311 :   %93 = icmp slt i64 %92, 0 : NIL

312 :   store i1 %93, i1* %OF_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp
313 :   store i64 %81, i64* %RSP_val, !mcsema_real_eip !4 :          <7a>	subq	$64, %rsp

314 :   %94 = load i64* %RBP_val, !mcsema_real_eip !5 :          <7e>	movl	%edi, -52(%rbp)
315 :   %95 = add i64 %94, -52, !mcsema_real_eip !5 :          <7e>	movl	%edi, -52(%rbp)
316 :   %96 = inttoptr i64 %95 to i64*, !mcsema_real_eip !5 :          <7e>	movl	%edi, -52(%rbp)
317 :   %97 = load i64* %RDI_val, !mcsema_real_eip !5 :          <7e>	movl	%edi, -52(%rbp)
318 :   %98 = trunc i64 %97 to i32, !mcsema_real_eip !5 :          <7e>	movl	%edi, -52(%rbp)

319 :   %99 = bitcast i64* %96 to i32* : NIL

320 :   store i32 %98, i32* %99, !mcsema_real_eip !5 :          <7e>	movl	%edi, -52(%rbp)

321 :   %100 = load i64* %RBP_val, !mcsema_real_eip !6 :          <81>	movq	%rsi, -64(%rbp)
322 :   %101 = add i64 %100, -64, !mcsema_real_eip !6 :          <81>	movq	%rsi, -64(%rbp)
323 :   %102 = inttoptr i64 %101 to i64*, !mcsema_real_eip !6 :          <81>	movq	%rsi, -64(%rbp)
324 :   %103 = load i64* %RSI_val, !mcsema_real_eip !6 :          <81>	movq	%rsi, -64(%rbp)
325 :   store i64 %103, i64* %102, !mcsema_real_eip !6 :          <81>	movq	%rsi, -64(%rbp)

326 :   %104 = load i64* %RBP_val, !mcsema_real_eip !7 :          <85>	movl	$0, -12(%rbp)
327 :   %105 = add i64 %104, -12, !mcsema_real_eip !7 :          <85>	movl	$0, -12(%rbp)
328 :   %106 = inttoptr i64 %105 to i64*, !mcsema_real_eip !7 :          <85>	movl	$0, -12(%rbp)

329 :   %107 = bitcast i64* %106 to i32* : NIL

330 :   store i32 0, i32* %107, !mcsema_real_eip !7 :          <85>	movl	$0, -12(%rbp)

331 :   %108 = load i64* %RBP_val, !mcsema_real_eip !8 :          <8c>	movl	$1, -4(%rbp)
332 :   %109 = add i64 %108, -4, !mcsema_real_eip !8 :          <8c>	movl	$1, -4(%rbp)
333 :   %110 = inttoptr i64 %109 to i64*, !mcsema_real_eip !8 :          <8c>	movl	$1, -4(%rbp)

334 :   %111 = bitcast i64* %110 to i32* : NIL

335 :   store i32 1, i32* %111, !mcsema_real_eip !8 :          <8c>	movl	$1, -4(%rbp)

336 :   %112 = load i64* %RBP_val, !mcsema_real_eip !9 :          <93>	movl	$1, -8(%rbp)
337 :   %113 = add i64 %112, -8, !mcsema_real_eip !9 :          <93>	movl	$1, -8(%rbp)
338 :   %114 = inttoptr i64 %113 to i64*, !mcsema_real_eip !9 :          <93>	movl	$1, -8(%rbp)

339 :   %115 = bitcast i64* %114 to i32* : NIL

340 :   store i32 1, i32* %115, !mcsema_real_eip !9 :          <93>	movl	$1, -8(%rbp)

341 :   %116 = load i64* %RBP_val, !mcsema_real_eip !10 :          <9a>	movl	-4(%rbp), %eax
342 :   %117 = add i64 %116, -4, !mcsema_real_eip !10 :          <9a>	movl	-4(%rbp), %eax
343 :   %118 = inttoptr i64 %117 to i64*, !mcsema_real_eip !10 :          <9a>	movl	-4(%rbp), %eax

344 :   %119 = bitcast i64* %118 to i32* : NIL

345 :   %120 = load i32* %119, !mcsema_real_eip !10 :          <9a>	movl	-4(%rbp), %eax
346 :   %121 = zext i32 %120 to i64, !mcsema_real_eip !10 :          <9a>	movl	-4(%rbp), %eax
347 :   store i64 %121, i64* %RAX_val, !mcsema_real_eip !10 :          <9a>	movl	-4(%rbp), %eax

348 :   %122 = sext i32 %120 to i64, !mcsema_real_eip !11 :          <9d>	movslq	%eax, %rcx
349 :   store i64 %122, i64* %RCX_val, !mcsema_real_eip !11 :          <9d>	movslq	%eax, %rcx

350 :   %123 = load i64* %RBP_val, !mcsema_real_eip !12 :          <a0>	movl	-8(%rbp), %eax
351 :   %124 = add i64 %123, -8, !mcsema_real_eip !12 :          <a0>	movl	-8(%rbp), %eax
352 :   %125 = inttoptr i64 %124 to i64*, !mcsema_real_eip !12 :          <a0>	movl	-8(%rbp), %eax

353 :   %126 = bitcast i64* %125 to i32* : NIL

354 :   %127 = load i32* %126, !mcsema_real_eip !12 :          <a0>	movl	-8(%rbp), %eax

355 :   %128 = sext i32 %127 to i64, !mcsema_real_eip !13 :          <a3>	movslq	%eax, %rdx
356 :   store i64 %128, i64* %RDX_val, !mcsema_real_eip !13 :          <a3>	movslq	%eax, %rdx

357 :   %129 = mul i64 %128, 11 : NIL

358 :   %130 = load i64* %RCX_val, !mcsema_real_eip !14 :          <b6>	addq	%rcx, %rax

359 :   %131 = add i64 %130, %129 : NIL
360 :   %uadd350 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %131, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
361 :   %132 = extractvalue { i64, i1 } %uadd350, 0 : NIL

362 :   %133 = xor i64 %132, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
363 :   %134 = xor i64 %133, %131, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
364 :   %135 = and i64 %134, 16, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
365 :   %136 = icmp ne i64 %135, 0, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
366 :   store i1 %136, i1* %AF_val, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax

367 :   %137 = icmp slt i64 %132, 0 : NIL

368 :   store i1 %137, i1* %SF_val, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
369 :   %138 = icmp eq i64 %132, 0, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
370 :   store i1 %138, i1* %ZF_val, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
371 :   %139 = xor i64 %131, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
372 :   %140 = and i64 %133, %139, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax

373 :   %141 = icmp slt i64 %140, 0 : NIL

374 :   store i1 %141, i1* %OF_val, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
375 :   %142 = trunc i64 %132 to i8, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax
376 :   %143 = tail call i8 @llvm.ctpop.i8(i8 %142), !mcsema_real_eip !15 :          <b9>	addq	$0, %rax

377 :   %144 = and i8 %143, 1 : NIL
378 :   %145 = icmp eq i8 %144, 0 : NIL

379 :   store i1 %145, i1* %PF_val, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax

380 :   %146 = extractvalue { i64, i1 } %uadd350, 1 : NIL

381 :   store i1 %146, i1* %CF_val, !mcsema_real_eip !15 :          <b9>	addq	$0, %rax

382 :   %147 = inttoptr i64 %132 to i64*, !mcsema_real_eip !16 :          <bf>	movb	$88, (%rax)

383 :   %148 = bitcast i64* %147 to i8* : NIL

384 :   store i8 88, i8* %148, !mcsema_real_eip !16 :          <bf>	movb	$88, (%rax)

385 :   %149 = load i64* %RBP_val, !mcsema_real_eip !17 :          <c2>	leaq	-48(%rbp), %rax
386 :   %150 = add i64 %149, -48, !mcsema_real_eip !17 :          <c2>	leaq	-48(%rbp), %rax
387 :   %151 = inttoptr i64 %150 to i64*, !mcsema_real_eip !17 :          <c2>	leaq	-48(%rbp), %rax
388 :   %152 = ptrtoint i64* %151 to i64, !mcsema_real_eip !17 :          <c2>	leaq	-48(%rbp), %rax

389 :   store i64 28, i64* %RDX_val, !mcsema_real_eip !18 :          <c6>	movl	$28, %edx

390 :   store i64 %152, i64* %RSI_val, !mcsema_real_eip !19 :          <cb>	movq	%rax, %rsi

391 :   store i64 0, i64* %RDI_val, !mcsema_real_eip !20 :          <ce>	movl	$0, %edi

392 :   %153 = tail call x86_64_sysvcc i64 @read(i64 0, i64 %152, i64 28), !mcsema_real_eip !21 :          <d3>	callq	0
393 :   store i64 %153, i64* %RAX_val, !mcsema_real_eip !21 :          <d3>	callq	0

394 :   %154 = load i64* %RBP_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
395 :   %155 = add i64 %154, -12, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
396 :   %156 = inttoptr i64 %155 to i64*, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

397 :   %157 = bitcast i64* %156 to i32* : NIL

398 :   %158 = load i32* %157, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

399 :   %159 = add i32 %158, -27 : NIL

400 :   %160 = xor i32 %159, %158, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

401 :   %161 = and i32 %160, 16 : NIL
402 :   %162 = icmp eq i32 %161, 0 : NIL

403 :   store i1 %162, i1* %AF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
404 :   %163 = trunc i32 %159 to i8, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
405 :   %164 = tail call i8 @llvm.ctpop.i8(i8 %163), !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

406 :   %165 = and i8 %164, 1 : NIL
407 :   %166 = icmp eq i8 %165, 0 : NIL

408 :   store i1 %166, i1* %PF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
409 :   %167 = icmp eq i32 %159, 0, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
410 :   store i1 %167, i1* %ZF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

411 :   %168 = icmp slt i32 %159, 0 : NIL

412 :   store i1 %168, i1* %SF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
413 :   %169 = icmp ult i32 %158, 27, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
414 :   store i1 %169, i1* %CF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
415 :   %170 = and i32 %160, %158, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

416 :   %171 = icmp slt i32 %170, 0 : NIL

417 :   store i1 %171, i1* %OF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

418 :   %172 = xor i1 %168, %171 : NIL

419 :   %173 = load i1* %ZF_val, !mcsema_real_eip !23 :          <27b>	jle	-420
420 :   %174 = or i1 %173, %172, !mcsema_real_eip !23 :          <27b>	jle	-420
421 :   br i1 %174, label %block_0xdd.preheader, label %block_0x281, !mcsema_real_eip !23 :          <27b>	jle	-420

422 :   br label %block_0xdd : NIL

423 :   %175 = load i64* %RBP_val, !mcsema_real_eip !24 :          <dd>	movl	-4(%rbp), %eax
424 :   %176 = add i64 %175, -4, !mcsema_real_eip !24 :          <dd>	movl	-4(%rbp), %eax
425 :   %177 = inttoptr i64 %176 to i64*, !mcsema_real_eip !24 :          <dd>	movl	-4(%rbp), %eax

426 :   %178 = bitcast i64* %177 to i32* : NIL

427 :   %179 = load i32* %178, !mcsema_real_eip !24 :          <dd>	movl	-4(%rbp), %eax
428 :   %180 = zext i32 %179 to i64, !mcsema_real_eip !24 :          <dd>	movl	-4(%rbp), %eax
429 :   store i64 %180, i64* %RAX_val, !mcsema_real_eip !24 :          <dd>	movl	-4(%rbp), %eax

430 :   %181 = load i64* %RBP_val, !mcsema_real_eip !25 :          <e0>	movl	%eax, -16(%rbp)
431 :   %182 = add i64 %181, -16, !mcsema_real_eip !25 :          <e0>	movl	%eax, -16(%rbp)
432 :   %183 = inttoptr i64 %182 to i64*, !mcsema_real_eip !25 :          <e0>	movl	%eax, -16(%rbp)

433 :   %184 = bitcast i64* %183 to i32* : NIL

434 :   store i32 %179, i32* %184, !mcsema_real_eip !25 :          <e0>	movl	%eax, -16(%rbp)

435 :   %185 = load i64* %RBP_val, !mcsema_real_eip !26 :          <e3>	movl	-8(%rbp), %eax
436 :   %186 = add i64 %185, -8, !mcsema_real_eip !26 :          <e3>	movl	-8(%rbp), %eax
437 :   %187 = inttoptr i64 %186 to i64*, !mcsema_real_eip !26 :          <e3>	movl	-8(%rbp), %eax

438 :   %188 = bitcast i64* %187 to i32* : NIL

439 :   %189 = load i32* %188, !mcsema_real_eip !26 :          <e3>	movl	-8(%rbp), %eax
440 :   %190 = zext i32 %189 to i64, !mcsema_real_eip !26 :          <e3>	movl	-8(%rbp), %eax
441 :   store i64 %190, i64* %RAX_val, !mcsema_real_eip !26 :          <e3>	movl	-8(%rbp), %eax

442 :   %191 = load i64* %RBP_val, !mcsema_real_eip !27 :          <e6>	movl	%eax, -20(%rbp)
443 :   %192 = add i64 %191, -20, !mcsema_real_eip !27 :          <e6>	movl	%eax, -20(%rbp)
444 :   %193 = inttoptr i64 %192 to i64*, !mcsema_real_eip !27 :          <e6>	movl	%eax, -20(%rbp)

445 :   %194 = bitcast i64* %193 to i32* : NIL

446 :   store i32 %189, i32* %194, !mcsema_real_eip !27 :          <e6>	movl	%eax, -20(%rbp)

447 :   %195 = load i64* %RBP_val, !mcsema_real_eip !28 :          <e9>	movl	-12(%rbp), %eax
448 :   %196 = add i64 %195, -12, !mcsema_real_eip !28 :          <e9>	movl	-12(%rbp), %eax
449 :   %197 = inttoptr i64 %196 to i64*, !mcsema_real_eip !28 :          <e9>	movl	-12(%rbp), %eax

450 :   %198 = bitcast i64* %197 to i32* : NIL

451 :   %199 = load i32* %198, !mcsema_real_eip !28 :          <e9>	movl	-12(%rbp), %eax

452 :   %200 = sext i32 %199 to i64, !mcsema_real_eip !29 :          <ec>	cltq
453 :   store i64 %200, i64* %RAX_val, !mcsema_real_eip !29 :          <ec>	cltq

454 :   %201 = load i64* %RBP_val, !mcsema_real_eip !30 :          <ee>	movzbl	-48(%rbp,%rax), %eax
455 :   %202 = add i64 %201, -48, !mcsema_real_eip !30 :          <ee>	movzbl	-48(%rbp,%rax), %eax
456 :   %203 = add i64 %202, %200, !mcsema_real_eip !30 :          <ee>	movzbl	-48(%rbp,%rax), %eax
457 :   %204 = inttoptr i64 %203 to i64*, !mcsema_real_eip !30 :          <ee>	movzbl	-48(%rbp,%rax), %eax

458 :   %205 = bitcast i64* %204 to i8* : NIL

459 :   %206 = load i8* %205, !mcsema_real_eip !30 :          <ee>	movzbl	-48(%rbp,%rax), %eax

460 :   %207 = sext i8 %206 to i32, !mcsema_real_eip !31 :          <f3>	movsbl	%al, %eax
461 :   %208 = zext i32 %207 to i64, !mcsema_real_eip !31 :          <f3>	movsbl	%al, %eax
462 :   store i64 %208, i64* %RAX_val, !mcsema_real_eip !31 :          <f3>	movsbl	%al, %eax

463 :   %209 = add nsw i32 %207, -100 : NIL

464 :   %210 = xor i32 %209, %207, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
465 :   %211 = and i32 %210, 16, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
466 :   %212 = icmp ne i32 %211, 0, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
467 :   store i1 %212, i1* %AF_val, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
468 :   %213 = trunc i32 %209 to i8, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
469 :   %214 = tail call i8 @llvm.ctpop.i8(i8 %213), !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax

470 :   %215 = and i8 %214, 1 : NIL
471 :   %216 = icmp eq i8 %215, 0 : NIL

472 :   store i1 %216, i1* %PF_val, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
473 :   %217 = icmp eq i32 %209, 0, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
474 :   store i1 %217, i1* %ZF_val, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax

475 :   %218 = icmp slt i32 %209, 0 : NIL

476 :   store i1 %218, i1* %SF_val, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax

477 :   %219 = icmp ult i8 %206, 100 : NIL

478 :   store i1 %219, i1* %CF_val, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax
479 :   %220 = and i32 %210, %207, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax

480 :   %221 = icmp slt i32 %220, 0 : NIL

481 :   store i1 %221, i1* %OF_val, !mcsema_real_eip !32 :          <f6>	cmpl	$100, %eax

482 :   %222 = load i1* %ZF_val, !mcsema_real_eip !33 :          <f9>	je	40
483 :   br i1 %222, label %block_0x123, label %block_0xfb, !mcsema_real_eip !33 :          <f9>	je	40

484 :   br label %block_0x281 : NIL

485 :   store i64 zext (i32 add (i32 ptrtoint (%1* @data_0x2da to i32), i32 77) to i64), i64* %RDI_val, !mcsema_real_eip !34 :          <281>	movl	$0, %edi

486 :   %223 = tail call x86_64_sysvcc i64 @puts(i64 zext (i32 add (i32 ptrtoint (%1* @data_0x2da to i32), i32 77) to i64)), !mcsema_real_eip !35 :          <286>	callq	0
487 :   store i64 %223, i64* %RAX_val, !mcsema_real_eip !35 :          <286>	callq	0

488 :   %224 = load i64* %RBP_val, !mcsema_real_eip !36 :          <28b>	leave
489 :   store i64 %224, i64* %RSP_val, !mcsema_real_eip !36 :          <28b>	leave
490 :   %225 = inttoptr i64 %224 to i64*, !mcsema_real_eip !36 :          <28b>	leave
491 :   %226 = load i64* %225, !mcsema_real_eip !36 :          <28b>	leave
492 :   store i64 %226, i64* %RBP_val, !mcsema_real_eip !36 :          <28b>	leave

493 :   %227 = add i64 %224, 16, !mcsema_real_eip !37 :          <28c>	retq
494 :   store i64 %227, i64* %RSP_val, !mcsema_real_eip !37 :          <28c>	retq
495 :   %228 = load i64* %RAX_val, !mcsema_real_eip !37 :          <28c>	retq
496 :   store i64 %228, i64* %RAX, !mcsema_real_eip !37 :          <28c>	retq
497 :   %229 = load i64* %RBX_val, !mcsema_real_eip !37 :          <28c>	retq
498 :   store i64 %229, i64* %RBX, !mcsema_real_eip !37 :          <28c>	retq
499 :   %230 = load i64* %RCX_val, !mcsema_real_eip !37 :          <28c>	retq
500 :   store i64 %230, i64* %RCX, !mcsema_real_eip !37 :          <28c>	retq
501 :   %231 = load i64* %RDX_val, !mcsema_real_eip !37 :          <28c>	retq
502 :   store i64 %231, i64* %RDX, !mcsema_real_eip !37 :          <28c>	retq
503 :   %232 = load i64* %RSI_val, !mcsema_real_eip !37 :          <28c>	retq
504 :   store i64 %232, i64* %RSI, !mcsema_real_eip !37 :          <28c>	retq
505 :   %233 = load i64* %RDI_val, !mcsema_real_eip !37 :          <28c>	retq
506 :   store i64 %233, i64* %RDI, !mcsema_real_eip !37 :          <28c>	retq
507 :   %234 = load i64* %RSP_val, !mcsema_real_eip !37 :          <28c>	retq
508 :   store i64 %234, i64* %RSP, !mcsema_real_eip !37 :          <28c>	retq
509 :   %235 = load i64* %RBP_val, !mcsema_real_eip !37 :          <28c>	retq
510 :   store i64 %235, i64* %RBP, !mcsema_real_eip !37 :          <28c>	retq
511 :   %236 = load i64* %R8_val, !mcsema_real_eip !37 :          <28c>	retq
512 :   store i64 %236, i64* %R8, !mcsema_real_eip !37 :          <28c>	retq
513 :   %237 = load i64* %R9_val, !mcsema_real_eip !37 :          <28c>	retq
514 :   store i64 %237, i64* %R9, !mcsema_real_eip !37 :          <28c>	retq
515 :   %238 = load i64* %R10_val, !mcsema_real_eip !37 :          <28c>	retq
516 :   store i64 %238, i64* %R10, !mcsema_real_eip !37 :          <28c>	retq
517 :   %239 = load i64* %R11_val, !mcsema_real_eip !37 :          <28c>	retq
518 :   store i64 %239, i64* %R11, !mcsema_real_eip !37 :          <28c>	retq
519 :   %240 = load i64* %R12_val, !mcsema_real_eip !37 :          <28c>	retq
520 :   store i64 %240, i64* %R12, !mcsema_real_eip !37 :          <28c>	retq
521 :   %241 = load i64* %R13_val, !mcsema_real_eip !37 :          <28c>	retq
522 :   store i64 %241, i64* %R13, !mcsema_real_eip !37 :          <28c>	retq
523 :   %242 = load i64* %R14_val, !mcsema_real_eip !37 :          <28c>	retq
524 :   store i64 %242, i64* %R14, !mcsema_real_eip !37 :          <28c>	retq
525 :   %243 = load i64* %R15_val, !mcsema_real_eip !37 :          <28c>	retq
526 :   store i64 %243, i64* %R15, !mcsema_real_eip !37 :          <28c>	retq
527 :   %244 = load i64* %RIP_val, !mcsema_real_eip !37 :          <28c>	retq
528 :   store i64 %244, i64* %RIP, !mcsema_real_eip !37 :          <28c>	retq
529 :   %245 = load i1* %CF_val, !mcsema_real_eip !37 :          <28c>	retq
530 :   store i1 %245, i1* %CF, align 1, !mcsema_real_eip !37 :          <28c>	retq
531 :   %246 = load i1* %PF_val, !mcsema_real_eip !37 :          <28c>	retq
532 :   store i1 %246, i1* %PF, align 1, !mcsema_real_eip !37 :          <28c>	retq
533 :   %247 = load i1* %AF_val, !mcsema_real_eip !37 :          <28c>	retq
534 :   store i1 %247, i1* %AF, align 1, !mcsema_real_eip !37 :          <28c>	retq
535 :   %248 = load i1* %ZF_val, !mcsema_real_eip !37 :          <28c>	retq
536 :   store i1 %248, i1* %ZF, align 1, !mcsema_real_eip !37 :          <28c>	retq
537 :   %249 = load i1* %SF_val, !mcsema_real_eip !37 :          <28c>	retq
538 :   store i1 %249, i1* %SF, align 1, !mcsema_real_eip !37 :          <28c>	retq
539 :   %250 = load i1* %OF_val, !mcsema_real_eip !37 :          <28c>	retq
540 :   store i1 %250, i1* %OF, align 1, !mcsema_real_eip !37 :          <28c>	retq
541 :   %251 = load i1* %DF_val, !mcsema_real_eip !37 :          <28c>	retq
542 :   store i1 %251, i1* %DF, align 1, !mcsema_real_eip !37 :          <28c>	retq
543 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !37 :          <28c>	retq
544 :   %252 = load i1* %FPU_B_val, !mcsema_real_eip !37 :          <28c>	retq
545 :   store i1 %252, i1* %FPU_B, align 1, !mcsema_real_eip !37 :          <28c>	retq
546 :   %253 = load i1* %FPU_C3_val, !mcsema_real_eip !37 :          <28c>	retq
547 :   store i1 %253, i1* %FPU_C3, align 1, !mcsema_real_eip !37 :          <28c>	retq
548 :   %254 = load i3* %FPU_TOP_val, !mcsema_real_eip !37 :          <28c>	retq
549 :   store i3 %254, i3* %FPU_TOP, align 1, !mcsema_real_eip !37 :          <28c>	retq
550 :   %255 = load i1* %FPU_C2_val, !mcsema_real_eip !37 :          <28c>	retq
551 :   store i1 %255, i1* %FPU_C2, align 1, !mcsema_real_eip !37 :          <28c>	retq
552 :   %256 = load i1* %FPU_C1_val, !mcsema_real_eip !37 :          <28c>	retq
553 :   store i1 %256, i1* %FPU_C1, align 1, !mcsema_real_eip !37 :          <28c>	retq
554 :   %257 = load i1* %FPU_C0_val, !mcsema_real_eip !37 :          <28c>	retq
555 :   store i1 %257, i1* %FPU_C0, align 1, !mcsema_real_eip !37 :          <28c>	retq
556 :   %258 = load i1* %FPU_ES_val, !mcsema_real_eip !37 :          <28c>	retq
557 :   store i1 %258, i1* %FPU_ES, align 1, !mcsema_real_eip !37 :          <28c>	retq
558 :   %259 = load i1* %FPU_SF_val, !mcsema_real_eip !37 :          <28c>	retq
559 :   store i1 %259, i1* %FPU_SF, align 1, !mcsema_real_eip !37 :          <28c>	retq
560 :   %260 = load i1* %FPU_PE_val, !mcsema_real_eip !37 :          <28c>	retq
561 :   store i1 %260, i1* %FPU_PE, align 1, !mcsema_real_eip !37 :          <28c>	retq
562 :   %261 = load i1* %FPU_UE_val, !mcsema_real_eip !37 :          <28c>	retq
563 :   store i1 %261, i1* %FPU_UE, align 1, !mcsema_real_eip !37 :          <28c>	retq
564 :   %262 = load i1* %FPU_OE_val, !mcsema_real_eip !37 :          <28c>	retq
565 :   store i1 %262, i1* %FPU_OE, align 1, !mcsema_real_eip !37 :          <28c>	retq
566 :   %263 = load i1* %FPU_ZE_val, !mcsema_real_eip !37 :          <28c>	retq
567 :   store i1 %263, i1* %FPU_ZE, align 1, !mcsema_real_eip !37 :          <28c>	retq
568 :   %264 = load i1* %FPU_DE_val, !mcsema_real_eip !37 :          <28c>	retq
569 :   store i1 %264, i1* %FPU_DE, align 1, !mcsema_real_eip !37 :          <28c>	retq
570 :   %265 = load i1* %FPU_IE_val, !mcsema_real_eip !37 :          <28c>	retq
571 :   store i1 %265, i1* %FPU_IE, align 1, !mcsema_real_eip !37 :          <28c>	retq
572 :   %266 = load i1* %FPU_X_val, !mcsema_real_eip !37 :          <28c>	retq
573 :   store i1 %266, i1* %FPU_X, align 1, !mcsema_real_eip !37 :          <28c>	retq
574 :   %267 = load i2* %FPU_RC_val, !mcsema_real_eip !37 :          <28c>	retq
575 :   store i2 %267, i2* %FPU_RC, align 1, !mcsema_real_eip !37 :          <28c>	retq
576 :   %268 = load i2* %FPU_PC_val, !mcsema_real_eip !37 :          <28c>	retq
577 :   store i2 %268, i2* %FPU_PC, align 1, !mcsema_real_eip !37 :          <28c>	retq
578 :   %269 = load i1* %FPU_PM_val, !mcsema_real_eip !37 :          <28c>	retq
579 :   store i1 %269, i1* %FPU_PM, align 1, !mcsema_real_eip !37 :          <28c>	retq
580 :   %270 = load i1* %FPU_UM_val, !mcsema_real_eip !37 :          <28c>	retq
581 :   store i1 %270, i1* %FPU_UM, align 1, !mcsema_real_eip !37 :          <28c>	retq
582 :   %271 = load i1* %FPU_OM_val, !mcsema_real_eip !37 :          <28c>	retq
583 :   store i1 %271, i1* %FPU_OM, align 1, !mcsema_real_eip !37 :          <28c>	retq
584 :   %272 = load i1* %FPU_ZM_val, !mcsema_real_eip !37 :          <28c>	retq
585 :   store i1 %272, i1* %FPU_ZM, align 1, !mcsema_real_eip !37 :          <28c>	retq
586 :   %273 = load i1* %FPU_DM_val, !mcsema_real_eip !37 :          <28c>	retq
587 :   store i1 %273, i1* %FPU_DM, align 1, !mcsema_real_eip !37 :          <28c>	retq
588 :   %274 = load i1* %FPU_IM_val, !mcsema_real_eip !37 :          <28c>	retq
589 :   store i1 %274, i1* %FPU_IM, align 1, !mcsema_real_eip !37 :          <28c>	retq

590 :   %275 = load i64* %53, align 4 : NIL
591 :   store i64 %275, i64* %52, align 4 : NIL

592 :   %276 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !37 :          <28c>	retq
593 :   store i16 %276, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !37 :          <28c>	retq
594 :   %277 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !37 :          <28c>	retq
595 :   store i64 %277, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !37 :          <28c>	retq
596 :   %278 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !37 :          <28c>	retq
597 :   store i16 %278, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !37 :          <28c>	retq
598 :   %279 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !37 :          <28c>	retq
599 :   store i64 %279, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !37 :          <28c>	retq
600 :   %280 = load i128* %XMM0_val, !mcsema_real_eip !37 :          <28c>	retq
601 :   store i128 %280, i128* %XMM0, align 1, !mcsema_real_eip !37 :          <28c>	retq
602 :   %281 = load i128* %XMM1_val, !mcsema_real_eip !37 :          <28c>	retq
603 :   store i128 %281, i128* %XMM1, align 1, !mcsema_real_eip !37 :          <28c>	retq
604 :   %282 = load i128* %XMM2_val, !mcsema_real_eip !37 :          <28c>	retq
605 :   store i128 %282, i128* %XMM2, align 1, !mcsema_real_eip !37 :          <28c>	retq
606 :   %283 = load i128* %XMM3_val, !mcsema_real_eip !37 :          <28c>	retq
607 :   store i128 %283, i128* %XMM3, align 1, !mcsema_real_eip !37 :          <28c>	retq
608 :   %284 = load i128* %XMM4_val, !mcsema_real_eip !37 :          <28c>	retq
609 :   store i128 %284, i128* %XMM4, align 1, !mcsema_real_eip !37 :          <28c>	retq
610 :   %285 = load i128* %XMM5_val, !mcsema_real_eip !37 :          <28c>	retq
611 :   store i128 %285, i128* %XMM5, align 1, !mcsema_real_eip !37 :          <28c>	retq
612 :   %286 = load i128* %XMM6_val, !mcsema_real_eip !37 :          <28c>	retq
613 :   store i128 %286, i128* %XMM6, align 1, !mcsema_real_eip !37 :          <28c>	retq
614 :   %287 = load i128* %XMM7_val, !mcsema_real_eip !37 :          <28c>	retq
615 :   store i128 %287, i128* %XMM7, align 1, !mcsema_real_eip !37 :          <28c>	retq
616 :   %288 = load i128* %XMM8_val, !mcsema_real_eip !37 :          <28c>	retq
617 :   store i128 %288, i128* %XMM8, align 1, !mcsema_real_eip !37 :          <28c>	retq
618 :   %289 = load i128* %XMM9_val, !mcsema_real_eip !37 :          <28c>	retq
619 :   store i128 %289, i128* %XMM9, align 1, !mcsema_real_eip !37 :          <28c>	retq
620 :   %290 = load i128* %XMM10_val, !mcsema_real_eip !37 :          <28c>	retq
621 :   store i128 %290, i128* %XMM10, align 1, !mcsema_real_eip !37 :          <28c>	retq
622 :   %291 = load i128* %XMM11_val, !mcsema_real_eip !37 :          <28c>	retq
623 :   store i128 %291, i128* %XMM11, align 1, !mcsema_real_eip !37 :          <28c>	retq
624 :   %292 = load i128* %XMM12_val, !mcsema_real_eip !37 :          <28c>	retq
625 :   store i128 %292, i128* %XMM12, align 1, !mcsema_real_eip !37 :          <28c>	retq
626 :   %293 = load i128* %XMM13_val, !mcsema_real_eip !37 :          <28c>	retq
627 :   store i128 %293, i128* %XMM13, align 1, !mcsema_real_eip !37 :          <28c>	retq
628 :   %294 = load i128* %XMM14_val, !mcsema_real_eip !37 :          <28c>	retq
629 :   store i128 %294, i128* %XMM14, align 1, !mcsema_real_eip !37 :          <28c>	retq
630 :   %295 = load i128* %XMM15_val, !mcsema_real_eip !37 :          <28c>	retq
631 :   store i128 %295, i128* %XMM15, align 1, !mcsema_real_eip !37 :          <28c>	retq
632 :   %296 = load i64* %STACK_BASE_val, !mcsema_real_eip !37 :          <28c>	retq
633 :   store i64 %296, i64* %STACK_BASE, align 1, !mcsema_real_eip !37 :          <28c>	retq
634 :   %297 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !37 :          <28c>	retq
635 :   store i64 %297, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !37 :          <28c>	retq
636 :   ret void, !mcsema_real_eip !37 :          <28c>	retq

637 :   %298 = load i64* %RBP_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
638 :   %299 = add i64 %298, -4, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
639 :   %300 = inttoptr i64 %299 to i64*, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

640 :   %301 = bitcast i64* %300 to i32* : NIL

641 :   %302 = load i32* %301, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

642 :   %uadd400 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %302, i32 1) : NIL
643 :   %303 = extractvalue { i32, i1 } %uadd400, 0 : NIL

644 :   %304 = xor i32 %303, %302, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
645 :   %305 = and i32 %304, 16, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
646 :   %306 = icmp ne i32 %305, 0, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
647 :   store i1 %306, i1* %AF_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

648 :   %307 = icmp slt i32 %303, 0 : NIL

649 :   store i1 %307, i1* %SF_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
650 :   %308 = icmp eq i32 %303, 0, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
651 :   store i1 %308, i1* %ZF_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
652 :   %309 = xor i32 %302, -2147483648, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
653 :   %310 = and i32 %304, %309, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

654 :   %311 = icmp slt i32 %310, 0 : NIL

655 :   store i1 %311, i1* %OF_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
656 :   %312 = trunc i32 %303 to i8, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
657 :   %313 = tail call i8 @llvm.ctpop.i8(i8 %312), !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

658 :   %314 = and i8 %313, 1 : NIL
659 :   %315 = icmp eq i8 %314, 0 : NIL

660 :   store i1 %315, i1* %PF_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

661 :   %316 = extractvalue { i32, i1 } %uadd400, 1 : NIL

662 :   store i1 %316, i1* %CF_val, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)
663 :   store i32 %303, i32* %301, !mcsema_real_eip !38 :          <123>	addl	$1, -4(%rbp)

664 :   br label %block_0x147, !mcsema_real_eip !39 :          <127>	jmp	30

665 :   %317 = load i64* %RAX_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
666 :   %318 = trunc i64 %317 to i32, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax

667 :   %319 = add i32 %318, -100 : NIL

668 :   %320 = xor i32 %319, %318, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
669 :   %321 = and i32 %320, 16, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
670 :   %322 = icmp ne i32 %321, 0, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
671 :   store i1 %322, i1* %AF_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
672 :   %323 = trunc i32 %319 to i8, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
673 :   %324 = tail call i8 @llvm.ctpop.i8(i8 %323), !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax

674 :   %325 = and i8 %324, 1 : NIL
675 :   %326 = icmp eq i8 %325, 0 : NIL

676 :   store i1 %326, i1* %PF_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
677 :   %327 = icmp eq i32 %319, 0, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
678 :   store i1 %327, i1* %ZF_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax

679 :   %328 = icmp slt i32 %319, 0 : NIL

680 :   store i1 %328, i1* %SF_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
681 :   %329 = icmp ult i32 %318, 100, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
682 :   store i1 %329, i1* %CF_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax
683 :   %330 = and i32 %320, %318, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax

684 :   %331 = icmp slt i32 %330, 0 : NIL

685 :   store i1 %331, i1* %OF_val, !mcsema_real_eip !40 :          <fb>	cmpl	$100, %eax

686 :   %tmp = xor i1 %328, %331 : NIL

687 :   %332 = load i1* %ZF_val, !mcsema_real_eip !41 :          <fe>	jg	7

688 :   %.demorgan = or i1 %332, %tmp : NIL

689 :   %333 = load i64* %RAX_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
690 :   %334 = trunc i64 %333 to i32, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax

691 :   br i1 %.demorgan, label %block_0x100, label %block_0x107, !mcsema_real_eip !41 :          <fe>	jg	7

692 :   %335 = add i32 %334, -115 : NIL

693 :   %336 = xor i32 %335, %334, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax

694 :   %337 = and i32 %336, 16 : NIL
695 :   %338 = icmp eq i32 %337, 0 : NIL

696 :   store i1 %338, i1* %AF_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
697 :   %339 = trunc i32 %335 to i8, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
698 :   %340 = tail call i8 @llvm.ctpop.i8(i8 %339), !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax

699 :   %341 = and i8 %340, 1 : NIL
700 :   %342 = icmp eq i8 %341, 0 : NIL

701 :   store i1 %342, i1* %PF_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
702 :   %343 = icmp eq i32 %335, 0, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
703 :   store i1 %343, i1* %ZF_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax

704 :   %344 = icmp slt i32 %335, 0 : NIL

705 :   store i1 %344, i1* %SF_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
706 :   %345 = icmp ult i32 %334, 115, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
707 :   store i1 %345, i1* %CF_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax
708 :   %346 = and i32 %336, %334, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax

709 :   %347 = icmp slt i32 %346, 0 : NIL

710 :   store i1 %347, i1* %OF_val, !mcsema_real_eip !42 :          <107>	cmpl	$115, %eax

711 :   %348 = load i1* %ZF_val, !mcsema_real_eip !43 :          <10a>	je	11
712 :   br i1 %348, label %block_0x117, label %block_0x10c, !mcsema_real_eip !43 :          <10a>	je	11

713 :   %349 = add i32 %334, -97 : NIL

714 :   %350 = xor i32 %349, %334, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
715 :   %351 = and i32 %350, 16, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
716 :   %352 = icmp ne i32 %351, 0, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
717 :   store i1 %352, i1* %AF_val, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
718 :   %353 = trunc i32 %349 to i8, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
719 :   %354 = tail call i8 @llvm.ctpop.i8(i8 %353), !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax

720 :   %355 = and i8 %354, 1 : NIL
721 :   %356 = icmp eq i8 %355, 0 : NIL

722 :   store i1 %356, i1* %PF_val, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
723 :   %357 = icmp eq i32 %349, 0, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
724 :   store i1 %357, i1* %ZF_val, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax

725 :   %358 = icmp slt i32 %349, 0 : NIL

726 :   store i1 %358, i1* %SF_val, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
727 :   %359 = icmp ult i32 %334, 97, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
728 :   store i1 %359, i1* %CF_val, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax
729 :   %360 = and i32 %350, %334, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax

730 :   %361 = icmp slt i32 %360, 0 : NIL

731 :   store i1 %361, i1* %OF_val, !mcsema_real_eip !44 :          <100>	cmpl	$97, %eax

732 :   %362 = load i1* %ZF_val, !mcsema_real_eip !45 :          <103>	je	24
733 :   br i1 %362, label %block_0x11d, label %block_0x129, !mcsema_real_eip !45 :          <103>	je	24

734 :   %363 = load i64* %RBP_val, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
735 :   %364 = add i64 %363, -4, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
736 :   %365 = inttoptr i64 %364 to i64*, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax

737 :   %366 = bitcast i64* %365 to i32* : NIL

738 :   %367 = load i32* %366, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
739 :   %368 = zext i32 %367 to i64, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
740 :   store i64 %368, i64* %RAX_val, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax

741 :   %369 = sext i32 %367 to i64, !mcsema_real_eip !47 :          <14a>	movslq	%eax, %rcx
742 :   store i64 %369, i64* %RCX_val, !mcsema_real_eip !47 :          <14a>	movslq	%eax, %rcx

743 :   %370 = load i64* %RBP_val, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax
744 :   %371 = add i64 %370, -8, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax
745 :   %372 = inttoptr i64 %371 to i64*, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax

746 :   %373 = bitcast i64* %372 to i32* : NIL

747 :   %374 = load i32* %373, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax

748 :   %375 = sext i32 %374 to i64, !mcsema_real_eip !49 :          <150>	movslq	%eax, %rdx
749 :   store i64 %375, i64* %RDX_val, !mcsema_real_eip !49 :          <150>	movslq	%eax, %rdx

750 :   %376 = mul i64 %375, 11 : NIL

751 :   %377 = load i64* %RCX_val, !mcsema_real_eip !50 :          <163>	addq	%rcx, %rax

752 :   %378 = add i64 %377, %376 : NIL
753 :   %uadd396 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %378, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
754 :   %379 = extractvalue { i64, i1 } %uadd396, 0 : NIL

755 :   %380 = xor i64 %379, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !51 :          <166>	addq	$0, %rax
756 :   %381 = xor i64 %380, %378, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
757 :   %382 = and i64 %381, 16, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
758 :   %383 = icmp ne i64 %382, 0, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
759 :   store i1 %383, i1* %AF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

760 :   %384 = icmp slt i64 %379, 0 : NIL

761 :   store i1 %384, i1* %SF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
762 :   %385 = icmp eq i64 %379, 0, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
763 :   store i1 %385, i1* %ZF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
764 :   %386 = xor i64 %378, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !51 :          <166>	addq	$0, %rax
765 :   %387 = and i64 %380, %386, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

766 :   %388 = icmp slt i64 %387, 0 : NIL

767 :   store i1 %388, i1* %OF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
768 :   %389 = trunc i64 %379 to i8, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
769 :   %390 = tail call i8 @llvm.ctpop.i8(i8 %389), !mcsema_real_eip !51 :          <166>	addq	$0, %rax

770 :   %391 = and i8 %390, 1 : NIL
771 :   %392 = icmp eq i8 %391, 0 : NIL

772 :   store i1 %392, i1* %PF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

773 :   %393 = extractvalue { i64, i1 } %uadd396, 1 : NIL

774 :   store i1 %393, i1* %CF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
775 :   store i64 %379, i64* %RAX_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

776 :   %394 = inttoptr i64 %379 to i64*, !mcsema_real_eip !52 :          <16c>	movzbl	(%rax), %eax

777 :   %395 = bitcast i64* %394 to i8* : NIL

778 :   %396 = load i8* %395, !mcsema_real_eip !52 :          <16c>	movzbl	(%rax), %eax

779 :   %397 = zext i8 %396 to i64 : NIL

780 :   store i64 %397, i64* %RAX_val, !mcsema_real_eip !52 :          <16c>	movzbl	(%rax), %eax

781 :   %398 = add i8 %396, -35 : NIL

782 :   %399 = xor i8 %398, %396, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
783 :   %400 = and i8 %399, 16, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
784 :   %401 = icmp ne i8 %400, 0, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
785 :   store i1 %401, i1* %AF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
786 :   %402 = tail call i8 @llvm.ctpop.i8(i8 %398), !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

787 :   %403 = and i8 %402, 1 : NIL
788 :   %404 = icmp eq i8 %403, 0 : NIL

789 :   store i1 %404, i1* %PF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
790 :   %405 = icmp eq i8 %398, 0, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
791 :   store i1 %405, i1* %ZF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

792 :   %406 = icmp slt i8 %398, 0 : NIL

793 :   store i1 %406, i1* %SF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
794 :   %407 = icmp ult i8 %396, 35, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
795 :   store i1 %407, i1* %CF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
796 :   %408 = and i8 %399, %396, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

797 :   %409 = icmp slt i8 %408, 0 : NIL

798 :   store i1 %409, i1* %OF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

799 :   %410 = load i1* %ZF_val, !mcsema_real_eip !54 :          <171>	jne	42
800 :   br i1 %410, label %block_0x173, label %block_0x19d, !mcsema_real_eip !54 :          <171>	jne	42

801 :   %411 = load i64* %RBP_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
802 :   %412 = add i64 %411, -4, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
803 :   %413 = inttoptr i64 %412 to i64*, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

804 :   %414 = bitcast i64* %413 to i32* : NIL

805 :   %415 = load i32* %414, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

806 :   %416 = add i32 %415, -1 : NIL

807 :   %417 = xor i32 %416, %415, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
808 :   %418 = and i32 %417, 16, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
809 :   %419 = icmp ne i32 %418, 0, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
810 :   store i1 %419, i1* %AF_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
811 :   %420 = trunc i32 %416 to i8, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
812 :   %421 = tail call i8 @llvm.ctpop.i8(i8 %420), !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

813 :   %422 = and i8 %421, 1 : NIL
814 :   %423 = icmp eq i8 %422, 0 : NIL

815 :   store i1 %423, i1* %PF_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
816 :   %424 = icmp eq i32 %416, 0, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
817 :   store i1 %424, i1* %ZF_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

818 :   %425 = icmp slt i32 %416, 0 : NIL

819 :   store i1 %425, i1* %SF_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

820 :   %426 = icmp eq i32 %415, 0 : NIL

821 :   store i1 %426, i1* %CF_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
822 :   %427 = and i32 %417, %415, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

823 :   %428 = icmp slt i32 %427, 0 : NIL

824 :   store i1 %428, i1* %OF_val, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)
825 :   store i32 %416, i32* %414, !mcsema_real_eip !55 :          <11d>	subl	$1, -4(%rbp)

826 :   br label %block_0x147, !mcsema_real_eip !56 :          <121>	jmp	36

827 :   %429 = load i64* %RBP_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
828 :   %430 = add i64 %429, -8, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
829 :   %431 = inttoptr i64 %430 to i64*, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

830 :   %432 = bitcast i64* %431 to i32* : NIL

831 :   %433 = load i32* %432, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

832 :   %uadd399 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %433, i32 1) : NIL
833 :   %434 = extractvalue { i32, i1 } %uadd399, 0 : NIL

834 :   %435 = xor i32 %434, %433, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
835 :   %436 = and i32 %435, 16, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
836 :   %437 = icmp ne i32 %436, 0, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
837 :   store i1 %437, i1* %AF_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

838 :   %438 = icmp slt i32 %434, 0 : NIL

839 :   store i1 %438, i1* %SF_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
840 :   %439 = icmp eq i32 %434, 0, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
841 :   store i1 %439, i1* %ZF_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
842 :   %440 = xor i32 %433, -2147483648, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
843 :   %441 = and i32 %435, %440, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

844 :   %442 = icmp slt i32 %441, 0 : NIL

845 :   store i1 %442, i1* %OF_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
846 :   %443 = trunc i32 %434 to i8, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
847 :   %444 = tail call i8 @llvm.ctpop.i8(i8 %443), !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

848 :   %445 = and i8 %444, 1 : NIL
849 :   %446 = icmp eq i8 %445, 0 : NIL

850 :   store i1 %446, i1* %PF_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

851 :   %447 = extractvalue { i32, i1 } %uadd399, 1 : NIL

852 :   store i1 %447, i1* %CF_val, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)
853 :   store i32 %434, i32* %432, !mcsema_real_eip !57 :          <117>	addl	$1, -8(%rbp)

854 :   br label %block_0x147, !mcsema_real_eip !58 :          <11b>	jmp	42

855 :   %448 = load i64* %RAX_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
856 :   %449 = trunc i64 %448 to i32, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax

857 :   %450 = add i32 %449, -119 : NIL

858 :   %451 = xor i32 %450, %449, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax

859 :   %452 = and i32 %451, 16 : NIL
860 :   %453 = icmp eq i32 %452, 0 : NIL

861 :   store i1 %453, i1* %AF_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
862 :   %454 = trunc i32 %450 to i8, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
863 :   %455 = tail call i8 @llvm.ctpop.i8(i8 %454), !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax

864 :   %456 = and i8 %455, 1 : NIL
865 :   %457 = icmp eq i8 %456, 0 : NIL

866 :   store i1 %457, i1* %PF_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
867 :   %458 = icmp eq i32 %450, 0, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
868 :   store i1 %458, i1* %ZF_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax

869 :   %459 = icmp slt i32 %450, 0 : NIL

870 :   store i1 %459, i1* %SF_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
871 :   %460 = icmp ult i32 %449, 119, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
872 :   store i1 %460, i1* %CF_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax
873 :   %461 = and i32 %451, %449, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax

874 :   %462 = icmp slt i32 %461, 0 : NIL

875 :   store i1 %462, i1* %OF_val, !mcsema_real_eip !59 :          <10c>	cmpl	$119, %eax

876 :   %463 = load i1* %ZF_val, !mcsema_real_eip !60 :          <10f>	jne	24
877 :   br i1 %463, label %block_0x111, label %block_0x129, !mcsema_real_eip !60 :          <10f>	jne	24

878 :   %464 = load i64* %RBP_val, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
879 :   %465 = add i64 %464, -4, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
880 :   %466 = inttoptr i64 %465 to i64*, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax

881 :   %467 = bitcast i64* %466 to i32* : NIL

882 :   %468 = load i32* %467, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
883 :   %469 = zext i32 %468 to i64, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
884 :   store i64 %469, i64* %RAX_val, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax

885 :   %470 = sext i32 %468 to i64, !mcsema_real_eip !62 :          <1a0>	movslq	%eax, %rcx
886 :   store i64 %470, i64* %RCX_val, !mcsema_real_eip !62 :          <1a0>	movslq	%eax, %rcx

887 :   %471 = load i64* %RBP_val, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax
888 :   %472 = add i64 %471, -8, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax
889 :   %473 = inttoptr i64 %472 to i64*, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax

890 :   %474 = bitcast i64* %473 to i32* : NIL

891 :   %475 = load i32* %474, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax

892 :   %476 = sext i32 %475 to i64, !mcsema_real_eip !64 :          <1a6>	movslq	%eax, %rdx
893 :   store i64 %476, i64* %RDX_val, !mcsema_real_eip !64 :          <1a6>	movslq	%eax, %rdx

894 :   %477 = mul i64 %476, 11 : NIL

895 :   %478 = load i64* %RCX_val, !mcsema_real_eip !65 :          <1b9>	addq	%rcx, %rax

896 :   %479 = add i64 %478, %477 : NIL
897 :   %uadd392 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %479, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
898 :   %480 = extractvalue { i64, i1 } %uadd392, 0 : NIL

899 :   %481 = xor i64 %480, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
900 :   %482 = xor i64 %481, %479, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
901 :   %483 = and i64 %482, 16, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
902 :   %484 = icmp ne i64 %483, 0, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
903 :   store i1 %484, i1* %AF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

904 :   %485 = icmp slt i64 %480, 0 : NIL

905 :   store i1 %485, i1* %SF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
906 :   %486 = icmp eq i64 %480, 0, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
907 :   store i1 %486, i1* %ZF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
908 :   %487 = xor i64 %479, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
909 :   %488 = and i64 %481, %487, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

910 :   %489 = icmp slt i64 %488, 0 : NIL

911 :   store i1 %489, i1* %OF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
912 :   %490 = trunc i64 %480 to i8, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
913 :   %491 = tail call i8 @llvm.ctpop.i8(i8 %490), !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

914 :   %492 = and i8 %491, 1 : NIL
915 :   %493 = icmp eq i8 %492, 0 : NIL

916 :   store i1 %493, i1* %PF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

917 :   %494 = extractvalue { i64, i1 } %uadd392, 1 : NIL

918 :   store i1 %494, i1* %CF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
919 :   store i64 %480, i64* %RAX_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

920 :   %495 = inttoptr i64 %480 to i64*, !mcsema_real_eip !67 :          <1c2>	movzbl	(%rax), %eax

921 :   %496 = bitcast i64* %495 to i8* : NIL

922 :   %497 = load i8* %496, !mcsema_real_eip !67 :          <1c2>	movzbl	(%rax), %eax

923 :   %498 = zext i8 %497 to i64 : NIL

924 :   store i64 %498, i64* %RAX_val, !mcsema_real_eip !67 :          <1c2>	movzbl	(%rax), %eax

925 :   %499 = add i8 %497, -32 : NIL

926 :   %500 = xor i8 %499, %497, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
927 :   %501 = and i8 %500, 16, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
928 :   %502 = icmp ne i8 %501, 0, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
929 :   store i1 %502, i1* %AF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
930 :   %503 = tail call i8 @llvm.ctpop.i8(i8 %499), !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

931 :   %504 = and i8 %503, 1 : NIL
932 :   %505 = icmp eq i8 %504, 0 : NIL

933 :   store i1 %505, i1* %PF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
934 :   %506 = icmp eq i8 %499, 0, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
935 :   store i1 %506, i1* %ZF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

936 :   %507 = icmp slt i8 %499, 0 : NIL

937 :   store i1 %507, i1* %SF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
938 :   %508 = icmp ult i8 %497, 32, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
939 :   store i1 %508, i1* %CF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
940 :   %509 = and i8 %500, %497, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

941 :   %510 = icmp slt i8 %509, 0 : NIL

942 :   store i1 %510, i1* %OF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

943 :   %511 = load i1* %ZF_val, !mcsema_real_eip !69 :          <1c7>	je	74
944 :   br i1 %511, label %block_0x213, label %block_0x1c9, !mcsema_real_eip !69 :          <1c7>	je	74

945 :   %512 = tail call x86_64_sysvcc i64 @puts(i64 zext (i32 add (i32 ptrtoint (%1* @data_0x2da to i32), i32 49) to i64)), !mcsema_real_eip !70 :          <178>	callq	0

946 :   %513 = load i64* %RBP_val, !mcsema_real_eip !71 :          <17d>	leaq	-48(%rbp), %rax
947 :   %514 = add i64 %513, -48, !mcsema_real_eip !71 :          <17d>	leaq	-48(%rbp), %rax
948 :   %515 = inttoptr i64 %514 to i64*, !mcsema_real_eip !71 :          <17d>	leaq	-48(%rbp), %rax
949 :   %516 = ptrtoint i64* %515 to i64, !mcsema_real_eip !71 :          <17d>	leaq	-48(%rbp), %rax

950 :   store i64 %516, i64* %RSI_val, !mcsema_real_eip !72 :          <181>	movq	%rax, %rsi

951 :   %517 = tail call x86_64_sysvcc i64 @printf(i64 zext (i32 add (i32 ptrtoint (%1* @data_0x2da to i32), i32 58) to i64)), !mcsema_real_eip !73 :          <18e>	callq	0

952 :   store i64 1, i64* %RDI_val, !mcsema_real_eip !74 :          <193>	movl	$1, %edi

953 :   %518 = tail call x86_64_sysvcc i64 @exit(i64 1), !mcsema_real_eip !75 :          <198>	callq	0
954 :   store i64 %518, i64* %RAX_val, !mcsema_real_eip !75 :          <198>	callq	0

955 :   %519 = load i64* %RBP_val, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
956 :   %520 = add i64 %519, -4, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
957 :   %521 = inttoptr i64 %520 to i64*, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax

958 :   %522 = bitcast i64* %521 to i32* : NIL

959 :   %523 = load i32* %522, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
960 :   %524 = zext i32 %523 to i64, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax
961 :   store i64 %524, i64* %RAX_val, !mcsema_real_eip !61 :          <19d>	movl	-4(%rbp), %eax

962 :   %525 = sext i32 %523 to i64, !mcsema_real_eip !62 :          <1a0>	movslq	%eax, %rcx
963 :   store i64 %525, i64* %RCX_val, !mcsema_real_eip !62 :          <1a0>	movslq	%eax, %rcx

964 :   %526 = load i64* %RBP_val, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax
965 :   %527 = add i64 %526, -8, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax
966 :   %528 = inttoptr i64 %527 to i64*, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax

967 :   %529 = bitcast i64* %528 to i32* : NIL

968 :   %530 = load i32* %529, !mcsema_real_eip !63 :          <1a3>	movl	-8(%rbp), %eax

969 :   %531 = sext i32 %530 to i64, !mcsema_real_eip !64 :          <1a6>	movslq	%eax, %rdx
970 :   store i64 %531, i64* %RDX_val, !mcsema_real_eip !64 :          <1a6>	movslq	%eax, %rdx

971 :   %532 = mul i64 %531, 11 : NIL

972 :   %533 = load i64* %RCX_val, !mcsema_real_eip !65 :          <1b9>	addq	%rcx, %rax

973 :   %534 = add i64 %533, %532 : NIL
974 :   %uadd361 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %534, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
975 :   %535 = extractvalue { i64, i1 } %uadd361, 0 : NIL

976 :   %536 = xor i64 %535, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
977 :   %537 = xor i64 %536, %534, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
978 :   %538 = and i64 %537, 16, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
979 :   %539 = icmp ne i64 %538, 0, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
980 :   store i1 %539, i1* %AF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

981 :   %540 = icmp slt i64 %535, 0 : NIL

982 :   store i1 %540, i1* %SF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
983 :   %541 = icmp eq i64 %535, 0, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
984 :   store i1 %541, i1* %ZF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
985 :   %542 = xor i64 %534, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
986 :   %543 = and i64 %536, %542, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

987 :   %544 = icmp slt i64 %543, 0 : NIL

988 :   store i1 %544, i1* %OF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
989 :   %545 = trunc i64 %535 to i8, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
990 :   %546 = tail call i8 @llvm.ctpop.i8(i8 %545), !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

991 :   %547 = and i8 %546, 1 : NIL
992 :   %548 = icmp eq i8 %547, 0 : NIL

993 :   store i1 %548, i1* %PF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

994 :   %549 = extractvalue { i64, i1 } %uadd361, 1 : NIL

995 :   store i1 %549, i1* %CF_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax
996 :   store i64 %535, i64* %RAX_val, !mcsema_real_eip !66 :          <1bc>	addq	$0, %rax

997 :   %550 = inttoptr i64 %535 to i64*, !mcsema_real_eip !67 :          <1c2>	movzbl	(%rax), %eax

998 :   %551 = bitcast i64* %550 to i8* : NIL

999 :   %552 = load i8* %551, !mcsema_real_eip !67 :          <1c2>	movzbl	(%rax), %eax

1000 :   %553 = zext i8 %552 to i64 : NIL

1001 :   store i64 %553, i64* %RAX_val, !mcsema_real_eip !67 :          <1c2>	movzbl	(%rax), %eax

1002 :   %554 = add i8 %552, -32 : NIL

1003 :   %555 = xor i8 %554, %552, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1004 :   %556 = and i8 %555, 16, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1005 :   %557 = icmp ne i8 %556, 0, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1006 :   store i1 %557, i1* %AF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1007 :   %558 = tail call i8 @llvm.ctpop.i8(i8 %554), !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

1008 :   %559 = and i8 %558, 1 : NIL
1009 :   %560 = icmp eq i8 %559, 0 : NIL

1010 :   store i1 %560, i1* %PF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1011 :   %561 = icmp eq i8 %554, 0, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1012 :   store i1 %561, i1* %ZF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

1013 :   %562 = icmp slt i8 %554, 0 : NIL

1014 :   store i1 %562, i1* %SF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1015 :   %563 = icmp ult i8 %552, 32, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1016 :   store i1 %563, i1* %CF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al
1017 :   %564 = and i8 %555, %552, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

1018 :   %565 = icmp slt i8 %564, 0 : NIL

1019 :   store i1 %565, i1* %OF_val, !mcsema_real_eip !68 :          <1c5>	cmpb	$32, %al

1020 :   %566 = load i1* %ZF_val, !mcsema_real_eip !69 :          <1c7>	je	74
1021 :   br i1 %566, label %block_0x213, label %block_0x1c9, !mcsema_real_eip !69 :          <1c7>	je	74

1022 :   %567 = tail call x86_64_sysvcc i64 @puts(i64 zext (i32 ptrtoint (%1* @data_0x2da to i32) to i64)), !mcsema_real_eip !76 :          <12e>	callq	0

1023 :   %568 = tail call x86_64_sysvcc i64 @puts(i64 zext (i32 add (i32 ptrtoint (%1* @data_0x2da to i32), i32 39) to i64)), !mcsema_real_eip !77 :          <138>	callq	0

1024 :   store i64 4294967295, i64* %RDI_val, !mcsema_real_eip !78 :          <13d>	movl	$4294967295, %edi

1025 :   %569 = tail call x86_64_sysvcc i64 @exit(i64 4294967295), !mcsema_real_eip !79 :          <142>	callq	0
1026 :   store i64 %569, i64* %RAX_val, !mcsema_real_eip !79 :          <142>	callq	0

1027 :   %570 = load i64* %RBP_val, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
1028 :   %571 = add i64 %570, -4, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
1029 :   %572 = inttoptr i64 %571 to i64*, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax

1030 :   %573 = bitcast i64* %572 to i32* : NIL

1031 :   %574 = load i32* %573, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
1032 :   %575 = zext i32 %574 to i64, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax
1033 :   store i64 %575, i64* %RAX_val, !mcsema_real_eip !46 :          <147>	movl	-4(%rbp), %eax

1034 :   %576 = sext i32 %574 to i64, !mcsema_real_eip !47 :          <14a>	movslq	%eax, %rcx
1035 :   store i64 %576, i64* %RCX_val, !mcsema_real_eip !47 :          <14a>	movslq	%eax, %rcx

1036 :   %577 = load i64* %RBP_val, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax
1037 :   %578 = add i64 %577, -8, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax
1038 :   %579 = inttoptr i64 %578 to i64*, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax

1039 :   %580 = bitcast i64* %579 to i32* : NIL

1040 :   %581 = load i32* %580, !mcsema_real_eip !48 :          <14d>	movl	-8(%rbp), %eax

1041 :   %582 = sext i32 %581 to i64, !mcsema_real_eip !49 :          <150>	movslq	%eax, %rdx
1042 :   store i64 %582, i64* %RDX_val, !mcsema_real_eip !49 :          <150>	movslq	%eax, %rdx

1043 :   %583 = mul i64 %582, 11 : NIL

1044 :   %584 = load i64* %RCX_val, !mcsema_real_eip !50 :          <163>	addq	%rcx, %rax

1045 :   %585 = add i64 %584, %583 : NIL
1046 :   %uadd356 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %585, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
1047 :   %586 = extractvalue { i64, i1 } %uadd356, 0 : NIL

1048 :   %587 = xor i64 %586, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1049 :   %588 = xor i64 %587, %585, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1050 :   %589 = and i64 %588, 16, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1051 :   %590 = icmp ne i64 %589, 0, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1052 :   store i1 %590, i1* %AF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

1053 :   %591 = icmp slt i64 %586, 0 : NIL

1054 :   store i1 %591, i1* %SF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1055 :   %592 = icmp eq i64 %586, 0, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1056 :   store i1 %592, i1* %ZF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1057 :   %593 = xor i64 %585, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1058 :   %594 = and i64 %587, %593, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

1059 :   %595 = icmp slt i64 %594, 0 : NIL

1060 :   store i1 %595, i1* %OF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1061 :   %596 = trunc i64 %586 to i8, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1062 :   %597 = tail call i8 @llvm.ctpop.i8(i8 %596), !mcsema_real_eip !51 :          <166>	addq	$0, %rax

1063 :   %598 = and i8 %597, 1 : NIL
1064 :   %599 = icmp eq i8 %598, 0 : NIL

1065 :   store i1 %599, i1* %PF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

1066 :   %600 = extractvalue { i64, i1 } %uadd356, 1 : NIL

1067 :   store i1 %600, i1* %CF_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax
1068 :   store i64 %586, i64* %RAX_val, !mcsema_real_eip !51 :          <166>	addq	$0, %rax

1069 :   %601 = inttoptr i64 %586 to i64*, !mcsema_real_eip !52 :          <16c>	movzbl	(%rax), %eax

1070 :   %602 = bitcast i64* %601 to i8* : NIL

1071 :   %603 = load i8* %602, !mcsema_real_eip !52 :          <16c>	movzbl	(%rax), %eax

1072 :   %604 = zext i8 %603 to i64 : NIL

1073 :   store i64 %604, i64* %RAX_val, !mcsema_real_eip !52 :          <16c>	movzbl	(%rax), %eax

1074 :   %605 = add i8 %603, -35 : NIL

1075 :   %606 = xor i8 %605, %603, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1076 :   %607 = and i8 %606, 16, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1077 :   %608 = icmp ne i8 %607, 0, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1078 :   store i1 %608, i1* %AF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1079 :   %609 = tail call i8 @llvm.ctpop.i8(i8 %605), !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

1080 :   %610 = and i8 %609, 1 : NIL
1081 :   %611 = icmp eq i8 %610, 0 : NIL

1082 :   store i1 %611, i1* %PF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1083 :   %612 = icmp eq i8 %605, 0, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1084 :   store i1 %612, i1* %ZF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

1085 :   %613 = icmp slt i8 %605, 0 : NIL

1086 :   store i1 %613, i1* %SF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1087 :   %614 = icmp ult i8 %603, 35, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1088 :   store i1 %614, i1* %CF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al
1089 :   %615 = and i8 %606, %603, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

1090 :   %616 = icmp slt i8 %615, 0 : NIL

1091 :   store i1 %616, i1* %OF_val, !mcsema_real_eip !53 :          <16f>	cmpb	$35, %al

1092 :   %617 = load i1* %ZF_val, !mcsema_real_eip !54 :          <171>	jne	42
1093 :   br i1 %617, label %block_0x173, label %block_0x19d, !mcsema_real_eip !54 :          <171>	jne	42

1094 :   %618 = load i64* %RBP_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1095 :   %619 = add i64 %618, -8, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1096 :   %620 = inttoptr i64 %619 to i64*, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1097 :   %621 = bitcast i64* %620 to i32* : NIL

1098 :   %622 = load i32* %621, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1099 :   %623 = add i32 %622, -1 : NIL

1100 :   %624 = xor i32 %623, %622, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1101 :   %625 = and i32 %624, 16, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1102 :   %626 = icmp ne i32 %625, 0, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1103 :   store i1 %626, i1* %AF_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1104 :   %627 = trunc i32 %623 to i8, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1105 :   %628 = tail call i8 @llvm.ctpop.i8(i8 %627), !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1106 :   %629 = and i8 %628, 1 : NIL
1107 :   %630 = icmp eq i8 %629, 0 : NIL

1108 :   store i1 %630, i1* %PF_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1109 :   %631 = icmp eq i32 %623, 0, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1110 :   store i1 %631, i1* %ZF_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1111 :   %632 = icmp slt i32 %623, 0 : NIL

1112 :   store i1 %632, i1* %SF_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1113 :   %633 = icmp eq i32 %622, 0 : NIL

1114 :   store i1 %633, i1* %CF_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1115 :   %634 = and i32 %624, %622, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1116 :   %635 = icmp slt i32 %634, 0 : NIL

1117 :   store i1 %635, i1* %OF_val, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)
1118 :   store i32 %623, i32* %621, !mcsema_real_eip !80 :          <111>	subl	$1, -8(%rbp)

1119 :   br label %block_0x147, !mcsema_real_eip !81 :          <115>	jmp	48

1120 :   %636 = load i64* %RBP_val, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1121 :   %637 = add i64 %636, -16, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1122 :   %638 = inttoptr i64 %637 to i64*, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax

1123 :   %639 = bitcast i64* %638 to i32* : NIL

1124 :   %640 = load i32* %639, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1125 :   %641 = zext i32 %640 to i64, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1126 :   store i64 %641, i64* %RAX_val, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax

1127 :   %642 = load i64* %RBP_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1128 :   %643 = add i64 %642, -4, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1129 :   %644 = inttoptr i64 %643 to i64*, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1130 :   %645 = bitcast i64* %644 to i32* : NIL

1131 :   %646 = load i32* %645, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1132 :   %647 = sub i32 %640, %646, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1133 :   %648 = xor i32 %647, %640, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1134 :   %649 = xor i32 %648, %646, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1135 :   %650 = and i32 %649, 16, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1136 :   %651 = icmp ne i32 %650, 0, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1137 :   store i1 %651, i1* %AF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1138 :   %652 = trunc i32 %647 to i8, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1139 :   %653 = tail call i8 @llvm.ctpop.i8(i8 %652), !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1140 :   %654 = and i8 %653, 1 : NIL
1141 :   %655 = icmp eq i8 %654, 0 : NIL

1142 :   store i1 %655, i1* %PF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1143 :   %656 = icmp eq i32 %640, %646 : NIL

1144 :   store i1 %656, i1* %ZF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1145 :   %657 = icmp slt i32 %647, 0 : NIL

1146 :   store i1 %657, i1* %SF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1147 :   %658 = icmp ult i32 %640, %646, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1148 :   store i1 %658, i1* %CF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1149 :   %659 = xor i32 %646, %640, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1150 :   %660 = and i32 %648, %659, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1151 :   %661 = icmp slt i32 %660, 0 : NIL

1152 :   store i1 %661, i1* %OF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1153 :   %662 = load i1* %ZF_val, !mcsema_real_eip !84 :          <219>	jne	28
1154 :   br i1 %662, label %block_0x21b, label %block_0x237, !mcsema_real_eip !84 :          <219>	jne	28

1155 :   %663 = load i64* %RBP_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1156 :   %664 = add i64 %663, -8, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1157 :   %665 = inttoptr i64 %664 to i64*, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)

1158 :   %666 = bitcast i64* %665 to i32* : NIL

1159 :   %667 = load i32* %666, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)

1160 :   %668 = add i32 %667, -2 : NIL

1161 :   %669 = xor i32 %668, %667, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1162 :   %670 = and i32 %669, 16, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1163 :   %671 = icmp ne i32 %670, 0, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1164 :   store i1 %671, i1* %AF_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1165 :   %672 = trunc i32 %668 to i8, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1166 :   %673 = tail call i8 @llvm.ctpop.i8(i8 %672), !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)

1167 :   %674 = and i8 %673, 1 : NIL
1168 :   %675 = icmp eq i8 %674, 0 : NIL

1169 :   store i1 %675, i1* %PF_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1170 :   %676 = icmp eq i32 %668, 0, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1171 :   store i1 %676, i1* %ZF_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)

1172 :   %677 = icmp slt i32 %668, 0 : NIL

1173 :   store i1 %677, i1* %SF_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1174 :   %678 = icmp ult i32 %667, 2, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1175 :   store i1 %678, i1* %CF_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)
1176 :   %679 = and i32 %669, %667, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)

1177 :   %680 = icmp slt i32 %679, 0 : NIL

1178 :   store i1 %680, i1* %OF_val, !mcsema_real_eip !85 :          <1c9>	cmpl	$2, -8(%rbp)

1179 :   %681 = load i1* %ZF_val, !mcsema_real_eip !86 :          <1cd>	jne	56
1180 :   br i1 %681, label %block_0x1cf, label %block_0x207, !mcsema_real_eip !86 :          <1cd>	jne	56

1181 :   %682 = load i64* %RBP_val, !mcsema_real_eip !87 :          <207>	movl	-16(%rbp), %eax
1182 :   %683 = add i64 %682, -16, !mcsema_real_eip !87 :          <207>	movl	-16(%rbp), %eax
1183 :   %684 = inttoptr i64 %683 to i64*, !mcsema_real_eip !87 :          <207>	movl	-16(%rbp), %eax

1184 :   %685 = bitcast i64* %684 to i32* : NIL

1185 :   %686 = load i32* %685, !mcsema_real_eip !87 :          <207>	movl	-16(%rbp), %eax
1186 :   %687 = zext i32 %686 to i64, !mcsema_real_eip !87 :          <207>	movl	-16(%rbp), %eax
1187 :   store i64 %687, i64* %RAX_val, !mcsema_real_eip !87 :          <207>	movl	-16(%rbp), %eax

1188 :   %688 = load i64* %RBP_val, !mcsema_real_eip !88 :          <20a>	movl	%eax, -4(%rbp)
1189 :   %689 = add i64 %688, -4, !mcsema_real_eip !88 :          <20a>	movl	%eax, -4(%rbp)
1190 :   %690 = inttoptr i64 %689 to i64*, !mcsema_real_eip !88 :          <20a>	movl	%eax, -4(%rbp)

1191 :   %691 = bitcast i64* %690 to i32* : NIL

1192 :   store i32 %686, i32* %691, !mcsema_real_eip !88 :          <20a>	movl	%eax, -4(%rbp)

1193 :   %692 = load i64* %RBP_val, !mcsema_real_eip !89 :          <20d>	movl	-20(%rbp), %eax
1194 :   %693 = add i64 %692, -20, !mcsema_real_eip !89 :          <20d>	movl	-20(%rbp), %eax
1195 :   %694 = inttoptr i64 %693 to i64*, !mcsema_real_eip !89 :          <20d>	movl	-20(%rbp), %eax

1196 :   %695 = bitcast i64* %694 to i32* : NIL

1197 :   %696 = load i32* %695, !mcsema_real_eip !89 :          <20d>	movl	-20(%rbp), %eax
1198 :   %697 = zext i32 %696 to i64, !mcsema_real_eip !89 :          <20d>	movl	-20(%rbp), %eax
1199 :   store i64 %697, i64* %RAX_val, !mcsema_real_eip !89 :          <20d>	movl	-20(%rbp), %eax

1200 :   %698 = load i64* %RBP_val, !mcsema_real_eip !90 :          <210>	movl	%eax, -8(%rbp)
1201 :   %699 = add i64 %698, -8, !mcsema_real_eip !90 :          <210>	movl	%eax, -8(%rbp)
1202 :   %700 = inttoptr i64 %699 to i64*, !mcsema_real_eip !90 :          <210>	movl	%eax, -8(%rbp)

1203 :   %701 = bitcast i64* %700 to i32* : NIL

1204 :   store i32 %696, i32* %701, !mcsema_real_eip !90 :          <210>	movl	%eax, -8(%rbp)

1205 :   %702 = load i64* %RBP_val, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1206 :   %703 = add i64 %702, -16, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1207 :   %704 = inttoptr i64 %703 to i64*, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax

1208 :   %705 = bitcast i64* %704 to i32* : NIL

1209 :   %706 = load i32* %705, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1210 :   %707 = zext i32 %706 to i64, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax
1211 :   store i64 %707, i64* %RAX_val, !mcsema_real_eip !82 :          <213>	movl	-16(%rbp), %eax

1212 :   %708 = load i64* %RBP_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1213 :   %709 = add i64 %708, -4, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1214 :   %710 = inttoptr i64 %709 to i64*, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1215 :   %711 = bitcast i64* %710 to i32* : NIL

1216 :   %712 = load i32* %711, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1217 :   %713 = sub i32 %706, %712, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1218 :   %714 = xor i32 %713, %706, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1219 :   %715 = xor i32 %714, %712, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1220 :   %716 = and i32 %715, 16, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1221 :   %717 = icmp ne i32 %716, 0, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1222 :   store i1 %717, i1* %AF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1223 :   %718 = trunc i32 %713 to i8, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1224 :   %719 = tail call i8 @llvm.ctpop.i8(i8 %718), !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1225 :   %720 = and i8 %719, 1 : NIL
1226 :   %721 = icmp eq i8 %720, 0 : NIL

1227 :   store i1 %721, i1* %PF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1228 :   %722 = icmp eq i32 %706, %712 : NIL

1229 :   store i1 %722, i1* %ZF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1230 :   %723 = icmp slt i32 %713, 0 : NIL

1231 :   store i1 %723, i1* %SF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1232 :   %724 = icmp ult i32 %706, %712, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1233 :   store i1 %724, i1* %CF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1234 :   %725 = xor i32 %712, %706, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax
1235 :   %726 = and i32 %714, %725, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1236 :   %727 = icmp slt i32 %726, 0 : NIL

1237 :   store i1 %727, i1* %OF_val, !mcsema_real_eip !83 :          <216>	cmpl	-4(%rbp), %eax

1238 :   %728 = load i1* %ZF_val, !mcsema_real_eip !84 :          <219>	jne	28
1239 :   br i1 %728, label %block_0x21b, label %block_0x237, !mcsema_real_eip !84 :          <219>	jne	28

1240 :   %729 = load i64* %RBP_val, !mcsema_real_eip !91 :          <1cf>	movl	-4(%rbp), %eax
1241 :   %730 = add i64 %729, -4, !mcsema_real_eip !91 :          <1cf>	movl	-4(%rbp), %eax
1242 :   %731 = inttoptr i64 %730 to i64*, !mcsema_real_eip !91 :          <1cf>	movl	-4(%rbp), %eax

1243 :   %732 = bitcast i64* %731 to i32* : NIL

1244 :   %733 = load i32* %732, !mcsema_real_eip !91 :          <1cf>	movl	-4(%rbp), %eax
1245 :   %734 = zext i32 %733 to i64, !mcsema_real_eip !91 :          <1cf>	movl	-4(%rbp), %eax
1246 :   store i64 %734, i64* %RAX_val, !mcsema_real_eip !91 :          <1cf>	movl	-4(%rbp), %eax

1247 :   %735 = sext i32 %733 to i64, !mcsema_real_eip !92 :          <1d2>	movslq	%eax, %rcx
1248 :   store i64 %735, i64* %RCX_val, !mcsema_real_eip !92 :          <1d2>	movslq	%eax, %rcx

1249 :   %736 = load i64* %RBP_val, !mcsema_real_eip !93 :          <1d5>	movl	-8(%rbp), %eax
1250 :   %737 = add i64 %736, -8, !mcsema_real_eip !93 :          <1d5>	movl	-8(%rbp), %eax
1251 :   %738 = inttoptr i64 %737 to i64*, !mcsema_real_eip !93 :          <1d5>	movl	-8(%rbp), %eax

1252 :   %739 = bitcast i64* %738 to i32* : NIL

1253 :   %740 = load i32* %739, !mcsema_real_eip !93 :          <1d5>	movl	-8(%rbp), %eax

1254 :   %741 = sext i32 %740 to i64, !mcsema_real_eip !94 :          <1d8>	movslq	%eax, %rdx
1255 :   store i64 %741, i64* %RDX_val, !mcsema_real_eip !94 :          <1d8>	movslq	%eax, %rdx

1256 :   %742 = mul i64 %741, 11 : NIL

1257 :   %743 = load i64* %RCX_val, !mcsema_real_eip !95 :          <1eb>	addq	%rcx, %rax

1258 :   %744 = add i64 %743, %742 : NIL
1259 :   %uadd366 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %744, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
1260 :   %745 = extractvalue { i64, i1 } %uadd366, 0 : NIL

1261 :   %746 = xor i64 %745, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1262 :   %747 = xor i64 %746, %744, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1263 :   %748 = and i64 %747, 16, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1264 :   %749 = icmp ne i64 %748, 0, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1265 :   store i1 %749, i1* %AF_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax

1266 :   %750 = icmp slt i64 %745, 0 : NIL

1267 :   store i1 %750, i1* %SF_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1268 :   %751 = icmp eq i64 %745, 0, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1269 :   store i1 %751, i1* %ZF_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1270 :   %752 = xor i64 %744, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1271 :   %753 = and i64 %746, %752, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax

1272 :   %754 = icmp slt i64 %753, 0 : NIL

1273 :   store i1 %754, i1* %OF_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1274 :   %755 = trunc i64 %745 to i8, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1275 :   %756 = tail call i8 @llvm.ctpop.i8(i8 %755), !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax

1276 :   %757 = and i8 %756, 1 : NIL
1277 :   %758 = icmp eq i8 %757, 0 : NIL

1278 :   store i1 %758, i1* %PF_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax

1279 :   %759 = extractvalue { i64, i1 } %uadd366, 1 : NIL

1280 :   store i1 %759, i1* %CF_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax
1281 :   store i64 %745, i64* %RAX_val, !mcsema_real_eip !96 :          <1ee>	addq	$0, %rax

1282 :   %760 = inttoptr i64 %745 to i64*, !mcsema_real_eip !97 :          <1f4>	movzbl	(%rax), %eax

1283 :   %761 = bitcast i64* %760 to i8* : NIL

1284 :   %762 = load i8* %761, !mcsema_real_eip !97 :          <1f4>	movzbl	(%rax), %eax

1285 :   %763 = zext i8 %762 to i64 : NIL

1286 :   store i64 %763, i64* %RAX_val, !mcsema_real_eip !97 :          <1f4>	movzbl	(%rax), %eax

1287 :   %764 = add i8 %762, -124 : NIL

1288 :   %765 = xor i8 %764, %762, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al

1289 :   %766 = and i8 %765, 16 : NIL
1290 :   %767 = icmp eq i8 %766, 0 : NIL

1291 :   store i1 %767, i1* %AF_val, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al
1292 :   %768 = tail call i8 @llvm.ctpop.i8(i8 %764), !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al

1293 :   %769 = and i8 %768, 1 : NIL
1294 :   %770 = icmp eq i8 %769, 0 : NIL

1295 :   store i1 %770, i1* %PF_val, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al
1296 :   %771 = icmp eq i8 %764, 0, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al
1297 :   store i1 %771, i1* %ZF_val, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al

1298 :   %772 = icmp slt i8 %764, 0 : NIL

1299 :   store i1 %772, i1* %SF_val, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al
1300 :   %773 = icmp ult i8 %762, 124, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al
1301 :   store i1 %773, i1* %CF_val, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al
1302 :   %774 = and i8 %765, %762, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al

1303 :   %775 = icmp slt i8 %774, 0 : NIL

1304 :   store i1 %775, i1* %OF_val, !mcsema_real_eip !98 :          <1f7>	cmpb	$124, %al

1305 :   %776 = load i1* %ZF_val, !mcsema_real_eip !99 :          <1f9>	jne	12
1306 :   br i1 %776, label %block_0x1fb, label %block_0x207, !mcsema_real_eip !99 :          <1f9>	jne	12

1307 :   %777 = load i64* %RBP_val, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1308 :   %778 = add i64 %777, -4, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1309 :   %779 = inttoptr i64 %778 to i64*, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax

1310 :   %780 = bitcast i64* %779 to i32* : NIL

1311 :   %781 = load i32* %780, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1312 :   %782 = zext i32 %781 to i64, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1313 :   store i64 %782, i64* %RAX_val, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax

1314 :   %783 = sext i32 %781 to i64, !mcsema_real_eip !101 :          <23a>	movslq	%eax, %rcx
1315 :   store i64 %783, i64* %RCX_val, !mcsema_real_eip !101 :          <23a>	movslq	%eax, %rcx

1316 :   %784 = load i64* %RBP_val, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax
1317 :   %785 = add i64 %784, -8, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax
1318 :   %786 = inttoptr i64 %785 to i64*, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax

1319 :   %787 = bitcast i64* %786 to i32* : NIL

1320 :   %788 = load i32* %787, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax

1321 :   %789 = sext i32 %788 to i64, !mcsema_real_eip !103 :          <240>	movslq	%eax, %rdx
1322 :   store i64 %789, i64* %RDX_val, !mcsema_real_eip !103 :          <240>	movslq	%eax, %rdx

1323 :   %790 = mul i64 %789, 11 : NIL

1324 :   %791 = load i64* %RCX_val, !mcsema_real_eip !104 :          <253>	addq	%rcx, %rax

1325 :   %792 = add i64 %791, %790 : NIL
1326 :   %uadd384 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %792, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
1327 :   %793 = extractvalue { i64, i1 } %uadd384, 0 : NIL

1328 :   %794 = xor i64 %793, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1329 :   %795 = xor i64 %794, %792, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1330 :   %796 = and i64 %795, 16, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1331 :   %797 = icmp ne i64 %796, 0, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1332 :   store i1 %797, i1* %AF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1333 :   %798 = icmp slt i64 %793, 0 : NIL

1334 :   store i1 %798, i1* %SF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1335 :   %799 = icmp eq i64 %793, 0, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1336 :   store i1 %799, i1* %ZF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1337 :   %800 = xor i64 %792, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1338 :   %801 = and i64 %794, %800, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1339 :   %802 = icmp slt i64 %801, 0 : NIL

1340 :   store i1 %802, i1* %OF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1341 :   %803 = trunc i64 %793 to i8, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1342 :   %804 = tail call i8 @llvm.ctpop.i8(i8 %803), !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1343 :   %805 = and i8 %804, 1 : NIL
1344 :   %806 = icmp eq i8 %805, 0 : NIL

1345 :   store i1 %806, i1* %PF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1346 :   %807 = extractvalue { i64, i1 } %uadd384, 1 : NIL

1347 :   store i1 %807, i1* %CF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1348 :   %808 = inttoptr i64 %793 to i64*, !mcsema_real_eip !106 :          <25c>	movb	$88, (%rax)

1349 :   %809 = bitcast i64* %808 to i8* : NIL

1350 :   store i8 88, i8* %809, !mcsema_real_eip !106 :          <25c>	movb	$88, (%rax)

1351 :   store i64 0, i64* %RAX_val, !mcsema_real_eip !107 :          <25f>	movl	$0, %eax

1352 :   %810 = load i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0

1353 :   %811 = add i64 %810, -8 : NIL

1354 :   %812 = inttoptr i64 %811 to i64*, !mcsema_real_eip !108 :          <264>	callq	0
1355 :   store i64 -4981261766360305936, i64* %812, !mcsema_real_eip !108 :          <264>	callq	0
1356 :   store i64 %811, i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0
1357 :   %813 = load i64* %RAX_val, !mcsema_real_eip !108 :          <264>	callq	0
1358 :   store i64 %813, i64* %RAX, !mcsema_real_eip !108 :          <264>	callq	0
1359 :   %814 = load i64* %RBX_val, !mcsema_real_eip !108 :          <264>	callq	0
1360 :   store i64 %814, i64* %RBX, !mcsema_real_eip !108 :          <264>	callq	0
1361 :   %815 = load i64* %RCX_val, !mcsema_real_eip !108 :          <264>	callq	0
1362 :   store i64 %815, i64* %RCX, !mcsema_real_eip !108 :          <264>	callq	0
1363 :   %816 = load i64* %RDX_val, !mcsema_real_eip !108 :          <264>	callq	0
1364 :   store i64 %816, i64* %RDX, !mcsema_real_eip !108 :          <264>	callq	0
1365 :   %817 = load i64* %RSI_val, !mcsema_real_eip !108 :          <264>	callq	0
1366 :   store i64 %817, i64* %RSI, !mcsema_real_eip !108 :          <264>	callq	0
1367 :   %818 = load i64* %RDI_val, !mcsema_real_eip !108 :          <264>	callq	0
1368 :   store i64 %818, i64* %RDI, !mcsema_real_eip !108 :          <264>	callq	0
1369 :   %819 = load i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0
1370 :   store i64 %819, i64* %RSP, !mcsema_real_eip !108 :          <264>	callq	0
1371 :   %820 = load i64* %RBP_val, !mcsema_real_eip !108 :          <264>	callq	0
1372 :   store i64 %820, i64* %RBP, !mcsema_real_eip !108 :          <264>	callq	0
1373 :   %821 = load i64* %R8_val, !mcsema_real_eip !108 :          <264>	callq	0
1374 :   store i64 %821, i64* %R8, !mcsema_real_eip !108 :          <264>	callq	0
1375 :   %822 = load i64* %R9_val, !mcsema_real_eip !108 :          <264>	callq	0
1376 :   store i64 %822, i64* %R9, !mcsema_real_eip !108 :          <264>	callq	0
1377 :   %823 = load i64* %R10_val, !mcsema_real_eip !108 :          <264>	callq	0
1378 :   store i64 %823, i64* %R10, !mcsema_real_eip !108 :          <264>	callq	0
1379 :   %824 = load i64* %R11_val, !mcsema_real_eip !108 :          <264>	callq	0
1380 :   store i64 %824, i64* %R11, !mcsema_real_eip !108 :          <264>	callq	0
1381 :   %825 = load i64* %R12_val, !mcsema_real_eip !108 :          <264>	callq	0
1382 :   store i64 %825, i64* %R12, !mcsema_real_eip !108 :          <264>	callq	0
1383 :   %826 = load i64* %R13_val, !mcsema_real_eip !108 :          <264>	callq	0
1384 :   store i64 %826, i64* %R13, !mcsema_real_eip !108 :          <264>	callq	0
1385 :   %827 = load i64* %R14_val, !mcsema_real_eip !108 :          <264>	callq	0
1386 :   store i64 %827, i64* %R14, !mcsema_real_eip !108 :          <264>	callq	0
1387 :   %828 = load i64* %R15_val, !mcsema_real_eip !108 :          <264>	callq	0
1388 :   store i64 %828, i64* %R15, !mcsema_real_eip !108 :          <264>	callq	0
1389 :   %829 = load i64* %RIP_val, !mcsema_real_eip !108 :          <264>	callq	0
1390 :   store i64 %829, i64* %RIP, !mcsema_real_eip !108 :          <264>	callq	0
1391 :   %830 = load i1* %CF_val, !mcsema_real_eip !108 :          <264>	callq	0
1392 :   store i1 %830, i1* %CF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1393 :   %831 = load i1* %PF_val, !mcsema_real_eip !108 :          <264>	callq	0
1394 :   store i1 %831, i1* %PF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1395 :   %832 = load i1* %AF_val, !mcsema_real_eip !108 :          <264>	callq	0
1396 :   store i1 %832, i1* %AF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1397 :   %833 = load i1* %ZF_val, !mcsema_real_eip !108 :          <264>	callq	0
1398 :   store i1 %833, i1* %ZF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1399 :   %834 = load i1* %SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1400 :   store i1 %834, i1* %SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1401 :   %835 = load i1* %OF_val, !mcsema_real_eip !108 :          <264>	callq	0
1402 :   store i1 %835, i1* %OF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1403 :   %836 = load i1* %DF_val, !mcsema_real_eip !108 :          <264>	callq	0
1404 :   store i1 %836, i1* %DF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1405 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !108 :          <264>	callq	0
1406 :   %837 = load i1* %FPU_B_val, !mcsema_real_eip !108 :          <264>	callq	0
1407 :   store i1 %837, i1* %FPU_B, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1408 :   %838 = load i1* %FPU_C3_val, !mcsema_real_eip !108 :          <264>	callq	0
1409 :   store i1 %838, i1* %FPU_C3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1410 :   %839 = load i3* %FPU_TOP_val, !mcsema_real_eip !108 :          <264>	callq	0
1411 :   store i3 %839, i3* %FPU_TOP, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1412 :   %840 = load i1* %FPU_C2_val, !mcsema_real_eip !108 :          <264>	callq	0
1413 :   store i1 %840, i1* %FPU_C2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1414 :   %841 = load i1* %FPU_C1_val, !mcsema_real_eip !108 :          <264>	callq	0
1415 :   store i1 %841, i1* %FPU_C1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1416 :   %842 = load i1* %FPU_C0_val, !mcsema_real_eip !108 :          <264>	callq	0
1417 :   store i1 %842, i1* %FPU_C0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1418 :   %843 = load i1* %FPU_ES_val, !mcsema_real_eip !108 :          <264>	callq	0
1419 :   store i1 %843, i1* %FPU_ES, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1420 :   %844 = load i1* %FPU_SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1421 :   store i1 %844, i1* %FPU_SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1422 :   %845 = load i1* %FPU_PE_val, !mcsema_real_eip !108 :          <264>	callq	0
1423 :   store i1 %845, i1* %FPU_PE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1424 :   %846 = load i1* %FPU_UE_val, !mcsema_real_eip !108 :          <264>	callq	0
1425 :   store i1 %846, i1* %FPU_UE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1426 :   %847 = load i1* %FPU_OE_val, !mcsema_real_eip !108 :          <264>	callq	0
1427 :   store i1 %847, i1* %FPU_OE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1428 :   %848 = load i1* %FPU_ZE_val, !mcsema_real_eip !108 :          <264>	callq	0
1429 :   store i1 %848, i1* %FPU_ZE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1430 :   %849 = load i1* %FPU_DE_val, !mcsema_real_eip !108 :          <264>	callq	0
1431 :   store i1 %849, i1* %FPU_DE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1432 :   %850 = load i1* %FPU_IE_val, !mcsema_real_eip !108 :          <264>	callq	0
1433 :   store i1 %850, i1* %FPU_IE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1434 :   %851 = load i1* %FPU_X_val, !mcsema_real_eip !108 :          <264>	callq	0
1435 :   store i1 %851, i1* %FPU_X, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1436 :   %852 = load i2* %FPU_RC_val, !mcsema_real_eip !108 :          <264>	callq	0
1437 :   store i2 %852, i2* %FPU_RC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1438 :   %853 = load i2* %FPU_PC_val, !mcsema_real_eip !108 :          <264>	callq	0
1439 :   store i2 %853, i2* %FPU_PC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1440 :   %854 = load i1* %FPU_PM_val, !mcsema_real_eip !108 :          <264>	callq	0
1441 :   store i1 %854, i1* %FPU_PM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1442 :   %855 = load i1* %FPU_UM_val, !mcsema_real_eip !108 :          <264>	callq	0
1443 :   store i1 %855, i1* %FPU_UM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1444 :   %856 = load i1* %FPU_OM_val, !mcsema_real_eip !108 :          <264>	callq	0
1445 :   store i1 %856, i1* %FPU_OM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1446 :   %857 = load i1* %FPU_ZM_val, !mcsema_real_eip !108 :          <264>	callq	0
1447 :   store i1 %857, i1* %FPU_ZM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1448 :   %858 = load i1* %FPU_DM_val, !mcsema_real_eip !108 :          <264>	callq	0
1449 :   store i1 %858, i1* %FPU_DM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1450 :   %859 = load i1* %FPU_IM_val, !mcsema_real_eip !108 :          <264>	callq	0
1451 :   store i1 %859, i1* %FPU_IM, align 1, !mcsema_real_eip !108 :          <264>	callq	0

1452 :   %860 = load i64* %53, align 4 : NIL
1453 :   store i64 %860, i64* %52, align 4 : NIL

1454 :   %861 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
1455 :   store i16 %861, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1456 :   %862 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
1457 :   store i64 %862, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1458 :   %863 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
1459 :   store i16 %863, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1460 :   %864 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
1461 :   store i64 %864, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1462 :   %865 = load i128* %XMM0_val, !mcsema_real_eip !108 :          <264>	callq	0
1463 :   store i128 %865, i128* %XMM0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1464 :   %866 = load i128* %XMM1_val, !mcsema_real_eip !108 :          <264>	callq	0
1465 :   store i128 %866, i128* %XMM1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1466 :   %867 = load i128* %XMM2_val, !mcsema_real_eip !108 :          <264>	callq	0
1467 :   store i128 %867, i128* %XMM2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1468 :   %868 = load i128* %XMM3_val, !mcsema_real_eip !108 :          <264>	callq	0
1469 :   store i128 %868, i128* %XMM3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1470 :   %869 = load i128* %XMM4_val, !mcsema_real_eip !108 :          <264>	callq	0
1471 :   store i128 %869, i128* %XMM4, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1472 :   %870 = load i128* %XMM5_val, !mcsema_real_eip !108 :          <264>	callq	0
1473 :   store i128 %870, i128* %XMM5, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1474 :   %871 = load i128* %XMM6_val, !mcsema_real_eip !108 :          <264>	callq	0
1475 :   store i128 %871, i128* %XMM6, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1476 :   %872 = load i128* %XMM7_val, !mcsema_real_eip !108 :          <264>	callq	0
1477 :   store i128 %872, i128* %XMM7, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1478 :   %873 = load i128* %XMM8_val, !mcsema_real_eip !108 :          <264>	callq	0
1479 :   store i128 %873, i128* %XMM8, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1480 :   %874 = load i128* %XMM9_val, !mcsema_real_eip !108 :          <264>	callq	0
1481 :   store i128 %874, i128* %XMM9, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1482 :   %875 = load i128* %XMM10_val, !mcsema_real_eip !108 :          <264>	callq	0
1483 :   store i128 %875, i128* %XMM10, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1484 :   %876 = load i128* %XMM11_val, !mcsema_real_eip !108 :          <264>	callq	0
1485 :   store i128 %876, i128* %XMM11, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1486 :   %877 = load i128* %XMM12_val, !mcsema_real_eip !108 :          <264>	callq	0
1487 :   store i128 %877, i128* %XMM12, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1488 :   %878 = load i128* %XMM13_val, !mcsema_real_eip !108 :          <264>	callq	0
1489 :   store i128 %878, i128* %XMM13, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1490 :   %879 = load i128* %XMM14_val, !mcsema_real_eip !108 :          <264>	callq	0
1491 :   store i128 %879, i128* %XMM14, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1492 :   %880 = load i128* %XMM15_val, !mcsema_real_eip !108 :          <264>	callq	0
1493 :   store i128 %880, i128* %XMM15, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1494 :   %881 = load i64* %STACK_BASE_val, !mcsema_real_eip !108 :          <264>	callq	0
1495 :   store i64 %881, i64* %STACK_BASE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1496 :   %882 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !108 :          <264>	callq	0
1497 :   store i64 %882, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1498 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0), !mcsema_real_eip !108 :          <264>	callq	0
1499 :   %883 = load i64* %RAX, !mcsema_real_eip !108 :          <264>	callq	0
1500 :   store i64 %883, i64* %RAX_val, !mcsema_real_eip !108 :          <264>	callq	0
1501 :   %884 = load i64* %RBX, !mcsema_real_eip !108 :          <264>	callq	0
1502 :   store i64 %884, i64* %RBX_val, !mcsema_real_eip !108 :          <264>	callq	0
1503 :   %885 = load i64* %RCX, !mcsema_real_eip !108 :          <264>	callq	0
1504 :   store i64 %885, i64* %RCX_val, !mcsema_real_eip !108 :          <264>	callq	0
1505 :   %886 = load i64* %RDX, !mcsema_real_eip !108 :          <264>	callq	0
1506 :   store i64 %886, i64* %RDX_val, !mcsema_real_eip !108 :          <264>	callq	0
1507 :   %887 = load i64* %RSI, !mcsema_real_eip !108 :          <264>	callq	0
1508 :   store i64 %887, i64* %RSI_val, !mcsema_real_eip !108 :          <264>	callq	0
1509 :   %888 = load i64* %RDI, !mcsema_real_eip !108 :          <264>	callq	0
1510 :   store i64 %888, i64* %RDI_val, !mcsema_real_eip !108 :          <264>	callq	0
1511 :   %889 = load i64* %RSP, !mcsema_real_eip !108 :          <264>	callq	0
1512 :   store i64 %889, i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0
1513 :   %890 = load i64* %RBP, !mcsema_real_eip !108 :          <264>	callq	0
1514 :   store i64 %890, i64* %RBP_val, !mcsema_real_eip !108 :          <264>	callq	0
1515 :   %891 = load i64* %R8, !mcsema_real_eip !108 :          <264>	callq	0
1516 :   store i64 %891, i64* %R8_val, !mcsema_real_eip !108 :          <264>	callq	0
1517 :   %892 = load i64* %R9, !mcsema_real_eip !108 :          <264>	callq	0
1518 :   store i64 %892, i64* %R9_val, !mcsema_real_eip !108 :          <264>	callq	0
1519 :   %893 = load i64* %R10, !mcsema_real_eip !108 :          <264>	callq	0
1520 :   store i64 %893, i64* %R10_val, !mcsema_real_eip !108 :          <264>	callq	0
1521 :   %894 = load i64* %R11, !mcsema_real_eip !108 :          <264>	callq	0
1522 :   store i64 %894, i64* %R11_val, !mcsema_real_eip !108 :          <264>	callq	0
1523 :   %895 = load i64* %R12, !mcsema_real_eip !108 :          <264>	callq	0
1524 :   store i64 %895, i64* %R12_val, !mcsema_real_eip !108 :          <264>	callq	0
1525 :   %896 = load i64* %R13, !mcsema_real_eip !108 :          <264>	callq	0
1526 :   store i64 %896, i64* %R13_val, !mcsema_real_eip !108 :          <264>	callq	0
1527 :   %897 = load i64* %R14, !mcsema_real_eip !108 :          <264>	callq	0
1528 :   store i64 %897, i64* %R14_val, !mcsema_real_eip !108 :          <264>	callq	0
1529 :   %898 = load i64* %R15, !mcsema_real_eip !108 :          <264>	callq	0
1530 :   store i64 %898, i64* %R15_val, !mcsema_real_eip !108 :          <264>	callq	0
1531 :   %899 = load i64* %RIP, !mcsema_real_eip !108 :          <264>	callq	0
1532 :   store i64 %899, i64* %RIP_val, !mcsema_real_eip !108 :          <264>	callq	0
1533 :   %900 = load i1* %CF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1534 :   store i1 %900, i1* %CF_val, !mcsema_real_eip !108 :          <264>	callq	0
1535 :   %901 = load i1* %PF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1536 :   store i1 %901, i1* %PF_val, !mcsema_real_eip !108 :          <264>	callq	0
1537 :   %902 = load i1* %AF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1538 :   store i1 %902, i1* %AF_val, !mcsema_real_eip !108 :          <264>	callq	0
1539 :   %903 = load i1* %ZF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1540 :   store i1 %903, i1* %ZF_val, !mcsema_real_eip !108 :          <264>	callq	0
1541 :   %904 = load i1* %SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1542 :   store i1 %904, i1* %SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1543 :   %905 = load i1* %OF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1544 :   store i1 %905, i1* %OF_val, !mcsema_real_eip !108 :          <264>	callq	0
1545 :   %906 = load i1* %DF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1546 :   store i1 %906, i1* %DF_val, !mcsema_real_eip !108 :          <264>	callq	0
1547 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !108 :          <264>	callq	0
1548 :   %907 = load i1* %FPU_B, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1549 :   store i1 %907, i1* %FPU_B_val, !mcsema_real_eip !108 :          <264>	callq	0
1550 :   %908 = load i1* %FPU_C3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1551 :   store i1 %908, i1* %FPU_C3_val, !mcsema_real_eip !108 :          <264>	callq	0
1552 :   %909 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1553 :   store i3 %909, i3* %FPU_TOP_val, !mcsema_real_eip !108 :          <264>	callq	0
1554 :   %910 = load i1* %FPU_C2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1555 :   store i1 %910, i1* %FPU_C2_val, !mcsema_real_eip !108 :          <264>	callq	0
1556 :   %911 = load i1* %FPU_C1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1557 :   store i1 %911, i1* %FPU_C1_val, !mcsema_real_eip !108 :          <264>	callq	0
1558 :   %912 = load i1* %FPU_C0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1559 :   store i1 %912, i1* %FPU_C0_val, !mcsema_real_eip !108 :          <264>	callq	0
1560 :   %913 = load i1* %FPU_ES, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1561 :   store i1 %913, i1* %FPU_ES_val, !mcsema_real_eip !108 :          <264>	callq	0
1562 :   %914 = load i1* %FPU_SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1563 :   store i1 %914, i1* %FPU_SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1564 :   %915 = load i1* %FPU_PE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1565 :   store i1 %915, i1* %FPU_PE_val, !mcsema_real_eip !108 :          <264>	callq	0
1566 :   %916 = load i1* %FPU_UE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1567 :   store i1 %916, i1* %FPU_UE_val, !mcsema_real_eip !108 :          <264>	callq	0
1568 :   %917 = load i1* %FPU_OE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1569 :   store i1 %917, i1* %FPU_OE_val, !mcsema_real_eip !108 :          <264>	callq	0
1570 :   %918 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1571 :   store i1 %918, i1* %FPU_ZE_val, !mcsema_real_eip !108 :          <264>	callq	0
1572 :   %919 = load i1* %FPU_DE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1573 :   store i1 %919, i1* %FPU_DE_val, !mcsema_real_eip !108 :          <264>	callq	0
1574 :   %920 = load i1* %FPU_IE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1575 :   store i1 %920, i1* %FPU_IE_val, !mcsema_real_eip !108 :          <264>	callq	0
1576 :   %921 = load i1* %FPU_X, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1577 :   store i1 %921, i1* %FPU_X_val, !mcsema_real_eip !108 :          <264>	callq	0
1578 :   %922 = load i2* %FPU_RC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1579 :   store i2 %922, i2* %FPU_RC_val, !mcsema_real_eip !108 :          <264>	callq	0
1580 :   %923 = load i2* %FPU_PC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1581 :   store i2 %923, i2* %FPU_PC_val, !mcsema_real_eip !108 :          <264>	callq	0
1582 :   %924 = load i1* %FPU_PM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1583 :   store i1 %924, i1* %FPU_PM_val, !mcsema_real_eip !108 :          <264>	callq	0
1584 :   %925 = load i1* %FPU_UM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1585 :   store i1 %925, i1* %FPU_UM_val, !mcsema_real_eip !108 :          <264>	callq	0
1586 :   %926 = load i1* %FPU_OM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1587 :   store i1 %926, i1* %FPU_OM_val, !mcsema_real_eip !108 :          <264>	callq	0
1588 :   %927 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1589 :   store i1 %927, i1* %FPU_ZM_val, !mcsema_real_eip !108 :          <264>	callq	0
1590 :   %928 = load i1* %FPU_DM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1591 :   store i1 %928, i1* %FPU_DM_val, !mcsema_real_eip !108 :          <264>	callq	0
1592 :   %929 = load i1* %FPU_IM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1593 :   store i1 %929, i1* %FPU_IM_val, !mcsema_real_eip !108 :          <264>	callq	0

1594 :   %930 = load i64* %52, align 4 : NIL
1595 :   store i64 %930, i64* %53, align 4 : NIL

1596 :   %931 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1597 :   store i16 %931, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
1598 :   %932 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !108 :          <264>	callq	0
1599 :   store i64 %932, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
1600 :   %933 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1601 :   store i16 %933, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
1602 :   %934 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !108 :          <264>	callq	0
1603 :   store i64 %934, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
1604 :   %935 = load i128* %XMM0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1605 :   store i128 %935, i128* %XMM0_val, !mcsema_real_eip !108 :          <264>	callq	0
1606 :   %936 = load i128* %XMM1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1607 :   store i128 %936, i128* %XMM1_val, !mcsema_real_eip !108 :          <264>	callq	0
1608 :   %937 = load i128* %XMM2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1609 :   store i128 %937, i128* %XMM2_val, !mcsema_real_eip !108 :          <264>	callq	0
1610 :   %938 = load i128* %XMM3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1611 :   store i128 %938, i128* %XMM3_val, !mcsema_real_eip !108 :          <264>	callq	0
1612 :   %939 = load i128* %XMM4, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1613 :   store i128 %939, i128* %XMM4_val, !mcsema_real_eip !108 :          <264>	callq	0
1614 :   %940 = load i128* %XMM5, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1615 :   store i128 %940, i128* %XMM5_val, !mcsema_real_eip !108 :          <264>	callq	0
1616 :   %941 = load i128* %XMM6, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1617 :   store i128 %941, i128* %XMM6_val, !mcsema_real_eip !108 :          <264>	callq	0
1618 :   %942 = load i128* %XMM7, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1619 :   store i128 %942, i128* %XMM7_val, !mcsema_real_eip !108 :          <264>	callq	0
1620 :   %943 = load i128* %XMM8, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1621 :   store i128 %943, i128* %XMM8_val, !mcsema_real_eip !108 :          <264>	callq	0
1622 :   %944 = load i128* %XMM9, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1623 :   store i128 %944, i128* %XMM9_val, !mcsema_real_eip !108 :          <264>	callq	0
1624 :   %945 = load i128* %XMM10, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1625 :   store i128 %945, i128* %XMM10_val, !mcsema_real_eip !108 :          <264>	callq	0
1626 :   %946 = load i128* %XMM11, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1627 :   store i128 %946, i128* %XMM11_val, !mcsema_real_eip !108 :          <264>	callq	0
1628 :   %947 = load i128* %XMM12, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1629 :   store i128 %947, i128* %XMM12_val, !mcsema_real_eip !108 :          <264>	callq	0
1630 :   %948 = load i128* %XMM13, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1631 :   store i128 %948, i128* %XMM13_val, !mcsema_real_eip !108 :          <264>	callq	0
1632 :   %949 = load i128* %XMM14, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1633 :   store i128 %949, i128* %XMM14_val, !mcsema_real_eip !108 :          <264>	callq	0
1634 :   %950 = load i128* %XMM15, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1635 :   store i128 %950, i128* %XMM15_val, !mcsema_real_eip !108 :          <264>	callq	0
1636 :   %951 = load i64* %STACK_BASE, !mcsema_real_eip !108 :          <264>	callq	0
1637 :   store i64 %951, i64* %STACK_BASE_val, !mcsema_real_eip !108 :          <264>	callq	0
1638 :   %952 = load i64* %STACK_LIMIT, !mcsema_real_eip !108 :          <264>	callq	0
1639 :   store i64 %952, i64* %STACK_LIMIT_val, !mcsema_real_eip !108 :          <264>	callq	0

1640 :   %953 = load i64* %RBP_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1641 :   %954 = add i64 %953, -12, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1642 :   %955 = inttoptr i64 %954 to i64*, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1643 :   %956 = bitcast i64* %955 to i32* : NIL

1644 :   %957 = load i32* %956, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1645 :   %uadd385 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %957, i32 1) : NIL
1646 :   %958 = extractvalue { i32, i1 } %uadd385, 0 : NIL

1647 :   %959 = xor i32 %958, %957, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1648 :   %960 = and i32 %959, 16, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1649 :   %961 = icmp ne i32 %960, 0, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1650 :   store i1 %961, i1* %AF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1651 :   %962 = icmp slt i32 %958, 0 : NIL

1652 :   store i1 %962, i1* %SF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1653 :   %963 = icmp eq i32 %958, 0, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1654 :   store i1 %963, i1* %ZF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1655 :   %964 = xor i32 %957, -2147483648, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1656 :   %965 = and i32 %959, %964, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1657 :   %966 = icmp slt i32 %965, 0 : NIL

1658 :   store i1 %966, i1* %OF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1659 :   %967 = trunc i32 %958 to i8, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1660 :   %968 = tail call i8 @llvm.ctpop.i8(i8 %967), !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1661 :   %969 = and i8 %968, 1 : NIL
1662 :   %970 = icmp eq i8 %969, 0 : NIL

1663 :   store i1 %970, i1* %PF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1664 :   %971 = extractvalue { i32, i1 } %uadd385, 1 : NIL

1665 :   store i1 %971, i1* %CF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
1666 :   store i32 %958, i32* %956, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

1667 :   store i64 1, i64* %RDI_val, !mcsema_real_eip !110 :          <26d>	movl	$1, %edi

1668 :   %972 = tail call x86_64_sysvcc i64 @sleep(i64 1), !mcsema_real_eip !111 :          <272>	callq	0
1669 :   store i64 %972, i64* %RAX_val, !mcsema_real_eip !111 :          <272>	callq	0

1670 :   %973 = load i64* %RBP_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1671 :   %974 = add i64 %973, -12, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1672 :   %975 = inttoptr i64 %974 to i64*, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1673 :   %976 = bitcast i64* %975 to i32* : NIL

1674 :   %977 = load i32* %976, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1675 :   %978 = add i32 %977, -27 : NIL

1676 :   %979 = xor i32 %978, %977, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1677 :   %980 = and i32 %979, 16 : NIL
1678 :   %981 = icmp eq i32 %980, 0 : NIL

1679 :   store i1 %981, i1* %AF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1680 :   %982 = trunc i32 %978 to i8, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1681 :   %983 = tail call i8 @llvm.ctpop.i8(i8 %982), !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1682 :   %984 = and i8 %983, 1 : NIL
1683 :   %985 = icmp eq i8 %984, 0 : NIL

1684 :   store i1 %985, i1* %PF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1685 :   %986 = icmp eq i32 %978, 0, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1686 :   store i1 %986, i1* %ZF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1687 :   %987 = icmp slt i32 %978, 0 : NIL

1688 :   store i1 %987, i1* %SF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1689 :   %988 = icmp ult i32 %977, 27, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1690 :   store i1 %988, i1* %CF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
1691 :   %989 = and i32 %979, %977, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1692 :   %990 = icmp slt i32 %989, 0 : NIL

1693 :   store i1 %990, i1* %OF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

1694 :   %991 = xor i1 %987, %990 : NIL

1695 :   %992 = load i1* %ZF_val, !mcsema_real_eip !23 :          <27b>	jle	-420
1696 :   %993 = or i1 %992, %991, !mcsema_real_eip !23 :          <27b>	jle	-420
1697 :   br i1 %993, label %block_0xdd.backedge, label %block_0x281.loopexit, !mcsema_real_eip !23 :          <27b>	jle	-420

1698 :   br label %block_0xdd : NIL

1699 :   %994 = load i64* %RBP_val, !mcsema_real_eip !112 :          <21b>	movl	-20(%rbp), %eax
1700 :   %995 = add i64 %994, -20, !mcsema_real_eip !112 :          <21b>	movl	-20(%rbp), %eax
1701 :   %996 = inttoptr i64 %995 to i64*, !mcsema_real_eip !112 :          <21b>	movl	-20(%rbp), %eax

1702 :   %997 = bitcast i64* %996 to i32* : NIL

1703 :   %998 = load i32* %997, !mcsema_real_eip !112 :          <21b>	movl	-20(%rbp), %eax
1704 :   %999 = zext i32 %998 to i64, !mcsema_real_eip !112 :          <21b>	movl	-20(%rbp), %eax
1705 :   store i64 %999, i64* %RAX_val, !mcsema_real_eip !112 :          <21b>	movl	-20(%rbp), %eax

1706 :   %1000 = load i64* %RBP_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1707 :   %1001 = add i64 %1000, -8, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1708 :   %1002 = inttoptr i64 %1001 to i64*, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax

1709 :   %1003 = bitcast i64* %1002 to i32* : NIL

1710 :   %1004 = load i32* %1003, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1711 :   %1005 = sub i32 %998, %1004, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1712 :   %1006 = xor i32 %1005, %998, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1713 :   %1007 = xor i32 %1006, %1004, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1714 :   %1008 = and i32 %1007, 16, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1715 :   %1009 = icmp ne i32 %1008, 0, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1716 :   store i1 %1009, i1* %AF_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1717 :   %1010 = trunc i32 %1005 to i8, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1718 :   %1011 = tail call i8 @llvm.ctpop.i8(i8 %1010), !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax

1719 :   %1012 = and i8 %1011, 1 : NIL
1720 :   %1013 = icmp eq i8 %1012, 0 : NIL

1721 :   store i1 %1013, i1* %PF_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax

1722 :   %1014 = icmp eq i32 %998, %1004 : NIL

1723 :   store i1 %1014, i1* %ZF_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax

1724 :   %1015 = icmp slt i32 %1005, 0 : NIL

1725 :   store i1 %1015, i1* %SF_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1726 :   %1016 = icmp ult i32 %998, %1004, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1727 :   store i1 %1016, i1* %CF_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1728 :   %1017 = xor i32 %1004, %998, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax
1729 :   %1018 = and i32 %1006, %1017, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax

1730 :   %1019 = icmp slt i32 %1018, 0 : NIL

1731 :   store i1 %1019, i1* %OF_val, !mcsema_real_eip !113 :          <21e>	cmpl	-8(%rbp), %eax

1732 :   %1020 = load i1* %ZF_val, !mcsema_real_eip !114 :          <221>	jne	20
1733 :   br i1 %1020, label %block_0x223, label %block_0x237, !mcsema_real_eip !114 :          <221>	jne	20

1734 :   %1021 = load i64* %RBP_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1735 :   %1022 = add i64 %1021, -4, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1736 :   %1023 = inttoptr i64 %1022 to i64*, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)

1737 :   %1024 = bitcast i64* %1023 to i32* : NIL

1738 :   %1025 = load i32* %1024, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1739 :   store i1 false, i1* %AF_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1740 :   %1026 = trunc i32 %1025 to i8, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1741 :   %1027 = tail call i8 @llvm.ctpop.i8(i8 %1026), !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)

1742 :   %1028 = and i8 %1027, 1 : NIL
1743 :   %1029 = icmp eq i8 %1028, 0 : NIL

1744 :   store i1 %1029, i1* %PF_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1745 :   %1030 = icmp eq i32 %1025, 0, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1746 :   store i1 %1030, i1* %ZF_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)

1747 :   %1031 = icmp slt i32 %1025, 0 : NIL

1748 :   store i1 %1031, i1* %SF_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1749 :   store i1 false, i1* %CF_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)
1750 :   store i1 false, i1* %OF_val, !mcsema_real_eip !115 :          <1fb>	cmpl	$0, -4(%rbp)

1751 :   %1032 = icmp slt i32 %1025, 1 : NIL

1752 :   br i1 %1032, label %block_0x207, label %block_0x201, !mcsema_real_eip !116 :          <1ff>	jle	6

1753 :   %1033 = tail call x86_64_sysvcc i64 @puts(i64 zext (i32 add (i32 ptrtoint (%1* @data_0x2da to i32), i32 77) to i64)), !mcsema_real_eip !117 :          <228>	callq	0

1754 :   store i64 4294967294, i64* %RDI_val, !mcsema_real_eip !118 :          <22d>	movl	$4294967294, %edi

1755 :   %1034 = tail call x86_64_sysvcc i64 @exit(i64 4294967294), !mcsema_real_eip !119 :          <232>	callq	0
1756 :   store i64 %1034, i64* %RAX_val, !mcsema_real_eip !119 :          <232>	callq	0

1757 :   %1035 = load i64* %RBP_val, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1758 :   %1036 = add i64 %1035, -4, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1759 :   %1037 = inttoptr i64 %1036 to i64*, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax

1760 :   %1038 = bitcast i64* %1037 to i32* : NIL

1761 :   %1039 = load i32* %1038, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1762 :   %1040 = zext i32 %1039 to i64, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax
1763 :   store i64 %1040, i64* %RAX_val, !mcsema_real_eip !100 :          <237>	movl	-4(%rbp), %eax

1764 :   %1041 = sext i32 %1039 to i64, !mcsema_real_eip !101 :          <23a>	movslq	%eax, %rcx
1765 :   store i64 %1041, i64* %RCX_val, !mcsema_real_eip !101 :          <23a>	movslq	%eax, %rcx

1766 :   %1042 = load i64* %RBP_val, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax
1767 :   %1043 = add i64 %1042, -8, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax
1768 :   %1044 = inttoptr i64 %1043 to i64*, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax

1769 :   %1045 = bitcast i64* %1044 to i32* : NIL

1770 :   %1046 = load i32* %1045, !mcsema_real_eip !102 :          <23d>	movl	-8(%rbp), %eax

1771 :   %1047 = sext i32 %1046 to i64, !mcsema_real_eip !103 :          <240>	movslq	%eax, %rdx
1772 :   store i64 %1047, i64* %RDX_val, !mcsema_real_eip !103 :          <240>	movslq	%eax, %rdx

1773 :   %1048 = mul i64 %1047, 11 : NIL

1774 :   %1049 = load i64* %RCX_val, !mcsema_real_eip !104 :          <253>	addq	%rcx, %rax

1775 :   %1050 = add i64 %1049, %1048 : NIL
1776 :   %uadd377 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %1050, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
1777 :   %1051 = extractvalue { i64, i1 } %uadd377, 0 : NIL

1778 :   %1052 = xor i64 %1051, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1779 :   %1053 = xor i64 %1052, %1050, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1780 :   %1054 = and i64 %1053, 16, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1781 :   %1055 = icmp ne i64 %1054, 0, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1782 :   store i1 %1055, i1* %AF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1783 :   %1056 = icmp slt i64 %1051, 0 : NIL

1784 :   store i1 %1056, i1* %SF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1785 :   %1057 = icmp eq i64 %1051, 0, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1786 :   store i1 %1057, i1* %ZF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1787 :   %1058 = xor i64 %1050, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1788 :   %1059 = and i64 %1052, %1058, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1789 :   %1060 = icmp slt i64 %1059, 0 : NIL

1790 :   store i1 %1060, i1* %OF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1791 :   %1061 = trunc i64 %1051 to i8, !mcsema_real_eip !105 :          <256>	addq	$0, %rax
1792 :   %1062 = tail call i8 @llvm.ctpop.i8(i8 %1061), !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1793 :   %1063 = and i8 %1062, 1 : NIL
1794 :   %1064 = icmp eq i8 %1063, 0 : NIL

1795 :   store i1 %1064, i1* %PF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1796 :   %1065 = extractvalue { i64, i1 } %uadd377, 1 : NIL

1797 :   store i1 %1065, i1* %CF_val, !mcsema_real_eip !105 :          <256>	addq	$0, %rax

1798 :   %1066 = inttoptr i64 %1051 to i64*, !mcsema_real_eip !106 :          <25c>	movb	$88, (%rax)

1799 :   %1067 = bitcast i64* %1066 to i8* : NIL

1800 :   store i8 88, i8* %1067, !mcsema_real_eip !106 :          <25c>	movb	$88, (%rax)

1801 :   store i64 0, i64* %RAX_val, !mcsema_real_eip !107 :          <25f>	movl	$0, %eax

1802 :   %1068 = load i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0

1803 :   %1069 = add i64 %1068, -8 : NIL

1804 :   %1070 = inttoptr i64 %1069 to i64*, !mcsema_real_eip !108 :          <264>	callq	0
1805 :   store i64 -4981261766360305936, i64* %1070, !mcsema_real_eip !108 :          <264>	callq	0
1806 :   store i64 %1069, i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0
1807 :   %1071 = load i64* %RAX_val, !mcsema_real_eip !108 :          <264>	callq	0
1808 :   store i64 %1071, i64* %RAX, !mcsema_real_eip !108 :          <264>	callq	0
1809 :   %1072 = load i64* %RBX_val, !mcsema_real_eip !108 :          <264>	callq	0
1810 :   store i64 %1072, i64* %RBX, !mcsema_real_eip !108 :          <264>	callq	0
1811 :   %1073 = load i64* %RCX_val, !mcsema_real_eip !108 :          <264>	callq	0
1812 :   store i64 %1073, i64* %RCX, !mcsema_real_eip !108 :          <264>	callq	0
1813 :   %1074 = load i64* %RDX_val, !mcsema_real_eip !108 :          <264>	callq	0
1814 :   store i64 %1074, i64* %RDX, !mcsema_real_eip !108 :          <264>	callq	0
1815 :   %1075 = load i64* %RSI_val, !mcsema_real_eip !108 :          <264>	callq	0
1816 :   store i64 %1075, i64* %RSI, !mcsema_real_eip !108 :          <264>	callq	0
1817 :   %1076 = load i64* %RDI_val, !mcsema_real_eip !108 :          <264>	callq	0
1818 :   store i64 %1076, i64* %RDI, !mcsema_real_eip !108 :          <264>	callq	0
1819 :   %1077 = load i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0
1820 :   store i64 %1077, i64* %RSP, !mcsema_real_eip !108 :          <264>	callq	0
1821 :   %1078 = load i64* %RBP_val, !mcsema_real_eip !108 :          <264>	callq	0
1822 :   store i64 %1078, i64* %RBP, !mcsema_real_eip !108 :          <264>	callq	0
1823 :   %1079 = load i64* %R8_val, !mcsema_real_eip !108 :          <264>	callq	0
1824 :   store i64 %1079, i64* %R8, !mcsema_real_eip !108 :          <264>	callq	0
1825 :   %1080 = load i64* %R9_val, !mcsema_real_eip !108 :          <264>	callq	0
1826 :   store i64 %1080, i64* %R9, !mcsema_real_eip !108 :          <264>	callq	0
1827 :   %1081 = load i64* %R10_val, !mcsema_real_eip !108 :          <264>	callq	0
1828 :   store i64 %1081, i64* %R10, !mcsema_real_eip !108 :          <264>	callq	0
1829 :   %1082 = load i64* %R11_val, !mcsema_real_eip !108 :          <264>	callq	0
1830 :   store i64 %1082, i64* %R11, !mcsema_real_eip !108 :          <264>	callq	0
1831 :   %1083 = load i64* %R12_val, !mcsema_real_eip !108 :          <264>	callq	0
1832 :   store i64 %1083, i64* %R12, !mcsema_real_eip !108 :          <264>	callq	0
1833 :   %1084 = load i64* %R13_val, !mcsema_real_eip !108 :          <264>	callq	0
1834 :   store i64 %1084, i64* %R13, !mcsema_real_eip !108 :          <264>	callq	0
1835 :   %1085 = load i64* %R14_val, !mcsema_real_eip !108 :          <264>	callq	0
1836 :   store i64 %1085, i64* %R14, !mcsema_real_eip !108 :          <264>	callq	0
1837 :   %1086 = load i64* %R15_val, !mcsema_real_eip !108 :          <264>	callq	0
1838 :   store i64 %1086, i64* %R15, !mcsema_real_eip !108 :          <264>	callq	0
1839 :   %1087 = load i64* %RIP_val, !mcsema_real_eip !108 :          <264>	callq	0
1840 :   store i64 %1087, i64* %RIP, !mcsema_real_eip !108 :          <264>	callq	0
1841 :   %1088 = load i1* %CF_val, !mcsema_real_eip !108 :          <264>	callq	0
1842 :   store i1 %1088, i1* %CF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1843 :   %1089 = load i1* %PF_val, !mcsema_real_eip !108 :          <264>	callq	0
1844 :   store i1 %1089, i1* %PF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1845 :   %1090 = load i1* %AF_val, !mcsema_real_eip !108 :          <264>	callq	0
1846 :   store i1 %1090, i1* %AF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1847 :   %1091 = load i1* %ZF_val, !mcsema_real_eip !108 :          <264>	callq	0
1848 :   store i1 %1091, i1* %ZF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1849 :   %1092 = load i1* %SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1850 :   store i1 %1092, i1* %SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1851 :   %1093 = load i1* %OF_val, !mcsema_real_eip !108 :          <264>	callq	0
1852 :   store i1 %1093, i1* %OF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1853 :   %1094 = load i1* %DF_val, !mcsema_real_eip !108 :          <264>	callq	0
1854 :   store i1 %1094, i1* %DF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1855 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !108 :          <264>	callq	0
1856 :   %1095 = load i1* %FPU_B_val, !mcsema_real_eip !108 :          <264>	callq	0
1857 :   store i1 %1095, i1* %FPU_B, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1858 :   %1096 = load i1* %FPU_C3_val, !mcsema_real_eip !108 :          <264>	callq	0
1859 :   store i1 %1096, i1* %FPU_C3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1860 :   %1097 = load i3* %FPU_TOP_val, !mcsema_real_eip !108 :          <264>	callq	0
1861 :   store i3 %1097, i3* %FPU_TOP, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1862 :   %1098 = load i1* %FPU_C2_val, !mcsema_real_eip !108 :          <264>	callq	0
1863 :   store i1 %1098, i1* %FPU_C2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1864 :   %1099 = load i1* %FPU_C1_val, !mcsema_real_eip !108 :          <264>	callq	0
1865 :   store i1 %1099, i1* %FPU_C1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1866 :   %1100 = load i1* %FPU_C0_val, !mcsema_real_eip !108 :          <264>	callq	0
1867 :   store i1 %1100, i1* %FPU_C0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1868 :   %1101 = load i1* %FPU_ES_val, !mcsema_real_eip !108 :          <264>	callq	0
1869 :   store i1 %1101, i1* %FPU_ES, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1870 :   %1102 = load i1* %FPU_SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1871 :   store i1 %1102, i1* %FPU_SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1872 :   %1103 = load i1* %FPU_PE_val, !mcsema_real_eip !108 :          <264>	callq	0
1873 :   store i1 %1103, i1* %FPU_PE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1874 :   %1104 = load i1* %FPU_UE_val, !mcsema_real_eip !108 :          <264>	callq	0
1875 :   store i1 %1104, i1* %FPU_UE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1876 :   %1105 = load i1* %FPU_OE_val, !mcsema_real_eip !108 :          <264>	callq	0
1877 :   store i1 %1105, i1* %FPU_OE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1878 :   %1106 = load i1* %FPU_ZE_val, !mcsema_real_eip !108 :          <264>	callq	0
1879 :   store i1 %1106, i1* %FPU_ZE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1880 :   %1107 = load i1* %FPU_DE_val, !mcsema_real_eip !108 :          <264>	callq	0
1881 :   store i1 %1107, i1* %FPU_DE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1882 :   %1108 = load i1* %FPU_IE_val, !mcsema_real_eip !108 :          <264>	callq	0
1883 :   store i1 %1108, i1* %FPU_IE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1884 :   %1109 = load i1* %FPU_X_val, !mcsema_real_eip !108 :          <264>	callq	0
1885 :   store i1 %1109, i1* %FPU_X, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1886 :   %1110 = load i2* %FPU_RC_val, !mcsema_real_eip !108 :          <264>	callq	0
1887 :   store i2 %1110, i2* %FPU_RC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1888 :   %1111 = load i2* %FPU_PC_val, !mcsema_real_eip !108 :          <264>	callq	0
1889 :   store i2 %1111, i2* %FPU_PC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1890 :   %1112 = load i1* %FPU_PM_val, !mcsema_real_eip !108 :          <264>	callq	0
1891 :   store i1 %1112, i1* %FPU_PM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1892 :   %1113 = load i1* %FPU_UM_val, !mcsema_real_eip !108 :          <264>	callq	0
1893 :   store i1 %1113, i1* %FPU_UM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1894 :   %1114 = load i1* %FPU_OM_val, !mcsema_real_eip !108 :          <264>	callq	0
1895 :   store i1 %1114, i1* %FPU_OM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1896 :   %1115 = load i1* %FPU_ZM_val, !mcsema_real_eip !108 :          <264>	callq	0
1897 :   store i1 %1115, i1* %FPU_ZM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1898 :   %1116 = load i1* %FPU_DM_val, !mcsema_real_eip !108 :          <264>	callq	0
1899 :   store i1 %1116, i1* %FPU_DM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1900 :   %1117 = load i1* %FPU_IM_val, !mcsema_real_eip !108 :          <264>	callq	0
1901 :   store i1 %1117, i1* %FPU_IM, align 1, !mcsema_real_eip !108 :          <264>	callq	0

1902 :   %1118 = load i64* %53, align 4 : NIL
1903 :   store i64 %1118, i64* %52, align 4 : NIL

1904 :   %1119 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
1905 :   store i16 %1119, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1906 :   %1120 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
1907 :   store i64 %1120, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1908 :   %1121 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
1909 :   store i16 %1121, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1910 :   %1122 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
1911 :   store i64 %1122, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1912 :   %1123 = load i128* %XMM0_val, !mcsema_real_eip !108 :          <264>	callq	0
1913 :   store i128 %1123, i128* %XMM0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1914 :   %1124 = load i128* %XMM1_val, !mcsema_real_eip !108 :          <264>	callq	0
1915 :   store i128 %1124, i128* %XMM1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1916 :   %1125 = load i128* %XMM2_val, !mcsema_real_eip !108 :          <264>	callq	0
1917 :   store i128 %1125, i128* %XMM2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1918 :   %1126 = load i128* %XMM3_val, !mcsema_real_eip !108 :          <264>	callq	0
1919 :   store i128 %1126, i128* %XMM3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1920 :   %1127 = load i128* %XMM4_val, !mcsema_real_eip !108 :          <264>	callq	0
1921 :   store i128 %1127, i128* %XMM4, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1922 :   %1128 = load i128* %XMM5_val, !mcsema_real_eip !108 :          <264>	callq	0
1923 :   store i128 %1128, i128* %XMM5, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1924 :   %1129 = load i128* %XMM6_val, !mcsema_real_eip !108 :          <264>	callq	0
1925 :   store i128 %1129, i128* %XMM6, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1926 :   %1130 = load i128* %XMM7_val, !mcsema_real_eip !108 :          <264>	callq	0
1927 :   store i128 %1130, i128* %XMM7, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1928 :   %1131 = load i128* %XMM8_val, !mcsema_real_eip !108 :          <264>	callq	0
1929 :   store i128 %1131, i128* %XMM8, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1930 :   %1132 = load i128* %XMM9_val, !mcsema_real_eip !108 :          <264>	callq	0
1931 :   store i128 %1132, i128* %XMM9, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1932 :   %1133 = load i128* %XMM10_val, !mcsema_real_eip !108 :          <264>	callq	0
1933 :   store i128 %1133, i128* %XMM10, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1934 :   %1134 = load i128* %XMM11_val, !mcsema_real_eip !108 :          <264>	callq	0
1935 :   store i128 %1134, i128* %XMM11, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1936 :   %1135 = load i128* %XMM12_val, !mcsema_real_eip !108 :          <264>	callq	0
1937 :   store i128 %1135, i128* %XMM12, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1938 :   %1136 = load i128* %XMM13_val, !mcsema_real_eip !108 :          <264>	callq	0
1939 :   store i128 %1136, i128* %XMM13, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1940 :   %1137 = load i128* %XMM14_val, !mcsema_real_eip !108 :          <264>	callq	0
1941 :   store i128 %1137, i128* %XMM14, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1942 :   %1138 = load i128* %XMM15_val, !mcsema_real_eip !108 :          <264>	callq	0
1943 :   store i128 %1138, i128* %XMM15, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1944 :   %1139 = load i64* %STACK_BASE_val, !mcsema_real_eip !108 :          <264>	callq	0
1945 :   store i64 %1139, i64* %STACK_BASE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1946 :   %1140 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !108 :          <264>	callq	0
1947 :   store i64 %1140, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1948 :   tail call x86_64_sysvcc void @sub_0(%struct.regs* %0), !mcsema_real_eip !108 :          <264>	callq	0
1949 :   %1141 = load i64* %RAX, !mcsema_real_eip !108 :          <264>	callq	0
1950 :   store i64 %1141, i64* %RAX_val, !mcsema_real_eip !108 :          <264>	callq	0
1951 :   %1142 = load i64* %RBX, !mcsema_real_eip !108 :          <264>	callq	0
1952 :   store i64 %1142, i64* %RBX_val, !mcsema_real_eip !108 :          <264>	callq	0
1953 :   %1143 = load i64* %RCX, !mcsema_real_eip !108 :          <264>	callq	0
1954 :   store i64 %1143, i64* %RCX_val, !mcsema_real_eip !108 :          <264>	callq	0
1955 :   %1144 = load i64* %RDX, !mcsema_real_eip !108 :          <264>	callq	0
1956 :   store i64 %1144, i64* %RDX_val, !mcsema_real_eip !108 :          <264>	callq	0
1957 :   %1145 = load i64* %RSI, !mcsema_real_eip !108 :          <264>	callq	0
1958 :   store i64 %1145, i64* %RSI_val, !mcsema_real_eip !108 :          <264>	callq	0
1959 :   %1146 = load i64* %RDI, !mcsema_real_eip !108 :          <264>	callq	0
1960 :   store i64 %1146, i64* %RDI_val, !mcsema_real_eip !108 :          <264>	callq	0
1961 :   %1147 = load i64* %RSP, !mcsema_real_eip !108 :          <264>	callq	0
1962 :   store i64 %1147, i64* %RSP_val, !mcsema_real_eip !108 :          <264>	callq	0
1963 :   %1148 = load i64* %RBP, !mcsema_real_eip !108 :          <264>	callq	0
1964 :   store i64 %1148, i64* %RBP_val, !mcsema_real_eip !108 :          <264>	callq	0
1965 :   %1149 = load i64* %R8, !mcsema_real_eip !108 :          <264>	callq	0
1966 :   store i64 %1149, i64* %R8_val, !mcsema_real_eip !108 :          <264>	callq	0
1967 :   %1150 = load i64* %R9, !mcsema_real_eip !108 :          <264>	callq	0
1968 :   store i64 %1150, i64* %R9_val, !mcsema_real_eip !108 :          <264>	callq	0
1969 :   %1151 = load i64* %R10, !mcsema_real_eip !108 :          <264>	callq	0
1970 :   store i64 %1151, i64* %R10_val, !mcsema_real_eip !108 :          <264>	callq	0
1971 :   %1152 = load i64* %R11, !mcsema_real_eip !108 :          <264>	callq	0
1972 :   store i64 %1152, i64* %R11_val, !mcsema_real_eip !108 :          <264>	callq	0
1973 :   %1153 = load i64* %R12, !mcsema_real_eip !108 :          <264>	callq	0
1974 :   store i64 %1153, i64* %R12_val, !mcsema_real_eip !108 :          <264>	callq	0
1975 :   %1154 = load i64* %R13, !mcsema_real_eip !108 :          <264>	callq	0
1976 :   store i64 %1154, i64* %R13_val, !mcsema_real_eip !108 :          <264>	callq	0
1977 :   %1155 = load i64* %R14, !mcsema_real_eip !108 :          <264>	callq	0
1978 :   store i64 %1155, i64* %R14_val, !mcsema_real_eip !108 :          <264>	callq	0
1979 :   %1156 = load i64* %R15, !mcsema_real_eip !108 :          <264>	callq	0
1980 :   store i64 %1156, i64* %R15_val, !mcsema_real_eip !108 :          <264>	callq	0
1981 :   %1157 = load i64* %RIP, !mcsema_real_eip !108 :          <264>	callq	0
1982 :   store i64 %1157, i64* %RIP_val, !mcsema_real_eip !108 :          <264>	callq	0
1983 :   %1158 = load i1* %CF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1984 :   store i1 %1158, i1* %CF_val, !mcsema_real_eip !108 :          <264>	callq	0
1985 :   %1159 = load i1* %PF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1986 :   store i1 %1159, i1* %PF_val, !mcsema_real_eip !108 :          <264>	callq	0
1987 :   %1160 = load i1* %AF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1988 :   store i1 %1160, i1* %AF_val, !mcsema_real_eip !108 :          <264>	callq	0
1989 :   %1161 = load i1* %ZF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1990 :   store i1 %1161, i1* %ZF_val, !mcsema_real_eip !108 :          <264>	callq	0
1991 :   %1162 = load i1* %SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1992 :   store i1 %1162, i1* %SF_val, !mcsema_real_eip !108 :          <264>	callq	0
1993 :   %1163 = load i1* %OF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1994 :   store i1 %1163, i1* %OF_val, !mcsema_real_eip !108 :          <264>	callq	0
1995 :   %1164 = load i1* %DF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1996 :   store i1 %1164, i1* %DF_val, !mcsema_real_eip !108 :          <264>	callq	0
1997 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !108 :          <264>	callq	0
1998 :   %1165 = load i1* %FPU_B, align 1, !mcsema_real_eip !108 :          <264>	callq	0
1999 :   store i1 %1165, i1* %FPU_B_val, !mcsema_real_eip !108 :          <264>	callq	0
2000 :   %1166 = load i1* %FPU_C3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2001 :   store i1 %1166, i1* %FPU_C3_val, !mcsema_real_eip !108 :          <264>	callq	0
2002 :   %1167 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2003 :   store i3 %1167, i3* %FPU_TOP_val, !mcsema_real_eip !108 :          <264>	callq	0
2004 :   %1168 = load i1* %FPU_C2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2005 :   store i1 %1168, i1* %FPU_C2_val, !mcsema_real_eip !108 :          <264>	callq	0
2006 :   %1169 = load i1* %FPU_C1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2007 :   store i1 %1169, i1* %FPU_C1_val, !mcsema_real_eip !108 :          <264>	callq	0
2008 :   %1170 = load i1* %FPU_C0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2009 :   store i1 %1170, i1* %FPU_C0_val, !mcsema_real_eip !108 :          <264>	callq	0
2010 :   %1171 = load i1* %FPU_ES, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2011 :   store i1 %1171, i1* %FPU_ES_val, !mcsema_real_eip !108 :          <264>	callq	0
2012 :   %1172 = load i1* %FPU_SF, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2013 :   store i1 %1172, i1* %FPU_SF_val, !mcsema_real_eip !108 :          <264>	callq	0
2014 :   %1173 = load i1* %FPU_PE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2015 :   store i1 %1173, i1* %FPU_PE_val, !mcsema_real_eip !108 :          <264>	callq	0
2016 :   %1174 = load i1* %FPU_UE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2017 :   store i1 %1174, i1* %FPU_UE_val, !mcsema_real_eip !108 :          <264>	callq	0
2018 :   %1175 = load i1* %FPU_OE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2019 :   store i1 %1175, i1* %FPU_OE_val, !mcsema_real_eip !108 :          <264>	callq	0
2020 :   %1176 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2021 :   store i1 %1176, i1* %FPU_ZE_val, !mcsema_real_eip !108 :          <264>	callq	0
2022 :   %1177 = load i1* %FPU_DE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2023 :   store i1 %1177, i1* %FPU_DE_val, !mcsema_real_eip !108 :          <264>	callq	0
2024 :   %1178 = load i1* %FPU_IE, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2025 :   store i1 %1178, i1* %FPU_IE_val, !mcsema_real_eip !108 :          <264>	callq	0
2026 :   %1179 = load i1* %FPU_X, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2027 :   store i1 %1179, i1* %FPU_X_val, !mcsema_real_eip !108 :          <264>	callq	0
2028 :   %1180 = load i2* %FPU_RC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2029 :   store i2 %1180, i2* %FPU_RC_val, !mcsema_real_eip !108 :          <264>	callq	0
2030 :   %1181 = load i2* %FPU_PC, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2031 :   store i2 %1181, i2* %FPU_PC_val, !mcsema_real_eip !108 :          <264>	callq	0
2032 :   %1182 = load i1* %FPU_PM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2033 :   store i1 %1182, i1* %FPU_PM_val, !mcsema_real_eip !108 :          <264>	callq	0
2034 :   %1183 = load i1* %FPU_UM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2035 :   store i1 %1183, i1* %FPU_UM_val, !mcsema_real_eip !108 :          <264>	callq	0
2036 :   %1184 = load i1* %FPU_OM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2037 :   store i1 %1184, i1* %FPU_OM_val, !mcsema_real_eip !108 :          <264>	callq	0
2038 :   %1185 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2039 :   store i1 %1185, i1* %FPU_ZM_val, !mcsema_real_eip !108 :          <264>	callq	0
2040 :   %1186 = load i1* %FPU_DM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2041 :   store i1 %1186, i1* %FPU_DM_val, !mcsema_real_eip !108 :          <264>	callq	0
2042 :   %1187 = load i1* %FPU_IM, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2043 :   store i1 %1187, i1* %FPU_IM_val, !mcsema_real_eip !108 :          <264>	callq	0

2044 :   %1188 = load i64* %52, align 4 : NIL
2045 :   store i64 %1188, i64* %53, align 4 : NIL

2046 :   %1189 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2047 :   store i16 %1189, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
2048 :   %1190 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !108 :          <264>	callq	0
2049 :   store i64 %1190, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
2050 :   %1191 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2051 :   store i16 %1191, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !108 :          <264>	callq	0
2052 :   %1192 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !108 :          <264>	callq	0
2053 :   store i64 %1192, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !108 :          <264>	callq	0
2054 :   %1193 = load i128* %XMM0, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2055 :   store i128 %1193, i128* %XMM0_val, !mcsema_real_eip !108 :          <264>	callq	0
2056 :   %1194 = load i128* %XMM1, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2057 :   store i128 %1194, i128* %XMM1_val, !mcsema_real_eip !108 :          <264>	callq	0
2058 :   %1195 = load i128* %XMM2, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2059 :   store i128 %1195, i128* %XMM2_val, !mcsema_real_eip !108 :          <264>	callq	0
2060 :   %1196 = load i128* %XMM3, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2061 :   store i128 %1196, i128* %XMM3_val, !mcsema_real_eip !108 :          <264>	callq	0
2062 :   %1197 = load i128* %XMM4, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2063 :   store i128 %1197, i128* %XMM4_val, !mcsema_real_eip !108 :          <264>	callq	0
2064 :   %1198 = load i128* %XMM5, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2065 :   store i128 %1198, i128* %XMM5_val, !mcsema_real_eip !108 :          <264>	callq	0
2066 :   %1199 = load i128* %XMM6, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2067 :   store i128 %1199, i128* %XMM6_val, !mcsema_real_eip !108 :          <264>	callq	0
2068 :   %1200 = load i128* %XMM7, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2069 :   store i128 %1200, i128* %XMM7_val, !mcsema_real_eip !108 :          <264>	callq	0
2070 :   %1201 = load i128* %XMM8, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2071 :   store i128 %1201, i128* %XMM8_val, !mcsema_real_eip !108 :          <264>	callq	0
2072 :   %1202 = load i128* %XMM9, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2073 :   store i128 %1202, i128* %XMM9_val, !mcsema_real_eip !108 :          <264>	callq	0
2074 :   %1203 = load i128* %XMM10, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2075 :   store i128 %1203, i128* %XMM10_val, !mcsema_real_eip !108 :          <264>	callq	0
2076 :   %1204 = load i128* %XMM11, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2077 :   store i128 %1204, i128* %XMM11_val, !mcsema_real_eip !108 :          <264>	callq	0
2078 :   %1205 = load i128* %XMM12, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2079 :   store i128 %1205, i128* %XMM12_val, !mcsema_real_eip !108 :          <264>	callq	0
2080 :   %1206 = load i128* %XMM13, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2081 :   store i128 %1206, i128* %XMM13_val, !mcsema_real_eip !108 :          <264>	callq	0
2082 :   %1207 = load i128* %XMM14, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2083 :   store i128 %1207, i128* %XMM14_val, !mcsema_real_eip !108 :          <264>	callq	0
2084 :   %1208 = load i128* %XMM15, align 1, !mcsema_real_eip !108 :          <264>	callq	0
2085 :   store i128 %1208, i128* %XMM15_val, !mcsema_real_eip !108 :          <264>	callq	0
2086 :   %1209 = load i64* %STACK_BASE, !mcsema_real_eip !108 :          <264>	callq	0
2087 :   store i64 %1209, i64* %STACK_BASE_val, !mcsema_real_eip !108 :          <264>	callq	0
2088 :   %1210 = load i64* %STACK_LIMIT, !mcsema_real_eip !108 :          <264>	callq	0
2089 :   store i64 %1210, i64* %STACK_LIMIT_val, !mcsema_real_eip !108 :          <264>	callq	0

2090 :   %1211 = load i64* %RBP_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2091 :   %1212 = add i64 %1211, -12, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2092 :   %1213 = inttoptr i64 %1212 to i64*, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2093 :   %1214 = bitcast i64* %1213 to i32* : NIL

2094 :   %1215 = load i32* %1214, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2095 :   %uadd378 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %1215, i32 1) : NIL
2096 :   %1216 = extractvalue { i32, i1 } %uadd378, 0 : NIL

2097 :   %1217 = xor i32 %1216, %1215, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2098 :   %1218 = and i32 %1217, 16, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2099 :   %1219 = icmp ne i32 %1218, 0, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2100 :   store i1 %1219, i1* %AF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2101 :   %1220 = icmp slt i32 %1216, 0 : NIL

2102 :   store i1 %1220, i1* %SF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2103 :   %1221 = icmp eq i32 %1216, 0, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2104 :   store i1 %1221, i1* %ZF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2105 :   %1222 = xor i32 %1215, -2147483648, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2106 :   %1223 = and i32 %1217, %1222, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2107 :   %1224 = icmp slt i32 %1223, 0 : NIL

2108 :   store i1 %1224, i1* %OF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2109 :   %1225 = trunc i32 %1216 to i8, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2110 :   %1226 = tail call i8 @llvm.ctpop.i8(i8 %1225), !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2111 :   %1227 = and i8 %1226, 1 : NIL
2112 :   %1228 = icmp eq i8 %1227, 0 : NIL

2113 :   store i1 %1228, i1* %PF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2114 :   %1229 = extractvalue { i32, i1 } %uadd378, 1 : NIL

2115 :   store i1 %1229, i1* %CF_val, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)
2116 :   store i32 %1216, i32* %1214, !mcsema_real_eip !109 :          <269>	addl	$1, -12(%rbp)

2117 :   store i64 1, i64* %RDI_val, !mcsema_real_eip !110 :          <26d>	movl	$1, %edi

2118 :   %1230 = tail call x86_64_sysvcc i64 @sleep(i64 1), !mcsema_real_eip !111 :          <272>	callq	0
2119 :   store i64 %1230, i64* %RAX_val, !mcsema_real_eip !111 :          <272>	callq	0

2120 :   %1231 = load i64* %RBP_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2121 :   %1232 = add i64 %1231, -12, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2122 :   %1233 = inttoptr i64 %1232 to i64*, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2123 :   %1234 = bitcast i64* %1233 to i32* : NIL

2124 :   %1235 = load i32* %1234, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2125 :   %1236 = add i32 %1235, -27 : NIL

2126 :   %1237 = xor i32 %1236, %1235, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2127 :   %1238 = and i32 %1237, 16 : NIL
2128 :   %1239 = icmp eq i32 %1238, 0 : NIL

2129 :   store i1 %1239, i1* %AF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2130 :   %1240 = trunc i32 %1236 to i8, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2131 :   %1241 = tail call i8 @llvm.ctpop.i8(i8 %1240), !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2132 :   %1242 = and i8 %1241, 1 : NIL
2133 :   %1243 = icmp eq i8 %1242, 0 : NIL

2134 :   store i1 %1243, i1* %PF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2135 :   %1244 = icmp eq i32 %1236, 0, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2136 :   store i1 %1244, i1* %ZF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2137 :   %1245 = icmp slt i32 %1236, 0 : NIL

2138 :   store i1 %1245, i1* %SF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2139 :   %1246 = icmp ult i32 %1235, 27, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2140 :   store i1 %1246, i1* %CF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)
2141 :   %1247 = and i32 %1237, %1235, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2142 :   %1248 = icmp slt i32 %1247, 0 : NIL

2143 :   store i1 %1248, i1* %OF_val, !mcsema_real_eip !22 :          <277>	cmpl	$27, -12(%rbp)

2144 :   %1249 = xor i1 %1245, %1248 : NIL

2145 :   %1250 = load i1* %ZF_val, !mcsema_real_eip !23 :          <27b>	jle	-420
2146 :   %1251 = or i1 %1250, %1249, !mcsema_real_eip !23 :          <27b>	jle	-420
2147 :   br i1 %1251, label %block_0xdd.backedge, label %block_0x281.loopexit, !mcsema_real_eip !23 :          <27b>	jle	-420

2148 :   %1252 = load i64* %RBP_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2149 :   %1253 = add i64 %1252, -4, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2150 :   %1254 = inttoptr i64 %1253 to i64*, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)

2151 :   %1255 = bitcast i64* %1254 to i32* : NIL

2152 :   %1256 = load i32* %1255, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)

2153 :   %1257 = add i32 %1256, -10 : NIL

2154 :   %1258 = xor i32 %1257, %1256, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2155 :   %1259 = and i32 %1258, 16, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2156 :   %1260 = icmp ne i32 %1259, 0, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2157 :   store i1 %1260, i1* %AF_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2158 :   %1261 = trunc i32 %1257 to i8, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2159 :   %1262 = tail call i8 @llvm.ctpop.i8(i8 %1261), !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)

2160 :   %1263 = and i8 %1262, 1 : NIL
2161 :   %1264 = icmp eq i8 %1263, 0 : NIL

2162 :   store i1 %1264, i1* %PF_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2163 :   %1265 = icmp eq i32 %1257, 0, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2164 :   store i1 %1265, i1* %ZF_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)

2165 :   %1266 = icmp slt i32 %1257, 0 : NIL

2166 :   store i1 %1266, i1* %SF_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2167 :   %1267 = icmp ult i32 %1256, 10, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2168 :   store i1 %1267, i1* %CF_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)
2169 :   %1268 = and i32 %1258, %1256, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)

2170 :   %1269 = icmp slt i32 %1268, 0 : NIL

2171 :   store i1 %1269, i1* %OF_val, !mcsema_real_eip !120 :          <201>	cmpl	$10, -4(%rbp)

2172 :   %1270 = xor i1 %1266, %1269 : NIL

2173 :   %1271 = load i1* %ZF_val, !mcsema_real_eip !121 :          <205>	jle	12
2174 :   %1272 = or i1 %1271, %1270, !mcsema_real_eip !121 :          <205>	jle	12
2175 :   br i1 %1272, label %block_0x213, label %block_0x207, !mcsema_real_eip !121 :          <205>	jle	12
========================================================
Source line mapping for function: sub_0
========================================================

1 :   %R15_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
2 :   %STACK_LIMIT_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
3 :   %STACK_BASE_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
4 :   %XMM15_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
5 :   %XMM14_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
6 :   %XMM13_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
7 :   %XMM12_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
8 :   %XMM11_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
9 :   %XMM10_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
10 :   %XMM9_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
11 :   %XMM8_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
12 :   %XMM7_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
13 :   %XMM6_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
14 :   %XMM5_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
15 :   %XMM4_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
16 :   %XMM3_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
17 :   %XMM2_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
18 :   %XMM1_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
19 :   %XMM0_val = alloca i128, !mcsema_real_eip !2 :          <0>	pushq	%rbp
20 :   %FPU_LASTDATA_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
21 :   %FPU_LASTDATA_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
22 :   %FPU_LASTIP_OFF_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
23 :   %FPU_LASTIP_SEG_val = alloca i16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
24 :   %FPU_TAG_val = alloca [8 x i2], !mcsema_real_eip !2 :          <0>	pushq	%rbp
25 :   %FPU_IM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
26 :   %FPU_DM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
27 :   %FPU_ZM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
28 :   %FPU_OM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
29 :   %FPU_UM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
30 :   %FPU_PM_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
31 :   %FPU_PC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
32 :   %FPU_RC_val = alloca i2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
33 :   %FPU_X_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
34 :   %FPU_IE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
35 :   %FPU_DE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
36 :   %FPU_ZE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
37 :   %FPU_OE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
38 :   %FPU_UE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
39 :   %FPU_PE_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
40 :   %FPU_SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
41 :   %FPU_ES_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
42 :   %FPU_C0_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
43 :   %FPU_C1_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
44 :   %FPU_C2_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
45 :   %FPU_TOP_val = alloca i3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
46 :   %FPU_C3_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
47 :   %FPU_B_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
48 :   %STi_val = alloca [8 x x86_fp80], !mcsema_real_eip !2 :          <0>	pushq	%rbp
49 :   %DF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
50 :   %OF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
51 :   %SF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
52 :   %CF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
53 :   %AF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
54 :   %PF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
55 :   %ZF_val = alloca i1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
56 :   %RIP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
57 :   %R14_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
58 :   %R13_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
59 :   %R12_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
60 :   %R11_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
61 :   %R10_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
62 :   %R9_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
63 :   %R8_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
64 :   %RSP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
65 :   %RBP_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
66 :   %RDI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
67 :   %RSI_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
68 :   %RDX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
69 :   %RCX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
70 :   %RBX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
71 :   %RAX_val = alloca i64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
72 :   %RAX = getelementptr inbounds %struct.regs* %0, i64 0, i32 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
73 :   %1 = load i64* %RAX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
74 :   store i64 %1, i64* %RAX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
75 :   %RBX = getelementptr inbounds %struct.regs* %0, i64 0, i32 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
76 :   %2 = load i64* %RBX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
77 :   store i64 %2, i64* %RBX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
78 :   %RCX = getelementptr inbounds %struct.regs* %0, i64 0, i32 2, !mcsema_real_eip !2 :          <0>	pushq	%rbp
79 :   %3 = load i64* %RCX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
80 :   store i64 %3, i64* %RCX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
81 :   %RDX = getelementptr inbounds %struct.regs* %0, i64 0, i32 3, !mcsema_real_eip !2 :          <0>	pushq	%rbp
82 :   %4 = load i64* %RDX, !mcsema_real_eip !2 :          <0>	pushq	%rbp
83 :   store i64 %4, i64* %RDX_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
84 :   %RSI = getelementptr inbounds %struct.regs* %0, i64 0, i32 4, !mcsema_real_eip !2 :          <0>	pushq	%rbp
85 :   %5 = load i64* %RSI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
86 :   store i64 %5, i64* %RSI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
87 :   %RDI = getelementptr inbounds %struct.regs* %0, i64 0, i32 5, !mcsema_real_eip !2 :          <0>	pushq	%rbp
88 :   %6 = load i64* %RDI, !mcsema_real_eip !2 :          <0>	pushq	%rbp
89 :   store i64 %6, i64* %RDI_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
90 :   %RSP = getelementptr inbounds %struct.regs* %0, i64 0, i32 6, !mcsema_real_eip !2 :          <0>	pushq	%rbp
91 :   %7 = load i64* %RSP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
92 :   store i64 %7, i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
93 :   %RBP = getelementptr inbounds %struct.regs* %0, i64 0, i32 7, !mcsema_real_eip !2 :          <0>	pushq	%rbp
94 :   %8 = load i64* %RBP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
95 :   store i64 %8, i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
96 :   %R8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
97 :   %9 = load i64* %R8, !mcsema_real_eip !2 :          <0>	pushq	%rbp
98 :   store i64 %9, i64* %R8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
99 :   %R9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
100 :   %10 = load i64* %R9, !mcsema_real_eip !2 :          <0>	pushq	%rbp
101 :   store i64 %10, i64* %R9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
102 :   %R10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
103 :   %11 = load i64* %R10, !mcsema_real_eip !2 :          <0>	pushq	%rbp
104 :   store i64 %11, i64* %R10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
105 :   %R11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
106 :   %12 = load i64* %R11, !mcsema_real_eip !2 :          <0>	pushq	%rbp
107 :   store i64 %12, i64* %R11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
108 :   %R12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
109 :   %13 = load i64* %R12, !mcsema_real_eip !2 :          <0>	pushq	%rbp
110 :   store i64 %13, i64* %R12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
111 :   %R13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
112 :   %14 = load i64* %R13, !mcsema_real_eip !2 :          <0>	pushq	%rbp
113 :   store i64 %14, i64* %R13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
114 :   %R14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
115 :   %15 = load i64* %R14, !mcsema_real_eip !2 :          <0>	pushq	%rbp
116 :   store i64 %15, i64* %R14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
117 :   %R15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
118 :   %16 = load i64* %R15, !mcsema_real_eip !2 :          <0>	pushq	%rbp
119 :   store i64 %16, i64* %R15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
120 :   %RIP = getelementptr inbounds %struct.regs* %0, i64 0, i32 16, !mcsema_real_eip !2 :          <0>	pushq	%rbp
121 :   %17 = load i64* %RIP, !mcsema_real_eip !2 :          <0>	pushq	%rbp
122 :   store i64 %17, i64* %RIP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
123 :   %CF = getelementptr inbounds %struct.regs* %0, i64 0, i32 17, !mcsema_real_eip !2 :          <0>	pushq	%rbp
124 :   %18 = load i1* %CF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
125 :   store i1 %18, i1* %CF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
126 :   %PF = getelementptr inbounds %struct.regs* %0, i64 0, i32 18, !mcsema_real_eip !2 :          <0>	pushq	%rbp
127 :   %19 = load i1* %PF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
128 :   store i1 %19, i1* %PF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
129 :   %AF = getelementptr inbounds %struct.regs* %0, i64 0, i32 19, !mcsema_real_eip !2 :          <0>	pushq	%rbp
130 :   %20 = load i1* %AF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
131 :   store i1 %20, i1* %AF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
132 :   %ZF = getelementptr inbounds %struct.regs* %0, i64 0, i32 20, !mcsema_real_eip !2 :          <0>	pushq	%rbp
133 :   %21 = load i1* %ZF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
134 :   store i1 %21, i1* %ZF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
135 :   %SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 21, !mcsema_real_eip !2 :          <0>	pushq	%rbp
136 :   %22 = load i1* %SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
137 :   store i1 %22, i1* %SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
138 :   %OF = getelementptr inbounds %struct.regs* %0, i64 0, i32 22, !mcsema_real_eip !2 :          <0>	pushq	%rbp
139 :   %23 = load i1* %OF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
140 :   store i1 %23, i1* %OF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
141 :   %DF = getelementptr inbounds %struct.regs* %0, i64 0, i32 23, !mcsema_real_eip !2 :          <0>	pushq	%rbp
142 :   %24 = load i1* %DF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
143 :   store i1 %24, i1* %DF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
144 :   %25 = getelementptr inbounds %struct.regs* %0, i64 0, i32 24, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp
145 :   %26 = bitcast x86_fp80* %25 to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
146 :   %27 = bitcast [8 x x86_fp80]* %STi_val to i8*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
147 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %27, i8* %26, i32 128, i32 4, i1 false), !mcsema_real_eip !2 :          <0>	pushq	%rbp
148 :   %FPU_B = getelementptr inbounds %struct.regs* %0, i64 0, i32 25, !mcsema_real_eip !2 :          <0>	pushq	%rbp
149 :   %28 = load i1* %FPU_B, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
150 :   store i1 %28, i1* %FPU_B_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
151 :   %FPU_C3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 26, !mcsema_real_eip !2 :          <0>	pushq	%rbp
152 :   %29 = load i1* %FPU_C3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
153 :   store i1 %29, i1* %FPU_C3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
154 :   %FPU_TOP = getelementptr inbounds %struct.regs* %0, i64 0, i32 27, !mcsema_real_eip !2 :          <0>	pushq	%rbp
155 :   %30 = load i3* %FPU_TOP, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
156 :   store i3 %30, i3* %FPU_TOP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
157 :   %FPU_C2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 28, !mcsema_real_eip !2 :          <0>	pushq	%rbp
158 :   %31 = load i1* %FPU_C2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
159 :   store i1 %31, i1* %FPU_C2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
160 :   %FPU_C1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 29, !mcsema_real_eip !2 :          <0>	pushq	%rbp
161 :   %32 = load i1* %FPU_C1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
162 :   store i1 %32, i1* %FPU_C1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
163 :   %FPU_C0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 30, !mcsema_real_eip !2 :          <0>	pushq	%rbp
164 :   %33 = load i1* %FPU_C0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
165 :   store i1 %33, i1* %FPU_C0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
166 :   %FPU_ES = getelementptr inbounds %struct.regs* %0, i64 0, i32 31, !mcsema_real_eip !2 :          <0>	pushq	%rbp
167 :   %34 = load i1* %FPU_ES, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
168 :   store i1 %34, i1* %FPU_ES_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
169 :   %FPU_SF = getelementptr inbounds %struct.regs* %0, i64 0, i32 32, !mcsema_real_eip !2 :          <0>	pushq	%rbp
170 :   %35 = load i1* %FPU_SF, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
171 :   store i1 %35, i1* %FPU_SF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
172 :   %FPU_PE = getelementptr inbounds %struct.regs* %0, i64 0, i32 33, !mcsema_real_eip !2 :          <0>	pushq	%rbp
173 :   %36 = load i1* %FPU_PE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
174 :   store i1 %36, i1* %FPU_PE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
175 :   %FPU_UE = getelementptr inbounds %struct.regs* %0, i64 0, i32 34, !mcsema_real_eip !2 :          <0>	pushq	%rbp
176 :   %37 = load i1* %FPU_UE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
177 :   store i1 %37, i1* %FPU_UE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
178 :   %FPU_OE = getelementptr inbounds %struct.regs* %0, i64 0, i32 35, !mcsema_real_eip !2 :          <0>	pushq	%rbp
179 :   %38 = load i1* %FPU_OE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
180 :   store i1 %38, i1* %FPU_OE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
181 :   %FPU_ZE = getelementptr inbounds %struct.regs* %0, i64 0, i32 36, !mcsema_real_eip !2 :          <0>	pushq	%rbp
182 :   %39 = load i1* %FPU_ZE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
183 :   store i1 %39, i1* %FPU_ZE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
184 :   %FPU_DE = getelementptr inbounds %struct.regs* %0, i64 0, i32 37, !mcsema_real_eip !2 :          <0>	pushq	%rbp
185 :   %40 = load i1* %FPU_DE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
186 :   store i1 %40, i1* %FPU_DE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
187 :   %FPU_IE = getelementptr inbounds %struct.regs* %0, i64 0, i32 38, !mcsema_real_eip !2 :          <0>	pushq	%rbp
188 :   %41 = load i1* %FPU_IE, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
189 :   store i1 %41, i1* %FPU_IE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
190 :   %FPU_X = getelementptr inbounds %struct.regs* %0, i64 0, i32 39, !mcsema_real_eip !2 :          <0>	pushq	%rbp
191 :   %42 = load i1* %FPU_X, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
192 :   store i1 %42, i1* %FPU_X_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
193 :   %FPU_RC = getelementptr inbounds %struct.regs* %0, i64 0, i32 40, !mcsema_real_eip !2 :          <0>	pushq	%rbp
194 :   %43 = load i2* %FPU_RC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
195 :   store i2 %43, i2* %FPU_RC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
196 :   %FPU_PC = getelementptr inbounds %struct.regs* %0, i64 0, i32 41, !mcsema_real_eip !2 :          <0>	pushq	%rbp
197 :   %44 = load i2* %FPU_PC, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
198 :   store i2 %44, i2* %FPU_PC_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
199 :   %FPU_PM = getelementptr inbounds %struct.regs* %0, i64 0, i32 42, !mcsema_real_eip !2 :          <0>	pushq	%rbp
200 :   %45 = load i1* %FPU_PM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
201 :   store i1 %45, i1* %FPU_PM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
202 :   %FPU_UM = getelementptr inbounds %struct.regs* %0, i64 0, i32 43, !mcsema_real_eip !2 :          <0>	pushq	%rbp
203 :   %46 = load i1* %FPU_UM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
204 :   store i1 %46, i1* %FPU_UM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
205 :   %FPU_OM = getelementptr inbounds %struct.regs* %0, i64 0, i32 44, !mcsema_real_eip !2 :          <0>	pushq	%rbp
206 :   %47 = load i1* %FPU_OM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
207 :   store i1 %47, i1* %FPU_OM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
208 :   %FPU_ZM = getelementptr inbounds %struct.regs* %0, i64 0, i32 45, !mcsema_real_eip !2 :          <0>	pushq	%rbp
209 :   %48 = load i1* %FPU_ZM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
210 :   store i1 %48, i1* %FPU_ZM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
211 :   %FPU_DM = getelementptr inbounds %struct.regs* %0, i64 0, i32 46, !mcsema_real_eip !2 :          <0>	pushq	%rbp
212 :   %49 = load i1* %FPU_DM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
213 :   store i1 %49, i1* %FPU_DM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
214 :   %FPU_IM = getelementptr inbounds %struct.regs* %0, i64 0, i32 47, !mcsema_real_eip !2 :          <0>	pushq	%rbp
215 :   %50 = load i1* %FPU_IM, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
216 :   store i1 %50, i1* %FPU_IM_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
217 :   %51 = getelementptr inbounds %struct.regs* %0, i64 0, i32 48, i64 0, !mcsema_real_eip !2 :          <0>	pushq	%rbp

218 :   %52 = bitcast i8* %51 to i64* : NIL
219 :   %53 = bitcast [8 x i2]* %FPU_TAG_val to i64* : NIL
220 :   %54 = load i64* %52, align 4 : NIL
221 :   store i64 %54, i64* %53, align 4 : NIL

222 :   %FPU_LASTIP_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 49, !mcsema_real_eip !2 :          <0>	pushq	%rbp
223 :   %55 = load i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
224 :   store i16 %55, i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
225 :   %FPU_LASTIP_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 50, !mcsema_real_eip !2 :          <0>	pushq	%rbp
226 :   %56 = load i64* %FPU_LASTIP_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
227 :   store i64 %56, i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
228 :   %FPU_LASTDATA_SEG = getelementptr inbounds %struct.regs* %0, i64 0, i32 51, !mcsema_real_eip !2 :          <0>	pushq	%rbp
229 :   %57 = load i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
230 :   store i16 %57, i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
231 :   %FPU_LASTDATA_OFF = getelementptr inbounds %struct.regs* %0, i64 0, i32 52, !mcsema_real_eip !2 :          <0>	pushq	%rbp
232 :   %58 = load i64* %FPU_LASTDATA_OFF, !mcsema_real_eip !2 :          <0>	pushq	%rbp
233 :   store i64 %58, i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
234 :   %XMM0 = getelementptr inbounds %struct.regs* %0, i64 0, i32 54, !mcsema_real_eip !2 :          <0>	pushq	%rbp
235 :   %59 = load i128* %XMM0, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
236 :   store i128 %59, i128* %XMM0_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
237 :   %XMM1 = getelementptr inbounds %struct.regs* %0, i64 0, i32 55, !mcsema_real_eip !2 :          <0>	pushq	%rbp
238 :   %60 = load i128* %XMM1, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
239 :   store i128 %60, i128* %XMM1_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
240 :   %XMM2 = getelementptr inbounds %struct.regs* %0, i64 0, i32 56, !mcsema_real_eip !2 :          <0>	pushq	%rbp
241 :   %61 = load i128* %XMM2, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
242 :   store i128 %61, i128* %XMM2_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
243 :   %XMM3 = getelementptr inbounds %struct.regs* %0, i64 0, i32 57, !mcsema_real_eip !2 :          <0>	pushq	%rbp
244 :   %62 = load i128* %XMM3, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
245 :   store i128 %62, i128* %XMM3_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
246 :   %XMM4 = getelementptr inbounds %struct.regs* %0, i64 0, i32 58, !mcsema_real_eip !2 :          <0>	pushq	%rbp
247 :   %63 = load i128* %XMM4, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
248 :   store i128 %63, i128* %XMM4_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
249 :   %XMM5 = getelementptr inbounds %struct.regs* %0, i64 0, i32 59, !mcsema_real_eip !2 :          <0>	pushq	%rbp
250 :   %64 = load i128* %XMM5, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
251 :   store i128 %64, i128* %XMM5_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
252 :   %XMM6 = getelementptr inbounds %struct.regs* %0, i64 0, i32 60, !mcsema_real_eip !2 :          <0>	pushq	%rbp
253 :   %65 = load i128* %XMM6, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
254 :   store i128 %65, i128* %XMM6_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
255 :   %XMM7 = getelementptr inbounds %struct.regs* %0, i64 0, i32 61, !mcsema_real_eip !2 :          <0>	pushq	%rbp
256 :   %66 = load i128* %XMM7, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
257 :   store i128 %66, i128* %XMM7_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
258 :   %XMM8 = getelementptr inbounds %struct.regs* %0, i64 0, i32 62, !mcsema_real_eip !2 :          <0>	pushq	%rbp
259 :   %67 = load i128* %XMM8, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
260 :   store i128 %67, i128* %XMM8_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
261 :   %XMM9 = getelementptr inbounds %struct.regs* %0, i64 0, i32 63, !mcsema_real_eip !2 :          <0>	pushq	%rbp
262 :   %68 = load i128* %XMM9, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
263 :   store i128 %68, i128* %XMM9_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
264 :   %XMM10 = getelementptr inbounds %struct.regs* %0, i64 0, i32 64, !mcsema_real_eip !2 :          <0>	pushq	%rbp
265 :   %69 = load i128* %XMM10, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
266 :   store i128 %69, i128* %XMM10_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
267 :   %XMM11 = getelementptr inbounds %struct.regs* %0, i64 0, i32 65, !mcsema_real_eip !2 :          <0>	pushq	%rbp
268 :   %70 = load i128* %XMM11, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
269 :   store i128 %70, i128* %XMM11_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
270 :   %XMM12 = getelementptr inbounds %struct.regs* %0, i64 0, i32 66, !mcsema_real_eip !2 :          <0>	pushq	%rbp
271 :   %71 = load i128* %XMM12, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
272 :   store i128 %71, i128* %XMM12_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
273 :   %XMM13 = getelementptr inbounds %struct.regs* %0, i64 0, i32 67, !mcsema_real_eip !2 :          <0>	pushq	%rbp
274 :   %72 = load i128* %XMM13, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
275 :   store i128 %72, i128* %XMM13_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
276 :   %XMM14 = getelementptr inbounds %struct.regs* %0, i64 0, i32 68, !mcsema_real_eip !2 :          <0>	pushq	%rbp
277 :   %73 = load i128* %XMM14, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
278 :   store i128 %73, i128* %XMM14_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
279 :   %XMM15 = getelementptr inbounds %struct.regs* %0, i64 0, i32 69, !mcsema_real_eip !2 :          <0>	pushq	%rbp
280 :   %74 = load i128* %XMM15, align 1, !mcsema_real_eip !2 :          <0>	pushq	%rbp
281 :   store i128 %74, i128* %XMM15_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
282 :   %STACK_BASE = getelementptr inbounds %struct.regs* %0, i64 0, i32 70, !mcsema_real_eip !2 :          <0>	pushq	%rbp
283 :   %75 = load i64* %STACK_BASE, !mcsema_real_eip !2 :          <0>	pushq	%rbp
284 :   store i64 %75, i64* %STACK_BASE_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
285 :   %STACK_LIMIT = getelementptr inbounds %struct.regs* %0, i64 0, i32 71, !mcsema_real_eip !2 :          <0>	pushq	%rbp
286 :   %76 = load i64* %STACK_LIMIT, !mcsema_real_eip !2 :          <0>	pushq	%rbp
287 :   store i64 %76, i64* %STACK_LIMIT_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
288 :   %77 = load i64* %RBP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp
289 :   %78 = load i64* %RSP_val, !mcsema_real_eip !2 :          <0>	pushq	%rbp

290 :   %79 = add i64 %78, -8 : NIL

291 :   %80 = inttoptr i64 %79 to i64*, !mcsema_real_eip !2 :          <0>	pushq	%rbp
292 :   store i64 %77, i64* %80, !mcsema_real_eip !2 :          <0>	pushq	%rbp

293 :   store i64 %79, i64* %RBP_val, !mcsema_real_eip !3 :          <1>	movq	%rsp, %rbp

294 :   %81 = add i64 %78, -24 : NIL

295 :   %82 = xor i64 %81, %79, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp

296 :   %83 = and i64 %82, 16 : NIL
297 :   %84 = icmp eq i64 %83, 0 : NIL

298 :   store i1 %84, i1* %AF_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
299 :   %85 = trunc i64 %81 to i8, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
300 :   %86 = tail call i8 @llvm.ctpop.i8(i8 %85), !mcsema_real_eip !4 :          <4>	subq	$16, %rsp

301 :   %87 = and i8 %86, 1 : NIL
302 :   %88 = icmp eq i8 %87, 0 : NIL

303 :   store i1 %88, i1* %PF_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
304 :   %89 = icmp eq i64 %81, 0, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
305 :   store i1 %89, i1* %ZF_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp

306 :   %90 = icmp slt i64 %81, 0 : NIL

307 :   store i1 %90, i1* %SF_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
308 :   %91 = icmp ult i64 %79, 16, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
309 :   store i1 %91, i1* %CF_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
310 :   %92 = and i64 %82, %79, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp

311 :   %93 = icmp slt i64 %92, 0 : NIL

312 :   store i1 %93, i1* %OF_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp
313 :   store i64 %81, i64* %RSP_val, !mcsema_real_eip !4 :          <4>	subq	$16, %rsp

314 :   %94 = load i64* %RBP_val, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)
315 :   %95 = add i64 %94, -4, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)
316 :   %96 = inttoptr i64 %95 to i64*, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)

317 :   %97 = bitcast i64* %96 to i32* : NIL

318 :   store i32 0, i32* %97, !mcsema_real_eip !5 :          <8>	movl	$0, -4(%rbp)

319 :   %98 = load i64* %RBP_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
320 :   %99 = add i64 %98, -4, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
321 :   %100 = inttoptr i64 %99 to i64*, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

322 :   %101 = bitcast i64* %100 to i32* : NIL

323 :   %102 = load i32* %101, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

324 :   %103 = add i32 %102, -6 : NIL

325 :   %104 = xor i32 %103, %102, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
326 :   %105 = and i32 %104, 16, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
327 :   %106 = icmp ne i32 %105, 0, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
328 :   store i1 %106, i1* %AF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
329 :   %107 = trunc i32 %103 to i8, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
330 :   %108 = tail call i8 @llvm.ctpop.i8(i8 %107), !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

331 :   %109 = and i8 %108, 1 : NIL
332 :   %110 = icmp eq i8 %109, 0 : NIL

333 :   store i1 %110, i1* %PF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
334 :   %111 = icmp eq i32 %103, 0, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
335 :   store i1 %111, i1* %ZF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

336 :   %112 = icmp slt i32 %103, 0 : NIL

337 :   store i1 %112, i1* %SF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
338 :   %113 = icmp ult i32 %102, 6, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
339 :   store i1 %113, i1* %CF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
340 :   %114 = and i32 %104, %102, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

341 :   %115 = icmp slt i32 %114, 0 : NIL

342 :   store i1 %115, i1* %OF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

343 :   %116 = xor i1 %112, %115 : NIL

344 :   %117 = load i1* %ZF_val, !mcsema_real_eip !7 :          <68>	jle	-89
345 :   %118 = or i1 %117, %116, !mcsema_real_eip !7 :          <68>	jle	-89
346 :   br i1 %118, label %block_0x11.preheader, label %block_0x6a, !mcsema_real_eip !7 :          <68>	jle	-89

347 :   br label %block_0x11 : NIL

348 :   %119 = load i64* %RBP_val, !mcsema_real_eip !8 :          <11>	movl	$0, -8(%rbp)
349 :   %120 = add i64 %119, -8, !mcsema_real_eip !8 :          <11>	movl	$0, -8(%rbp)
350 :   %121 = inttoptr i64 %120 to i64*, !mcsema_real_eip !8 :          <11>	movl	$0, -8(%rbp)

351 :   %122 = bitcast i64* %121 to i32* : NIL

352 :   store i32 0, i32* %122, !mcsema_real_eip !8 :          <11>	movl	$0, -8(%rbp)

353 :   %123 = load i64* %RBP_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
354 :   %124 = add i64 %123, -8, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
355 :   %125 = inttoptr i64 %124 to i64*, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

356 :   %126 = bitcast i64* %125 to i32* : NIL

357 :   %127 = load i32* %126, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

358 :   %128 = add i32 %127, -10 : NIL

359 :   %129 = xor i32 %128, %127, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
360 :   %130 = and i32 %129, 16, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
361 :   %131 = icmp ne i32 %130, 0, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
362 :   store i1 %131, i1* %AF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
363 :   %132 = trunc i32 %128 to i8, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
364 :   %133 = tail call i8 @llvm.ctpop.i8(i8 %132), !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

365 :   %134 = and i8 %133, 1 : NIL
366 :   %135 = icmp eq i8 %134, 0 : NIL

367 :   store i1 %135, i1* %PF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
368 :   %136 = icmp eq i32 %128, 0, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
369 :   store i1 %136, i1* %ZF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

370 :   %137 = icmp slt i32 %128, 0 : NIL

371 :   store i1 %137, i1* %SF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
372 :   %138 = icmp ult i32 %127, 10, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
373 :   store i1 %138, i1* %CF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
374 :   %139 = and i32 %129, %127, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

375 :   %140 = icmp slt i32 %139, 0 : NIL

376 :   store i1 %140, i1* %OF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

377 :   %141 = xor i1 %137, %140 : NIL

378 :   %142 = load i1* %ZF_val, !mcsema_real_eip !10 :          <54>	jle	-60
379 :   %143 = or i1 %142, %141, !mcsema_real_eip !10 :          <54>	jle	-60
380 :   br i1 %143, label %block_0x1a.preheader, label %block_0x56, !mcsema_real_eip !10 :          <54>	jle	-60

381 :   br label %block_0x1a : NIL
382 :   br label %block_0x6a : NIL

383 :   store i64 10, i64* %RDI_val, !mcsema_real_eip !11 :          <6a>	movl	$10, %edi

384 :   %144 = tail call x86_64_sysvcc i64 @putchar(i64 10), !mcsema_real_eip !12 :          <6f>	callq	0
385 :   store i64 %144, i64* %RAX_val, !mcsema_real_eip !12 :          <6f>	callq	0

386 :   %145 = load i64* %RBP_val, !mcsema_real_eip !13 :          <74>	leave
387 :   store i64 %145, i64* %RSP_val, !mcsema_real_eip !13 :          <74>	leave
388 :   %146 = inttoptr i64 %145 to i64*, !mcsema_real_eip !13 :          <74>	leave
389 :   %147 = load i64* %146, !mcsema_real_eip !13 :          <74>	leave
390 :   store i64 %147, i64* %RBP_val, !mcsema_real_eip !13 :          <74>	leave

391 :   %148 = add i64 %145, 16, !mcsema_real_eip !14 :          <75>	retq
392 :   store i64 %148, i64* %RSP_val, !mcsema_real_eip !14 :          <75>	retq
393 :   %149 = load i64* %RAX_val, !mcsema_real_eip !14 :          <75>	retq
394 :   store i64 %149, i64* %RAX, !mcsema_real_eip !14 :          <75>	retq
395 :   %150 = load i64* %RBX_val, !mcsema_real_eip !14 :          <75>	retq
396 :   store i64 %150, i64* %RBX, !mcsema_real_eip !14 :          <75>	retq
397 :   %151 = load i64* %RCX_val, !mcsema_real_eip !14 :          <75>	retq
398 :   store i64 %151, i64* %RCX, !mcsema_real_eip !14 :          <75>	retq
399 :   %152 = load i64* %RDX_val, !mcsema_real_eip !14 :          <75>	retq
400 :   store i64 %152, i64* %RDX, !mcsema_real_eip !14 :          <75>	retq
401 :   %153 = load i64* %RSI_val, !mcsema_real_eip !14 :          <75>	retq
402 :   store i64 %153, i64* %RSI, !mcsema_real_eip !14 :          <75>	retq
403 :   %154 = load i64* %RDI_val, !mcsema_real_eip !14 :          <75>	retq
404 :   store i64 %154, i64* %RDI, !mcsema_real_eip !14 :          <75>	retq
405 :   %155 = load i64* %RSP_val, !mcsema_real_eip !14 :          <75>	retq
406 :   store i64 %155, i64* %RSP, !mcsema_real_eip !14 :          <75>	retq
407 :   %156 = load i64* %RBP_val, !mcsema_real_eip !14 :          <75>	retq
408 :   store i64 %156, i64* %RBP, !mcsema_real_eip !14 :          <75>	retq
409 :   %157 = load i64* %R8_val, !mcsema_real_eip !14 :          <75>	retq
410 :   store i64 %157, i64* %R8, !mcsema_real_eip !14 :          <75>	retq
411 :   %158 = load i64* %R9_val, !mcsema_real_eip !14 :          <75>	retq
412 :   store i64 %158, i64* %R9, !mcsema_real_eip !14 :          <75>	retq
413 :   %159 = load i64* %R10_val, !mcsema_real_eip !14 :          <75>	retq
414 :   store i64 %159, i64* %R10, !mcsema_real_eip !14 :          <75>	retq
415 :   %160 = load i64* %R11_val, !mcsema_real_eip !14 :          <75>	retq
416 :   store i64 %160, i64* %R11, !mcsema_real_eip !14 :          <75>	retq
417 :   %161 = load i64* %R12_val, !mcsema_real_eip !14 :          <75>	retq
418 :   store i64 %161, i64* %R12, !mcsema_real_eip !14 :          <75>	retq
419 :   %162 = load i64* %R13_val, !mcsema_real_eip !14 :          <75>	retq
420 :   store i64 %162, i64* %R13, !mcsema_real_eip !14 :          <75>	retq
421 :   %163 = load i64* %R14_val, !mcsema_real_eip !14 :          <75>	retq
422 :   store i64 %163, i64* %R14, !mcsema_real_eip !14 :          <75>	retq
423 :   %164 = load i64* %R15_val, !mcsema_real_eip !14 :          <75>	retq
424 :   store i64 %164, i64* %R15, !mcsema_real_eip !14 :          <75>	retq
425 :   %165 = load i64* %RIP_val, !mcsema_real_eip !14 :          <75>	retq
426 :   store i64 %165, i64* %RIP, !mcsema_real_eip !14 :          <75>	retq
427 :   %166 = load i1* %CF_val, !mcsema_real_eip !14 :          <75>	retq
428 :   store i1 %166, i1* %CF, align 1, !mcsema_real_eip !14 :          <75>	retq
429 :   %167 = load i1* %PF_val, !mcsema_real_eip !14 :          <75>	retq
430 :   store i1 %167, i1* %PF, align 1, !mcsema_real_eip !14 :          <75>	retq
431 :   %168 = load i1* %AF_val, !mcsema_real_eip !14 :          <75>	retq
432 :   store i1 %168, i1* %AF, align 1, !mcsema_real_eip !14 :          <75>	retq
433 :   %169 = load i1* %ZF_val, !mcsema_real_eip !14 :          <75>	retq
434 :   store i1 %169, i1* %ZF, align 1, !mcsema_real_eip !14 :          <75>	retq
435 :   %170 = load i1* %SF_val, !mcsema_real_eip !14 :          <75>	retq
436 :   store i1 %170, i1* %SF, align 1, !mcsema_real_eip !14 :          <75>	retq
437 :   %171 = load i1* %OF_val, !mcsema_real_eip !14 :          <75>	retq
438 :   store i1 %171, i1* %OF, align 1, !mcsema_real_eip !14 :          <75>	retq
439 :   %172 = load i1* %DF_val, !mcsema_real_eip !14 :          <75>	retq
440 :   store i1 %172, i1* %DF, align 1, !mcsema_real_eip !14 :          <75>	retq
441 :   call void @llvm.memcpy.p0i8.p0i8.i32(i8* %26, i8* %27, i32 128, i32 8, i1 false), !mcsema_real_eip !14 :          <75>	retq
442 :   %173 = load i1* %FPU_B_val, !mcsema_real_eip !14 :          <75>	retq
443 :   store i1 %173, i1* %FPU_B, align 1, !mcsema_real_eip !14 :          <75>	retq
444 :   %174 = load i1* %FPU_C3_val, !mcsema_real_eip !14 :          <75>	retq
445 :   store i1 %174, i1* %FPU_C3, align 1, !mcsema_real_eip !14 :          <75>	retq
446 :   %175 = load i3* %FPU_TOP_val, !mcsema_real_eip !14 :          <75>	retq
447 :   store i3 %175, i3* %FPU_TOP, align 1, !mcsema_real_eip !14 :          <75>	retq
448 :   %176 = load i1* %FPU_C2_val, !mcsema_real_eip !14 :          <75>	retq
449 :   store i1 %176, i1* %FPU_C2, align 1, !mcsema_real_eip !14 :          <75>	retq
450 :   %177 = load i1* %FPU_C1_val, !mcsema_real_eip !14 :          <75>	retq
451 :   store i1 %177, i1* %FPU_C1, align 1, !mcsema_real_eip !14 :          <75>	retq
452 :   %178 = load i1* %FPU_C0_val, !mcsema_real_eip !14 :          <75>	retq
453 :   store i1 %178, i1* %FPU_C0, align 1, !mcsema_real_eip !14 :          <75>	retq
454 :   %179 = load i1* %FPU_ES_val, !mcsema_real_eip !14 :          <75>	retq
455 :   store i1 %179, i1* %FPU_ES, align 1, !mcsema_real_eip !14 :          <75>	retq
456 :   %180 = load i1* %FPU_SF_val, !mcsema_real_eip !14 :          <75>	retq
457 :   store i1 %180, i1* %FPU_SF, align 1, !mcsema_real_eip !14 :          <75>	retq
458 :   %181 = load i1* %FPU_PE_val, !mcsema_real_eip !14 :          <75>	retq
459 :   store i1 %181, i1* %FPU_PE, align 1, !mcsema_real_eip !14 :          <75>	retq
460 :   %182 = load i1* %FPU_UE_val, !mcsema_real_eip !14 :          <75>	retq
461 :   store i1 %182, i1* %FPU_UE, align 1, !mcsema_real_eip !14 :          <75>	retq
462 :   %183 = load i1* %FPU_OE_val, !mcsema_real_eip !14 :          <75>	retq
463 :   store i1 %183, i1* %FPU_OE, align 1, !mcsema_real_eip !14 :          <75>	retq
464 :   %184 = load i1* %FPU_ZE_val, !mcsema_real_eip !14 :          <75>	retq
465 :   store i1 %184, i1* %FPU_ZE, align 1, !mcsema_real_eip !14 :          <75>	retq
466 :   %185 = load i1* %FPU_DE_val, !mcsema_real_eip !14 :          <75>	retq
467 :   store i1 %185, i1* %FPU_DE, align 1, !mcsema_real_eip !14 :          <75>	retq
468 :   %186 = load i1* %FPU_IE_val, !mcsema_real_eip !14 :          <75>	retq
469 :   store i1 %186, i1* %FPU_IE, align 1, !mcsema_real_eip !14 :          <75>	retq
470 :   %187 = load i1* %FPU_X_val, !mcsema_real_eip !14 :          <75>	retq
471 :   store i1 %187, i1* %FPU_X, align 1, !mcsema_real_eip !14 :          <75>	retq
472 :   %188 = load i2* %FPU_RC_val, !mcsema_real_eip !14 :          <75>	retq
473 :   store i2 %188, i2* %FPU_RC, align 1, !mcsema_real_eip !14 :          <75>	retq
474 :   %189 = load i2* %FPU_PC_val, !mcsema_real_eip !14 :          <75>	retq
475 :   store i2 %189, i2* %FPU_PC, align 1, !mcsema_real_eip !14 :          <75>	retq
476 :   %190 = load i1* %FPU_PM_val, !mcsema_real_eip !14 :          <75>	retq
477 :   store i1 %190, i1* %FPU_PM, align 1, !mcsema_real_eip !14 :          <75>	retq
478 :   %191 = load i1* %FPU_UM_val, !mcsema_real_eip !14 :          <75>	retq
479 :   store i1 %191, i1* %FPU_UM, align 1, !mcsema_real_eip !14 :          <75>	retq
480 :   %192 = load i1* %FPU_OM_val, !mcsema_real_eip !14 :          <75>	retq
481 :   store i1 %192, i1* %FPU_OM, align 1, !mcsema_real_eip !14 :          <75>	retq
482 :   %193 = load i1* %FPU_ZM_val, !mcsema_real_eip !14 :          <75>	retq
483 :   store i1 %193, i1* %FPU_ZM, align 1, !mcsema_real_eip !14 :          <75>	retq
484 :   %194 = load i1* %FPU_DM_val, !mcsema_real_eip !14 :          <75>	retq
485 :   store i1 %194, i1* %FPU_DM, align 1, !mcsema_real_eip !14 :          <75>	retq
486 :   %195 = load i1* %FPU_IM_val, !mcsema_real_eip !14 :          <75>	retq
487 :   store i1 %195, i1* %FPU_IM, align 1, !mcsema_real_eip !14 :          <75>	retq

488 :   %196 = load i64* %53, align 4 : NIL
489 :   store i64 %196, i64* %52, align 4 : NIL

490 :   %197 = load i16* %FPU_LASTIP_SEG_val, !mcsema_real_eip !14 :          <75>	retq
491 :   store i16 %197, i16* %FPU_LASTIP_SEG, align 1, !mcsema_real_eip !14 :          <75>	retq
492 :   %198 = load i64* %FPU_LASTIP_OFF_val, !mcsema_real_eip !14 :          <75>	retq
493 :   store i64 %198, i64* %FPU_LASTIP_OFF, align 1, !mcsema_real_eip !14 :          <75>	retq
494 :   %199 = load i16* %FPU_LASTDATA_SEG_val, !mcsema_real_eip !14 :          <75>	retq
495 :   store i16 %199, i16* %FPU_LASTDATA_SEG, align 1, !mcsema_real_eip !14 :          <75>	retq
496 :   %200 = load i64* %FPU_LASTDATA_OFF_val, !mcsema_real_eip !14 :          <75>	retq
497 :   store i64 %200, i64* %FPU_LASTDATA_OFF, align 1, !mcsema_real_eip !14 :          <75>	retq
498 :   %201 = load i128* %XMM0_val, !mcsema_real_eip !14 :          <75>	retq
499 :   store i128 %201, i128* %XMM0, align 1, !mcsema_real_eip !14 :          <75>	retq
500 :   %202 = load i128* %XMM1_val, !mcsema_real_eip !14 :          <75>	retq
501 :   store i128 %202, i128* %XMM1, align 1, !mcsema_real_eip !14 :          <75>	retq
502 :   %203 = load i128* %XMM2_val, !mcsema_real_eip !14 :          <75>	retq
503 :   store i128 %203, i128* %XMM2, align 1, !mcsema_real_eip !14 :          <75>	retq
504 :   %204 = load i128* %XMM3_val, !mcsema_real_eip !14 :          <75>	retq
505 :   store i128 %204, i128* %XMM3, align 1, !mcsema_real_eip !14 :          <75>	retq
506 :   %205 = load i128* %XMM4_val, !mcsema_real_eip !14 :          <75>	retq
507 :   store i128 %205, i128* %XMM4, align 1, !mcsema_real_eip !14 :          <75>	retq
508 :   %206 = load i128* %XMM5_val, !mcsema_real_eip !14 :          <75>	retq
509 :   store i128 %206, i128* %XMM5, align 1, !mcsema_real_eip !14 :          <75>	retq
510 :   %207 = load i128* %XMM6_val, !mcsema_real_eip !14 :          <75>	retq
511 :   store i128 %207, i128* %XMM6, align 1, !mcsema_real_eip !14 :          <75>	retq
512 :   %208 = load i128* %XMM7_val, !mcsema_real_eip !14 :          <75>	retq
513 :   store i128 %208, i128* %XMM7, align 1, !mcsema_real_eip !14 :          <75>	retq
514 :   %209 = load i128* %XMM8_val, !mcsema_real_eip !14 :          <75>	retq
515 :   store i128 %209, i128* %XMM8, align 1, !mcsema_real_eip !14 :          <75>	retq
516 :   %210 = load i128* %XMM9_val, !mcsema_real_eip !14 :          <75>	retq
517 :   store i128 %210, i128* %XMM9, align 1, !mcsema_real_eip !14 :          <75>	retq
518 :   %211 = load i128* %XMM10_val, !mcsema_real_eip !14 :          <75>	retq
519 :   store i128 %211, i128* %XMM10, align 1, !mcsema_real_eip !14 :          <75>	retq
520 :   %212 = load i128* %XMM11_val, !mcsema_real_eip !14 :          <75>	retq
521 :   store i128 %212, i128* %XMM11, align 1, !mcsema_real_eip !14 :          <75>	retq
522 :   %213 = load i128* %XMM12_val, !mcsema_real_eip !14 :          <75>	retq
523 :   store i128 %213, i128* %XMM12, align 1, !mcsema_real_eip !14 :          <75>	retq
524 :   %214 = load i128* %XMM13_val, !mcsema_real_eip !14 :          <75>	retq
525 :   store i128 %214, i128* %XMM13, align 1, !mcsema_real_eip !14 :          <75>	retq
526 :   %215 = load i128* %XMM14_val, !mcsema_real_eip !14 :          <75>	retq
527 :   store i128 %215, i128* %XMM14, align 1, !mcsema_real_eip !14 :          <75>	retq
528 :   %216 = load i128* %XMM15_val, !mcsema_real_eip !14 :          <75>	retq
529 :   store i128 %216, i128* %XMM15, align 1, !mcsema_real_eip !14 :          <75>	retq
530 :   %217 = load i64* %STACK_BASE_val, !mcsema_real_eip !14 :          <75>	retq
531 :   store i64 %217, i64* %STACK_BASE, align 1, !mcsema_real_eip !14 :          <75>	retq
532 :   %218 = load i64* %STACK_LIMIT_val, !mcsema_real_eip !14 :          <75>	retq
533 :   store i64 %218, i64* %STACK_LIMIT, align 1, !mcsema_real_eip !14 :          <75>	retq
534 :   ret void, !mcsema_real_eip !14 :          <75>	retq

535 :   %219 = load i64* %RBP_val, !mcsema_real_eip !15 :          <1a>	movl	-8(%rbp), %eax
536 :   %220 = add i64 %219, -8, !mcsema_real_eip !15 :          <1a>	movl	-8(%rbp), %eax
537 :   %221 = inttoptr i64 %220 to i64*, !mcsema_real_eip !15 :          <1a>	movl	-8(%rbp), %eax

538 :   %222 = bitcast i64* %221 to i32* : NIL

539 :   %223 = load i32* %222, !mcsema_real_eip !15 :          <1a>	movl	-8(%rbp), %eax
540 :   %224 = zext i32 %223 to i64, !mcsema_real_eip !15 :          <1a>	movl	-8(%rbp), %eax
541 :   store i64 %224, i64* %RAX_val, !mcsema_real_eip !15 :          <1a>	movl	-8(%rbp), %eax

542 :   %225 = sext i32 %223 to i64, !mcsema_real_eip !16 :          <1d>	movslq	%eax, %rcx
543 :   store i64 %225, i64* %RCX_val, !mcsema_real_eip !16 :          <1d>	movslq	%eax, %rcx

544 :   %226 = load i64* %RBP_val, !mcsema_real_eip !17 :          <20>	movl	-4(%rbp), %eax
545 :   %227 = add i64 %226, -4, !mcsema_real_eip !17 :          <20>	movl	-4(%rbp), %eax
546 :   %228 = inttoptr i64 %227 to i64*, !mcsema_real_eip !17 :          <20>	movl	-4(%rbp), %eax

547 :   %229 = bitcast i64* %228 to i32* : NIL

548 :   %230 = load i32* %229, !mcsema_real_eip !17 :          <20>	movl	-4(%rbp), %eax

549 :   %231 = sext i32 %230 to i64, !mcsema_real_eip !18 :          <23>	movslq	%eax, %rdx
550 :   store i64 %231, i64* %RDX_val, !mcsema_real_eip !18 :          <23>	movslq	%eax, %rdx

551 :   %232 = mul i64 %231, 11 : NIL

552 :   %233 = load i64* %RCX_val, !mcsema_real_eip !19 :          <36>	addq	%rcx, %rax

553 :   %234 = add i64 %233, %232 : NIL
554 :   %uadd76 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %234, i64 ptrtoint (%0* @data_0x28d to i64)) : NIL
555 :   %235 = extractvalue { i64, i1 } %uadd76, 0 : NIL

556 :   %236 = xor i64 %235, ptrtoint (%0* @data_0x28d to i64), !mcsema_real_eip !20 :          <39>	addq	$0, %rax
557 :   %237 = xor i64 %236, %234, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
558 :   %238 = and i64 %237, 16, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
559 :   %239 = icmp ne i64 %238, 0, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
560 :   store i1 %239, i1* %AF_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax

561 :   %240 = icmp slt i64 %235, 0 : NIL

562 :   store i1 %240, i1* %SF_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
563 :   %241 = icmp eq i64 %235, 0, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
564 :   store i1 %241, i1* %ZF_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
565 :   %242 = xor i64 %234, xor (i64 ptrtoint (%0* @data_0x28d to i64), i64 -1), !mcsema_real_eip !20 :          <39>	addq	$0, %rax
566 :   %243 = and i64 %236, %242, !mcsema_real_eip !20 :          <39>	addq	$0, %rax

567 :   %244 = icmp slt i64 %243, 0 : NIL

568 :   store i1 %244, i1* %OF_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
569 :   %245 = trunc i64 %235 to i8, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
570 :   %246 = tail call i8 @llvm.ctpop.i8(i8 %245), !mcsema_real_eip !20 :          <39>	addq	$0, %rax

571 :   %247 = and i8 %246, 1 : NIL
572 :   %248 = icmp eq i8 %247, 0 : NIL

573 :   store i1 %248, i1* %PF_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax

574 :   %249 = extractvalue { i64, i1 } %uadd76, 1 : NIL

575 :   store i1 %249, i1* %CF_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax
576 :   store i64 %235, i64* %RAX_val, !mcsema_real_eip !20 :          <39>	addq	$0, %rax

577 :   %250 = inttoptr i64 %235 to i64*, !mcsema_real_eip !21 :          <3f>	movzbl	(%rax), %eax

578 :   %251 = bitcast i64* %250 to i8* : NIL

579 :   %252 = load i8* %251, !mcsema_real_eip !21 :          <3f>	movzbl	(%rax), %eax

580 :   %253 = sext i8 %252 to i32, !mcsema_real_eip !22 :          <42>	movsbl	%al, %eax
581 :   %254 = zext i32 %253 to i64, !mcsema_real_eip !22 :          <42>	movsbl	%al, %eax

582 :   store i64 %254, i64* %RDI_val, !mcsema_real_eip !23 :          <45>	movl	%eax, %edi

583 :   %255 = tail call x86_64_sysvcc i64 @putchar(i64 %254), !mcsema_real_eip !24 :          <47>	callq	0
584 :   store i64 %255, i64* %RAX_val, !mcsema_real_eip !24 :          <47>	callq	0

585 :   %256 = load i64* %RBP_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
586 :   %257 = add i64 %256, -8, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
587 :   %258 = inttoptr i64 %257 to i64*, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

588 :   %259 = bitcast i64* %258 to i32* : NIL

589 :   %260 = load i32* %259, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

590 :   %uadd77 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %260, i32 1) : NIL
591 :   %261 = extractvalue { i32, i1 } %uadd77, 0 : NIL

592 :   %262 = xor i32 %261, %260, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
593 :   %263 = and i32 %262, 16, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
594 :   %264 = icmp ne i32 %263, 0, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
595 :   store i1 %264, i1* %AF_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

596 :   %265 = icmp slt i32 %261, 0 : NIL

597 :   store i1 %265, i1* %SF_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
598 :   %266 = icmp eq i32 %261, 0, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
599 :   store i1 %266, i1* %ZF_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
600 :   %267 = xor i32 %260, -2147483648, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
601 :   %268 = and i32 %262, %267, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

602 :   %269 = icmp slt i32 %268, 0 : NIL

603 :   store i1 %269, i1* %OF_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
604 :   %270 = trunc i32 %261 to i8, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
605 :   %271 = tail call i8 @llvm.ctpop.i8(i8 %270), !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

606 :   %272 = and i8 %271, 1 : NIL
607 :   %273 = icmp eq i8 %272, 0 : NIL

608 :   store i1 %273, i1* %PF_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

609 :   %274 = extractvalue { i32, i1 } %uadd77, 1 : NIL

610 :   store i1 %274, i1* %CF_val, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)
611 :   store i32 %261, i32* %259, !mcsema_real_eip !25 :          <4c>	addl	$1, -8(%rbp)

612 :   %275 = load i64* %RBP_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
613 :   %276 = add i64 %275, -8, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
614 :   %277 = inttoptr i64 %276 to i64*, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

615 :   %278 = bitcast i64* %277 to i32* : NIL

616 :   %279 = load i32* %278, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

617 :   %280 = add i32 %279, -10 : NIL

618 :   %281 = xor i32 %280, %279, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
619 :   %282 = and i32 %281, 16, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
620 :   %283 = icmp ne i32 %282, 0, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
621 :   store i1 %283, i1* %AF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
622 :   %284 = trunc i32 %280 to i8, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
623 :   %285 = tail call i8 @llvm.ctpop.i8(i8 %284), !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

624 :   %286 = and i8 %285, 1 : NIL
625 :   %287 = icmp eq i8 %286, 0 : NIL

626 :   store i1 %287, i1* %PF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
627 :   %288 = icmp eq i32 %280, 0, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
628 :   store i1 %288, i1* %ZF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

629 :   %289 = icmp slt i32 %280, 0 : NIL

630 :   store i1 %289, i1* %SF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
631 :   %290 = icmp ult i32 %279, 10, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
632 :   store i1 %290, i1* %CF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)
633 :   %291 = and i32 %281, %279, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

634 :   %292 = icmp slt i32 %291, 0 : NIL

635 :   store i1 %292, i1* %OF_val, !mcsema_real_eip !9 :          <50>	cmpl	$10, -8(%rbp)

636 :   %293 = xor i1 %289, %292 : NIL

637 :   %294 = load i1* %ZF_val, !mcsema_real_eip !10 :          <54>	jle	-60
638 :   %295 = or i1 %294, %293, !mcsema_real_eip !10 :          <54>	jle	-60
639 :   br i1 %295, label %block_0x1a, label %block_0x56.loopexit, !mcsema_real_eip !10 :          <54>	jle	-60

640 :   br label %block_0x56 : NIL

641 :   store i64 10, i64* %RDI_val, !mcsema_real_eip !26 :          <56>	movl	$10, %edi

642 :   %296 = tail call x86_64_sysvcc i64 @putchar(i64 10), !mcsema_real_eip !27 :          <5b>	callq	0
643 :   store i64 %296, i64* %RAX_val, !mcsema_real_eip !27 :          <5b>	callq	0

644 :   %297 = load i64* %RBP_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
645 :   %298 = add i64 %297, -4, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
646 :   %299 = inttoptr i64 %298 to i64*, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

647 :   %300 = bitcast i64* %299 to i32* : NIL

648 :   %301 = load i32* %300, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

649 :   %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %301, i32 1) : NIL
650 :   %302 = extractvalue { i32, i1 } %uadd, 0 : NIL

651 :   %303 = xor i32 %302, %301, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
652 :   %304 = and i32 %303, 16, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
653 :   %305 = icmp ne i32 %304, 0, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
654 :   store i1 %305, i1* %AF_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

655 :   %306 = icmp slt i32 %302, 0 : NIL

656 :   store i1 %306, i1* %SF_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
657 :   %307 = icmp eq i32 %302, 0, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
658 :   store i1 %307, i1* %ZF_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
659 :   %308 = xor i32 %301, -2147483648, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
660 :   %309 = and i32 %303, %308, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

661 :   %310 = icmp slt i32 %309, 0 : NIL

662 :   store i1 %310, i1* %OF_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
663 :   %311 = trunc i32 %302 to i8, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
664 :   %312 = tail call i8 @llvm.ctpop.i8(i8 %311), !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

665 :   %313 = and i8 %312, 1 : NIL
666 :   %314 = icmp eq i8 %313, 0 : NIL

667 :   store i1 %314, i1* %PF_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

668 :   %315 = extractvalue { i32, i1 } %uadd, 1 : NIL

669 :   store i1 %315, i1* %CF_val, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)
670 :   store i32 %302, i32* %300, !mcsema_real_eip !28 :          <60>	addl	$1, -4(%rbp)

671 :   %316 = load i64* %RBP_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
672 :   %317 = add i64 %316, -4, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
673 :   %318 = inttoptr i64 %317 to i64*, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

674 :   %319 = bitcast i64* %318 to i32* : NIL

675 :   %320 = load i32* %319, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

676 :   %321 = add i32 %320, -6 : NIL

677 :   %322 = xor i32 %321, %320, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
678 :   %323 = and i32 %322, 16, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
679 :   %324 = icmp ne i32 %323, 0, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
680 :   store i1 %324, i1* %AF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
681 :   %325 = trunc i32 %321 to i8, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
682 :   %326 = tail call i8 @llvm.ctpop.i8(i8 %325), !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

683 :   %327 = and i8 %326, 1 : NIL
684 :   %328 = icmp eq i8 %327, 0 : NIL

685 :   store i1 %328, i1* %PF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
686 :   %329 = icmp eq i32 %321, 0, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
687 :   store i1 %329, i1* %ZF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

688 :   %330 = icmp slt i32 %321, 0 : NIL

689 :   store i1 %330, i1* %SF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
690 :   %331 = icmp ult i32 %320, 6, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
691 :   store i1 %331, i1* %CF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)
692 :   %332 = and i32 %322, %320, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

693 :   %333 = icmp slt i32 %332, 0 : NIL

694 :   store i1 %333, i1* %OF_val, !mcsema_real_eip !6 :          <64>	cmpl	$6, -4(%rbp)

695 :   %334 = xor i1 %330, %333 : NIL

696 :   %335 = load i1* %ZF_val, !mcsema_real_eip !7 :          <68>	jle	-89
697 :   %336 = or i1 %335, %334, !mcsema_real_eip !7 :          <68>	jle	-89
698 :   br i1 %336, label %block_0x11, label %block_0x6a.loopexit, !mcsema_real_eip !7 :          <68>	jle	-89
========================================================
Source line mapping for function: mcsema_main
========================================================

1 :   tail call x86_64_sysvcc void @sub_76(%struct.regs* %0) : NIL
2 :   ret void : NIL
