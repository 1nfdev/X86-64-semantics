grep  -A 39  "ListItem"  Output/20011217-1-0.kstate  | sed -e '/RIP/d' 1> /tmp/tmpfiledecrJ 2>&1 
numOfInstrs: 28

	0:	55	push   %rbp
	1:	48 89 e5	mov    %rsp,%rbp
	2:	48 83 ec 10	sub    $0x10,%rsp
	3:	48 b8 00 00 00 00 00 00 f0 3f	movabs $0x3ff0000000000000,%rax
	4:	48 89 45 f8	mov    %rax,-0x8(%rbp)
	5:	48 b8 00 00 00 00 00 00 00 40	movabs $0x4000000000000000,%rax
	6:	48 89 45 f0	mov    %rax,-0x10(%rbp)
	7:	48 8b 45 f8	mov    -0x8(%rbp),%rax
	8:	48 ba 00 00 00 00 00 00 f0 3f	movabs $0x3ff0000000000000,%rdx
	9:	c4 e1 f9 6e c8	vmovq  %rax,%xmm1
	10:	c4 e1 f9 6e d2	vmovq  %rdx,%xmm2
	11:	c5 f3 5c c2	vsubsd %xmm2,%xmm1,%xmm0
	12:	c4 e1 f9 7e c2	vmovq  %xmm0,%rdx
	13:	48 89 55 f8	mov    %rdx,-0x8(%rbp)
	14:	48 8b 55 f0	mov    -0x10(%rbp),%rdx
	15:	c4 e1 f9 6e da	vmovq  %rdx,%xmm3
	16:	c4 e1 f9 6e e0	vmovq  %rax,%xmm4
	17:	c5 f9 2e dc	vucomisd %xmm4,%xmm3
	18:	0f 97 c0	seta   %al
	19:	83 f0 01	xor    $0x1,%eax
	20:	84 c0	test   %al,%al
	21:	74 05	je     0x4001ee <L21>
	22:	bf 00 00 00 00	mov    $0x0,%edi
	23:	e8 2a ff ff ff	callq  0x400122 <exit>
	24:	55	push   %rbp
	25:	48 89 e5	mov    %rsp,%rbp
	26:	89 7d fc	mov    %edi,-0x4(%rbp)
	27:	48 c7 c0 ff ff ff ff	mov    $0xffffffffffffffff,%rax
	28:	ff e0	jmpq   *%rax


Count 0) reg	kstate	xstate		55	push   %rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'248	140737488343360
rbp	64'248	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 1) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'248	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 2) reg	kstate	xstate		48 83 ec 10	sub    $0x10,%rsp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 3) reg	kstate	xstate		48 b8 00 00 00 00 00 00 f0 3f	movabs $0x3ff0000000000000,%rax
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 4) reg	kstate	xstate		48 89 45 f8	mov    %rax,-0x8(%rbp)
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 5) reg	kstate	xstate		48 b8 00 00 00 00 00 00 00 40	movabs $0x4000000000000000,%rax
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 6) reg	kstate	xstate		48 89 45 f0	mov    %rax,-0x10(%rbp)
---------------------
rax	64'4611686018427387904	4611686018427387904
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 7) reg	kstate	xstate		48 8b 45 f8	mov    -0x8(%rbp),%rax
---------------------
rax	64'4611686018427387904	4611686018427387904
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 8) reg	kstate	xstate		48 ba 00 00 00 00 00 00 f0 3f	movabs $0x3ff0000000000000,%rdx
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 9) reg	kstate	xstate		c4 e1 f9 6e c8	vmovq  %rax,%xmm1
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4607182418800017408	4607182418800017408
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 10) reg	kstate	xstate		c4 e1 f9 6e d2	vmovq  %rdx,%xmm2
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4607182418800017408	4607182418800017408
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 11) reg	kstate	xstate		c5 f3 5c c2	vsubsd %xmm2,%xmm1,%xmm0
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4607182418800017408	4607182418800017408
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 12) reg	kstate	xstate		c4 e1 f9 7e c2	vmovq  %xmm0,%rdx
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4607182418800017408	4607182418800017408
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 13) reg	kstate	xstate		48 89 55 f8	mov    %rdx,-0x8(%rbp)
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 14) reg	kstate	xstate		48 8b 55 f0	mov    -0x10(%rbp),%rdx
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 15) reg	kstate	xstate		c4 e1 f9 6e da	vmovq  %rdx,%xmm3
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 16) reg	kstate	xstate		c4 e1 f9 6e e0	vmovq  %rax,%xmm4
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 17) reg	kstate	xstate		c5 f9 2e dc	vucomisd %xmm4,%xmm3
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	1
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 18) reg	kstate	xstate		0f 97 c0	seta   %al
---------------------
rax	64'4607182418800017408	4607182418800017408
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) #then 1'1 #else 1'0 #fi	0
af	1'0	0
zf	#ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi )	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 19) reg	kstate	xstate		83 f0 01	xor    $0x1,%eax
---------------------
rax	concatenateMInt ( 56'17996806323437568 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi )	4607182418800017409
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) #then 1'1 #else 1'0 #fi	0
af	1'0	0
zf	#ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi )	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 20) reg	kstate	xstate		84 c0	test   %al,%al
---------------------
rax	concatenateMInt ( 32'0 , xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) , 32'0 ) #then 1'1 #else 1'0 #fi )	1
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 21) reg	kstate	xstate		74 05	je     0x4001ee <L21>
---------------------
rax	concatenateMInt ( 32'0 , xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 22) reg	kstate	xstate		bf 00 00 00 00	mov    $0x0,%edi
---------------------
rax	concatenateMInt ( 32'0 , xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 23) reg	kstate	xstate		e8 2a ff ff ff	callq  0x400122 <exit>
---------------------
rax	concatenateMInt ( 32'0 , xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'216	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 24) reg	kstate	xstate		55	push   %rbp
---------------------
rax	concatenateMInt ( 32'0 , xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'208	140737488343328
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 25) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	concatenateMInt ( 32'0 , xorMInt ( concatenateMInt ( 24'0 , #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi ) , 32'1 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'208	140737488343320
rbp	64'208	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 26) reg	kstate	xstate		89 7d fc	mov    %edi,-0x4(%rbp)
---------------------
rax	64'-1	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'208	140737488343320
rbp	64'208	140737488343320
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 27) reg	kstate	xstate		48 c7 c0 ff ff ff ff	mov    $0xffffffffffffffff,%rax
---------------------
rax	64'-1	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4611686018427387904	4611686018427387904
rsi	64'0	0
rdi	64'0	0
rsp	64'208	140737488343320
rbp	64'208	140737488343320
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 7 , 8 ) , 1'1 ) , 1'1 ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 6 , 7 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 5 , 6 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 4 , 5 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 3 , 4 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 2 , 3 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 1 , 2 ) , 1'0 ) , 1'1 ) ) ==K eqMInt ( xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	undefMInt	0
zf	#ifMInt eqMInt ( xorMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 8'1 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	xorMInt ( extractMInt ( #ifMInt notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'2 ) #then 1'1 #else 1'0 #fi , 1'1 ) andBool notBool eqMInt ( #ifMInt eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'0 ) orBool eqMInt ( comisd ( 64'4611686018427387904 , 64'4607182418800017408 ) , 2'3 ) #then 1'1 #else 1'0 #fi , 1'1 ) #then 8'1 #else 8'0 #fi , 0 , 1 ) , 1'0 )	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm2	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm3	256'4611686018427387904	0x0000000000000000000000000000000000000000000000004000000000000000
ymm4	256'4607182418800017408	0x0000000000000000000000000000000000000000000000003ff0000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
[4m[1m[34m20011217-1-0 Compare Results :[0m
Failed:[4m[1m[91m20011217-1-0: kstate xstate count unequal[0m
kstates = 1064
xstates = 1102

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 4

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 5

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 6

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 7

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 8

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 9

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 10

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 11

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 12

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 13

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 14

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 15

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 16

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 17

Failed:[4m[1m[91mFail[0m
0 != 1
pf at instrcount: 18

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
cf at instrcount: 19

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
pf at instrcount: 19

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
zf at instrcount: 19

Failed:[4m[1m[91mFail[0m
3ff00000000000 != f0000000000001
rax at instrcount: 19

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
cf at instrcount: 20

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
pf at instrcount: 20

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
zf at instrcount: 20

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 21

Failed:[4m[1m[91mFail[0m
000000 != 000001
zf at instrcount: 21

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 22

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 22

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 22

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 23

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 23

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 23

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 24

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 24

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 24

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 25

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 25

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 25

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 26

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 26

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 26

Failed:[4m[1m[91mFail[0m
ffffffffffffffff != 0000000000000000
rax at instrcount: 26

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 27

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 27

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 27

Failed:[4m[1m[91mFail[0m
ffffffffffffffff != 0000000000000000
rax at instrcount: 27

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
pf at instrcount: 28

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000001
zf at instrcount: 28

Failed:[4m[1m[91mFail[0m
4000000000000000 != 0000000000000000
sf at instrcount: 28

Passed:[4m[1m[92mPassed[0m
