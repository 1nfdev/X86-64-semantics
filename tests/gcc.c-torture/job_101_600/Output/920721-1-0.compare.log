grep  -A 39  "ListItem"  Output/920721-1-0.kstate  | sed -e '/RIP/d' 1> /tmp/tmpfilernHWT 2>&1 
numOfInstrs: 25

	0:	55	push   %rbp
	1:	48 89 e5	mov    %rsp,%rbp
	2:	be ff ff ff ff	mov    $0xffffffff,%esi
	3:	bf 00 80 ff ff	mov    $0xffff8000,%edi
	4:	e8 cc ff ff ff	callq  0x400184 <f>
	5:	55	push   %rbp
	6:	48 89 e5	mov    %rsp,%rbp
	7:	89 fa	mov    %edi,%edx
	8:	89 f0	mov    %esi,%eax
	9:	66 89 55 fc	mov    %dx,-0x4(%rbp)
	10:	66 89 45 f8	mov    %ax,-0x8(%rbp)
	11:	48 0f bf 45 fc	movswq -0x4(%rbp),%rax
	12:	48 0f bf 4d f8	movswq -0x8(%rbp),%rcx
	13:	48 99	cqto   
	14:	48 f7 f9	idiv   %rcx
	15:	5d	pop    %rbp
	16:	c3	retq   
	17:	48 3d 00 80 00 00	cmp    $0x8000,%rax
	18:	74 05	je     0x4001c5 <L23>
	19:	bf 00 00 00 00	mov    $0x0,%edi
	20:	e8 53 ff ff ff	callq  0x400122 <exit>
	21:	55	push   %rbp
	22:	48 89 e5	mov    %rsp,%rbp
	23:	89 7d fc	mov    %edi,-0x4(%rbp)
	24:	48 c7 c0 ff ff ff ff	mov    $0xffffffffffffffff,%rax
	25:	ff e0	jmpq   *%rax


Count 0) reg	kstate	xstate		55	push   %rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'248	140737488343360
rbp	64'248	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 1) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'248	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 2) reg	kstate	xstate		be ff ff ff ff	mov    $0xffffffff,%esi
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 3) reg	kstate	xstate		bf 00 80 ff ff	mov    $0xffff8000,%edi
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'4294967295	4294967295
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 4) reg	kstate	xstate		e8 cc ff ff ff	callq  0x400184 <f>
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 5) reg	kstate	xstate		55	push   %rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'232	140737488343344
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 6) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 7) reg	kstate	xstate		89 fa	mov    %edi,%edx
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 8) reg	kstate	xstate		89 f0	mov    %esi,%eax
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'4294934528	4294934528
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 9) reg	kstate	xstate		66 89 55 fc	mov    %dx,-0x4(%rbp)
---------------------
rax	64'4294967295	4294967295
rbx	64'0	0
rcx	64'0	0
rdx	64'4294934528	4294934528
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 10) reg	kstate	xstate		66 89 45 f8	mov    %ax,-0x8(%rbp)
---------------------
rax	64'4294967295	4294967295
rbx	64'0	0
rcx	64'0	0
rdx	64'4294934528	4294934528
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 11) reg	kstate	xstate		48 0f bf 45 fc	movswq -0x4(%rbp),%rax
---------------------
rax	64'4294967295	4294967295
rbx	64'0	0
rcx	64'0	0
rdx	64'4294934528	4294934528
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 12) reg	kstate	xstate		48 0f bf 4d f8	movswq -0x8(%rbp),%rcx
---------------------
rax	64'-32768	18446744073709518848
rbx	64'0	0
rcx	64'0	0
rdx	64'4294934528	4294934528
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 13) reg	kstate	xstate		48 99	cqto   
---------------------
rax	64'-32768	18446744073709518848
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	64'4294934528	4294934528
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 14) reg	kstate	xstate		48 f7 f9	idiv   %rcx
---------------------
rax	64'-32768	18446744073709518848
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	64'18446744073709551615	18446744073709551615
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 15) reg	kstate	xstate		5d	pop    %rbp
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 16) reg	kstate	xstate		c3	retq   
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'232	140737488343344
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 17) reg	kstate	xstate		48 3d 00 80 00 00	cmp    $0x8000,%rax
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 18) reg	kstate	xstate		74 05	je     0x4001c5 <L23>
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 19) reg	kstate	xstate		bf 00 00 00 00	mov    $0x0,%edi
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	4294934528
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 20) reg	kstate	xstate		e8 53 ff ff ff	callq  0x400122 <exit>
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	0
rsp	64'232	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 21) reg	kstate	xstate		55	push   %rbp
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	0
rsp	64'224	140737488343344
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 22) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	0
rsp	64'224	140737488343336
rbp	64'224	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 23) reg	kstate	xstate		89 7d fc	mov    %edi,-0x4(%rbp)
---------------------
rax	64'-1	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	0
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 24) reg	kstate	xstate		48 c7 c0 ff ff ff ff	mov    $0xffffffffffffffff,%rax
---------------------
rax	64'-1	32768
rbx	64'0	0
rcx	64'-1	18446744073709551615
rdx	idiv_remainder_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 )	0
rsi	64'4294967295	4294967295
rdi	64'4294934528	0
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 64 , 65 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 63 , 64 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 62 , 63 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 61 , 62 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 59 , 60 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 58 , 59 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 57 , 58 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'0 , extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 59 , 60 ) ) , extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 60 , 61 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 65 ) , 64'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) , 0 , 1 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 65'18446744073709518848 , concatenateMInt ( 1'0 , idiv_quotient_int64 ( 128'340282366920938463463374607431768178688 , 64'-1 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
[4m[1m[34m920721-1-0 Compare Results :[0m
Failed:[4m[1m[91m920721-1-0: kstate xstate count unequal[0m
kstates = 950
xstates = 988

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 15

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 16

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 16

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 17

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 17

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 18

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 18

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 19

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 19

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 19

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 19

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 19

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 19

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 19

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 20

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 20

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 20

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 20

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 20

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 20

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 20

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 21

Failed:[4m[1m[91mFail[0m
00000000ffff8000 != 0000000000000000
rdi at instrcount: 21

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 21

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 21

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 21

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 21

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 21

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 21

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 22

Failed:[4m[1m[91mFail[0m
00000000ffff8000 != 0000000000000000
rdi at instrcount: 22

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 22

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 22

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 22

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 22

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 22

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000008000
rax at instrcount: 22

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 23

Failed:[4m[1m[91mFail[0m
00000000ffff8000 != 0000000000000000
rdi at instrcount: 23

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 23

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 23

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 23

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 23

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 23

Failed:[4m[1m[91mFail[0m
ffffffffffffffff != 0000000000008000
rax at instrcount: 23

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 24

Failed:[4m[1m[91mFail[0m
00000000ffff8000 != 0000000000000000
rdi at instrcount: 24

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 24

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 24

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 24

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 24

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 24

Failed:[4m[1m[91mFail[0m
ffffffffffffffff != 0000000000008000
rax at instrcount: 24

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
rdx at instrcount: 25

Failed:[4m[1m[91mFail[0m
00000000ffff8000 != 0000000000000000
rdi at instrcount: 25

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
cf at instrcount: 25

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
pf at instrcount: 25

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 1
zf at instrcount: 25

Failed:[4m[1m[91mFail[0m
18446744073709518848 != 0
sf at instrcount: 25

Failed:[4m[1m[91mFail[0m
ffffffffffffffffffffffffffff8000 != 00000000000000000000000000000000
of at instrcount: 25

Passed:[4m[1m[92mPassed[0m
