// Autogenerated using stratification.
requires "x86-configuration.k"

module ADCB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (adcb R1:Rh, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), addMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(addMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), addMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ADCB-R8-RH-SEMANTICS
  imports ADCB-R8-RH
endmodule
/*
TargetInstr:
adcb %ah, %bl
RWSet:
maybe read:{ %ah %bl %cf }
must read:{ %ah %bl %cf }
maybe write:{ %bl %cf %pf %af %zf %sf %of }
must write:{ %bl %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movsbw %ah, %cx  #  1     0    4      OPC=movsbw_r16_rh
circuit:adcb %cl, %bl    #  2     0x4  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

adcb %ah, %bl

  maybe read:      { %ah %bl %cf }
  must read:       { %ah %bl %cf }
  maybe write:     { %bl %cf %pf %af %zf %sf %of }
  must write:      { %bl %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movb %ah, %cl

Final state:
%rcx/%cl: %rcx_movsbw_r16_rh[63:8] ∘ %rax_movsbw_r16_rh[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_movsbw_r16_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

=====================================
=====================================
Computing circuit for movsbw %ah, %cx

.target:
movb %ah, %cl
movsbl %cl, %ebx
retq 

Initial state:
%rcx/%cx: %rcx_adcb_r8_rh

State for specgen instruction: movsbw %ah, %bx:
%rbx/%bx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Register        -> %bx
  translates to => %cx
Value is               -> (0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0])[15:0]
  after renaming it is => sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0]

Final state
%rcx/%cx: %rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0]

=====================================
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: %rbx_adcb_r8_rh[63:8] ∘ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0]

%cf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:7] = 0x1₁
%of: ((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_r8_rh[7:0][7:7] = 0x1₁) ∧ !((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for adcb %ah, %bl

.target:
movsbw %ah, %cx
adcb %cl, %bl
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: adcb %ah, %bl:
%rbx/%bl: %rbx_adcb_r8_rh[63:8] ∘ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0]

%cf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0][7:7] = 0x1₁
%of: ((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_r8_rh[7:0][7:7] = 0x1₁) ∧ !((%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_adcb_r8_rh[63:8] ∘ ((%cf_adcb_r8_rh ? 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rcx_adcb_r8_rh[63:16] ∘ sign-extend-64(%rax_adcb_r8_rh[15:8])[15:0])[7:0]) + 0x0₁ ∘ %rbx_adcb_r8_rh[7:0])[7:0])[7:0]
  after renaming it is => ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0]

Final state
%rbx/%bl: %rbx[63:8] ∘ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf: !(((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of: (%rax[15:15] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf    : !(((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/